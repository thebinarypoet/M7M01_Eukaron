
./Object/RME：     文件格式 elf64-x86-64


Disassembly of section .text:

ffffffff80101000 <__RME_X64_Mboot_Header>:
ffffffff80101000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
ffffffff80101006:	01 00                	add    %eax,(%rax)
ffffffff80101008:	fe 4f 51             	decb   0x51(%rdi)
ffffffff8010100b:	e4 00                	in     $0x0,%al
ffffffff8010100d:	00 10                	add    %dl,(%rax)
ffffffff8010100f:	00 00                	add    %al,(%rax)
ffffffff80101011:	00 10                	add    %dl,(%rax)
ffffffff80101013:	00 00                	add    %al,(%rax)
ffffffff80101015:	f0 21 00             	lock and %eax,(%rax)
ffffffff80101018:	38 87 22 00 00 90    	cmp    %al,-0x6fffffde(%rdi)
ffffffff8010101e:	10 00                	adc    %al,(%rax)
ffffffff80101020:	90                   	nop
ffffffff80101021:	e9 da 0f 00 00       	jmp    ffffffff80102000 <__RME_X64_Mboot_Header+0x1000>
ffffffff80101026:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010102d:	00 00 00 00 
ffffffff80101031:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101038:	00 00 00 00 
ffffffff8010103c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101043:	00 00 00 00 
ffffffff80101047:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010104e:	00 00 00 00 
ffffffff80101052:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101059:	00 00 00 00 
ffffffff8010105d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101064:	00 00 00 00 
ffffffff80101068:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010106f:	00 00 00 00 
ffffffff80101073:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010107a:	00 00 00 00 
ffffffff8010107e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101085:	00 00 00 00 
ffffffff80101089:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101090:	00 00 00 00 
ffffffff80101094:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010109b:	00 00 00 00 
ffffffff8010109f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801010a6:	00 00 00 00 
ffffffff801010aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801010b1:	00 00 00 00 
ffffffff801010b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801010bc:	00 00 00 00 
ffffffff801010c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801010c7:	00 00 00 00 
ffffffff801010cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801010d2:	00 00 00 00 
ffffffff801010d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801010dd:	00 00 00 00 
ffffffff801010e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801010e8:	00 00 00 00 
ffffffff801010ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801010f3:	00 00 00 00 
ffffffff801010f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801010fe:	00 00 00 00 
ffffffff80101102:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101109:	00 00 00 00 
ffffffff8010110d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101114:	00 00 00 00 
ffffffff80101118:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010111f:	00 00 00 00 
ffffffff80101123:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010112a:	00 00 00 00 
ffffffff8010112e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101135:	00 00 00 00 
ffffffff80101139:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101140:	00 00 00 00 
ffffffff80101144:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010114b:	00 00 00 00 
ffffffff8010114f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101156:	00 00 00 00 
ffffffff8010115a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101161:	00 00 00 00 
ffffffff80101165:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010116c:	00 00 00 00 
ffffffff80101170:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101177:	00 00 00 00 
ffffffff8010117b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101182:	00 00 00 00 
ffffffff80101186:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010118d:	00 00 00 00 
ffffffff80101191:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101198:	00 00 00 00 
ffffffff8010119c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801011a3:	00 00 00 00 
ffffffff801011a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801011ae:	00 00 00 00 
ffffffff801011b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801011b9:	00 00 00 00 
ffffffff801011bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801011c4:	00 00 00 00 
ffffffff801011c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801011cf:	00 00 00 00 
ffffffff801011d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801011da:	00 00 00 00 
ffffffff801011de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801011e5:	00 00 00 00 
ffffffff801011e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801011f0:	00 00 00 00 
ffffffff801011f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801011fb:	00 00 00 00 
ffffffff801011ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101206:	00 00 00 00 
ffffffff8010120a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101211:	00 00 00 00 
ffffffff80101215:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010121c:	00 00 00 00 
ffffffff80101220:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101227:	00 00 00 00 
ffffffff8010122b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101232:	00 00 00 00 
ffffffff80101236:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010123d:	00 00 00 00 
ffffffff80101241:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101248:	00 00 00 00 
ffffffff8010124c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101253:	00 00 00 00 
ffffffff80101257:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010125e:	00 00 00 00 
ffffffff80101262:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101269:	00 00 00 00 
ffffffff8010126d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101274:	00 00 00 00 
ffffffff80101278:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010127f:	00 00 00 00 
ffffffff80101283:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010128a:	00 00 00 00 
ffffffff8010128e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101295:	00 00 00 00 
ffffffff80101299:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801012a0:	00 00 00 00 
ffffffff801012a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801012ab:	00 00 00 00 
ffffffff801012af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801012b6:	00 00 00 00 
ffffffff801012ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801012c1:	00 00 00 00 
ffffffff801012c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801012cc:	00 00 00 00 
ffffffff801012d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801012d7:	00 00 00 00 
ffffffff801012db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801012e2:	00 00 00 00 
ffffffff801012e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801012ed:	00 00 00 00 
ffffffff801012f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801012f8:	00 00 00 00 
ffffffff801012fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101303:	00 00 00 00 
ffffffff80101307:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010130e:	00 00 00 00 
ffffffff80101312:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101319:	00 00 00 00 
ffffffff8010131d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101324:	00 00 00 00 
ffffffff80101328:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010132f:	00 00 00 00 
ffffffff80101333:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010133a:	00 00 00 00 
ffffffff8010133e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101345:	00 00 00 00 
ffffffff80101349:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101350:	00 00 00 00 
ffffffff80101354:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010135b:	00 00 00 00 
ffffffff8010135f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101366:	00 00 00 00 
ffffffff8010136a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101371:	00 00 00 00 
ffffffff80101375:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010137c:	00 00 00 00 
ffffffff80101380:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101387:	00 00 00 00 
ffffffff8010138b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101392:	00 00 00 00 
ffffffff80101396:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010139d:	00 00 00 00 
ffffffff801013a1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801013a8:	00 00 00 00 
ffffffff801013ac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801013b3:	00 00 00 00 
ffffffff801013b7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801013be:	00 00 00 00 
ffffffff801013c2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801013c9:	00 00 00 00 
ffffffff801013cd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801013d4:	00 00 00 00 
ffffffff801013d8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801013df:	00 00 00 00 
ffffffff801013e3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801013ea:	00 00 00 00 
ffffffff801013ee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801013f5:	00 00 00 00 
ffffffff801013f9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101400:	00 00 00 00 
ffffffff80101404:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010140b:	00 00 00 00 
ffffffff8010140f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101416:	00 00 00 00 
ffffffff8010141a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101421:	00 00 00 00 
ffffffff80101425:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010142c:	00 00 00 00 
ffffffff80101430:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101437:	00 00 00 00 
ffffffff8010143b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101442:	00 00 00 00 
ffffffff80101446:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010144d:	00 00 00 00 
ffffffff80101451:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101458:	00 00 00 00 
ffffffff8010145c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101463:	00 00 00 00 
ffffffff80101467:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010146e:	00 00 00 00 
ffffffff80101472:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101479:	00 00 00 00 
ffffffff8010147d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101484:	00 00 00 00 
ffffffff80101488:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010148f:	00 00 00 00 
ffffffff80101493:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010149a:	00 00 00 00 
ffffffff8010149e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801014a5:	00 00 00 00 
ffffffff801014a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801014b0:	00 00 00 00 
ffffffff801014b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801014bb:	00 00 00 00 
ffffffff801014bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801014c6:	00 00 00 00 
ffffffff801014ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801014d1:	00 00 00 00 
ffffffff801014d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801014dc:	00 00 00 00 
ffffffff801014e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801014e7:	00 00 00 00 
ffffffff801014eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801014f2:	00 00 00 00 
ffffffff801014f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801014fd:	00 00 00 00 
ffffffff80101501:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101508:	00 00 00 00 
ffffffff8010150c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101513:	00 00 00 00 
ffffffff80101517:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010151e:	00 00 00 00 
ffffffff80101522:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101529:	00 00 00 00 
ffffffff8010152d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101534:	00 00 00 00 
ffffffff80101538:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010153f:	00 00 00 00 
ffffffff80101543:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010154a:	00 00 00 00 
ffffffff8010154e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101555:	00 00 00 00 
ffffffff80101559:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101560:	00 00 00 00 
ffffffff80101564:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010156b:	00 00 00 00 
ffffffff8010156f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101576:	00 00 00 00 
ffffffff8010157a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101581:	00 00 00 00 
ffffffff80101585:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010158c:	00 00 00 00 
ffffffff80101590:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101597:	00 00 00 00 
ffffffff8010159b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801015a2:	00 00 00 00 
ffffffff801015a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801015ad:	00 00 00 00 
ffffffff801015b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801015b8:	00 00 00 00 
ffffffff801015bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801015c3:	00 00 00 00 
ffffffff801015c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801015ce:	00 00 00 00 
ffffffff801015d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801015d9:	00 00 00 00 
ffffffff801015dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801015e4:	00 00 00 00 
ffffffff801015e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801015ef:	00 00 00 00 
ffffffff801015f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801015fa:	00 00 00 00 
ffffffff801015fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101605:	00 00 00 00 
ffffffff80101609:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101610:	00 00 00 00 
ffffffff80101614:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010161b:	00 00 00 00 
ffffffff8010161f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101626:	00 00 00 00 
ffffffff8010162a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101631:	00 00 00 00 
ffffffff80101635:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010163c:	00 00 00 00 
ffffffff80101640:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101647:	00 00 00 00 
ffffffff8010164b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101652:	00 00 00 00 
ffffffff80101656:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010165d:	00 00 00 00 
ffffffff80101661:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101668:	00 00 00 00 
ffffffff8010166c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101673:	00 00 00 00 
ffffffff80101677:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010167e:	00 00 00 00 
ffffffff80101682:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101689:	00 00 00 00 
ffffffff8010168d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101694:	00 00 00 00 
ffffffff80101698:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010169f:	00 00 00 00 
ffffffff801016a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801016aa:	00 00 00 00 
ffffffff801016ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801016b5:	00 00 00 00 
ffffffff801016b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801016c0:	00 00 00 00 
ffffffff801016c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801016cb:	00 00 00 00 
ffffffff801016cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801016d6:	00 00 00 00 
ffffffff801016da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801016e1:	00 00 00 00 
ffffffff801016e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801016ec:	00 00 00 00 
ffffffff801016f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801016f7:	00 00 00 00 
ffffffff801016fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101702:	00 00 00 00 
ffffffff80101706:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010170d:	00 00 00 00 
ffffffff80101711:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101718:	00 00 00 00 
ffffffff8010171c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101723:	00 00 00 00 
ffffffff80101727:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010172e:	00 00 00 00 
ffffffff80101732:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101739:	00 00 00 00 
ffffffff8010173d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101744:	00 00 00 00 
ffffffff80101748:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010174f:	00 00 00 00 
ffffffff80101753:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010175a:	00 00 00 00 
ffffffff8010175e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101765:	00 00 00 00 
ffffffff80101769:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101770:	00 00 00 00 
ffffffff80101774:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010177b:	00 00 00 00 
ffffffff8010177f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101786:	00 00 00 00 
ffffffff8010178a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101791:	00 00 00 00 
ffffffff80101795:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010179c:	00 00 00 00 
ffffffff801017a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801017a7:	00 00 00 00 
ffffffff801017ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801017b2:	00 00 00 00 
ffffffff801017b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801017bd:	00 00 00 00 
ffffffff801017c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801017c8:	00 00 00 00 
ffffffff801017cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801017d3:	00 00 00 00 
ffffffff801017d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801017de:	00 00 00 00 
ffffffff801017e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801017e9:	00 00 00 00 
ffffffff801017ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801017f4:	00 00 00 00 
ffffffff801017f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801017ff:	00 00 00 00 
ffffffff80101803:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010180a:	00 00 00 00 
ffffffff8010180e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101815:	00 00 00 00 
ffffffff80101819:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101820:	00 00 00 00 
ffffffff80101824:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010182b:	00 00 00 00 
ffffffff8010182f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101836:	00 00 00 00 
ffffffff8010183a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101841:	00 00 00 00 
ffffffff80101845:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010184c:	00 00 00 00 
ffffffff80101850:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101857:	00 00 00 00 
ffffffff8010185b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101862:	00 00 00 00 
ffffffff80101866:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010186d:	00 00 00 00 
ffffffff80101871:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101878:	00 00 00 00 
ffffffff8010187c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101883:	00 00 00 00 
ffffffff80101887:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010188e:	00 00 00 00 
ffffffff80101892:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101899:	00 00 00 00 
ffffffff8010189d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801018a4:	00 00 00 00 
ffffffff801018a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801018af:	00 00 00 00 
ffffffff801018b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801018ba:	00 00 00 00 
ffffffff801018be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801018c5:	00 00 00 00 
ffffffff801018c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801018d0:	00 00 00 00 
ffffffff801018d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801018db:	00 00 00 00 
ffffffff801018df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801018e6:	00 00 00 00 
ffffffff801018ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801018f1:	00 00 00 00 
ffffffff801018f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801018fc:	00 00 00 00 
ffffffff80101900:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101907:	00 00 00 00 
ffffffff8010190b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101912:	00 00 00 00 
ffffffff80101916:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010191d:	00 00 00 00 
ffffffff80101921:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101928:	00 00 00 00 
ffffffff8010192c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101933:	00 00 00 00 
ffffffff80101937:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010193e:	00 00 00 00 
ffffffff80101942:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101949:	00 00 00 00 
ffffffff8010194d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101954:	00 00 00 00 
ffffffff80101958:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010195f:	00 00 00 00 
ffffffff80101963:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010196a:	00 00 00 00 
ffffffff8010196e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101975:	00 00 00 00 
ffffffff80101979:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101980:	00 00 00 00 
ffffffff80101984:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010198b:	00 00 00 00 
ffffffff8010198f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101996:	00 00 00 00 
ffffffff8010199a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801019a1:	00 00 00 00 
ffffffff801019a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801019ac:	00 00 00 00 
ffffffff801019b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801019b7:	00 00 00 00 
ffffffff801019bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801019c2:	00 00 00 00 
ffffffff801019c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801019cd:	00 00 00 00 
ffffffff801019d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801019d8:	00 00 00 00 
ffffffff801019dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801019e3:	00 00 00 00 
ffffffff801019e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801019ee:	00 00 00 00 
ffffffff801019f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801019f9:	00 00 00 00 
ffffffff801019fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a04:	00 00 00 00 
ffffffff80101a08:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a0f:	00 00 00 00 
ffffffff80101a13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a1a:	00 00 00 00 
ffffffff80101a1e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a25:	00 00 00 00 
ffffffff80101a29:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a30:	00 00 00 00 
ffffffff80101a34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a3b:	00 00 00 00 
ffffffff80101a3f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a46:	00 00 00 00 
ffffffff80101a4a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a51:	00 00 00 00 
ffffffff80101a55:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a5c:	00 00 00 00 
ffffffff80101a60:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a67:	00 00 00 00 
ffffffff80101a6b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a72:	00 00 00 00 
ffffffff80101a76:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a7d:	00 00 00 00 
ffffffff80101a81:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a88:	00 00 00 00 
ffffffff80101a8c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a93:	00 00 00 00 
ffffffff80101a97:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101a9e:	00 00 00 00 
ffffffff80101aa2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101aa9:	00 00 00 00 
ffffffff80101aad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ab4:	00 00 00 00 
ffffffff80101ab8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101abf:	00 00 00 00 
ffffffff80101ac3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101aca:	00 00 00 00 
ffffffff80101ace:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ad5:	00 00 00 00 
ffffffff80101ad9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ae0:	00 00 00 00 
ffffffff80101ae4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101aeb:	00 00 00 00 
ffffffff80101aef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101af6:	00 00 00 00 
ffffffff80101afa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b01:	00 00 00 00 
ffffffff80101b05:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b0c:	00 00 00 00 
ffffffff80101b10:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b17:	00 00 00 00 
ffffffff80101b1b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b22:	00 00 00 00 
ffffffff80101b26:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b2d:	00 00 00 00 
ffffffff80101b31:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b38:	00 00 00 00 
ffffffff80101b3c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b43:	00 00 00 00 
ffffffff80101b47:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b4e:	00 00 00 00 
ffffffff80101b52:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b59:	00 00 00 00 
ffffffff80101b5d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b64:	00 00 00 00 
ffffffff80101b68:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b6f:	00 00 00 00 
ffffffff80101b73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b7a:	00 00 00 00 
ffffffff80101b7e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b85:	00 00 00 00 
ffffffff80101b89:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b90:	00 00 00 00 
ffffffff80101b94:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101b9b:	00 00 00 00 
ffffffff80101b9f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ba6:	00 00 00 00 
ffffffff80101baa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101bb1:	00 00 00 00 
ffffffff80101bb5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101bbc:	00 00 00 00 
ffffffff80101bc0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101bc7:	00 00 00 00 
ffffffff80101bcb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101bd2:	00 00 00 00 
ffffffff80101bd6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101bdd:	00 00 00 00 
ffffffff80101be1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101be8:	00 00 00 00 
ffffffff80101bec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101bf3:	00 00 00 00 
ffffffff80101bf7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101bfe:	00 00 00 00 
ffffffff80101c02:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c09:	00 00 00 00 
ffffffff80101c0d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c14:	00 00 00 00 
ffffffff80101c18:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c1f:	00 00 00 00 
ffffffff80101c23:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c2a:	00 00 00 00 
ffffffff80101c2e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c35:	00 00 00 00 
ffffffff80101c39:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c40:	00 00 00 00 
ffffffff80101c44:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c4b:	00 00 00 00 
ffffffff80101c4f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c56:	00 00 00 00 
ffffffff80101c5a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c61:	00 00 00 00 
ffffffff80101c65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c6c:	00 00 00 00 
ffffffff80101c70:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c77:	00 00 00 00 
ffffffff80101c7b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c82:	00 00 00 00 
ffffffff80101c86:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c8d:	00 00 00 00 
ffffffff80101c91:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101c98:	00 00 00 00 
ffffffff80101c9c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ca3:	00 00 00 00 
ffffffff80101ca7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101cae:	00 00 00 00 
ffffffff80101cb2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101cb9:	00 00 00 00 
ffffffff80101cbd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101cc4:	00 00 00 00 
ffffffff80101cc8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ccf:	00 00 00 00 
ffffffff80101cd3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101cda:	00 00 00 00 
ffffffff80101cde:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ce5:	00 00 00 00 
ffffffff80101ce9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101cf0:	00 00 00 00 
ffffffff80101cf4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101cfb:	00 00 00 00 
ffffffff80101cff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d06:	00 00 00 00 
ffffffff80101d0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d11:	00 00 00 00 
ffffffff80101d15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d1c:	00 00 00 00 
ffffffff80101d20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d27:	00 00 00 00 
ffffffff80101d2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d32:	00 00 00 00 
ffffffff80101d36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d3d:	00 00 00 00 
ffffffff80101d41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d48:	00 00 00 00 
ffffffff80101d4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d53:	00 00 00 00 
ffffffff80101d57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d5e:	00 00 00 00 
ffffffff80101d62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d69:	00 00 00 00 
ffffffff80101d6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d74:	00 00 00 00 
ffffffff80101d78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d7f:	00 00 00 00 
ffffffff80101d83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d8a:	00 00 00 00 
ffffffff80101d8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101d95:	00 00 00 00 
ffffffff80101d99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101da0:	00 00 00 00 
ffffffff80101da4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101dab:	00 00 00 00 
ffffffff80101daf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101db6:	00 00 00 00 
ffffffff80101dba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101dc1:	00 00 00 00 
ffffffff80101dc5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101dcc:	00 00 00 00 
ffffffff80101dd0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101dd7:	00 00 00 00 
ffffffff80101ddb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101de2:	00 00 00 00 
ffffffff80101de6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ded:	00 00 00 00 
ffffffff80101df1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101df8:	00 00 00 00 
ffffffff80101dfc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e03:	00 00 00 00 
ffffffff80101e07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e0e:	00 00 00 00 
ffffffff80101e12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e19:	00 00 00 00 
ffffffff80101e1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e24:	00 00 00 00 
ffffffff80101e28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e2f:	00 00 00 00 
ffffffff80101e33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e3a:	00 00 00 00 
ffffffff80101e3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e45:	00 00 00 00 
ffffffff80101e49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e50:	00 00 00 00 
ffffffff80101e54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e5b:	00 00 00 00 
ffffffff80101e5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e66:	00 00 00 00 
ffffffff80101e6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e71:	00 00 00 00 
ffffffff80101e75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e7c:	00 00 00 00 
ffffffff80101e80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e87:	00 00 00 00 
ffffffff80101e8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e92:	00 00 00 00 
ffffffff80101e96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101e9d:	00 00 00 00 
ffffffff80101ea1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ea8:	00 00 00 00 
ffffffff80101eac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101eb3:	00 00 00 00 
ffffffff80101eb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ebe:	00 00 00 00 
ffffffff80101ec2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ec9:	00 00 00 00 
ffffffff80101ecd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ed4:	00 00 00 00 
ffffffff80101ed8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101edf:	00 00 00 00 
ffffffff80101ee3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101eea:	00 00 00 00 
ffffffff80101eee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ef5:	00 00 00 00 
ffffffff80101ef9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f00:	00 00 00 00 
ffffffff80101f04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f0b:	00 00 00 00 
ffffffff80101f0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f16:	00 00 00 00 
ffffffff80101f1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f21:	00 00 00 00 
ffffffff80101f25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f2c:	00 00 00 00 
ffffffff80101f30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f37:	00 00 00 00 
ffffffff80101f3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f42:	00 00 00 00 
ffffffff80101f46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f4d:	00 00 00 00 
ffffffff80101f51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f58:	00 00 00 00 
ffffffff80101f5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f63:	00 00 00 00 
ffffffff80101f67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f6e:	00 00 00 00 
ffffffff80101f72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f79:	00 00 00 00 
ffffffff80101f7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f84:	00 00 00 00 
ffffffff80101f88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f8f:	00 00 00 00 
ffffffff80101f93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101f9a:	00 00 00 00 
ffffffff80101f9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101fa5:	00 00 00 00 
ffffffff80101fa9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101fb0:	00 00 00 00 
ffffffff80101fb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101fbb:	00 00 00 00 
ffffffff80101fbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101fc6:	00 00 00 00 
ffffffff80101fca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101fd1:	00 00 00 00 
ffffffff80101fd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101fdc:	00 00 00 00 
ffffffff80101fe0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101fe7:	00 00 00 00 
ffffffff80101feb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80101ff2:	00 00 00 00 
ffffffff80101ff6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80101ffd:	00 00 00 
	...

ffffffff80109000 <__RME_X64_Mboot_Entry>:
/* The entry point after the bootloader finishes *****************************/
    .code32
    .align              16
__RME_X64_Mboot_Entry:
     /* EBX contains Multiboot data structure, let's relocate it to some other places */
     MOV                %EBX,%ESI
ffffffff80109000:	89 de                	mov    %ebx,%esi
     /* Zero 7 pages for our bootstrap page tables, PML4 @ 0x101000 */
     CLD
ffffffff80109002:	fc                   	cld
     XOR                %EAX,%EAX
ffffffff80109003:	31 c0                	xor    %eax,%eax
     MOV                $0x101000,%EDI
ffffffff80109005:	bf 00 10 10 00       	mov    $0x101000,%edi
     MOV                $0x7000,%ECX
ffffffff8010900a:	b9 00 70 00 00       	mov    $0x7000,%ecx
     REP STOSB
ffffffff8010900f:	f3 aa                	rep stos %al,%es:(%rdi)
     /* PML4[0] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff80109011:	b8 03 20 10 00       	mov    $0x102003,%eax
     MOV                %EAX,0x101000
ffffffff80109016:	a3 00 10 10 00 b8 03 	movabs %eax,0x102003b800101000
ffffffff8010901d:	20 10 
     /* PML4[256] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff8010901f:	00 a3 00 18 10 00    	add    %ah,0x101800(%rbx)
     MOV                %EAX,0x101800
     /* PML4[511] -> PDP-B @ 0x103000 */
     MOV                $(0x103000|3),%EAX
ffffffff80109025:	b8 03 30 10 00       	mov    $0x103003,%eax
     MOV                %EAX,0x101FF8
ffffffff8010902a:	a3 f8 1f 10 00 b8 03 	movabs %eax,0x104003b800101ff8
ffffffff80109031:	40 10 
     /* PDP-A[0] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff80109033:	00 a3 00 20 10 00    	add    %ah,0x102000(%rbx)
     MOV                %EAX,0x102000
     /* PDP-A[1] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80109039:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x102008
ffffffff8010903e:	a3 08 20 10 00 b8 03 	movabs %eax,0x106003b800102008
ffffffff80109045:	60 10 
     /* PDP-A[2] -> PDE-C @ 0x106000 */
     MOV                $(0x106000|3),%EAX
ffffffff80109047:	00 a3 10 20 10 00    	add    %ah,0x102010(%rbx)
     MOV                %EAX,0x102010
     /* PDP-A[3] -> PDE-D @ 0x107000 unbufferable uncacheable */
     MOV                $(0x107000|3|0x18),%EAX
ffffffff8010904d:	b8 1b 70 10 00       	mov    $0x10701b,%eax
     MOV                %EAX,0x102018
ffffffff80109052:	a3 18 20 10 00 b8 03 	movabs %eax,0x104003b800102018
ffffffff80109059:	40 10 
     /* PDP-B[510] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff8010905b:	00 a3 f0 3f 10 00    	add    %ah,0x103ff0(%rbx)
     MOV                %EAX,0x103FF0
     /* PDP-B[511] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80109061:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x103FF8
ffffffff80109066:	a3 f8 3f 10 00 b8 83 	movabs %eax,0x83b800103ff8
ffffffff8010906d:	00 00 
     /* PDE-A/B/C/D [0..511/0...511/0..511/0..511] -> 0..4094MB */
     MOV                $(0x83),%EAX
ffffffff8010906f:	00 bb 00 40 10 00    	add    %bh,0x104000(%rbx)
     MOV                $0x104000,%EBX
     MOV                $(512*4),%ECX
ffffffff80109075:	b9 00 08 00 00       	mov    $0x800,%ecx

ffffffff8010907a <PDE_Loop>:
PDE_Loop:
     MOV                %EAX,(%EBX)
ffffffff8010907a:	89 03                	mov    %eax,(%rbx)
     ADD                $0x200000,%EAX
ffffffff8010907c:	05 00 00 20 00       	add    $0x200000,%eax
     ADD                $0x8,%EBX
ffffffff80109081:	83 c3 08             	add    $0x8,%ebx
     DEC                %ECX
ffffffff80109084:	49 75 f3             	rex.WB jne ffffffff8010907a <PDE_Loop>
     JNZ                PDE_Loop
	 /* Clear ebx for initial processor boot.
      * When secondary processors boot, they'll call through
      * __RME_X64_SMP_Boot, but with a nonzero ebx.
      * We'll reuse these bootstrap pagetables and GDT. */
     XOR                %EBX,%EBX
ffffffff80109087:	31 db                	xor    %ebx,%ebx

ffffffff80109089 <__RME_X64_SMP_Boot_32>:
     /* SMP boot will run directly from here */
__RME_X64_SMP_Boot_32:
     /* CR3 -> PML4 @ 0x101000 */
     MOV                $0x101000,%EAX
ffffffff80109089:	b8 00 10 10 00       	mov    $0x101000,%eax
     MOV                %EAX,%CR3
ffffffff8010908e:	0f 22 d8             	mov    %rax,%cr3
     /* Load GDT */
     LGDT               (Boot_GDT_Desc-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff80109091:	0f 01 15 28 81 10 00 	lgdt   0x108128(%rip)        # ffffffff802111c0 <_RME_Thd_Boot_Crt+0x180>
     /* Enable PAE - CR4.PAE=1 */
     MOV                %CR4,%EAX
ffffffff80109098:	0f 20 e0             	mov    %cr4,%rax
     BTS                $5,%EAX
ffffffff8010909b:	0f ba e8 05          	bts    $0x5,%eax
     MOV                %EAX,%CR4
ffffffff8010909f:	0f 22 e0             	mov    %rax,%cr4
     /* Enable long mode and no execute bit - EFER.LME=1, EFER.NXE=1 */
     MOV                $0xC0000080,%ECX
ffffffff801090a2:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
     RDMSR
ffffffff801090a7:	0f 32                	rdmsr
     BTS                $8,%EAX
ffffffff801090a9:	0f ba e8 08          	bts    $0x8,%eax
     BTS                $11,%EAX
ffffffff801090ad:	0f ba e8 0b          	bts    $0xb,%eax
     WRMSR
ffffffff801090b1:	0f 30                	wrmsr
     /* Enable paging */
     MOV                %CR0,%EAX
ffffffff801090b3:	0f 20 c0             	mov    %cr0,%rax
     BTS                $31,%EAX
ffffffff801090b6:	0f ba e8 1f          	bts    $0x1f,%eax
     MOV                %EAX,%CR0
ffffffff801090ba:	0f 22 c0             	mov    %rax,%cr0
     /* Enable PCID - CR4.PCIDE=1 FIXME: this made things slower - due to extra logic for PCID processing *//*
     MOV                %CR4,%EAX
     BTS                $17,%EAX
     MOV                %EAX,%CR4 */
     /* shift to 64bit segment */
     LJMP               $8,$(Boot_Low_64-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff801090bd:	ea                   	(bad)
ffffffff801090be:	d0 80 10 00 08 00    	rolb   $1,0x80010(%rax)
ffffffff801090c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801090cb:	00 00 00 00 
ffffffff801090cf:	90                   	nop

ffffffff801090d0 <Boot_Low_64>:

/* Now we are in 64-bit mode *************************************************/
    .align              16
    .code64
Boot_Low_64:
    movq                $Boot_High_64,%RAX
ffffffff801090d0:	48 c7 c0 d9 90 10 80 	mov    $0xffffffff801090d9,%rax
    jmp                 *%RAX
ffffffff801090d7:	ff e0                	jmp    *%rax

ffffffff801090d9 <_start>:
_start:
Boot_High_64:
    /* ensure data segment registers are sane - zero out all of them */
    XOR                 %RAX,%RAX
ffffffff801090d9:	48 31 c0             	xor    %rax,%rax
    /* Below are all 16-bit moves */
    MOV                 %AX,%SS
ffffffff801090dc:	8e d0                	mov    %eax,%ss
    MOV                 %AX,%DS
ffffffff801090de:	8e d8                	mov    %eax,%ds
    MOV                 %AX,%ES
ffffffff801090e0:	8e c0                	mov    %eax,%es
    MOV                 %AX,%FS
ffffffff801090e2:	8e e0                	mov    %eax,%fs
    MOV                 %AX,%GS
ffffffff801090e4:	8e e8                	mov    %eax,%gs
    /* Check to see if we're booting a secondary core */
    TEST                %EBX,%EBX
ffffffff801090e6:	85 db                	test   %ebx,%ebx
    JNZ                 Boot_SMP_64
ffffffff801090e8:	75 14                	jne    ffffffff801090fe <Boot_SMP_64>
    /* Setup initial stack - this is hard-coded at low memory */
    MOV                 $__RME_X64_Kern_Boot_Stack,%RAX
ffffffff801090ea:	48 c7 c0 00 c8 20 80 	mov    $0xffffffff8020c800,%rax
    MOV                 %RAX,%RSP
ffffffff801090f1:	48 89 c4             	mov    %rax,%rsp
    /* Pass the physical address of RSI to it */
    MOV                 %RSI,%RDI
ffffffff801090f4:	48 89 f7             	mov    %rsi,%rdi
    JMP                 main
ffffffff801090f7:	e9 54 29 11 00       	jmp    ffffffff8021ba50 <main>
    JMP                 .
ffffffff801090fc:	eb fe                	jmp    ffffffff801090fc <_start+0x23>

ffffffff801090fe <Boot_SMP_64>:
Boot_SMP_64:
    MOV                 $0x7000,%RAX
ffffffff801090fe:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax
    MOV                 -16(%RAX),%RSP
ffffffff80109105:	48 8b 60 f0          	mov    -0x10(%rax),%rsp
    JMP                 __RME_SMP_Low_Level_Init
ffffffff80109109:	e9 42 1c 11 00       	jmp    ffffffff8021ad50 <__RME_SMP_Low_Level_Init>
    JMP                 .
ffffffff8010910e:	eb fe                	jmp    ffffffff8010910e <Boot_SMP_64+0x10>

ffffffff80109110 <Boot_GDT>:
	...
ffffffff8010911c:	00 98 20 00 00 00    	add    %bl,0x20(%rax)
ffffffff80109122:	00 00                	add    %al,(%rax)
ffffffff80109124:	00                   	.byte 0
ffffffff80109125:	90                   	nop
	...

ffffffff80109128 <Boot_GDT_Desc>:
ffffffff80109128:	17                   	(bad)
ffffffff80109129:	00 10                	add    %dl,(%rax)
ffffffff8010912b:	81 10 00 00 00 00    	adcl   $0x0,(%rax)
ffffffff80109131:	00 90 66 66 2e 0f    	add    %dl,0xf2e6666(%rax)
ffffffff80109137:	1f                   	(bad)
ffffffff80109138:	84 00                	test   %al,(%rax)
ffffffff8010913a:	00 00                	add    %al,(%rax)
ffffffff8010913c:	00 00                	add    %al,(%rax)
ffffffff8010913e:	66 90                	xchg   %ax,%ax
ffffffff80109140:	90                   	nop
ffffffff80109141:	e9 ba 0e 00 00       	jmp    ffffffff8010a000 <RME_X64_Kpgt>
ffffffff80109146:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010914d:	00 00 00 00 
ffffffff80109151:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109158:	00 00 00 00 
ffffffff8010915c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109163:	00 00 00 00 
ffffffff80109167:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010916e:	00 00 00 00 
ffffffff80109172:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109179:	00 00 00 00 
ffffffff8010917d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109184:	00 00 00 00 
ffffffff80109188:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010918f:	00 00 00 00 
ffffffff80109193:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010919a:	00 00 00 00 
ffffffff8010919e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801091a5:	00 00 00 00 
ffffffff801091a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801091b0:	00 00 00 00 
ffffffff801091b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801091bb:	00 00 00 00 
ffffffff801091bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801091c6:	00 00 00 00 
ffffffff801091ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801091d1:	00 00 00 00 
ffffffff801091d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801091dc:	00 00 00 00 
ffffffff801091e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801091e7:	00 00 00 00 
ffffffff801091eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801091f2:	00 00 00 00 
ffffffff801091f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801091fd:	00 00 00 00 
ffffffff80109201:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109208:	00 00 00 00 
ffffffff8010920c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109213:	00 00 00 00 
ffffffff80109217:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010921e:	00 00 00 00 
ffffffff80109222:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109229:	00 00 00 00 
ffffffff8010922d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109234:	00 00 00 00 
ffffffff80109238:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010923f:	00 00 00 00 
ffffffff80109243:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010924a:	00 00 00 00 
ffffffff8010924e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109255:	00 00 00 00 
ffffffff80109259:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109260:	00 00 00 00 
ffffffff80109264:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010926b:	00 00 00 00 
ffffffff8010926f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109276:	00 00 00 00 
ffffffff8010927a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109281:	00 00 00 00 
ffffffff80109285:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010928c:	00 00 00 00 
ffffffff80109290:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109297:	00 00 00 00 
ffffffff8010929b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801092a2:	00 00 00 00 
ffffffff801092a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801092ad:	00 00 00 00 
ffffffff801092b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801092b8:	00 00 00 00 
ffffffff801092bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801092c3:	00 00 00 00 
ffffffff801092c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801092ce:	00 00 00 00 
ffffffff801092d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801092d9:	00 00 00 00 
ffffffff801092dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801092e4:	00 00 00 00 
ffffffff801092e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801092ef:	00 00 00 00 
ffffffff801092f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801092fa:	00 00 00 00 
ffffffff801092fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109305:	00 00 00 00 
ffffffff80109309:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109310:	00 00 00 00 
ffffffff80109314:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010931b:	00 00 00 00 
ffffffff8010931f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109326:	00 00 00 00 
ffffffff8010932a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109331:	00 00 00 00 
ffffffff80109335:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010933c:	00 00 00 00 
ffffffff80109340:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109347:	00 00 00 00 
ffffffff8010934b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109352:	00 00 00 00 
ffffffff80109356:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010935d:	00 00 00 00 
ffffffff80109361:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109368:	00 00 00 00 
ffffffff8010936c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109373:	00 00 00 00 
ffffffff80109377:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010937e:	00 00 00 00 
ffffffff80109382:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109389:	00 00 00 00 
ffffffff8010938d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109394:	00 00 00 00 
ffffffff80109398:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010939f:	00 00 00 00 
ffffffff801093a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801093aa:	00 00 00 00 
ffffffff801093ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801093b5:	00 00 00 00 
ffffffff801093b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801093c0:	00 00 00 00 
ffffffff801093c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801093cb:	00 00 00 00 
ffffffff801093cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801093d6:	00 00 00 00 
ffffffff801093da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801093e1:	00 00 00 00 
ffffffff801093e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801093ec:	00 00 00 00 
ffffffff801093f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801093f7:	00 00 00 00 
ffffffff801093fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109402:	00 00 00 00 
ffffffff80109406:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010940d:	00 00 00 00 
ffffffff80109411:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109418:	00 00 00 00 
ffffffff8010941c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109423:	00 00 00 00 
ffffffff80109427:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010942e:	00 00 00 00 
ffffffff80109432:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109439:	00 00 00 00 
ffffffff8010943d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109444:	00 00 00 00 
ffffffff80109448:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010944f:	00 00 00 00 
ffffffff80109453:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010945a:	00 00 00 00 
ffffffff8010945e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109465:	00 00 00 00 
ffffffff80109469:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109470:	00 00 00 00 
ffffffff80109474:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010947b:	00 00 00 00 
ffffffff8010947f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109486:	00 00 00 00 
ffffffff8010948a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109491:	00 00 00 00 
ffffffff80109495:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010949c:	00 00 00 00 
ffffffff801094a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801094a7:	00 00 00 00 
ffffffff801094ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801094b2:	00 00 00 00 
ffffffff801094b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801094bd:	00 00 00 00 
ffffffff801094c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801094c8:	00 00 00 00 
ffffffff801094cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801094d3:	00 00 00 00 
ffffffff801094d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801094de:	00 00 00 00 
ffffffff801094e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801094e9:	00 00 00 00 
ffffffff801094ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801094f4:	00 00 00 00 
ffffffff801094f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801094ff:	00 00 00 00 
ffffffff80109503:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010950a:	00 00 00 00 
ffffffff8010950e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109515:	00 00 00 00 
ffffffff80109519:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109520:	00 00 00 00 
ffffffff80109524:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010952b:	00 00 00 00 
ffffffff8010952f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109536:	00 00 00 00 
ffffffff8010953a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109541:	00 00 00 00 
ffffffff80109545:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010954c:	00 00 00 00 
ffffffff80109550:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109557:	00 00 00 00 
ffffffff8010955b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109562:	00 00 00 00 
ffffffff80109566:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010956d:	00 00 00 00 
ffffffff80109571:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109578:	00 00 00 00 
ffffffff8010957c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109583:	00 00 00 00 
ffffffff80109587:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010958e:	00 00 00 00 
ffffffff80109592:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109599:	00 00 00 00 
ffffffff8010959d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801095a4:	00 00 00 00 
ffffffff801095a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801095af:	00 00 00 00 
ffffffff801095b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801095ba:	00 00 00 00 
ffffffff801095be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801095c5:	00 00 00 00 
ffffffff801095c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801095d0:	00 00 00 00 
ffffffff801095d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801095db:	00 00 00 00 
ffffffff801095df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801095e6:	00 00 00 00 
ffffffff801095ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801095f1:	00 00 00 00 
ffffffff801095f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801095fc:	00 00 00 00 
ffffffff80109600:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109607:	00 00 00 00 
ffffffff8010960b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109612:	00 00 00 00 
ffffffff80109616:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010961d:	00 00 00 00 
ffffffff80109621:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109628:	00 00 00 00 
ffffffff8010962c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109633:	00 00 00 00 
ffffffff80109637:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010963e:	00 00 00 00 
ffffffff80109642:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109649:	00 00 00 00 
ffffffff8010964d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109654:	00 00 00 00 
ffffffff80109658:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010965f:	00 00 00 00 
ffffffff80109663:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010966a:	00 00 00 00 
ffffffff8010966e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109675:	00 00 00 00 
ffffffff80109679:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109680:	00 00 00 00 
ffffffff80109684:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010968b:	00 00 00 00 
ffffffff8010968f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109696:	00 00 00 00 
ffffffff8010969a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801096a1:	00 00 00 00 
ffffffff801096a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801096ac:	00 00 00 00 
ffffffff801096b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801096b7:	00 00 00 00 
ffffffff801096bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801096c2:	00 00 00 00 
ffffffff801096c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801096cd:	00 00 00 00 
ffffffff801096d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801096d8:	00 00 00 00 
ffffffff801096dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801096e3:	00 00 00 00 
ffffffff801096e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801096ee:	00 00 00 00 
ffffffff801096f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801096f9:	00 00 00 00 
ffffffff801096fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109704:	00 00 00 00 
ffffffff80109708:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010970f:	00 00 00 00 
ffffffff80109713:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010971a:	00 00 00 00 
ffffffff8010971e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109725:	00 00 00 00 
ffffffff80109729:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109730:	00 00 00 00 
ffffffff80109734:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010973b:	00 00 00 00 
ffffffff8010973f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109746:	00 00 00 00 
ffffffff8010974a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109751:	00 00 00 00 
ffffffff80109755:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010975c:	00 00 00 00 
ffffffff80109760:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109767:	00 00 00 00 
ffffffff8010976b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109772:	00 00 00 00 
ffffffff80109776:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010977d:	00 00 00 00 
ffffffff80109781:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109788:	00 00 00 00 
ffffffff8010978c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109793:	00 00 00 00 
ffffffff80109797:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010979e:	00 00 00 00 
ffffffff801097a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801097a9:	00 00 00 00 
ffffffff801097ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801097b4:	00 00 00 00 
ffffffff801097b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801097bf:	00 00 00 00 
ffffffff801097c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801097ca:	00 00 00 00 
ffffffff801097ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801097d5:	00 00 00 00 
ffffffff801097d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801097e0:	00 00 00 00 
ffffffff801097e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801097eb:	00 00 00 00 
ffffffff801097ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801097f6:	00 00 00 00 
ffffffff801097fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109801:	00 00 00 00 
ffffffff80109805:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010980c:	00 00 00 00 
ffffffff80109810:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109817:	00 00 00 00 
ffffffff8010981b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109822:	00 00 00 00 
ffffffff80109826:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010982d:	00 00 00 00 
ffffffff80109831:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109838:	00 00 00 00 
ffffffff8010983c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109843:	00 00 00 00 
ffffffff80109847:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010984e:	00 00 00 00 
ffffffff80109852:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109859:	00 00 00 00 
ffffffff8010985d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109864:	00 00 00 00 
ffffffff80109868:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010986f:	00 00 00 00 
ffffffff80109873:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010987a:	00 00 00 00 
ffffffff8010987e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109885:	00 00 00 00 
ffffffff80109889:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109890:	00 00 00 00 
ffffffff80109894:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010989b:	00 00 00 00 
ffffffff8010989f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801098a6:	00 00 00 00 
ffffffff801098aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801098b1:	00 00 00 00 
ffffffff801098b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801098bc:	00 00 00 00 
ffffffff801098c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801098c7:	00 00 00 00 
ffffffff801098cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801098d2:	00 00 00 00 
ffffffff801098d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801098dd:	00 00 00 00 
ffffffff801098e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801098e8:	00 00 00 00 
ffffffff801098ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801098f3:	00 00 00 00 
ffffffff801098f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801098fe:	00 00 00 00 
ffffffff80109902:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109909:	00 00 00 00 
ffffffff8010990d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109914:	00 00 00 00 
ffffffff80109918:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010991f:	00 00 00 00 
ffffffff80109923:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010992a:	00 00 00 00 
ffffffff8010992e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109935:	00 00 00 00 
ffffffff80109939:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109940:	00 00 00 00 
ffffffff80109944:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010994b:	00 00 00 00 
ffffffff8010994f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109956:	00 00 00 00 
ffffffff8010995a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109961:	00 00 00 00 
ffffffff80109965:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010996c:	00 00 00 00 
ffffffff80109970:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109977:	00 00 00 00 
ffffffff8010997b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109982:	00 00 00 00 
ffffffff80109986:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010998d:	00 00 00 00 
ffffffff80109991:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109998:	00 00 00 00 
ffffffff8010999c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801099a3:	00 00 00 00 
ffffffff801099a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801099ae:	00 00 00 00 
ffffffff801099b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801099b9:	00 00 00 00 
ffffffff801099bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801099c4:	00 00 00 00 
ffffffff801099c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801099cf:	00 00 00 00 
ffffffff801099d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801099da:	00 00 00 00 
ffffffff801099de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801099e5:	00 00 00 00 
ffffffff801099e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801099f0:	00 00 00 00 
ffffffff801099f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801099fb:	00 00 00 00 
ffffffff801099ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a06:	00 00 00 00 
ffffffff80109a0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a11:	00 00 00 00 
ffffffff80109a15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a1c:	00 00 00 00 
ffffffff80109a20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a27:	00 00 00 00 
ffffffff80109a2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a32:	00 00 00 00 
ffffffff80109a36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a3d:	00 00 00 00 
ffffffff80109a41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a48:	00 00 00 00 
ffffffff80109a4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a53:	00 00 00 00 
ffffffff80109a57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a5e:	00 00 00 00 
ffffffff80109a62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a69:	00 00 00 00 
ffffffff80109a6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a74:	00 00 00 00 
ffffffff80109a78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a7f:	00 00 00 00 
ffffffff80109a83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a8a:	00 00 00 00 
ffffffff80109a8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109a95:	00 00 00 00 
ffffffff80109a99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109aa0:	00 00 00 00 
ffffffff80109aa4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109aab:	00 00 00 00 
ffffffff80109aaf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ab6:	00 00 00 00 
ffffffff80109aba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ac1:	00 00 00 00 
ffffffff80109ac5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109acc:	00 00 00 00 
ffffffff80109ad0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ad7:	00 00 00 00 
ffffffff80109adb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ae2:	00 00 00 00 
ffffffff80109ae6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109aed:	00 00 00 00 
ffffffff80109af1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109af8:	00 00 00 00 
ffffffff80109afc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b03:	00 00 00 00 
ffffffff80109b07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b0e:	00 00 00 00 
ffffffff80109b12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b19:	00 00 00 00 
ffffffff80109b1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b24:	00 00 00 00 
ffffffff80109b28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b2f:	00 00 00 00 
ffffffff80109b33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b3a:	00 00 00 00 
ffffffff80109b3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b45:	00 00 00 00 
ffffffff80109b49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b50:	00 00 00 00 
ffffffff80109b54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b5b:	00 00 00 00 
ffffffff80109b5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b66:	00 00 00 00 
ffffffff80109b6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b71:	00 00 00 00 
ffffffff80109b75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b7c:	00 00 00 00 
ffffffff80109b80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b87:	00 00 00 00 
ffffffff80109b8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b92:	00 00 00 00 
ffffffff80109b96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109b9d:	00 00 00 00 
ffffffff80109ba1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ba8:	00 00 00 00 
ffffffff80109bac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109bb3:	00 00 00 00 
ffffffff80109bb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109bbe:	00 00 00 00 
ffffffff80109bc2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109bc9:	00 00 00 00 
ffffffff80109bcd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109bd4:	00 00 00 00 
ffffffff80109bd8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109bdf:	00 00 00 00 
ffffffff80109be3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109bea:	00 00 00 00 
ffffffff80109bee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109bf5:	00 00 00 00 
ffffffff80109bf9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c00:	00 00 00 00 
ffffffff80109c04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c0b:	00 00 00 00 
ffffffff80109c0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c16:	00 00 00 00 
ffffffff80109c1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c21:	00 00 00 00 
ffffffff80109c25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c2c:	00 00 00 00 
ffffffff80109c30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c37:	00 00 00 00 
ffffffff80109c3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c42:	00 00 00 00 
ffffffff80109c46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c4d:	00 00 00 00 
ffffffff80109c51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c58:	00 00 00 00 
ffffffff80109c5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c63:	00 00 00 00 
ffffffff80109c67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c6e:	00 00 00 00 
ffffffff80109c72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c79:	00 00 00 00 
ffffffff80109c7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c84:	00 00 00 00 
ffffffff80109c88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c8f:	00 00 00 00 
ffffffff80109c93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109c9a:	00 00 00 00 
ffffffff80109c9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ca5:	00 00 00 00 
ffffffff80109ca9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109cb0:	00 00 00 00 
ffffffff80109cb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109cbb:	00 00 00 00 
ffffffff80109cbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109cc6:	00 00 00 00 
ffffffff80109cca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109cd1:	00 00 00 00 
ffffffff80109cd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109cdc:	00 00 00 00 
ffffffff80109ce0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ce7:	00 00 00 00 
ffffffff80109ceb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109cf2:	00 00 00 00 
ffffffff80109cf6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109cfd:	00 00 00 00 
ffffffff80109d01:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d08:	00 00 00 00 
ffffffff80109d0c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d13:	00 00 00 00 
ffffffff80109d17:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d1e:	00 00 00 00 
ffffffff80109d22:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d29:	00 00 00 00 
ffffffff80109d2d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d34:	00 00 00 00 
ffffffff80109d38:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d3f:	00 00 00 00 
ffffffff80109d43:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d4a:	00 00 00 00 
ffffffff80109d4e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d55:	00 00 00 00 
ffffffff80109d59:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d60:	00 00 00 00 
ffffffff80109d64:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d6b:	00 00 00 00 
ffffffff80109d6f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d76:	00 00 00 00 
ffffffff80109d7a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d81:	00 00 00 00 
ffffffff80109d85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d8c:	00 00 00 00 
ffffffff80109d90:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109d97:	00 00 00 00 
ffffffff80109d9b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109da2:	00 00 00 00 
ffffffff80109da6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109dad:	00 00 00 00 
ffffffff80109db1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109db8:	00 00 00 00 
ffffffff80109dbc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109dc3:	00 00 00 00 
ffffffff80109dc7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109dce:	00 00 00 00 
ffffffff80109dd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109dd9:	00 00 00 00 
ffffffff80109ddd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109de4:	00 00 00 00 
ffffffff80109de8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109def:	00 00 00 00 
ffffffff80109df3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109dfa:	00 00 00 00 
ffffffff80109dfe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e05:	00 00 00 00 
ffffffff80109e09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e10:	00 00 00 00 
ffffffff80109e14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e1b:	00 00 00 00 
ffffffff80109e1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e26:	00 00 00 00 
ffffffff80109e2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e31:	00 00 00 00 
ffffffff80109e35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e3c:	00 00 00 00 
ffffffff80109e40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e47:	00 00 00 00 
ffffffff80109e4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e52:	00 00 00 00 
ffffffff80109e56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e5d:	00 00 00 00 
ffffffff80109e61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e68:	00 00 00 00 
ffffffff80109e6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e73:	00 00 00 00 
ffffffff80109e77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e7e:	00 00 00 00 
ffffffff80109e82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e89:	00 00 00 00 
ffffffff80109e8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e94:	00 00 00 00 
ffffffff80109e98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109e9f:	00 00 00 00 
ffffffff80109ea3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109eaa:	00 00 00 00 
ffffffff80109eae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109eb5:	00 00 00 00 
ffffffff80109eb9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ec0:	00 00 00 00 
ffffffff80109ec4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ecb:	00 00 00 00 
ffffffff80109ecf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ed6:	00 00 00 00 
ffffffff80109eda:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ee1:	00 00 00 00 
ffffffff80109ee5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109eec:	00 00 00 00 
ffffffff80109ef0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ef7:	00 00 00 00 
ffffffff80109efb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f02:	00 00 00 00 
ffffffff80109f06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f0d:	00 00 00 00 
ffffffff80109f11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f18:	00 00 00 00 
ffffffff80109f1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f23:	00 00 00 00 
ffffffff80109f27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f2e:	00 00 00 00 
ffffffff80109f32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f39:	00 00 00 00 
ffffffff80109f3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f44:	00 00 00 00 
ffffffff80109f48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f4f:	00 00 00 00 
ffffffff80109f53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f5a:	00 00 00 00 
ffffffff80109f5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f65:	00 00 00 00 
ffffffff80109f69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f70:	00 00 00 00 
ffffffff80109f74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f7b:	00 00 00 00 
ffffffff80109f7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f86:	00 00 00 00 
ffffffff80109f8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f91:	00 00 00 00 
ffffffff80109f95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109f9c:	00 00 00 00 
ffffffff80109fa0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109fa7:	00 00 00 00 
ffffffff80109fab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109fb2:	00 00 00 00 
ffffffff80109fb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109fbd:	00 00 00 00 
ffffffff80109fc1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109fc8:	00 00 00 00 
ffffffff80109fcc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109fd3:	00 00 00 00 
ffffffff80109fd7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109fde:	00 00 00 00 
ffffffff80109fe2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109fe9:	00 00 00 00 
ffffffff80109fed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80109ff4:	00 00 00 00 
ffffffff80109ff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80109fff:	00 

ffffffff8010a000 <RME_X64_Kpgt>:
	...

ffffffff8020c800 <__RME_X64_In>:
Input       : ptr_t Port - The port to output to.
Output      : None.
Return      : ptr_t - The data received from that port.
******************************************************************************/
__RME_X64_In:
    PUSHQ               %RDX
ffffffff8020c800:	52                   	push   %rdx
    MOVQ                %RDI,%RDX
ffffffff8020c801:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RAX,%RAX
ffffffff8020c804:	48 89 c0             	mov    %rax,%rax
    INB                 (%DX),%AL
ffffffff8020c807:	ec                   	in     (%dx),%al
    POPQ                %RDX
ffffffff8020c808:	5a                   	pop    %rdx
    RETQ
ffffffff8020c809:	c3                   	ret

ffffffff8020c80a <__RME_X64_Out>:
                 ptr_t Data - The data to send to that port.
Output         : None.
Return         : None.
******************************************************************************/
__RME_X64_Out:
    PUSHQ               %RDX
ffffffff8020c80a:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020c80b:	50                   	push   %rax
    MOVQ                %RDI,%RDX
ffffffff8020c80c:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RSI,%RAX
ffffffff8020c80f:	48 89 f0             	mov    %rsi,%rax
    OUTB                %AL,(%DX)
ffffffff8020c812:	ee                   	out    %al,(%dx)
    POPQ                %RAX
ffffffff8020c813:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020c814:	5a                   	pop    %rdx
    RETQ
ffffffff8020c815:	c3                   	ret

ffffffff8020c816 <__RME_X64_Read_MSR>:
Input       : ptr_t MSR - The MSR to read.
Output      : None.
Return      : ptr_t - The content of the MSR.
******************************************************************************/
__RME_X64_Read_MSR:
    PUSHQ               %RCX
ffffffff8020c816:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020c817:	52                   	push   %rdx
    MOVQ                %RDI,%RCX
ffffffff8020c818:	48 89 f9             	mov    %rdi,%rcx
    XORQ                %RAX,%RAX
ffffffff8020c81b:	48 31 c0             	xor    %rax,%rax
    RDMSR
ffffffff8020c81e:	0f 32                	rdmsr
    SHLQ                $32,%RDX
ffffffff8020c820:	48 c1 e2 20          	shl    $0x20,%rdx
    ADDQ                %RDX,%RAX
ffffffff8020c824:	48 01 d0             	add    %rdx,%rax
    POPQ                %RDX
ffffffff8020c827:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020c828:	59                   	pop    %rcx
    RETQ
ffffffff8020c829:	c3                   	ret

ffffffff8020c82a <__RME_X64_Write_MSR>:
              ptr_t Value - The value to write to it.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_MSR:
    PUSHQ               %RCX
ffffffff8020c82a:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020c82b:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020c82c:	50                   	push   %rax
    MOVQ                %RDI,%RCX
ffffffff8020c82d:	48 89 f9             	mov    %rdi,%rcx
    MOVL                %ESI,%EAX
ffffffff8020c830:	89 f0                	mov    %esi,%eax
    MOVQ                %RSI,%RDX
ffffffff8020c832:	48 89 f2             	mov    %rsi,%rdx
    SHR                 $32,%RDX
ffffffff8020c835:	48 c1 ea 20          	shr    $0x20,%rdx
    WRMSR
ffffffff8020c839:	0f 30                	wrmsr
    POPQ                %RAX
ffffffff8020c83b:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020c83c:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020c83d:	59                   	pop    %rcx
    RETQ
ffffffff8020c83e:	c3                   	ret

ffffffff8020c83f <__RME_X64_CPU_Local_Get>:
Input       : None.
Output      : None.
Return      : struct RME_CPU_Local* - The CPU-local data structures.
******************************************************************************/
__RME_X64_CPU_Local_Get:
    MOVQ                %GS:(8192-8*3),%RAX
ffffffff8020c83f:	65 48 8b 04 25 e8 1f 	mov    %gs:0x1fe8,%rax
ffffffff8020c846:	00 00 
    RETQ
ffffffff8020c848:	c3                   	ret

ffffffff8020c849 <__RME_X64_CPUID_Get>:
              ptr_t* ECX - The ECX info.
              ptr_t* EDX - The EDX info.
Return      : ptr_t - The maximum number for CPUID instruction.
******************************************************************************/
__RME_X64_CPUID_Get:
    PUSHQ               %R8
ffffffff8020c849:	41 50                	push   %r8
    PUSHQ               %R9
ffffffff8020c84b:	41 51                	push   %r9
    PUSHQ               %RBX
ffffffff8020c84d:	53                   	push   %rbx
    PUSHQ               %RCX
ffffffff8020c84e:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020c84f:	52                   	push   %rdx

    MOVQ                %RDI,%RAX
ffffffff8020c850:	48 89 f8             	mov    %rdi,%rax
    MOVQ                %RDX,%R8
ffffffff8020c853:	49 89 d0             	mov    %rdx,%r8
    MOVQ                %RCX,%R9
ffffffff8020c856:	49 89 c9             	mov    %rcx,%r9

    MOVQ                (%RSI),%RBX
ffffffff8020c859:	48 8b 1e             	mov    (%rsi),%rbx
    MOVQ                (%R8),%RCX
ffffffff8020c85c:	49 8b 08             	mov    (%r8),%rcx
    MOVQ                (%R9),%RDX
ffffffff8020c85f:	49 8b 11             	mov    (%r9),%rdx
    CPUID
ffffffff8020c862:	0f a2                	cpuid
    MOVQ                %RBX,(%RSI)
ffffffff8020c864:	48 89 1e             	mov    %rbx,(%rsi)
    MOVQ                %RCX,(%R8)
ffffffff8020c867:	49 89 08             	mov    %rcx,(%r8)
    MOVQ                %RDX,(%R9)
ffffffff8020c86a:	49 89 11             	mov    %rdx,(%r9)

    POPQ                %RDX
ffffffff8020c86d:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020c86e:	59                   	pop    %rcx
    POPQ                %RBX
ffffffff8020c86f:	5b                   	pop    %rbx
    POPQ                %R9
ffffffff8020c870:	41 59                	pop    %r9
    POPQ                %R8
ffffffff8020c872:	41 58                	pop    %r8
    RETQ
ffffffff8020c874:	c3                   	ret

ffffffff8020c875 <__RME_X64_GDT_Load>:
Input       : ptr_t* GDTR - The pointer to the GDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_GDT_Load:
    LGDT                (%RDI)
ffffffff8020c875:	0f 01 17             	lgdt   (%rdi)
    RETQ
ffffffff8020c878:	c3                   	ret

ffffffff8020c879 <__RME_X64_IDT_Load>:
Input       : ptr_t* IDTR - The pointer to the IDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_IDT_Load:
    LIDT                (%RDI)
ffffffff8020c879:	0f 01 1f             	lidt   (%rdi)
    RETQ
ffffffff8020c87c:	c3                   	ret

ffffffff8020c87d <__RME_X64_TSS_Load>:
Input       : ptr_t TSS - The TSS's position in GDT.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_TSS_Load:
    LTR                 %DI
ffffffff8020c87d:	0f 00 df             	ltr    %edi
    RETQ
ffffffff8020c880:	c3                   	ret

ffffffff8020c881 <__RME_X64_Comp_Swap>:
              ptr_t New - The new value.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - If successful, 1; else 0.
******************************************************************************/
__RME_X64_Comp_Swap:
    MOVQ                %RSI,%RAX
ffffffff8020c881:	48 89 f0             	mov    %rsi,%rax
    XOR                 %RSI,%RSI
ffffffff8020c884:	48 31 f6             	xor    %rsi,%rsi
    /* In x86, locked instructions act as a fence */
    LOCK CMPXCHGQ       %RDX,(%RDI)
ffffffff8020c887:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
    /* Set the bit if ZF is set */
    SETZ                %SIL
ffffffff8020c88c:	40 0f 94 c6          	sete   %sil
    MOVQ                %RSI,%RAX
ffffffff8020c890:	48 89 f0             	mov    %rsi,%rax
    RETQ
ffffffff8020c893:	c3                   	ret

ffffffff8020c894 <__RME_X64_Fetch_Add>:
              cnt_t Addend - The number to add.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the addition.
******************************************************************************/
__RME_X64_Fetch_Add:
    MOVQ                %RSI,%RAX
ffffffff8020c894:	48 89 f0             	mov    %rsi,%rax
    /* In x86, locked instructions act as a fence */
    LOCK XADDQ          %RAX,(%RDI)
ffffffff8020c897:	f0 48 0f c1 07       	lock xadd %rax,(%rdi)
    RETQ
ffffffff8020c89c:	c3                   	ret

ffffffff8020c89d <__RME_X64_Fetch_And>:
              cnt_t Operand - The number to logic AND with the destination.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the AND operation.
******************************************************************************/
__RME_X64_Fetch_And:
    MOVQ                (%RDI),%RAX
ffffffff8020c89d:	48 8b 07             	mov    (%rdi),%rax
    /* In x86, locked instructions act as a fence */
    LOCK ANDQ           %RSI,(%RDI)
ffffffff8020c8a0:	f0 48 21 37          	lock and %rsi,(%rdi)
    RETQ
ffffffff8020c8a4:	c3                   	ret

ffffffff8020c8a5 <__RME_X64_Write_Release>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_Release:
    MFENCE
ffffffff8020c8a5:	0f ae f0             	mfence
    RETQ
ffffffff8020c8a8:	c3                   	ret

ffffffff8020c8a9 <__RME_X64_Pgt_Set>:
Input       : ptr_t Pgt - The physical address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Pgt_Set:
    MOV                 %RDI,%CR3
ffffffff8020c8a9:	0f 22 df             	mov    %rdi,%cr3
    RETQ
ffffffff8020c8ac:	c3                   	ret

ffffffff8020c8ad <__RME_Disable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Disable_Int:
    /* Disable all interrupts */
    CLI
ffffffff8020c8ad:	fa                   	cli
    RETQ
ffffffff8020c8ae:	c3                   	ret

ffffffff8020c8af <__RME_Enable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enable_Int:
    /* Enable all interrupts */
    STI
ffffffff8020c8af:	fb                   	sti
    RETQ
ffffffff8020c8b0:	c3                   	ret

ffffffff8020c8b1 <__RME_X64_Halt>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Halt:
    /* Wait for interrupt */
    HLT
ffffffff8020c8b1:	f4                   	hlt
    RETQ
ffffffff8020c8b2:	c3                   	ret

ffffffff8020c8b3 <_RME_Kmain>:
Input       : ptr_t Stack - The stack address to set SP to.
Output      : None.
Return      : None.
******************************************************************************/
_RME_Kmain:
    MOVQ                %RDI,%RSP
ffffffff8020c8b3:	48 89 fc             	mov    %rdi,%rsp
    JMP                 RME_Kmain
ffffffff8020c8b6:	e9 15 2a 00 00       	jmp    ffffffff8020f2d0 <RME_Kmain>

ffffffff8020c8bb <__RME_X64_MSB_Get>:
Input       : ptr_t Val - The value.
Output      : None.
Return      : ptr_t - The MSB position.
******************************************************************************/
__RME_X64_MSB_Get:
    BSRQ                %RDI,%RAX
ffffffff8020c8bb:	48 0f bd c7          	bsr    %rdi,%rax
    RETQ
ffffffff8020c8bf:	c3                   	ret

ffffffff8020c8c0 <__RME_Enter_User_Mode>:
              ptr_t CPUID - The CPUID.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enter_User_Mode:
    MOVQ                %RDI,%RCX           /* Entry */
ffffffff8020c8c0:	48 89 f9             	mov    %rdi,%rcx
    MOVQ                %RSI,%RSP           /* Stack */
ffffffff8020c8c3:	48 89 f4             	mov    %rsi,%rsp
    MOVQ                $0x3200,%R11        /* Flags - IOPL 3, IF */
ffffffff8020c8c6:	49 c7 c3 00 32 00 00 	mov    $0x3200,%r11
    MOVQ                %RDX,%RDI           /* CPUID */
ffffffff8020c8cd:	48 89 d7             	mov    %rdx,%rdi
    SYSRETQ
ffffffff8020c8d0:	48 0f 07             	sysretq

ffffffff8020c8d3 <__RME_X64_FAULT_DE_Handler>:
    PUSHQ               $\REASON
    JMP                 Fault_Handler
.endm

/* Fault handlers */
FAULT_HANDLER NAME=__RME_X64_FAULT_DE_Handler ERRCODE=0 REASON=0
ffffffff8020c8d3:	0f 01 f8             	swapgs
ffffffff8020c8d6:	6a 00                	push   $0x0
ffffffff8020c8d8:	6a 00                	push   $0x0
ffffffff8020c8da:	e9 a6 00 00 00       	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c8df <__RME_X64_TRAP_DB_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_DB_Handler ERRCODE=0 REASON=1
ffffffff8020c8df:	0f 01 f8             	swapgs
ffffffff8020c8e2:	6a 00                	push   $0x0
ffffffff8020c8e4:	6a 01                	push   $0x1
ffffffff8020c8e6:	e9 9a 00 00 00       	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c8eb <__RME_X64_INT_NMI_Handler>:
FAULT_HANDLER NAME=__RME_X64_INT_NMI_Handler ERRCODE=0 REASON=2
ffffffff8020c8eb:	0f 01 f8             	swapgs
ffffffff8020c8ee:	6a 00                	push   $0x0
ffffffff8020c8f0:	6a 02                	push   $0x2
ffffffff8020c8f2:	e9 8e 00 00 00       	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c8f7 <__RME_X64_TRAP_BP_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_BP_Handler ERRCODE=0 REASON=3
ffffffff8020c8f7:	0f 01 f8             	swapgs
ffffffff8020c8fa:	6a 00                	push   $0x0
ffffffff8020c8fc:	6a 03                	push   $0x3
ffffffff8020c8fe:	e9 82 00 00 00       	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c903 <__RME_X64_TRAP_OF_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_OF_Handler ERRCODE=0 REASON=4
ffffffff8020c903:	0f 01 f8             	swapgs
ffffffff8020c906:	6a 00                	push   $0x0
ffffffff8020c908:	6a 04                	push   $0x4
ffffffff8020c90a:	eb 79                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c90c <__RME_X64_FAULT_BR_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_BR_Handler ERRCODE=0 REASON=5
ffffffff8020c90c:	0f 01 f8             	swapgs
ffffffff8020c90f:	6a 00                	push   $0x0
ffffffff8020c911:	6a 05                	push   $0x5
ffffffff8020c913:	eb 70                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c915 <__RME_X64_FAULT_UD_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_UD_Handler ERRCODE=0 REASON=6
ffffffff8020c915:	0f 01 f8             	swapgs
ffffffff8020c918:	6a 00                	push   $0x0
ffffffff8020c91a:	6a 06                	push   $0x6
ffffffff8020c91c:	eb 67                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c91e <__RME_X64_FAULT_NM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NM_Handler ERRCODE=0 REASON=7
ffffffff8020c91e:	0f 01 f8             	swapgs
ffffffff8020c921:	6a 00                	push   $0x0
ffffffff8020c923:	6a 07                	push   $0x7
ffffffff8020c925:	eb 5e                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c927 <__RME_X64_ABORT_DF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_DF_Handler ERRCODE=1 REASON=8
ffffffff8020c927:	0f 01 f8             	swapgs
ffffffff8020c92a:	6a 08                	push   $0x8
ffffffff8020c92c:	eb 57                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c92e <__RME_X64_ABORT_OLD_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_OLD_MF_Handler ERRCODE=0 REASON=9
ffffffff8020c92e:	0f 01 f8             	swapgs
ffffffff8020c931:	6a 00                	push   $0x0
ffffffff8020c933:	6a 09                	push   $0x9
ffffffff8020c935:	eb 4e                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c937 <__RME_X64_FAULT_TS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_TS_Handler ERRCODE=1 REASON=10
ffffffff8020c937:	0f 01 f8             	swapgs
ffffffff8020c93a:	6a 0a                	push   $0xa
ffffffff8020c93c:	eb 47                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c93e <__RME_X64_FAULT_NP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NP_Handler ERRCODE=1 REASON=11
ffffffff8020c93e:	0f 01 f8             	swapgs
ffffffff8020c941:	6a 0b                	push   $0xb
ffffffff8020c943:	eb 40                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c945 <__RME_X64_FAULT_SS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_SS_Handler ERRCODE=1 REASON=12
ffffffff8020c945:	0f 01 f8             	swapgs
ffffffff8020c948:	6a 0c                	push   $0xc
ffffffff8020c94a:	eb 39                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c94c <__RME_X64_FAULT_GP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_GP_Handler ERRCODE=1 REASON=13
ffffffff8020c94c:	0f 01 f8             	swapgs
ffffffff8020c94f:	6a 0d                	push   $0xd
ffffffff8020c951:	eb 32                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c953 <__RME_X64_FAULT_PF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_PF_Handler ERRCODE=1 REASON=14
ffffffff8020c953:	0f 01 f8             	swapgs
ffffffff8020c956:	6a 0e                	push   $0xe
ffffffff8020c958:	eb 2b                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c95a <__RME_X64_FAULT_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_MF_Handler ERRCODE=0 REASON=16
ffffffff8020c95a:	0f 01 f8             	swapgs
ffffffff8020c95d:	6a 00                	push   $0x0
ffffffff8020c95f:	6a 10                	push   $0x10
ffffffff8020c961:	eb 22                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c963 <__RME_X64_FAULT_AC_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_AC_Handler ERRCODE=1 REASON=17
ffffffff8020c963:	0f 01 f8             	swapgs
ffffffff8020c966:	6a 11                	push   $0x11
ffffffff8020c968:	eb 1b                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c96a <__RME_X64_ABORT_MC_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_MC_Handler ERRCODE=0 REASON=18
ffffffff8020c96a:	0f 01 f8             	swapgs
ffffffff8020c96d:	6a 00                	push   $0x0
ffffffff8020c96f:	6a 12                	push   $0x12
ffffffff8020c971:	eb 12                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c973 <__RME_X64_FAULT_XM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_XM_Handler ERRCODE=0 REASON=19
ffffffff8020c973:	0f 01 f8             	swapgs
ffffffff8020c976:	6a 00                	push   $0x0
ffffffff8020c978:	6a 13                	push   $0x13
ffffffff8020c97a:	eb 09                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c97c <__RME_X64_FAULT_VE_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_VE_Handler ERRCODE=0 REASON=20
ffffffff8020c97c:	0f 01 f8             	swapgs
ffffffff8020c97f:	6a 00                	push   $0x0
ffffffff8020c981:	6a 14                	push   $0x14
ffffffff8020c983:	eb 00                	jmp    ffffffff8020c985 <Fault_Handler>

ffffffff8020c985 <Fault_Handler>:
/* Common function body for fault handlers - reduce I-Cache usage */
Fault_Handler:
    SAVE_GP_REGS
ffffffff8020c985:	41 57                	push   %r15
ffffffff8020c987:	41 56                	push   %r14
ffffffff8020c989:	41 55                	push   %r13
ffffffff8020c98b:	41 54                	push   %r12
ffffffff8020c98d:	41 53                	push   %r11
ffffffff8020c98f:	41 52                	push   %r10
ffffffff8020c991:	41 51                	push   %r9
ffffffff8020c993:	41 50                	push   %r8
ffffffff8020c995:	55                   	push   %rbp
ffffffff8020c996:	57                   	push   %rdi
ffffffff8020c997:	56                   	push   %rsi
ffffffff8020c998:	52                   	push   %rdx
ffffffff8020c999:	51                   	push   %rcx
ffffffff8020c99a:	53                   	push   %rbx
ffffffff8020c99b:	50                   	push   %rax
ffffffff8020c99c:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c9a0:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c9a2:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020c9a5:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Fault_Handler
ffffffff8020c9aa:	e8 61 e3 00 00       	call   ffffffff8021ad10 <__RME_X64_Fault_Handler>

    RESTORE_GP_REGS
ffffffff8020c9af:	0f 01 f8             	swapgs
ffffffff8020c9b2:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c9b6:	8e d8                	mov    %eax,%ds
ffffffff8020c9b8:	58                   	pop    %rax
ffffffff8020c9b9:	5b                   	pop    %rbx
ffffffff8020c9ba:	59                   	pop    %rcx
ffffffff8020c9bb:	5a                   	pop    %rdx
ffffffff8020c9bc:	5e                   	pop    %rsi
ffffffff8020c9bd:	5f                   	pop    %rdi
ffffffff8020c9be:	5d                   	pop    %rbp
ffffffff8020c9bf:	41 58                	pop    %r8
ffffffff8020c9c1:	41 59                	pop    %r9
ffffffff8020c9c3:	41 5a                	pop    %r10
ffffffff8020c9c5:	41 5b                	pop    %r11
ffffffff8020c9c7:	41 5c                	pop    %r12
ffffffff8020c9c9:	41 5d                	pop    %r13
ffffffff8020c9cb:	41 5e                	pop    %r14
ffffffff8020c9cd:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c9cf:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c9d3:	48 cf                	iretq

ffffffff8020c9d5 <__RME_X64_USER32_Handler>:
    PUSHQ               $0                  /* Make a dummy error code */
    PUSHQ               $\VECTNUM           /* Interrupt number */
    JMP                 User_Handler
.endm
/* User handlers */
USER_HANDLER NAME=__RME_X64_USER32_Handler VECTNUM=32
ffffffff8020c9d5:	0f 01 f8             	swapgs
ffffffff8020c9d8:	6a 00                	push   $0x0
ffffffff8020c9da:	6a 20                	push   $0x20
ffffffff8020c9dc:	e9 d3 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020c9e1 <__RME_X64_USER33_Handler>:
USER_HANDLER NAME=__RME_X64_USER33_Handler VECTNUM=33
ffffffff8020c9e1:	0f 01 f8             	swapgs
ffffffff8020c9e4:	6a 00                	push   $0x0
ffffffff8020c9e6:	6a 21                	push   $0x21
ffffffff8020c9e8:	e9 c7 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020c9ed <__RME_X64_USER34_Handler>:
USER_HANDLER NAME=__RME_X64_USER34_Handler VECTNUM=34
ffffffff8020c9ed:	0f 01 f8             	swapgs
ffffffff8020c9f0:	6a 00                	push   $0x0
ffffffff8020c9f2:	6a 22                	push   $0x22
ffffffff8020c9f4:	e9 bb 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020c9f9 <__RME_X64_USER35_Handler>:
USER_HANDLER NAME=__RME_X64_USER35_Handler VECTNUM=35
ffffffff8020c9f9:	0f 01 f8             	swapgs
ffffffff8020c9fc:	6a 00                	push   $0x0
ffffffff8020c9fe:	6a 23                	push   $0x23
ffffffff8020ca00:	e9 af 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca05 <__RME_X64_USER36_Handler>:
USER_HANDLER NAME=__RME_X64_USER36_Handler VECTNUM=36
ffffffff8020ca05:	0f 01 f8             	swapgs
ffffffff8020ca08:	6a 00                	push   $0x0
ffffffff8020ca0a:	6a 24                	push   $0x24
ffffffff8020ca0c:	e9 a3 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca11 <__RME_X64_USER37_Handler>:
USER_HANDLER NAME=__RME_X64_USER37_Handler VECTNUM=37
ffffffff8020ca11:	0f 01 f8             	swapgs
ffffffff8020ca14:	6a 00                	push   $0x0
ffffffff8020ca16:	6a 25                	push   $0x25
ffffffff8020ca18:	e9 97 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca1d <__RME_X64_USER38_Handler>:
USER_HANDLER NAME=__RME_X64_USER38_Handler VECTNUM=38
ffffffff8020ca1d:	0f 01 f8             	swapgs
ffffffff8020ca20:	6a 00                	push   $0x0
ffffffff8020ca22:	6a 26                	push   $0x26
ffffffff8020ca24:	e9 8b 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca29 <__RME_X64_USER39_Handler>:
USER_HANDLER NAME=__RME_X64_USER39_Handler VECTNUM=39
ffffffff8020ca29:	0f 01 f8             	swapgs
ffffffff8020ca2c:	6a 00                	push   $0x0
ffffffff8020ca2e:	6a 27                	push   $0x27
ffffffff8020ca30:	e9 7f 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca35 <__RME_X64_USER40_Handler>:

USER_HANDLER NAME=__RME_X64_USER40_Handler VECTNUM=40
ffffffff8020ca35:	0f 01 f8             	swapgs
ffffffff8020ca38:	6a 00                	push   $0x0
ffffffff8020ca3a:	6a 28                	push   $0x28
ffffffff8020ca3c:	e9 73 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca41 <__RME_X64_USER41_Handler>:
USER_HANDLER NAME=__RME_X64_USER41_Handler VECTNUM=41
ffffffff8020ca41:	0f 01 f8             	swapgs
ffffffff8020ca44:	6a 00                	push   $0x0
ffffffff8020ca46:	6a 29                	push   $0x29
ffffffff8020ca48:	e9 67 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca4d <__RME_X64_USER42_Handler>:
USER_HANDLER NAME=__RME_X64_USER42_Handler VECTNUM=42
ffffffff8020ca4d:	0f 01 f8             	swapgs
ffffffff8020ca50:	6a 00                	push   $0x0
ffffffff8020ca52:	6a 2a                	push   $0x2a
ffffffff8020ca54:	e9 5b 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca59 <__RME_X64_USER43_Handler>:
USER_HANDLER NAME=__RME_X64_USER43_Handler VECTNUM=43
ffffffff8020ca59:	0f 01 f8             	swapgs
ffffffff8020ca5c:	6a 00                	push   $0x0
ffffffff8020ca5e:	6a 2b                	push   $0x2b
ffffffff8020ca60:	e9 4f 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca65 <__RME_X64_USER44_Handler>:
USER_HANDLER NAME=__RME_X64_USER44_Handler VECTNUM=44
ffffffff8020ca65:	0f 01 f8             	swapgs
ffffffff8020ca68:	6a 00                	push   $0x0
ffffffff8020ca6a:	6a 2c                	push   $0x2c
ffffffff8020ca6c:	e9 43 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca71 <__RME_X64_USER45_Handler>:
USER_HANDLER NAME=__RME_X64_USER45_Handler VECTNUM=45
ffffffff8020ca71:	0f 01 f8             	swapgs
ffffffff8020ca74:	6a 00                	push   $0x0
ffffffff8020ca76:	6a 2d                	push   $0x2d
ffffffff8020ca78:	e9 37 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca7d <__RME_X64_USER46_Handler>:
USER_HANDLER NAME=__RME_X64_USER46_Handler VECTNUM=46
ffffffff8020ca7d:	0f 01 f8             	swapgs
ffffffff8020ca80:	6a 00                	push   $0x0
ffffffff8020ca82:	6a 2e                	push   $0x2e
ffffffff8020ca84:	e9 2b 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca89 <__RME_X64_USER47_Handler>:
USER_HANDLER NAME=__RME_X64_USER47_Handler VECTNUM=47
ffffffff8020ca89:	0f 01 f8             	swapgs
ffffffff8020ca8c:	6a 00                	push   $0x0
ffffffff8020ca8e:	6a 2f                	push   $0x2f
ffffffff8020ca90:	e9 1f 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ca95 <__RME_X64_USER48_Handler>:
USER_HANDLER NAME=__RME_X64_USER48_Handler VECTNUM=48
ffffffff8020ca95:	0f 01 f8             	swapgs
ffffffff8020ca98:	6a 00                	push   $0x0
ffffffff8020ca9a:	6a 30                	push   $0x30
ffffffff8020ca9c:	e9 13 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020caa1 <__RME_X64_USER49_Handler>:
USER_HANDLER NAME=__RME_X64_USER49_Handler VECTNUM=49
ffffffff8020caa1:	0f 01 f8             	swapgs
ffffffff8020caa4:	6a 00                	push   $0x0
ffffffff8020caa6:	6a 31                	push   $0x31
ffffffff8020caa8:	e9 07 0b 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020caad <__RME_X64_USER50_Handler>:

USER_HANDLER NAME=__RME_X64_USER50_Handler VECTNUM=50
ffffffff8020caad:	0f 01 f8             	swapgs
ffffffff8020cab0:	6a 00                	push   $0x0
ffffffff8020cab2:	6a 32                	push   $0x32
ffffffff8020cab4:	e9 fb 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cab9 <__RME_X64_USER51_Handler>:
USER_HANDLER NAME=__RME_X64_USER51_Handler VECTNUM=51
ffffffff8020cab9:	0f 01 f8             	swapgs
ffffffff8020cabc:	6a 00                	push   $0x0
ffffffff8020cabe:	6a 33                	push   $0x33
ffffffff8020cac0:	e9 ef 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cac5 <__RME_X64_USER52_Handler>:
USER_HANDLER NAME=__RME_X64_USER52_Handler VECTNUM=52
ffffffff8020cac5:	0f 01 f8             	swapgs
ffffffff8020cac8:	6a 00                	push   $0x0
ffffffff8020caca:	6a 34                	push   $0x34
ffffffff8020cacc:	e9 e3 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cad1 <__RME_X64_USER53_Handler>:
USER_HANDLER NAME=__RME_X64_USER53_Handler VECTNUM=53
ffffffff8020cad1:	0f 01 f8             	swapgs
ffffffff8020cad4:	6a 00                	push   $0x0
ffffffff8020cad6:	6a 35                	push   $0x35
ffffffff8020cad8:	e9 d7 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cadd <__RME_X64_USER54_Handler>:
USER_HANDLER NAME=__RME_X64_USER54_Handler VECTNUM=54
ffffffff8020cadd:	0f 01 f8             	swapgs
ffffffff8020cae0:	6a 00                	push   $0x0
ffffffff8020cae2:	6a 36                	push   $0x36
ffffffff8020cae4:	e9 cb 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cae9 <__RME_X64_USER55_Handler>:
USER_HANDLER NAME=__RME_X64_USER55_Handler VECTNUM=55
ffffffff8020cae9:	0f 01 f8             	swapgs
ffffffff8020caec:	6a 00                	push   $0x0
ffffffff8020caee:	6a 37                	push   $0x37
ffffffff8020caf0:	e9 bf 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020caf5 <__RME_X64_USER56_Handler>:
USER_HANDLER NAME=__RME_X64_USER56_Handler VECTNUM=56
ffffffff8020caf5:	0f 01 f8             	swapgs
ffffffff8020caf8:	6a 00                	push   $0x0
ffffffff8020cafa:	6a 38                	push   $0x38
ffffffff8020cafc:	e9 b3 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb01 <__RME_X64_USER57_Handler>:
USER_HANDLER NAME=__RME_X64_USER57_Handler VECTNUM=57
ffffffff8020cb01:	0f 01 f8             	swapgs
ffffffff8020cb04:	6a 00                	push   $0x0
ffffffff8020cb06:	6a 39                	push   $0x39
ffffffff8020cb08:	e9 a7 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb0d <__RME_X64_USER58_Handler>:
USER_HANDLER NAME=__RME_X64_USER58_Handler VECTNUM=58
ffffffff8020cb0d:	0f 01 f8             	swapgs
ffffffff8020cb10:	6a 00                	push   $0x0
ffffffff8020cb12:	6a 3a                	push   $0x3a
ffffffff8020cb14:	e9 9b 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb19 <__RME_X64_USER59_Handler>:
USER_HANDLER NAME=__RME_X64_USER59_Handler VECTNUM=59
ffffffff8020cb19:	0f 01 f8             	swapgs
ffffffff8020cb1c:	6a 00                	push   $0x0
ffffffff8020cb1e:	6a 3b                	push   $0x3b
ffffffff8020cb20:	e9 8f 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb25 <__RME_X64_USER60_Handler>:

USER_HANDLER NAME=__RME_X64_USER60_Handler VECTNUM=60
ffffffff8020cb25:	0f 01 f8             	swapgs
ffffffff8020cb28:	6a 00                	push   $0x0
ffffffff8020cb2a:	6a 3c                	push   $0x3c
ffffffff8020cb2c:	e9 83 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb31 <__RME_X64_USER61_Handler>:
USER_HANDLER NAME=__RME_X64_USER61_Handler VECTNUM=61
ffffffff8020cb31:	0f 01 f8             	swapgs
ffffffff8020cb34:	6a 00                	push   $0x0
ffffffff8020cb36:	6a 3d                	push   $0x3d
ffffffff8020cb38:	e9 77 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb3d <__RME_X64_USER62_Handler>:
USER_HANDLER NAME=__RME_X64_USER62_Handler VECTNUM=62
ffffffff8020cb3d:	0f 01 f8             	swapgs
ffffffff8020cb40:	6a 00                	push   $0x0
ffffffff8020cb42:	6a 3e                	push   $0x3e
ffffffff8020cb44:	e9 6b 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb49 <__RME_X64_USER63_Handler>:
USER_HANDLER NAME=__RME_X64_USER63_Handler VECTNUM=63
ffffffff8020cb49:	0f 01 f8             	swapgs
ffffffff8020cb4c:	6a 00                	push   $0x0
ffffffff8020cb4e:	6a 3f                	push   $0x3f
ffffffff8020cb50:	e9 5f 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb55 <__RME_X64_USER64_Handler>:
USER_HANDLER NAME=__RME_X64_USER64_Handler VECTNUM=64
ffffffff8020cb55:	0f 01 f8             	swapgs
ffffffff8020cb58:	6a 00                	push   $0x0
ffffffff8020cb5a:	6a 40                	push   $0x40
ffffffff8020cb5c:	e9 53 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb61 <__RME_X64_USER65_Handler>:
USER_HANDLER NAME=__RME_X64_USER65_Handler VECTNUM=65
ffffffff8020cb61:	0f 01 f8             	swapgs
ffffffff8020cb64:	6a 00                	push   $0x0
ffffffff8020cb66:	6a 41                	push   $0x41
ffffffff8020cb68:	e9 47 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb6d <__RME_X64_USER66_Handler>:
USER_HANDLER NAME=__RME_X64_USER66_Handler VECTNUM=66
ffffffff8020cb6d:	0f 01 f8             	swapgs
ffffffff8020cb70:	6a 00                	push   $0x0
ffffffff8020cb72:	6a 42                	push   $0x42
ffffffff8020cb74:	e9 3b 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb79 <__RME_X64_USER67_Handler>:
USER_HANDLER NAME=__RME_X64_USER67_Handler VECTNUM=67
ffffffff8020cb79:	0f 01 f8             	swapgs
ffffffff8020cb7c:	6a 00                	push   $0x0
ffffffff8020cb7e:	6a 43                	push   $0x43
ffffffff8020cb80:	e9 2f 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb85 <__RME_X64_USER68_Handler>:
USER_HANDLER NAME=__RME_X64_USER68_Handler VECTNUM=68
ffffffff8020cb85:	0f 01 f8             	swapgs
ffffffff8020cb88:	6a 00                	push   $0x0
ffffffff8020cb8a:	6a 44                	push   $0x44
ffffffff8020cb8c:	e9 23 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb91 <__RME_X64_USER69_Handler>:
USER_HANDLER NAME=__RME_X64_USER69_Handler VECTNUM=69
ffffffff8020cb91:	0f 01 f8             	swapgs
ffffffff8020cb94:	6a 00                	push   $0x0
ffffffff8020cb96:	6a 45                	push   $0x45
ffffffff8020cb98:	e9 17 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cb9d <__RME_X64_USER70_Handler>:

USER_HANDLER NAME=__RME_X64_USER70_Handler VECTNUM=70
ffffffff8020cb9d:	0f 01 f8             	swapgs
ffffffff8020cba0:	6a 00                	push   $0x0
ffffffff8020cba2:	6a 46                	push   $0x46
ffffffff8020cba4:	e9 0b 0a 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cba9 <__RME_X64_USER71_Handler>:
USER_HANDLER NAME=__RME_X64_USER71_Handler VECTNUM=71
ffffffff8020cba9:	0f 01 f8             	swapgs
ffffffff8020cbac:	6a 00                	push   $0x0
ffffffff8020cbae:	6a 47                	push   $0x47
ffffffff8020cbb0:	e9 ff 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cbb5 <__RME_X64_USER72_Handler>:
USER_HANDLER NAME=__RME_X64_USER72_Handler VECTNUM=72
ffffffff8020cbb5:	0f 01 f8             	swapgs
ffffffff8020cbb8:	6a 00                	push   $0x0
ffffffff8020cbba:	6a 48                	push   $0x48
ffffffff8020cbbc:	e9 f3 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cbc1 <__RME_X64_USER73_Handler>:
USER_HANDLER NAME=__RME_X64_USER73_Handler VECTNUM=73
ffffffff8020cbc1:	0f 01 f8             	swapgs
ffffffff8020cbc4:	6a 00                	push   $0x0
ffffffff8020cbc6:	6a 49                	push   $0x49
ffffffff8020cbc8:	e9 e7 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cbcd <__RME_X64_USER74_Handler>:
USER_HANDLER NAME=__RME_X64_USER74_Handler VECTNUM=74
ffffffff8020cbcd:	0f 01 f8             	swapgs
ffffffff8020cbd0:	6a 00                	push   $0x0
ffffffff8020cbd2:	6a 4a                	push   $0x4a
ffffffff8020cbd4:	e9 db 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cbd9 <__RME_X64_USER75_Handler>:
USER_HANDLER NAME=__RME_X64_USER75_Handler VECTNUM=75
ffffffff8020cbd9:	0f 01 f8             	swapgs
ffffffff8020cbdc:	6a 00                	push   $0x0
ffffffff8020cbde:	6a 4b                	push   $0x4b
ffffffff8020cbe0:	e9 cf 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cbe5 <__RME_X64_USER76_Handler>:
USER_HANDLER NAME=__RME_X64_USER76_Handler VECTNUM=76
ffffffff8020cbe5:	0f 01 f8             	swapgs
ffffffff8020cbe8:	6a 00                	push   $0x0
ffffffff8020cbea:	6a 4c                	push   $0x4c
ffffffff8020cbec:	e9 c3 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cbf1 <__RME_X64_USER77_Handler>:
USER_HANDLER NAME=__RME_X64_USER77_Handler VECTNUM=77
ffffffff8020cbf1:	0f 01 f8             	swapgs
ffffffff8020cbf4:	6a 00                	push   $0x0
ffffffff8020cbf6:	6a 4d                	push   $0x4d
ffffffff8020cbf8:	e9 b7 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cbfd <__RME_X64_USER78_Handler>:
USER_HANDLER NAME=__RME_X64_USER78_Handler VECTNUM=78
ffffffff8020cbfd:	0f 01 f8             	swapgs
ffffffff8020cc00:	6a 00                	push   $0x0
ffffffff8020cc02:	6a 4e                	push   $0x4e
ffffffff8020cc04:	e9 ab 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc09 <__RME_X64_USER79_Handler>:
USER_HANDLER NAME=__RME_X64_USER79_Handler VECTNUM=79
ffffffff8020cc09:	0f 01 f8             	swapgs
ffffffff8020cc0c:	6a 00                	push   $0x0
ffffffff8020cc0e:	6a 4f                	push   $0x4f
ffffffff8020cc10:	e9 9f 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc15 <__RME_X64_USER80_Handler>:

USER_HANDLER NAME=__RME_X64_USER80_Handler VECTNUM=80
ffffffff8020cc15:	0f 01 f8             	swapgs
ffffffff8020cc18:	6a 00                	push   $0x0
ffffffff8020cc1a:	6a 50                	push   $0x50
ffffffff8020cc1c:	e9 93 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc21 <__RME_X64_USER81_Handler>:
USER_HANDLER NAME=__RME_X64_USER81_Handler VECTNUM=81
ffffffff8020cc21:	0f 01 f8             	swapgs
ffffffff8020cc24:	6a 00                	push   $0x0
ffffffff8020cc26:	6a 51                	push   $0x51
ffffffff8020cc28:	e9 87 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc2d <__RME_X64_USER82_Handler>:
USER_HANDLER NAME=__RME_X64_USER82_Handler VECTNUM=82
ffffffff8020cc2d:	0f 01 f8             	swapgs
ffffffff8020cc30:	6a 00                	push   $0x0
ffffffff8020cc32:	6a 52                	push   $0x52
ffffffff8020cc34:	e9 7b 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc39 <__RME_X64_USER83_Handler>:
USER_HANDLER NAME=__RME_X64_USER83_Handler VECTNUM=83
ffffffff8020cc39:	0f 01 f8             	swapgs
ffffffff8020cc3c:	6a 00                	push   $0x0
ffffffff8020cc3e:	6a 53                	push   $0x53
ffffffff8020cc40:	e9 6f 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc45 <__RME_X64_USER84_Handler>:
USER_HANDLER NAME=__RME_X64_USER84_Handler VECTNUM=84
ffffffff8020cc45:	0f 01 f8             	swapgs
ffffffff8020cc48:	6a 00                	push   $0x0
ffffffff8020cc4a:	6a 54                	push   $0x54
ffffffff8020cc4c:	e9 63 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc51 <__RME_X64_USER85_Handler>:
USER_HANDLER NAME=__RME_X64_USER85_Handler VECTNUM=85
ffffffff8020cc51:	0f 01 f8             	swapgs
ffffffff8020cc54:	6a 00                	push   $0x0
ffffffff8020cc56:	6a 55                	push   $0x55
ffffffff8020cc58:	e9 57 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc5d <__RME_X64_USER86_Handler>:
USER_HANDLER NAME=__RME_X64_USER86_Handler VECTNUM=86
ffffffff8020cc5d:	0f 01 f8             	swapgs
ffffffff8020cc60:	6a 00                	push   $0x0
ffffffff8020cc62:	6a 56                	push   $0x56
ffffffff8020cc64:	e9 4b 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc69 <__RME_X64_USER87_Handler>:
USER_HANDLER NAME=__RME_X64_USER87_Handler VECTNUM=87
ffffffff8020cc69:	0f 01 f8             	swapgs
ffffffff8020cc6c:	6a 00                	push   $0x0
ffffffff8020cc6e:	6a 57                	push   $0x57
ffffffff8020cc70:	e9 3f 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc75 <__RME_X64_USER88_Handler>:
USER_HANDLER NAME=__RME_X64_USER88_Handler VECTNUM=88
ffffffff8020cc75:	0f 01 f8             	swapgs
ffffffff8020cc78:	6a 00                	push   $0x0
ffffffff8020cc7a:	6a 58                	push   $0x58
ffffffff8020cc7c:	e9 33 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc81 <__RME_X64_USER89_Handler>:
USER_HANDLER NAME=__RME_X64_USER89_Handler VECTNUM=89
ffffffff8020cc81:	0f 01 f8             	swapgs
ffffffff8020cc84:	6a 00                	push   $0x0
ffffffff8020cc86:	6a 59                	push   $0x59
ffffffff8020cc88:	e9 27 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc8d <__RME_X64_USER90_Handler>:

USER_HANDLER NAME=__RME_X64_USER90_Handler VECTNUM=90
ffffffff8020cc8d:	0f 01 f8             	swapgs
ffffffff8020cc90:	6a 00                	push   $0x0
ffffffff8020cc92:	6a 5a                	push   $0x5a
ffffffff8020cc94:	e9 1b 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cc99 <__RME_X64_USER91_Handler>:
USER_HANDLER NAME=__RME_X64_USER91_Handler VECTNUM=91
ffffffff8020cc99:	0f 01 f8             	swapgs
ffffffff8020cc9c:	6a 00                	push   $0x0
ffffffff8020cc9e:	6a 5b                	push   $0x5b
ffffffff8020cca0:	e9 0f 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cca5 <__RME_X64_USER92_Handler>:
USER_HANDLER NAME=__RME_X64_USER92_Handler VECTNUM=92
ffffffff8020cca5:	0f 01 f8             	swapgs
ffffffff8020cca8:	6a 00                	push   $0x0
ffffffff8020ccaa:	6a 5c                	push   $0x5c
ffffffff8020ccac:	e9 03 09 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ccb1 <__RME_X64_USER93_Handler>:
USER_HANDLER NAME=__RME_X64_USER93_Handler VECTNUM=93
ffffffff8020ccb1:	0f 01 f8             	swapgs
ffffffff8020ccb4:	6a 00                	push   $0x0
ffffffff8020ccb6:	6a 5d                	push   $0x5d
ffffffff8020ccb8:	e9 f7 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ccbd <__RME_X64_USER94_Handler>:
USER_HANDLER NAME=__RME_X64_USER94_Handler VECTNUM=94
ffffffff8020ccbd:	0f 01 f8             	swapgs
ffffffff8020ccc0:	6a 00                	push   $0x0
ffffffff8020ccc2:	6a 5e                	push   $0x5e
ffffffff8020ccc4:	e9 eb 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ccc9 <__RME_X64_USER95_Handler>:
USER_HANDLER NAME=__RME_X64_USER95_Handler VECTNUM=95
ffffffff8020ccc9:	0f 01 f8             	swapgs
ffffffff8020cccc:	6a 00                	push   $0x0
ffffffff8020ccce:	6a 5f                	push   $0x5f
ffffffff8020ccd0:	e9 df 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ccd5 <__RME_X64_USER96_Handler>:
USER_HANDLER NAME=__RME_X64_USER96_Handler VECTNUM=96
ffffffff8020ccd5:	0f 01 f8             	swapgs
ffffffff8020ccd8:	6a 00                	push   $0x0
ffffffff8020ccda:	6a 60                	push   $0x60
ffffffff8020ccdc:	e9 d3 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cce1 <__RME_X64_USER97_Handler>:
USER_HANDLER NAME=__RME_X64_USER97_Handler VECTNUM=97
ffffffff8020cce1:	0f 01 f8             	swapgs
ffffffff8020cce4:	6a 00                	push   $0x0
ffffffff8020cce6:	6a 61                	push   $0x61
ffffffff8020cce8:	e9 c7 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cced <__RME_X64_USER98_Handler>:
USER_HANDLER NAME=__RME_X64_USER98_Handler VECTNUM=98
ffffffff8020cced:	0f 01 f8             	swapgs
ffffffff8020ccf0:	6a 00                	push   $0x0
ffffffff8020ccf2:	6a 62                	push   $0x62
ffffffff8020ccf4:	e9 bb 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ccf9 <__RME_X64_USER99_Handler>:
USER_HANDLER NAME=__RME_X64_USER99_Handler VECTNUM=99
ffffffff8020ccf9:	0f 01 f8             	swapgs
ffffffff8020ccfc:	6a 00                	push   $0x0
ffffffff8020ccfe:	6a 63                	push   $0x63
ffffffff8020cd00:	e9 af 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd05 <__RME_X64_USER100_Handler>:

USER_HANDLER NAME=__RME_X64_USER100_Handler VECTNUM=100
ffffffff8020cd05:	0f 01 f8             	swapgs
ffffffff8020cd08:	6a 00                	push   $0x0
ffffffff8020cd0a:	6a 64                	push   $0x64
ffffffff8020cd0c:	e9 a3 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd11 <__RME_X64_USER101_Handler>:
USER_HANDLER NAME=__RME_X64_USER101_Handler VECTNUM=101
ffffffff8020cd11:	0f 01 f8             	swapgs
ffffffff8020cd14:	6a 00                	push   $0x0
ffffffff8020cd16:	6a 65                	push   $0x65
ffffffff8020cd18:	e9 97 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd1d <__RME_X64_USER102_Handler>:
USER_HANDLER NAME=__RME_X64_USER102_Handler VECTNUM=102
ffffffff8020cd1d:	0f 01 f8             	swapgs
ffffffff8020cd20:	6a 00                	push   $0x0
ffffffff8020cd22:	6a 66                	push   $0x66
ffffffff8020cd24:	e9 8b 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd29 <__RME_X64_USER103_Handler>:
USER_HANDLER NAME=__RME_X64_USER103_Handler VECTNUM=103
ffffffff8020cd29:	0f 01 f8             	swapgs
ffffffff8020cd2c:	6a 00                	push   $0x0
ffffffff8020cd2e:	6a 67                	push   $0x67
ffffffff8020cd30:	e9 7f 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd35 <__RME_X64_USER104_Handler>:
USER_HANDLER NAME=__RME_X64_USER104_Handler VECTNUM=104
ffffffff8020cd35:	0f 01 f8             	swapgs
ffffffff8020cd38:	6a 00                	push   $0x0
ffffffff8020cd3a:	6a 68                	push   $0x68
ffffffff8020cd3c:	e9 73 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd41 <__RME_X64_USER105_Handler>:
USER_HANDLER NAME=__RME_X64_USER105_Handler VECTNUM=105
ffffffff8020cd41:	0f 01 f8             	swapgs
ffffffff8020cd44:	6a 00                	push   $0x0
ffffffff8020cd46:	6a 69                	push   $0x69
ffffffff8020cd48:	e9 67 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd4d <__RME_X64_USER106_Handler>:
USER_HANDLER NAME=__RME_X64_USER106_Handler VECTNUM=106
ffffffff8020cd4d:	0f 01 f8             	swapgs
ffffffff8020cd50:	6a 00                	push   $0x0
ffffffff8020cd52:	6a 6a                	push   $0x6a
ffffffff8020cd54:	e9 5b 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd59 <__RME_X64_USER107_Handler>:
USER_HANDLER NAME=__RME_X64_USER107_Handler VECTNUM=107
ffffffff8020cd59:	0f 01 f8             	swapgs
ffffffff8020cd5c:	6a 00                	push   $0x0
ffffffff8020cd5e:	6a 6b                	push   $0x6b
ffffffff8020cd60:	e9 4f 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd65 <__RME_X64_USER108_Handler>:
USER_HANDLER NAME=__RME_X64_USER108_Handler VECTNUM=108
ffffffff8020cd65:	0f 01 f8             	swapgs
ffffffff8020cd68:	6a 00                	push   $0x0
ffffffff8020cd6a:	6a 6c                	push   $0x6c
ffffffff8020cd6c:	e9 43 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd71 <__RME_X64_USER109_Handler>:
USER_HANDLER NAME=__RME_X64_USER109_Handler VECTNUM=109
ffffffff8020cd71:	0f 01 f8             	swapgs
ffffffff8020cd74:	6a 00                	push   $0x0
ffffffff8020cd76:	6a 6d                	push   $0x6d
ffffffff8020cd78:	e9 37 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd7d <__RME_X64_USER110_Handler>:

USER_HANDLER NAME=__RME_X64_USER110_Handler VECTNUM=110
ffffffff8020cd7d:	0f 01 f8             	swapgs
ffffffff8020cd80:	6a 00                	push   $0x0
ffffffff8020cd82:	6a 6e                	push   $0x6e
ffffffff8020cd84:	e9 2b 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd89 <__RME_X64_USER111_Handler>:
USER_HANDLER NAME=__RME_X64_USER111_Handler VECTNUM=111
ffffffff8020cd89:	0f 01 f8             	swapgs
ffffffff8020cd8c:	6a 00                	push   $0x0
ffffffff8020cd8e:	6a 6f                	push   $0x6f
ffffffff8020cd90:	e9 1f 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cd95 <__RME_X64_USER112_Handler>:
USER_HANDLER NAME=__RME_X64_USER112_Handler VECTNUM=112
ffffffff8020cd95:	0f 01 f8             	swapgs
ffffffff8020cd98:	6a 00                	push   $0x0
ffffffff8020cd9a:	6a 70                	push   $0x70
ffffffff8020cd9c:	e9 13 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cda1 <__RME_X64_USER113_Handler>:
USER_HANDLER NAME=__RME_X64_USER113_Handler VECTNUM=113
ffffffff8020cda1:	0f 01 f8             	swapgs
ffffffff8020cda4:	6a 00                	push   $0x0
ffffffff8020cda6:	6a 71                	push   $0x71
ffffffff8020cda8:	e9 07 08 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cdad <__RME_X64_USER114_Handler>:
USER_HANDLER NAME=__RME_X64_USER114_Handler VECTNUM=114
ffffffff8020cdad:	0f 01 f8             	swapgs
ffffffff8020cdb0:	6a 00                	push   $0x0
ffffffff8020cdb2:	6a 72                	push   $0x72
ffffffff8020cdb4:	e9 fb 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cdb9 <__RME_X64_USER115_Handler>:
USER_HANDLER NAME=__RME_X64_USER115_Handler VECTNUM=115
ffffffff8020cdb9:	0f 01 f8             	swapgs
ffffffff8020cdbc:	6a 00                	push   $0x0
ffffffff8020cdbe:	6a 73                	push   $0x73
ffffffff8020cdc0:	e9 ef 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cdc5 <__RME_X64_USER116_Handler>:
USER_HANDLER NAME=__RME_X64_USER116_Handler VECTNUM=116
ffffffff8020cdc5:	0f 01 f8             	swapgs
ffffffff8020cdc8:	6a 00                	push   $0x0
ffffffff8020cdca:	6a 74                	push   $0x74
ffffffff8020cdcc:	e9 e3 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cdd1 <__RME_X64_USER117_Handler>:
USER_HANDLER NAME=__RME_X64_USER117_Handler VECTNUM=117
ffffffff8020cdd1:	0f 01 f8             	swapgs
ffffffff8020cdd4:	6a 00                	push   $0x0
ffffffff8020cdd6:	6a 75                	push   $0x75
ffffffff8020cdd8:	e9 d7 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cddd <__RME_X64_USER118_Handler>:
USER_HANDLER NAME=__RME_X64_USER118_Handler VECTNUM=118
ffffffff8020cddd:	0f 01 f8             	swapgs
ffffffff8020cde0:	6a 00                	push   $0x0
ffffffff8020cde2:	6a 76                	push   $0x76
ffffffff8020cde4:	e9 cb 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cde9 <__RME_X64_USER119_Handler>:
USER_HANDLER NAME=__RME_X64_USER119_Handler VECTNUM=119
ffffffff8020cde9:	0f 01 f8             	swapgs
ffffffff8020cdec:	6a 00                	push   $0x0
ffffffff8020cdee:	6a 77                	push   $0x77
ffffffff8020cdf0:	e9 bf 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cdf5 <__RME_X64_USER120_Handler>:

USER_HANDLER NAME=__RME_X64_USER120_Handler VECTNUM=120
ffffffff8020cdf5:	0f 01 f8             	swapgs
ffffffff8020cdf8:	6a 00                	push   $0x0
ffffffff8020cdfa:	6a 78                	push   $0x78
ffffffff8020cdfc:	e9 b3 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce01 <__RME_X64_USER121_Handler>:
USER_HANDLER NAME=__RME_X64_USER121_Handler VECTNUM=121
ffffffff8020ce01:	0f 01 f8             	swapgs
ffffffff8020ce04:	6a 00                	push   $0x0
ffffffff8020ce06:	6a 79                	push   $0x79
ffffffff8020ce08:	e9 a7 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce0d <__RME_X64_USER122_Handler>:
USER_HANDLER NAME=__RME_X64_USER122_Handler VECTNUM=122
ffffffff8020ce0d:	0f 01 f8             	swapgs
ffffffff8020ce10:	6a 00                	push   $0x0
ffffffff8020ce12:	6a 7a                	push   $0x7a
ffffffff8020ce14:	e9 9b 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce19 <__RME_X64_USER123_Handler>:
USER_HANDLER NAME=__RME_X64_USER123_Handler VECTNUM=123
ffffffff8020ce19:	0f 01 f8             	swapgs
ffffffff8020ce1c:	6a 00                	push   $0x0
ffffffff8020ce1e:	6a 7b                	push   $0x7b
ffffffff8020ce20:	e9 8f 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce25 <__RME_X64_USER124_Handler>:
USER_HANDLER NAME=__RME_X64_USER124_Handler VECTNUM=124
ffffffff8020ce25:	0f 01 f8             	swapgs
ffffffff8020ce28:	6a 00                	push   $0x0
ffffffff8020ce2a:	6a 7c                	push   $0x7c
ffffffff8020ce2c:	e9 83 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce31 <__RME_X64_USER125_Handler>:
USER_HANDLER NAME=__RME_X64_USER125_Handler VECTNUM=125
ffffffff8020ce31:	0f 01 f8             	swapgs
ffffffff8020ce34:	6a 00                	push   $0x0
ffffffff8020ce36:	6a 7d                	push   $0x7d
ffffffff8020ce38:	e9 77 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce3d <__RME_X64_USER126_Handler>:
USER_HANDLER NAME=__RME_X64_USER126_Handler VECTNUM=126
ffffffff8020ce3d:	0f 01 f8             	swapgs
ffffffff8020ce40:	6a 00                	push   $0x0
ffffffff8020ce42:	6a 7e                	push   $0x7e
ffffffff8020ce44:	e9 6b 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce49 <__RME_X64_USER127_Handler>:
USER_HANDLER NAME=__RME_X64_USER127_Handler VECTNUM=127
ffffffff8020ce49:	0f 01 f8             	swapgs
ffffffff8020ce4c:	6a 00                	push   $0x0
ffffffff8020ce4e:	6a 7f                	push   $0x7f
ffffffff8020ce50:	e9 5f 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce55 <__RME_X64_USER128_Handler>:
USER_HANDLER NAME=__RME_X64_USER128_Handler VECTNUM=128
ffffffff8020ce55:	0f 01 f8             	swapgs
ffffffff8020ce58:	6a 00                	push   $0x0
ffffffff8020ce5a:	68 80 00 00 00       	push   $0x80
ffffffff8020ce5f:	e9 50 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce64 <__RME_X64_USER129_Handler>:
USER_HANDLER NAME=__RME_X64_USER129_Handler VECTNUM=129
ffffffff8020ce64:	0f 01 f8             	swapgs
ffffffff8020ce67:	6a 00                	push   $0x0
ffffffff8020ce69:	68 81 00 00 00       	push   $0x81
ffffffff8020ce6e:	e9 41 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce73 <__RME_X64_USER130_Handler>:

USER_HANDLER NAME=__RME_X64_USER130_Handler VECTNUM=130
ffffffff8020ce73:	0f 01 f8             	swapgs
ffffffff8020ce76:	6a 00                	push   $0x0
ffffffff8020ce78:	68 82 00 00 00       	push   $0x82
ffffffff8020ce7d:	e9 32 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce82 <__RME_X64_USER131_Handler>:
USER_HANDLER NAME=__RME_X64_USER131_Handler VECTNUM=131
ffffffff8020ce82:	0f 01 f8             	swapgs
ffffffff8020ce85:	6a 00                	push   $0x0
ffffffff8020ce87:	68 83 00 00 00       	push   $0x83
ffffffff8020ce8c:	e9 23 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ce91 <__RME_X64_USER132_Handler>:
USER_HANDLER NAME=__RME_X64_USER132_Handler VECTNUM=132
ffffffff8020ce91:	0f 01 f8             	swapgs
ffffffff8020ce94:	6a 00                	push   $0x0
ffffffff8020ce96:	68 84 00 00 00       	push   $0x84
ffffffff8020ce9b:	e9 14 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cea0 <__RME_X64_USER133_Handler>:
USER_HANDLER NAME=__RME_X64_USER133_Handler VECTNUM=133
ffffffff8020cea0:	0f 01 f8             	swapgs
ffffffff8020cea3:	6a 00                	push   $0x0
ffffffff8020cea5:	68 85 00 00 00       	push   $0x85
ffffffff8020ceaa:	e9 05 07 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ceaf <__RME_X64_USER134_Handler>:
USER_HANDLER NAME=__RME_X64_USER134_Handler VECTNUM=134
ffffffff8020ceaf:	0f 01 f8             	swapgs
ffffffff8020ceb2:	6a 00                	push   $0x0
ffffffff8020ceb4:	68 86 00 00 00       	push   $0x86
ffffffff8020ceb9:	e9 f6 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cebe <__RME_X64_USER135_Handler>:
USER_HANDLER NAME=__RME_X64_USER135_Handler VECTNUM=135
ffffffff8020cebe:	0f 01 f8             	swapgs
ffffffff8020cec1:	6a 00                	push   $0x0
ffffffff8020cec3:	68 87 00 00 00       	push   $0x87
ffffffff8020cec8:	e9 e7 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cecd <__RME_X64_USER136_Handler>:
USER_HANDLER NAME=__RME_X64_USER136_Handler VECTNUM=136
ffffffff8020cecd:	0f 01 f8             	swapgs
ffffffff8020ced0:	6a 00                	push   $0x0
ffffffff8020ced2:	68 88 00 00 00       	push   $0x88
ffffffff8020ced7:	e9 d8 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cedc <__RME_X64_USER137_Handler>:
USER_HANDLER NAME=__RME_X64_USER137_Handler VECTNUM=137
ffffffff8020cedc:	0f 01 f8             	swapgs
ffffffff8020cedf:	6a 00                	push   $0x0
ffffffff8020cee1:	68 89 00 00 00       	push   $0x89
ffffffff8020cee6:	e9 c9 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020ceeb <__RME_X64_USER138_Handler>:
USER_HANDLER NAME=__RME_X64_USER138_Handler VECTNUM=138
ffffffff8020ceeb:	0f 01 f8             	swapgs
ffffffff8020ceee:	6a 00                	push   $0x0
ffffffff8020cef0:	68 8a 00 00 00       	push   $0x8a
ffffffff8020cef5:	e9 ba 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cefa <__RME_X64_USER139_Handler>:
USER_HANDLER NAME=__RME_X64_USER139_Handler VECTNUM=139
ffffffff8020cefa:	0f 01 f8             	swapgs
ffffffff8020cefd:	6a 00                	push   $0x0
ffffffff8020ceff:	68 8b 00 00 00       	push   $0x8b
ffffffff8020cf04:	e9 ab 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cf09 <__RME_X64_USER140_Handler>:

USER_HANDLER NAME=__RME_X64_USER140_Handler VECTNUM=140
ffffffff8020cf09:	0f 01 f8             	swapgs
ffffffff8020cf0c:	6a 00                	push   $0x0
ffffffff8020cf0e:	68 8c 00 00 00       	push   $0x8c
ffffffff8020cf13:	e9 9c 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cf18 <__RME_X64_USER141_Handler>:
USER_HANDLER NAME=__RME_X64_USER141_Handler VECTNUM=141
ffffffff8020cf18:	0f 01 f8             	swapgs
ffffffff8020cf1b:	6a 00                	push   $0x0
ffffffff8020cf1d:	68 8d 00 00 00       	push   $0x8d
ffffffff8020cf22:	e9 8d 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cf27 <__RME_X64_USER142_Handler>:
USER_HANDLER NAME=__RME_X64_USER142_Handler VECTNUM=142
ffffffff8020cf27:	0f 01 f8             	swapgs
ffffffff8020cf2a:	6a 00                	push   $0x0
ffffffff8020cf2c:	68 8e 00 00 00       	push   $0x8e
ffffffff8020cf31:	e9 7e 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cf36 <__RME_X64_USER143_Handler>:
USER_HANDLER NAME=__RME_X64_USER143_Handler VECTNUM=143
ffffffff8020cf36:	0f 01 f8             	swapgs
ffffffff8020cf39:	6a 00                	push   $0x0
ffffffff8020cf3b:	68 8f 00 00 00       	push   $0x8f
ffffffff8020cf40:	e9 6f 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cf45 <__RME_X64_USER144_Handler>:
USER_HANDLER NAME=__RME_X64_USER144_Handler VECTNUM=144
ffffffff8020cf45:	0f 01 f8             	swapgs
ffffffff8020cf48:	6a 00                	push   $0x0
ffffffff8020cf4a:	68 90 00 00 00       	push   $0x90
ffffffff8020cf4f:	e9 60 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cf54 <__RME_X64_USER145_Handler>:
USER_HANDLER NAME=__RME_X64_USER145_Handler VECTNUM=145
ffffffff8020cf54:	0f 01 f8             	swapgs
ffffffff8020cf57:	6a 00                	push   $0x0
ffffffff8020cf59:	68 91 00 00 00       	push   $0x91
ffffffff8020cf5e:	e9 51 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cf63 <__RME_X64_USER146_Handler>:
USER_HANDLER NAME=__RME_X64_USER146_Handler VECTNUM=146
ffffffff8020cf63:	0f 01 f8             	swapgs
ffffffff8020cf66:	6a 00                	push   $0x0
ffffffff8020cf68:	68 92 00 00 00       	push   $0x92
ffffffff8020cf6d:	e9 42 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cf72 <__RME_X64_USER147_Handler>:
USER_HANDLER NAME=__RME_X64_USER147_Handler VECTNUM=147
ffffffff8020cf72:	0f 01 f8             	swapgs
ffffffff8020cf75:	6a 00                	push   $0x0
ffffffff8020cf77:	68 93 00 00 00       	push   $0x93
ffffffff8020cf7c:	e9 33 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cf81 <__RME_X64_USER148_Handler>:
USER_HANDLER NAME=__RME_X64_USER148_Handler VECTNUM=148
ffffffff8020cf81:	0f 01 f8             	swapgs
ffffffff8020cf84:	6a 00                	push   $0x0
ffffffff8020cf86:	68 94 00 00 00       	push   $0x94
ffffffff8020cf8b:	e9 24 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cf90 <__RME_X64_USER149_Handler>:
USER_HANDLER NAME=__RME_X64_USER149_Handler VECTNUM=149
ffffffff8020cf90:	0f 01 f8             	swapgs
ffffffff8020cf93:	6a 00                	push   $0x0
ffffffff8020cf95:	68 95 00 00 00       	push   $0x95
ffffffff8020cf9a:	e9 15 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cf9f <__RME_X64_USER150_Handler>:

USER_HANDLER NAME=__RME_X64_USER150_Handler VECTNUM=150
ffffffff8020cf9f:	0f 01 f8             	swapgs
ffffffff8020cfa2:	6a 00                	push   $0x0
ffffffff8020cfa4:	68 96 00 00 00       	push   $0x96
ffffffff8020cfa9:	e9 06 06 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cfae <__RME_X64_USER151_Handler>:
USER_HANDLER NAME=__RME_X64_USER151_Handler VECTNUM=151
ffffffff8020cfae:	0f 01 f8             	swapgs
ffffffff8020cfb1:	6a 00                	push   $0x0
ffffffff8020cfb3:	68 97 00 00 00       	push   $0x97
ffffffff8020cfb8:	e9 f7 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cfbd <__RME_X64_USER152_Handler>:
USER_HANDLER NAME=__RME_X64_USER152_Handler VECTNUM=152
ffffffff8020cfbd:	0f 01 f8             	swapgs
ffffffff8020cfc0:	6a 00                	push   $0x0
ffffffff8020cfc2:	68 98 00 00 00       	push   $0x98
ffffffff8020cfc7:	e9 e8 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cfcc <__RME_X64_USER153_Handler>:
USER_HANDLER NAME=__RME_X64_USER153_Handler VECTNUM=153
ffffffff8020cfcc:	0f 01 f8             	swapgs
ffffffff8020cfcf:	6a 00                	push   $0x0
ffffffff8020cfd1:	68 99 00 00 00       	push   $0x99
ffffffff8020cfd6:	e9 d9 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cfdb <__RME_X64_USER154_Handler>:
USER_HANDLER NAME=__RME_X64_USER154_Handler VECTNUM=154
ffffffff8020cfdb:	0f 01 f8             	swapgs
ffffffff8020cfde:	6a 00                	push   $0x0
ffffffff8020cfe0:	68 9a 00 00 00       	push   $0x9a
ffffffff8020cfe5:	e9 ca 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cfea <__RME_X64_USER155_Handler>:
USER_HANDLER NAME=__RME_X64_USER155_Handler VECTNUM=155
ffffffff8020cfea:	0f 01 f8             	swapgs
ffffffff8020cfed:	6a 00                	push   $0x0
ffffffff8020cfef:	68 9b 00 00 00       	push   $0x9b
ffffffff8020cff4:	e9 bb 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020cff9 <__RME_X64_USER156_Handler>:
USER_HANDLER NAME=__RME_X64_USER156_Handler VECTNUM=156
ffffffff8020cff9:	0f 01 f8             	swapgs
ffffffff8020cffc:	6a 00                	push   $0x0
ffffffff8020cffe:	68 9c 00 00 00       	push   $0x9c
ffffffff8020d003:	e9 ac 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d008 <__RME_X64_USER157_Handler>:
USER_HANDLER NAME=__RME_X64_USER157_Handler VECTNUM=157
ffffffff8020d008:	0f 01 f8             	swapgs
ffffffff8020d00b:	6a 00                	push   $0x0
ffffffff8020d00d:	68 9d 00 00 00       	push   $0x9d
ffffffff8020d012:	e9 9d 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d017 <__RME_X64_USER158_Handler>:
USER_HANDLER NAME=__RME_X64_USER158_Handler VECTNUM=158
ffffffff8020d017:	0f 01 f8             	swapgs
ffffffff8020d01a:	6a 00                	push   $0x0
ffffffff8020d01c:	68 9e 00 00 00       	push   $0x9e
ffffffff8020d021:	e9 8e 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d026 <__RME_X64_USER159_Handler>:
USER_HANDLER NAME=__RME_X64_USER159_Handler VECTNUM=159
ffffffff8020d026:	0f 01 f8             	swapgs
ffffffff8020d029:	6a 00                	push   $0x0
ffffffff8020d02b:	68 9f 00 00 00       	push   $0x9f
ffffffff8020d030:	e9 7f 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d035 <__RME_X64_USER160_Handler>:

USER_HANDLER NAME=__RME_X64_USER160_Handler VECTNUM=160
ffffffff8020d035:	0f 01 f8             	swapgs
ffffffff8020d038:	6a 00                	push   $0x0
ffffffff8020d03a:	68 a0 00 00 00       	push   $0xa0
ffffffff8020d03f:	e9 70 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d044 <__RME_X64_USER161_Handler>:
USER_HANDLER NAME=__RME_X64_USER161_Handler VECTNUM=161
ffffffff8020d044:	0f 01 f8             	swapgs
ffffffff8020d047:	6a 00                	push   $0x0
ffffffff8020d049:	68 a1 00 00 00       	push   $0xa1
ffffffff8020d04e:	e9 61 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d053 <__RME_X64_USER162_Handler>:
USER_HANDLER NAME=__RME_X64_USER162_Handler VECTNUM=162
ffffffff8020d053:	0f 01 f8             	swapgs
ffffffff8020d056:	6a 00                	push   $0x0
ffffffff8020d058:	68 a2 00 00 00       	push   $0xa2
ffffffff8020d05d:	e9 52 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d062 <__RME_X64_USER163_Handler>:
USER_HANDLER NAME=__RME_X64_USER163_Handler VECTNUM=163
ffffffff8020d062:	0f 01 f8             	swapgs
ffffffff8020d065:	6a 00                	push   $0x0
ffffffff8020d067:	68 a3 00 00 00       	push   $0xa3
ffffffff8020d06c:	e9 43 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d071 <__RME_X64_USER164_Handler>:
USER_HANDLER NAME=__RME_X64_USER164_Handler VECTNUM=164
ffffffff8020d071:	0f 01 f8             	swapgs
ffffffff8020d074:	6a 00                	push   $0x0
ffffffff8020d076:	68 a4 00 00 00       	push   $0xa4
ffffffff8020d07b:	e9 34 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d080 <__RME_X64_USER165_Handler>:
USER_HANDLER NAME=__RME_X64_USER165_Handler VECTNUM=165
ffffffff8020d080:	0f 01 f8             	swapgs
ffffffff8020d083:	6a 00                	push   $0x0
ffffffff8020d085:	68 a5 00 00 00       	push   $0xa5
ffffffff8020d08a:	e9 25 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d08f <__RME_X64_USER166_Handler>:
USER_HANDLER NAME=__RME_X64_USER166_Handler VECTNUM=166
ffffffff8020d08f:	0f 01 f8             	swapgs
ffffffff8020d092:	6a 00                	push   $0x0
ffffffff8020d094:	68 a6 00 00 00       	push   $0xa6
ffffffff8020d099:	e9 16 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d09e <__RME_X64_USER167_Handler>:
USER_HANDLER NAME=__RME_X64_USER167_Handler VECTNUM=167
ffffffff8020d09e:	0f 01 f8             	swapgs
ffffffff8020d0a1:	6a 00                	push   $0x0
ffffffff8020d0a3:	68 a7 00 00 00       	push   $0xa7
ffffffff8020d0a8:	e9 07 05 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d0ad <__RME_X64_USER168_Handler>:
USER_HANDLER NAME=__RME_X64_USER168_Handler VECTNUM=168
ffffffff8020d0ad:	0f 01 f8             	swapgs
ffffffff8020d0b0:	6a 00                	push   $0x0
ffffffff8020d0b2:	68 a8 00 00 00       	push   $0xa8
ffffffff8020d0b7:	e9 f8 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d0bc <__RME_X64_USER169_Handler>:
USER_HANDLER NAME=__RME_X64_USER169_Handler VECTNUM=169
ffffffff8020d0bc:	0f 01 f8             	swapgs
ffffffff8020d0bf:	6a 00                	push   $0x0
ffffffff8020d0c1:	68 a9 00 00 00       	push   $0xa9
ffffffff8020d0c6:	e9 e9 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d0cb <__RME_X64_USER170_Handler>:

USER_HANDLER NAME=__RME_X64_USER170_Handler VECTNUM=170
ffffffff8020d0cb:	0f 01 f8             	swapgs
ffffffff8020d0ce:	6a 00                	push   $0x0
ffffffff8020d0d0:	68 aa 00 00 00       	push   $0xaa
ffffffff8020d0d5:	e9 da 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d0da <__RME_X64_USER171_Handler>:
USER_HANDLER NAME=__RME_X64_USER171_Handler VECTNUM=171
ffffffff8020d0da:	0f 01 f8             	swapgs
ffffffff8020d0dd:	6a 00                	push   $0x0
ffffffff8020d0df:	68 ab 00 00 00       	push   $0xab
ffffffff8020d0e4:	e9 cb 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d0e9 <__RME_X64_USER172_Handler>:
USER_HANDLER NAME=__RME_X64_USER172_Handler VECTNUM=172
ffffffff8020d0e9:	0f 01 f8             	swapgs
ffffffff8020d0ec:	6a 00                	push   $0x0
ffffffff8020d0ee:	68 ac 00 00 00       	push   $0xac
ffffffff8020d0f3:	e9 bc 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d0f8 <__RME_X64_USER173_Handler>:
USER_HANDLER NAME=__RME_X64_USER173_Handler VECTNUM=173
ffffffff8020d0f8:	0f 01 f8             	swapgs
ffffffff8020d0fb:	6a 00                	push   $0x0
ffffffff8020d0fd:	68 ad 00 00 00       	push   $0xad
ffffffff8020d102:	e9 ad 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d107 <__RME_X64_USER174_Handler>:
USER_HANDLER NAME=__RME_X64_USER174_Handler VECTNUM=174
ffffffff8020d107:	0f 01 f8             	swapgs
ffffffff8020d10a:	6a 00                	push   $0x0
ffffffff8020d10c:	68 ae 00 00 00       	push   $0xae
ffffffff8020d111:	e9 9e 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d116 <__RME_X64_USER175_Handler>:
USER_HANDLER NAME=__RME_X64_USER175_Handler VECTNUM=175
ffffffff8020d116:	0f 01 f8             	swapgs
ffffffff8020d119:	6a 00                	push   $0x0
ffffffff8020d11b:	68 af 00 00 00       	push   $0xaf
ffffffff8020d120:	e9 8f 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d125 <__RME_X64_USER176_Handler>:
USER_HANDLER NAME=__RME_X64_USER176_Handler VECTNUM=176
ffffffff8020d125:	0f 01 f8             	swapgs
ffffffff8020d128:	6a 00                	push   $0x0
ffffffff8020d12a:	68 b0 00 00 00       	push   $0xb0
ffffffff8020d12f:	e9 80 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d134 <__RME_X64_USER177_Handler>:
USER_HANDLER NAME=__RME_X64_USER177_Handler VECTNUM=177
ffffffff8020d134:	0f 01 f8             	swapgs
ffffffff8020d137:	6a 00                	push   $0x0
ffffffff8020d139:	68 b1 00 00 00       	push   $0xb1
ffffffff8020d13e:	e9 71 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d143 <__RME_X64_USER178_Handler>:
USER_HANDLER NAME=__RME_X64_USER178_Handler VECTNUM=178
ffffffff8020d143:	0f 01 f8             	swapgs
ffffffff8020d146:	6a 00                	push   $0x0
ffffffff8020d148:	68 b2 00 00 00       	push   $0xb2
ffffffff8020d14d:	e9 62 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d152 <__RME_X64_USER179_Handler>:
USER_HANDLER NAME=__RME_X64_USER179_Handler VECTNUM=179
ffffffff8020d152:	0f 01 f8             	swapgs
ffffffff8020d155:	6a 00                	push   $0x0
ffffffff8020d157:	68 b3 00 00 00       	push   $0xb3
ffffffff8020d15c:	e9 53 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d161 <__RME_X64_USER180_Handler>:

USER_HANDLER NAME=__RME_X64_USER180_Handler VECTNUM=180
ffffffff8020d161:	0f 01 f8             	swapgs
ffffffff8020d164:	6a 00                	push   $0x0
ffffffff8020d166:	68 b4 00 00 00       	push   $0xb4
ffffffff8020d16b:	e9 44 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d170 <__RME_X64_USER181_Handler>:
USER_HANDLER NAME=__RME_X64_USER181_Handler VECTNUM=181
ffffffff8020d170:	0f 01 f8             	swapgs
ffffffff8020d173:	6a 00                	push   $0x0
ffffffff8020d175:	68 b5 00 00 00       	push   $0xb5
ffffffff8020d17a:	e9 35 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d17f <__RME_X64_USER182_Handler>:
USER_HANDLER NAME=__RME_X64_USER182_Handler VECTNUM=182
ffffffff8020d17f:	0f 01 f8             	swapgs
ffffffff8020d182:	6a 00                	push   $0x0
ffffffff8020d184:	68 b6 00 00 00       	push   $0xb6
ffffffff8020d189:	e9 26 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d18e <__RME_X64_USER183_Handler>:
USER_HANDLER NAME=__RME_X64_USER183_Handler VECTNUM=183
ffffffff8020d18e:	0f 01 f8             	swapgs
ffffffff8020d191:	6a 00                	push   $0x0
ffffffff8020d193:	68 b7 00 00 00       	push   $0xb7
ffffffff8020d198:	e9 17 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d19d <__RME_X64_USER184_Handler>:
USER_HANDLER NAME=__RME_X64_USER184_Handler VECTNUM=184
ffffffff8020d19d:	0f 01 f8             	swapgs
ffffffff8020d1a0:	6a 00                	push   $0x0
ffffffff8020d1a2:	68 b8 00 00 00       	push   $0xb8
ffffffff8020d1a7:	e9 08 04 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d1ac <__RME_X64_USER185_Handler>:
USER_HANDLER NAME=__RME_X64_USER185_Handler VECTNUM=185
ffffffff8020d1ac:	0f 01 f8             	swapgs
ffffffff8020d1af:	6a 00                	push   $0x0
ffffffff8020d1b1:	68 b9 00 00 00       	push   $0xb9
ffffffff8020d1b6:	e9 f9 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d1bb <__RME_X64_USER186_Handler>:
USER_HANDLER NAME=__RME_X64_USER186_Handler VECTNUM=186
ffffffff8020d1bb:	0f 01 f8             	swapgs
ffffffff8020d1be:	6a 00                	push   $0x0
ffffffff8020d1c0:	68 ba 00 00 00       	push   $0xba
ffffffff8020d1c5:	e9 ea 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d1ca <__RME_X64_USER187_Handler>:
USER_HANDLER NAME=__RME_X64_USER187_Handler VECTNUM=187
ffffffff8020d1ca:	0f 01 f8             	swapgs
ffffffff8020d1cd:	6a 00                	push   $0x0
ffffffff8020d1cf:	68 bb 00 00 00       	push   $0xbb
ffffffff8020d1d4:	e9 db 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d1d9 <__RME_X64_USER188_Handler>:
USER_HANDLER NAME=__RME_X64_USER188_Handler VECTNUM=188
ffffffff8020d1d9:	0f 01 f8             	swapgs
ffffffff8020d1dc:	6a 00                	push   $0x0
ffffffff8020d1de:	68 bc 00 00 00       	push   $0xbc
ffffffff8020d1e3:	e9 cc 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d1e8 <__RME_X64_USER189_Handler>:
USER_HANDLER NAME=__RME_X64_USER189_Handler VECTNUM=189
ffffffff8020d1e8:	0f 01 f8             	swapgs
ffffffff8020d1eb:	6a 00                	push   $0x0
ffffffff8020d1ed:	68 bd 00 00 00       	push   $0xbd
ffffffff8020d1f2:	e9 bd 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d1f7 <__RME_X64_USER190_Handler>:

USER_HANDLER NAME=__RME_X64_USER190_Handler VECTNUM=190
ffffffff8020d1f7:	0f 01 f8             	swapgs
ffffffff8020d1fa:	6a 00                	push   $0x0
ffffffff8020d1fc:	68 be 00 00 00       	push   $0xbe
ffffffff8020d201:	e9 ae 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d206 <__RME_X64_USER191_Handler>:
USER_HANDLER NAME=__RME_X64_USER191_Handler VECTNUM=191
ffffffff8020d206:	0f 01 f8             	swapgs
ffffffff8020d209:	6a 00                	push   $0x0
ffffffff8020d20b:	68 bf 00 00 00       	push   $0xbf
ffffffff8020d210:	e9 9f 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d215 <__RME_X64_USER192_Handler>:
USER_HANDLER NAME=__RME_X64_USER192_Handler VECTNUM=192
ffffffff8020d215:	0f 01 f8             	swapgs
ffffffff8020d218:	6a 00                	push   $0x0
ffffffff8020d21a:	68 c0 00 00 00       	push   $0xc0
ffffffff8020d21f:	e9 90 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d224 <__RME_X64_USER193_Handler>:
USER_HANDLER NAME=__RME_X64_USER193_Handler VECTNUM=193
ffffffff8020d224:	0f 01 f8             	swapgs
ffffffff8020d227:	6a 00                	push   $0x0
ffffffff8020d229:	68 c1 00 00 00       	push   $0xc1
ffffffff8020d22e:	e9 81 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d233 <__RME_X64_USER194_Handler>:
USER_HANDLER NAME=__RME_X64_USER194_Handler VECTNUM=194
ffffffff8020d233:	0f 01 f8             	swapgs
ffffffff8020d236:	6a 00                	push   $0x0
ffffffff8020d238:	68 c2 00 00 00       	push   $0xc2
ffffffff8020d23d:	e9 72 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d242 <__RME_X64_USER195_Handler>:
USER_HANDLER NAME=__RME_X64_USER195_Handler VECTNUM=195
ffffffff8020d242:	0f 01 f8             	swapgs
ffffffff8020d245:	6a 00                	push   $0x0
ffffffff8020d247:	68 c3 00 00 00       	push   $0xc3
ffffffff8020d24c:	e9 63 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d251 <__RME_X64_USER196_Handler>:
USER_HANDLER NAME=__RME_X64_USER196_Handler VECTNUM=196
ffffffff8020d251:	0f 01 f8             	swapgs
ffffffff8020d254:	6a 00                	push   $0x0
ffffffff8020d256:	68 c4 00 00 00       	push   $0xc4
ffffffff8020d25b:	e9 54 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d260 <__RME_X64_USER197_Handler>:
USER_HANDLER NAME=__RME_X64_USER197_Handler VECTNUM=197
ffffffff8020d260:	0f 01 f8             	swapgs
ffffffff8020d263:	6a 00                	push   $0x0
ffffffff8020d265:	68 c5 00 00 00       	push   $0xc5
ffffffff8020d26a:	e9 45 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d26f <__RME_X64_USER198_Handler>:
USER_HANDLER NAME=__RME_X64_USER198_Handler VECTNUM=198
ffffffff8020d26f:	0f 01 f8             	swapgs
ffffffff8020d272:	6a 00                	push   $0x0
ffffffff8020d274:	68 c6 00 00 00       	push   $0xc6
ffffffff8020d279:	e9 36 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d27e <__RME_X64_USER199_Handler>:
USER_HANDLER NAME=__RME_X64_USER199_Handler VECTNUM=199
ffffffff8020d27e:	0f 01 f8             	swapgs
ffffffff8020d281:	6a 00                	push   $0x0
ffffffff8020d283:	68 c7 00 00 00       	push   $0xc7
ffffffff8020d288:	e9 27 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d28d <__RME_X64_USER200_Handler>:

USER_HANDLER NAME=__RME_X64_USER200_Handler VECTNUM=200
ffffffff8020d28d:	0f 01 f8             	swapgs
ffffffff8020d290:	6a 00                	push   $0x0
ffffffff8020d292:	68 c8 00 00 00       	push   $0xc8
ffffffff8020d297:	e9 18 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d29c <__RME_X64_USER201_Handler>:
USER_HANDLER NAME=__RME_X64_USER201_Handler VECTNUM=201
ffffffff8020d29c:	0f 01 f8             	swapgs
ffffffff8020d29f:	6a 00                	push   $0x0
ffffffff8020d2a1:	68 c9 00 00 00       	push   $0xc9
ffffffff8020d2a6:	e9 09 03 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d2ab <__RME_X64_USER202_Handler>:
USER_HANDLER NAME=__RME_X64_USER202_Handler VECTNUM=202
ffffffff8020d2ab:	0f 01 f8             	swapgs
ffffffff8020d2ae:	6a 00                	push   $0x0
ffffffff8020d2b0:	68 ca 00 00 00       	push   $0xca
ffffffff8020d2b5:	e9 fa 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d2ba <__RME_X64_USER203_Handler>:
USER_HANDLER NAME=__RME_X64_USER203_Handler VECTNUM=203
ffffffff8020d2ba:	0f 01 f8             	swapgs
ffffffff8020d2bd:	6a 00                	push   $0x0
ffffffff8020d2bf:	68 cb 00 00 00       	push   $0xcb
ffffffff8020d2c4:	e9 eb 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d2c9 <__RME_X64_USER204_Handler>:
USER_HANDLER NAME=__RME_X64_USER204_Handler VECTNUM=204
ffffffff8020d2c9:	0f 01 f8             	swapgs
ffffffff8020d2cc:	6a 00                	push   $0x0
ffffffff8020d2ce:	68 cc 00 00 00       	push   $0xcc
ffffffff8020d2d3:	e9 dc 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d2d8 <__RME_X64_USER205_Handler>:
USER_HANDLER NAME=__RME_X64_USER205_Handler VECTNUM=205
ffffffff8020d2d8:	0f 01 f8             	swapgs
ffffffff8020d2db:	6a 00                	push   $0x0
ffffffff8020d2dd:	68 cd 00 00 00       	push   $0xcd
ffffffff8020d2e2:	e9 cd 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d2e7 <__RME_X64_USER206_Handler>:
USER_HANDLER NAME=__RME_X64_USER206_Handler VECTNUM=206
ffffffff8020d2e7:	0f 01 f8             	swapgs
ffffffff8020d2ea:	6a 00                	push   $0x0
ffffffff8020d2ec:	68 ce 00 00 00       	push   $0xce
ffffffff8020d2f1:	e9 be 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d2f6 <__RME_X64_USER207_Handler>:
USER_HANDLER NAME=__RME_X64_USER207_Handler VECTNUM=207
ffffffff8020d2f6:	0f 01 f8             	swapgs
ffffffff8020d2f9:	6a 00                	push   $0x0
ffffffff8020d2fb:	68 cf 00 00 00       	push   $0xcf
ffffffff8020d300:	e9 af 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d305 <__RME_X64_USER208_Handler>:
USER_HANDLER NAME=__RME_X64_USER208_Handler VECTNUM=208
ffffffff8020d305:	0f 01 f8             	swapgs
ffffffff8020d308:	6a 00                	push   $0x0
ffffffff8020d30a:	68 d0 00 00 00       	push   $0xd0
ffffffff8020d30f:	e9 a0 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d314 <__RME_X64_USER209_Handler>:
USER_HANDLER NAME=__RME_X64_USER209_Handler VECTNUM=209
ffffffff8020d314:	0f 01 f8             	swapgs
ffffffff8020d317:	6a 00                	push   $0x0
ffffffff8020d319:	68 d1 00 00 00       	push   $0xd1
ffffffff8020d31e:	e9 91 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d323 <__RME_X64_USER210_Handler>:

USER_HANDLER NAME=__RME_X64_USER210_Handler VECTNUM=210
ffffffff8020d323:	0f 01 f8             	swapgs
ffffffff8020d326:	6a 00                	push   $0x0
ffffffff8020d328:	68 d2 00 00 00       	push   $0xd2
ffffffff8020d32d:	e9 82 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d332 <__RME_X64_USER211_Handler>:
USER_HANDLER NAME=__RME_X64_USER211_Handler VECTNUM=211
ffffffff8020d332:	0f 01 f8             	swapgs
ffffffff8020d335:	6a 00                	push   $0x0
ffffffff8020d337:	68 d3 00 00 00       	push   $0xd3
ffffffff8020d33c:	e9 73 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d341 <__RME_X64_USER212_Handler>:
USER_HANDLER NAME=__RME_X64_USER212_Handler VECTNUM=212
ffffffff8020d341:	0f 01 f8             	swapgs
ffffffff8020d344:	6a 00                	push   $0x0
ffffffff8020d346:	68 d4 00 00 00       	push   $0xd4
ffffffff8020d34b:	e9 64 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d350 <__RME_X64_USER213_Handler>:
USER_HANDLER NAME=__RME_X64_USER213_Handler VECTNUM=213
ffffffff8020d350:	0f 01 f8             	swapgs
ffffffff8020d353:	6a 00                	push   $0x0
ffffffff8020d355:	68 d5 00 00 00       	push   $0xd5
ffffffff8020d35a:	e9 55 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d35f <__RME_X64_USER214_Handler>:
USER_HANDLER NAME=__RME_X64_USER214_Handler VECTNUM=214
ffffffff8020d35f:	0f 01 f8             	swapgs
ffffffff8020d362:	6a 00                	push   $0x0
ffffffff8020d364:	68 d6 00 00 00       	push   $0xd6
ffffffff8020d369:	e9 46 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d36e <__RME_X64_USER215_Handler>:
USER_HANDLER NAME=__RME_X64_USER215_Handler VECTNUM=215
ffffffff8020d36e:	0f 01 f8             	swapgs
ffffffff8020d371:	6a 00                	push   $0x0
ffffffff8020d373:	68 d7 00 00 00       	push   $0xd7
ffffffff8020d378:	e9 37 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d37d <__RME_X64_USER216_Handler>:
USER_HANDLER NAME=__RME_X64_USER216_Handler VECTNUM=216
ffffffff8020d37d:	0f 01 f8             	swapgs
ffffffff8020d380:	6a 00                	push   $0x0
ffffffff8020d382:	68 d8 00 00 00       	push   $0xd8
ffffffff8020d387:	e9 28 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d38c <__RME_X64_USER217_Handler>:
USER_HANDLER NAME=__RME_X64_USER217_Handler VECTNUM=217
ffffffff8020d38c:	0f 01 f8             	swapgs
ffffffff8020d38f:	6a 00                	push   $0x0
ffffffff8020d391:	68 d9 00 00 00       	push   $0xd9
ffffffff8020d396:	e9 19 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d39b <__RME_X64_USER218_Handler>:
USER_HANDLER NAME=__RME_X64_USER218_Handler VECTNUM=218
ffffffff8020d39b:	0f 01 f8             	swapgs
ffffffff8020d39e:	6a 00                	push   $0x0
ffffffff8020d3a0:	68 da 00 00 00       	push   $0xda
ffffffff8020d3a5:	e9 0a 02 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d3aa <__RME_X64_USER219_Handler>:
USER_HANDLER NAME=__RME_X64_USER219_Handler VECTNUM=219
ffffffff8020d3aa:	0f 01 f8             	swapgs
ffffffff8020d3ad:	6a 00                	push   $0x0
ffffffff8020d3af:	68 db 00 00 00       	push   $0xdb
ffffffff8020d3b4:	e9 fb 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d3b9 <__RME_X64_USER220_Handler>:

USER_HANDLER NAME=__RME_X64_USER220_Handler VECTNUM=220
ffffffff8020d3b9:	0f 01 f8             	swapgs
ffffffff8020d3bc:	6a 00                	push   $0x0
ffffffff8020d3be:	68 dc 00 00 00       	push   $0xdc
ffffffff8020d3c3:	e9 ec 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d3c8 <__RME_X64_USER221_Handler>:
USER_HANDLER NAME=__RME_X64_USER221_Handler VECTNUM=221
ffffffff8020d3c8:	0f 01 f8             	swapgs
ffffffff8020d3cb:	6a 00                	push   $0x0
ffffffff8020d3cd:	68 dd 00 00 00       	push   $0xdd
ffffffff8020d3d2:	e9 dd 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d3d7 <__RME_X64_USER222_Handler>:
USER_HANDLER NAME=__RME_X64_USER222_Handler VECTNUM=222
ffffffff8020d3d7:	0f 01 f8             	swapgs
ffffffff8020d3da:	6a 00                	push   $0x0
ffffffff8020d3dc:	68 de 00 00 00       	push   $0xde
ffffffff8020d3e1:	e9 ce 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d3e6 <__RME_X64_USER223_Handler>:
USER_HANDLER NAME=__RME_X64_USER223_Handler VECTNUM=223
ffffffff8020d3e6:	0f 01 f8             	swapgs
ffffffff8020d3e9:	6a 00                	push   $0x0
ffffffff8020d3eb:	68 df 00 00 00       	push   $0xdf
ffffffff8020d3f0:	e9 bf 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d3f5 <__RME_X64_USER224_Handler>:
USER_HANDLER NAME=__RME_X64_USER224_Handler VECTNUM=224
ffffffff8020d3f5:	0f 01 f8             	swapgs
ffffffff8020d3f8:	6a 00                	push   $0x0
ffffffff8020d3fa:	68 e0 00 00 00       	push   $0xe0
ffffffff8020d3ff:	e9 b0 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d404 <__RME_X64_USER225_Handler>:
USER_HANDLER NAME=__RME_X64_USER225_Handler VECTNUM=225
ffffffff8020d404:	0f 01 f8             	swapgs
ffffffff8020d407:	6a 00                	push   $0x0
ffffffff8020d409:	68 e1 00 00 00       	push   $0xe1
ffffffff8020d40e:	e9 a1 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d413 <__RME_X64_USER226_Handler>:
USER_HANDLER NAME=__RME_X64_USER226_Handler VECTNUM=226
ffffffff8020d413:	0f 01 f8             	swapgs
ffffffff8020d416:	6a 00                	push   $0x0
ffffffff8020d418:	68 e2 00 00 00       	push   $0xe2
ffffffff8020d41d:	e9 92 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d422 <__RME_X64_USER227_Handler>:
USER_HANDLER NAME=__RME_X64_USER227_Handler VECTNUM=227
ffffffff8020d422:	0f 01 f8             	swapgs
ffffffff8020d425:	6a 00                	push   $0x0
ffffffff8020d427:	68 e3 00 00 00       	push   $0xe3
ffffffff8020d42c:	e9 83 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d431 <__RME_X64_USER228_Handler>:
USER_HANDLER NAME=__RME_X64_USER228_Handler VECTNUM=228
ffffffff8020d431:	0f 01 f8             	swapgs
ffffffff8020d434:	6a 00                	push   $0x0
ffffffff8020d436:	68 e4 00 00 00       	push   $0xe4
ffffffff8020d43b:	e9 74 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d440 <__RME_X64_USER229_Handler>:
USER_HANDLER NAME=__RME_X64_USER229_Handler VECTNUM=229
ffffffff8020d440:	0f 01 f8             	swapgs
ffffffff8020d443:	6a 00                	push   $0x0
ffffffff8020d445:	68 e5 00 00 00       	push   $0xe5
ffffffff8020d44a:	e9 65 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d44f <__RME_X64_USER230_Handler>:

USER_HANDLER NAME=__RME_X64_USER230_Handler VECTNUM=230
ffffffff8020d44f:	0f 01 f8             	swapgs
ffffffff8020d452:	6a 00                	push   $0x0
ffffffff8020d454:	68 e6 00 00 00       	push   $0xe6
ffffffff8020d459:	e9 56 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d45e <__RME_X64_USER231_Handler>:
USER_HANDLER NAME=__RME_X64_USER231_Handler VECTNUM=231
ffffffff8020d45e:	0f 01 f8             	swapgs
ffffffff8020d461:	6a 00                	push   $0x0
ffffffff8020d463:	68 e7 00 00 00       	push   $0xe7
ffffffff8020d468:	e9 47 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d46d <__RME_X64_USER232_Handler>:
USER_HANDLER NAME=__RME_X64_USER232_Handler VECTNUM=232
ffffffff8020d46d:	0f 01 f8             	swapgs
ffffffff8020d470:	6a 00                	push   $0x0
ffffffff8020d472:	68 e8 00 00 00       	push   $0xe8
ffffffff8020d477:	e9 38 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d47c <__RME_X64_USER233_Handler>:
USER_HANDLER NAME=__RME_X64_USER233_Handler VECTNUM=233
ffffffff8020d47c:	0f 01 f8             	swapgs
ffffffff8020d47f:	6a 00                	push   $0x0
ffffffff8020d481:	68 e9 00 00 00       	push   $0xe9
ffffffff8020d486:	e9 29 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d48b <__RME_X64_USER234_Handler>:
USER_HANDLER NAME=__RME_X64_USER234_Handler VECTNUM=234
ffffffff8020d48b:	0f 01 f8             	swapgs
ffffffff8020d48e:	6a 00                	push   $0x0
ffffffff8020d490:	68 ea 00 00 00       	push   $0xea
ffffffff8020d495:	e9 1a 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d49a <__RME_X64_USER235_Handler>:
USER_HANDLER NAME=__RME_X64_USER235_Handler VECTNUM=235
ffffffff8020d49a:	0f 01 f8             	swapgs
ffffffff8020d49d:	6a 00                	push   $0x0
ffffffff8020d49f:	68 eb 00 00 00       	push   $0xeb
ffffffff8020d4a4:	e9 0b 01 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d4a9 <__RME_X64_USER236_Handler>:
USER_HANDLER NAME=__RME_X64_USER236_Handler VECTNUM=236
ffffffff8020d4a9:	0f 01 f8             	swapgs
ffffffff8020d4ac:	6a 00                	push   $0x0
ffffffff8020d4ae:	68 ec 00 00 00       	push   $0xec
ffffffff8020d4b3:	e9 fc 00 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d4b8 <__RME_X64_USER237_Handler>:
USER_HANDLER NAME=__RME_X64_USER237_Handler VECTNUM=237
ffffffff8020d4b8:	0f 01 f8             	swapgs
ffffffff8020d4bb:	6a 00                	push   $0x0
ffffffff8020d4bd:	68 ed 00 00 00       	push   $0xed
ffffffff8020d4c2:	e9 ed 00 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d4c7 <__RME_X64_USER238_Handler>:
USER_HANDLER NAME=__RME_X64_USER238_Handler VECTNUM=238
ffffffff8020d4c7:	0f 01 f8             	swapgs
ffffffff8020d4ca:	6a 00                	push   $0x0
ffffffff8020d4cc:	68 ee 00 00 00       	push   $0xee
ffffffff8020d4d1:	e9 de 00 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d4d6 <__RME_X64_USER239_Handler>:
USER_HANDLER NAME=__RME_X64_USER239_Handler VECTNUM=239
ffffffff8020d4d6:	0f 01 f8             	swapgs
ffffffff8020d4d9:	6a 00                	push   $0x0
ffffffff8020d4db:	68 ef 00 00 00       	push   $0xef
ffffffff8020d4e0:	e9 cf 00 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d4e5 <__RME_X64_USER240_Handler>:

USER_HANDLER NAME=__RME_X64_USER240_Handler VECTNUM=240
ffffffff8020d4e5:	0f 01 f8             	swapgs
ffffffff8020d4e8:	6a 00                	push   $0x0
ffffffff8020d4ea:	68 f0 00 00 00       	push   $0xf0
ffffffff8020d4ef:	e9 c0 00 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d4f4 <__RME_X64_USER241_Handler>:
USER_HANDLER NAME=__RME_X64_USER241_Handler VECTNUM=241
ffffffff8020d4f4:	0f 01 f8             	swapgs
ffffffff8020d4f7:	6a 00                	push   $0x0
ffffffff8020d4f9:	68 f1 00 00 00       	push   $0xf1
ffffffff8020d4fe:	e9 b1 00 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d503 <__RME_X64_USER242_Handler>:
USER_HANDLER NAME=__RME_X64_USER242_Handler VECTNUM=242
ffffffff8020d503:	0f 01 f8             	swapgs
ffffffff8020d506:	6a 00                	push   $0x0
ffffffff8020d508:	68 f2 00 00 00       	push   $0xf2
ffffffff8020d50d:	e9 a2 00 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d512 <__RME_X64_USER243_Handler>:
USER_HANDLER NAME=__RME_X64_USER243_Handler VECTNUM=243
ffffffff8020d512:	0f 01 f8             	swapgs
ffffffff8020d515:	6a 00                	push   $0x0
ffffffff8020d517:	68 f3 00 00 00       	push   $0xf3
ffffffff8020d51c:	e9 93 00 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d521 <__RME_X64_USER244_Handler>:
USER_HANDLER NAME=__RME_X64_USER244_Handler VECTNUM=244
ffffffff8020d521:	0f 01 f8             	swapgs
ffffffff8020d524:	6a 00                	push   $0x0
ffffffff8020d526:	68 f4 00 00 00       	push   $0xf4
ffffffff8020d52b:	e9 84 00 00 00       	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d530 <__RME_X64_USER245_Handler>:
USER_HANDLER NAME=__RME_X64_USER245_Handler VECTNUM=245
ffffffff8020d530:	0f 01 f8             	swapgs
ffffffff8020d533:	6a 00                	push   $0x0
ffffffff8020d535:	68 f5 00 00 00       	push   $0xf5
ffffffff8020d53a:	eb 78                	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d53c <__RME_X64_USER246_Handler>:
USER_HANDLER NAME=__RME_X64_USER246_Handler VECTNUM=246
ffffffff8020d53c:	0f 01 f8             	swapgs
ffffffff8020d53f:	6a 00                	push   $0x0
ffffffff8020d541:	68 f6 00 00 00       	push   $0xf6
ffffffff8020d546:	eb 6c                	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d548 <__RME_X64_USER247_Handler>:
USER_HANDLER NAME=__RME_X64_USER247_Handler VECTNUM=247
ffffffff8020d548:	0f 01 f8             	swapgs
ffffffff8020d54b:	6a 00                	push   $0x0
ffffffff8020d54d:	68 f7 00 00 00       	push   $0xf7
ffffffff8020d552:	eb 60                	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d554 <__RME_X64_USER248_Handler>:
USER_HANDLER NAME=__RME_X64_USER248_Handler VECTNUM=248
ffffffff8020d554:	0f 01 f8             	swapgs
ffffffff8020d557:	6a 00                	push   $0x0
ffffffff8020d559:	68 f8 00 00 00       	push   $0xf8
ffffffff8020d55e:	eb 54                	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d560 <__RME_X64_USER249_Handler>:
USER_HANDLER NAME=__RME_X64_USER249_Handler VECTNUM=249
ffffffff8020d560:	0f 01 f8             	swapgs
ffffffff8020d563:	6a 00                	push   $0x0
ffffffff8020d565:	68 f9 00 00 00       	push   $0xf9
ffffffff8020d56a:	eb 48                	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d56c <__RME_X64_USER250_Handler>:

USER_HANDLER NAME=__RME_X64_USER250_Handler VECTNUM=250
ffffffff8020d56c:	0f 01 f8             	swapgs
ffffffff8020d56f:	6a 00                	push   $0x0
ffffffff8020d571:	68 fa 00 00 00       	push   $0xfa
ffffffff8020d576:	eb 3c                	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d578 <__RME_X64_USER251_Handler>:
USER_HANDLER NAME=__RME_X64_USER251_Handler VECTNUM=251
ffffffff8020d578:	0f 01 f8             	swapgs
ffffffff8020d57b:	6a 00                	push   $0x0
ffffffff8020d57d:	68 fb 00 00 00       	push   $0xfb
ffffffff8020d582:	eb 30                	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d584 <__RME_X64_USER252_Handler>:
USER_HANDLER NAME=__RME_X64_USER252_Handler VECTNUM=252
ffffffff8020d584:	0f 01 f8             	swapgs
ffffffff8020d587:	6a 00                	push   $0x0
ffffffff8020d589:	68 fc 00 00 00       	push   $0xfc
ffffffff8020d58e:	eb 24                	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d590 <__RME_X64_USER253_Handler>:
USER_HANDLER NAME=__RME_X64_USER253_Handler VECTNUM=253
ffffffff8020d590:	0f 01 f8             	swapgs
ffffffff8020d593:	6a 00                	push   $0x0
ffffffff8020d595:	68 fd 00 00 00       	push   $0xfd
ffffffff8020d59a:	eb 18                	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d59c <__RME_X64_USER254_Handler>:
USER_HANDLER NAME=__RME_X64_USER254_Handler VECTNUM=254
ffffffff8020d59c:	0f 01 f8             	swapgs
ffffffff8020d59f:	6a 00                	push   $0x0
ffffffff8020d5a1:	68 fe 00 00 00       	push   $0xfe
ffffffff8020d5a6:	eb 0c                	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d5a8 <__RME_X64_USER255_Handler>:
USER_HANDLER NAME=__RME_X64_USER255_Handler VECTNUM=255
ffffffff8020d5a8:	0f 01 f8             	swapgs
ffffffff8020d5ab:	6a 00                	push   $0x0
ffffffff8020d5ad:	68 ff 00 00 00       	push   $0xff
ffffffff8020d5b2:	eb 00                	jmp    ffffffff8020d5b4 <User_Handler>

ffffffff8020d5b4 <User_Handler>:
/* Common function body for generic interrupt handlers - reduce I-Cache usage */
User_Handler:
    SAVE_GP_REGS
ffffffff8020d5b4:	41 57                	push   %r15
ffffffff8020d5b6:	41 56                	push   %r14
ffffffff8020d5b8:	41 55                	push   %r13
ffffffff8020d5ba:	41 54                	push   %r12
ffffffff8020d5bc:	41 53                	push   %r11
ffffffff8020d5be:	41 52                	push   %r10
ffffffff8020d5c0:	41 51                	push   %r9
ffffffff8020d5c2:	41 50                	push   %r8
ffffffff8020d5c4:	55                   	push   %rbp
ffffffff8020d5c5:	57                   	push   %rdi
ffffffff8020d5c6:	56                   	push   %rsi
ffffffff8020d5c7:	52                   	push   %rdx
ffffffff8020d5c8:	51                   	push   %rcx
ffffffff8020d5c9:	53                   	push   %rbx
ffffffff8020d5ca:	50                   	push   %rax
ffffffff8020d5cb:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020d5cf:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020d5d1:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020d5d4:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Generic_Handler
ffffffff8020d5d9:	e8 42 d7 00 00       	call   ffffffff8021ad20 <__RME_X64_Generic_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020d5de:	e8 3d c1 00 00       	call   ffffffff80219720 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020d5e3:	0f 01 f8             	swapgs
ffffffff8020d5e6:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020d5ea:	8e d8                	mov    %eax,%ds
ffffffff8020d5ec:	58                   	pop    %rax
ffffffff8020d5ed:	5b                   	pop    %rbx
ffffffff8020d5ee:	59                   	pop    %rcx
ffffffff8020d5ef:	5a                   	pop    %rdx
ffffffff8020d5f0:	5e                   	pop    %rsi
ffffffff8020d5f1:	5f                   	pop    %rdi
ffffffff8020d5f2:	5d                   	pop    %rbp
ffffffff8020d5f3:	41 58                	pop    %r8
ffffffff8020d5f5:	41 59                	pop    %r9
ffffffff8020d5f7:	41 5a                	pop    %r10
ffffffff8020d5f9:	41 5b                	pop    %r11
ffffffff8020d5fb:	41 5c                	pop    %r12
ffffffff8020d5fd:	41 5d                	pop    %r13
ffffffff8020d5ff:	41 5e                	pop    %r14
ffffffff8020d601:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020d603:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020d607:	48 cf                	iretq

ffffffff8020d609 <SysTick_SMP_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_SMP_Handler:
    .global             SysTick_SMP_Handler
    SWAPGS
ffffffff8020d609:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020d60c:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020d60e:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020d613:	41 57                	push   %r15
ffffffff8020d615:	41 56                	push   %r14
ffffffff8020d617:	41 55                	push   %r13
ffffffff8020d619:	41 54                	push   %r12
ffffffff8020d61b:	41 53                	push   %r11
ffffffff8020d61d:	41 52                	push   %r10
ffffffff8020d61f:	41 51                	push   %r9
ffffffff8020d621:	41 50                	push   %r8
ffffffff8020d623:	55                   	push   %rbp
ffffffff8020d624:	57                   	push   %rdi
ffffffff8020d625:	56                   	push   %rsi
ffffffff8020d626:	52                   	push   %rdx
ffffffff8020d627:	51                   	push   %rcx
ffffffff8020d628:	53                   	push   %rbx
ffffffff8020d629:	50                   	push   %rax
ffffffff8020d62a:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020d62e:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020d630:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_SMP_Handler
ffffffff8020d633:	e8 26 01 00 00       	call   ffffffff8020d75e <_RME_Tick_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020d638:	e8 e3 c0 00 00       	call   ffffffff80219720 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020d63d:	0f 01 f8             	swapgs
ffffffff8020d640:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020d644:	8e d8                	mov    %eax,%ds
ffffffff8020d646:	58                   	pop    %rax
ffffffff8020d647:	5b                   	pop    %rbx
ffffffff8020d648:	59                   	pop    %rcx
ffffffff8020d649:	5a                   	pop    %rdx
ffffffff8020d64a:	5e                   	pop    %rsi
ffffffff8020d64b:	5f                   	pop    %rdi
ffffffff8020d64c:	5d                   	pop    %rbp
ffffffff8020d64d:	41 58                	pop    %r8
ffffffff8020d64f:	41 59                	pop    %r9
ffffffff8020d651:	41 5a                	pop    %r10
ffffffff8020d653:	41 5b                	pop    %r11
ffffffff8020d655:	41 5c                	pop    %r12
ffffffff8020d657:	41 5d                	pop    %r13
ffffffff8020d659:	41 5e                	pop    %r14
ffffffff8020d65b:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020d65d:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020d661:	48 cf                	iretq

ffffffff8020d663 <SysTick_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_Handler:
    .global             SysTick_Handler
    SWAPGS
ffffffff8020d663:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020d666:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020d668:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020d66d:	41 57                	push   %r15
ffffffff8020d66f:	41 56                	push   %r14
ffffffff8020d671:	41 55                	push   %r13
ffffffff8020d673:	41 54                	push   %r12
ffffffff8020d675:	41 53                	push   %r11
ffffffff8020d677:	41 52                	push   %r10
ffffffff8020d679:	41 51                	push   %r9
ffffffff8020d67b:	41 50                	push   %r8
ffffffff8020d67d:	55                   	push   %rbp
ffffffff8020d67e:	57                   	push   %rdi
ffffffff8020d67f:	56                   	push   %rsi
ffffffff8020d680:	52                   	push   %rdx
ffffffff8020d681:	51                   	push   %rcx
ffffffff8020d682:	53                   	push   %rbx
ffffffff8020d683:	50                   	push   %rax
ffffffff8020d684:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020d688:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020d68a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_Handler
ffffffff8020d68d:	e8 cc 00 00 00       	call   ffffffff8020d75e <_RME_Tick_Handler>
    CALLQ               __RME_X64_SMP_Tick
ffffffff8020d692:	e8 a9 c3 00 00       	call   ffffffff80219a40 <__RME_X64_SMP_Tick>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020d697:	e8 84 c0 00 00       	call   ffffffff80219720 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020d69c:	0f 01 f8             	swapgs
ffffffff8020d69f:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020d6a3:	8e d8                	mov    %eax,%ds
ffffffff8020d6a5:	58                   	pop    %rax
ffffffff8020d6a6:	5b                   	pop    %rbx
ffffffff8020d6a7:	59                   	pop    %rcx
ffffffff8020d6a8:	5a                   	pop    %rdx
ffffffff8020d6a9:	5e                   	pop    %rsi
ffffffff8020d6aa:	5f                   	pop    %rdi
ffffffff8020d6ab:	5d                   	pop    %rbp
ffffffff8020d6ac:	41 58                	pop    %r8
ffffffff8020d6ae:	41 59                	pop    %r9
ffffffff8020d6b0:	41 5a                	pop    %r10
ffffffff8020d6b2:	41 5b                	pop    %r11
ffffffff8020d6b4:	41 5c                	pop    %r12
ffffffff8020d6b6:	41 5d                	pop    %r13
ffffffff8020d6b8:	41 5e                	pop    %r14
ffffffff8020d6ba:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020d6bc:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020d6c0:	48 cf                	iretq

ffffffff8020d6c2 <SVC_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SVC_Handler:
    .global             SVC_Handler
    SWAPGS
ffffffff8020d6c2:	0f 01 f8             	swapgs
    /* Swap the pointers with the per-core kernel RSP */
    MOVQ                %RSP,%GS:(8192-8)
ffffffff8020d6c5:	65 48 89 24 25 f8 1f 	mov    %rsp,%gs:0x1ff8
ffffffff8020d6cc:	00 00 
    MOVQ                %GS:(8192-16),%RSP
ffffffff8020d6ce:	65 48 8b 24 25 f0 1f 	mov    %gs:0x1ff0,%rsp
ffffffff8020d6d5:	00 00 
    /* Simulate INT stack: High - [SS, RSP, RFLAGS, CS, RIP, ERRCODE] - Low */
    PUSHQ               $(USER_DATA)
ffffffff8020d6d7:	6a 23                	push   $0x23
    PUSHQ               %GS:(8192-8)
ffffffff8020d6d9:	65 ff 34 25 f8 1f 00 	push   %gs:0x1ff8
ffffffff8020d6e0:	00 
    PUSHQ               %R11
ffffffff8020d6e1:	41 53                	push   %r11
    PUSHQ               $(USER_CODE)
ffffffff8020d6e3:	6a 2b                	push   $0x2b
    PUSHQ               %RCX
ffffffff8020d6e5:	51                   	push   %rcx
    PUSHQ               $0
ffffffff8020d6e6:	6a 00                	push   $0x0
    /* We went into this from a SYSCALL - interrupt number 0x10000 */
    PUSHQ               $0x10000
ffffffff8020d6e8:	68 00 00 01 00       	push   $0x10000
    SAVE_GP_REGS
ffffffff8020d6ed:	41 57                	push   %r15
ffffffff8020d6ef:	41 56                	push   %r14
ffffffff8020d6f1:	41 55                	push   %r13
ffffffff8020d6f3:	41 54                	push   %r12
ffffffff8020d6f5:	41 53                	push   %r11
ffffffff8020d6f7:	41 52                	push   %r10
ffffffff8020d6f9:	41 51                	push   %r9
ffffffff8020d6fb:	41 50                	push   %r8
ffffffff8020d6fd:	55                   	push   %rbp
ffffffff8020d6fe:	57                   	push   %rdi
ffffffff8020d6ff:	56                   	push   %rsi
ffffffff8020d700:	52                   	push   %rdx
ffffffff8020d701:	51                   	push   %rcx
ffffffff8020d702:	53                   	push   %rbx
ffffffff8020d703:	50                   	push   %rax
ffffffff8020d704:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020d708:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020d70a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Svc_Handler
ffffffff8020d70d:	e8 2e 40 00 00       	call   ffffffff80211740 <_RME_Svc_Handler>
    RESTORE_GP_REGS
ffffffff8020d712:	0f 01 f8             	swapgs
ffffffff8020d715:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020d719:	8e d8                	mov    %eax,%ds
ffffffff8020d71b:	58                   	pop    %rax
ffffffff8020d71c:	5b                   	pop    %rbx
ffffffff8020d71d:	59                   	pop    %rcx
ffffffff8020d71e:	5a                   	pop    %rdx
ffffffff8020d71f:	5e                   	pop    %rsi
ffffffff8020d720:	5f                   	pop    %rdi
ffffffff8020d721:	5d                   	pop    %rbp
ffffffff8020d722:	41 58                	pop    %r8
ffffffff8020d724:	41 59                	pop    %r9
ffffffff8020d726:	41 5a                	pop    %r10
ffffffff8020d728:	41 5b                	pop    %r11
ffffffff8020d72a:	41 5c                	pop    %r12
ffffffff8020d72c:	41 5d                	pop    %r13
ffffffff8020d72e:	41 5e                	pop    %r14
ffffffff8020d730:	41 5f                	pop    %r15
    /* See if we are forced to use IRET */
    TESTQ               $0x10000,(%RSP)
ffffffff8020d732:	48 f7 04 24 00 00 01 	testq  $0x10000,(%rsp)
ffffffff8020d739:	00 
    JZ                  Use_IRET
ffffffff8020d73a:	74 1c                	je     ffffffff8020d758 <Use_IRET>
    /* Just move these into the registers desired */
    /* CVE-2012-0217, CVE-2014-4699: Force canonical address on RIP */
    MOVQ                $0x7FFFFFFFFFFF,%RCX
ffffffff8020d73c:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff8020d743:	7f 00 00 
    ANDQ                16(%RSP),%RCX
ffffffff8020d746:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
    MOVQ                32(%RSP),%R11
ffffffff8020d74b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    MOVQ                40(%RSP),%RSP
ffffffff8020d750:	48 8b 64 24 28       	mov    0x28(%rsp),%rsp
    /* Return to user-level */
    SYSRETQ
ffffffff8020d755:	48 0f 07             	sysretq

ffffffff8020d758 <Use_IRET>:
Use_IRET:
    /* Flag is zero, We are forced to use IRET, because this is from INT */
    ADDQ                $16,%RSP
ffffffff8020d758:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020d75c:	48 cf                	iretq

ffffffff8020d75e <_RME_Tick_Handler>:
ffffffff8020d75e:	66 90                	xchg   %ax,%ax

ffffffff8020d760 <_RME_Thd_Sched_Bind.isra.0>:
                                hypervisor-managed threads. For other threads,
                                please pass in NULL instead.
Output      : None.
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Sched_Bind(struct RME_Cap_Cpt* Cpt,
ffffffff8020d760:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d763:	41 56                	push   %r14
ffffffff8020d765:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020d768:	41 55                	push   %r13
ffffffff8020d76a:	4d 89 cd             	mov    %r9,%r13
ffffffff8020d76d:	41 54                	push   %r12
ffffffff8020d76f:	55                   	push   %rbp
ffffffff8020d770:	53                   	push   %rbx
ffffffff8020d771:	4c 89 c3             	mov    %r8,%rbx
ffffffff8020d774:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
    rme_ptr_t Type_Stat;
    rme_ptr_t Hyp_Attr;
    rme_ptr_t End;

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020d779:	f6 c4 80             	test   $0x80,%ah
ffffffff8020d77c:	0f 85 de 01 00 00    	jne    ffffffff8020d960 <_RME_Thd_Sched_Bind.isra.0+0x200>
ffffffff8020d782:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020d785:	0f 83 8d 03 00 00    	jae    ffffffff8020db18 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020d78b:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8020d792:	ff 00 00 
ffffffff8020d795:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d799:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020d7a0:	00 00 00 
ffffffff8020d7a3:	48 01 f8             	add    %rdi,%rax
ffffffff8020d7a6:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020d7a9:	49 21 c8             	and    %rcx,%r8
ffffffff8020d7ac:	4d 39 c8             	cmp    %r9,%r8
ffffffff8020d7af:	0f 84 1b 02 00 00    	je     ffffffff8020d9d0 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020d7b5:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d7b9:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff8020d7bd:	0f 85 35 03 00 00    	jne    ffffffff8020daf8 <_RME_Thd_Sched_Bind.isra.0+0x398>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff8020d7c3:	f6 c6 80             	test   $0x80,%dh
ffffffff8020d7c6:	0f 85 14 02 00 00    	jne    ffffffff8020d9e0 <_RME_Thd_Sched_Bind.isra.0+0x280>
ffffffff8020d7cc:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020d7cf:	0f 83 43 03 00 00    	jae    ffffffff8020db18 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020d7d5:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d7dc:	ff 00 00 
ffffffff8020d7df:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d7e3:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020d7ea:	00 00 00 
ffffffff8020d7ed:	4c 8d 34 3a          	lea    (%rdx,%rdi,1),%r14
ffffffff8020d7f1:	49 8b 16             	mov    (%r14),%rdx
ffffffff8020d7f4:	48 21 d1             	and    %rdx,%rcx
ffffffff8020d7f7:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8020d7fa:	0f 84 d0 01 00 00    	je     ffffffff8020d9d0 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020d800:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d804:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8020d808:	0f 85 ea 02 00 00    	jne    ffffffff8020daf8 <_RME_Thd_Sched_Bind.isra.0+0x398>
                   struct RME_Cap_Thd*,Thd_Sched,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff8020d80e:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8020d812:	0f 84 10 03 00 00    	je     ffffffff8020db28 <_RME_Thd_Sched_Bind.isra.0+0x3c8>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
ffffffff8020d818:	41 f6 46 10 04       	testb  $0x4,0x10(%r14)
ffffffff8020d81d:	0f 84 05 03 00 00    	je     ffffffff8020db28 <_RME_Thd_Sched_Bind.isra.0+0x3c8>
    
    /* Check if we need the signal endpoint for this operation */
    if(Cap_Sig!=RME_CID_NULL)
ffffffff8020d823:	ba 00 00 00 80       	mov    $0x80000000,%edx
ffffffff8020d828:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8020d82b:	0f 84 2f 02 00 00    	je     ffffffff8020da60 <_RME_Thd_Sched_Bind.isra.0+0x300>
    {
        RME_COV_MARKER();

        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8020d831:	f6 c7 80             	test   $0x80,%bh
ffffffff8020d834:	0f 85 36 02 00 00    	jne    ffffffff8020da70 <_RME_Thd_Sched_Bind.isra.0+0x310>
ffffffff8020d83a:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8020d83d:	0f 83 d5 02 00 00    	jae    ffffffff8020db18 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020d843:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d84a:	ff 00 00 
ffffffff8020d84d:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020d851:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8020d858:	00 00 00 
ffffffff8020d85b:	48 01 fb             	add    %rdi,%rbx
ffffffff8020d85e:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020d861:	48 21 d1             	and    %rdx,%rcx
ffffffff8020d864:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020d867:	0f 84 63 01 00 00    	je     ffffffff8020d9d0 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020d86d:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d871:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8020d875:	0f 85 7d 02 00 00    	jne    ffffffff8020daf8 <_RME_Thd_Sched_Bind.isra.0+0x398>
                       struct RME_Cap_Sig*,Sig_Op,Type_Stat);
        RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SCHED);
ffffffff8020d87b:	f6 43 10 20          	testb  $0x20,0x10(%rbx)
ffffffff8020d87f:	0f 84 a3 02 00 00    	je     ffffffff8020db28 <_RME_Thd_Sched_Bind.isra.0+0x3c8>

        Sig_Op=RME_NULL;
    }

    /* Check if the target thread is already bound. If yes, we just quit */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff8020d885:	48 8b 68 18          	mov    0x18(%rax),%rbp
    Local_Old=Thread->Sched.Local;
    if(Local_Old!=RME_THD_FREE)
ffffffff8020d889:	48 83 7d 28 ff       	cmpq   $0xffffffffffffffff,0x28(%rbp)
ffffffff8020d88e:	0f 85 74 02 00 00    	jne    ffffffff8020db08 <_RME_Thd_Sched_Bind.isra.0+0x3a8>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the parent thread is on the same core with the current processor */
    Local_New=RME_CPU_LOCAL();
ffffffff8020d894:	e8 a6 ef ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
    Scheduler=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
ffffffff8020d899:	49 8b 56 18          	mov    0x18(%r14),%rdx
    Local_New=RME_CPU_LOCAL();
ffffffff8020d89d:	48 89 c1             	mov    %rax,%rcx
    if(Scheduler->Sched.Local!=Local_New)
ffffffff8020d8a0:	48 3b 42 28          	cmp    0x28(%rdx),%rax
ffffffff8020d8a4:	0f 85 5e 02 00 00    	jne    ffffffff8020db08 <_RME_Thd_Sched_Bind.isra.0+0x3a8>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if we are trying to bind to ourself - prohibited */
    if(Thread==Scheduler)
ffffffff8020d8aa:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020d8ad:	0f 84 a9 02 00 00    	je     ffffffff8020db5c <_RME_Thd_Sched_Bind.isra.0+0x3fc>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the priority relationship is correct */
    if(Scheduler->Sched.Prio_Max<Prio)
ffffffff8020d8b3:	4c 39 62 48          	cmp    %r12,0x48(%rdx)
ffffffff8020d8b7:	0f 82 87 02 00 00    	jb     ffffffff8020db44 <_RME_Thd_Sched_Bind.isra.0+0x3e4>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check whether the coprocessor context attribute is compatible with this core */
    Hyp_Attr=Thread->Ctx.Hyp_Attr;
ffffffff8020d8bd:	48 8b 85 88 00 00 00 	mov    0x88(%rbp),%rax
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
    }
#else
    if(RME_THD_ATTR(Hyp_Attr)!=0U)
ffffffff8020d8c4:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d8c7:	48 0f ba f6 3f       	btr    $0x3f,%rsi
ffffffff8020d8cc:	48 85 f6             	test   %rsi,%rsi
ffffffff8020d8cf:	0f 85 53 02 00 00    	jne    ffffffff8020db28 <_RME_Thd_Sched_Bind.isra.0+0x3c8>
            return RME_ERR_PTH_HADDR;
        }
    }
    /* We don't allow setting HYP addr for normal threads, nor do we allow
     * setting HYP addr to NULL for hypervisor-managed threads. */
    else if(((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)==0U))||
ffffffff8020d8d5:	48 83 7c 24 38 00    	cmpq   $0x0,0x38(%rsp)
ffffffff8020d8db:	0f 85 57 02 00 00    	jne    ffffffff8020db38 <_RME_Thd_Sched_Bind.isra.0+0x3d8>
ffffffff8020d8e1:	48 85 c0             	test   %rax,%rax
ffffffff8020d8e4:	0f 88 4e 02 00 00    	js     ffffffff8020db38 <_RME_Thd_Sched_Bind.isra.0+0x3d8>
/* Inline assembly implementation */
#else
static INLINE rme_ptr_t _RME_X64_Comp_Swap(rme_ptr_t* Ptr, rme_ptr_t Old, rme_ptr_t New)
{
	rme_u8_t Zero;
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020d8ea:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020d8f1:	f0 48 0f b1 4d 28    	lock cmpxchg %rcx,0x28(%rbp)
ffffffff8020d8f7:	0f 94 c1             	sete   %cl
        RME_COV_MARKER();
        /* No action required */
    }

    /* Try to bind the thread */
    if(RME_COMP_SWAP((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff8020d8fa:	84 c9                	test   %cl,%cl
ffffffff8020d8fc:	0f 84 4e 02 00 00    	je     ffffffff8020db50 <_RME_Thd_Sched_Bind.isra.0+0x3f0>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase the reference count of the scheduler thread struct - same core */
    Scheduler->Sched.Sched_Ref++;
ffffffff8020d902:	48 83 42 60 01       	addq   $0x1,0x60(%rdx)
    
    /* Bind successful and finish the work off. No need to worry about other cores'
     * operations on this thread because this thread is already bound to this core.
     * TID is half-word parameter-wise, but is stored and returned as a full word. */
    Thread->Sched.Sched_Thd=Scheduler;
ffffffff8020d907:	48 89 55 68          	mov    %rdx,0x68(%rbp)
    Thread->Sched.Prio=Prio;
ffffffff8020d90b:	4c 89 65 40          	mov    %r12,0x40(%rbp)
    Thread->Sched.TID=(rme_ptr_t)TID;
ffffffff8020d90f:	4c 89 6d 20          	mov    %r13,0x20(%rbp)
    /* The state must be TIMEOUT or EXCPEND at this point */
    RME_ASSERT((Thread->Sched.State==RME_THD_TIMEOUT)||
               (Thread->Sched.State==RME_THD_EXCPEND));

    /* Tie the signal endpoint to it if not zero */
    if(Sig_Op==0U)
ffffffff8020d913:	48 85 db             	test   %rbx,%rbx
ffffffff8020d916:	0f 84 cc 01 00 00    	je     ffffffff8020dae8 <_RME_Thd_Sched_Bind.isra.0+0x388>
    else
    {
        RME_COV_MARKER();

        /* Convert to root cap */
        Thread->Sched.Sched_Sig=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff8020d91c:	8b 03                	mov    (%rbx),%eax
ffffffff8020d91e:	85 c0                	test   %eax,%eax
ffffffff8020d920:	74 04                	je     ffffffff8020d926 <_RME_Thd_Sched_Bind.isra.0+0x1c6>
ffffffff8020d922:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff8020d926:	48 89 5d 70          	mov    %rbx,0x70(%rbp)
	                     :"memory", "cc");
	return (rme_ptr_t)Zero;
}
static INLINE rme_ptr_t _RME_X64_Fetch_Add(rme_ptr_t* Ptr, rme_cnt_t Addend)
{
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020d92a:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020d92f:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
        /* Increase refcnt */
        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),1U);
    }
    
    /* Set hypervisor context address if we're hypervisor-managed */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)!=0U)
ffffffff8020d935:	48 83 bd 88 00 00 00 	cmpq   $0x0,0x88(%rbp)
ffffffff8020d93c:	00 
ffffffff8020d93d:	78 11                	js     ffffffff8020d950 <_RME_Thd_Sched_Bind.isra.0+0x1f0>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
ffffffff8020d93f:	31 c0                	xor    %eax,%eax
}
ffffffff8020d941:	5b                   	pop    %rbx
ffffffff8020d942:	5d                   	pop    %rbp
ffffffff8020d943:	41 5c                	pop    %r12
ffffffff8020d945:	41 5d                	pop    %r13
ffffffff8020d947:	41 5e                	pop    %r14
ffffffff8020d949:	c3                   	ret
ffffffff8020d94a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)Haddr;
ffffffff8020d950:	48 c7 85 90 00 00 00 	movq   $0x0,0x90(%rbp)
ffffffff8020d957:	00 00 00 00 
ffffffff8020d95b:	eb e2                	jmp    ffffffff8020d93f <_RME_Thd_Sched_Bind.isra.0+0x1df>
ffffffff8020d95d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020d960:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d963:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020d967:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020d96a:	0f 83 a8 01 00 00    	jae    ffffffff8020db18 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020d970:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020d977:	ff 00 00 
ffffffff8020d97a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020d97e:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020d985:	00 00 00 
ffffffff8020d988:	48 01 f9             	add    %rdi,%rcx
ffffffff8020d98b:	4c 8b 01             	mov    (%rcx),%r8
ffffffff8020d98e:	4d 89 c3             	mov    %r8,%r11
ffffffff8020d991:	4d 21 cb             	and    %r9,%r11
ffffffff8020d994:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020d997:	74 37                	je     ffffffff8020d9d0 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020d999:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8020d99d:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff8020d9a1:	0f 85 51 01 00 00    	jne    ffffffff8020daf8 <_RME_Thd_Sched_Bind.isra.0+0x398>
ffffffff8020d9a7:	4c 8b 41 28          	mov    0x28(%rcx),%r8
ffffffff8020d9ab:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020d9b0:	4c 39 c0             	cmp    %r8,%rax
ffffffff8020d9b3:	0f 83 5f 01 00 00    	jae    ffffffff8020db18 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020d9b9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d9bd:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020d9c1:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020d9c4:	49 21 c9             	and    %rcx,%r9
ffffffff8020d9c7:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020d9ca:	0f 85 e5 fd ff ff    	jne    ffffffff8020d7b5 <_RME_Thd_Sched_Bind.isra.0+0x55>
ffffffff8020d9d0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020d9d7:	e9 65 ff ff ff       	jmp    ffffffff8020d941 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020d9dc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff8020d9e0:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d9e3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020d9e7:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020d9ea:	0f 83 28 01 00 00    	jae    ffffffff8020db18 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020d9f0:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020d9f7:	ff 00 00 
ffffffff8020d9fa:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020d9fe:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020da05:	00 00 00 
ffffffff8020da08:	48 01 f9             	add    %rdi,%rcx
ffffffff8020da0b:	4c 8b 01             	mov    (%rcx),%r8
ffffffff8020da0e:	4d 89 c3             	mov    %r8,%r11
ffffffff8020da11:	4d 21 cb             	and    %r9,%r11
ffffffff8020da14:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020da17:	74 b7                	je     ffffffff8020d9d0 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020da19:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8020da1d:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff8020da21:	0f 85 d1 00 00 00    	jne    ffffffff8020daf8 <_RME_Thd_Sched_Bind.isra.0+0x398>
ffffffff8020da27:	4c 8b 41 28          	mov    0x28(%rcx),%r8
ffffffff8020da2b:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020da31:	4c 39 c2             	cmp    %r8,%rdx
ffffffff8020da34:	0f 83 de 00 00 00    	jae    ffffffff8020db18 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020da3a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020da3e:	48 03 51 18          	add    0x18(%rcx),%rdx
ffffffff8020da42:	49 89 d6             	mov    %rdx,%r14
ffffffff8020da45:	48 8b 12             	mov    (%rdx),%rdx
ffffffff8020da48:	49 21 d1             	and    %rdx,%r9
ffffffff8020da4b:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020da4e:	0f 85 ac fd ff ff    	jne    ffffffff8020d800 <_RME_Thd_Sched_Bind.isra.0+0xa0>
ffffffff8020da54:	e9 77 ff ff ff       	jmp    ffffffff8020d9d0 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020da59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        Sig_Op=RME_NULL;
ffffffff8020da60:	31 db                	xor    %ebx,%ebx
ffffffff8020da62:	e9 1e fe ff ff       	jmp    ffffffff8020d885 <_RME_Thd_Sched_Bind.isra.0+0x125>
ffffffff8020da67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020da6e:	00 00 
        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8020da70:	48 89 da             	mov    %rbx,%rdx
ffffffff8020da73:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020da77:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020da7a:	0f 83 98 00 00 00    	jae    ffffffff8020db18 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020da80:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020da87:	ff 00 00 
ffffffff8020da8a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020da8e:	48 01 fa             	add    %rdi,%rdx
ffffffff8020da91:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020da98:	00 00 00 
ffffffff8020da9b:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020da9e:	49 89 c8             	mov    %rcx,%r8
ffffffff8020daa1:	49 21 f0             	and    %rsi,%r8
ffffffff8020daa4:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020daa7:	0f 84 23 ff ff ff    	je     ffffffff8020d9d0 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020daad:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020dab1:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020dab5:	75 41                	jne    ffffffff8020daf8 <_RME_Thd_Sched_Bind.isra.0+0x398>
ffffffff8020dab7:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020dabb:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020dac1:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020dac4:	73 52                	jae    ffffffff8020db18 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020dac6:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020daca:	48 03 5a 18          	add    0x18(%rdx),%rbx
ffffffff8020dace:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020dad1:	48 21 d6             	and    %rdx,%rsi
ffffffff8020dad4:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020dad7:	0f 85 90 fd ff ff    	jne    ffffffff8020d86d <_RME_Thd_Sched_Bind.isra.0+0x10d>
ffffffff8020dadd:	e9 ee fe ff ff       	jmp    ffffffff8020d9d0 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020dae2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Thread->Sched.Sched_Sig=0U;
ffffffff8020dae8:	48 c7 45 70 00 00 00 	movq   $0x0,0x70(%rbp)
ffffffff8020daef:	00 
ffffffff8020daf0:	e9 40 fe ff ff       	jmp    ffffffff8020d935 <_RME_Thd_Sched_Bind.isra.0+0x1d5>
ffffffff8020daf5:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020daf8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020daff:	e9 3d fe ff ff       	jmp    ffffffff8020d941 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020db04:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_INVSTATE;
ffffffff8020db08:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8020db0f:	e9 2d fe ff ff       	jmp    ffffffff8020d941 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020db14:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020db18:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020db1f:	e9 1d fe ff ff       	jmp    ffffffff8020d941 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020db24:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff8020db28:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020db2f:	e9 0d fe ff ff       	jmp    ffffffff8020d941 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020db34:	0f 1f 40 00          	nopl   0x0(%rax)
                    return RME_ERR_PTH_HADDR;
ffffffff8020db38:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8020db3f:	e9 fd fd ff ff       	jmp    ffffffff8020d941 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
        return RME_ERR_PTH_PRIO;
ffffffff8020db44:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8020db4b:	e9 f1 fd ff ff       	jmp    ffffffff8020d941 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
        return RME_ERR_PTH_CONFLICT;
ffffffff8020db50:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff8020db57:	e9 e5 fd ff ff       	jmp    ffffffff8020d941 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
        return RME_ERR_PTH_NOTIF;
ffffffff8020db5c:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff8020db63:	e9 d9 fd ff ff       	jmp    ffffffff8020d941 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020db68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020db6f:	00 

ffffffff8020db70 <_RME_Prc_Crt.isra.0>:
static rme_ret_t _RME_Prc_Crt(struct RME_Cap_Cpt* Cpt,
ffffffff8020db70:	48 89 d0             	mov    %rdx,%rax
ffffffff8020db73:	55                   	push   %rbp
ffffffff8020db74:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020db77:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020db78:	f6 c4 80             	test   $0x80,%ah
ffffffff8020db7b:	0f 85 8f 01 00 00    	jne    ffffffff8020dd10 <_RME_Prc_Crt.isra.0+0x1a0>
ffffffff8020db81:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020db84:	0f 83 f6 02 00 00    	jae    ffffffff8020de80 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020db8a:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020db91:	ff 00 00 
ffffffff8020db94:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020db98:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020db9f:	00 00 00 
ffffffff8020dba2:	48 01 f8             	add    %rdi,%rax
ffffffff8020dba5:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020dba8:	49 21 ca             	and    %rcx,%r10
ffffffff8020dbab:	4d 39 da             	cmp    %r11,%r10
ffffffff8020dbae:	0f 84 cc 01 00 00    	je     ffffffff8020dd80 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020dbb4:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020dbb8:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020dbbc:	0f 85 ce 02 00 00    	jne    ffffffff8020de90 <_RME_Prc_Crt.isra.0+0x320>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020dbc2:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020dbc9:	0f 85 c1 01 00 00    	jne    ffffffff8020dd90 <_RME_Prc_Crt.isra.0+0x220>
ffffffff8020dbcf:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020dbd2:	0f 83 a8 02 00 00    	jae    ffffffff8020de80 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020dbd8:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020dbdf:	ff 00 00 
ffffffff8020dbe2:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020dbe6:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020dbed:	00 00 00 
ffffffff8020dbf0:	49 01 f8             	add    %rdi,%r8
ffffffff8020dbf3:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020dbf6:	49 21 ca             	and    %rcx,%r10
ffffffff8020dbf9:	4d 39 da             	cmp    %r11,%r10
ffffffff8020dbfc:	0f 84 7e 01 00 00    	je     ffffffff8020dd80 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020dc02:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020dc06:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020dc0a:	0f 85 80 02 00 00    	jne    ffffffff8020de90 <_RME_Prc_Crt.isra.0+0x320>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020dc10:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8020dc17:	0f 85 f3 01 00 00    	jne    ffffffff8020de10 <_RME_Prc_Crt.isra.0+0x2a0>
ffffffff8020dc1d:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020dc20:	0f 83 5a 02 00 00    	jae    ffffffff8020de80 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020dc26:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020dc2d:	ff 00 00 
ffffffff8020dc30:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020dc34:	49 01 f9             	add    %rdi,%r9
ffffffff8020dc37:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020dc3e:	00 00 00 
ffffffff8020dc41:	49 8b 09             	mov    (%r9),%rcx
ffffffff8020dc44:	48 21 ce             	and    %rcx,%rsi
ffffffff8020dc47:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020dc4a:	0f 84 30 01 00 00    	je     ffffffff8020dd80 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020dc50:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020dc54:	48 83 f9 04          	cmp    $0x4,%rcx
ffffffff8020dc58:	0f 85 32 02 00 00    	jne    ffffffff8020de90 <_RME_Prc_Crt.isra.0+0x320>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020dc5e:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8020dc62:	0f 84 38 02 00 00    	je     ffffffff8020dea0 <_RME_Prc_Crt.isra.0+0x330>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff8020dc68:	41 f6 40 10 40       	testb  $0x40,0x10(%r8)
ffffffff8020dc6d:	0f 84 2d 02 00 00    	je     ffffffff8020dea0 <_RME_Prc_Crt.isra.0+0x330>
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff8020dc73:	41 f6 41 10 40       	testb  $0x40,0x10(%r9)
ffffffff8020dc78:	0f 84 22 02 00 00    	je     ffffffff8020dea0 <_RME_Prc_Crt.isra.0+0x330>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff8020dc7e:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8020dc82:	0f 83 f8 01 00 00    	jae    ffffffff8020de80 <_RME_Prc_Crt.isra.0+0x310>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020dc88:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff8020dc8f:	00 00 00 
ffffffff8020dc92:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020dc96:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff8020dc9a:	31 c0                	xor    %eax,%eax
ffffffff8020dc9c:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020dca1:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020dca4:	84 c9                	test   %cl,%cl
ffffffff8020dca6:	0f 84 00 02 00 00    	je     ffffffff8020deac <_RME_Prc_Crt.isra.0+0x33c>
    Prc_Crt->Head.Root_Ref=0U;
ffffffff8020dcac:	66 0f 6f 05 6c f7 00 	movdqa 0xf76c(%rip),%xmm0        # ffffffff8021d420 <Table.1+0x100>
ffffffff8020dcb3:	00 
ffffffff8020dcb4:	0f 11 42 08          	movups %xmm0,0x8(%rdx)
ffffffff8020dcb8:	66 0f 6f 05 70 f7 00 	movdqa 0xf770(%rip),%xmm0        # ffffffff8021d430 <Table.1+0x110>
ffffffff8020dcbf:	00 
ffffffff8020dcc0:	0f 11 42 18          	movups %xmm0,0x18(%rdx)
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff8020dcc4:	41 8b 08             	mov    (%r8),%ecx
ffffffff8020dcc7:	85 c9                	test   %ecx,%ecx
ffffffff8020dcc9:	74 04                	je     ffffffff8020dccf <_RME_Prc_Crt.isra.0+0x15f>
ffffffff8020dccb:	4d 8b 40 08          	mov    0x8(%r8),%r8
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff8020dccf:	41 8b 01             	mov    (%r9),%eax
ffffffff8020dcd2:	85 c0                	test   %eax,%eax
ffffffff8020dcd4:	74 04                	je     ffffffff8020dcda <_RME_Prc_Crt.isra.0+0x16a>
ffffffff8020dcd6:	4d 8b 49 08          	mov    0x8(%r9),%r9
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020dcda:	b8 01 00 00 00       	mov    $0x1,%eax
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff8020dcdf:	4c 89 42 28          	mov    %r8,0x28(%rdx)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff8020dce3:	4c 89 4a 30          	mov    %r9,0x30(%rdx)
ffffffff8020dce7:	48 89 c1             	mov    %rax,%rcx
ffffffff8020dcea:	f0 49 0f c1 48 08    	lock xadd %rcx,0x8(%r8)
ffffffff8020dcf0:	f0 49 0f c1 41 08    	lock xadd %rax,0x8(%r9)
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff8020dcf6:	48 b8 00 00 00 00 00 	movabs $0x5000000000000,%rax
ffffffff8020dcfd:	00 05 00 
ffffffff8020dd00:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff8020dd03:	31 c0                	xor    %eax,%eax
}
ffffffff8020dd05:	5b                   	pop    %rbx
ffffffff8020dd06:	5d                   	pop    %rbp
ffffffff8020dd07:	c3                   	ret
ffffffff8020dd08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020dd0f:	00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020dd10:	48 89 c1             	mov    %rax,%rcx
ffffffff8020dd13:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020dd17:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020dd1a:	0f 83 60 01 00 00    	jae    ffffffff8020de80 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020dd20:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020dd27:	ff 00 00 
ffffffff8020dd2a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020dd2e:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020dd35:	00 00 00 
ffffffff8020dd38:	48 01 f9             	add    %rdi,%rcx
ffffffff8020dd3b:	4c 8b 11             	mov    (%rcx),%r10
ffffffff8020dd3e:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020dd41:	4c 21 dd             	and    %r11,%rbp
ffffffff8020dd44:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020dd47:	74 37                	je     ffffffff8020dd80 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020dd49:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020dd4d:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020dd51:	0f 85 39 01 00 00    	jne    ffffffff8020de90 <_RME_Prc_Crt.isra.0+0x320>
ffffffff8020dd57:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff8020dd5b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020dd60:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020dd63:	0f 83 17 01 00 00    	jae    ffffffff8020de80 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020dd69:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dd6d:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020dd71:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020dd74:	49 21 cb             	and    %rcx,%r11
ffffffff8020dd77:	49 39 db             	cmp    %rbx,%r11
ffffffff8020dd7a:	0f 85 34 fe ff ff    	jne    ffffffff8020dbb4 <_RME_Prc_Crt.isra.0+0x44>
ffffffff8020dd80:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dd87:	e9 79 ff ff ff       	jmp    ffffffff8020dd05 <_RME_Prc_Crt.isra.0+0x195>
ffffffff8020dd8c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020dd90:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020dd93:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020dd97:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020dd9a:	0f 83 e0 00 00 00    	jae    ffffffff8020de80 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020dda0:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020dda7:	ff 00 00 
ffffffff8020ddaa:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020ddae:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020ddb5:	00 00 00 
ffffffff8020ddb8:	48 01 f9             	add    %rdi,%rcx
ffffffff8020ddbb:	4c 8b 11             	mov    (%rcx),%r10
ffffffff8020ddbe:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020ddc1:	4c 21 dd             	and    %r11,%rbp
ffffffff8020ddc4:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020ddc7:	74 b7                	je     ffffffff8020dd80 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020ddc9:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020ddcd:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020ddd1:	0f 85 b9 00 00 00    	jne    ffffffff8020de90 <_RME_Prc_Crt.isra.0+0x320>
ffffffff8020ddd7:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff8020dddb:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020dde2:	4d 39 d0             	cmp    %r10,%r8
ffffffff8020dde5:	0f 83 95 00 00 00    	jae    ffffffff8020de80 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020ddeb:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020ddef:	4c 03 41 18          	add    0x18(%rcx),%r8
ffffffff8020ddf3:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020ddf6:	49 21 cb             	and    %rcx,%r11
ffffffff8020ddf9:	49 39 db             	cmp    %rbx,%r11
ffffffff8020ddfc:	0f 85 00 fe ff ff    	jne    ffffffff8020dc02 <_RME_Prc_Crt.isra.0+0x92>
ffffffff8020de02:	e9 79 ff ff ff       	jmp    ffffffff8020dd80 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020de07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020de0e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020de10:	4c 89 c9             	mov    %r9,%rcx
ffffffff8020de13:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020de17:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020de1a:	73 64                	jae    ffffffff8020de80 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020de1c:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020de23:	00 00 00 
ffffffff8020de26:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020de2a:	48 01 f9             	add    %rdi,%rcx
ffffffff8020de2d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020de34:	ff 00 00 
ffffffff8020de37:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8020de3a:	49 89 f3             	mov    %rsi,%r11
ffffffff8020de3d:	49 21 fb             	and    %rdi,%r11
ffffffff8020de40:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020de43:	0f 84 37 ff ff ff    	je     ffffffff8020dd80 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020de49:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020de4d:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020de51:	75 3d                	jne    ffffffff8020de90 <_RME_Prc_Crt.isra.0+0x320>
ffffffff8020de53:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020de57:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff8020de5e:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020de61:	73 1d                	jae    ffffffff8020de80 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020de63:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020de67:	4c 03 49 18          	add    0x18(%rcx),%r9
ffffffff8020de6b:	49 8b 09             	mov    (%r9),%rcx
ffffffff8020de6e:	48 21 cf             	and    %rcx,%rdi
ffffffff8020de71:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8020de74:	0f 85 d6 fd ff ff    	jne    ffffffff8020dc50 <_RME_Prc_Crt.isra.0+0xe0>
ffffffff8020de7a:	e9 01 ff ff ff       	jmp    ffffffff8020dd80 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020de7f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020de80:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020de87:	e9 79 fe ff ff       	jmp    ffffffff8020dd05 <_RME_Prc_Crt.isra.0+0x195>
ffffffff8020de8c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020de90:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020de97:	e9 69 fe ff ff       	jmp    ffffffff8020dd05 <_RME_Prc_Crt.isra.0+0x195>
ffffffff8020de9c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020dea0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020dea7:	e9 59 fe ff ff       	jmp    ffffffff8020dd05 <_RME_Prc_Crt.isra.0+0x195>
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020deac:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020deb3:	e9 4d fe ff ff       	jmp    ffffffff8020dd05 <_RME_Prc_Crt.isra.0+0x195>
ffffffff8020deb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020debf:	00 

ffffffff8020dec0 <_RME_Pgt_Add.isra.0>:
static rme_ret_t _RME_Pgt_Add(struct RME_Cap_Cpt* Cpt, 
ffffffff8020dec0:	41 55                	push   %r13
ffffffff8020dec2:	49 89 f2             	mov    %rsi,%r10
ffffffff8020dec5:	48 89 f8             	mov    %rdi,%rax
ffffffff8020dec8:	41 54                	push   %r12
ffffffff8020deca:	4d 89 c4             	mov    %r8,%r12
ffffffff8020decd:	55                   	push   %rbp
ffffffff8020dece:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020ded1:	53                   	push   %rbx
ffffffff8020ded2:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020ded5:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020ded9:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020dede:	80 e6 80             	and    $0x80,%dh
ffffffff8020dee1:	75 4d                	jne    ffffffff8020df30 <_RME_Pgt_Add.isra.0+0x70>
ffffffff8020dee3:	4c 39 d3             	cmp    %r10,%rbx
ffffffff8020dee6:	0f 83 c4 02 00 00    	jae    ffffffff8020e1b0 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020deec:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020def3:	ff 00 00 
ffffffff8020def6:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020defa:	48 01 fb             	add    %rdi,%rbx
ffffffff8020defd:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020df04:	00 00 00 
ffffffff8020df07:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020df0a:	48 21 d1             	and    %rdx,%rcx
ffffffff8020df0d:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020df10:	0f 85 87 00 00 00    	jne    ffffffff8020df9d <_RME_Pgt_Add.isra.0+0xdd>
ffffffff8020df16:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020df1d:	00 00 00 
ffffffff8020df20:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020df27:	e9 d0 01 00 00       	jmp    ffffffff8020e0fc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020df2c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020df30:	48 89 da             	mov    %rbx,%rdx
ffffffff8020df33:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020df37:	4c 39 d2             	cmp    %r10,%rdx
ffffffff8020df3a:	0f 83 70 02 00 00    	jae    ffffffff8020e1b0 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020df40:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020df47:	00 00 00 
ffffffff8020df4a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020df4e:	48 01 fa             	add    %rdi,%rdx
ffffffff8020df51:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020df58:	ff 00 00 
ffffffff8020df5b:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020df5e:	49 89 cb             	mov    %rcx,%r11
ffffffff8020df61:	49 21 fb             	and    %rdi,%r11
ffffffff8020df64:	4d 39 c3             	cmp    %r8,%r11
ffffffff8020df67:	74 b7                	je     ffffffff8020df20 <_RME_Pgt_Add.isra.0+0x60>
ffffffff8020df69:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020df6d:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020df71:	0f 85 19 02 00 00    	jne    ffffffff8020e190 <_RME_Pgt_Add.isra.0+0x2d0>
ffffffff8020df77:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020df7b:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020df81:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020df84:	0f 83 26 02 00 00    	jae    ffffffff8020e1b0 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020df8a:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020df8e:	48 03 5a 18          	add    0x18(%rdx),%rbx
ffffffff8020df92:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020df95:	48 21 d7             	and    %rdx,%rdi
ffffffff8020df98:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020df9b:	74 83                	je     ffffffff8020df20 <_RME_Pgt_Add.isra.0+0x60>
ffffffff8020df9d:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020dfa1:	48 83 fa 04          	cmp    $0x4,%rdx
ffffffff8020dfa5:	0f 85 e5 01 00 00    	jne    ffffffff8020e190 <_RME_Pgt_Add.isra.0+0x2d0>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff8020dfab:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8020dfb2:	0f 85 58 01 00 00    	jne    ffffffff8020e110 <_RME_Pgt_Add.isra.0+0x250>
ffffffff8020dfb8:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020dfbb:	0f 83 ef 01 00 00    	jae    ffffffff8020e1b0 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020dfc1:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020dfc8:	ff 00 00 
ffffffff8020dfcb:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020dfcf:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020dfd6:	00 00 00 
ffffffff8020dfd9:	49 8d 3c 01          	lea    (%r9,%rax,1),%rdi
ffffffff8020dfdd:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020dfe0:	48 21 c2             	and    %rax,%rdx
ffffffff8020dfe3:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020dfe6:	0f 84 34 ff ff ff    	je     ffffffff8020df20 <_RME_Pgt_Add.isra.0+0x60>
ffffffff8020dfec:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dff0:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020dff4:	0f 85 96 01 00 00    	jne    ffffffff8020e190 <_RME_Pgt_Add.isra.0+0x2d0>
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff8020dffa:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8020dffe:	a8 02                	test   $0x2,%al
ffffffff8020e000:	0f 84 9a 01 00 00    	je     ffffffff8020e1a0 <_RME_Pgt_Add.isra.0+0x2e0>
    RME_CAP_CHECK(Pgt_Src,RME_PGT_FLAG_ADD_SRC);
ffffffff8020e006:	48 8b 57 10          	mov    0x10(%rdi),%rdx
ffffffff8020e00a:	f6 c2 01             	test   $0x1,%dl
ffffffff8020e00d:	0f 84 8d 01 00 00    	je     ffffffff8020e1a0 <_RME_Pgt_Add.isra.0+0x2e0>
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff8020e013:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e016:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff8020e01a:	48 39 e9             	cmp    %rbp,%rcx
ffffffff8020e01d:	0f 82 7d 01 00 00    	jb     ffffffff8020e1a0 <_RME_Pgt_Add.isra.0+0x2e0>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff8020e023:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020e027:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff8020e02c:	48 39 c5             	cmp    %rax,%rbp
ffffffff8020e02f:	0f 82 6b 01 00 00    	jb     ffffffff8020e1a0 <_RME_Pgt_Add.isra.0+0x2e0>
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff8020e035:	48 89 d0             	mov    %rdx,%rax
ffffffff8020e038:	48 c1 e8 24          	shr    $0x24,%rax
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff8020e03c:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020e03f:	0f 82 5b 01 00 00    	jb     ffffffff8020e1a0 <_RME_Pgt_Add.isra.0+0x2e0>
       (Pos_Src<RME_PGT_FLAG_LOW(Pgt_Src->Head.Flag)))
ffffffff8020e045:	48 c1 ea 08          	shr    $0x8,%rdx
ffffffff8020e049:	81 e2 ff ff ff 0f    	and    $0xfffffff,%edx
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff8020e04f:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8020e052:	0f 82 48 01 00 00    	jb     ffffffff8020e1a0 <_RME_Pgt_Add.isra.0+0x2e0>
    Szord_Dst=RME_PGT_SZORD(Pgt_Dst->Order);
ffffffff8020e058:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
    Szord_Src=RME_PGT_SZORD(Pgt_Src->Order);
ffffffff8020e05c:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    Szord_Dst=RME_PGT_SZORD(Pgt_Dst->Order);
ffffffff8020e060:	49 89 cd             	mov    %rcx,%r13
    Szord_Src=RME_PGT_SZORD(Pgt_Src->Order);
ffffffff8020e063:	48 89 d0             	mov    %rdx,%rax
    Szord_Dst=RME_PGT_SZORD(Pgt_Dst->Order);
ffffffff8020e066:	49 c1 ed 20          	shr    $0x20,%r13
    Szord_Src=RME_PGT_SZORD(Pgt_Src->Order);
ffffffff8020e06a:	48 c1 e8 20          	shr    $0x20,%rax
    if(Szord_Dst>Szord_Src)
ffffffff8020e06e:	4c 39 e8             	cmp    %r13,%rax
ffffffff8020e071:	0f 82 49 01 00 00    	jb     ffffffff8020e1c0 <_RME_Pgt_Add.isra.0+0x300>
    if(((Pos_Dst>>RME_PGT_NMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020e077:	49 89 e8             	mov    %rbp,%r8
       ((Pos_Src>>RME_PGT_NMORD(Pgt_Src->Order))!=0U))
ffffffff8020e07a:	49 89 f3             	mov    %rsi,%r11
    if(((Pos_Dst>>RME_PGT_NMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020e07d:	49 d3 e8             	shr    %cl,%r8
       ((Pos_Src>>RME_PGT_NMORD(Pgt_Src->Order))!=0U))
ffffffff8020e080:	89 d1                	mov    %edx,%ecx
ffffffff8020e082:	49 d3 eb             	shr    %cl,%r11
    if(((Pos_Dst>>RME_PGT_NMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020e085:	4d 09 d8             	or     %r11,%r8
ffffffff8020e088:	0f 85 32 01 00 00    	jne    ffffffff8020e1c0 <_RME_Pgt_Add.isra.0+0x300>
    if(Szord_Src<RME_WORD_BIT)
ffffffff8020e08e:	48 83 f8 3f          	cmp    $0x3f,%rax
ffffffff8020e092:	77 21                	ja     ffffffff8020e0b5 <_RME_Pgt_Add.isra.0+0x1f5>
        if(RME_POW2(Szord_Src)<=(Index<<Szord_Dst))
ffffffff8020e094:	89 c1                	mov    %eax,%ecx
ffffffff8020e096:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020e09b:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020e09e:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020e0a1:	48 89 d0             	mov    %rdx,%rax
ffffffff8020e0a4:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
ffffffff8020e0a9:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020e0ac:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e0af:	0f 83 0b 01 00 00    	jae    ffffffff8020e1c0 <_RME_Pgt_Add.isra.0+0x300>
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
ffffffff8020e0b5:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
ffffffff8020e0ba:	48 89 e2             	mov    %rsp,%rdx
ffffffff8020e0bd:	e8 ce d6 00 00       	call   ffffffff8021b790 <__RME_Pgt_Lookup>
        Paddr_Dst=Paddr_Src;
ffffffff8020e0c2:	48 8b 34 24          	mov    (%rsp),%rsi
    if(Szord_Dst<RME_WORD_BIT)
ffffffff8020e0c6:	49 83 fd 3f          	cmp    $0x3f,%r13
ffffffff8020e0ca:	77 0f                	ja     ffffffff8020e0db <_RME_Pgt_Add.isra.0+0x21b>
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
ffffffff8020e0cc:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff8020e0d1:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020e0d4:	48 d3 e6             	shl    %cl,%rsi
ffffffff8020e0d7:	48 03 34 24          	add    (%rsp),%rsi
    if(((Flag_Dst)&(~Flag_Src))!=0U)
ffffffff8020e0db:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8020e0e0:	48 f7 d0             	not    %rax
ffffffff8020e0e3:	4c 85 e0             	test   %r12,%rax
ffffffff8020e0e6:	0f 85 e4 00 00 00    	jne    ffffffff8020e1d0 <_RME_Pgt_Add.isra.0+0x310>
    if(__RME_Pgt_Page_Map(Pgt_Dst,Paddr_Dst,Pos_Dst,Flag_Dst)<0)
ffffffff8020e0ec:	4c 89 e1             	mov    %r12,%rcx
ffffffff8020e0ef:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020e0f2:	48 89 df             	mov    %rbx,%rdi
ffffffff8020e0f5:	e8 16 d5 00 00       	call   ffffffff8021b610 <__RME_Pgt_Page_Map>
    return 0;
ffffffff8020e0fa:	31 c0                	xor    %eax,%eax
}
ffffffff8020e0fc:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020e100:	5b                   	pop    %rbx
ffffffff8020e101:	5d                   	pop    %rbp
ffffffff8020e102:	41 5c                	pop    %r12
ffffffff8020e104:	41 5d                	pop    %r13
ffffffff8020e106:	c3                   	ret
ffffffff8020e107:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020e10e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff8020e110:	4c 89 ca             	mov    %r9,%rdx
ffffffff8020e113:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e117:	4c 39 d2             	cmp    %r10,%rdx
ffffffff8020e11a:	0f 83 90 00 00 00    	jae    ffffffff8020e1b0 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020e120:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020e127:	ff 00 00 
ffffffff8020e12a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020e12e:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020e135:	00 00 00 
ffffffff8020e138:	48 01 d0             	add    %rdx,%rax
ffffffff8020e13b:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020e13e:	48 89 d7             	mov    %rdx,%rdi
ffffffff8020e141:	48 21 cf             	and    %rcx,%rdi
ffffffff8020e144:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020e147:	0f 84 d3 fd ff ff    	je     ffffffff8020df20 <_RME_Pgt_Add.isra.0+0x60>
ffffffff8020e14d:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020e151:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020e155:	75 39                	jne    ffffffff8020e190 <_RME_Pgt_Add.isra.0+0x2d0>
ffffffff8020e157:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e15b:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff8020e162:	49 39 d1             	cmp    %rdx,%r9
ffffffff8020e165:	73 49                	jae    ffffffff8020e1b0 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020e167:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8020e16b:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020e16f:	4c 01 cf             	add    %r9,%rdi
ffffffff8020e172:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020e175:	48 21 c1             	and    %rax,%rcx
ffffffff8020e178:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8020e17b:	0f 85 6b fe ff ff    	jne    ffffffff8020dfec <_RME_Pgt_Add.isra.0+0x12c>
ffffffff8020e181:	e9 9a fd ff ff       	jmp    ffffffff8020df20 <_RME_Pgt_Add.isra.0+0x60>
ffffffff8020e186:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e18d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020e190:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e197:	e9 60 ff ff ff       	jmp    ffffffff8020e0fc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020e19c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff8020e1a0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e1a7:	e9 50 ff ff ff       	jmp    ffffffff8020e0fc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020e1ac:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020e1b0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e1b7:	e9 40 ff ff ff       	jmp    ffffffff8020e0fc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020e1bc:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PGT_ADDR;
ffffffff8020e1c0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020e1c7:	e9 30 ff ff ff       	jmp    ffffffff8020e0fc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020e1cc:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PGT_PERM;
ffffffff8020e1d0:	48 c7 c0 98 ff ff ff 	mov    $0xffffffffffffff98,%rax
ffffffff8020e1d7:	e9 20 ff ff ff       	jmp    ffffffff8020e0fc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020e1dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e1e0 <_RME_Cpt_Add.isra.0>:
static rme_ret_t _RME_Cpt_Add(struct RME_Cap_Cpt* Cpt,
ffffffff8020e1e0:	48 89 d0             	mov    %rdx,%rax
ffffffff8020e1e3:	41 54                	push   %r12
ffffffff8020e1e5:	49 89 f2             	mov    %rsi,%r10
ffffffff8020e1e8:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020e1eb:	55                   	push   %rbp
ffffffff8020e1ec:	53                   	push   %rbx
ffffffff8020e1ed:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020e1f2:	f6 c4 80             	test   $0x80,%ah
ffffffff8020e1f5:	0f 85 d5 01 00 00    	jne    ffffffff8020e3d0 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020e1fb:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020e1fe:	0f 83 fc 03 00 00    	jae    ffffffff8020e600 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020e204:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020e20b:	ff 00 00 
ffffffff8020e20e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e212:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020e219:	00 00 00 
ffffffff8020e21c:	48 01 f8             	add    %rdi,%rax
ffffffff8020e21f:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020e222:	49 21 cb             	and    %rcx,%r11
ffffffff8020e225:	49 39 db             	cmp    %rbx,%r11
ffffffff8020e228:	0f 84 12 02 00 00    	je     ffffffff8020e440 <_RME_Cpt_Add.isra.0+0x260>
ffffffff8020e22e:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020e232:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020e236:	0f 85 b4 03 00 00    	jne    ffffffff8020e5f0 <_RME_Cpt_Add.isra.0+0x410>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020e23c:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020e243:	0f 85 07 02 00 00    	jne    ffffffff8020e450 <_RME_Cpt_Add.isra.0+0x270>
ffffffff8020e249:	4d 39 d0             	cmp    %r10,%r8
ffffffff8020e24c:	0f 83 ae 03 00 00    	jae    ffffffff8020e600 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020e252:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020e259:	00 00 00 
ffffffff8020e25c:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020e260:	49 01 f8             	add    %rdi,%r8
ffffffff8020e263:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020e26a:	ff 00 00 
ffffffff8020e26d:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020e270:	48 21 cf             	and    %rcx,%rdi
ffffffff8020e273:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8020e276:	0f 84 c4 01 00 00    	je     ffffffff8020e440 <_RME_Cpt_Add.isra.0+0x260>
ffffffff8020e27c:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020e280:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020e284:	0f 85 66 03 00 00    	jne    ffffffff8020e5f0 <_RME_Cpt_Add.isra.0+0x410>
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020e28a:	f6 40 10 10          	testb  $0x10,0x10(%rax)
ffffffff8020e28e:	0f 84 94 02 00 00    	je     ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
    RME_CAP_CHECK(Cpt_Src,RME_CPT_FLAG_ADD_SRC);
ffffffff8020e294:	41 f6 40 10 08       	testb  $0x8,0x10(%r8)
ffffffff8020e299:	0f 84 89 02 00 00    	je     ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020e29f:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8020e2a3:	0f 83 57 03 00 00    	jae    ffffffff8020e600 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020e2a9:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020e2ad:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff8020e2b1:	48 89 d7             	mov    %rdx,%rdi
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020e2b4:	4d 3b 48 28          	cmp    0x28(%r8),%r9
ffffffff8020e2b8:	0f 83 42 03 00 00    	jae    ffffffff8020e600 <_RME_Cpt_Add.isra.0+0x420>
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020e2be:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff8020e2c5:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020e2c8:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020e2cc:	4d 03 48 18          	add    0x18(%r8),%r9
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020e2d0:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020e2d7:	00 00 00 
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Src->Head.Type_Stat));
ffffffff8020e2da:	49 8b 11             	mov    (%r9),%rdx
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020e2dd:	48 21 d0             	and    %rdx,%rax
ffffffff8020e2e0:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020e2e3:	0f 84 57 01 00 00    	je     ffffffff8020e440 <_RME_Cpt_Add.isra.0+0x260>
    if(Type_Stat==0U)
ffffffff8020e2e9:	48 85 d2             	test   %rdx,%rdx
ffffffff8020e2ec:	0f 84 2a 03 00 00    	je     ffffffff8020e61c <_RME_Cpt_Add.isra.0+0x43c>
    Src_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020e2f2:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020e2f5:	48 c1 e9 30          	shr    $0x30,%rcx
    if(Src_Type==RME_CAP_TYPE_PGT)
ffffffff8020e2f9:	48 83 f9 04          	cmp    $0x4,%rcx
ffffffff8020e2fd:	0f 84 cd 01 00 00    	je     ffffffff8020e4d0 <_RME_Cpt_Add.isra.0+0x2f0>
    else if(Src_Type==RME_CAP_TYPE_KFN)
ffffffff8020e303:	48 83 f9 01          	cmp    $0x1,%rcx
ffffffff8020e307:	0f 84 3b 02 00 00    	je     ffffffff8020e548 <_RME_Cpt_Add.isra.0+0x368>
    else if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020e30d:	48 83 f9 02          	cmp    $0x2,%rcx
ffffffff8020e311:	0f 84 61 02 00 00    	je     ffffffff8020e578 <_RME_Cpt_Add.isra.0+0x398>
        if(Flag==0U)
ffffffff8020e317:	48 85 f6             	test   %rsi,%rsi
ffffffff8020e31a:	0f 84 08 02 00 00    	je     ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
        if((Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020e320:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020e324:	48 f7 d0             	not    %rax
ffffffff8020e327:	48 85 f0             	test   %rsi,%rax
ffffffff8020e32a:	0f 85 f8 01 00 00    	jne    ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff8020e330:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020e333:	48 85 c0             	test   %rax,%rax
ffffffff8020e336:	0f 85 d4 02 00 00    	jne    ffffffff8020e610 <_RME_Cpt_Add.isra.0+0x430>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020e33c:	49 b8 00 00 00 00 01 	movabs $0x100000000,%r8
ffffffff8020e343:	00 00 00 
ffffffff8020e346:	f0 4c 0f b1 07       	lock cmpxchg %r8,(%rdi)
ffffffff8020e34b:	41 0f 94 c0          	sete   %r8b
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff8020e34f:	45 84 c0             	test   %r8b,%r8b
ffffffff8020e352:	0f 84 b8 02 00 00    	je     ffffffff8020e610 <_RME_Cpt_Add.isra.0+0x430>
ffffffff8020e358:	48 c7 47 20 01 00 00 	movq   $0x1,0x20(%rdi)
ffffffff8020e35f:	00 
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020e360:	48 83 e9 01          	sub    $0x1,%rcx
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
ffffffff8020e364:	48 89 77 10          	mov    %rsi,0x10(%rdi)
ffffffff8020e368:	49 8b 41 18          	mov    0x18(%r9),%rax
ffffffff8020e36c:	48 89 47 18          	mov    %rax,0x18(%rdi)
ffffffff8020e370:	49 8b 41 28          	mov    0x28(%r9),%rax
ffffffff8020e374:	48 89 47 28          	mov    %rax,0x28(%rdi)
ffffffff8020e378:	49 8b 41 30          	mov    0x30(%r9),%rax
ffffffff8020e37c:	48 89 47 30          	mov    %rax,0x30(%rdi)
ffffffff8020e380:	49 8b 41 38          	mov    0x38(%r9),%rax
ffffffff8020e384:	48 89 47 38          	mov    %rax,0x38(%rdi)
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020e388:	48 83 f9 01          	cmp    $0x1,%rcx
ffffffff8020e38c:	0f 86 a6 01 00 00    	jbe    ffffffff8020e538 <_RME_Cpt_Add.isra.0+0x358>
        Capobj_Dst->Head.Root_Ref=RME_CAP_CONV_ROOT(Capobj_Src,rme_ptr_t);
ffffffff8020e392:	49 8b 01             	mov    (%r9),%rax
ffffffff8020e395:	85 c0                	test   %eax,%eax
ffffffff8020e397:	74 04                	je     ffffffff8020e39d <_RME_Cpt_Add.isra.0+0x1bd>
ffffffff8020e399:	4d 8b 49 08          	mov    0x8(%r9),%r9
ffffffff8020e39d:	4c 89 4f 08          	mov    %r9,0x8(%rdi)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020e3a1:	b9 01 00 00 00       	mov    $0x1,%ecx
        RME_FETCH_ADD(&(((volatile struct RME_Cap_Struct*)
ffffffff8020e3a6:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff8020e3aa:	f0 48 0f c1 48 08    	lock xadd %rcx,0x8(%rax)
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff8020e3b0:	48 b8 00 00 00 00 00 	movabs $0xffff000000000000,%rax
ffffffff8020e3b7:	00 ff ff 
ffffffff8020e3ba:	48 21 c2             	and    %rax,%rdx
    return 0;
ffffffff8020e3bd:	31 c0                	xor    %eax,%eax
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff8020e3bf:	48 83 ca 01          	or     $0x1,%rdx
ffffffff8020e3c3:	48 89 17             	mov    %rdx,(%rdi)
}
ffffffff8020e3c6:	5b                   	pop    %rbx
ffffffff8020e3c7:	5d                   	pop    %rbp
ffffffff8020e3c8:	41 5c                	pop    %r12
ffffffff8020e3ca:	c3                   	ret
ffffffff8020e3cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020e3d0:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e3d3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020e3d7:	4c 39 d1             	cmp    %r10,%rcx
ffffffff8020e3da:	0f 83 20 02 00 00    	jae    ffffffff8020e600 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020e3e0:	48 bb 00 00 00 00 ff 	movabs $0xffff00000000,%rbx
ffffffff8020e3e7:	ff 00 00 
ffffffff8020e3ea:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020e3ee:	48 bd 00 00 00 00 02 	movabs $0x200000000,%rbp
ffffffff8020e3f5:	00 00 00 
ffffffff8020e3f8:	48 01 f9             	add    %rdi,%rcx
ffffffff8020e3fb:	4c 8b 19             	mov    (%rcx),%r11
ffffffff8020e3fe:	4d 89 dc             	mov    %r11,%r12
ffffffff8020e401:	49 21 dc             	and    %rbx,%r12
ffffffff8020e404:	49 39 ec             	cmp    %rbp,%r12
ffffffff8020e407:	74 37                	je     ffffffff8020e440 <_RME_Cpt_Add.isra.0+0x260>
ffffffff8020e409:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff8020e40d:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff8020e411:	0f 85 d9 01 00 00    	jne    ffffffff8020e5f0 <_RME_Cpt_Add.isra.0+0x410>
ffffffff8020e417:	4c 8b 59 28          	mov    0x28(%rcx),%r11
ffffffff8020e41b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e420:	4c 39 d8             	cmp    %r11,%rax
ffffffff8020e423:	0f 83 d7 01 00 00    	jae    ffffffff8020e600 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020e429:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e42d:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020e431:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020e434:	48 21 cb             	and    %rcx,%rbx
ffffffff8020e437:	48 39 eb             	cmp    %rbp,%rbx
ffffffff8020e43a:	0f 85 ee fd ff ff    	jne    ffffffff8020e22e <_RME_Cpt_Add.isra.0+0x4e>
ffffffff8020e440:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e447:	e9 7a ff ff ff       	jmp    ffffffff8020e3c6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020e44c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020e450:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020e453:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020e457:	4c 39 d1             	cmp    %r10,%rcx
ffffffff8020e45a:	0f 83 a0 01 00 00    	jae    ffffffff8020e600 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020e460:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020e467:	ff 00 00 
ffffffff8020e46a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020e46e:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020e475:	00 00 00 
ffffffff8020e478:	48 01 f9             	add    %rdi,%rcx
ffffffff8020e47b:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8020e47e:	48 89 fb             	mov    %rdi,%rbx
ffffffff8020e481:	4c 21 d3             	and    %r10,%rbx
ffffffff8020e484:	4c 39 db             	cmp    %r11,%rbx
ffffffff8020e487:	74 b7                	je     ffffffff8020e440 <_RME_Cpt_Add.isra.0+0x260>
ffffffff8020e489:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020e48d:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020e491:	0f 85 59 01 00 00    	jne    ffffffff8020e5f0 <_RME_Cpt_Add.isra.0+0x410>
ffffffff8020e497:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8020e49b:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020e4a2:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020e4a5:	0f 83 55 01 00 00    	jae    ffffffff8020e600 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020e4ab:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020e4af:	4c 03 41 18          	add    0x18(%rcx),%r8
ffffffff8020e4b3:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020e4b6:	49 21 ca             	and    %rcx,%r10
ffffffff8020e4b9:	4d 39 da             	cmp    %r11,%r10
ffffffff8020e4bc:	0f 85 ba fd ff ff    	jne    ffffffff8020e27c <_RME_Cpt_Add.isra.0+0x9c>
ffffffff8020e4c2:	e9 79 ff ff ff       	jmp    ffffffff8020e440 <_RME_Cpt_Add.isra.0+0x260>
ffffffff8020e4c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020e4ce:	00 00 
        if(RME_PGT_FLAG_HIGH(Flag)>RME_PGT_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020e4d0:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020e4d4:	49 89 f2             	mov    %rsi,%r10
ffffffff8020e4d7:	49 c1 ea 24          	shr    $0x24,%r10
ffffffff8020e4db:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020e4df:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020e4e2:	72 44                	jb     ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
        if(RME_PGT_FLAG_LOW(Flag)<RME_PGT_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020e4e4:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020e4e8:	49 89 f0             	mov    %rsi,%r8
ffffffff8020e4eb:	49 c1 e8 08          	shr    $0x8,%r8
ffffffff8020e4ef:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020e4f3:	41 81 e0 ff ff ff 0f 	and    $0xfffffff,%r8d
ffffffff8020e4fa:	25 ff ff ff 0f       	and    $0xfffffff,%eax
        if(RME_PGT_FLAG_HIGH(Flag)<RME_PGT_FLAG_LOW(Flag))
ffffffff8020e4ff:	49 39 c0             	cmp    %rax,%r8
ffffffff8020e502:	72 24                	jb     ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
ffffffff8020e504:	4d 39 c2             	cmp    %r8,%r10
ffffffff8020e507:	72 1f                	jb     ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
        if(RME_PGT_FLAG_FLAG(Flag)==0U)
ffffffff8020e509:	40 84 f6             	test   %sil,%sil
ffffffff8020e50c:	74 1a                	je     ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
        if((RME_PGT_FLAG_FLAG(Flag)&(~RME_PGT_FLAG_FLAG(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020e50e:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020e512:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e515:	48 f7 d0             	not    %rax
ffffffff8020e518:	48 21 f0             	and    %rsi,%rax
ffffffff8020e51b:	84 c0                	test   %al,%al
ffffffff8020e51d:	0f 84 0d fe ff ff    	je     ffffffff8020e330 <_RME_Cpt_Add.isra.0+0x150>
ffffffff8020e523:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020e528:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e52f:	e9 92 fe ff ff       	jmp    ffffffff8020e3c6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020e534:	0f 1f 40 00          	nopl   0x0(%rax)
        Capobj_Dst->Head.Root_Ref=0U;
ffffffff8020e538:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
ffffffff8020e53f:	00 
ffffffff8020e540:	e9 6b fe ff ff       	jmp    ffffffff8020e3b0 <_RME_Cpt_Add.isra.0+0x1d0>
ffffffff8020e545:	0f 1f 00             	nopl   (%rax)
        if(RME_KFN_FLAG_HIGH(Flag)>RME_KFN_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020e548:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020e54c:	49 89 f0             	mov    %rsi,%r8
ffffffff8020e54f:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff8020e553:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e557:	4c 39 c0             	cmp    %r8,%rax
ffffffff8020e55a:	72 cc                	jb     ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
        if(RME_KFN_FLAG_LOW(Flag)<RME_KFN_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020e55c:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020e560:	41 89 f2             	mov    %esi,%r10d
        if(RME_KFN_FLAG_HIGH(Flag)<RME_KFN_FLAG_LOW(Flag))
ffffffff8020e563:	39 f0                	cmp    %esi,%eax
ffffffff8020e565:	77 c1                	ja     ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
ffffffff8020e567:	4d 39 d0             	cmp    %r10,%r8
ffffffff8020e56a:	0f 83 c0 fd ff ff    	jae    ffffffff8020e330 <_RME_Cpt_Add.isra.0+0x150>
ffffffff8020e570:	eb b6                	jmp    ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
ffffffff8020e572:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020e578:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020e57d:	48 89 f2             	mov    %rsi,%rdx
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020e580:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
ffffffff8020e587:	ff ff ff 
ffffffff8020e58a:	48 21 f1             	and    %rsi,%rcx
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020e58d:	48 c1 e2 20          	shl    $0x20,%rdx
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020e591:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e595:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff8020e599:	48 09 c8             	or     %rcx,%rax
        if(Kom_End<=Kom_Begin)
ffffffff8020e59c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e59f:	73 87                	jae    ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020e5a1:	49 8b 49 28          	mov    0x28(%r9),%rcx
ffffffff8020e5a5:	48 01 ca             	add    %rcx,%rdx
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020e5a8:	49 8b 49 28          	mov    0x28(%r9),%rcx
ffffffff8020e5ac:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020e5af:	0f 82 73 ff ff ff    	jb     ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020e5b5:	49 8b 71 28          	mov    0x28(%r9),%rsi
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020e5b9:	49 8b 49 28          	mov    0x28(%r9),%rcx
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020e5bd:	48 01 f0             	add    %rsi,%rax
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020e5c0:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020e5c3:	0f 82 5f ff ff ff    	jb     ffffffff8020e528 <_RME_Cpt_Add.isra.0+0x348>
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020e5c9:	49 8b 49 28          	mov    0x28(%r9),%rcx
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020e5cd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020e5d4:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020e5d7:	0f 82 e9 fd ff ff    	jb     ffffffff8020e3c6 <_RME_Cpt_Add.isra.0+0x1e6>
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->End<(Kom_End-1U))
ffffffff8020e5dd:	49 8b 51 30          	mov    0x30(%r9),%rdx
            return RME_ERR_CPT_FLAG;
ffffffff8020e5e1:	e9 e0 fd ff ff       	jmp    ffffffff8020e3c6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020e5e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e5ed:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020e5f0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e5f7:	e9 ca fd ff ff       	jmp    ffffffff8020e3c6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020e5fc:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020e600:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e607:	e9 ba fd ff ff       	jmp    ffffffff8020e3c6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020e60c:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_CPT_EXIST;
ffffffff8020e610:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e617:	e9 aa fd ff ff       	jmp    ffffffff8020e3c6 <_RME_Cpt_Add.isra.0+0x1e6>
        return RME_ERR_CPT_NULL;
ffffffff8020e61c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020e623:	e9 9e fd ff ff       	jmp    ffffffff8020e3c6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020e628:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e62f:	00 

ffffffff8020e630 <RME_Int_Print>:
{
ffffffff8020e630:	f3 0f 1e fa          	endbr64
ffffffff8020e634:	41 57                	push   %r15
ffffffff8020e636:	41 56                	push   %r14
ffffffff8020e638:	41 55                	push   %r13
ffffffff8020e63a:	41 54                	push   %r12
ffffffff8020e63c:	53                   	push   %rbx
    if(Int==0)
ffffffff8020e63d:	48 85 ff             	test   %rdi,%rdi
ffffffff8020e640:	0f 84 ea 00 00 00    	je     ffffffff8020e730 <RME_Int_Print+0x100>
ffffffff8020e646:	49 89 fe             	mov    %rdi,%r14
    if(Int<0)
ffffffff8020e649:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        Num=0;
ffffffff8020e64f:	bf 00 00 00 00       	mov    $0x0,%edi
    if(Int<0)
ffffffff8020e654:	0f 88 b6 00 00 00    	js     ffffffff8020e710 <RME_Int_Print+0xe0>
        Iter/=10;
ffffffff8020e65a:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
ffffffff8020e661:	cc cc cc 
ffffffff8020e664:	49 f7 e6             	mul    %r14
        if(Iter!=0)
ffffffff8020e667:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020e66a:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff8020e66e:	0f 84 dc 00 00 00    	je     ffffffff8020e750 <RME_Int_Print+0x120>
        Count++;
ffffffff8020e674:	41 bf 01 00 00 00    	mov    $0x1,%r15d
    Div=1;
ffffffff8020e67a:	bb 01 00 00 00       	mov    $0x1,%ebx
        Iter/=10;
ffffffff8020e67f:	48 be 67 66 66 66 66 	movabs $0x6666666666666667,%rsi
ffffffff8020e686:	66 66 66 
ffffffff8020e689:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020e690:	48 89 c8             	mov    %rcx,%rax
            Div*=10;
ffffffff8020e693:	48 8d 1c 9b          	lea    (%rbx,%rbx,4),%rbx
        Count++;
ffffffff8020e697:	49 83 c7 01          	add    $0x1,%r15
        Iter/=10;
ffffffff8020e69b:	48 f7 ee             	imul   %rsi
ffffffff8020e69e:	48 89 c8             	mov    %rcx,%rax
            Div*=10;
ffffffff8020e6a1:	48 01 db             	add    %rbx,%rbx
        Iter/=10;
ffffffff8020e6a4:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020e6a8:	48 c1 fa 02          	sar    $0x2,%rdx
        if(Iter!=0)
ffffffff8020e6ac:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020e6af:	48 29 c1             	sub    %rax,%rcx
ffffffff8020e6b2:	75 dc                	jne    ffffffff8020e690 <RME_Int_Print+0x60>
        Div/=10;
ffffffff8020e6b4:	49 bc 67 66 66 66 66 	movabs $0x6666666666666667,%r12
ffffffff8020e6bb:	66 66 66 
    Num+=Count;
ffffffff8020e6be:	4e 8d 2c 3f          	lea    (%rdi,%r15,1),%r13
    while(Count>0)
ffffffff8020e6c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Count--;
ffffffff8020e6c8:	4c 89 f0             	mov    %r14,%rax
ffffffff8020e6cb:	49 83 ef 01          	sub    $0x1,%r15
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020e6cf:	48 99                	cqto
ffffffff8020e6d1:	48 f7 fb             	idiv   %rbx
ffffffff8020e6d4:	83 c0 30             	add    $0x30,%eax
ffffffff8020e6d7:	49 89 d6             	mov    %rdx,%r14
ffffffff8020e6da:	0f be f8             	movsbl %al,%edi
ffffffff8020e6dd:	e8 ee af 00 00       	call   ffffffff802196d0 <__RME_Putchar>
        Div/=10;
ffffffff8020e6e2:	48 89 d8             	mov    %rbx,%rax
ffffffff8020e6e5:	49 f7 ec             	imul   %r12
ffffffff8020e6e8:	48 89 d8             	mov    %rbx,%rax
ffffffff8020e6eb:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020e6ef:	48 c1 fa 02          	sar    $0x2,%rdx
ffffffff8020e6f3:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020e6f6:	48 29 c3             	sub    %rax,%rbx
    while(Count>0)
ffffffff8020e6f9:	4d 85 ff             	test   %r15,%r15
ffffffff8020e6fc:	75 ca                	jne    ffffffff8020e6c8 <RME_Int_Print+0x98>
}
ffffffff8020e6fe:	5b                   	pop    %rbx
ffffffff8020e6ff:	4c 89 e8             	mov    %r13,%rax
ffffffff8020e702:	41 5c                	pop    %r12
ffffffff8020e704:	41 5d                	pop    %r13
ffffffff8020e706:	41 5e                	pop    %r14
ffffffff8020e708:	41 5f                	pop    %r15
ffffffff8020e70a:	c3                   	ret
ffffffff8020e70b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar('-');
ffffffff8020e710:	bf 2d 00 00 00       	mov    $0x2d,%edi
        Abs=-Int;
ffffffff8020e715:	49 f7 de             	neg    %r14
ffffffff8020e718:	41 bd 02 00 00 00    	mov    $0x2,%r13d
        __RME_Putchar('-');
ffffffff8020e71e:	e8 ad af 00 00       	call   ffffffff802196d0 <__RME_Putchar>
        Num=1;
ffffffff8020e723:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff8020e728:	e9 2d ff ff ff       	jmp    ffffffff8020e65a <RME_Int_Print+0x2a>
ffffffff8020e72d:	0f 1f 00             	nopl   (%rax)
        return 1;
ffffffff8020e730:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        __RME_Putchar('0');
ffffffff8020e736:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020e73b:	e8 90 af 00 00       	call   ffffffff802196d0 <__RME_Putchar>
}
ffffffff8020e740:	5b                   	pop    %rbx
ffffffff8020e741:	4c 89 e8             	mov    %r13,%rax
ffffffff8020e744:	41 5c                	pop    %r12
ffffffff8020e746:	41 5d                	pop    %r13
ffffffff8020e748:	41 5e                	pop    %r14
ffffffff8020e74a:	41 5f                	pop    %r15
ffffffff8020e74c:	c3                   	ret
ffffffff8020e74d:	0f 1f 00             	nopl   (%rax)
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020e750:	41 8d 7e 30          	lea    0x30(%r14),%edi
ffffffff8020e754:	40 0f be ff          	movsbl %dil,%edi
ffffffff8020e758:	e8 73 af 00 00       	call   ffffffff802196d0 <__RME_Putchar>
    while(Count>0)
ffffffff8020e75d:	eb 9f                	jmp    ffffffff8020e6fe <RME_Int_Print+0xce>
ffffffff8020e75f:	90                   	nop

ffffffff8020e760 <RME_Hex_Print>:
{
ffffffff8020e760:	f3 0f 1e fa          	endbr64
ffffffff8020e764:	41 54                	push   %r12
ffffffff8020e766:	55                   	push   %rbp
ffffffff8020e767:	53                   	push   %rbx
    if(Uint==0U)
ffffffff8020e768:	48 85 ff             	test   %rdi,%rdi
ffffffff8020e76b:	0f 84 7f 00 00 00    	je     ffffffff8020e7f0 <RME_Hex_Print+0x90>
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020e771:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020e774:	48 89 fd             	mov    %rdi,%rbp
    Iter=Uint;
ffffffff8020e777:	48 89 f8             	mov    %rdi,%rax
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020e77a:	41 bc 10 00 00 00    	mov    $0x10,%r12d
ffffffff8020e780:	48 c1 ea 3c          	shr    $0x3c,%rdx
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020e784:	bb 10 00 00 00       	mov    $0x10,%ebx
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020e789:	75 32                	jne    ffffffff8020e7bd <RME_Hex_Print+0x5d>
ffffffff8020e78b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        Iter<<=4;
ffffffff8020e790:	48 c1 e0 04          	shl    $0x4,%rax
        Count++;
ffffffff8020e794:	48 83 c2 01          	add    $0x1,%rdx
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020e798:	48 89 c6             	mov    %rax,%rsi
ffffffff8020e79b:	48 c1 ee 3c          	shr    $0x3c,%rsi
ffffffff8020e79f:	74 ef                	je     ffffffff8020e790 <RME_Hex_Print+0x30>
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020e7a1:	bb 10 00 00 00       	mov    $0x10,%ebx
    while(Count>0U)
ffffffff8020e7a6:	48 29 d3             	sub    %rdx,%rbx
ffffffff8020e7a9:	74 65                	je     ffffffff8020e810 <RME_Hex_Print+0xb0>
    return (rme_cnt_t)Num;
ffffffff8020e7ab:	49 89 dc             	mov    %rbx,%r12
ffffffff8020e7ae:	eb 0d                	jmp    ffffffff8020e7bd <RME_Hex_Print+0x5d>
            __RME_Putchar((rme_s8_t)Iter+'0');
ffffffff8020e7b0:	8d 78 30             	lea    0x30(%rax),%edi
ffffffff8020e7b3:	e8 18 af 00 00       	call   ffffffff802196d0 <__RME_Putchar>
    while(Count>0U)
ffffffff8020e7b8:	48 85 db             	test   %rbx,%rbx
ffffffff8020e7bb:	74 27                	je     ffffffff8020e7e4 <RME_Hex_Print+0x84>
        Count--;
ffffffff8020e7bd:	48 83 eb 01          	sub    $0x1,%rbx
        Iter=(Uint>>(Count<<2U))&0x0FU;
ffffffff8020e7c1:	48 89 e8             	mov    %rbp,%rax
ffffffff8020e7c4:	8d 0c 9d 00 00 00 00 	lea    0x0(,%rbx,4),%ecx
ffffffff8020e7cb:	48 d3 e8             	shr    %cl,%rax
ffffffff8020e7ce:	83 e0 0f             	and    $0xf,%eax
        if(Iter<10U)
ffffffff8020e7d1:	48 83 f8 09          	cmp    $0x9,%rax
ffffffff8020e7d5:	76 d9                	jbe    ffffffff8020e7b0 <RME_Hex_Print+0x50>
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
ffffffff8020e7d7:	8d 78 37             	lea    0x37(%rax),%edi
ffffffff8020e7da:	e8 f1 ae 00 00       	call   ffffffff802196d0 <__RME_Putchar>
    while(Count>0U)
ffffffff8020e7df:	48 85 db             	test   %rbx,%rbx
ffffffff8020e7e2:	75 d9                	jne    ffffffff8020e7bd <RME_Hex_Print+0x5d>
}
ffffffff8020e7e4:	4c 89 e0             	mov    %r12,%rax
ffffffff8020e7e7:	5b                   	pop    %rbx
ffffffff8020e7e8:	5d                   	pop    %rbp
ffffffff8020e7e9:	41 5c                	pop    %r12
ffffffff8020e7eb:	c3                   	ret
ffffffff8020e7ec:	0f 1f 40 00          	nopl   0x0(%rax)
        return 1;
ffffffff8020e7f0:	41 bc 01 00 00 00    	mov    $0x1,%r12d
        __RME_Putchar('0');
ffffffff8020e7f6:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020e7fb:	e8 d0 ae 00 00       	call   ffffffff802196d0 <__RME_Putchar>
}
ffffffff8020e800:	4c 89 e0             	mov    %r12,%rax
ffffffff8020e803:	5b                   	pop    %rbx
ffffffff8020e804:	5d                   	pop    %rbp
ffffffff8020e805:	41 5c                	pop    %r12
ffffffff8020e807:	c3                   	ret
ffffffff8020e808:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e80f:	00 
    while(Count>0U)
ffffffff8020e810:	45 31 e4             	xor    %r12d,%r12d
    return (rme_cnt_t)Num;
ffffffff8020e813:	eb cf                	jmp    ffffffff8020e7e4 <RME_Hex_Print+0x84>
ffffffff8020e815:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e81c:	00 00 00 00 

ffffffff8020e820 <RME_Str_Print>:
{
ffffffff8020e820:	f3 0f 1e fa          	endbr64
ffffffff8020e824:	55                   	push   %rbp
ffffffff8020e825:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020e828:	53                   	push   %rbx
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e829:	31 db                	xor    %ebx,%ebx
{
ffffffff8020e82b:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020e82f:	eb 19                	jmp    ffffffff8020e84a <RME_Str_Print+0x2a>
ffffffff8020e831:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count++]);
ffffffff8020e838:	e8 93 ae 00 00       	call   ffffffff802196d0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e83d:	48 83 c3 02          	add    $0x2,%rbx
ffffffff8020e841:	48 81 fb 00 01 00 00 	cmp    $0x100,%rbx
ffffffff8020e848:	74 0a                	je     ffffffff8020e854 <RME_Str_Print+0x34>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e84a:	0f be 7c 1d 00       	movsbl 0x0(%rbp,%rbx,1),%edi
ffffffff8020e84f:	40 84 ff             	test   %dil,%dil
ffffffff8020e852:	75 e4                	jne    ffffffff8020e838 <RME_Str_Print+0x18>
}
ffffffff8020e854:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020e858:	48 89 d8             	mov    %rbx,%rax
ffffffff8020e85b:	5b                   	pop    %rbx
ffffffff8020e85c:	5d                   	pop    %rbp
ffffffff8020e85d:	c3                   	ret
ffffffff8020e85e:	66 90                	xchg   %ax,%ax

ffffffff8020e860 <RME_Log>:
{
ffffffff8020e860:	f3 0f 1e fa          	endbr64
ffffffff8020e864:	41 55                	push   %r13
ffffffff8020e866:	49 89 fd             	mov    %rdi,%r13
    RME_DBG_S("\r\n***\r\nKernel panic - not syncing :\r\n"); \
ffffffff8020e869:	48 8d 3d 80 e8 00 00 	lea    0xe880(%rip),%rdi        # ffffffff8021d0f0 <UVM_Init+0x1650>
{
ffffffff8020e870:	41 54                	push   %r12
ffffffff8020e872:	49 89 f4             	mov    %rsi,%r12
ffffffff8020e875:	55                   	push   %rbp
ffffffff8020e876:	48 89 d5             	mov    %rdx,%rbp
ffffffff8020e879:	53                   	push   %rbx
ffffffff8020e87a:	48 89 cb             	mov    %rcx,%rbx
ffffffff8020e87d:	48 83 ec 08          	sub    $0x8,%rsp
    RME_DBG_S("\r\n***\r\nKernel panic - not syncing :\r\n"); \
ffffffff8020e881:	e8 9a ff ff ff       	call   ffffffff8020e820 <RME_Str_Print>
    RME_DBG_S(File); \
ffffffff8020e886:	4c 89 ef             	mov    %r13,%rdi
ffffffff8020e889:	e8 92 ff ff ff       	call   ffffffff8020e820 <RME_Str_Print>
    RME_DBG_S(" , Line "); \
ffffffff8020e88e:	48 8d 3d a2 e8 00 00 	lea    0xe8a2(%rip),%rdi        # ffffffff8021d137 <UVM_Init+0x1697>
ffffffff8020e895:	e8 86 ff ff ff       	call   ffffffff8020e820 <RME_Str_Print>
    RME_DBG_I(Line); \
ffffffff8020e89a:	4c 89 e7             	mov    %r12,%rdi
    RME_DBG_S("\r\n"); \
ffffffff8020e89d:	4c 8d 25 9c e8 00 00 	lea    0xe89c(%rip),%r12        # ffffffff8021d140 <UVM_Init+0x16a0>
    RME_DBG_I(Line); \
ffffffff8020e8a4:	e8 87 fd ff ff       	call   ffffffff8020e630 <RME_Int_Print>
    RME_DBG_S("\r\n"); \
ffffffff8020e8a9:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020e8ac:	e8 6f ff ff ff       	call   ffffffff8020e820 <RME_Str_Print>
    RME_DBG_S(Date); \
ffffffff8020e8b1:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020e8b4:	e8 67 ff ff ff       	call   ffffffff8020e820 <RME_Str_Print>
    RME_DBG_S(" , "); \
ffffffff8020e8b9:	48 8d 3d 83 e8 00 00 	lea    0xe883(%rip),%rdi        # ffffffff8021d143 <UVM_Init+0x16a3>
ffffffff8020e8c0:	e8 5b ff ff ff       	call   ffffffff8020e820 <RME_Str_Print>
    RME_DBG_S(Time); \
ffffffff8020e8c5:	48 89 df             	mov    %rbx,%rdi
ffffffff8020e8c8:	e8 53 ff ff ff       	call   ffffffff8020e820 <RME_Str_Print>
}
ffffffff8020e8cd:	48 83 c4 08          	add    $0x8,%rsp
    RME_DBG_S("\r\n"); \
ffffffff8020e8d1:	4c 89 e7             	mov    %r12,%rdi
}
ffffffff8020e8d4:	5b                   	pop    %rbx
ffffffff8020e8d5:	5d                   	pop    %rbp
ffffffff8020e8d6:	41 5c                	pop    %r12
ffffffff8020e8d8:	41 5d                	pop    %r13
    RME_DBG_S("\r\n"); \
ffffffff8020e8da:	e9 41 ff ff ff       	jmp    ffffffff8020e820 <RME_Str_Print>
ffffffff8020e8df:	90                   	nop

ffffffff8020e8e0 <_RME_MSB_Generic>:
{
ffffffff8020e8e0:	f3 0f 1e fa          	endbr64
    if(Value>=RME_POW2(32U))
ffffffff8020e8e4:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e8e7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e8eb:	74 33                	je     ffffffff8020e920 <_RME_MSB_Generic+0x40>
        if(Value>=RME_POW2(48U))
ffffffff8020e8ed:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e8f0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e8f4:	0f 84 7e 00 00 00    	je     ffffffff8020e978 <_RME_MSB_Generic+0x98>
            if(Value>=RME_POW2(56U))
ffffffff8020e8fa:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffffff,%rax
ffffffff8020e901:	ff ff 00 
ffffffff8020e904:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e907:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e909:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e90c:	83 c1 30             	add    $0x30,%ecx
ffffffff8020e90f:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e912:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e915:	83 e2 08             	and    $0x8,%edx
ffffffff8020e918:	48 83 c2 30          	add    $0x30,%rdx
ffffffff8020e91c:	eb 1d                	jmp    ffffffff8020e93b <_RME_MSB_Generic+0x5b>
ffffffff8020e91e:	66 90                	xchg   %ax,%ax
        if(Value>=RME_POW2(16U))
ffffffff8020e920:	48 81 ff ff ff 00 00 	cmp    $0xffff,%rdi
ffffffff8020e927:	77 27                	ja     ffffffff8020e950 <_RME_MSB_Generic+0x70>
            if(Value>=RME_POW2(8U))
ffffffff8020e929:	31 d2                	xor    %edx,%edx
ffffffff8020e92b:	48 81 ff ff 00 00 00 	cmp    $0xff,%rdi
ffffffff8020e932:	0f 97 c2             	seta   %dl
ffffffff8020e935:	48 c1 e2 03          	shl    $0x3,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e939:	89 d1                	mov    %edx,%ecx
ffffffff8020e93b:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e93e:	48 8d 05 db e9 00 00 	lea    0xe9db(%rip),%rax        # ffffffff8021d320 <Table.1>
ffffffff8020e945:	0f b6 04 38          	movzbl (%rax,%rdi,1),%eax
ffffffff8020e949:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e94c:	c3                   	ret
ffffffff8020e94d:	0f 1f 00             	nopl   (%rax)
            if(Value>=RME_POW2(24U))
ffffffff8020e950:	48 81 ff 00 00 00 01 	cmp    $0x1000000,%rdi
ffffffff8020e957:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e959:	83 e1 f8             	and    $0xfffffff8,%ecx
ffffffff8020e95c:	83 c1 18             	add    $0x18,%ecx
ffffffff8020e95f:	48 81 ff 00 00 00 01 	cmp    $0x1000000,%rdi
ffffffff8020e966:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e969:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
ffffffff8020e96d:	48 83 c2 18          	add    $0x18,%rdx
ffffffff8020e971:	eb c8                	jmp    ffffffff8020e93b <_RME_MSB_Generic+0x5b>
ffffffff8020e973:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            if(Value>=RME_POW2(40U))
ffffffff8020e978:	48 b8 ff ff ff ff ff 	movabs $0xffffffffff,%rax
ffffffff8020e97f:	00 00 00 
ffffffff8020e982:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e985:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e987:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e98a:	83 c1 20             	add    $0x20,%ecx
ffffffff8020e98d:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e990:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e993:	83 e2 08             	and    $0x8,%edx
ffffffff8020e996:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8020e99a:	eb 9f                	jmp    ffffffff8020e93b <_RME_MSB_Generic+0x5b>
ffffffff8020e99c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e9a0 <_RME_LSB_Generic>:
{
ffffffff8020e9a0:	f3 0f 1e fa          	endbr64
    if((Value<<32U)==0U)
ffffffff8020e9a4:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e9a7:	48 c1 e0 20          	shl    $0x20,%rax
        if((Value<<16U)==0U)
ffffffff8020e9ab:	48 89 f8             	mov    %rdi,%rax
    if((Value<<32U)==0U)
ffffffff8020e9ae:	75 30                	jne    ffffffff8020e9e0 <_RME_LSB_Generic+0x40>
        if((Value<<16U)==0U)
ffffffff8020e9b0:	48 c1 e0 10          	shl    $0x10,%rax
            if((Value<<8U)==0U)
ffffffff8020e9b4:	48 89 f8             	mov    %rdi,%rax
        if((Value<<16U)==0U)
ffffffff8020e9b7:	75 77                	jne    ffffffff8020ea30 <_RME_LSB_Generic+0x90>
            if((Value<<8U)==0U)
ffffffff8020e9b9:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8020e9bd:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e9c1:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e9c3:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e9c6:	83 c1 30             	add    $0x30,%ecx
ffffffff8020e9c9:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e9cd:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e9d0:	83 e2 08             	and    $0x8,%edx
ffffffff8020e9d3:	48 83 c2 30          	add    $0x30,%rdx
ffffffff8020e9d7:	eb 1f                	jmp    ffffffff8020e9f8 <_RME_LSB_Generic+0x58>
ffffffff8020e9d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if((Value<<48U)==0U)
ffffffff8020e9e0:	48 c1 e0 30          	shl    $0x30,%rax
            if((Value<<40U)==0U)
ffffffff8020e9e4:	48 89 f8             	mov    %rdi,%rax
        if((Value<<48U)==0U)
ffffffff8020e9e7:	74 27                	je     ffffffff8020ea10 <_RME_LSB_Generic+0x70>
            if((Value<<56U)==0U)
ffffffff8020e9e9:	31 d2                	xor    %edx,%edx
ffffffff8020e9eb:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff8020e9ef:	0f 94 c2             	sete   %dl
ffffffff8020e9f2:	48 c1 e2 03          	shl    $0x3,%rdx
    return Table[(rme_u8_t)(Value>>Bit)]+Bit;
ffffffff8020e9f6:	89 d1                	mov    %edx,%ecx
ffffffff8020e9f8:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e9fb:	48 8d 05 1e e8 00 00 	lea    0xe81e(%rip),%rax        # ffffffff8021d220 <Table.0>
ffffffff8020ea02:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff8020ea06:	0f b6 04 38          	movzbl (%rax,%rdi,1),%eax
ffffffff8020ea0a:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020ea0d:	c3                   	ret
ffffffff8020ea0e:	66 90                	xchg   %ax,%ax
            if((Value<<40U)==0U)
ffffffff8020ea10:	48 c1 e0 28          	shl    $0x28,%rax
ffffffff8020ea14:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020ea18:	19 c9                	sbb    %ecx,%ecx
ffffffff8020ea1a:	83 e1 08             	and    $0x8,%ecx
ffffffff8020ea1d:	83 c1 10             	add    $0x10,%ecx
ffffffff8020ea20:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020ea24:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020ea27:	83 e2 08             	and    $0x8,%edx
ffffffff8020ea2a:	48 83 c2 10          	add    $0x10,%rdx
ffffffff8020ea2e:	eb c8                	jmp    ffffffff8020e9f8 <_RME_LSB_Generic+0x58>
            if((Value<<24U)==0U)
ffffffff8020ea30:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff8020ea34:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020ea38:	19 c9                	sbb    %ecx,%ecx
ffffffff8020ea3a:	83 e1 08             	and    $0x8,%ecx
ffffffff8020ea3d:	83 c1 20             	add    $0x20,%ecx
ffffffff8020ea40:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020ea44:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020ea47:	83 e2 08             	and    $0x8,%edx
ffffffff8020ea4a:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8020ea4e:	eb a8                	jmp    ffffffff8020e9f8 <_RME_LSB_Generic+0x58>

ffffffff8020ea50 <_RME_Comp_Swap_Single>:
{
ffffffff8020ea50:	f3 0f 1e fa          	endbr64
    if(*Ptr==Old)
ffffffff8020ea54:	48 8b 0f             	mov    (%rdi),%rcx
    return 0U;
ffffffff8020ea57:	31 c0                	xor    %eax,%eax
    if(*Ptr==Old)
ffffffff8020ea59:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020ea5c:	74 02                	je     ffffffff8020ea60 <_RME_Comp_Swap_Single+0x10>
}
ffffffff8020ea5e:	c3                   	ret
ffffffff8020ea5f:	90                   	nop
        *Ptr=New;
ffffffff8020ea60:	48 89 17             	mov    %rdx,(%rdi)
        return 1U;
ffffffff8020ea63:	b8 01 00 00 00       	mov    $0x1,%eax
}
ffffffff8020ea68:	c3                   	ret
ffffffff8020ea69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8020ea70 <_RME_Fetch_Add_Single>:
{
ffffffff8020ea70:	f3 0f 1e fa          	endbr64
    Old=(rme_cnt_t)(*Ptr);
ffffffff8020ea74:	48 8b 07             	mov    (%rdi),%rax
    *Ptr=(rme_ptr_t)(Old+Addend);
ffffffff8020ea77:	48 01 c6             	add    %rax,%rsi
ffffffff8020ea7a:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020ea7d:	c3                   	ret
ffffffff8020ea7e:	66 90                	xchg   %ax,%ax

ffffffff8020ea80 <_RME_Fetch_And_Single>:
{
ffffffff8020ea80:	f3 0f 1e fa          	endbr64
    Old=*Ptr;
ffffffff8020ea84:	48 8b 07             	mov    (%rdi),%rax
    *Ptr=Old&Operand;
ffffffff8020ea87:	48 21 c6             	and    %rax,%rsi
ffffffff8020ea8a:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020ea8d:	c3                   	ret
ffffffff8020ea8e:	66 90                	xchg   %ax,%ax

ffffffff8020ea90 <_RME_List_Crt>:
{
ffffffff8020ea90:	f3 0f 1e fa          	endbr64
    Head->Next=Head;
ffffffff8020ea94:	66 48 0f 6e c7       	movq   %rdi,%xmm0
ffffffff8020ea99:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
ffffffff8020ea9d:	0f 11 07             	movups %xmm0,(%rdi)
}
ffffffff8020eaa0:	c3                   	ret
ffffffff8020eaa1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020eaa8:	00 00 00 00 
ffffffff8020eaac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020eab0 <_RME_List_Del>:
{
ffffffff8020eab0:	f3 0f 1e fa          	endbr64
    Next->Prev=Prev;
ffffffff8020eab4:	48 89 7e 08          	mov    %rdi,0x8(%rsi)
    Prev->Next=Next;
ffffffff8020eab8:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020eabb:	c3                   	ret
ffffffff8020eabc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020eac0 <_RME_Inv_Ret>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Ret(struct RME_Reg_Struct* Reg,
                              rme_ptr_t Retval,
                              rme_ptr_t Is_Exc)
{
ffffffff8020eac0:	41 57                	push   %r15
ffffffff8020eac2:	41 56                	push   %r14
ffffffff8020eac4:	49 89 f6             	mov    %rsi,%r14
ffffffff8020eac7:	41 55                	push   %r13
ffffffff8020eac9:	49 89 d5             	mov    %rdx,%r13
ffffffff8020eacc:	41 54                	push   %r12
ffffffff8020eace:	49 89 fc             	mov    %rdi,%r12
ffffffff8020ead1:	55                   	push   %rbp
ffffffff8020ead2:	53                   	push   %rbx
ffffffff8020ead3:	48 83 ec 08          	sub    $0x8,%rsp
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;

    /* See if we can return; If we can, get the structure */
    Thread=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020ead7:	e8 63 dd ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
ffffffff8020eadc:	48 8b 68 08          	mov    0x8(%rax),%rbp
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8020eae0:	48 8b 9d 98 00 00 00 	mov    0x98(%rbp),%rbx
    if(RME_UNLIKELY(Invocation==RME_NULL))
ffffffff8020eae7:	48 85 db             	test   %rbx,%rbx
ffffffff8020eaea:	0f 84 f2 00 00 00    	je     ffffffff8020ebe2 <_RME_Inv_Ret+0x122>
ffffffff8020eaf0:	4c 8d bd 98 00 00 00 	lea    0x98(%rbp),%r15
ffffffff8020eaf7:	4c 39 fb             	cmp    %r15,%rbx
ffffffff8020eafa:	0f 84 e2 00 00 00    	je     ffffffff8020ebe2 <_RME_Inv_Ret+0x122>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if this port allows return-on-fault */
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8020eb00:	4d 85 ed             	test   %r13,%r13
ffffffff8020eb03:	0f 84 97 00 00 00    	je     ffffffff8020eba0 <_RME_Inv_Ret+0xe0>
ffffffff8020eb09:	48 83 7b 30 00       	cmpq   $0x0,0x30(%rbx)
ffffffff8020eb0e:	0f 84 d7 00 00 00    	je     ffffffff8020ebeb <_RME_Inv_Ret+0x12b>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Pop it from the stack */
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8020eb14:	48 8b 33             	mov    (%rbx),%rsi
ffffffff8020eb17:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
ffffffff8020eb1b:	e8 90 ff ff ff       	call   ffffffff8020eab0 <_RME_List_Del>
    /* Decrease invocation depth - no atomic operation needed */
    Thread->Ctx.Invstk_Depth--;
ffffffff8020eb20:	48 83 ad a8 00 00 00 	subq   $0x1,0xa8(%rbp)
ffffffff8020eb27:	01 

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well. */
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020eb28:	48 8d 73 38          	lea    0x38(%rbx),%rsi
ffffffff8020eb2c:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020eb2f:	e8 8c bf 00 00       	call   ffffffff8021aac0 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8020eb34:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020eb37:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020eb3a:	e8 71 ab 00 00       	call   ffffffff802196b0 <__RME_Inv_Retval_Set>

    /* We have successfully returned, set the invocation as inactive. We need
     * a barrier here to avoid potential destruction of the return value. */
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8020eb3f:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff8020eb46:	00 
    /* Decide the system call's return value */
    if(RME_UNLIKELY(Is_Exc!=0U))
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
ffffffff8020eb47:	48 c7 c6 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rsi
ffffffff8020eb4e:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020eb51:	e8 ea ce 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>

        __RME_Svc_Retval_Set(Reg,0);
    }

    /* Same assumptions as in invocation activation */
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8020eb56:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Invocation!=RME_NULL)
ffffffff8020eb5d:	48 85 c0             	test   %rax,%rax
ffffffff8020eb60:	74 26                	je     ffffffff8020eb88 <_RME_Inv_Ret+0xc8>
ffffffff8020eb62:	49 39 c7             	cmp    %rax,%r15
ffffffff8020eb65:	74 21                	je     ffffffff8020eb88 <_RME_Inv_Ret+0xc8>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8020eb67:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020eb6b:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020eb6f:	e8 bc c1 00 00       	call   ffffffff8021ad30 <__RME_Pgt_Set>
        RME_ASSERT(RME_CAP_IS_ROOT(Thread->Sched.Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
    }
    
    return 0;
ffffffff8020eb74:	31 c0                	xor    %eax,%eax
}
ffffffff8020eb76:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020eb7a:	5b                   	pop    %rbx
ffffffff8020eb7b:	5d                   	pop    %rbp
ffffffff8020eb7c:	41 5c                	pop    %r12
ffffffff8020eb7e:	41 5d                	pop    %r13
ffffffff8020eb80:	41 5e                	pop    %r14
ffffffff8020eb82:	41 5f                	pop    %r15
ffffffff8020eb84:	c3                   	ret
ffffffff8020eb85:	0f 1f 00             	nopl   (%rax)
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
ffffffff8020eb88:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff8020eb8c:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020eb90:	e8 9b c1 00 00       	call   ffffffff8021ad30 <__RME_Pgt_Set>
ffffffff8020eb95:	eb dd                	jmp    ffffffff8020eb74 <_RME_Inv_Ret+0xb4>
ffffffff8020eb97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020eb9e:	00 00 
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8020eba0:	48 8b 33             	mov    (%rbx),%rsi
ffffffff8020eba3:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
ffffffff8020eba7:	e8 04 ff ff ff       	call   ffffffff8020eab0 <_RME_List_Del>
    Thread->Ctx.Invstk_Depth--;
ffffffff8020ebac:	48 83 ad a8 00 00 00 	subq   $0x1,0xa8(%rbp)
ffffffff8020ebb3:	01 
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020ebb4:	48 8d 73 38          	lea    0x38(%rbx),%rsi
ffffffff8020ebb8:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020ebbb:	e8 00 bf 00 00       	call   ffffffff8021aac0 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8020ebc0:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020ebc3:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020ebc6:	e8 e5 aa 00 00       	call   ffffffff802196b0 <__RME_Inv_Retval_Set>
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8020ebcb:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff8020ebd2:	00 
        __RME_Svc_Retval_Set(Reg,0);
ffffffff8020ebd3:	31 f6                	xor    %esi,%esi
ffffffff8020ebd5:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020ebd8:	e8 63 ce 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
ffffffff8020ebdd:	e9 74 ff ff ff       	jmp    ffffffff8020eb56 <_RME_Inv_Ret+0x96>
        return RME_ERR_SIV_EMPTY;
ffffffff8020ebe2:	48 c7 c0 d0 fe ff ff 	mov    $0xfffffffffffffed0,%rax
ffffffff8020ebe9:	eb 8b                	jmp    ffffffff8020eb76 <_RME_Inv_Ret+0xb6>
        return RME_ERR_SIV_FAULT;
ffffffff8020ebeb:	48 c7 c0 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rax
ffffffff8020ebf2:	e9 7f ff ff ff       	jmp    ffffffff8020eb76 <_RME_Inv_Ret+0xb6>
ffffffff8020ebf7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020ebfe:	00 00 

ffffffff8020ec00 <_RME_Run_Del>:
{
ffffffff8020ec00:	55                   	push   %rbp
ffffffff8020ec01:	53                   	push   %rbx
ffffffff8020ec02:	48 83 ec 08          	sub    $0x8,%rsp
    Prio=Thd->Sched.Prio;
ffffffff8020ec06:	48 8b 5f 40          	mov    0x40(%rdi),%rbx
    Local=Thd->Sched.Local;
ffffffff8020ec0a:	48 8b 6f 28          	mov    0x28(%rdi),%rbp
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8020ec0e:	48 8b 37             	mov    (%rdi),%rsi
ffffffff8020ec11:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
ffffffff8020ec15:	e8 96 fe ff ff       	call   ffffffff8020eab0 <_RME_List_Del>
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff8020ec1a:	48 89 da             	mov    %rbx,%rdx
ffffffff8020ec1d:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff8020ec21:	48 8d 44 15 28       	lea    0x28(%rbp,%rdx,1),%rax
ffffffff8020ec26:	48 39 44 2a 28       	cmp    %rax,0x28(%rdx,%rbp,1)
ffffffff8020ec2b:	74 0b                	je     ffffffff8020ec38 <_RME_Run_Del+0x38>
}
ffffffff8020ec2d:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020ec31:	5b                   	pop    %rbx
ffffffff8020ec32:	5d                   	pop    %rbp
ffffffff8020ec33:	c3                   	ret
ffffffff8020ec34:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff8020ec38:	48 89 da             	mov    %rbx,%rdx
ffffffff8020ec3b:	89 d9                	mov    %ebx,%ecx
ffffffff8020ec3d:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020ec42:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff8020ec46:	48 d3 e0             	shl    %cl,%rax
ffffffff8020ec49:	48 f7 d0             	not    %rax
ffffffff8020ec4c:	48 21 44 d5 20       	and    %rax,0x20(%rbp,%rdx,8)
}
ffffffff8020ec51:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020ec55:	5b                   	pop    %rbx
ffffffff8020ec56:	5d                   	pop    %rbp
ffffffff8020ec57:	c3                   	ret
ffffffff8020ec58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020ec5f:	00 

ffffffff8020ec60 <_RME_List_Ins>:
{
ffffffff8020ec60:	f3 0f 1e fa          	endbr64
    Next->Prev=New;
ffffffff8020ec64:	48 89 7a 08          	mov    %rdi,0x8(%rdx)
    New->Next=Next;
ffffffff8020ec68:	48 89 17             	mov    %rdx,(%rdi)
    New->Prev=Prev;
ffffffff8020ec6b:	48 89 77 08          	mov    %rsi,0x8(%rdi)
    Prev->Next=New;
ffffffff8020ec6f:	48 89 3e             	mov    %rdi,(%rsi)
}
ffffffff8020ec72:	c3                   	ret
ffffffff8020ec73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020ec7a:	00 00 00 00 
ffffffff8020ec7e:	66 90                	xchg   %ax,%ax

ffffffff8020ec80 <_RME_Run_Ins>:
{
ffffffff8020ec80:	55                   	push   %rbp
ffffffff8020ec81:	53                   	push   %rbx
ffffffff8020ec82:	48 83 ec 08          	sub    $0x8,%rsp
    Prio=Thd->Sched.Prio;
ffffffff8020ec86:	48 8b 5f 40          	mov    0x40(%rdi),%rbx
    Local=Thd->Sched.Local;
ffffffff8020ec8a:	48 8b 6f 28          	mov    0x28(%rdi),%rbp
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8020ec8e:	48 89 d8             	mov    %rbx,%rax
ffffffff8020ec91:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8020ec95:	48 8d 54 05 28       	lea    0x28(%rbp,%rax,1),%rdx
ffffffff8020ec9a:	48 89 d8             	mov    %rbx,%rax
ffffffff8020ec9d:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8020eca1:	48 8b 74 28 30       	mov    0x30(%rax,%rbp,1),%rsi
ffffffff8020eca6:	e8 b5 ff ff ff       	call   ffffffff8020ec60 <_RME_List_Ins>
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020ecab:	48 89 da             	mov    %rbx,%rdx
ffffffff8020ecae:	89 d9                	mov    %ebx,%ecx
ffffffff8020ecb0:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020ecb5:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff8020ecb9:	48 d3 e0             	shl    %cl,%rax
ffffffff8020ecbc:	48 09 44 d5 20       	or     %rax,0x20(%rbp,%rdx,8)
}
ffffffff8020ecc1:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020ecc5:	5b                   	pop    %rbx
ffffffff8020ecc6:	5d                   	pop    %rbp
ffffffff8020ecc7:	c3                   	ret
ffffffff8020ecc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020eccf:	00 

ffffffff8020ecd0 <_RME_Clear>:
{
ffffffff8020ecd0:	f3 0f 1e fa          	endbr64
ffffffff8020ecd4:	48 89 f9             	mov    %rdi,%rcx
    for(Count=0U;Count<Size;Count++)
ffffffff8020ecd7:	48 85 f6             	test   %rsi,%rsi
ffffffff8020ecda:	0f 84 c8 00 00 00    	je     ffffffff8020eda8 <_RME_Clear+0xd8>
ffffffff8020ece0:	48 8d 46 ff          	lea    -0x1(%rsi),%rax
ffffffff8020ece4:	48 83 f8 0e          	cmp    $0xe,%rax
ffffffff8020ece8:	0f 86 bb 00 00 00    	jbe    ffffffff8020eda9 <_RME_Clear+0xd9>
ffffffff8020ecee:	48 89 f0             	mov    %rsi,%rax
ffffffff8020ecf1:	48 89 fa             	mov    %rdi,%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ecf4:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8020ecf8:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
ffffffff8020ecfc:	48 8d 3c 38          	lea    (%rax,%rdi,1),%rdi
ffffffff8020ed00:	a8 10                	test   $0x10,%al
ffffffff8020ed02:	74 0c                	je     ffffffff8020ed10 <_RME_Clear+0x40>
ffffffff8020ed04:	48 8d 51 10          	lea    0x10(%rcx),%rdx
ffffffff8020ed08:	0f 11 01             	movups %xmm0,(%rcx)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ed0b:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020ed0e:	74 10                	je     ffffffff8020ed20 <_RME_Clear+0x50>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ed10:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8020ed13:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8020ed17:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ed1b:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020ed1e:	75 f0                	jne    ffffffff8020ed10 <_RME_Clear+0x40>
ffffffff8020ed20:	48 39 c6             	cmp    %rax,%rsi
ffffffff8020ed23:	0f 84 87 00 00 00    	je     ffffffff8020edb0 <_RME_Clear+0xe0>
ffffffff8020ed29:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020ed2c:	48 29 c2             	sub    %rax,%rdx
ffffffff8020ed2f:	48 8d 7a ff          	lea    -0x1(%rdx),%rdi
ffffffff8020ed33:	48 83 ff 06          	cmp    $0x6,%rdi
ffffffff8020ed37:	76 17                	jbe    ffffffff8020ed50 <_RME_Clear+0x80>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ed39:	48 89 d7             	mov    %rdx,%rdi
ffffffff8020ed3c:	48 c7 04 01 00 00 00 	movq   $0x0,(%rcx,%rax,1)
ffffffff8020ed43:	00 
    for(Count=0U;Count<Size;Count++)
ffffffff8020ed44:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
ffffffff8020ed48:	48 01 f8             	add    %rdi,%rax
ffffffff8020ed4b:	83 e2 07             	and    $0x7,%edx
ffffffff8020ed4e:	74 58                	je     ffffffff8020eda8 <_RME_Clear+0xd8>
ffffffff8020ed50:	48 8d 50 01          	lea    0x1(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ed54:	c6 04 01 00          	movb   $0x0,(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ed58:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020ed5b:	73 4b                	jae    ffffffff8020eda8 <_RME_Clear+0xd8>
ffffffff8020ed5d:	48 8d 50 02          	lea    0x2(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ed61:	c6 44 01 01 00       	movb   $0x0,0x1(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ed66:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020ed69:	73 3d                	jae    ffffffff8020eda8 <_RME_Clear+0xd8>
ffffffff8020ed6b:	48 8d 50 03          	lea    0x3(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ed6f:	c6 44 01 02 00       	movb   $0x0,0x2(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ed74:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020ed77:	73 2f                	jae    ffffffff8020eda8 <_RME_Clear+0xd8>
ffffffff8020ed79:	48 8d 50 04          	lea    0x4(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ed7d:	c6 44 01 03 00       	movb   $0x0,0x3(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ed82:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020ed85:	73 21                	jae    ffffffff8020eda8 <_RME_Clear+0xd8>
ffffffff8020ed87:	48 8d 50 05          	lea    0x5(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ed8b:	c6 44 01 04 00       	movb   $0x0,0x4(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ed90:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020ed93:	73 13                	jae    ffffffff8020eda8 <_RME_Clear+0xd8>
ffffffff8020ed95:	48 8d 50 06          	lea    0x6(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ed99:	c6 44 01 05 00       	movb   $0x0,0x5(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ed9e:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020eda1:	73 05                	jae    ffffffff8020eda8 <_RME_Clear+0xd8>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020eda3:	c6 44 01 06 00       	movb   $0x0,0x6(%rcx,%rax,1)
}
ffffffff8020eda8:	c3                   	ret
    for(Count=0U;Count<Size;Count++)
ffffffff8020eda9:	31 c0                	xor    %eax,%eax
ffffffff8020edab:	e9 79 ff ff ff       	jmp    ffffffff8020ed29 <_RME_Clear+0x59>
ffffffff8020edb0:	c3                   	ret
ffffffff8020edb1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020edb8:	00 00 00 00 
ffffffff8020edbc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020edc0 <_RME_Memcmp>:
{
ffffffff8020edc0:	f3 0f 1e fa          	endbr64
    for(Count=0U;Count<Num;Count++)
ffffffff8020edc4:	31 c0                	xor    %eax,%eax
ffffffff8020edc6:	48 85 d2             	test   %rdx,%rdx
ffffffff8020edc9:	75 0e                	jne    ffffffff8020edd9 <_RME_Memcmp+0x19>
ffffffff8020edcb:	c3                   	ret
ffffffff8020edcc:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020edd0:	48 83 c0 01          	add    $0x1,%rax
ffffffff8020edd4:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020edd7:	74 17                	je     ffffffff8020edf0 <_RME_Memcmp+0x30>
        if(Dst[Count]!=Src[Count])
ffffffff8020edd9:	0f b6 0c 07          	movzbl (%rdi,%rax,1),%ecx
ffffffff8020eddd:	44 0f be 04 06       	movsbl (%rsi,%rax,1),%r8d
ffffffff8020ede2:	44 38 c1             	cmp    %r8b,%cl
ffffffff8020ede5:	74 e9                	je     ffffffff8020edd0 <_RME_Memcmp+0x10>
            return Dst[Count]-Src[Count];
ffffffff8020ede7:	0f be c1             	movsbl %cl,%eax
ffffffff8020edea:	44 29 c0             	sub    %r8d,%eax
ffffffff8020eded:	48 98                	cltq
ffffffff8020edef:	c3                   	ret
    return 0;
ffffffff8020edf0:	31 c0                	xor    %eax,%eax
ffffffff8020edf2:	c3                   	ret
ffffffff8020edf3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020edfa:	00 00 00 00 
ffffffff8020edfe:	66 90                	xchg   %ax,%ax

ffffffff8020ee00 <_RME_Memcpy>:
{
ffffffff8020ee00:	f3 0f 1e fa          	endbr64
    for(Count=0U;Count<Num;Count++)
ffffffff8020ee04:	48 85 d2             	test   %rdx,%rdx
ffffffff8020ee07:	74 1a                	je     ffffffff8020ee23 <_RME_Memcpy+0x23>
ffffffff8020ee09:	48 01 f2             	add    %rsi,%rdx
ffffffff8020ee0c:	0f 1f 40 00          	nopl   0x0(%rax)
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020ee10:	0f b6 06             	movzbl (%rsi),%eax
    for(Count=0U;Count<Num;Count++)
ffffffff8020ee13:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8020ee17:	48 83 c7 01          	add    $0x1,%rdi
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020ee1b:	88 47 ff             	mov    %al,-0x1(%rdi)
    for(Count=0U;Count<Num;Count++)
ffffffff8020ee1e:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8020ee21:	75 ed                	jne    ffffffff8020ee10 <_RME_Memcpy+0x10>
}
ffffffff8020ee23:	c3                   	ret
ffffffff8020ee24:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020ee2b:	00 00 00 00 
ffffffff8020ee2f:	90                   	nop

ffffffff8020ee30 <_RME_Diff>:
{
ffffffff8020ee30:	f3 0f 1e fa          	endbr64
    Diff1=Num1-Num2;
ffffffff8020ee34:	48 89 f8             	mov    %rdi,%rax
ffffffff8020ee37:	48 29 f0             	sub    %rsi,%rax
    Diff2=Num2-Num1;
ffffffff8020ee3a:	48 29 fe             	sub    %rdi,%rsi
    if(Diff1>Diff2)
ffffffff8020ee3d:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020ee40:	48 0f 47 c6          	cmova  %rsi,%rax
}
ffffffff8020ee44:	c3                   	ret
ffffffff8020ee45:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020ee4c:	00 00 00 00 

ffffffff8020ee50 <_RME_Tim_Elapse>:
{
ffffffff8020ee50:	f3 0f 1e fa          	endbr64
ffffffff8020ee54:	53                   	push   %rbx
ffffffff8020ee55:	48 89 fb             	mov    %rdi,%rbx
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020ee58:	e8 e2 d9 ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020ee5d:	48 b9 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rcx
ffffffff8020ee64:	ff ff 7f 
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020ee67:	48 8b 50 08          	mov    0x8(%rax),%rdx
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020ee6b:	48 8b 42 30          	mov    0x30(%rdx),%rax
ffffffff8020ee6f:	48 39 c1             	cmp    %rax,%rcx
ffffffff8020ee72:	72 16                	jb     ffffffff8020ee8a <_RME_Tim_Elapse+0x3a>
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020ee74:	48 89 c1             	mov    %rax,%rcx
ffffffff8020ee77:	48 29 d9             	sub    %rbx,%rcx
ffffffff8020ee7a:	48 39 c3             	cmp    %rax,%rbx
ffffffff8020ee7d:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020ee82:	48 0f 42 c1          	cmovb  %rcx,%rax
ffffffff8020ee86:	48 89 42 30          	mov    %rax,0x30(%rdx)
}
ffffffff8020ee8a:	5b                   	pop    %rbx
ffffffff8020ee8b:	c3                   	ret
ffffffff8020ee8c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020ee90 <_RME_Tim_Future>:
{
ffffffff8020ee90:	f3 0f 1e fa          	endbr64
ffffffff8020ee94:	48 83 ec 08          	sub    $0x8,%rsp
    return RME_CPU_LOCAL()->Thd_Cur->Sched.Slice;
ffffffff8020ee98:	e8 a2 d9 ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
ffffffff8020ee9d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020eea1:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff8020eea5:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020eea9:	c3                   	ret
ffffffff8020eeaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020eeb0 <_RME_Pgt_Boot_Add>:
{
ffffffff8020eeb0:	f3 0f 1e fa          	endbr64
ffffffff8020eeb4:	48 89 f0             	mov    %rsi,%rax
ffffffff8020eeb7:	49 89 f9             	mov    %rdi,%r9
ffffffff8020eeba:	48 89 d6             	mov    %rdx,%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020eebd:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
{
ffffffff8020eec1:	48 89 ca             	mov    %rcx,%rdx
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020eec4:	f6 c4 80             	test   $0x80,%ah
ffffffff8020eec7:	75 3f                	jne    ffffffff8020ef08 <_RME_Pgt_Boot_Add+0x58>
ffffffff8020eec9:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020eecc:	0f 83 fe 00 00 00    	jae    ffffffff8020efd0 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020eed2:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020eed9:	ff 00 00 
ffffffff8020eedc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eee0:	49 03 41 18          	add    0x18(%r9),%rax
ffffffff8020eee4:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020eeeb:	00 00 00 
ffffffff8020eeee:	48 89 c7             	mov    %rax,%rdi
ffffffff8020eef1:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eef4:	48 21 c1             	and    %rax,%rcx
ffffffff8020eef7:	4c 39 c9             	cmp    %r9,%rcx
ffffffff8020eefa:	75 78                	jne    ffffffff8020ef74 <_RME_Pgt_Boot_Add+0xc4>
ffffffff8020eefc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ef03:	c3                   	ret
ffffffff8020ef04:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020ef08:	48 89 c1             	mov    %rax,%rcx
ffffffff8020ef0b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020ef0f:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020ef12:	0f 83 b8 00 00 00    	jae    ffffffff8020efd0 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020ef18:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020ef1f:	00 00 00 
ffffffff8020ef22:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020ef26:	49 03 49 18          	add    0x18(%r9),%rcx
ffffffff8020ef2a:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020ef31:	ff 00 00 
ffffffff8020ef34:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8020ef37:	49 89 fb             	mov    %rdi,%r11
ffffffff8020ef3a:	4d 21 cb             	and    %r9,%r11
ffffffff8020ef3d:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020ef40:	74 ba                	je     ffffffff8020eefc <_RME_Pgt_Boot_Add+0x4c>
ffffffff8020ef42:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020ef46:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020ef4a:	0f 85 90 00 00 00    	jne    ffffffff8020efe0 <_RME_Pgt_Boot_Add+0x130>
ffffffff8020ef50:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8020ef54:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ef59:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020ef5c:	73 72                	jae    ffffffff8020efd0 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020ef5e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ef62:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020ef66:	48 89 c7             	mov    %rax,%rdi
ffffffff8020ef69:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ef6c:	49 21 c1             	and    %rax,%r9
ffffffff8020ef6f:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020ef72:	74 88                	je     ffffffff8020eefc <_RME_Pgt_Boot_Add+0x4c>
ffffffff8020ef74:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ef78:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020ef7c:	75 62                	jne    ffffffff8020efe0 <_RME_Pgt_Boot_Add+0x130>
    Szord=RME_PGT_SZORD(Pgt_Op->Order);
ffffffff8020ef7e:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020ef82:	b9 40 00 00 00       	mov    $0x40,%ecx
    if(((Pos>>RME_PGT_NMORD(Pgt_Op->Order))!=0U)||
ffffffff8020ef87:	49 89 d3             	mov    %rdx,%r11
    Szord=RME_PGT_SZORD(Pgt_Op->Order);
ffffffff8020ef8a:	4c 89 c8             	mov    %r9,%rax
ffffffff8020ef8d:	48 c1 e8 20          	shr    $0x20,%rax
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020ef91:	29 c1                	sub    %eax,%ecx
ffffffff8020ef93:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020ef9a:	48 d3 e8             	shr    %cl,%rax
    if(((Pos>>RME_PGT_NMORD(Pgt_Op->Order))!=0U)||
ffffffff8020ef9d:	44 89 c9             	mov    %r9d,%ecx
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020efa0:	48 21 f0             	and    %rsi,%rax
    if(((Pos>>RME_PGT_NMORD(Pgt_Op->Order))!=0U)||
ffffffff8020efa3:	49 d3 eb             	shr    %cl,%r11
ffffffff8020efa6:	4c 09 d8             	or     %r11,%rax
ffffffff8020efa9:	75 45                	jne    ffffffff8020eff0 <_RME_Pgt_Boot_Add+0x140>
{
ffffffff8020efab:	48 83 ec 08          	sub    $0x8,%rsp
    if(__RME_Pgt_Page_Map(Pgt_Op,Paddr,Pos,Flag)!=0)
ffffffff8020efaf:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020efb2:	e8 59 c6 00 00       	call   ffffffff8021b610 <__RME_Pgt_Page_Map>
    return 0;
ffffffff8020efb7:	48 f7 d8             	neg    %rax
ffffffff8020efba:	48 19 c0             	sbb    %rax,%rax
}
ffffffff8020efbd:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff8020efc1:	48 83 e0 9a          	and    $0xffffffffffffff9a,%rax
}
ffffffff8020efc5:	c3                   	ret
ffffffff8020efc6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020efcd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020efd0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020efd7:	c3                   	ret
ffffffff8020efd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020efdf:	00 
ffffffff8020efe0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020efe7:	c3                   	ret
ffffffff8020efe8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020efef:	00 
        return RME_ERR_PGT_ADDR;
ffffffff8020eff0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
}
ffffffff8020eff7:	c3                   	ret
ffffffff8020eff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020efff:	00 

ffffffff8020f000 <_RME_Pgt_Boot_Con>:
{
ffffffff8020f000:	f3 0f 1e fa          	endbr64
ffffffff8020f004:	55                   	push   %rbp
ffffffff8020f005:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020f008:	53                   	push   %rbx
ffffffff8020f009:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020f00c:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020f00f:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020f013:	48 8b 57 28          	mov    0x28(%rdi),%rdx
ffffffff8020f017:	f6 c7 80             	test   $0x80,%bh
ffffffff8020f01a:	75 4c                	jne    ffffffff8020f068 <_RME_Pgt_Boot_Con+0x68>
ffffffff8020f01c:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8020f01f:	0f 83 23 02 00 00    	jae    ffffffff8020f248 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020f025:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff8020f029:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020f02d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f034:	ff 00 00 
ffffffff8020f037:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020f03e:	00 00 00 
ffffffff8020f041:	48 01 cb             	add    %rcx,%rbx
ffffffff8020f044:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020f047:	48 21 c7             	and    %rax,%rdi
ffffffff8020f04a:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020f04d:	0f 85 8a 00 00 00    	jne    ffffffff8020f0dd <_RME_Pgt_Boot_Con+0xdd>
ffffffff8020f053:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff8020f058:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f05f:	e9 3d 01 00 00       	jmp    ffffffff8020f1a1 <_RME_Pgt_Boot_Con+0x1a1>
ffffffff8020f064:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020f068:	48 89 d8             	mov    %rbx,%rax
ffffffff8020f06b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f06f:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f072:	0f 83 d0 01 00 00    	jae    ffffffff8020f248 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020f078:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff8020f07c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f080:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020f087:	ff 00 00 
ffffffff8020f08a:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020f091:	00 00 00 
ffffffff8020f094:	48 01 c8             	add    %rcx,%rax
ffffffff8020f097:	48 8b 38             	mov    (%rax),%rdi
ffffffff8020f09a:	49 89 fb             	mov    %rdi,%r11
ffffffff8020f09d:	4d 21 cb             	and    %r9,%r11
ffffffff8020f0a0:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020f0a3:	74 b3                	je     ffffffff8020f058 <_RME_Pgt_Boot_Con+0x58>
ffffffff8020f0a5:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020f0a9:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020f0ad:	0f 85 75 01 00 00    	jne    ffffffff8020f228 <_RME_Pgt_Boot_Con+0x228>
ffffffff8020f0b3:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff8020f0b7:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020f0bd:	48 39 fb             	cmp    %rdi,%rbx
ffffffff8020f0c0:	0f 83 82 01 00 00    	jae    ffffffff8020f248 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020f0c6:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020f0ca:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8020f0ce:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020f0d1:	49 21 c1             	and    %rax,%r9
ffffffff8020f0d4:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020f0d7:	0f 84 7b ff ff ff    	je     ffffffff8020f058 <_RME_Pgt_Boot_Con+0x58>
ffffffff8020f0dd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f0e1:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020f0e5:	0f 85 3d 01 00 00    	jne    ffffffff8020f228 <_RME_Pgt_Boot_Con+0x228>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020f0eb:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020f0f1:	0f 85 b9 00 00 00    	jne    ffffffff8020f1b0 <_RME_Pgt_Boot_Con+0x1b0>
ffffffff8020f0f7:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020f0fa:	0f 83 48 01 00 00    	jae    ffffffff8020f248 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020f100:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020f107:	ff 00 00 
ffffffff8020f10a:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020f10e:	48 01 cd             	add    %rcx,%rbp
ffffffff8020f111:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020f118:	00 00 00 
ffffffff8020f11b:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020f11f:	48 21 c2             	and    %rax,%rdx
ffffffff8020f122:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020f125:	0f 84 2d ff ff ff    	je     ffffffff8020f058 <_RME_Pgt_Boot_Con+0x58>
ffffffff8020f12b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f12f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020f133:	0f 85 ef 00 00 00    	jne    ffffffff8020f228 <_RME_Pgt_Boot_Con+0x228>
    if((Pos>>RME_PGT_NMORD(Pgt_Parent->Order))!=0U)
ffffffff8020f139:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff8020f13d:	48 89 f0             	mov    %rsi,%rax
ffffffff8020f140:	48 d3 e8             	shr    %cl,%rax
ffffffff8020f143:	48 85 c0             	test   %rax,%rax
ffffffff8020f146:	0f 85 ec 00 00 00    	jne    ffffffff8020f238 <_RME_Pgt_Boot_Con+0x238>
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff8020f14c:	48 8b 45 28          	mov    0x28(%rbp),%rax
    Szord_Parent=RME_PGT_SZORD(Pgt_Parent->Order);
ffffffff8020f150:	48 c1 e9 20          	shr    $0x20,%rcx
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff8020f154:	89 c2                	mov    %eax,%edx
ffffffff8020f156:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f15a:	48 01 d0             	add    %rdx,%rax
    if(Szord_Parent!=Order_Child)
ffffffff8020f15d:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020f160:	0f 85 d2 00 00 00    	jne    ffffffff8020f238 <_RME_Pgt_Boot_Con+0x238>
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff8020f166:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020f169:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020f16c:	48 89 df             	mov    %rbx,%rdi
ffffffff8020f16f:	e8 4c c5 00 00       	call   ffffffff8021b6c0 <__RME_Pgt_Pgdir_Map>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff8020f174:	8b 13                	mov    (%rbx),%edx
ffffffff8020f176:	85 d2                	test   %edx,%edx
ffffffff8020f178:	74 04                	je     ffffffff8020f17e <_RME_Pgt_Boot_Con+0x17e>
ffffffff8020f17a:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff8020f17e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020f183:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020f189:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020f18c:	85 c0                	test   %eax,%eax
ffffffff8020f18e:	74 04                	je     ffffffff8020f194 <_RME_Pgt_Boot_Con+0x194>
ffffffff8020f190:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
ffffffff8020f194:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020f199:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    return 0;
ffffffff8020f19f:	31 c0                	xor    %eax,%eax
}
ffffffff8020f1a1:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020f1a5:	5b                   	pop    %rbx
ffffffff8020f1a6:	5d                   	pop    %rbp
ffffffff8020f1a7:	c3                   	ret
ffffffff8020f1a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f1af:	00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020f1b0:	48 89 e8             	mov    %rbp,%rax
ffffffff8020f1b3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f1b7:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f1ba:	0f 83 88 00 00 00    	jae    ffffffff8020f248 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020f1c0:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f1c7:	00 00 00 
ffffffff8020f1ca:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f1ce:	48 01 c8             	add    %rcx,%rax
ffffffff8020f1d1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020f1d8:	ff 00 00 
ffffffff8020f1db:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020f1de:	49 89 d1             	mov    %rdx,%r9
ffffffff8020f1e1:	49 21 c9             	and    %rcx,%r9
ffffffff8020f1e4:	49 39 f9             	cmp    %rdi,%r9
ffffffff8020f1e7:	0f 84 6b fe ff ff    	je     ffffffff8020f058 <_RME_Pgt_Boot_Con+0x58>
ffffffff8020f1ed:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020f1f1:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020f1f5:	75 31                	jne    ffffffff8020f228 <_RME_Pgt_Boot_Con+0x228>
ffffffff8020f1f7:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f1fb:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8020f201:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020f204:	73 42                	jae    ffffffff8020f248 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020f206:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020f20a:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff8020f20e:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020f212:	48 21 c1             	and    %rax,%rcx
ffffffff8020f215:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020f218:	0f 85 0d ff ff ff    	jne    ffffffff8020f12b <_RME_Pgt_Boot_Con+0x12b>
ffffffff8020f21e:	e9 35 fe ff ff       	jmp    ffffffff8020f058 <_RME_Pgt_Boot_Con+0x58>
ffffffff8020f223:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020f228:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f22f:	e9 6d ff ff ff       	jmp    ffffffff8020f1a1 <_RME_Pgt_Boot_Con+0x1a1>
ffffffff8020f234:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PGT_ADDR;
ffffffff8020f238:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020f23f:	e9 5d ff ff ff       	jmp    ffffffff8020f1a1 <_RME_Pgt_Boot_Con+0x1a1>
ffffffff8020f244:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020f248:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f24f:	e9 4d ff ff ff       	jmp    ffffffff8020f1a1 <_RME_Pgt_Boot_Con+0x1a1>
ffffffff8020f254:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020f25b:	00 00 00 00 
ffffffff8020f25f:	90                   	nop

ffffffff8020f260 <_RME_Kot_Init>:
{
ffffffff8020f260:	f3 0f 1e fa          	endbr64
    if(Word<RME_KOT_WORD_NUM)
ffffffff8020f264:	48 81 ff ff ff 0b 00 	cmp    $0xbffff,%rdi
ffffffff8020f26b:	76 4e                	jbe    ffffffff8020f2bb <_RME_Kot_Init+0x5b>
ffffffff8020f26d:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020f274:	80 ff ff 
ffffffff8020f277:	48 8d 14 f8          	lea    (%rax,%rdi,8),%rdx
ffffffff8020f27b:	83 e7 01             	and    $0x1,%edi
ffffffff8020f27e:	74 20                	je     ffffffff8020f2a0 <_RME_Kot_Init+0x40>
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020f280:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020f287:	80 ff ff 
ffffffff8020f28a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8020f291:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f295:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f298:	74 1e                	je     ffffffff8020f2b8 <_RME_Kot_Init+0x58>
ffffffff8020f29a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020f2a0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8020f2a7:	48 83 c0 10          	add    $0x10,%rax
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020f2ab:	48 c7 40 f8 00 00 00 	movq   $0x0,-0x8(%rax)
ffffffff8020f2b2:	00 
    for(Count=0U;Count<Word;Count++)
ffffffff8020f2b3:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f2b6:	75 e8                	jne    ffffffff8020f2a0 <_RME_Kot_Init+0x40>
ffffffff8020f2b8:	31 c0                	xor    %eax,%eax
ffffffff8020f2ba:	c3                   	ret
        return -1;
ffffffff8020f2bb:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020f2c2:	c3                   	ret
ffffffff8020f2c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020f2ca:	00 00 00 00 
ffffffff8020f2ce:	66 90                	xchg   %ax,%ax

ffffffff8020f2d0 <RME_Kmain>:
{
ffffffff8020f2d0:	f3 0f 1e fa          	endbr64
ffffffff8020f2d4:	48 83 ec 08          	sub    $0x8,%rsp
    RME_Int_Print(1111);
ffffffff8020f2d8:	bf 57 04 00 00       	mov    $0x457,%edi
ffffffff8020f2dd:	e8 4e f3 ff ff       	call   ffffffff8020e630 <RME_Int_Print>
}

static INLINE rme_ptr_t __RME_Int_Disable()
{
	rme_u64_t Ret;
	__asm__ __volatile__ (
ffffffff8020f2e2:	fa                   	cli
ffffffff8020f2e3:	c3                   	ret
    RME_Str_Print("8888888");
ffffffff8020f2e4:	48 8d 3d 5c de 00 00 	lea    0xde5c(%rip),%rdi        # ffffffff8021d147 <UVM_Init+0x16a7>
ffffffff8020f2eb:	e8 30 f5 ff ff       	call   ffffffff8020e820 <RME_Str_Print>
    __RME_Lowlvl_Init();
ffffffff8020f2f0:	e8 8b a7 00 00       	call   ffffffff80219a80 <__RME_Lowlvl_Init>
    __RME_Pgt_Kom_Init();
ffffffff8020f2f5:	e8 f6 af 00 00       	call   ffffffff8021a2f0 <__RME_Pgt_Kom_Init>
    _RME_Kot_Init(RME_KOT_WORD_NUM);
ffffffff8020f2fa:	bf 00 00 0c 00       	mov    $0xc0000,%edi
ffffffff8020f2ff:	e8 5c ff ff ff       	call   ffffffff8020f260 <_RME_Kot_Init>
    __RME_Boot();
ffffffff8020f304:	e8 c7 ba 00 00       	call   ffffffff8021add0 <__RME_Boot>
}
ffffffff8020f309:	31 c0                	xor    %eax,%eax
ffffffff8020f30b:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020f30f:	c3                   	ret

ffffffff8020f310 <_RME_Kot_Mark>:
{
ffffffff8020f310:	f3 0f 1e fa          	endbr64
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff8020f314:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff8020f318:	0f 85 a7 01 00 00    	jne    ffffffff8020f4c5 <_RME_Kot_Mark+0x1b5>
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f31e:	4c 8d 97 00 00 00 7f 	lea    0x7f000000(%rdi),%r10
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020f325:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f32c:	48 8d bc 37 ff ff ff 	lea    0x7effffff(%rdi,%rsi,1),%rdi
ffffffff8020f333:	7e 
{
ffffffff8020f334:	53                   	push   %rbx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020f335:	48 be 00 00 00 01 00 	movabs $0xffff800001000000,%rsi
ffffffff8020f33c:	80 ff ff 
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f33f:	4c 89 d1             	mov    %r10,%rcx
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020f342:	4d 89 c3             	mov    %r8,%r11
    Start=Start>>RME_WORD_ORDER;
ffffffff8020f345:	49 c1 ea 0a          	shr    $0xa,%r10
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f349:	48 c1 e9 04          	shr    $0x4,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020f34d:	4e 8d 0c d5 00 00 00 	lea    0x0(,%r10,8),%r9
ffffffff8020f354:	00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020f355:	49 d3 e3             	shl    %cl,%r11
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f358:	48 89 f9             	mov    %rdi,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020f35b:	49 8d 1c 31          	lea    (%r9,%rsi,1),%rbx
    End=End>>RME_WORD_ORDER;
ffffffff8020f35f:	48 c1 ef 0a          	shr    $0xa,%rdi
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020f363:	48 c1 e9 04          	shr    $0x4,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020f367:	48 8b 03             	mov    (%rbx),%rax
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020f36a:	f7 d1                	not    %ecx
ffffffff8020f36c:	49 d3 e8             	shr    %cl,%r8
    if(Start==End)
ffffffff8020f36f:	49 39 fa             	cmp    %rdi,%r10
ffffffff8020f372:	0f 84 30 01 00 00    	je     ffffffff8020f4a8 <_RME_Kot_Mark+0x198>
        if((Old_Val&Mask_Begin)!=0U)
ffffffff8020f378:	49 85 c3             	test   %rax,%r11
ffffffff8020f37b:	0f 85 e1 00 00 00    	jne    ffffffff8020f462 <_RME_Kot_Mark+0x152>
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020f381:	4c 89 da             	mov    %r11,%rdx
ffffffff8020f384:	48 09 c2             	or     %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020f387:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff8020f38c:	0f 94 c2             	sete   %dl
ffffffff8020f38f:	84 d2                	test   %dl,%dl
ffffffff8020f391:	0f 84 cb 00 00 00    	je     ffffffff8020f462 <_RME_Kot_Mark+0x152>
        for(Count=Start+1U;Count<End;Count++)
ffffffff8020f397:	49 8d 4a 01          	lea    0x1(%r10),%rcx
ffffffff8020f39b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020f39e:	0f 83 cc 00 00 00    	jae    ffffffff8020f470 <_RME_Kot_Mark+0x160>
ffffffff8020f3a4:	49 8d 54 31 08       	lea    0x8(%r9,%rsi,1),%rdx
ffffffff8020f3a9:	31 c0                	xor    %eax,%eax
ffffffff8020f3ab:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8020f3b2:	eb 23                	jmp    ffffffff8020f3d7 <_RME_Kot_Mark+0xc7>
ffffffff8020f3b4:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020f3b8:	f0 48 0f b1 32       	lock cmpxchg %rsi,(%rdx)
ffffffff8020f3bd:	41 0f 94 c1          	sete   %r9b
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Count],
ffffffff8020f3c1:	45 84 c9             	test   %r9b,%r9b
ffffffff8020f3c4:	74 17                	je     ffffffff8020f3dd <_RME_Kot_Mark+0xcd>
        for(Count=Start+1U;Count<End;Count++)
ffffffff8020f3c6:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8020f3ca:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8020f3ce:	48 39 cf             	cmp    %rcx,%rdi
ffffffff8020f3d1:	0f 84 99 00 00 00    	je     ffffffff8020f470 <_RME_Kot_Mark+0x160>
            if(Old_Val!=0U)
ffffffff8020f3d7:	48 83 3a 00          	cmpq   $0x0,(%rdx)
ffffffff8020f3db:	74 db                	je     ffffffff8020f3b8 <_RME_Kot_Mark+0xa8>
            for(Count--;Count>Start;Count--)
ffffffff8020f3dd:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
ffffffff8020f3e1:	49 39 d2             	cmp    %rdx,%r10
ffffffff8020f3e4:	73 72                	jae    ffffffff8020f458 <_RME_Kot_Mark+0x148>
ffffffff8020f3e6:	48 89 c8             	mov    %rcx,%rax
ffffffff8020f3e9:	4c 29 d0             	sub    %r10,%rax
ffffffff8020f3ec:	48 8d 78 ff          	lea    -0x1(%rax),%rdi
ffffffff8020f3f0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f3f4:	74 50                	je     ffffffff8020f446 <_RME_Kot_Mark+0x136>
ffffffff8020f3f6:	48 89 fe             	mov    %rdi,%rsi
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020f3f9:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8020f3fd:	49 b8 f0 ff ff 00 00 	movabs $0xffff800000fffff0,%r8
ffffffff8020f404:	80 ff ff 
ffffffff8020f407:	48 83 e6 fe          	and    $0xfffffffffffffffe,%rsi
ffffffff8020f40b:	49 8d 04 c8          	lea    (%r8,%rcx,8),%rax
ffffffff8020f40f:	48 29 f1             	sub    %rsi,%rcx
ffffffff8020f412:	49 8d 0c c8          	lea    (%r8,%rcx,8),%rcx
ffffffff8020f416:	49 89 c0             	mov    %rax,%r8
ffffffff8020f419:	49 29 c8             	sub    %rcx,%r8
ffffffff8020f41c:	41 83 e0 10          	and    $0x10,%r8d
ffffffff8020f420:	74 0c                	je     ffffffff8020f42e <_RME_Kot_Mark+0x11e>
ffffffff8020f422:	0f 11 00             	movups %xmm0,(%rax)
            for(Count--;Count>Start;Count--)
ffffffff8020f425:	48 83 e8 10          	sub    $0x10,%rax
ffffffff8020f429:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020f42c:	74 10                	je     ffffffff8020f43e <_RME_Kot_Mark+0x12e>
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020f42e:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8020f431:	48 83 e8 20          	sub    $0x20,%rax
ffffffff8020f435:	0f 11 40 10          	movups %xmm0,0x10(%rax)
            for(Count--;Count>Start;Count--)
ffffffff8020f439:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020f43c:	75 f0                	jne    ffffffff8020f42e <_RME_Kot_Mark+0x11e>
ffffffff8020f43e:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f441:	74 15                	je     ffffffff8020f458 <_RME_Kot_Mark+0x148>
ffffffff8020f443:	48 29 f2             	sub    %rsi,%rdx
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020f446:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020f44d:	80 ff ff 
ffffffff8020f450:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
ffffffff8020f457:	00 
            RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff8020f458:	49 f7 d3             	not    %r11
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff8020f45b:	4c 8b 1b             	mov    (%rbx),%r11
ffffffff8020f45e:	f0 4c 21 1b          	lock and %r11,(%rbx)
        return RME_ERR_KOT_BMP;
ffffffff8020f462:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020f469:	5b                   	pop    %rbx
ffffffff8020f46a:	c3                   	ret
ffffffff8020f46b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Old_Val=RME_KOT_VA_BASE[End];
ffffffff8020f470:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020f477:	80 ff ff 
ffffffff8020f47a:	48 8d 14 f8          	lea    (%rax,%rdi,8),%rdx
ffffffff8020f47e:	48 8b 02             	mov    (%rdx),%rax
            if((Old_Val&Mask_End)!=0U)
ffffffff8020f481:	49 85 c0             	test   %rax,%r8
ffffffff8020f484:	0f 85 53 ff ff ff    	jne    ffffffff8020f3dd <_RME_Kot_Mark+0xcd>
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[End],
ffffffff8020f48a:	49 09 c0             	or     %rax,%r8
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020f48d:	f0 4c 0f b1 02       	lock cmpxchg %r8,(%rdx)
ffffffff8020f492:	41 0f 94 c0          	sete   %r8b
ffffffff8020f496:	45 84 c0             	test   %r8b,%r8b
ffffffff8020f499:	0f 84 3e ff ff ff    	je     ffffffff8020f3dd <_RME_Kot_Mark+0xcd>
    return 0;
ffffffff8020f49f:	31 c0                	xor    %eax,%eax
}
ffffffff8020f4a1:	5b                   	pop    %rbx
ffffffff8020f4a2:	c3                   	ret
ffffffff8020f4a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
ffffffff8020f4a8:	4d 21 d8             	and    %r11,%r8
ffffffff8020f4ab:	49 85 c0             	test   %rax,%r8
ffffffff8020f4ae:	75 b2                	jne    ffffffff8020f462 <_RME_Kot_Mark+0x152>
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020f4b0:	49 09 c0             	or     %rax,%r8
ffffffff8020f4b3:	f0 4c 0f b1 03       	lock cmpxchg %r8,(%rbx)
ffffffff8020f4b8:	41 0f 94 c0          	sete   %r8b
ffffffff8020f4bc:	41 80 f8 01          	cmp    $0x1,%r8b
}
ffffffff8020f4c0:	5b                   	pop    %rbx
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020f4c1:	48 19 c0             	sbb    %rax,%rax
}
ffffffff8020f4c4:	c3                   	ret
        return RME_ERR_KOT_BMP;
ffffffff8020f4c5:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
}
ffffffff8020f4c9:	c3                   	ret
ffffffff8020f4ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020f4d0 <_RME_Cpt_Crt>:
{
ffffffff8020f4d0:	41 55                	push   %r13
ffffffff8020f4d2:	41 54                	push   %r12
ffffffff8020f4d4:	55                   	push   %rbp
ffffffff8020f4d5:	48 89 cd             	mov    %rcx,%rbp
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020f4d8:	49 8d 49 ff          	lea    -0x1(%r9),%rcx
{
ffffffff8020f4dc:	53                   	push   %rbx
ffffffff8020f4dd:	48 83 ec 08          	sub    $0x8,%rsp
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020f4e1:	48 81 f9 ff 7f 00 00 	cmp    $0x7fff,%rcx
ffffffff8020f4e8:	0f 87 9a 02 00 00    	ja     ffffffff8020f788 <_RME_Cpt_Crt+0x2b8>
ffffffff8020f4ee:	48 89 f0             	mov    %rsi,%rax
ffffffff8020f4f1:	4d 89 cc             	mov    %r9,%r12
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020f4f4:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff8020f4f8:	f6 c4 80             	test   $0x80,%ah
ffffffff8020f4fb:	0f 84 bf 01 00 00    	je     ffffffff8020f6c0 <_RME_Cpt_Crt+0x1f0>
ffffffff8020f501:	48 89 c1             	mov    %rax,%rcx
ffffffff8020f504:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020f508:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020f50b:	0f 83 77 02 00 00    	jae    ffffffff8020f788 <_RME_Cpt_Crt+0x2b8>
ffffffff8020f511:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020f515:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020f519:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020f520:	ff 00 00 
ffffffff8020f523:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020f52a:	00 00 00 
ffffffff8020f52d:	48 01 f9             	add    %rdi,%rcx
ffffffff8020f530:	4c 8b 09             	mov    (%rcx),%r9
ffffffff8020f533:	4c 89 cb             	mov    %r9,%rbx
ffffffff8020f536:	4c 21 d3             	and    %r10,%rbx
ffffffff8020f539:	4c 39 db             	cmp    %r11,%rbx
ffffffff8020f53c:	0f 84 b5 01 00 00    	je     ffffffff8020f6f7 <_RME_Cpt_Crt+0x227>
ffffffff8020f542:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8020f546:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8020f54a:	0f 85 20 02 00 00    	jne    ffffffff8020f770 <_RME_Cpt_Crt+0x2a0>
ffffffff8020f550:	4c 8b 49 28          	mov    0x28(%rcx),%r9
ffffffff8020f554:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f559:	4c 39 c8             	cmp    %r9,%rax
ffffffff8020f55c:	0f 83 26 02 00 00    	jae    ffffffff8020f788 <_RME_Cpt_Crt+0x2b8>
ffffffff8020f562:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f566:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020f56a:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020f56d:	49 21 ca             	and    %rcx,%r10
ffffffff8020f570:	4d 39 da             	cmp    %r11,%r10
ffffffff8020f573:	0f 84 7e 01 00 00    	je     ffffffff8020f6f7 <_RME_Cpt_Crt+0x227>
ffffffff8020f579:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f57d:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f581:	0f 85 e9 01 00 00    	jne    ffffffff8020f770 <_RME_Cpt_Crt+0x2a0>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f587:	f6 c6 80             	test   $0x80,%dh
ffffffff8020f58a:	0f 85 70 01 00 00    	jne    ffffffff8020f700 <_RME_Cpt_Crt+0x230>
ffffffff8020f590:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020f593:	0f 83 ef 01 00 00    	jae    ffffffff8020f788 <_RME_Cpt_Crt+0x2b8>
ffffffff8020f599:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f5a0:	ff 00 00 
ffffffff8020f5a3:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f5a7:	48 01 fa             	add    %rdi,%rdx
ffffffff8020f5aa:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f5b1:	00 00 00 
ffffffff8020f5b4:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020f5b7:	48 21 ce             	and    %rcx,%rsi
ffffffff8020f5ba:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f5bd:	0f 84 34 01 00 00    	je     ffffffff8020f6f7 <_RME_Cpt_Crt+0x227>
ffffffff8020f5c3:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f5c7:	48 83 f9 02          	cmp    $0x2,%rcx
ffffffff8020f5cb:	0f 85 9f 01 00 00    	jne    ffffffff8020f770 <_RME_Cpt_Crt+0x2a0>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f5d1:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8020f5d5:	0f 84 a1 01 00 00    	je     ffffffff8020f77c <_RME_Cpt_Crt+0x2ac>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020f5db:	f6 42 10 01          	testb  $0x1,0x10(%rdx)
ffffffff8020f5df:	0f 84 97 01 00 00    	je     ffffffff8020f77c <_RME_Cpt_Crt+0x2ac>
ffffffff8020f5e5:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020f5e9:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8020f5ec:	4e 8d 2c 01          	lea    (%rcx,%r8,1),%r13
ffffffff8020f5f0:	49 0f 42 c8          	cmovb  %r8,%rcx
ffffffff8020f5f4:	49 39 cd             	cmp    %rcx,%r13
ffffffff8020f5f7:	0f 82 7f 01 00 00    	jb     ffffffff8020f77c <_RME_Cpt_Crt+0x2ac>
ffffffff8020f5fd:	4c 89 e6             	mov    %r12,%rsi
ffffffff8020f600:	31 db                	xor    %ebx,%ebx
ffffffff8020f602:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020f606:	48 89 f1             	mov    %rsi,%rcx
ffffffff8020f609:	4c 01 e9             	add    %r13,%rcx
ffffffff8020f60c:	0f 92 c3             	setb   %bl
ffffffff8020f60f:	0f 82 67 01 00 00    	jb     ffffffff8020f77c <_RME_Cpt_Crt+0x2ac>
ffffffff8020f615:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8020f619:	48 39 4a 30          	cmp    %rcx,0x30(%rdx)
ffffffff8020f61d:	0f 82 59 01 00 00    	jb     ffffffff8020f77c <_RME_Cpt_Crt+0x2ac>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020f623:	48 3b 68 28          	cmp    0x28(%rax),%rbp
ffffffff8020f627:	0f 83 5b 01 00 00    	jae    ffffffff8020f788 <_RME_Cpt_Crt+0x2b8>
ffffffff8020f62d:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f634:	00 00 00 
ffffffff8020f637:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020f63b:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff8020f63f:	48 89 d8             	mov    %rbx,%rax
ffffffff8020f642:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff8020f648:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020f64b:	84 d2                	test   %dl,%dl
ffffffff8020f64d:	0f 84 41 01 00 00    	je     ffffffff8020f794 <_RME_Cpt_Crt+0x2c4>
ffffffff8020f653:	48 c7 45 20 01 00 00 	movq   $0x1,0x20(%rbp)
ffffffff8020f65a:	00 
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020f65b:	4c 89 ef             	mov    %r13,%rdi
ffffffff8020f65e:	e8 ad fc ff ff       	call   ffffffff8020f310 <_RME_Kot_Mark>
ffffffff8020f663:	48 85 c0             	test   %rax,%rax
ffffffff8020f666:	0f 88 34 01 00 00    	js     ffffffff8020f7a0 <_RME_Cpt_Crt+0x2d0>
ffffffff8020f66c:	4c 89 e8             	mov    %r13,%rax
ffffffff8020f66f:	90                   	nop
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f670:	48 83 c3 01          	add    $0x1,%rbx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f674:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f67b:	48 83 c0 40          	add    $0x40,%rax
ffffffff8020f67f:	4c 39 e3             	cmp    %r12,%rbx
ffffffff8020f682:	72 ec                	jb     ffffffff8020f670 <_RME_Cpt_Crt+0x1a0>
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020f684:	48 b8 00 00 00 00 00 	movabs $0x3000000000000,%rax
ffffffff8020f68b:	00 03 00 
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020f68e:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff8020f695:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020f696:	4c 89 6d 18          	mov    %r13,0x18(%rbp)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020f69a:	48 c7 45 10 ff 00 00 	movq   $0xff,0x10(%rbp)
ffffffff8020f6a1:	00 
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020f6a2:	4c 89 65 28          	mov    %r12,0x28(%rbp)
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020f6a6:	48 89 45 00          	mov    %rax,0x0(%rbp)
    return 0;
ffffffff8020f6aa:	31 c0                	xor    %eax,%eax
}
ffffffff8020f6ac:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020f6b0:	5b                   	pop    %rbx
ffffffff8020f6b1:	5d                   	pop    %rbp
ffffffff8020f6b2:	41 5c                	pop    %r12
ffffffff8020f6b4:	41 5d                	pop    %r13
ffffffff8020f6b6:	c3                   	ret
ffffffff8020f6b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020f6be:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020f6c0:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020f6c3:	0f 83 bf 00 00 00    	jae    ffffffff8020f788 <_RME_Cpt_Crt+0x2b8>
ffffffff8020f6c9:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020f6cd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f6d1:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020f6d8:	ff 00 00 
ffffffff8020f6db:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020f6e2:	00 00 00 
ffffffff8020f6e5:	48 01 f8             	add    %rdi,%rax
ffffffff8020f6e8:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020f6eb:	49 21 c9             	and    %rcx,%r9
ffffffff8020f6ee:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020f6f1:	0f 85 82 fe ff ff    	jne    ffffffff8020f579 <_RME_Cpt_Crt+0xa9>
ffffffff8020f6f7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f6fe:	eb ac                	jmp    ffffffff8020f6ac <_RME_Cpt_Crt+0x1dc>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f700:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020f703:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020f707:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020f70a:	73 7c                	jae    ffffffff8020f788 <_RME_Cpt_Crt+0x2b8>
ffffffff8020f70c:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020f713:	00 00 00 
ffffffff8020f716:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020f71a:	48 01 f9             	add    %rdi,%rcx
ffffffff8020f71d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f724:	ff 00 00 
ffffffff8020f727:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8020f72a:	49 89 f2             	mov    %rsi,%r10
ffffffff8020f72d:	49 21 fa             	and    %rdi,%r10
ffffffff8020f730:	4d 39 ca             	cmp    %r9,%r10
ffffffff8020f733:	74 c2                	je     ffffffff8020f6f7 <_RME_Cpt_Crt+0x227>
ffffffff8020f735:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020f739:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020f73d:	75 31                	jne    ffffffff8020f770 <_RME_Cpt_Crt+0x2a0>
ffffffff8020f73f:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020f743:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020f749:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020f74c:	73 3a                	jae    ffffffff8020f788 <_RME_Cpt_Crt+0x2b8>
ffffffff8020f74e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f752:	48 03 51 18          	add    0x18(%rcx),%rdx
ffffffff8020f756:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020f759:	48 21 cf             	and    %rcx,%rdi
ffffffff8020f75c:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020f75f:	0f 85 5e fe ff ff    	jne    ffffffff8020f5c3 <_RME_Cpt_Crt+0xf3>
ffffffff8020f765:	eb 90                	jmp    ffffffff8020f6f7 <_RME_Cpt_Crt+0x227>
ffffffff8020f767:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020f76e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020f770:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f777:	e9 30 ff ff ff       	jmp    ffffffff8020f6ac <_RME_Cpt_Crt+0x1dc>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f77c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f783:	e9 24 ff ff ff       	jmp    ffffffff8020f6ac <_RME_Cpt_Crt+0x1dc>
        return RME_ERR_CPT_RANGE;
ffffffff8020f788:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f78f:	e9 18 ff ff ff       	jmp    ffffffff8020f6ac <_RME_Cpt_Crt+0x1dc>
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020f794:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f79b:	e9 0c ff ff ff       	jmp    ffffffff8020f6ac <_RME_Cpt_Crt+0x1dc>
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020f7a0:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8020f7a7:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020f7a8:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020f7af:	e9 f8 fe ff ff       	jmp    ffffffff8020f6ac <_RME_Cpt_Crt+0x1dc>
ffffffff8020f7b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020f7bb:	00 00 00 00 
ffffffff8020f7bf:	90                   	nop

ffffffff8020f7c0 <_RME_Pgt_Crt>:
{
ffffffff8020f7c0:	41 57                	push   %r15
ffffffff8020f7c2:	49 89 cf             	mov    %rcx,%r15
ffffffff8020f7c5:	41 56                	push   %r14
ffffffff8020f7c7:	41 55                	push   %r13
ffffffff8020f7c9:	41 54                	push   %r12
ffffffff8020f7cb:	55                   	push   %rbp
ffffffff8020f7cc:	53                   	push   %rbx
ffffffff8020f7cd:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020f7d1:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
ffffffff8020f7d6:	4c 8b 6c 24 60       	mov    0x60(%rsp),%r13
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020f7db:	4a 8d 4c 2d 00       	lea    0x0(%rbp,%r13,1),%rcx
ffffffff8020f7e0:	48 83 f9 40          	cmp    $0x40,%rcx
ffffffff8020f7e4:	0f 87 3e 03 00 00    	ja     ffffffff8020fb28 <_RME_Pgt_Crt+0x368>
ffffffff8020f7ea:	48 89 d0             	mov    %rdx,%rax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f7ed:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020f7f1:	4c 89 c2             	mov    %r8,%rdx
ffffffff8020f7f4:	4d 89 cc             	mov    %r9,%r12
ffffffff8020f7f7:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8020f7fd:	0f 84 15 02 00 00    	je     ffffffff8020fa18 <_RME_Pgt_Crt+0x258>
ffffffff8020f803:	49 89 f2             	mov    %rsi,%r10
ffffffff8020f806:	49 c1 ea 10          	shr    $0x10,%r10
ffffffff8020f80a:	49 39 ca             	cmp    %rcx,%r10
ffffffff8020f80d:	0f 83 dd 02 00 00    	jae    ffffffff8020faf0 <_RME_Pgt_Crt+0x330>
ffffffff8020f813:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020f817:	49 c1 e2 06          	shl    $0x6,%r10
ffffffff8020f81b:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8020f822:	ff 00 00 
ffffffff8020f825:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020f82c:	00 00 00 
ffffffff8020f82f:	49 01 fa             	add    %rdi,%r10
ffffffff8020f832:	4d 8b 1a             	mov    (%r10),%r11
ffffffff8020f835:	4c 89 db             	mov    %r11,%rbx
ffffffff8020f838:	4c 21 c3             	and    %r8,%rbx
ffffffff8020f83b:	4c 39 cb             	cmp    %r9,%rbx
ffffffff8020f83e:	0f 84 0c 02 00 00    	je     ffffffff8020fa50 <_RME_Pgt_Crt+0x290>
ffffffff8020f844:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff8020f848:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff8020f84c:	0f 85 7e 02 00 00    	jne    ffffffff8020fad0 <_RME_Pgt_Crt+0x310>
ffffffff8020f852:	4d 8b 5a 28          	mov    0x28(%r10),%r11
ffffffff8020f856:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8020f85c:	4c 39 de             	cmp    %r11,%rsi
ffffffff8020f85f:	0f 83 8b 02 00 00    	jae    ffffffff8020faf0 <_RME_Pgt_Crt+0x330>
ffffffff8020f865:	49 8b 5a 18          	mov    0x18(%r10),%rbx
ffffffff8020f869:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020f86d:	48 01 f3             	add    %rsi,%rbx
ffffffff8020f870:	48 8b 33             	mov    (%rbx),%rsi
ffffffff8020f873:	49 21 f0             	and    %rsi,%r8
ffffffff8020f876:	4d 39 c8             	cmp    %r9,%r8
ffffffff8020f879:	0f 84 d1 01 00 00    	je     ffffffff8020fa50 <_RME_Pgt_Crt+0x290>
ffffffff8020f87f:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020f883:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020f887:	0f 85 43 02 00 00    	jne    ffffffff8020fad0 <_RME_Pgt_Crt+0x310>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f88d:	f6 c4 80             	test   $0x80,%ah
ffffffff8020f890:	0f 85 ca 01 00 00    	jne    ffffffff8020fa60 <_RME_Pgt_Crt+0x2a0>
ffffffff8020f896:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020f899:	0f 83 51 02 00 00    	jae    ffffffff8020faf0 <_RME_Pgt_Crt+0x330>
ffffffff8020f89f:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f8a6:	ff 00 00 
ffffffff8020f8a9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f8ad:	48 01 f8             	add    %rdi,%rax
ffffffff8020f8b0:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f8b7:	00 00 00 
ffffffff8020f8ba:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020f8bd:	48 21 ce             	and    %rcx,%rsi
ffffffff8020f8c0:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f8c3:	0f 84 87 01 00 00    	je     ffffffff8020fa50 <_RME_Pgt_Crt+0x290>
ffffffff8020f8c9:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f8cd:	48 83 f9 02          	cmp    $0x2,%rcx
ffffffff8020f8d1:	0f 85 f9 01 00 00    	jne    ffffffff8020fad0 <_RME_Pgt_Crt+0x310>
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff8020f8d7:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020f8db:	0f 84 ff 01 00 00    	je     ffffffff8020fae0 <_RME_Pgt_Crt+0x320>
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020f8e1:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff8020f8e7:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020f8ea:	41 d3 e1             	shl    %cl,%r9d
ffffffff8020f8ed:	4d 63 c9             	movslq %r9d,%r9
ffffffff8020f8f0:	49 c1 e1 03          	shl    $0x3,%r9
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff8020f8f4:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8020f8f8:	0f 84 e2 01 00 00    	je     ffffffff8020fae0 <_RME_Pgt_Crt+0x320>
ffffffff8020f8fe:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8020f902:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8020f905:	4c 8d 34 11          	lea    (%rcx,%rdx,1),%r14
ffffffff8020f909:	48 0f 42 ca          	cmovb  %rdx,%rcx
ffffffff8020f90d:	49 39 ce             	cmp    %rcx,%r14
ffffffff8020f910:	0f 82 ca 01 00 00    	jb     ffffffff8020fae0 <_RME_Pgt_Crt+0x320>
ffffffff8020f916:	4c 89 f2             	mov    %r14,%rdx
ffffffff8020f919:	4c 01 ca             	add    %r9,%rdx
ffffffff8020f91c:	0f 82 be 01 00 00    	jb     ffffffff8020fae0 <_RME_Pgt_Crt+0x320>
ffffffff8020f922:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8020f926:	48 39 50 30          	cmp    %rdx,0x30(%rax)
ffffffff8020f92a:	0f 82 b0 01 00 00    	jb     ffffffff8020fae0 <_RME_Pgt_Crt+0x320>
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
ffffffff8020f930:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
ffffffff8020f935:	4c 89 e9             	mov    %r13,%rcx
ffffffff8020f938:	4d 89 f0             	mov    %r14,%r8
ffffffff8020f93b:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020f93e:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020f941:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff8020f946:	e8 75 bb 00 00       	call   ffffffff8021b4c0 <__RME_Pgt_Check>
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020f94b:	b9 40 00 00 00       	mov    $0x40,%ecx
ffffffff8020f950:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
ffffffff8020f955:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f95c:	44 29 e9             	sub    %r13d,%ecx
ffffffff8020f95f:	29 e9                	sub    %ebp,%ecx
ffffffff8020f961:	48 d3 e8             	shr    %cl,%rax
ffffffff8020f964:	4c 21 e0             	and    %r12,%rax
ffffffff8020f967:	0f 85 bb 01 00 00    	jne    ffffffff8020fb28 <_RME_Pgt_Crt+0x368>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020f96d:	4c 3b 7b 28          	cmp    0x28(%rbx),%r15
ffffffff8020f971:	0f 83 79 01 00 00    	jae    ffffffff8020faf0 <_RME_Pgt_Crt+0x330>
ffffffff8020f977:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f97e:	00 00 00 
ffffffff8020f981:	49 c1 e7 06          	shl    $0x6,%r15
ffffffff8020f985:	4c 03 7b 18          	add    0x18(%rbx),%r15
ffffffff8020f989:	4c 89 fb             	mov    %r15,%rbx
ffffffff8020f98c:	f0 49 0f b1 17       	lock cmpxchg %rdx,(%r15)
ffffffff8020f991:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020f994:	84 d2                	test   %dl,%dl
ffffffff8020f996:	0f 84 64 01 00 00    	je     ffffffff8020fb00 <_RME_Pgt_Crt+0x340>
ffffffff8020f99c:	49 c7 47 20 01 00 00 	movq   $0x1,0x20(%r15)
ffffffff8020f9a3:	00 
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff8020f9a4:	4c 89 ce             	mov    %r9,%rsi
ffffffff8020f9a7:	4c 89 f7             	mov    %r14,%rdi
ffffffff8020f9aa:	e8 61 f9 ff ff       	call   ffffffff8020f310 <_RME_Kot_Mark>
ffffffff8020f9af:	49 89 c7             	mov    %rax,%r15
ffffffff8020f9b2:	48 85 c0             	test   %rax,%rax
ffffffff8020f9b5:	0f 85 55 01 00 00    	jne    ffffffff8020fb10 <_RME_Pgt_Crt+0x350>
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020f9bb:	4c 89 73 18          	mov    %r14,0x18(%rbx)
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f9bf:	4c 8b 74 24 50       	mov    0x50(%rsp),%r14
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f9c4:	48 c1 e5 20          	shl    $0x20,%rbp
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020f9c8:	48 89 df             	mov    %rbx,%rdi
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f9cb:	4c 09 ed             	or     %r13,%rbp
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020f9ce:	66 0f 6f 05 6a da 00 	movdqa 0xda6a(%rip),%xmm0        # ffffffff8021d440 <Table.1+0x120>
ffffffff8020f9d5:	00 
    Pgt_Crt->ASID=0U;
ffffffff8020f9d6:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
ffffffff8020f9dd:	00 
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f9de:	4d 09 e6             	or     %r12,%r14
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f9e1:	48 89 6b 28          	mov    %rbp,0x28(%rbx)
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f9e5:	4c 89 73 30          	mov    %r14,0x30(%rbx)
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020f9e9:	0f 11 43 08          	movups %xmm0,0x8(%rbx)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020f9ed:	e8 1e bb 00 00       	call   ffffffff8021b510 <__RME_Pgt_Init>
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020f9f2:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff8020f9f9:	00 04 00 
ffffffff8020f9fc:	48 89 03             	mov    %rax,(%rbx)
}
ffffffff8020f9ff:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020fa03:	4c 89 f8             	mov    %r15,%rax
ffffffff8020fa06:	5b                   	pop    %rbx
ffffffff8020fa07:	5d                   	pop    %rbp
ffffffff8020fa08:	41 5c                	pop    %r12
ffffffff8020fa0a:	41 5d                	pop    %r13
ffffffff8020fa0c:	41 5e                	pop    %r14
ffffffff8020fa0e:	41 5f                	pop    %r15
ffffffff8020fa10:	c3                   	ret
ffffffff8020fa11:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fa18:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020fa1b:	0f 83 cf 00 00 00    	jae    ffffffff8020faf0 <_RME_Pgt_Crt+0x330>
ffffffff8020fa21:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020fa25:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020fa29:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8020fa30:	ff 00 00 
ffffffff8020fa33:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020fa3a:	00 00 00 
ffffffff8020fa3d:	48 8d 1c 3e          	lea    (%rsi,%rdi,1),%rbx
ffffffff8020fa41:	48 8b 33             	mov    (%rbx),%rsi
ffffffff8020fa44:	49 21 f0             	and    %rsi,%r8
ffffffff8020fa47:	4d 39 c8             	cmp    %r9,%r8
ffffffff8020fa4a:	0f 85 2f fe ff ff    	jne    ffffffff8020f87f <_RME_Pgt_Crt+0xbf>
ffffffff8020fa50:	49 c7 c7 f7 ff ff ff 	mov    $0xfffffffffffffff7,%r15
ffffffff8020fa57:	eb a6                	jmp    ffffffff8020f9ff <_RME_Pgt_Crt+0x23f>
ffffffff8020fa59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020fa60:	48 89 c6             	mov    %rax,%rsi
ffffffff8020fa63:	48 c1 ee 10          	shr    $0x10,%rsi
ffffffff8020fa67:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020fa6a:	0f 83 80 00 00 00    	jae    ffffffff8020faf0 <_RME_Pgt_Crt+0x330>
ffffffff8020fa70:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020fa74:	48 8d 0c 3e          	lea    (%rsi,%rdi,1),%rcx
ffffffff8020fa78:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020fa7f:	ff 00 00 
ffffffff8020fa82:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020fa89:	00 00 00 
ffffffff8020fa8c:	4c 8b 01             	mov    (%rcx),%r8
ffffffff8020fa8f:	4d 89 c1             	mov    %r8,%r9
ffffffff8020fa92:	49 21 f1             	and    %rsi,%r9
ffffffff8020fa95:	49 39 f9             	cmp    %rdi,%r9
ffffffff8020fa98:	74 b6                	je     ffffffff8020fa50 <_RME_Pgt_Crt+0x290>
ffffffff8020fa9a:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8020fa9e:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff8020faa2:	75 2c                	jne    ffffffff8020fad0 <_RME_Pgt_Crt+0x310>
ffffffff8020faa4:	4c 8b 41 28          	mov    0x28(%rcx),%r8
ffffffff8020faa8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020faad:	4c 39 c0             	cmp    %r8,%rax
ffffffff8020fab0:	73 3e                	jae    ffffffff8020faf0 <_RME_Pgt_Crt+0x330>
ffffffff8020fab2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fab6:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020faba:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020fabd:	48 21 ce             	and    %rcx,%rsi
ffffffff8020fac0:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020fac3:	0f 85 00 fe ff ff    	jne    ffffffff8020f8c9 <_RME_Pgt_Crt+0x109>
ffffffff8020fac9:	eb 85                	jmp    ffffffff8020fa50 <_RME_Pgt_Crt+0x290>
ffffffff8020facb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fad0:	49 c7 c7 fe ff ff ff 	mov    $0xfffffffffffffffe,%r15
ffffffff8020fad7:	e9 23 ff ff ff       	jmp    ffffffff8020f9ff <_RME_Pgt_Crt+0x23f>
ffffffff8020fadc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff8020fae0:	49 c7 c7 f9 ff ff ff 	mov    $0xfffffffffffffff9,%r15
ffffffff8020fae7:	e9 13 ff ff ff       	jmp    ffffffff8020f9ff <_RME_Pgt_Crt+0x23f>
ffffffff8020faec:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020faf0:	49 c7 c7 fd ff ff ff 	mov    $0xfffffffffffffffd,%r15
ffffffff8020faf7:	e9 03 ff ff ff       	jmp    ffffffff8020f9ff <_RME_Pgt_Crt+0x23f>
ffffffff8020fafc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fb00:	49 c7 c7 fb ff ff ff 	mov    $0xfffffffffffffffb,%r15
ffffffff8020fb07:	e9 f3 fe ff ff       	jmp    ffffffff8020f9ff <_RME_Pgt_Crt+0x23f>
ffffffff8020fb0c:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020fb10:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CPT_KOT;
ffffffff8020fb17:	49 c7 c7 fc ff ff ff 	mov    $0xfffffffffffffffc,%r15
ffffffff8020fb1e:	e9 dc fe ff ff       	jmp    ffffffff8020f9ff <_RME_Pgt_Crt+0x23f>
ffffffff8020fb23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return RME_ERR_PGT_HW;
ffffffff8020fb28:	49 c7 c7 99 ff ff ff 	mov    $0xffffffffffffff99,%r15
ffffffff8020fb2f:	e9 cb fe ff ff       	jmp    ffffffff8020f9ff <_RME_Pgt_Crt+0x23f>
ffffffff8020fb34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020fb3b:	00 00 00 00 
ffffffff8020fb3f:	90                   	nop

ffffffff8020fb40 <_RME_Thd_Crt>:
{
ffffffff8020fb40:	41 57                	push   %r15
ffffffff8020fb42:	49 89 cf             	mov    %rcx,%r15
ffffffff8020fb45:	41 56                	push   %r14
ffffffff8020fb47:	49 89 f6             	mov    %rsi,%r14
ffffffff8020fb4a:	41 55                	push   %r13
ffffffff8020fb4c:	49 89 fd             	mov    %rdi,%r13
ffffffff8020fb4f:	41 54                	push   %r12
ffffffff8020fb51:	4d 89 cc             	mov    %r9,%r12
ffffffff8020fb54:	55                   	push   %rbp
ffffffff8020fb55:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020fb58:	53                   	push   %rbx
ffffffff8020fb59:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020fb5c:	48 83 ec 08          	sub    $0x8,%rsp
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
ffffffff8020fb60:	e8 da cc ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
ffffffff8020fb65:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020fb69:	4c 39 60 48          	cmp    %r12,0x48(%rax)
ffffffff8020fb6d:	0f 82 5d 04 00 00    	jb     ffffffff8020ffd0 <_RME_Thd_Crt+0x490>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fb73:	49 8b 4d 28          	mov    0x28(%r13),%rcx
ffffffff8020fb77:	41 f7 c6 00 80 00 00 	test   $0x8000,%r14d
ffffffff8020fb7e:	0f 84 ac 02 00 00    	je     ffffffff8020fe30 <_RME_Thd_Crt+0x2f0>
ffffffff8020fb84:	4d 89 f1             	mov    %r14,%r9
ffffffff8020fb87:	49 c1 e9 10          	shr    $0x10,%r9
ffffffff8020fb8b:	49 39 c9             	cmp    %rcx,%r9
ffffffff8020fb8e:	0f 83 1c 04 00 00    	jae    ffffffff8020ffb0 <_RME_Thd_Crt+0x470>
ffffffff8020fb94:	49 8b 75 18          	mov    0x18(%r13),%rsi
ffffffff8020fb98:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020fb9c:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff8020fba3:	ff 00 00 
ffffffff8020fba6:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020fbad:	00 00 00 
ffffffff8020fbb0:	49 01 f1             	add    %rsi,%r9
ffffffff8020fbb3:	49 8b 11             	mov    (%r9),%rdx
ffffffff8020fbb6:	49 89 d2             	mov    %rdx,%r10
ffffffff8020fbb9:	49 21 c2             	and    %rax,%r10
ffffffff8020fbbc:	4d 39 c2             	cmp    %r8,%r10
ffffffff8020fbbf:	0f 84 cb 03 00 00    	je     ffffffff8020ff90 <_RME_Thd_Crt+0x450>
ffffffff8020fbc5:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020fbc9:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020fbcd:	0f 85 ad 02 00 00    	jne    ffffffff8020fe80 <_RME_Thd_Crt+0x340>
ffffffff8020fbd3:	4c 89 f2             	mov    %r14,%rdx
ffffffff8020fbd6:	49 8b 79 28          	mov    0x28(%r9),%rdi
ffffffff8020fbda:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020fbe0:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020fbe3:	0f 83 c7 03 00 00    	jae    ffffffff8020ffb0 <_RME_Thd_Crt+0x470>
ffffffff8020fbe9:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020fbed:	49 03 51 18          	add    0x18(%r9),%rdx
ffffffff8020fbf1:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff8020fbf4:	48 21 f8             	and    %rdi,%rax
ffffffff8020fbf7:	4c 39 c0             	cmp    %r8,%rax
ffffffff8020fbfa:	0f 84 90 03 00 00    	je     ffffffff8020ff90 <_RME_Thd_Crt+0x450>
ffffffff8020fc00:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020fc04:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020fc08:	0f 85 72 02 00 00    	jne    ffffffff8020fe80 <_RME_Thd_Crt+0x340>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020fc0e:	f6 c7 80             	test   $0x80,%bh
ffffffff8020fc11:	0f 85 79 02 00 00    	jne    ffffffff8020fe90 <_RME_Thd_Crt+0x350>
ffffffff8020fc17:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020fc1a:	0f 83 90 03 00 00    	jae    ffffffff8020ffb0 <_RME_Thd_Crt+0x470>
ffffffff8020fc20:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8020fc27:	ff 00 00 
ffffffff8020fc2a:	48 89 d8             	mov    %rbx,%rax
ffffffff8020fc2d:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020fc34:	00 00 00 
ffffffff8020fc37:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fc3b:	48 01 f0             	add    %rsi,%rax
ffffffff8020fc3e:	48 8b 38             	mov    (%rax),%rdi
ffffffff8020fc41:	49 21 f8             	and    %rdi,%r8
ffffffff8020fc44:	4d 39 c8             	cmp    %r9,%r8
ffffffff8020fc47:	0f 84 43 03 00 00    	je     ffffffff8020ff90 <_RME_Thd_Crt+0x450>
ffffffff8020fc4d:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020fc51:	48 83 ff 02          	cmp    $0x2,%rdi
ffffffff8020fc55:	0f 85 25 02 00 00    	jne    ffffffff8020fe80 <_RME_Thd_Crt+0x340>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020fc5b:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020fc61:	0f 85 b6 02 00 00    	jne    ffffffff8020ff1d <_RME_Thd_Crt+0x3dd>
ffffffff8020fc67:	48 39 cd             	cmp    %rcx,%rbp
ffffffff8020fc6a:	0f 83 40 03 00 00    	jae    ffffffff8020ffb0 <_RME_Thd_Crt+0x470>
ffffffff8020fc70:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020fc77:	00 00 00 
ffffffff8020fc7a:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020fc7e:	48 01 f5             	add    %rsi,%rbp
ffffffff8020fc81:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020fc88:	ff 00 00 
ffffffff8020fc8b:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
ffffffff8020fc8f:	48 21 ce             	and    %rcx,%rsi
ffffffff8020fc92:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020fc95:	0f 84 f5 02 00 00    	je     ffffffff8020ff90 <_RME_Thd_Crt+0x450>
ffffffff8020fc9b:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020fc9f:	48 83 f9 05          	cmp    $0x5,%rcx
ffffffff8020fca3:	0f 85 d7 01 00 00    	jne    ffffffff8020fe80 <_RME_Thd_Crt+0x340>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fca9:	f6 42 10 01          	testb  $0x1,0x10(%rdx)
ffffffff8020fcad:	0f 84 ed 02 00 00    	je     ffffffff8020ffa0 <_RME_Thd_Crt+0x460>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff8020fcb3:	f6 45 10 02          	testb  $0x2,0x10(%rbp)
ffffffff8020fcb7:	0f 84 e3 02 00 00    	je     ffffffff8020ffa0 <_RME_Thd_Crt+0x460>
    if(Is_Hyp==0U)
ffffffff8020fcbd:	48 83 7c 24 50 00    	cmpq   $0x0,0x50(%rsp)
ffffffff8020fcc3:	0f 85 13 03 00 00    	jne    ffffffff8020ffdc <_RME_Thd_Crt+0x49c>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff8020fcc9:	f6 40 10 04          	testb  $0x4,0x10(%rax)
ffffffff8020fccd:	0f 84 cd 02 00 00    	je     ffffffff8020ffa0 <_RME_Thd_Crt+0x460>
ffffffff8020fcd3:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8020fcd7:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
ffffffff8020fcdc:	48 01 cb             	add    %rcx,%rbx
ffffffff8020fcdf:	48 3b 4c 24 40       	cmp    0x40(%rsp),%rcx
ffffffff8020fce4:	48 0f 42 4c 24 40    	cmovb  0x40(%rsp),%rcx
ffffffff8020fcea:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020fced:	0f 82 ad 02 00 00    	jb     ffffffff8020ffa0 <_RME_Thd_Crt+0x460>
ffffffff8020fcf3:	48 81 fb 9f fe ff ff 	cmp    $0xfffffffffffffe9f,%rbx
ffffffff8020fcfa:	0f 87 a0 02 00 00    	ja     ffffffff8020ffa0 <_RME_Thd_Crt+0x460>
ffffffff8020fd00:	48 8d 8b 5f 01 00 00 	lea    0x15f(%rbx),%rcx
ffffffff8020fd07:	48 39 48 30          	cmp    %rcx,0x30(%rax)
ffffffff8020fd0b:	0f 82 8f 02 00 00    	jb     ffffffff8020ffa0 <_RME_Thd_Crt+0x460>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8020fd11:	4c 3b 7a 28          	cmp    0x28(%rdx),%r15
ffffffff8020fd15:	0f 83 95 02 00 00    	jae    ffffffff8020ffb0 <_RME_Thd_Crt+0x470>
ffffffff8020fd1b:	4c 8b 6a 18          	mov    0x18(%rdx),%r13
ffffffff8020fd1f:	49 c1 e7 06          	shl    $0x6,%r15
ffffffff8020fd23:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
ffffffff8020fd28:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fd2f:	00 00 00 
ffffffff8020fd32:	4d 01 fd             	add    %r15,%r13
ffffffff8020fd35:	f0 49 0f b1 55 00    	lock cmpxchg %rdx,0x0(%r13)
ffffffff8020fd3b:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020fd3e:	84 d2                	test   %dl,%dl
ffffffff8020fd40:	0f 84 7a 02 00 00    	je     ffffffff8020ffc0 <_RME_Thd_Crt+0x480>
ffffffff8020fd46:	49 c7 45 20 01 00 00 	movq   $0x1,0x20(%r13)
ffffffff8020fd4d:	00 
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff8020fd4e:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8020fd53:	48 89 df             	mov    %rbx,%rdi
ffffffff8020fd56:	e8 b5 f5 ff ff       	call   ffffffff8020f310 <_RME_Kot_Mark>
ffffffff8020fd5b:	48 85 c0             	test   %rax,%rax
ffffffff8020fd5e:	0f 88 84 02 00 00    	js     ffffffff8020ffe8 <_RME_Thd_Crt+0x4a8>
    Thread->Sched.Slice=0U;
ffffffff8020fd64:	66 0f 6f 05 e4 d6 00 	movdqa 0xd6e4(%rip),%xmm0        # ffffffff8021d450 <Table.1+0x130>
ffffffff8020fd6b:	00 
    Thread->Sched.TID=0U;
ffffffff8020fd6c:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
ffffffff8020fd73:	00 
    Thread->Sched.Slice=0U;
ffffffff8020fd74:	0f 11 43 30          	movups %xmm0,0x30(%rbx)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8020fd78:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020fd7b:	85 c0                	test   %eax,%eax
ffffffff8020fd7d:	74 04                	je     ffffffff8020fd83 <_RME_Thd_Crt+0x243>
ffffffff8020fd7f:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    Thread->Sched.Prc=Prc_Root;
ffffffff8020fd83:	48 89 6b 58          	mov    %rbp,0x58(%rbx)
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8020fd87:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    Thread->Sched.Signal=0U;
ffffffff8020fd8b:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
ffffffff8020fd92:	00 
    Thread->Sched.Prio_Max=Prio_Max;
ffffffff8020fd93:	4c 89 63 48          	mov    %r12,0x48(%rbx)
    Thread->Sched.Sched_Ref=0U;
ffffffff8020fd97:	48 c7 43 60 00 00 00 	movq   $0x0,0x60(%rbx)
ffffffff8020fd9e:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff8020fd9f:	48 c7 43 70 00 00 00 	movq   $0x0,0x70(%rbx)
ffffffff8020fda6:	00 
    Thread->Sched.Local=RME_THD_FREE;
ffffffff8020fda7:	48 c7 43 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rbx)
ffffffff8020fdae:	ff 
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8020fdaf:	e8 dc ec ff ff       	call   ffffffff8020ea90 <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff8020fdb4:	48 8d 7b 78          	lea    0x78(%rbx),%rdi
ffffffff8020fdb8:	e8 d3 ec ff ff       	call   ffffffff8020ea90 <_RME_List_Crt>
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff8020fdbd:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff8020fdc2:	48 8d bb 98 00 00 00 	lea    0x98(%rbx),%rdi
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff8020fdc9:	48 89 83 88 00 00 00 	mov    %rax,0x88(%rbx)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff8020fdd0:	48 8d 83 b0 00 00 00 	lea    0xb0(%rbx),%rax
ffffffff8020fdd7:	48 89 83 90 00 00 00 	mov    %rax,0x90(%rbx)
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff8020fdde:	e8 ad ec ff ff       	call   ffffffff8020ea90 <_RME_List_Crt>
    Thd_Crt->Head.Root_Ref=0U;
ffffffff8020fde3:	66 0f 6f 05 75 d6 00 	movdqa 0xd675(%rip),%xmm0        # ffffffff8021d460 <Table.1+0x140>
ffffffff8020fdea:	00 
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020fdeb:	b8 01 00 00 00       	mov    $0x1,%eax
    Thread->Ctx.Invstk_Depth=0U;
ffffffff8020fdf0:	48 c7 83 a8 00 00 00 	movq   $0x0,0xa8(%rbx)
ffffffff8020fdf7:	00 00 00 00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff8020fdfb:	49 89 5d 18          	mov    %rbx,0x18(%r13)
    Thd_Crt->Head.Root_Ref=0U;
ffffffff8020fdff:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
ffffffff8020fe04:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff8020fe0a:	48 b8 00 00 00 00 00 	movabs $0x6000000000000,%rax
ffffffff8020fe11:	00 06 00 
ffffffff8020fe14:	49 89 45 00          	mov    %rax,0x0(%r13)
    return 0;
ffffffff8020fe18:	31 c0                	xor    %eax,%eax
}
ffffffff8020fe1a:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020fe1e:	5b                   	pop    %rbx
ffffffff8020fe1f:	5d                   	pop    %rbp
ffffffff8020fe20:	41 5c                	pop    %r12
ffffffff8020fe22:	41 5d                	pop    %r13
ffffffff8020fe24:	41 5e                	pop    %r14
ffffffff8020fe26:	41 5f                	pop    %r15
ffffffff8020fe28:	c3                   	ret
ffffffff8020fe29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fe30:	49 39 ce             	cmp    %rcx,%r14
ffffffff8020fe33:	0f 83 77 01 00 00    	jae    ffffffff8020ffb0 <_RME_Thd_Crt+0x470>
ffffffff8020fe39:	49 8b 75 18          	mov    0x18(%r13),%rsi
ffffffff8020fe3d:	4c 89 f2             	mov    %r14,%rdx
ffffffff8020fe40:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020fe47:	ff 00 00 
ffffffff8020fe4a:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020fe51:	00 00 00 
ffffffff8020fe54:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020fe58:	48 01 f2             	add    %rsi,%rdx
ffffffff8020fe5b:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020fe5e:	48 21 c7             	and    %rax,%rdi
ffffffff8020fe61:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020fe64:	0f 84 26 01 00 00    	je     ffffffff8020ff90 <_RME_Thd_Crt+0x450>
ffffffff8020fe6a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fe6e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fe72:	0f 84 96 fd ff ff    	je     ffffffff8020fc0e <_RME_Thd_Crt+0xce>
ffffffff8020fe78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020fe7f:	00 
ffffffff8020fe80:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fe87:	eb 91                	jmp    ffffffff8020fe1a <_RME_Thd_Crt+0x2da>
ffffffff8020fe89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020fe90:	49 89 d9             	mov    %rbx,%r9
ffffffff8020fe93:	49 c1 e9 10          	shr    $0x10,%r9
ffffffff8020fe97:	49 39 c9             	cmp    %rcx,%r9
ffffffff8020fe9a:	0f 83 10 01 00 00    	jae    ffffffff8020ffb0 <_RME_Thd_Crt+0x470>
ffffffff8020fea0:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020fea7:	ff 00 00 
ffffffff8020feaa:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020feae:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020feb5:	00 00 00 
ffffffff8020feb8:	49 01 f1             	add    %rsi,%r9
ffffffff8020febb:	49 8b 01             	mov    (%r9),%rax
ffffffff8020febe:	49 89 c2             	mov    %rax,%r10
ffffffff8020fec1:	49 21 fa             	and    %rdi,%r10
ffffffff8020fec4:	4d 39 c2             	cmp    %r8,%r10
ffffffff8020fec7:	0f 84 c3 00 00 00    	je     ffffffff8020ff90 <_RME_Thd_Crt+0x450>
ffffffff8020fecd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fed1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fed5:	75 a9                	jne    ffffffff8020fe80 <_RME_Thd_Crt+0x340>
ffffffff8020fed7:	48 89 d8             	mov    %rbx,%rax
ffffffff8020feda:	4d 8b 51 28          	mov    0x28(%r9),%r10
ffffffff8020fede:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fee3:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020fee6:	0f 83 c4 00 00 00    	jae    ffffffff8020ffb0 <_RME_Thd_Crt+0x470>
ffffffff8020feec:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fef0:	49 03 41 18          	add    0x18(%r9),%rax
ffffffff8020fef4:	4c 8b 08             	mov    (%rax),%r9
ffffffff8020fef7:	4c 21 cf             	and    %r9,%rdi
ffffffff8020fefa:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020fefd:	0f 84 8d 00 00 00    	je     ffffffff8020ff90 <_RME_Thd_Crt+0x450>
ffffffff8020ff03:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8020ff07:	49 83 f9 02          	cmp    $0x2,%r9
ffffffff8020ff0b:	0f 85 6f ff ff ff    	jne    ffffffff8020fe80 <_RME_Thd_Crt+0x340>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020ff11:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020ff17:	0f 84 4a fd ff ff    	je     ffffffff8020fc67 <_RME_Thd_Crt+0x127>
ffffffff8020ff1d:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020ff20:	48 c1 ef 10          	shr    $0x10,%rdi
ffffffff8020ff24:	48 39 cf             	cmp    %rcx,%rdi
ffffffff8020ff27:	0f 83 83 00 00 00    	jae    ffffffff8020ffb0 <_RME_Thd_Crt+0x470>
ffffffff8020ff2d:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020ff34:	00 00 00 
ffffffff8020ff37:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff8020ff3b:	48 8d 0c 37          	lea    (%rdi,%rsi,1),%rcx
ffffffff8020ff3f:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020ff46:	ff 00 00 
ffffffff8020ff49:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8020ff4c:	49 89 f1             	mov    %rsi,%r9
ffffffff8020ff4f:	49 21 f9             	and    %rdi,%r9
ffffffff8020ff52:	4d 39 c1             	cmp    %r8,%r9
ffffffff8020ff55:	74 39                	je     ffffffff8020ff90 <_RME_Thd_Crt+0x450>
ffffffff8020ff57:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020ff5b:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020ff5f:	0f 85 1b ff ff ff    	jne    ffffffff8020fe80 <_RME_Thd_Crt+0x340>
ffffffff8020ff65:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020ff69:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8020ff6f:	48 39 f5             	cmp    %rsi,%rbp
ffffffff8020ff72:	73 3c                	jae    ffffffff8020ffb0 <_RME_Thd_Crt+0x470>
ffffffff8020ff74:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020ff78:	48 03 69 18          	add    0x18(%rcx),%rbp
ffffffff8020ff7c:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
ffffffff8020ff80:	48 21 cf             	and    %rcx,%rdi
ffffffff8020ff83:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020ff86:	0f 85 0f fd ff ff    	jne    ffffffff8020fc9b <_RME_Thd_Crt+0x15b>
ffffffff8020ff8c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ff90:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ff97:	e9 7e fe ff ff       	jmp    ffffffff8020fe1a <_RME_Thd_Crt+0x2da>
ffffffff8020ff9c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020ffa0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ffa7:	e9 6e fe ff ff       	jmp    ffffffff8020fe1a <_RME_Thd_Crt+0x2da>
ffffffff8020ffac:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ffb0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ffb7:	e9 5e fe ff ff       	jmp    ffffffff8020fe1a <_RME_Thd_Crt+0x2da>
ffffffff8020ffbc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020ffc0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020ffc7:	e9 4e fe ff ff       	jmp    ffffffff8020fe1a <_RME_Thd_Crt+0x2da>
ffffffff8020ffcc:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_PRIO;
ffffffff8020ffd0:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8020ffd7:	e9 3e fe ff ff       	jmp    ffffffff8020fe1a <_RME_Thd_Crt+0x2da>
        return RME_ERR_PTH_HADDR;
ffffffff8020ffdc:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8020ffe3:	e9 32 fe ff ff       	jmp    ffffffff8020fe1a <_RME_Thd_Crt+0x2da>
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff8020ffe8:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
ffffffff8020ffef:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020fff0:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020fff7:	e9 1e fe ff ff       	jmp    ffffffff8020fe1a <_RME_Thd_Crt+0x2da>
ffffffff8020fffc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80210000 <_RME_Cpt_Boot_Init>:
{
ffffffff80210000:	f3 0f 1e fa          	endbr64
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff80210004:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
ffffffff80210008:	48 3d ff 7f 00 00    	cmp    $0x7fff,%rax
ffffffff8021000e:	0f 87 97 00 00 00    	ja     ffffffff802100ab <_RME_Cpt_Boot_Init+0xab>
{
ffffffff80210014:	41 55                	push   %r13
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff80210016:	49 89 d5             	mov    %rdx,%r13
{
ffffffff80210019:	41 54                	push   %r12
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8021001b:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8021001f:	49 89 d4             	mov    %rdx,%r12
{
ffffffff80210022:	55                   	push   %rbp
ffffffff80210023:	48 89 fd             	mov    %rdi,%rbp
ffffffff80210026:	53                   	push   %rbx
ffffffff80210027:	48 89 f3             	mov    %rsi,%rbx
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8021002a:	4c 89 ee             	mov    %r13,%rsi
ffffffff8021002d:	48 89 df             	mov    %rbx,%rdi
{
ffffffff80210030:	48 83 ec 08          	sub    $0x8,%rsp
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff80210034:	e8 d7 f2 ff ff       	call   ffffffff8020f310 <_RME_Kot_Mark>
ffffffff80210039:	48 85 c0             	test   %rax,%rax
ffffffff8021003c:	75 75                	jne    ffffffff802100b3 <_RME_Cpt_Boot_Init+0xb3>
ffffffff8021003e:	49 8d 54 1d 00       	lea    0x0(%r13,%rbx,1),%rdx
ffffffff80210043:	41 83 e5 40          	and    $0x40,%r13d
ffffffff80210047:	48 89 d8             	mov    %rbx,%rax
ffffffff8021004a:	74 14                	je     ffffffff80210060 <_RME_Cpt_Boot_Init+0x60>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8021004c:	48 8d 43 40          	lea    0x40(%rbx),%rax
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff80210050:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff80210057:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021005a:	74 1c                	je     ffffffff80210078 <_RME_Cpt_Boot_Init+0x78>
ffffffff8021005c:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff80210060:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff80210067:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8021006b:	48 c7 40 c0 00 00 00 	movq   $0x0,-0x40(%rax)
ffffffff80210072:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff80210073:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210076:	75 e8                	jne    ffffffff80210060 <_RME_Cpt_Boot_Init+0x60>
    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff80210078:	48 89 e8             	mov    %rbp,%rax
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8021007b:	66 0f 6f 05 ed d3 00 	movdqa 0xd3ed(%rip),%xmm0        # ffffffff8021d470 <Table.1+0x150>
ffffffff80210082:	00 
    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff80210083:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210087:	48 01 d8             	add    %rbx,%rax
    Cpt->Head.Object=Vaddr;
ffffffff8021008a:	48 89 58 18          	mov    %rbx,0x18(%rax)
    Cpt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8021008e:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff80210095:	00 
    Cpt->Entry_Num=Entry_Num;
ffffffff80210096:	4c 89 60 28          	mov    %r12,0x28(%rax)
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8021009a:	0f 11 00             	movups %xmm0,(%rax)
    return Cap_Cpt;
ffffffff8021009d:	48 89 e8             	mov    %rbp,%rax
}
ffffffff802100a0:	48 83 c4 08          	add    $0x8,%rsp
ffffffff802100a4:	5b                   	pop    %rbx
ffffffff802100a5:	5d                   	pop    %rbp
ffffffff802100a6:	41 5c                	pop    %r12
ffffffff802100a8:	41 5d                	pop    %r13
ffffffff802100aa:	c3                   	ret
        return RME_ERR_CPT_RANGE;
ffffffff802100ab:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff802100b2:	c3                   	ret
        return RME_ERR_CPT_KOT;
ffffffff802100b3:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff802100ba:	eb e4                	jmp    ffffffff802100a0 <_RME_Cpt_Boot_Init+0xa0>
ffffffff802100bc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff802100c0 <_RME_Cpt_Boot_Crt>:
{
ffffffff802100c0:	f3 0f 1e fa          	endbr64
ffffffff802100c4:	41 55                	push   %r13
ffffffff802100c6:	41 54                	push   %r12
ffffffff802100c8:	55                   	push   %rbp
ffffffff802100c9:	53                   	push   %rbx
ffffffff802100ca:	48 89 d3             	mov    %rdx,%rbx
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff802100cd:	49 8d 50 ff          	lea    -0x1(%r8),%rdx
{
ffffffff802100d1:	48 83 ec 08          	sub    $0x8,%rsp
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff802100d5:	48 81 fa ff 7f 00 00 	cmp    $0x7fff,%rdx
ffffffff802100dc:	0f 87 97 01 00 00    	ja     ffffffff80210279 <_RME_Cpt_Boot_Crt+0x1b9>
ffffffff802100e2:	48 89 f0             	mov    %rsi,%rax
ffffffff802100e5:	48 89 cd             	mov    %rcx,%rbp
ffffffff802100e8:	4d 89 c4             	mov    %r8,%r12
    RME_CPT_GETCAP(Cpt,
ffffffff802100eb:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff802100ef:	f6 c4 80             	test   $0x80,%ah
ffffffff802100f2:	0f 84 48 01 00 00    	je     ffffffff80210240 <_RME_Cpt_Boot_Crt+0x180>
ffffffff802100f8:	48 89 f2             	mov    %rsi,%rdx
ffffffff802100fb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802100ff:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80210102:	0f 83 71 01 00 00    	jae    ffffffff80210279 <_RME_Cpt_Boot_Crt+0x1b9>
ffffffff80210108:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8021010f:	ff 00 00 
ffffffff80210112:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210116:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8021011a:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80210121:	00 00 00 
ffffffff80210124:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80210127:	49 89 c8             	mov    %rcx,%r8
ffffffff8021012a:	49 21 f0             	and    %rsi,%r8
ffffffff8021012d:	49 39 f8             	cmp    %rdi,%r8
ffffffff80210130:	0f 84 3a 01 00 00    	je     ffffffff80210270 <_RME_Cpt_Boot_Crt+0x1b0>
ffffffff80210136:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021013a:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021013e:	0f 85 3e 01 00 00    	jne    ffffffff80210282 <_RME_Cpt_Boot_Crt+0x1c2>
ffffffff80210144:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80210148:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021014d:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210150:	0f 83 23 01 00 00    	jae    ffffffff80210279 <_RME_Cpt_Boot_Crt+0x1b9>
ffffffff80210156:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021015a:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021015e:	48 8b 10             	mov    (%rax),%rdx
ffffffff80210161:	48 21 d6             	and    %rdx,%rsi
ffffffff80210164:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80210167:	0f 84 03 01 00 00    	je     ffffffff80210270 <_RME_Cpt_Boot_Crt+0x1b0>
ffffffff8021016d:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80210171:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80210175:	0f 85 07 01 00 00    	jne    ffffffff80210282 <_RME_Cpt_Boot_Crt+0x1c2>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8021017b:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8021017f:	0f 84 1f 01 00 00    	je     ffffffff802102a4 <_RME_Cpt_Boot_Crt+0x1e4>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff80210185:	48 3b 58 28          	cmp    0x28(%rax),%rbx
ffffffff80210189:	0f 83 ea 00 00 00    	jae    ffffffff80210279 <_RME_Cpt_Boot_Crt+0x1b9>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021018f:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80210196:	00 00 00 
ffffffff80210199:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8021019d:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff802101a1:	31 c0                	xor    %eax,%eax
ffffffff802101a3:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff802101a8:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff802101ab:	84 d2                	test   %dl,%dl
ffffffff802101ad:	0f 84 d8 00 00 00    	je     ffffffff8021028b <_RME_Cpt_Boot_Crt+0x1cb>
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff802101b3:	4d 89 e5             	mov    %r12,%r13
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff802101b6:	48 c7 43 20 01 00 00 	movq   $0x1,0x20(%rbx)
ffffffff802101bd:	00 
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff802101be:	48 89 ef             	mov    %rbp,%rdi
ffffffff802101c1:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff802101c5:	4c 89 ee             	mov    %r13,%rsi
ffffffff802101c8:	e8 43 f1 ff ff       	call   ffffffff8020f310 <_RME_Kot_Mark>
ffffffff802101cd:	48 85 c0             	test   %rax,%rax
ffffffff802101d0:	0f 85 be 00 00 00    	jne    ffffffff80210294 <_RME_Cpt_Boot_Crt+0x1d4>
ffffffff802101d6:	49 8d 4c 2d 00       	lea    0x0(%r13,%rbp,1),%rcx
ffffffff802101db:	41 83 e5 40          	and    $0x40,%r13d
ffffffff802101df:	48 89 ea             	mov    %rbp,%rdx
ffffffff802101e2:	74 14                	je     ffffffff802101f8 <_RME_Cpt_Boot_Crt+0x138>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff802101e4:	48 8d 55 40          	lea    0x40(%rbp),%rdx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff802101e8:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff802101ef:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff802101f0:	48 39 d1             	cmp    %rdx,%rcx
ffffffff802101f3:	74 1b                	je     ffffffff80210210 <_RME_Cpt_Boot_Crt+0x150>
ffffffff802101f5:	0f 1f 00             	nopl   (%rax)
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff802101f8:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff802101ff:	48 83 ea 80          	sub    $0xffffffffffffff80,%rdx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff80210203:	48 c7 42 c0 00 00 00 	movq   $0x0,-0x40(%rdx)
ffffffff8021020a:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8021020b:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8021020e:	75 e8                	jne    ffffffff802101f8 <_RME_Cpt_Boot_Crt+0x138>
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff80210210:	48 be 00 00 00 00 00 	movabs $0x3000000000000,%rsi
ffffffff80210217:	00 03 00 
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8021021a:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff80210221:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff80210222:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff80210226:	48 c7 43 10 ff 00 00 	movq   $0xff,0x10(%rbx)
ffffffff8021022d:	00 
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8021022e:	4c 89 63 28          	mov    %r12,0x28(%rbx)
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff80210232:	48 89 33             	mov    %rsi,(%rbx)
}
ffffffff80210235:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80210239:	5b                   	pop    %rbx
ffffffff8021023a:	5d                   	pop    %rbp
ffffffff8021023b:	41 5c                	pop    %r12
ffffffff8021023d:	41 5d                	pop    %r13
ffffffff8021023f:	c3                   	ret
    RME_CPT_GETCAP(Cpt,
ffffffff80210240:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80210243:	73 34                	jae    ffffffff80210279 <_RME_Cpt_Boot_Crt+0x1b9>
ffffffff80210245:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8021024c:	ff 00 00 
ffffffff8021024f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210253:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80210257:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021025e:	00 00 00 
ffffffff80210261:	48 8b 10             	mov    (%rax),%rdx
ffffffff80210264:	48 21 d1             	and    %rdx,%rcx
ffffffff80210267:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021026a:	0f 85 fd fe ff ff    	jne    ffffffff8021016d <_RME_Cpt_Boot_Crt+0xad>
ffffffff80210270:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210277:	eb bc                	jmp    ffffffff80210235 <_RME_Cpt_Boot_Crt+0x175>
        return RME_ERR_CPT_RANGE;
ffffffff80210279:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210280:	eb b3                	jmp    ffffffff80210235 <_RME_Cpt_Boot_Crt+0x175>
    RME_CPT_GETCAP(Cpt,
ffffffff80210282:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210289:	eb aa                	jmp    ffffffff80210235 <_RME_Cpt_Boot_Crt+0x175>
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8021028b:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80210292:	eb a1                	jmp    ffffffff80210235 <_RME_Cpt_Boot_Crt+0x175>
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff80210294:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CPT_KOT;
ffffffff8021029b:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff802102a2:	eb 91                	jmp    ffffffff80210235 <_RME_Cpt_Boot_Crt+0x175>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802102a4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802102ab:	eb 88                	jmp    ffffffff80210235 <_RME_Cpt_Boot_Crt+0x175>
ffffffff802102ad:	0f 1f 00             	nopl   (%rax)

ffffffff802102b0 <_RME_Pgt_Boot_Crt>:
{
ffffffff802102b0:	f3 0f 1e fa          	endbr64
ffffffff802102b4:	41 57                	push   %r15
ffffffff802102b6:	41 56                	push   %r14
ffffffff802102b8:	41 55                	push   %r13
ffffffff802102ba:	41 54                	push   %r12
ffffffff802102bc:	55                   	push   %rbp
ffffffff802102bd:	53                   	push   %rbx
ffffffff802102be:	48 89 d3             	mov    %rdx,%rbx
ffffffff802102c1:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff802102c5:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
ffffffff802102ca:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff802102cf:	4b 8d 14 34          	lea    (%r12,%r14,1),%rdx
ffffffff802102d3:	48 83 fa 40          	cmp    $0x40,%rdx
ffffffff802102d7:	0f 87 2b 02 00 00    	ja     ffffffff80210508 <_RME_Pgt_Boot_Crt+0x258>
ffffffff802102dd:	48 89 f0             	mov    %rsi,%rax
ffffffff802102e0:	49 89 cd             	mov    %rcx,%r13
ffffffff802102e3:	4c 89 c5             	mov    %r8,%rbp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802102e6:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff802102ea:	4d 89 cf             	mov    %r9,%r15
ffffffff802102ed:	f6 c4 80             	test   $0x80,%ah
ffffffff802102f0:	0f 84 8a 01 00 00    	je     ffffffff80210480 <_RME_Pgt_Boot_Crt+0x1d0>
ffffffff802102f6:	48 89 f2             	mov    %rsi,%rdx
ffffffff802102f9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802102fd:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80210300:	0f 83 ca 01 00 00    	jae    ffffffff802104d0 <_RME_Pgt_Boot_Crt+0x220>
ffffffff80210306:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8021030d:	ff 00 00 
ffffffff80210310:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210314:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff80210318:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021031f:	00 00 00 
ffffffff80210322:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80210325:	49 89 c8             	mov    %rcx,%r8
ffffffff80210328:	49 21 f0             	and    %rsi,%r8
ffffffff8021032b:	49 39 f8             	cmp    %rdi,%r8
ffffffff8021032e:	0f 84 7f 01 00 00    	je     ffffffff802104b3 <_RME_Pgt_Boot_Crt+0x203>
ffffffff80210334:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210338:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021033c:	0f 85 7e 01 00 00    	jne    ffffffff802104c0 <_RME_Pgt_Boot_Crt+0x210>
ffffffff80210342:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80210346:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021034b:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021034e:	0f 83 7c 01 00 00    	jae    ffffffff802104d0 <_RME_Pgt_Boot_Crt+0x220>
ffffffff80210354:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210358:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021035c:	49 89 c1             	mov    %rax,%r9
ffffffff8021035f:	48 8b 00             	mov    (%rax),%rax
ffffffff80210362:	48 21 c6             	and    %rax,%rsi
ffffffff80210365:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80210368:	0f 84 45 01 00 00    	je     ffffffff802104b3 <_RME_Pgt_Boot_Crt+0x203>
ffffffff8021036e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210372:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210376:	0f 85 44 01 00 00    	jne    ffffffff802104c0 <_RME_Pgt_Boot_Crt+0x210>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8021037c:	41 f6 41 10 01       	testb  $0x1,0x10(%r9)
ffffffff80210381:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff80210386:	0f 84 54 01 00 00    	je     ffffffff802104e0 <_RME_Pgt_Boot_Crt+0x230>
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)!=0)
ffffffff8021038c:	4d 89 e8             	mov    %r13,%r8
ffffffff8021038f:	4c 89 f1             	mov    %r14,%rcx
ffffffff80210392:	4c 89 e2             	mov    %r12,%rdx
ffffffff80210395:	4c 89 fe             	mov    %r15,%rsi
ffffffff80210398:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021039b:	e8 20 b1 00 00       	call   ffffffff8021b4c0 <__RME_Pgt_Check>
ffffffff802103a0:	48 85 c0             	test   %rax,%rax
ffffffff802103a3:	0f 85 5f 01 00 00    	jne    ffffffff80210508 <_RME_Pgt_Boot_Crt+0x258>
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff802103a9:	b9 40 00 00 00       	mov    $0x40,%ecx
ffffffff802103ae:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802103b5:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
ffffffff802103ba:	44 29 f1             	sub    %r14d,%ecx
ffffffff802103bd:	44 29 e1             	sub    %r12d,%ecx
ffffffff802103c0:	48 d3 e8             	shr    %cl,%rax
ffffffff802103c3:	48 21 e8             	and    %rbp,%rax
ffffffff802103c6:	0f 85 3c 01 00 00    	jne    ffffffff80210508 <_RME_Pgt_Boot_Crt+0x258>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff802103cc:	49 3b 59 28          	cmp    0x28(%r9),%rbx
ffffffff802103d0:	0f 83 fa 00 00 00    	jae    ffffffff802104d0 <_RME_Pgt_Boot_Crt+0x220>
ffffffff802103d6:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802103dd:	00 00 00 
ffffffff802103e0:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff802103e4:	49 03 59 18          	add    0x18(%r9),%rbx
ffffffff802103e8:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff802103ed:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff802103f0:	84 d2                	test   %dl,%dl
ffffffff802103f2:	0f 84 1c 01 00 00    	je     ffffffff80210514 <_RME_Pgt_Boot_Crt+0x264>
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff802103f8:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802103fd:	44 89 f1             	mov    %r14d,%ecx
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff80210400:	48 c7 43 20 01 00 00 	movq   $0x1,0x20(%rbx)
ffffffff80210407:	00 
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff80210408:	4c 89 ef             	mov    %r13,%rdi
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8021040b:	d3 e6                	shl    %cl,%esi
ffffffff8021040d:	48 63 f6             	movslq %esi,%rsi
ffffffff80210410:	48 c1 e6 03          	shl    $0x3,%rsi
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff80210414:	e8 f7 ee ff ff       	call   ffffffff8020f310 <_RME_Kot_Mark>
ffffffff80210419:	48 85 c0             	test   %rax,%rax
ffffffff8021041c:	0f 85 ce 00 00 00    	jne    ffffffff802104f0 <_RME_Pgt_Boot_Crt+0x240>
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff80210422:	49 c1 e4 20          	shl    $0x20,%r12
    Pgt_Crt->Base=Base|Is_Top;
ffffffff80210426:	4c 09 fd             	or     %r15,%rbp
    Pgt_Crt->Head.Object=Vaddr;
ffffffff80210429:	4c 89 6b 18          	mov    %r13,0x18(%rbx)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8021042d:	48 89 df             	mov    %rbx,%rdi
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff80210430:	4d 09 f4             	or     %r14,%r12
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff80210433:	66 0f 6f 05 45 d0 00 	movdqa 0xd045(%rip),%xmm0        # ffffffff8021d480 <Table.1+0x160>
ffffffff8021043a:	00 
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8021043b:	48 89 6b 30          	mov    %rbp,0x30(%rbx)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8021043f:	4c 89 63 28          	mov    %r12,0x28(%rbx)
    Pgt_Crt->ASID=0U;
ffffffff80210443:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
ffffffff8021044a:	00 
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8021044b:	0f 11 43 08          	movups %xmm0,0x8(%rbx)
ffffffff8021044f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff80210454:	e8 b7 b0 00 00       	call   ffffffff8021b510 <__RME_Pgt_Init>
    return 0;
ffffffff80210459:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8021045e:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff80210465:	00 04 00 
ffffffff80210468:	48 89 03             	mov    %rax,(%rbx)
}
ffffffff8021046b:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021046f:	48 89 d0             	mov    %rdx,%rax
ffffffff80210472:	5b                   	pop    %rbx
ffffffff80210473:	5d                   	pop    %rbp
ffffffff80210474:	41 5c                	pop    %r12
ffffffff80210476:	41 5d                	pop    %r13
ffffffff80210478:	41 5e                	pop    %r14
ffffffff8021047a:	41 5f                	pop    %r15
ffffffff8021047c:	c3                   	ret
ffffffff8021047d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210480:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80210483:	73 4b                	jae    ffffffff802104d0 <_RME_Pgt_Boot_Crt+0x220>
ffffffff80210485:	4c 8b 4f 18          	mov    0x18(%rdi),%r9
ffffffff80210489:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021048d:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80210494:	ff 00 00 
ffffffff80210497:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8021049e:	00 00 00 
ffffffff802104a1:	49 01 c1             	add    %rax,%r9
ffffffff802104a4:	49 8b 01             	mov    (%r9),%rax
ffffffff802104a7:	48 21 c2             	and    %rax,%rdx
ffffffff802104aa:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802104ad:	0f 85 bb fe ff ff    	jne    ffffffff8021036e <_RME_Pgt_Boot_Crt+0xbe>
ffffffff802104b3:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
ffffffff802104ba:	eb af                	jmp    ffffffff8021046b <_RME_Pgt_Boot_Crt+0x1bb>
ffffffff802104bc:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff802104c0:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
ffffffff802104c7:	eb a2                	jmp    ffffffff8021046b <_RME_Pgt_Boot_Crt+0x1bb>
ffffffff802104c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff802104d0:	48 c7 c2 fd ff ff ff 	mov    $0xfffffffffffffffd,%rdx
ffffffff802104d7:	eb 92                	jmp    ffffffff8021046b <_RME_Pgt_Boot_Crt+0x1bb>
ffffffff802104d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802104e0:	48 c7 c2 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rdx
ffffffff802104e7:	e9 7f ff ff ff       	jmp    ffffffff8021046b <_RME_Pgt_Boot_Crt+0x1bb>
ffffffff802104ec:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff802104f0:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CPT_KOT;
ffffffff802104f7:	48 c7 c2 fc ff ff ff 	mov    $0xfffffffffffffffc,%rdx
ffffffff802104fe:	e9 68 ff ff ff       	jmp    ffffffff8021046b <_RME_Pgt_Boot_Crt+0x1bb>
ffffffff80210503:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return RME_ERR_PGT_HW;
ffffffff80210508:	48 c7 c2 99 ff ff ff 	mov    $0xffffffffffffff99,%rdx
ffffffff8021050f:	e9 57 ff ff ff       	jmp    ffffffff8021046b <_RME_Pgt_Boot_Crt+0x1bb>
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff80210514:	48 c7 c2 fb ff ff ff 	mov    $0xfffffffffffffffb,%rdx
ffffffff8021051b:	e9 4b ff ff ff       	jmp    ffffffff8021046b <_RME_Pgt_Boot_Crt+0x1bb>

ffffffff80210520 <_RME_Inv_Crt.isra.0>:
static rme_ret_t _RME_Inv_Crt(struct RME_Cap_Cpt* Cpt,
ffffffff80210520:	48 89 d0             	mov    %rdx,%rax
ffffffff80210523:	41 54                	push   %r12
ffffffff80210525:	48 89 ca             	mov    %rcx,%rdx
ffffffff80210528:	55                   	push   %rbp
ffffffff80210529:	4c 89 c5             	mov    %r8,%rbp
ffffffff8021052c:	53                   	push   %rbx
ffffffff8021052d:	4c 89 cb             	mov    %r9,%rbx
ffffffff80210530:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210535:	f6 c4 80             	test   $0x80,%ah
ffffffff80210538:	0f 85 ca 01 00 00    	jne    ffffffff80210708 <_RME_Inv_Crt.isra.0+0x1e8>
ffffffff8021053e:	48 39 f0             	cmp    %rsi,%rax
ffffffff80210541:	0f 83 39 03 00 00    	jae    ffffffff80210880 <_RME_Inv_Crt.isra.0+0x360>
ffffffff80210547:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8021054e:	ff 00 00 
ffffffff80210551:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210555:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8021055c:	00 00 00 
ffffffff8021055f:	48 01 f8             	add    %rdi,%rax
ffffffff80210562:	4c 8b 00             	mov    (%rax),%r8
ffffffff80210565:	4d 21 c1             	and    %r8,%r9
ffffffff80210568:	4d 39 d1             	cmp    %r10,%r9
ffffffff8021056b:	0f 84 0f 02 00 00    	je     ffffffff80210780 <_RME_Inv_Crt.isra.0+0x260>
ffffffff80210571:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff80210575:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff80210579:	0f 85 11 03 00 00    	jne    ffffffff80210890 <_RME_Inv_Crt.isra.0+0x370>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8021057f:	f6 c7 80             	test   $0x80,%bh
ffffffff80210582:	0f 85 08 02 00 00    	jne    ffffffff80210790 <_RME_Inv_Crt.isra.0+0x270>
ffffffff80210588:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8021058b:	0f 83 ef 02 00 00    	jae    ffffffff80210880 <_RME_Inv_Crt.isra.0+0x360>
ffffffff80210591:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff80210598:	ff 00 00 
ffffffff8021059b:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8021059f:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff802105a6:	00 00 00 
ffffffff802105a9:	48 01 fb             	add    %rdi,%rbx
ffffffff802105ac:	4c 8b 03             	mov    (%rbx),%r8
ffffffff802105af:	4d 21 c1             	and    %r8,%r9
ffffffff802105b2:	4d 39 d1             	cmp    %r10,%r9
ffffffff802105b5:	0f 84 c5 01 00 00    	je     ffffffff80210780 <_RME_Inv_Crt.isra.0+0x260>
ffffffff802105bb:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff802105bf:	49 83 f8 05          	cmp    $0x5,%r8
ffffffff802105c3:	0f 85 c7 02 00 00    	jne    ffffffff80210890 <_RME_Inv_Crt.isra.0+0x370>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff802105c9:	f6 c6 80             	test   $0x80,%dh
ffffffff802105cc:	0f 85 3e 02 00 00    	jne    ffffffff80210810 <_RME_Inv_Crt.isra.0+0x2f0>
ffffffff802105d2:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802105d5:	0f 83 a5 02 00 00    	jae    ffffffff80210880 <_RME_Inv_Crt.isra.0+0x360>
ffffffff802105db:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802105e2:	00 00 00 
ffffffff802105e5:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802105e9:	48 01 fa             	add    %rdi,%rdx
ffffffff802105ec:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff802105f3:	ff 00 00 
ffffffff802105f6:	48 8b 32             	mov    (%rdx),%rsi
ffffffff802105f9:	48 21 f7             	and    %rsi,%rdi
ffffffff802105fc:	4c 39 c7             	cmp    %r8,%rdi
ffffffff802105ff:	0f 84 7b 01 00 00    	je     ffffffff80210780 <_RME_Inv_Crt.isra.0+0x260>
ffffffff80210605:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80210609:	48 83 fe 02          	cmp    $0x2,%rsi
ffffffff8021060d:	0f 85 7d 02 00 00    	jne    ffffffff80210890 <_RME_Inv_Crt.isra.0+0x370>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80210613:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff80210617:	0f 84 83 02 00 00    	je     ffffffff802108a0 <_RME_Inv_Crt.isra.0+0x380>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_INV);
ffffffff8021061d:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff80210621:	0f 84 79 02 00 00    	je     ffffffff802108a0 <_RME_Inv_Crt.isra.0+0x380>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff80210627:	f6 42 10 08          	testb  $0x8,0x10(%rdx)
ffffffff8021062b:	0f 84 6f 02 00 00    	je     ffffffff802108a0 <_RME_Inv_Crt.isra.0+0x380>
ffffffff80210631:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80210635:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80210638:	4c 8d 24 0e          	lea    (%rsi,%rcx,1),%r12
ffffffff8021063c:	48 0f 42 f1          	cmovb  %rcx,%rsi
ffffffff80210640:	49 39 f4             	cmp    %rsi,%r12
ffffffff80210643:	0f 82 57 02 00 00    	jb     ffffffff802108a0 <_RME_Inv_Crt.isra.0+0x380>
ffffffff80210649:	49 83 fc b7          	cmp    $0xffffffffffffffb7,%r12
ffffffff8021064d:	0f 87 4d 02 00 00    	ja     ffffffff802108a0 <_RME_Inv_Crt.isra.0+0x380>
ffffffff80210653:	49 8d 4c 24 47       	lea    0x47(%r12),%rcx
ffffffff80210658:	48 39 4a 30          	cmp    %rcx,0x30(%rdx)
ffffffff8021065c:	0f 82 3e 02 00 00    	jb     ffffffff802108a0 <_RME_Inv_Crt.isra.0+0x380>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff80210662:	48 3b 68 28          	cmp    0x28(%rax),%rbp
ffffffff80210666:	0f 83 14 02 00 00    	jae    ffffffff80210880 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8021066c:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80210673:	00 00 00 
ffffffff80210676:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8021067a:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff8021067e:	31 c0                	xor    %eax,%eax
ffffffff80210680:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff80210686:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff80210689:	84 d2                	test   %dl,%dl
ffffffff8021068b:	0f 84 1f 02 00 00    	je     ffffffff802108b0 <_RME_Inv_Crt.isra.0+0x390>
ffffffff80210691:	48 c7 45 20 01 00 00 	movq   $0x1,0x20(%rbp)
ffffffff80210698:	00 
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff80210699:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8021069e:	4c 89 e7             	mov    %r12,%rdi
ffffffff802106a1:	e8 6a ec ff ff       	call   ffffffff8020f310 <_RME_Kot_Mark>
ffffffff802106a6:	48 85 c0             	test   %rax,%rax
ffffffff802106a9:	0f 85 0d 02 00 00    	jne    ffffffff802108bc <_RME_Inv_Crt.isra.0+0x39c>
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff802106af:	8b 13                	mov    (%rbx),%edx
ffffffff802106b1:	85 d2                	test   %edx,%edx
ffffffff802106b3:	74 04                	je     ffffffff802106b9 <_RME_Inv_Crt.isra.0+0x199>
ffffffff802106b5:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    Invocation->Prc=Prc_Root;
ffffffff802106b9:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802106be:	ba 01 00 00 00       	mov    $0x1,%edx
    Invocation->Thd_Act=RME_NULL;
ffffffff802106c3:	49 c7 44 24 18 00 00 	movq   $0x0,0x18(%r12)
ffffffff802106ca:	00 00 
    Invocation->Is_Exc_Ret=0U;
ffffffff802106cc:	49 c7 44 24 30 00 00 	movq   $0x0,0x30(%r12)
ffffffff802106d3:	00 00 
    Inv_Crt->Head.Root_Ref=0U;
ffffffff802106d5:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff802106dc:	00 
    Inv_Crt->Head.Object=Vaddr;
ffffffff802106dd:	4c 89 65 18          	mov    %r12,0x18(%rbp)
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
ffffffff802106e1:	48 c7 45 10 03 00 00 	movq   $0x3,0x10(%rbp)
ffffffff802106e8:	00 
ffffffff802106e9:	f0 48 0f c1 53 08    	lock xadd %rdx,0x8(%rbx)
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
ffffffff802106ef:	48 b9 00 00 00 00 00 	movabs $0x7000000000000,%rcx
ffffffff802106f6:	00 07 00 
ffffffff802106f9:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
}
ffffffff802106fd:	5b                   	pop    %rbx
ffffffff802106fe:	5d                   	pop    %rbp
ffffffff802106ff:	41 5c                	pop    %r12
ffffffff80210701:	c3                   	ret
ffffffff80210702:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210708:	49 89 c0             	mov    %rax,%r8
ffffffff8021070b:	49 c1 e8 10          	shr    $0x10,%r8
ffffffff8021070f:	49 39 f0             	cmp    %rsi,%r8
ffffffff80210712:	0f 83 68 01 00 00    	jae    ffffffff80210880 <_RME_Inv_Crt.isra.0+0x360>
ffffffff80210718:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8021071f:	ff 00 00 
ffffffff80210722:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff80210726:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8021072d:	00 00 00 
ffffffff80210730:	49 01 f8             	add    %rdi,%r8
ffffffff80210733:	4d 8b 08             	mov    (%r8),%r9
ffffffff80210736:	4d 89 cc             	mov    %r9,%r12
ffffffff80210739:	4d 21 d4             	and    %r10,%r12
ffffffff8021073c:	4d 39 dc             	cmp    %r11,%r12
ffffffff8021073f:	74 3f                	je     ffffffff80210780 <_RME_Inv_Crt.isra.0+0x260>
ffffffff80210741:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff80210745:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff80210749:	0f 85 41 01 00 00    	jne    ffffffff80210890 <_RME_Inv_Crt.isra.0+0x370>
ffffffff8021074f:	4d 8b 48 28          	mov    0x28(%r8),%r9
ffffffff80210753:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210758:	4c 39 c8             	cmp    %r9,%rax
ffffffff8021075b:	0f 83 1f 01 00 00    	jae    ffffffff80210880 <_RME_Inv_Crt.isra.0+0x360>
ffffffff80210761:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210765:	49 03 40 18          	add    0x18(%r8),%rax
ffffffff80210769:	4c 8b 00             	mov    (%rax),%r8
ffffffff8021076c:	4d 21 c2             	and    %r8,%r10
ffffffff8021076f:	4d 39 da             	cmp    %r11,%r10
ffffffff80210772:	0f 85 f9 fd ff ff    	jne    ffffffff80210571 <_RME_Inv_Crt.isra.0+0x51>
ffffffff80210778:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021077f:	00 
ffffffff80210780:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210787:	e9 71 ff ff ff       	jmp    ffffffff802106fd <_RME_Inv_Crt.isra.0+0x1dd>
ffffffff8021078c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80210790:	49 89 d8             	mov    %rbx,%r8
ffffffff80210793:	49 c1 e8 10          	shr    $0x10,%r8
ffffffff80210797:	49 39 f0             	cmp    %rsi,%r8
ffffffff8021079a:	0f 83 e0 00 00 00    	jae    ffffffff80210880 <_RME_Inv_Crt.isra.0+0x360>
ffffffff802107a0:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff802107a7:	ff 00 00 
ffffffff802107aa:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff802107ae:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff802107b5:	00 00 00 
ffffffff802107b8:	49 01 f8             	add    %rdi,%r8
ffffffff802107bb:	4d 8b 08             	mov    (%r8),%r9
ffffffff802107be:	4d 89 cc             	mov    %r9,%r12
ffffffff802107c1:	4d 21 d4             	and    %r10,%r12
ffffffff802107c4:	4d 39 dc             	cmp    %r11,%r12
ffffffff802107c7:	74 b7                	je     ffffffff80210780 <_RME_Inv_Crt.isra.0+0x260>
ffffffff802107c9:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff802107cd:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff802107d1:	0f 85 b9 00 00 00    	jne    ffffffff80210890 <_RME_Inv_Crt.isra.0+0x370>
ffffffff802107d7:	4d 8b 48 28          	mov    0x28(%r8),%r9
ffffffff802107db:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff802107e1:	4c 39 cb             	cmp    %r9,%rbx
ffffffff802107e4:	0f 83 96 00 00 00    	jae    ffffffff80210880 <_RME_Inv_Crt.isra.0+0x360>
ffffffff802107ea:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff802107ee:	49 03 58 18          	add    0x18(%r8),%rbx
ffffffff802107f2:	4c 8b 03             	mov    (%rbx),%r8
ffffffff802107f5:	4d 21 c2             	and    %r8,%r10
ffffffff802107f8:	4d 39 da             	cmp    %r11,%r10
ffffffff802107fb:	0f 85 ba fd ff ff    	jne    ffffffff802105bb <_RME_Inv_Crt.isra.0+0x9b>
ffffffff80210801:	e9 7a ff ff ff       	jmp    ffffffff80210780 <_RME_Inv_Crt.isra.0+0x260>
ffffffff80210806:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021080d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff80210810:	49 89 d0             	mov    %rdx,%r8
ffffffff80210813:	49 c1 e8 10          	shr    $0x10,%r8
ffffffff80210817:	49 39 f0             	cmp    %rsi,%r8
ffffffff8021081a:	73 64                	jae    ffffffff80210880 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8021081c:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80210823:	00 00 00 
ffffffff80210826:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8021082a:	49 8d 34 38          	lea    (%r8,%rdi,1),%rsi
ffffffff8021082e:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80210835:	ff 00 00 
ffffffff80210838:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8021083b:	49 89 fa             	mov    %rdi,%r10
ffffffff8021083e:	4d 21 c2             	and    %r8,%r10
ffffffff80210841:	4d 39 ca             	cmp    %r9,%r10
ffffffff80210844:	0f 84 36 ff ff ff    	je     ffffffff80210780 <_RME_Inv_Crt.isra.0+0x260>
ffffffff8021084a:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021084e:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80210852:	75 3c                	jne    ffffffff80210890 <_RME_Inv_Crt.isra.0+0x370>
ffffffff80210854:	48 8b 7e 28          	mov    0x28(%rsi),%rdi
ffffffff80210858:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021085e:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80210861:	73 1d                	jae    ffffffff80210880 <_RME_Inv_Crt.isra.0+0x360>
ffffffff80210863:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210867:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff8021086b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8021086e:	49 21 f0             	and    %rsi,%r8
ffffffff80210871:	4d 39 c8             	cmp    %r9,%r8
ffffffff80210874:	0f 85 8b fd ff ff    	jne    ffffffff80210605 <_RME_Inv_Crt.isra.0+0xe5>
ffffffff8021087a:	e9 01 ff ff ff       	jmp    ffffffff80210780 <_RME_Inv_Crt.isra.0+0x260>
ffffffff8021087f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210880:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210887:	e9 71 fe ff ff       	jmp    ffffffff802106fd <_RME_Inv_Crt.isra.0+0x1dd>
ffffffff8021088c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80210890:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210897:	e9 61 fe ff ff       	jmp    ffffffff802106fd <_RME_Inv_Crt.isra.0+0x1dd>
ffffffff8021089c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802108a0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802108a7:	e9 51 fe ff ff       	jmp    ffffffff802106fd <_RME_Inv_Crt.isra.0+0x1dd>
ffffffff802108ac:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff802108b0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802108b7:	e9 41 fe ff ff       	jmp    ffffffff802106fd <_RME_Inv_Crt.isra.0+0x1dd>
        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
ffffffff802108bc:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff802108c3:	00 
        return RME_ERR_CPT_KOT;
ffffffff802108c4:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff802108cb:	e9 2d fe ff ff       	jmp    ffffffff802106fd <_RME_Inv_Crt.isra.0+0x1dd>

ffffffff802108d0 <_RME_Kot_Erase>:
{
ffffffff802108d0:	f3 0f 1e fa          	endbr64
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff802108d4:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff802108d8:	0f 85 65 01 00 00    	jne    ffffffff80210a43 <_RME_Kot_Erase+0x173>
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802108de:	4c 8d 87 00 00 00 7f 	lea    0x7f000000(%rdi),%r8
{
ffffffff802108e5:	53                   	push   %rbx
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff802108e6:	49 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%r9
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802108ed:	48 8d b4 37 ff ff ff 	lea    0x7effffff(%rdi,%rsi,1),%rsi
ffffffff802108f4:	7e 
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff802108f5:	48 ba 00 00 00 01 00 	movabs $0xffff800001000000,%rdx
ffffffff802108fc:	80 ff ff 
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802108ff:	4c 89 c1             	mov    %r8,%rcx
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80210902:	4d 89 ca             	mov    %r9,%r10
    Start=Start>>RME_WORD_ORDER;
ffffffff80210905:	49 c1 e8 0a          	shr    $0xa,%r8
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80210909:	48 c1 e9 04          	shr    $0x4,%rcx
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8021090d:	49 d3 e2             	shl    %cl,%r10
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80210910:	48 89 f1             	mov    %rsi,%rcx
    End=End>>RME_WORD_ORDER;
ffffffff80210913:	48 c1 ee 0a          	shr    $0xa,%rsi
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80210917:	48 c1 e9 04          	shr    $0x4,%rcx
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8021091b:	f7 d1                	not    %ecx
ffffffff8021091d:	49 d3 e9             	shr    %cl,%r9
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff80210920:	4a 8d 0c c5 00 00 00 	lea    0x0(,%r8,8),%rcx
ffffffff80210927:	00 
ffffffff80210928:	48 8d 1c 11          	lea    (%rcx,%rdx,1),%rbx
ffffffff8021092c:	48 8b 03             	mov    (%rbx),%rax
    if(Start==End)
ffffffff8021092f:	49 39 f0             	cmp    %rsi,%r8
ffffffff80210932:	74 44                	je     ffffffff80210978 <_RME_Kot_Erase+0xa8>
        if((RME_KOT_VA_BASE[Start]&Mask_Begin)!=Mask_Begin)
ffffffff80210934:	48 f7 d0             	not    %rax
ffffffff80210937:	4c 85 d0             	test   %r10,%rax
ffffffff8021093a:	75 2f                	jne    ffffffff8021096b <_RME_Kot_Erase+0x9b>
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff8021093c:	4d 8d 58 01          	lea    0x1(%r8),%r11
ffffffff80210940:	48 8d 7e ff          	lea    -0x1(%rsi),%rdi
ffffffff80210944:	49 39 fb             	cmp    %rdi,%r11
ffffffff80210947:	73 4f                	jae    ffffffff80210998 <_RME_Kot_Erase+0xc8>
ffffffff80210949:	48 8d 44 11 08       	lea    0x8(%rcx,%rdx,1),%rax
ffffffff8021094e:	4c 89 da             	mov    %r11,%rdx
ffffffff80210951:	eb 12                	jmp    ffffffff80210965 <_RME_Kot_Erase+0x95>
ffffffff80210953:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80210958:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8021095c:	48 83 c0 08          	add    $0x8,%rax
ffffffff80210960:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80210963:	74 33                	je     ffffffff80210998 <_RME_Kot_Erase+0xc8>
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
ffffffff80210965:	48 83 38 ff          	cmpq   $0xffffffffffffffff,(%rax)
ffffffff80210969:	74 ed                	je     ffffffff80210958 <_RME_Kot_Erase+0x88>
        return RME_ERR_KOT_BMP;
ffffffff8021096b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff80210972:	5b                   	pop    %rbx
ffffffff80210973:	c3                   	ret
ffffffff80210974:	0f 1f 40 00          	nopl   0x0(%rax)
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff80210978:	4d 21 ca             	and    %r9,%r10
ffffffff8021097b:	48 f7 d0             	not    %rax
ffffffff8021097e:	4c 85 d0             	test   %r10,%rax
ffffffff80210981:	75 e8                	jne    ffffffff8021096b <_RME_Kot_Erase+0x9b>
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~(Mask_Begin&Mask_End));
ffffffff80210983:	49 f7 d2             	not    %r10
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff80210986:	4c 8b 13             	mov    (%rbx),%r10
ffffffff80210989:	f0 4c 21 13          	lock and %r10,(%rbx)
    return 0;
ffffffff8021098d:	31 c0                	xor    %eax,%eax
}
ffffffff8021098f:	5b                   	pop    %rbx
ffffffff80210990:	c3                   	ret
ffffffff80210991:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
ffffffff80210998:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021099f:	80 ff ff 
ffffffff802109a2:	48 8d 14 f0          	lea    (%rax,%rsi,8),%rdx
ffffffff802109a6:	48 8b 02             	mov    (%rdx),%rax
ffffffff802109a9:	4c 21 c8             	and    %r9,%rax
ffffffff802109ac:	4c 39 c8             	cmp    %r9,%rax
ffffffff802109af:	75 ba                	jne    ffffffff8021096b <_RME_Kot_Erase+0x9b>
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff802109b1:	49 f7 d2             	not    %r10
ffffffff802109b4:	4c 8b 13             	mov    (%rbx),%r10
ffffffff802109b7:	f0 4c 21 13          	lock and %r10,(%rbx)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802109bb:	49 39 fb             	cmp    %rdi,%r11
ffffffff802109be:	73 72                	jae    ffffffff80210a32 <_RME_Kot_Erase+0x162>
ffffffff802109c0:	4c 29 c6             	sub    %r8,%rsi
ffffffff802109c3:	48 8d 7e fe          	lea    -0x2(%rsi),%rdi
ffffffff802109c7:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802109cb:	74 53                	je     ffffffff80210a20 <_RME_Kot_Erase+0x150>
ffffffff802109cd:	48 89 fe             	mov    %rdi,%rsi
            RME_KOT_VA_BASE[Count]=0U;
ffffffff802109d0:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff802109d4:	49 ba 08 00 00 01 00 	movabs $0xffff800001000008,%r10
ffffffff802109db:	80 ff ff 
ffffffff802109de:	48 83 e6 fe          	and    $0xfffffffffffffffe,%rsi
ffffffff802109e2:	4a 8d 04 11          	lea    (%rcx,%r10,1),%rax
ffffffff802109e6:	49 01 f0             	add    %rsi,%r8
ffffffff802109e9:	4b 8d 0c c2          	lea    (%r10,%r8,8),%rcx
ffffffff802109ed:	49 89 c8             	mov    %rcx,%r8
ffffffff802109f0:	49 29 c0             	sub    %rax,%r8
ffffffff802109f3:	41 83 e0 10          	and    $0x10,%r8d
ffffffff802109f7:	74 0f                	je     ffffffff80210a08 <_RME_Kot_Erase+0x138>
ffffffff802109f9:	0f 11 00             	movups %xmm0,(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802109fc:	48 83 c0 10          	add    $0x10,%rax
ffffffff80210a00:	48 39 c1             	cmp    %rax,%rcx
ffffffff80210a03:	74 13                	je     ffffffff80210a18 <_RME_Kot_Erase+0x148>
ffffffff80210a05:	0f 1f 00             	nopl   (%rax)
            RME_KOT_VA_BASE[Count]=0U;
ffffffff80210a08:	0f 11 00             	movups %xmm0,(%rax)
ffffffff80210a0b:	48 83 c0 20          	add    $0x20,%rax
ffffffff80210a0f:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80210a13:	48 39 c1             	cmp    %rax,%rcx
ffffffff80210a16:	75 f0                	jne    ffffffff80210a08 <_RME_Kot_Erase+0x138>
ffffffff80210a18:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80210a1b:	74 15                	je     ffffffff80210a32 <_RME_Kot_Erase+0x162>
ffffffff80210a1d:	49 01 f3             	add    %rsi,%r11
            RME_KOT_VA_BASE[Count]=0U;
ffffffff80210a20:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80210a27:	80 ff ff 
ffffffff80210a2a:	4a c7 04 d8 00 00 00 	movq   $0x0,(%rax,%r11,8)
ffffffff80210a31:	00 
        RME_FETCH_AND(&(RME_KOT_VA_BASE[End]),~Mask_End);
ffffffff80210a32:	49 f7 d1             	not    %r9
ffffffff80210a35:	4c 8b 0a             	mov    (%rdx),%r9
ffffffff80210a38:	f0 4c 21 0a          	lock and %r9,(%rdx)
    return 0;
ffffffff80210a3c:	31 c0                	xor    %eax,%eax
ffffffff80210a3e:	e9 4c ff ff ff       	jmp    ffffffff8021098f <_RME_Kot_Erase+0xbf>
        return RME_ERR_KOT_BMP;
ffffffff80210a43:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff80210a4a:	c3                   	ret
ffffffff80210a4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80210a50 <_RME_Kom_Boot_Crt>:
{
ffffffff80210a50:	f3 0f 1e fa          	endbr64
ffffffff80210a54:	48 89 f0             	mov    %rsi,%rax
ffffffff80210a57:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210a58:	4c 8b 57 28          	mov    0x28(%rdi),%r10
ffffffff80210a5c:	f6 c4 80             	test   $0x80,%ah
ffffffff80210a5f:	75 3f                	jne    ffffffff80210aa0 <_RME_Kom_Boot_Crt+0x50>
ffffffff80210a61:	4c 39 d6             	cmp    %r10,%rsi
ffffffff80210a64:	0f 83 2e 01 00 00    	jae    ffffffff80210b98 <_RME_Kom_Boot_Crt+0x148>
ffffffff80210a6a:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80210a71:	00 00 00 
ffffffff80210a74:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210a78:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80210a7c:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80210a83:	ff 00 00 
ffffffff80210a86:	48 8b 30             	mov    (%rax),%rsi
ffffffff80210a89:	48 21 f7             	and    %rsi,%rdi
ffffffff80210a8c:	4c 39 d7             	cmp    %r10,%rdi
ffffffff80210a8f:	75 79                	jne    ffffffff80210b0a <_RME_Kom_Boot_Crt+0xba>
ffffffff80210a91:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff80210a98:	5b                   	pop    %rbx
ffffffff80210a99:	c3                   	ret
ffffffff80210a9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210aa0:	48 c1 ee 10          	shr    $0x10,%rsi
ffffffff80210aa4:	4c 39 d6             	cmp    %r10,%rsi
ffffffff80210aa7:	0f 83 eb 00 00 00    	jae    ffffffff80210b98 <_RME_Kom_Boot_Crt+0x148>
ffffffff80210aad:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff80210ab4:	ff 00 00 
ffffffff80210ab7:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80210abb:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80210abf:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff80210ac6:	00 00 00 
ffffffff80210ac9:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff80210acc:	48 89 fb             	mov    %rdi,%rbx
ffffffff80210acf:	4c 21 d3             	and    %r10,%rbx
ffffffff80210ad2:	4c 39 db             	cmp    %r11,%rbx
ffffffff80210ad5:	74 ba                	je     ffffffff80210a91 <_RME_Kom_Boot_Crt+0x41>
ffffffff80210ad7:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80210adb:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80210adf:	0f 85 c3 00 00 00    	jne    ffffffff80210ba8 <_RME_Kom_Boot_Crt+0x158>
ffffffff80210ae5:	48 8b 7e 28          	mov    0x28(%rsi),%rdi
ffffffff80210ae9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210aee:	48 39 f8             	cmp    %rdi,%rax
ffffffff80210af1:	0f 83 a1 00 00 00    	jae    ffffffff80210b98 <_RME_Kom_Boot_Crt+0x148>
ffffffff80210af7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210afb:	48 03 46 18          	add    0x18(%rsi),%rax
ffffffff80210aff:	48 8b 30             	mov    (%rax),%rsi
ffffffff80210b02:	49 21 f2             	and    %rsi,%r10
ffffffff80210b05:	4d 39 da             	cmp    %r11,%r10
ffffffff80210b08:	74 87                	je     ffffffff80210a91 <_RME_Kom_Boot_Crt+0x41>
ffffffff80210b0a:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80210b0e:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80210b12:	0f 85 90 00 00 00    	jne    ffffffff80210ba8 <_RME_Kom_Boot_Crt+0x158>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80210b18:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff80210b1c:	0f 84 8f 00 00 00    	je     ffffffff80210bb1 <_RME_Kom_Boot_Crt+0x161>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kom,struct RME_Cap_Kom*,Kom_Crt);
ffffffff80210b22:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80210b26:	73 70                	jae    ffffffff80210b98 <_RME_Kom_Boot_Crt+0x148>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80210b28:	48 be 00 00 00 00 01 	movabs $0x100000000,%rsi
ffffffff80210b2f:	00 00 00 
ffffffff80210b32:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210b36:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff80210b3a:	31 c0                	xor    %eax,%eax
ffffffff80210b3c:	f0 48 0f b1 32       	lock cmpxchg %rsi,(%rdx)
ffffffff80210b41:	40 0f 94 c6          	sete   %sil
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff80210b45:	40 84 f6             	test   %sil,%sil
ffffffff80210b48:	74 70                	je     ffffffff80210bba <_RME_Kom_Boot_Crt+0x16a>
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff80210b4a:	49 83 c0 01          	add    $0x1,%r8
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff80210b4e:	48 83 c1 3f          	add    $0x3f,%rcx
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff80210b52:	48 b8 00 00 00 00 00 	movabs $0x2000000000000,%rax
ffffffff80210b59:	00 02 00 
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff80210b5c:	48 c7 42 20 01 00 00 	movq   $0x1,0x20(%rdx)
ffffffff80210b63:	00 
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff80210b64:	49 83 e0 c0          	and    $0xffffffffffffffc0,%r8
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff80210b68:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
    Kom_Crt->Head.Root_Ref=1U;
ffffffff80210b6c:	48 c7 42 08 01 00 00 	movq   $0x1,0x8(%rdx)
ffffffff80210b73:	00 
    Kom_Crt->End=Kom_End-1U;
ffffffff80210b74:	49 83 e8 01          	sub    $0x1,%r8
    Kom_Crt->Head.Object=0U;
ffffffff80210b78:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff80210b7f:	00 
    Kom_Crt->Head.Flag=Flag;
ffffffff80210b80:	4c 89 4a 10          	mov    %r9,0x10(%rdx)
    Kom_Crt->Begin=Kom_Begin;
ffffffff80210b84:	48 89 4a 28          	mov    %rcx,0x28(%rdx)
    Kom_Crt->End=Kom_End-1U;
ffffffff80210b88:	4c 89 42 30          	mov    %r8,0x30(%rdx)
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff80210b8c:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff80210b8f:	31 c0                	xor    %eax,%eax
}
ffffffff80210b91:	5b                   	pop    %rbx
ffffffff80210b92:	c3                   	ret
ffffffff80210b93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210b98:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff80210b9f:	5b                   	pop    %rbx
ffffffff80210ba0:	c3                   	ret
ffffffff80210ba1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210ba8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff80210baf:	5b                   	pop    %rbx
ffffffff80210bb0:	c3                   	ret
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80210bb1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff80210bb8:	5b                   	pop    %rbx
ffffffff80210bb9:	c3                   	ret
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff80210bba:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80210bc1:	5b                   	pop    %rbx
ffffffff80210bc2:	c3                   	ret
ffffffff80210bc3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80210bca:	00 00 00 00 
ffffffff80210bce:	66 90                	xchg   %ax,%ax

ffffffff80210bd0 <_RME_CPU_Local_Init>:
{
ffffffff80210bd0:	f3 0f 1e fa          	endbr64
ffffffff80210bd4:	41 54                	push   %r12
    Local->Thd_Cur=RME_NULL;
ffffffff80210bd6:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff80210bda:	4c 8d a7 28 04 00 00 	lea    0x428(%rdi),%r12
{
ffffffff80210be1:	55                   	push   %rbp
ffffffff80210be2:	48 89 fd             	mov    %rdi,%rbp
ffffffff80210be5:	53                   	push   %rbx
ffffffff80210be6:	48 8d 5f 28          	lea    0x28(%rdi),%rbx
    Local->CPUID=CPUID;
ffffffff80210bea:	48 89 37             	mov    %rsi,(%rdi)
    Local->Sig_Vct=RME_NULL;
ffffffff80210bed:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
ffffffff80210bf4:	00 
    Local->Thd_Cur=RME_NULL;
ffffffff80210bf5:	0f 11 47 08          	movups %xmm0,0x8(%rdi)
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80210bf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        Local->Run.Bitmap[Prio_Cnt>>RME_WORD_ORDER]=0U;
ffffffff80210c00:	48 c7 45 20 00 00 00 	movq   $0x0,0x20(%rbp)
ffffffff80210c07:	00 
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
ffffffff80210c08:	48 89 df             	mov    %rbx,%rdi
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80210c0b:	48 83 c3 10          	add    $0x10,%rbx
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
ffffffff80210c0f:	e8 7c de ff ff       	call   ffffffff8020ea90 <_RME_List_Crt>
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80210c14:	4c 39 e3             	cmp    %r12,%rbx
ffffffff80210c17:	75 e7                	jne    ffffffff80210c00 <_RME_CPU_Local_Init+0x30>
}
ffffffff80210c19:	5b                   	pop    %rbx
ffffffff80210c1a:	5d                   	pop    %rbp
ffffffff80210c1b:	41 5c                	pop    %r12
ffffffff80210c1d:	c3                   	ret
ffffffff80210c1e:	66 90                	xchg   %ax,%ax

ffffffff80210c20 <_RME_Thd_Pgt>:
{
ffffffff80210c20:	f3 0f 1e fa          	endbr64
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210c24:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
    if(Inv_Top==RME_NULL)
ffffffff80210c2b:	48 85 c0             	test   %rax,%rax
ffffffff80210c2e:	74 18                	je     ffffffff80210c48 <_RME_Thd_Pgt+0x28>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210c30:	48 8d 97 98 00 00 00 	lea    0x98(%rdi),%rdx
    if(Inv_Top==RME_NULL)
ffffffff80210c37:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210c3a:	74 0c                	je     ffffffff80210c48 <_RME_Thd_Pgt+0x28>
        return Inv_Top->Prc->Pgt;
ffffffff80210c3c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210c40:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff80210c44:	c3                   	ret
ffffffff80210c45:	0f 1f 00             	nopl   (%rax)
        return Thd->Sched.Prc->Pgt;
ffffffff80210c48:	48 8b 47 58          	mov    0x58(%rdi),%rax
ffffffff80210c4c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80210c50:	c3                   	ret
ffffffff80210c51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80210c58:	00 00 00 00 
ffffffff80210c5c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80210c60 <_RME_Run_Swt.isra.0>:
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
ffffffff80210c60:	41 55                	push   %r13
ffffffff80210c62:	41 54                	push   %r12
ffffffff80210c64:	49 89 fc             	mov    %rdi,%r12
ffffffff80210c67:	55                   	push   %rbp
ffffffff80210c68:	48 89 f5             	mov    %rsi,%rbp
ffffffff80210c6b:	53                   	push   %rbx
ffffffff80210c6c:	48 89 d3             	mov    %rdx,%rbx
ffffffff80210c6f:	48 83 ec 08          	sub    $0x8,%rsp
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff80210c73:	4c 8b aa 90 00 00 00 	mov    0x90(%rdx),%r13
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff80210c7a:	48 8b be 90 00 00 00 	mov    0x90(%rsi),%rdi
ffffffff80210c81:	4c 89 e6             	mov    %r12,%rsi
ffffffff80210c84:	e8 67 9d 00 00       	call   ffffffff8021a9f0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80210c89:	4c 89 ee             	mov    %r13,%rsi
ffffffff80210c8c:	4c 89 e7             	mov    %r12,%rdi
ffffffff80210c8f:	e8 5c 9d 00 00       	call   ffffffff8021a9f0 <__RME_Thd_Reg_Copy>
    Pgt_Cur=_RME_Thd_Pgt(Thd_Cur);
ffffffff80210c94:	48 89 ef             	mov    %rbp,%rdi
ffffffff80210c97:	e8 84 ff ff ff       	call   ffffffff80210c20 <_RME_Thd_Pgt>
    Pgt_New=_RME_Thd_Pgt(Thd_New);
ffffffff80210c9c:	48 89 df             	mov    %rbx,%rdi
    Pgt_Cur=_RME_Thd_Pgt(Thd_Cur);
ffffffff80210c9f:	48 89 c5             	mov    %rax,%rbp
    Pgt_New=_RME_Thd_Pgt(Thd_New);
ffffffff80210ca2:	e8 79 ff ff ff       	call   ffffffff80210c20 <_RME_Thd_Pgt>
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff80210ca7:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80210cab:	48 39 4d 18          	cmp    %rcx,0x18(%rbp)
ffffffff80210caf:	75 0f                	jne    ffffffff80210cc0 <_RME_Run_Swt.isra.0+0x60>
}
ffffffff80210cb1:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80210cb5:	5b                   	pop    %rbx
ffffffff80210cb6:	5d                   	pop    %rbp
ffffffff80210cb7:	41 5c                	pop    %r12
ffffffff80210cb9:	41 5d                	pop    %r13
ffffffff80210cbb:	c3                   	ret
ffffffff80210cbc:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80210cc0:	48 83 c4 08          	add    $0x8,%rsp
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff80210cc4:	48 89 c7             	mov    %rax,%rdi
}
ffffffff80210cc7:	5b                   	pop    %rbx
ffffffff80210cc8:	5d                   	pop    %rbp
ffffffff80210cc9:	41 5c                	pop    %r12
ffffffff80210ccb:	41 5d                	pop    %r13
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff80210ccd:	e9 5e a0 00 00       	jmp    ffffffff8021ad30 <__RME_Pgt_Set>
ffffffff80210cd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80210cd9:	00 00 00 00 
ffffffff80210cdd:	0f 1f 00             	nopl   (%rax)

ffffffff80210ce0 <_RME_Prc_Boot_Crt>:
{
ffffffff80210ce0:	f3 0f 1e fa          	endbr64
ffffffff80210ce4:	48 89 f0             	mov    %rsi,%rax
ffffffff80210ce7:	55                   	push   %rbp
ffffffff80210ce8:	48 89 d6             	mov    %rdx,%rsi
ffffffff80210ceb:	48 89 ca             	mov    %rcx,%rdx
ffffffff80210cee:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80210cef:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
ffffffff80210cf3:	f6 c4 80             	test   $0x80,%ah
ffffffff80210cf6:	0f 85 94 01 00 00    	jne    ffffffff80210e90 <_RME_Prc_Boot_Crt+0x1b0>
ffffffff80210cfc:	4c 39 c8             	cmp    %r9,%rax
ffffffff80210cff:	0f 83 fb 02 00 00    	jae    ffffffff80211000 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210d05:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80210d09:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210d0d:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff80210d14:	ff 00 00 
ffffffff80210d17:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff80210d1e:	00 00 00 
ffffffff80210d21:	48 01 f8             	add    %rdi,%rax
ffffffff80210d24:	48 8b 08             	mov    (%rax),%rcx
ffffffff80210d27:	49 21 ca             	and    %rcx,%r10
ffffffff80210d2a:	4d 39 da             	cmp    %r11,%r10
ffffffff80210d2d:	0f 84 d5 01 00 00    	je     ffffffff80210f08 <_RME_Prc_Boot_Crt+0x228>
ffffffff80210d33:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210d37:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80210d3b:	0f 85 cf 02 00 00    	jne    ffffffff80211010 <_RME_Prc_Boot_Crt+0x330>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210d41:	f6 c6 80             	test   $0x80,%dh
ffffffff80210d44:	0f 85 ce 01 00 00    	jne    ffffffff80210f18 <_RME_Prc_Boot_Crt+0x238>
ffffffff80210d4a:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80210d4d:	0f 83 ad 02 00 00    	jae    ffffffff80211000 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210d53:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff80210d5a:	ff 00 00 
ffffffff80210d5d:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210d61:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff80210d68:	00 00 00 
ffffffff80210d6b:	48 01 fa             	add    %rdi,%rdx
ffffffff80210d6e:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80210d71:	49 21 ca             	and    %rcx,%r10
ffffffff80210d74:	4d 39 da             	cmp    %r11,%r10
ffffffff80210d77:	0f 84 8b 01 00 00    	je     ffffffff80210f08 <_RME_Prc_Boot_Crt+0x228>
ffffffff80210d7d:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210d81:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80210d85:	0f 85 85 02 00 00    	jne    ffffffff80211010 <_RME_Prc_Boot_Crt+0x330>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80210d8b:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff80210d92:	0f 85 f8 01 00 00    	jne    ffffffff80210f90 <_RME_Prc_Boot_Crt+0x2b0>
ffffffff80210d98:	4d 39 c8             	cmp    %r9,%r8
ffffffff80210d9b:	0f 83 5f 02 00 00    	jae    ffffffff80211000 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210da1:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80210da8:	00 00 00 
ffffffff80210dab:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff80210daf:	49 01 f8             	add    %rdi,%r8
ffffffff80210db2:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80210db9:	ff 00 00 
ffffffff80210dbc:	49 8b 08             	mov    (%r8),%rcx
ffffffff80210dbf:	48 21 cf             	and    %rcx,%rdi
ffffffff80210dc2:	4c 39 cf             	cmp    %r9,%rdi
ffffffff80210dc5:	0f 84 3d 01 00 00    	je     ffffffff80210f08 <_RME_Prc_Boot_Crt+0x228>
ffffffff80210dcb:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210dcf:	48 83 f9 04          	cmp    $0x4,%rcx
ffffffff80210dd3:	0f 85 37 02 00 00    	jne    ffffffff80211010 <_RME_Prc_Boot_Crt+0x330>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80210dd9:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff80210ddd:	0f 84 3d 02 00 00    	je     ffffffff80211020 <_RME_Prc_Boot_Crt+0x340>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff80210de3:	f6 42 10 40          	testb  $0x40,0x10(%rdx)
ffffffff80210de7:	0f 84 33 02 00 00    	je     ffffffff80211020 <_RME_Prc_Boot_Crt+0x340>
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff80210ded:	41 f6 40 10 40       	testb  $0x40,0x10(%r8)
ffffffff80210df2:	0f 84 28 02 00 00    	je     ffffffff80211020 <_RME_Prc_Boot_Crt+0x340>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff80210df8:	48 3b 70 28          	cmp    0x28(%rax),%rsi
ffffffff80210dfc:	0f 83 fe 01 00 00    	jae    ffffffff80211000 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210e02:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80210e06:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80210e0a:	31 c0                	xor    %eax,%eax
ffffffff80210e0c:	48 01 f1             	add    %rsi,%rcx
ffffffff80210e0f:	48 be 00 00 00 00 01 	movabs $0x100000000,%rsi
ffffffff80210e16:	00 00 00 
ffffffff80210e19:	f0 48 0f b1 31       	lock cmpxchg %rsi,(%rcx)
ffffffff80210e1e:	40 0f 94 c6          	sete   %sil
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80210e22:	40 84 f6             	test   %sil,%sil
ffffffff80210e25:	0f 84 01 02 00 00    	je     ffffffff8021102c <_RME_Prc_Boot_Crt+0x34c>
    Prc_Crt->Head.Root_Ref=1U;
ffffffff80210e2b:	66 0f 6f 05 5d c6 00 	movdqa 0xc65d(%rip),%xmm0        # ffffffff8021d490 <Table.1+0x170>
ffffffff80210e32:	00 
ffffffff80210e33:	0f 11 41 08          	movups %xmm0,0x8(%rcx)
ffffffff80210e37:	66 0f 6f 05 f1 c5 00 	movdqa 0xc5f1(%rip),%xmm0        # ffffffff8021d430 <Table.1+0x110>
ffffffff80210e3e:	00 
ffffffff80210e3f:	0f 11 41 18          	movups %xmm0,0x18(%rcx)
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff80210e43:	8b 32                	mov    (%rdx),%esi
ffffffff80210e45:	85 f6                	test   %esi,%esi
ffffffff80210e47:	74 04                	je     ffffffff80210e4d <_RME_Prc_Boot_Crt+0x16d>
ffffffff80210e49:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff80210e4d:	41 8b 00             	mov    (%r8),%eax
ffffffff80210e50:	85 c0                	test   %eax,%eax
ffffffff80210e52:	74 04                	je     ffffffff80210e58 <_RME_Prc_Boot_Crt+0x178>
ffffffff80210e54:	4d 8b 40 08          	mov    0x8(%r8),%r8
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80210e58:	b8 01 00 00 00       	mov    $0x1,%eax
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff80210e5d:	48 89 51 28          	mov    %rdx,0x28(%rcx)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff80210e61:	4c 89 41 30          	mov    %r8,0x30(%rcx)
ffffffff80210e65:	48 89 c6             	mov    %rax,%rsi
ffffffff80210e68:	f0 48 0f c1 72 08    	lock xadd %rsi,0x8(%rdx)
ffffffff80210e6e:	f0 49 0f c1 40 08    	lock xadd %rax,0x8(%r8)
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff80210e74:	48 b8 00 00 00 00 00 	movabs $0x5000000000000,%rax
ffffffff80210e7b:	00 05 00 
ffffffff80210e7e:	48 89 01             	mov    %rax,(%rcx)
    return 0;
ffffffff80210e81:	31 c0                	xor    %eax,%eax
}
ffffffff80210e83:	5b                   	pop    %rbx
ffffffff80210e84:	5d                   	pop    %rbp
ffffffff80210e85:	c3                   	ret
ffffffff80210e86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80210e8d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80210e90:	48 89 c1             	mov    %rax,%rcx
ffffffff80210e93:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80210e97:	4c 39 c9             	cmp    %r9,%rcx
ffffffff80210e9a:	0f 83 60 01 00 00    	jae    ffffffff80211000 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210ea0:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80210ea4:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80210ea8:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff80210eaf:	ff 00 00 
ffffffff80210eb2:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff80210eb9:	00 00 00 
ffffffff80210ebc:	48 01 f9             	add    %rdi,%rcx
ffffffff80210ebf:	4c 8b 11             	mov    (%rcx),%r10
ffffffff80210ec2:	4c 89 d5             	mov    %r10,%rbp
ffffffff80210ec5:	4c 21 dd             	and    %r11,%rbp
ffffffff80210ec8:	48 39 dd             	cmp    %rbx,%rbp
ffffffff80210ecb:	74 3b                	je     ffffffff80210f08 <_RME_Prc_Boot_Crt+0x228>
ffffffff80210ecd:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80210ed1:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80210ed5:	0f 85 35 01 00 00    	jne    ffffffff80211010 <_RME_Prc_Boot_Crt+0x330>
ffffffff80210edb:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff80210edf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210ee4:	4c 39 d0             	cmp    %r10,%rax
ffffffff80210ee7:	0f 83 13 01 00 00    	jae    ffffffff80211000 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210eed:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210ef1:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80210ef5:	48 8b 08             	mov    (%rax),%rcx
ffffffff80210ef8:	49 21 cb             	and    %rcx,%r11
ffffffff80210efb:	49 39 db             	cmp    %rbx,%r11
ffffffff80210efe:	0f 85 2f fe ff ff    	jne    ffffffff80210d33 <_RME_Prc_Boot_Crt+0x53>
ffffffff80210f04:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80210f08:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210f0f:	e9 6f ff ff ff       	jmp    ffffffff80210e83 <_RME_Prc_Boot_Crt+0x1a3>
ffffffff80210f14:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210f18:	48 89 d1             	mov    %rdx,%rcx
ffffffff80210f1b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80210f1f:	4c 39 c9             	cmp    %r9,%rcx
ffffffff80210f22:	0f 83 d8 00 00 00    	jae    ffffffff80211000 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210f28:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff80210f2f:	ff 00 00 
ffffffff80210f32:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80210f36:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff80210f3d:	00 00 00 
ffffffff80210f40:	48 01 f9             	add    %rdi,%rcx
ffffffff80210f43:	4c 8b 11             	mov    (%rcx),%r10
ffffffff80210f46:	4c 89 d5             	mov    %r10,%rbp
ffffffff80210f49:	4c 21 dd             	and    %r11,%rbp
ffffffff80210f4c:	48 39 dd             	cmp    %rbx,%rbp
ffffffff80210f4f:	74 b7                	je     ffffffff80210f08 <_RME_Prc_Boot_Crt+0x228>
ffffffff80210f51:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80210f55:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80210f59:	0f 85 b1 00 00 00    	jne    ffffffff80211010 <_RME_Prc_Boot_Crt+0x330>
ffffffff80210f5f:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff80210f63:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff80210f69:	4c 39 d2             	cmp    %r10,%rdx
ffffffff80210f6c:	0f 83 8e 00 00 00    	jae    ffffffff80211000 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210f72:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210f76:	48 03 51 18          	add    0x18(%rcx),%rdx
ffffffff80210f7a:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80210f7d:	49 21 cb             	and    %rcx,%r11
ffffffff80210f80:	49 39 db             	cmp    %rbx,%r11
ffffffff80210f83:	0f 85 f4 fd ff ff    	jne    ffffffff80210d7d <_RME_Prc_Boot_Crt+0x9d>
ffffffff80210f89:	e9 7a ff ff ff       	jmp    ffffffff80210f08 <_RME_Prc_Boot_Crt+0x228>
ffffffff80210f8e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80210f90:	4c 89 c1             	mov    %r8,%rcx
ffffffff80210f93:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80210f97:	4c 39 c9             	cmp    %r9,%rcx
ffffffff80210f9a:	73 64                	jae    ffffffff80211000 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210f9c:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff80210fa3:	ff 00 00 
ffffffff80210fa6:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80210faa:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80210fb1:	00 00 00 
ffffffff80210fb4:	48 01 f9             	add    %rdi,%rcx
ffffffff80210fb7:	48 8b 39             	mov    (%rcx),%rdi
ffffffff80210fba:	49 89 fb             	mov    %rdi,%r11
ffffffff80210fbd:	4d 21 cb             	and    %r9,%r11
ffffffff80210fc0:	4d 39 d3             	cmp    %r10,%r11
ffffffff80210fc3:	0f 84 3f ff ff ff    	je     ffffffff80210f08 <_RME_Prc_Boot_Crt+0x228>
ffffffff80210fc9:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80210fcd:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80210fd1:	75 3d                	jne    ffffffff80211010 <_RME_Prc_Boot_Crt+0x330>
ffffffff80210fd3:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff80210fd7:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff80210fde:	49 39 f8             	cmp    %rdi,%r8
ffffffff80210fe1:	73 1d                	jae    ffffffff80211000 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210fe3:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff80210fe7:	4c 03 41 18          	add    0x18(%rcx),%r8
ffffffff80210feb:	49 8b 08             	mov    (%r8),%rcx
ffffffff80210fee:	49 21 c9             	and    %rcx,%r9
ffffffff80210ff1:	4d 39 d1             	cmp    %r10,%r9
ffffffff80210ff4:	0f 85 d1 fd ff ff    	jne    ffffffff80210dcb <_RME_Prc_Boot_Crt+0xeb>
ffffffff80210ffa:	e9 09 ff ff ff       	jmp    ffffffff80210f08 <_RME_Prc_Boot_Crt+0x228>
ffffffff80210fff:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80211000:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211007:	e9 77 fe ff ff       	jmp    ffffffff80210e83 <_RME_Prc_Boot_Crt+0x1a3>
ffffffff8021100c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80211010:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211017:	e9 67 fe ff ff       	jmp    ffffffff80210e83 <_RME_Prc_Boot_Crt+0x1a3>
ffffffff8021101c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80211020:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211027:	e9 57 fe ff ff       	jmp    ffffffff80210e83 <_RME_Prc_Boot_Crt+0x1a3>
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8021102c:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80211033:	e9 4b fe ff ff       	jmp    ffffffff80210e83 <_RME_Prc_Boot_Crt+0x1a3>
ffffffff80211038:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021103f:	00 

ffffffff80211040 <_RME_Thd_Boot_Crt>:
{
ffffffff80211040:	f3 0f 1e fa          	endbr64
ffffffff80211044:	41 57                	push   %r15
ffffffff80211046:	41 56                	push   %r14
ffffffff80211048:	41 55                	push   %r13
ffffffff8021104a:	41 54                	push   %r12
ffffffff8021104c:	55                   	push   %rbp
ffffffff8021104d:	53                   	push   %rbx
ffffffff8021104e:	48 83 ec 08          	sub    $0x8,%rsp
    if(Prio>=RME_PREEMPT_PRIO_NUM)
ffffffff80211052:	49 83 f9 3f          	cmp    $0x3f,%r9
ffffffff80211056:	0f 87 64 03 00 00    	ja     ffffffff802113c0 <_RME_Thd_Boot_Crt+0x380>
ffffffff8021105c:	48 89 f0             	mov    %rsi,%rax
ffffffff8021105f:	48 89 cd             	mov    %rcx,%rbp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80211062:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff80211066:	4c 89 c3             	mov    %r8,%rbx
ffffffff80211069:	4d 89 cd             	mov    %r9,%r13
ffffffff8021106c:	f6 c4 80             	test   $0x80,%ah
ffffffff8021106f:	0f 84 53 02 00 00    	je     ffffffff802112c8 <_RME_Thd_Boot_Crt+0x288>
ffffffff80211075:	48 89 c1             	mov    %rax,%rcx
ffffffff80211078:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021107c:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021107f:	0f 83 0b 03 00 00    	jae    ffffffff80211390 <_RME_Thd_Boot_Crt+0x350>
ffffffff80211085:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80211089:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021108d:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80211094:	ff 00 00 
ffffffff80211097:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8021109e:	00 00 00 
ffffffff802110a1:	48 01 f9             	add    %rdi,%rcx
ffffffff802110a4:	4c 8b 11             	mov    (%rcx),%r10
ffffffff802110a7:	4d 89 d3             	mov    %r10,%r11
ffffffff802110aa:	4d 21 c3             	and    %r8,%r11
ffffffff802110ad:	4d 39 cb             	cmp    %r9,%r11
ffffffff802110b0:	0f 84 4a 02 00 00    	je     ffffffff80211300 <_RME_Thd_Boot_Crt+0x2c0>
ffffffff802110b6:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff802110ba:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff802110be:	0f 85 bc 02 00 00    	jne    ffffffff80211380 <_RME_Thd_Boot_Crt+0x340>
ffffffff802110c4:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff802110c8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802110cd:	4c 39 d0             	cmp    %r10,%rax
ffffffff802110d0:	0f 83 ba 02 00 00    	jae    ffffffff80211390 <_RME_Thd_Boot_Crt+0x350>
ffffffff802110d6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802110da:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff802110de:	48 8b 08             	mov    (%rax),%rcx
ffffffff802110e1:	49 21 c8             	and    %rcx,%r8
ffffffff802110e4:	4d 39 c8             	cmp    %r9,%r8
ffffffff802110e7:	0f 84 13 02 00 00    	je     ffffffff80211300 <_RME_Thd_Boot_Crt+0x2c0>
ffffffff802110ed:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802110f1:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802110f5:	0f 85 85 02 00 00    	jne    ffffffff80211380 <_RME_Thd_Boot_Crt+0x340>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802110fb:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff80211101:	0f 85 09 02 00 00    	jne    ffffffff80211310 <_RME_Thd_Boot_Crt+0x2d0>
ffffffff80211107:	48 39 f5             	cmp    %rsi,%rbp
ffffffff8021110a:	0f 83 80 02 00 00    	jae    ffffffff80211390 <_RME_Thd_Boot_Crt+0x350>
ffffffff80211110:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80211117:	ff 00 00 
ffffffff8021111a:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8021111e:	48 01 fd             	add    %rdi,%rbp
ffffffff80211121:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211128:	00 00 00 
ffffffff8021112b:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
ffffffff8021112f:	48 21 ce             	and    %rcx,%rsi
ffffffff80211132:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80211135:	0f 84 c5 01 00 00    	je     ffffffff80211300 <_RME_Thd_Boot_Crt+0x2c0>
ffffffff8021113b:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021113f:	48 83 f9 05          	cmp    $0x5,%rcx
ffffffff80211143:	0f 85 37 02 00 00    	jne    ffffffff80211380 <_RME_Thd_Boot_Crt+0x340>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80211149:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8021114d:	0f 84 4d 02 00 00    	je     ffffffff802113a0 <_RME_Thd_Boot_Crt+0x360>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff80211153:	f6 45 10 02          	testb  $0x2,0x10(%rbp)
ffffffff80211157:	0f 84 43 02 00 00    	je     ffffffff802113a0 <_RME_Thd_Boot_Crt+0x360>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8021115d:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80211161:	0f 83 29 02 00 00    	jae    ffffffff80211390 <_RME_Thd_Boot_Crt+0x350>
ffffffff80211167:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021116b:	48 03 50 18          	add    0x18(%rax),%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021116f:	31 c0                	xor    %eax,%eax
ffffffff80211171:	49 89 d6             	mov    %rdx,%r14
ffffffff80211174:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021117b:	00 00 00 
ffffffff8021117e:	f0 49 0f b1 16       	lock cmpxchg %rdx,(%r14)
ffffffff80211183:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff80211186:	84 d2                	test   %dl,%dl
ffffffff80211188:	0f 84 22 02 00 00    	je     ffffffff802113b0 <_RME_Thd_Boot_Crt+0x370>
ffffffff8021118e:	49 c7 46 20 01 00 00 	movq   $0x1,0x20(%r14)
ffffffff80211195:	00 
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff80211196:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8021119b:	48 89 df             	mov    %rbx,%rdi
ffffffff8021119e:	e8 6d e1 ff ff       	call   ffffffff8020f310 <_RME_Kot_Mark>
ffffffff802111a3:	49 89 c7             	mov    %rax,%r15
ffffffff802111a6:	48 85 c0             	test   %rax,%rax
ffffffff802111a9:	0f 85 1d 02 00 00    	jne    ffffffff802113cc <_RME_Thd_Boot_Crt+0x38c>
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff802111af:	66 0f 6f 05 e9 c2 00 	movdqa 0xc2e9(%rip),%xmm0        # ffffffff8021d4a0 <Table.1+0x180>
ffffffff802111b6:	00 
    Thread->Sched.TID=0U;
ffffffff802111b7:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
ffffffff802111be:	00 
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff802111bf:	0f 11 43 30          	movups %xmm0,0x30(%rbx)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff802111c3:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff802111c6:	85 c0                	test   %eax,%eax
ffffffff802111c8:	74 04                	je     ffffffff802111ce <_RME_Thd_Boot_Crt+0x18e>
ffffffff802111ca:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    Thread->Sched.Local=Local;
ffffffff802111ce:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    Thread->Sched.Prc=Prc_Root;
ffffffff802111d3:	48 89 6b 58          	mov    %rbp,0x58(%rbx)
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff802111d7:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802111db:	41 bc 01 00 00 00    	mov    $0x1,%r12d
    Thread->Sched.Signal=0U;
ffffffff802111e1:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
ffffffff802111e8:	00 
    Thread->Sched.Local=Local;
ffffffff802111e9:	48 89 43 28          	mov    %rax,0x28(%rbx)
    Thread->Sched.Prio=Prio;
ffffffff802111ed:	4c 89 6b 40          	mov    %r13,0x40(%rbx)
    Thread->Sched.Prio_Max=RME_PREEMPT_PRIO_NUM-1U;
ffffffff802111f1:	48 c7 43 48 3f 00 00 	movq   $0x3f,0x48(%rbx)
ffffffff802111f8:	00 
    Thread->Sched.Sched_Ref=1U;
ffffffff802111f9:	48 c7 43 60 01 00 00 	movq   $0x1,0x60(%rbx)
ffffffff80211200:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff80211201:	48 c7 43 70 00 00 00 	movq   $0x0,0x70(%rbx)
ffffffff80211208:	00 
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80211209:	e8 82 d8 ff ff       	call   ffffffff8020ea90 <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff8021120e:	48 8d 7b 78          	lea    0x78(%rbx),%rdi
ffffffff80211212:	e8 79 d8 ff ff       	call   ffffffff8020ea90 <_RME_List_Crt>
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80211217:	48 8d 83 b0 00 00 00 	lea    0xb0(%rbx),%rax
    Thread->Ctx.Hyp_Attr=0U;
ffffffff8021121e:	48 c7 83 88 00 00 00 	movq   $0x0,0x88(%rbx)
ffffffff80211225:	00 00 00 00 
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff80211229:	48 8d bb 98 00 00 00 	lea    0x98(%rbx),%rdi
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80211230:	48 89 83 90 00 00 00 	mov    %rax,0x90(%rbx)
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff80211237:	e8 54 d8 ff ff       	call   ffffffff8020ea90 <_RME_List_Crt>
    Thd_Crt->Head.Root_Ref=1U;
ffffffff8021123c:	66 0f 6f 05 6c c2 00 	movdqa 0xc26c(%rip),%xmm0        # ffffffff8021d4b0 <Table.1+0x190>
ffffffff80211243:	00 
ffffffff80211244:	4c 89 e2             	mov    %r12,%rdx
    Thread->Ctx.Invstk_Depth=0U;
ffffffff80211247:	48 c7 83 a8 00 00 00 	movq   $0x0,0xa8(%rbx)
ffffffff8021124e:	00 00 00 00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff80211252:	49 89 5e 18          	mov    %rbx,0x18(%r14)
    Thd_Crt->Head.Root_Ref=1U;
ffffffff80211256:	41 0f 11 46 08       	movups %xmm0,0x8(%r14)
ffffffff8021125b:	f0 48 0f c1 55 08    	lock xadd %rdx,0x8(%rbp)
    Prio=Thd->Sched.Prio;
ffffffff80211261:	48 8b 6b 40          	mov    0x40(%rbx),%rbp
    Local=Thd->Sched.Local;
ffffffff80211265:	4c 8b 6b 28          	mov    0x28(%rbx),%r13
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80211269:	48 89 df             	mov    %rbx,%rdi
ffffffff8021126c:	48 89 e9             	mov    %rbp,%rcx
ffffffff8021126f:	48 89 ea             	mov    %rbp,%rdx
ffffffff80211272:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80211276:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff8021127a:	4a 8b 74 29 30       	mov    0x30(%rcx,%r13,1),%rsi
ffffffff8021127f:	49 8d 54 15 28       	lea    0x28(%r13,%rdx,1),%rdx
ffffffff80211284:	e8 d7 d9 ff ff       	call   ffffffff8020ec60 <_RME_List_Ins>
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211289:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021128c:	89 e9                	mov    %ebp,%ecx
ffffffff8021128e:	4c 89 e0             	mov    %r12,%rax
ffffffff80211291:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff80211295:	48 d3 e0             	shl    %cl,%rax
ffffffff80211298:	49 09 44 d5 20       	or     %rax,0x20(%r13,%rdx,8)
    Local->Thd_Cur=Thread;
ffffffff8021129d:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
ffffffff802112a2:	48 89 58 08          	mov    %rbx,0x8(%rax)
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff802112a6:	48 b8 00 00 00 00 00 	movabs $0x6000000000000,%rax
ffffffff802112ad:	00 06 00 
ffffffff802112b0:	49 89 06             	mov    %rax,(%r14)
}
ffffffff802112b3:	48 83 c4 08          	add    $0x8,%rsp
ffffffff802112b7:	4c 89 f8             	mov    %r15,%rax
ffffffff802112ba:	5b                   	pop    %rbx
ffffffff802112bb:	5d                   	pop    %rbp
ffffffff802112bc:	41 5c                	pop    %r12
ffffffff802112be:	41 5d                	pop    %r13
ffffffff802112c0:	41 5e                	pop    %r14
ffffffff802112c2:	41 5f                	pop    %r15
ffffffff802112c4:	c3                   	ret
ffffffff802112c5:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802112c8:	48 39 f0             	cmp    %rsi,%rax
ffffffff802112cb:	0f 83 bf 00 00 00    	jae    ffffffff80211390 <_RME_Thd_Boot_Crt+0x350>
ffffffff802112d1:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff802112d5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802112d9:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff802112e0:	ff 00 00 
ffffffff802112e3:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff802112ea:	00 00 00 
ffffffff802112ed:	48 01 f8             	add    %rdi,%rax
ffffffff802112f0:	48 8b 08             	mov    (%rax),%rcx
ffffffff802112f3:	49 21 c8             	and    %rcx,%r8
ffffffff802112f6:	4d 39 c8             	cmp    %r9,%r8
ffffffff802112f9:	0f 85 ee fd ff ff    	jne    ffffffff802110ed <_RME_Thd_Boot_Crt+0xad>
ffffffff802112ff:	90                   	nop
ffffffff80211300:	49 c7 c7 f7 ff ff ff 	mov    $0xfffffffffffffff7,%r15
ffffffff80211307:	eb aa                	jmp    ffffffff802112b3 <_RME_Thd_Boot_Crt+0x273>
ffffffff80211309:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80211310:	48 89 e9             	mov    %rbp,%rcx
ffffffff80211313:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80211317:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021131a:	73 74                	jae    ffffffff80211390 <_RME_Thd_Boot_Crt+0x350>
ffffffff8021131c:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80211323:	00 00 00 
ffffffff80211326:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021132a:	48 01 f9             	add    %rdi,%rcx
ffffffff8021132d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80211334:	ff 00 00 
ffffffff80211337:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8021133a:	49 89 f1             	mov    %rsi,%r9
ffffffff8021133d:	49 21 f9             	and    %rdi,%r9
ffffffff80211340:	4d 39 c1             	cmp    %r8,%r9
ffffffff80211343:	74 bb                	je     ffffffff80211300 <_RME_Thd_Boot_Crt+0x2c0>
ffffffff80211345:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80211349:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021134d:	75 31                	jne    ffffffff80211380 <_RME_Thd_Boot_Crt+0x340>
ffffffff8021134f:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff80211353:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff80211359:	48 39 f5             	cmp    %rsi,%rbp
ffffffff8021135c:	73 32                	jae    ffffffff80211390 <_RME_Thd_Boot_Crt+0x350>
ffffffff8021135e:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff80211362:	48 03 69 18          	add    0x18(%rcx),%rbp
ffffffff80211366:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
ffffffff8021136a:	48 21 cf             	and    %rcx,%rdi
ffffffff8021136d:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80211370:	0f 85 c5 fd ff ff    	jne    ffffffff8021113b <_RME_Thd_Boot_Crt+0xfb>
ffffffff80211376:	eb 88                	jmp    ffffffff80211300 <_RME_Thd_Boot_Crt+0x2c0>
ffffffff80211378:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021137f:	00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80211380:	49 c7 c7 fe ff ff ff 	mov    $0xfffffffffffffffe,%r15
ffffffff80211387:	e9 27 ff ff ff       	jmp    ffffffff802112b3 <_RME_Thd_Boot_Crt+0x273>
ffffffff8021138c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80211390:	49 c7 c7 fd ff ff ff 	mov    $0xfffffffffffffffd,%r15
ffffffff80211397:	e9 17 ff ff ff       	jmp    ffffffff802112b3 <_RME_Thd_Boot_Crt+0x273>
ffffffff8021139c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802113a0:	49 c7 c7 f9 ff ff ff 	mov    $0xfffffffffffffff9,%r15
ffffffff802113a7:	e9 07 ff ff ff       	jmp    ffffffff802112b3 <_RME_Thd_Boot_Crt+0x273>
ffffffff802113ac:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff802113b0:	49 c7 c7 fb ff ff ff 	mov    $0xfffffffffffffffb,%r15
ffffffff802113b7:	e9 f7 fe ff ff       	jmp    ffffffff802112b3 <_RME_Thd_Boot_Crt+0x273>
ffffffff802113bc:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_PRIO;
ffffffff802113c0:	49 c7 c7 33 ff ff ff 	mov    $0xffffffffffffff33,%r15
ffffffff802113c7:	e9 e7 fe ff ff       	jmp    ffffffff802112b3 <_RME_Thd_Boot_Crt+0x273>
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff802113cc:	49 c7 06 00 00 00 00 	movq   $0x0,(%r14)
        return RME_ERR_CPT_KOT;
ffffffff802113d3:	49 c7 c7 fc ff ff ff 	mov    $0xfffffffffffffffc,%r15
ffffffff802113da:	e9 d4 fe ff ff       	jmp    ffffffff802112b3 <_RME_Thd_Boot_Crt+0x273>
ffffffff802113df:	90                   	nop

ffffffff802113e0 <_RME_Sig_Boot_Crt>:
{
ffffffff802113e0:	f3 0f 1e fa          	endbr64
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802113e4:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff802113e8:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff802113ee:	75 40                	jne    ffffffff80211430 <_RME_Sig_Boot_Crt+0x50>
ffffffff802113f0:	48 39 ce             	cmp    %rcx,%rsi
ffffffff802113f3:	0f 83 07 01 00 00    	jae    ffffffff80211500 <_RME_Sig_Boot_Crt+0x120>
ffffffff802113f9:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211400:	ff 00 00 
ffffffff80211403:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80211407:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021140b:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211412:	00 00 00 
ffffffff80211415:	48 8b 06             	mov    (%rsi),%rax
ffffffff80211418:	48 21 c1             	and    %rax,%rcx
ffffffff8021141b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021141e:	75 7a                	jne    ffffffff8021149a <_RME_Sig_Boot_Crt+0xba>
ffffffff80211420:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211427:	c3                   	ret
ffffffff80211428:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021142f:	00 
ffffffff80211430:	48 89 f0             	mov    %rsi,%rax
ffffffff80211433:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211437:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021143a:	0f 83 c0 00 00 00    	jae    ffffffff80211500 <_RME_Sig_Boot_Crt+0x120>
ffffffff80211440:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80211447:	00 00 00 
ffffffff8021144a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021144e:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80211452:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80211459:	ff 00 00 
ffffffff8021145c:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021145f:	49 89 c9             	mov    %rcx,%r9
ffffffff80211462:	49 21 f9             	and    %rdi,%r9
ffffffff80211465:	4d 39 c1             	cmp    %r8,%r9
ffffffff80211468:	74 b6                	je     ffffffff80211420 <_RME_Sig_Boot_Crt+0x40>
ffffffff8021146a:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021146e:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80211472:	0f 85 98 00 00 00    	jne    ffffffff80211510 <_RME_Sig_Boot_Crt+0x130>
ffffffff80211478:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8021147c:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80211482:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80211485:	73 79                	jae    ffffffff80211500 <_RME_Sig_Boot_Crt+0x120>
ffffffff80211487:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021148b:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff8021148f:	48 8b 06             	mov    (%rsi),%rax
ffffffff80211492:	48 21 c7             	and    %rax,%rdi
ffffffff80211495:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80211498:	74 86                	je     ffffffff80211420 <_RME_Sig_Boot_Crt+0x40>
ffffffff8021149a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021149e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802114a2:	75 6c                	jne    ffffffff80211510 <_RME_Sig_Boot_Crt+0x130>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff802114a4:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff802114a8:	74 6e                	je     ffffffff80211518 <_RME_Sig_Boot_Crt+0x138>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff802114aa:	48 3b 56 28          	cmp    0x28(%rsi),%rdx
ffffffff802114ae:	73 50                	jae    ffffffff80211500 <_RME_Sig_Boot_Crt+0x120>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802114b0:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff802114b7:	00 00 00 
ffffffff802114ba:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802114be:	31 c0                	xor    %eax,%eax
ffffffff802114c0:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff802114c4:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802114c9:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff802114cc:	84 c9                	test   %cl,%cl
ffffffff802114ce:	74 50                	je     ffffffff80211520 <_RME_Sig_Boot_Crt+0x140>
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff802114d0:	66 0f 6f 05 e8 bf 00 	movdqa 0xbfe8(%rip),%xmm0        # ffffffff8021d4c0 <Table.1+0x1a0>
ffffffff802114d7:	00 
    Sig_Crt->Thd=RME_NULL;
ffffffff802114d8:	48 c7 42 30 00 00 00 	movq   $0x0,0x30(%rdx)
ffffffff802114df:	00 
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff802114e0:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff802114e3:	66 0f 6f 05 e5 bf 00 	movdqa 0xbfe5(%rip),%xmm0        # ffffffff8021d4d0 <Table.1+0x1b0>
ffffffff802114ea:	00 
ffffffff802114eb:	0f 11 42 10          	movups %xmm0,0x10(%rdx)
ffffffff802114ef:	66 0f 6f 05 e9 bf 00 	movdqa 0xbfe9(%rip),%xmm0        # ffffffff8021d4e0 <Table.1+0x1c0>
ffffffff802114f6:	00 
ffffffff802114f7:	0f 11 42 20          	movups %xmm0,0x20(%rdx)
    return 0;
ffffffff802114fb:	c3                   	ret
ffffffff802114fc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80211500:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211507:	c3                   	ret
ffffffff80211508:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021150f:	00 
ffffffff80211510:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211517:	c3                   	ret
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80211518:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021151f:	c3                   	ret
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80211520:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80211527:	c3                   	ret
ffffffff80211528:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021152f:	00 

ffffffff80211530 <_RME_Kern_High>:
{
ffffffff80211530:	f3 0f 1e fa          	endbr64
ffffffff80211534:	41 56                	push   %r14
ffffffff80211536:	41 55                	push   %r13
ffffffff80211538:	41 54                	push   %r12
ffffffff8021153a:	55                   	push   %rbp
ffffffff8021153b:	53                   	push   %rbx
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff8021153c:	48 8b 46 20          	mov    0x20(%rsi),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80211540:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80211544:	48 83 f8 01          	cmp    $0x1,%rax
    Thd_Cur=Local->Thd_Cur;
ffffffff80211548:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff8021154c:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff8021154f:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80211553:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80211558:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021155c:	4c 8b 64 06 08       	mov    0x8(%rsi,%rax,1),%r12
    if(Thd_New==Thd_Cur)
ffffffff80211561:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80211564:	74 5b                	je     ffffffff802115c1 <_RME_Kern_High+0x91>
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80211566:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
ffffffff8021156b:	49 89 fd             	mov    %rdi,%r13
ffffffff8021156e:	48 89 f3             	mov    %rsi,%rbx
ffffffff80211571:	75 0b                	jne    ffffffff8021157e <_RME_Kern_High+0x4e>
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff80211573:	49 8b 44 24 40       	mov    0x40(%r12),%rax
ffffffff80211578:	48 39 45 40          	cmp    %rax,0x40(%rbp)
ffffffff8021157c:	73 43                	jae    ffffffff802115c1 <_RME_Kern_High+0x91>
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff8021157e:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff80211585:	4d 8b b4 24 90 00 00 	mov    0x90(%r12),%r14
ffffffff8021158c:	00 
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff8021158d:	4c 89 ee             	mov    %r13,%rsi
ffffffff80211590:	e8 5b 94 00 00       	call   ffffffff8021a9f0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80211595:	4c 89 f6             	mov    %r14,%rsi
ffffffff80211598:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021159b:	e8 50 94 00 00       	call   ffffffff8021a9f0 <__RME_Thd_Reg_Copy>
    Pgt_Cur=_RME_Thd_Pgt(Thd_Cur);
ffffffff802115a0:	48 89 ef             	mov    %rbp,%rdi
ffffffff802115a3:	e8 78 f6 ff ff       	call   ffffffff80210c20 <_RME_Thd_Pgt>
    Pgt_New=_RME_Thd_Pgt(Thd_New);
ffffffff802115a8:	4c 89 e7             	mov    %r12,%rdi
    Pgt_Cur=_RME_Thd_Pgt(Thd_Cur);
ffffffff802115ab:	48 89 c5             	mov    %rax,%rbp
    Pgt_New=_RME_Thd_Pgt(Thd_New);
ffffffff802115ae:	e8 6d f6 ff ff       	call   ffffffff80210c20 <_RME_Thd_Pgt>
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff802115b3:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff802115b7:	48 39 4d 18          	cmp    %rcx,0x18(%rbp)
ffffffff802115bb:	75 13                	jne    ffffffff802115d0 <_RME_Kern_High+0xa0>
    Local->Thd_Cur=Thd_New;
ffffffff802115bd:	4c 89 63 08          	mov    %r12,0x8(%rbx)
}
ffffffff802115c1:	5b                   	pop    %rbx
ffffffff802115c2:	5d                   	pop    %rbp
ffffffff802115c3:	41 5c                	pop    %r12
ffffffff802115c5:	41 5d                	pop    %r13
ffffffff802115c7:	41 5e                	pop    %r14
ffffffff802115c9:	c3                   	ret
ffffffff802115ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff802115d0:	48 89 c7             	mov    %rax,%rdi
ffffffff802115d3:	e8 58 97 00 00       	call   ffffffff8021ad30 <__RME_Pgt_Set>
ffffffff802115d8:	eb e3                	jmp    ffffffff802115bd <_RME_Kern_High+0x8d>
ffffffff802115da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff802115e0 <_RME_Kern_Snd>:
{
ffffffff802115e0:	f3 0f 1e fa          	endbr64
ffffffff802115e4:	41 55                	push   %r13
ffffffff802115e6:	41 54                	push   %r12
ffffffff802115e8:	55                   	push   %rbp
ffffffff802115e9:	53                   	push   %rbx
ffffffff802115ea:	48 89 fb             	mov    %rdi,%rbx
ffffffff802115ed:	48 83 ec 08          	sub    $0x8,%rsp
    Thd_Sig=Cap_Sig->Thd;
ffffffff802115f1:	48 8b 6f 30          	mov    0x30(%rdi),%rbp
    if(Thd_Sig!=RME_NULL)
ffffffff802115f5:	48 85 ed             	test   %rbp,%rbp
ffffffff802115f8:	74 0e                	je     ffffffff80211608 <_RME_Kern_Snd+0x28>
        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff802115fa:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff802115fe:	e8 3c b2 ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
ffffffff80211603:	49 39 c4             	cmp    %rax,%r12
ffffffff80211606:	74 30                	je     ffffffff80211638 <_RME_Kern_Snd+0x58>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80211608:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021160d:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80211613:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff8021161a:	ff ff 7f 
ffffffff8021161d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211620:	0f 82 a3 00 00 00    	jb     ffffffff802116c9 <_RME_Kern_Snd+0xe9>
    return 0;
ffffffff80211626:	31 c0                	xor    %eax,%eax
}
ffffffff80211628:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021162c:	5b                   	pop    %rbx
ffffffff8021162d:	5d                   	pop    %rbp
ffffffff8021162e:	41 5c                	pop    %r12
ffffffff80211630:	41 5d                	pop    %r13
ffffffff80211632:	c3                   	ret
ffffffff80211633:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff80211638:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff8021163f:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211644:	e8 f7 a3 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff80211649:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff8021164e:	75 30                	jne    ffffffff80211680 <_RME_Kern_Snd+0xa0>
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff80211650:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff80211657:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80211658:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
ffffffff8021165c:	48 39 7d 10          	cmp    %rdi,0x10(%rbp)
ffffffff80211660:	0f 84 7c 00 00 00    	je     ffffffff802116e2 <_RME_Kern_Snd+0x102>
    if(Thd->Sched.Sched_Sig!=0U)
ffffffff80211666:	48 8b 7d 70          	mov    0x70(%rbp),%rdi
ffffffff8021166a:	48 85 ff             	test   %rdi,%rdi
ffffffff8021166d:	74 05                	je     ffffffff80211674 <_RME_Kern_Snd+0x94>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff8021166f:	e8 6c ff ff ff       	call   ffffffff802115e0 <_RME_Kern_Snd>
        Cap_Sig->Thd=RME_NULL;
ffffffff80211674:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff8021167b:	00 
ffffffff8021167c:	eb a8                	jmp    ffffffff80211626 <_RME_Kern_Snd+0x46>
ffffffff8021167e:	66 90                	xchg   %ax,%ax
    Prio=Thd->Sched.Prio;
ffffffff80211680:	4c 8b 65 40          	mov    0x40(%rbp),%r12
    Local=Thd->Sched.Local;
ffffffff80211684:	4c 8b 6d 28          	mov    0x28(%rbp),%r13
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff80211688:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff8021168f:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80211690:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211693:	4c 89 e0             	mov    %r12,%rax
ffffffff80211696:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021169a:	49 8d 54 05 28       	lea    0x28(%r13,%rax,1),%rdx
ffffffff8021169f:	4c 89 e0             	mov    %r12,%rax
ffffffff802116a2:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802116a6:	4a 8b 74 28 30       	mov    0x30(%rax,%r13,1),%rsi
ffffffff802116ab:	e8 b0 d5 ff ff       	call   ffffffff8020ec60 <_RME_List_Ins>
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802116b0:	4c 89 e2             	mov    %r12,%rdx
ffffffff802116b3:	44 89 e1             	mov    %r12d,%ecx
ffffffff802116b6:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff802116bb:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff802116bf:	48 d3 e0             	shl    %cl,%rax
ffffffff802116c2:	49 09 44 d5 20       	or     %rax,0x20(%r13,%rdx,8)
}
ffffffff802116c7:	eb ab                	jmp    ffffffff80211674 <_RME_Kern_Snd+0x94>
ffffffff802116c9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802116d0:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
            return RME_ERR_SIV_FULL;
ffffffff802116d6:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff802116dd:	e9 46 ff ff ff       	jmp    ffffffff80211628 <_RME_Kern_Snd+0x48>
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff802116e2:	48 8b 45 68          	mov    0x68(%rbp),%rax
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff802116e6:	48 8b b0 80 00 00 00 	mov    0x80(%rax),%rsi
ffffffff802116ed:	48 8d 50 78          	lea    0x78(%rax),%rdx
ffffffff802116f1:	e8 6a d5 ff ff       	call   ffffffff8020ec60 <_RME_List_Ins>
ffffffff802116f6:	e9 6b ff ff ff       	jmp    ffffffff80211666 <_RME_Kern_Snd+0x86>
ffffffff802116fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80211700 <_RME_Run_Notif>:
{
ffffffff80211700:	53                   	push   %rbx
ffffffff80211701:	48 89 fb             	mov    %rdi,%rbx
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80211704:	48 83 c7 10          	add    $0x10,%rdi
ffffffff80211708:	48 39 7b 10          	cmp    %rdi,0x10(%rbx)
ffffffff8021170c:	74 1a                	je     ffffffff80211728 <_RME_Run_Notif+0x28>
    if(Thd->Sched.Sched_Sig!=0U)
ffffffff8021170e:	48 8b 7b 70          	mov    0x70(%rbx),%rdi
ffffffff80211712:	48 85 ff             	test   %rdi,%rdi
ffffffff80211715:	74 09                	je     ffffffff80211720 <_RME_Run_Notif+0x20>
}
ffffffff80211717:	5b                   	pop    %rbx
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80211718:	e9 c3 fe ff ff       	jmp    ffffffff802115e0 <_RME_Kern_Snd>
ffffffff8021171d:	0f 1f 00             	nopl   (%rax)
}
ffffffff80211720:	5b                   	pop    %rbx
ffffffff80211721:	c3                   	ret
ffffffff80211722:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80211728:	48 8b 43 68          	mov    0x68(%rbx),%rax
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff8021172c:	48 8b b0 80 00 00 00 	mov    0x80(%rax),%rsi
ffffffff80211733:	48 8d 50 78          	lea    0x78(%rax),%rdx
ffffffff80211737:	e8 24 d5 ff ff       	call   ffffffff8020ec60 <_RME_List_Ins>
ffffffff8021173c:	eb d0                	jmp    ffffffff8021170e <_RME_Run_Notif+0xe>
ffffffff8021173e:	66 90                	xchg   %ax,%ax

ffffffff80211740 <_RME_Svc_Handler>:
{
ffffffff80211740:	f3 0f 1e fa          	endbr64
ffffffff80211744:	41 57                	push   %r15
ffffffff80211746:	41 56                	push   %r14
ffffffff80211748:	41 55                	push   %r13
ffffffff8021174a:	41 54                	push   %r12
ffffffff8021174c:	55                   	push   %rbp
ffffffff8021174d:	48 89 fd             	mov    %rdi,%rbp
ffffffff80211750:	53                   	push   %rbx
ffffffff80211751:	48 83 ec 78          	sub    $0x78,%rsp
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
ffffffff80211755:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
ffffffff8021175a:	48 8d 54 24 28       	lea    0x28(%rsp),%rdx
ffffffff8021175f:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
ffffffff80211764:	e8 c7 a2 00 00       	call   ffffffff8021ba30 <__RME_Svc_Param_Get>
    if(Svc_Num==RME_SVC_INV_RET)
ffffffff80211769:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
ffffffff8021176e:	83 e3 3f             	and    $0x3f,%ebx
ffffffff80211771:	74 65                	je     ffffffff802117d8 <_RME_Svc_Handler+0x98>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff80211773:	e8 c7 b0 ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
ffffffff80211778:	48 8b 40 08          	mov    0x8(%rax),%rax
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff8021177c:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
    if(Inv_Top==RME_NULL)
ffffffff80211783:	48 85 d2             	test   %rdx,%rdx
ffffffff80211786:	74 40                	je     ffffffff802117c8 <_RME_Svc_Handler+0x88>
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff80211788:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    if(Inv_Top==RME_NULL)
ffffffff8021178f:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211792:	74 34                	je     ffffffff802117c8 <_RME_Svc_Handler+0x88>
        Cpt=Inv_Top->Prc->Cpt;
ffffffff80211794:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff80211798:	4c 8b 60 28          	mov    0x28(%rax),%r12
    if(Svc_Num==RME_SVC_INV_ACT)
ffffffff8021179c:	48 83 fb 01          	cmp    $0x1,%rbx
ffffffff802117a0:	0f 84 3a 0b 00 00    	je     ffffffff802122e0 <_RME_Svc_Handler+0xba0>
    switch(Svc_Num)
ffffffff802117a6:	48 83 fb 09          	cmp    $0x9,%rbx
ffffffff802117aa:	0f 87 68 0c 00 00    	ja     ffffffff80212418 <_RME_Svc_Handler+0xcd8>
ffffffff802117b0:	48 8d 15 c9 b9 00 00 	lea    0xb9c9(%rip),%rdx        # ffffffff8021d180 <UVM_Init+0x16e0>
ffffffff802117b7:	48 63 04 9a          	movslq (%rdx,%rbx,4),%rax
ffffffff802117bb:	48 01 d0             	add    %rdx,%rax
ffffffff802117be:	3e ff e0             	notrack jmp *%rax
ffffffff802117c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        Cpt=Thd_Cur->Sched.Prc->Cpt;
ffffffff802117c8:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff802117cc:	4c 8b 60 28          	mov    0x28(%rax),%r12
ffffffff802117d0:	eb ca                	jmp    ffffffff8021179c <_RME_Svc_Handler+0x5c>
ffffffff802117d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Retval=_RME_Inv_Ret(Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
ffffffff802117d8:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
ffffffff802117dd:	31 d2                	xor    %edx,%edx
ffffffff802117df:	48 89 ef             	mov    %rbp,%rdi
ffffffff802117e2:	e8 d9 d2 ff ff       	call   ffffffff8020eac0 <_RME_Inv_Ret>
        RME_SWITCH_RETURN(Reg, Retval);
ffffffff802117e7:	48 85 c0             	test   %rax,%rax
ffffffff802117ea:	0f 88 cc 08 00 00    	js     ffffffff802120bc <_RME_Svc_Handler+0x97c>
}
ffffffff802117f0:	48 83 c4 78          	add    $0x78,%rsp
ffffffff802117f4:	5b                   	pop    %rbx
ffffffff802117f5:	5d                   	pop    %rbp
ffffffff802117f6:	41 5c                	pop    %r12
ffffffff802117f8:	41 5d                	pop    %r13
ffffffff802117fa:	41 5e                	pop    %r14
ffffffff802117fc:	41 5f                	pop    %r15
ffffffff802117fe:	c3                   	ret
ffffffff802117ff:	90                   	nop
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Thd */
ffffffff80211800:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13
            Retval=_RME_Thd_Swt(Cpt,
ffffffff80211805:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx
    Local=RME_CPU_LOCAL();
ffffffff8021180a:	e8 30 b0 ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
    Thd_Cur=Local->Thd_Cur;
ffffffff8021180f:	4c 8b 78 08          	mov    0x8(%rax),%r15
    Local=RME_CPU_LOCAL();
ffffffff80211813:	49 89 c6             	mov    %rax,%r14
    if(Cap_Thd<RME_CID_NULL)
ffffffff80211816:	49 81 fd ff ff ff 7f 	cmp    $0x7fffffff,%r13
ffffffff8021181d:	0f 8f fd 0c 00 00    	jg     ffffffff80212520 <_RME_Svc_Handler+0xde0>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211823:	49 8b 44 24 28       	mov    0x28(%r12),%rax
ffffffff80211828:	41 f7 c5 00 80 00 00 	test   $0x8000,%r13d
ffffffff8021182f:	0f 85 03 24 00 00    	jne    ffffffff80213c38 <_RME_Svc_Handler+0x24f8>
ffffffff80211835:	49 39 c5             	cmp    %rax,%r13
ffffffff80211838:	0f 83 6f 34 00 00    	jae    ffffffff80214cad <_RME_Svc_Handler+0x356d>
ffffffff8021183e:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211845:	ff 00 00 
ffffffff80211848:	4c 89 e8             	mov    %r13,%rax
ffffffff8021184b:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211852:	00 00 00 
ffffffff80211855:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211859:	49 03 44 24 18       	add    0x18(%r12),%rax
ffffffff8021185e:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211861:	48 21 d1             	and    %rdx,%rcx
ffffffff80211864:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211867:	0f 84 40 24 00 00    	je     ffffffff80213cad <_RME_Svc_Handler+0x256d>
ffffffff8021186d:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211871:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80211875:	0f 85 93 33 00 00    	jne    ffffffff80214c0e <_RME_Svc_Handler+0x34ce>
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff8021187b:	f6 40 11 01          	testb  $0x1,0x11(%rax)
ffffffff8021187f:	0f 84 8c 34 00 00    	je     ffffffff80214d11 <_RME_Svc_Handler+0x35d1>
        Thd_New=RME_CAP_GETOBJ(Thd_Cap_New,struct RME_Thd_Struct*);
ffffffff80211885:	4c 8b 60 18          	mov    0x18(%rax),%r12
        if(Thd_New->Sched.Local!=Local)
ffffffff80211889:	4d 3b 74 24 28       	cmp    0x28(%r12),%r14
ffffffff8021188e:	0f 85 56 33 00 00    	jne    ffffffff80214bea <_RME_Svc_Handler+0x34aa>
        if(Thd_Cur->Sched.Prio!=Thd_New->Sched.Prio)
ffffffff80211894:	49 8b 44 24 40       	mov    0x40(%r12),%rax
ffffffff80211899:	49 39 47 40          	cmp    %rax,0x40(%r15)
ffffffff8021189d:	0f 85 e6 33 00 00    	jne    ffffffff80214c89 <_RME_Svc_Handler+0x3549>
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff802118a3:	49 8b 44 24 38       	mov    0x38(%r12),%rax
ffffffff802118a8:	48 83 e8 01          	sub    $0x1,%rax
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff802118ac:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802118b0:	0f 86 34 33 00 00    	jbe    ffffffff80214bea <_RME_Svc_Handler+0x34aa>
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff802118b6:	48 85 db             	test   %rbx,%rbx
ffffffff802118b9:	0f 84 ab 0c 00 00    	je     ffffffff8021256a <_RME_Svc_Handler+0xe2a>
ffffffff802118bf:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff802118c6:	ff ff 7f 
ffffffff802118c9:	49 3b 47 30          	cmp    0x30(%r15),%rax
ffffffff802118cd:	0f 82 97 0c 00 00    	jb     ffffffff8021256a <_RME_Svc_Handler+0xe2a>
            Thd_Cur->Sched.Slice=0U;
ffffffff802118d3:	49 c7 47 30 00 00 00 	movq   $0x0,0x30(%r15)
ffffffff802118da:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff802118db:	4c 89 ff             	mov    %r15,%rdi
ffffffff802118de:	e8 1d d3 ff ff       	call   ffffffff8020ec00 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff802118e3:	49 c7 47 38 02 00 00 	movq   $0x2,0x38(%r15)
ffffffff802118ea:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff802118eb:	4c 89 ff             	mov    %r15,%rdi
ffffffff802118ee:	e8 0d fe ff ff       	call   ffffffff80211700 <_RME_Run_Notif>
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff802118f3:	49 8b 46 20          	mov    0x20(%r14),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff802118f7:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff802118fb:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802118ff:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80211902:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80211906:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff8021190b:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021190f:	49 8b 44 06 08       	mov    0x8(%r14,%rax,1),%rax
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
ffffffff80211914:	48 8b 48 40          	mov    0x40(%rax),%rcx
ffffffff80211918:	49 39 4c 24 40       	cmp    %rcx,0x40(%r12)
ffffffff8021191d:	0f 82 50 25 00 00    	jb     ffffffff80213e73 <_RME_Svc_Handler+0x2733>
ffffffff80211923:	4d 39 e7             	cmp    %r12,%r15
ffffffff80211926:	0f 84 47 25 00 00    	je     ffffffff80213e73 <_RME_Svc_Handler+0x2733>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff8021192c:	31 f6                	xor    %esi,%esi
ffffffff8021192e:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211931:	e8 0a a1 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
    if(Thd_Cur==Thd_New)
ffffffff80211936:	e9 42 0c 00 00       	jmp    ffffffff8021257d <_RME_Svc_Handler+0xe3d>
ffffffff8021193b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff80211940:	4c 8b 6c 24 40       	mov    0x40(%rsp),%r13
                                      (rme_cid_t)Param[1],                  /* rme_cid_t Cap_Thd_Src */
ffffffff80211945:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
ffffffff8021194a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    if(Time==0U)
ffffffff8021194f:	4d 85 ed             	test   %r13,%r13
ffffffff80211952:	0f 84 49 33 00 00    	je     ffffffff80214ca1 <_RME_Svc_Handler+0x3561>
{
    struct RME_Cap_Kfn* Kfn_Op;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80211958:	49 8b 4c 24 28       	mov    0x28(%r12),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff8021195d:	f6 c4 80             	test   $0x80,%ah
ffffffff80211960:	0f 84 ba 0d 00 00    	je     ffffffff80212720 <_RME_Svc_Handler+0xfe0>
ffffffff80211966:	48 89 c2             	mov    %rax,%rdx
ffffffff80211969:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021196d:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211970:	0f 83 80 25 00 00    	jae    ffffffff80213ef6 <_RME_Svc_Handler+0x27b6>
ffffffff80211976:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff8021197b:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021197f:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80211986:	ff 00 00 
ffffffff80211989:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80211990:	00 00 00 
ffffffff80211993:	48 01 f2             	add    %rsi,%rdx
ffffffff80211996:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80211999:	49 89 fa             	mov    %rdi,%r10
ffffffff8021199c:	4d 21 c2             	and    %r8,%r10
ffffffff8021199f:	4d 39 ca             	cmp    %r9,%r10
ffffffff802119a2:	0f 84 b2 0d 00 00    	je     ffffffff8021275a <_RME_Svc_Handler+0x101a>
ffffffff802119a8:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff802119ac:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff802119b0:	0f 85 b1 24 00 00    	jne    ffffffff80213e67 <_RME_Svc_Handler+0x2727>
ffffffff802119b6:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff802119ba:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802119bf:	48 39 f8             	cmp    %rdi,%rax
ffffffff802119c2:	0f 83 2e 25 00 00    	jae    ffffffff80213ef6 <_RME_Svc_Handler+0x27b6>
ffffffff802119c8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802119cc:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802119d0:	49 89 c4             	mov    %rax,%r12
ffffffff802119d3:	48 8b 00             	mov    (%rax),%rax
ffffffff802119d6:	49 21 c0             	and    %rax,%r8
ffffffff802119d9:	4d 39 c8             	cmp    %r9,%r8
ffffffff802119dc:	0f 84 78 0d 00 00    	je     ffffffff8021275a <_RME_Svc_Handler+0x101a>
ffffffff802119e2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802119e6:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802119ea:	0f 85 77 24 00 00    	jne    ffffffff80213e67 <_RME_Svc_Handler+0x2727>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff802119f0:	f6 c7 80             	test   $0x80,%bh
ffffffff802119f3:	0f 85 c7 1f 00 00    	jne    ffffffff802139c0 <_RME_Svc_Handler+0x2280>
ffffffff802119f9:	48 39 cb             	cmp    %rcx,%rbx
ffffffff802119fc:	0f 83 f4 24 00 00    	jae    ffffffff80213ef6 <_RME_Svc_Handler+0x27b6>
ffffffff80211a02:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211a09:	ff 00 00 
ffffffff80211a0c:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80211a10:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80211a17:	00 00 00 
ffffffff80211a1a:	48 01 f3             	add    %rsi,%rbx
ffffffff80211a1d:	48 8b 03             	mov    (%rbx),%rax
ffffffff80211a20:	48 21 c2             	and    %rax,%rdx
ffffffff80211a23:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211a26:	0f 84 2e 0d 00 00    	je     ffffffff8021275a <_RME_Svc_Handler+0x101a>
ffffffff80211a2c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211a30:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80211a34:	0f 85 2d 24 00 00    	jne    ffffffff80213e67 <_RME_Svc_Handler+0x2727>
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80211a3a:	41 f6 44 24 10 80    	testb  $0x80,0x10(%r12)
ffffffff80211a40:	0f 84 e0 24 00 00    	je     ffffffff80213f26 <_RME_Svc_Handler+0x27e6>
    RME_CAP_CHECK(Thd_Src_Op,RME_THD_FLAG_XFER_SRC);
ffffffff80211a46:	f6 43 10 40          	testb  $0x40,0x10(%rbx)
ffffffff80211a4a:	0f 84 d6 24 00 00    	je     ffffffff80213f26 <_RME_Svc_Handler+0x27e6>
    Local=RME_CPU_LOCAL();
ffffffff80211a50:	e8 ea ad ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
    Thd_Src=RME_CAP_GETOBJ(Thd_Src_Op,struct RME_Thd_Struct*);
ffffffff80211a55:	4c 8b 73 18          	mov    0x18(%rbx),%r14
    Local=RME_CPU_LOCAL();
ffffffff80211a59:	49 89 c7             	mov    %rax,%r15
    if(Thd_Src->Sched.Local!=Local)
ffffffff80211a5c:	49 3b 46 28          	cmp    0x28(%r14),%rax
ffffffff80211a60:	0f 85 3b 32 00 00    	jne    ffffffff80214ca1 <_RME_Svc_Handler+0x3561>
    if(Thd_Src->Sched.Slice==0U)
ffffffff80211a66:	49 8b 46 30          	mov    0x30(%r14),%rax
ffffffff80211a6a:	48 85 c0             	test   %rax,%rax
ffffffff80211a6d:	0f 84 2e 32 00 00    	je     ffffffff80214ca1 <_RME_Svc_Handler+0x3561>
    Thd_Dst=RME_CAP_GETOBJ(Thd_Dst_Op,struct RME_Thd_Struct*);
ffffffff80211a73:	49 8b 5c 24 18       	mov    0x18(%r12),%rbx
    if(Thd_Dst->Sched.Local!=Local)
ffffffff80211a78:	4c 3b 7b 28          	cmp    0x28(%rbx),%r15
ffffffff80211a7c:	0f 85 1f 32 00 00    	jne    ffffffff80214ca1 <_RME_Svc_Handler+0x3561>
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80211a82:	48 8b 4b 48          	mov    0x48(%rbx),%rcx
ffffffff80211a86:	49 39 4e 48          	cmp    %rcx,0x48(%r14)
ffffffff80211a8a:	73 14                	jae    ffffffff80211aa0 <_RME_Svc_Handler+0x360>
ffffffff80211a8c:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff80211a93:	ff ff 7f 
ffffffff80211a96:	48 39 53 30          	cmp    %rdx,0x30(%rbx)
ffffffff80211a9a:	0f 85 19 32 00 00    	jne    ffffffff80214cb9 <_RME_Svc_Handler+0x3579>
    if(Thd_Src->Sched.Slice<RME_THD_INF_TIME)
ffffffff80211aa0:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80211aa7:	ff ff 7f 
ffffffff80211aaa:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211aad:	0f 82 dd 1f 00 00    	jb     ffffffff80213a90 <_RME_Svc_Handler+0x2350>
        if(Time>=RME_THD_INF_TIME)
ffffffff80211ab3:	4c 39 ea             	cmp    %r13,%rdx
ffffffff80211ab6:	0f 83 24 22 00 00    	jae    ffffffff80213ce0 <_RME_Svc_Handler+0x25a0>
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80211abc:	48 8b 4b 30          	mov    0x30(%rbx),%rcx
ffffffff80211ac0:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211ac3:	0f 83 78 23 00 00    	jae    ffffffff80213e41 <_RME_Svc_Handler+0x2701>
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff80211ac9:	49 c7 46 30 00 00 00 	movq   $0x0,0x30(%r14)
ffffffff80211ad0:	00 
        if(Thd_Src->Sched.State==RME_THD_READY)
ffffffff80211ad1:	49 83 7e 38 00       	cmpq   $0x0,0x38(%r14)
ffffffff80211ad6:	0f 84 99 22 00 00    	je     ffffffff80213d75 <_RME_Svc_Handler+0x2635>
    __RME_Svc_Retval_Set(Reg,(rme_ret_t)(Thd_Dst->Sched.Slice));
ffffffff80211adc:	48 8b 73 30          	mov    0x30(%rbx),%rsi
ffffffff80211ae0:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211ae3:	e8 58 9f 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
    if(Thd_Dst->Sched.State==RME_THD_TIMEOUT)
ffffffff80211ae8:	48 83 7b 38 02       	cmpq   $0x2,0x38(%rbx)
ffffffff80211aed:	0f 85 0d 04 00 00    	jne    ffffffff80211f00 <_RME_Svc_Handler+0x7c0>
        Thd_Dst->Sched.State=RME_THD_READY;
ffffffff80211af3:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
ffffffff80211afa:	00 
        _RME_Run_Ins(Thd_Dst);
ffffffff80211afb:	48 89 df             	mov    %rbx,%rdi
ffffffff80211afe:	e8 7d d1 ff ff       	call   ffffffff8020ec80 <_RME_Run_Ins>
ffffffff80211b03:	e9 f8 03 00 00       	jmp    ffffffff80211f00 <_RME_Svc_Handler+0x7c0>
ffffffff80211b08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80211b0f:	00 
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
ffffffff80211b10:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff80211b15:	4c 8b 6c 24 28       	mov    0x28(%rsp),%r13
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
ffffffff80211b1a:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff80211b1f:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff80211b24:	48 89 d8             	mov    %rbx,%rax
ffffffff80211b27:	41 89 df             	mov    %ebx,%r15d
ffffffff80211b2a:	48 c1 e8 20          	shr    $0x20,%rax
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff80211b2e:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80211b33:	41 89 fe             	mov    %edi,%r14d
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff80211b36:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if((Number==0U)||(Number>3U))
ffffffff80211b3b:	49 8d 45 ff          	lea    -0x1(%r13),%rax
ffffffff80211b3f:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffffff80211b44:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211b48:	0f 87 44 23 00 00    	ja     ffffffff80213e92 <_RME_Svc_Handler+0x2752>
    Local=RME_CPU_LOCAL();
ffffffff80211b4e:	e8 ec ac ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80211b53:	f6 c7 80             	test   $0x80,%bh
ffffffff80211b56:	4d 8b 44 24 28       	mov    0x28(%r12),%r8
ffffffff80211b5b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff80211b60:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    Local=RME_CPU_LOCAL();
ffffffff80211b65:	48 89 c1             	mov    %rax,%rcx
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80211b68:	0f 84 02 0c 00 00    	je     ffffffff80212770 <_RME_Svc_Handler+0x1030>
ffffffff80211b6e:	49 c1 ef 10          	shr    $0x10,%r15
ffffffff80211b72:	4d 39 c7             	cmp    %r8,%r15
ffffffff80211b75:	0f 83 4a 31 00 00    	jae    ffffffff80214cc5 <_RME_Svc_Handler+0x3585>
ffffffff80211b7b:	4d 8b 4c 24 18       	mov    0x18(%r12),%r9
ffffffff80211b80:	49 c1 e7 06          	shl    $0x6,%r15
ffffffff80211b84:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80211b8b:	ff 00 00 
ffffffff80211b8e:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80211b95:	00 00 00 
ffffffff80211b98:	4d 01 cf             	add    %r9,%r15
ffffffff80211b9b:	4d 8b 1f             	mov    (%r15),%r11
ffffffff80211b9e:	4d 89 dc             	mov    %r11,%r12
ffffffff80211ba1:	49 21 c4             	and    %rax,%r12
ffffffff80211ba4:	4d 39 d4             	cmp    %r10,%r12
ffffffff80211ba7:	0f 84 f4 1f 00 00    	je     ffffffff80213ba1 <_RME_Svc_Handler+0x2461>
ffffffff80211bad:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff80211bb1:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff80211bb5:	0f 85 fc 0b 00 00    	jne    ffffffff802127b7 <_RME_Svc_Handler+0x1077>
ffffffff80211bbb:	4d 8b 5f 28          	mov    0x28(%r15),%r11
ffffffff80211bbf:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff80211bc5:	4c 39 db             	cmp    %r11,%rbx
ffffffff80211bc8:	0f 83 f7 30 00 00    	jae    ffffffff80214cc5 <_RME_Svc_Handler+0x3585>
ffffffff80211bce:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80211bd2:	49 03 5f 18          	add    0x18(%r15),%rbx
ffffffff80211bd6:	4c 8b 1b             	mov    (%rbx),%r11
ffffffff80211bd9:	4c 21 d8             	and    %r11,%rax
ffffffff80211bdc:	4c 39 d0             	cmp    %r10,%rax
ffffffff80211bdf:	0f 84 bc 1f 00 00    	je     ffffffff80213ba1 <_RME_Svc_Handler+0x2461>
ffffffff80211be5:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff80211be9:	49 83 fb 06          	cmp    $0x6,%r11
ffffffff80211bed:	0f 85 c4 0b 00 00    	jne    ffffffff802127b7 <_RME_Svc_Handler+0x1077>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80211bf3:	f6 43 10 08          	testb  $0x8,0x10(%rbx)
ffffffff80211bf7:	0f 84 52 30 00 00    	je     ffffffff80214c4f <_RME_Svc_Handler+0x350f>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff80211bfd:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
        if(Thread[Count]->Sched.Local!=Local)
ffffffff80211c01:	48 39 4b 28          	cmp    %rcx,0x28(%rbx)
ffffffff80211c05:	0f 85 87 22 00 00    	jne    ffffffff80213e92 <_RME_Svc_Handler+0x2752>
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff80211c0b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80211c10:	48 39 43 48          	cmp    %rax,0x48(%rbx)
ffffffff80211c14:	0f 82 29 30 00 00    	jb     ffffffff80214c43 <_RME_Svc_Handler+0x3503>
    for(Count=0U;Count<Number;Count++)
ffffffff80211c1a:	49 83 fd 01          	cmp    $0x1,%r13
ffffffff80211c1e:	0f 84 75 2f 00 00    	je     ffffffff80214b99 <_RME_Svc_Handler+0x3459>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80211c24:	f7 c7 00 80 00 00    	test   $0x8000,%edi
ffffffff80211c2a:	0f 84 10 1e 00 00    	je     ffffffff80213a40 <_RME_Svc_Handler+0x2300>
ffffffff80211c30:	4c 89 f0             	mov    %r14,%rax
ffffffff80211c33:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211c37:	4c 39 c0             	cmp    %r8,%rax
ffffffff80211c3a:	0f 83 85 30 00 00    	jae    ffffffff80214cc5 <_RME_Svc_Handler+0x3585>
ffffffff80211c40:	49 bc 00 00 00 00 ff 	movabs $0xffff00000000,%r12
ffffffff80211c47:	ff 00 00 
ffffffff80211c4a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211c4e:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff80211c55:	00 00 00 
ffffffff80211c58:	4e 8d 34 08          	lea    (%rax,%r9,1),%r14
ffffffff80211c5c:	4d 8b 16             	mov    (%r14),%r10
ffffffff80211c5f:	4c 89 d0             	mov    %r10,%rax
ffffffff80211c62:	4c 21 e0             	and    %r12,%rax
ffffffff80211c65:	4c 39 d8             	cmp    %r11,%rax
ffffffff80211c68:	0f 84 33 1f 00 00    	je     ffffffff80213ba1 <_RME_Svc_Handler+0x2461>
ffffffff80211c6e:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80211c72:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80211c76:	0f 85 3b 0b 00 00    	jne    ffffffff802127b7 <_RME_Svc_Handler+0x1077>
ffffffff80211c7c:	48 89 f8             	mov    %rdi,%rax
ffffffff80211c7f:	4d 8b 56 28          	mov    0x28(%r14),%r10
ffffffff80211c83:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211c88:	4c 39 d0             	cmp    %r10,%rax
ffffffff80211c8b:	0f 83 34 30 00 00    	jae    ffffffff80214cc5 <_RME_Svc_Handler+0x3585>
ffffffff80211c91:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211c95:	49 03 46 18          	add    0x18(%r14),%rax
ffffffff80211c99:	4d 89 e2             	mov    %r12,%r10
ffffffff80211c9c:	4c 8b 30             	mov    (%rax),%r14
ffffffff80211c9f:	4d 21 f2             	and    %r14,%r10
ffffffff80211ca2:	4d 39 da             	cmp    %r11,%r10
ffffffff80211ca5:	0f 84 f6 1e 00 00    	je     ffffffff80213ba1 <_RME_Svc_Handler+0x2461>
ffffffff80211cab:	49 c1 ee 30          	shr    $0x30,%r14
ffffffff80211caf:	49 83 fe 06          	cmp    $0x6,%r14
ffffffff80211cb3:	0f 85 fe 0a 00 00    	jne    ffffffff802127b7 <_RME_Svc_Handler+0x1077>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80211cb9:	f6 40 10 08          	testb  $0x8,0x10(%rax)
ffffffff80211cbd:	0f 84 8c 2f 00 00    	je     ffffffff80214c4f <_RME_Svc_Handler+0x350f>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff80211cc3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211cc7:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        if(Thread[Count]->Sched.Local!=Local)
ffffffff80211ccc:	48 39 48 28          	cmp    %rcx,0x28(%rax)
ffffffff80211cd0:	0f 85 bc 21 00 00    	jne    ffffffff80213e92 <_RME_Svc_Handler+0x2752>
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff80211cd6:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff80211cda:	49 89 fc             	mov    %rdi,%r12
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff80211cdd:	48 39 78 48          	cmp    %rdi,0x48(%rax)
ffffffff80211ce1:	0f 82 5c 2f 00 00    	jb     ffffffff80214c43 <_RME_Svc_Handler+0x3503>
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff80211ce7:	49 89 f6             	mov    %rsi,%r14
ffffffff80211cea:	49 c1 ee 20          	shr    $0x20,%r14
    for(Count=0U;Count<Number;Count++)
ffffffff80211cee:	49 83 fd 03          	cmp    $0x3,%r13
ffffffff80211cf2:	75 76                	jne    ffffffff80211d6a <_RME_Svc_Handler+0x62a>
ffffffff80211cf4:	89 f0                	mov    %esi,%eax
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80211cf6:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80211cfc:	0f 85 2e 1e 00 00    	jne    ffffffff80213b30 <_RME_Svc_Handler+0x23f0>
ffffffff80211d02:	4c 39 c0             	cmp    %r8,%rax
ffffffff80211d05:	0f 83 ba 2f 00 00    	jae    ffffffff80214cc5 <_RME_Svc_Handler+0x3585>
ffffffff80211d0b:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80211d12:	ff 00 00 
ffffffff80211d15:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211d19:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80211d20:	00 00 00 
ffffffff80211d23:	4c 01 c8             	add    %r9,%rax
ffffffff80211d26:	48 8b 30             	mov    (%rax),%rsi
ffffffff80211d29:	48 21 f7             	and    %rsi,%rdi
ffffffff80211d2c:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80211d2f:	0f 84 6c 1e 00 00    	je     ffffffff80213ba1 <_RME_Svc_Handler+0x2461>
ffffffff80211d35:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80211d39:	48 83 fe 06          	cmp    $0x6,%rsi
ffffffff80211d3d:	0f 85 74 0a 00 00    	jne    ffffffff802127b7 <_RME_Svc_Handler+0x1077>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80211d43:	f6 40 10 08          	testb  $0x8,0x10(%rax)
ffffffff80211d47:	0f 84 02 2f 00 00    	je     ffffffff80214c4f <_RME_Svc_Handler+0x350f>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff80211d4d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211d51:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
        if(Thread[Count]->Sched.Local!=Local)
ffffffff80211d56:	48 3b 48 28          	cmp    0x28(%rax),%rcx
ffffffff80211d5a:	0f 85 32 21 00 00    	jne    ffffffff80213e92 <_RME_Svc_Handler+0x2752>
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff80211d60:	4c 39 70 48          	cmp    %r14,0x48(%rax)
ffffffff80211d64:	0f 82 d9 2e 00 00    	jb     ffffffff80214c43 <_RME_Svc_Handler+0x3503>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80211d6a:	31 f6                	xor    %esi,%esi
ffffffff80211d6c:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211d6f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff80211d74:	e8 c7 9c 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff80211d79:	48 83 7b 38 00       	cmpq   $0x0,0x38(%rbx)
ffffffff80211d7e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff80211d83:	0f 84 45 21 00 00    	je     ffffffff80213ece <_RME_Svc_Handler+0x278e>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80211d89:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80211d8e:	48 89 43 40          	mov    %rax,0x40(%rbx)
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff80211d92:	48 8b 5c 24 58       	mov    0x58(%rsp),%rbx
ffffffff80211d97:	48 83 7b 38 00       	cmpq   $0x0,0x38(%rbx)
ffffffff80211d9c:	0f 84 90 21 00 00    	je     ffffffff80213f32 <_RME_Svc_Handler+0x27f2>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80211da2:	4c 89 63 40          	mov    %r12,0x40(%rbx)
    for(Count=0U;Count<Number;Count++)
ffffffff80211da6:	49 83 fd 03          	cmp    $0x3,%r13
ffffffff80211daa:	75 14                	jne    ffffffff80211dc0 <_RME_Svc_Handler+0x680>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff80211dac:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
ffffffff80211db1:	48 83 7b 38 00       	cmpq   $0x0,0x38(%rbx)
ffffffff80211db6:	0f 84 14 24 00 00    	je     ffffffff802141d0 <_RME_Svc_Handler+0x2a90>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80211dbc:	4c 89 73 40          	mov    %r14,0x40(%rbx)
    _RME_Kern_High(Reg,Local);
ffffffff80211dc0:	48 89 ce             	mov    %rcx,%rsi
ffffffff80211dc3:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211dc6:	e8 65 f7 ff ff       	call   ffffffff80211530 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211dcb:	e9 20 fa ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xb0>
            Retval=_RME_Thd_Exec_Set(Cpt,
ffffffff80211dd0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80211dd5:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
ffffffff80211dda:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
ffffffff80211ddf:	4c 8b 74 24 30       	mov    0x30(%rsp),%r14
ffffffff80211de4:	49 8b 4c 24 18       	mov    0x18(%r12),%rcx
ffffffff80211de9:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211dee:	f6 c4 80             	test   $0x80,%ah
ffffffff80211df1:	0f 84 e1 06 00 00    	je     ffffffff802124d8 <_RME_Svc_Handler+0xd98>
ffffffff80211df7:	48 89 c2             	mov    %rax,%rdx
ffffffff80211dfa:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211dfe:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80211e01:	0f 83 fb 2d 00 00    	jae    ffffffff80214c02 <_RME_Svc_Handler+0x34c2>
ffffffff80211e07:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211e0e:	00 00 00 
ffffffff80211e11:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80211e15:	48 01 ca             	add    %rcx,%rdx
ffffffff80211e18:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211e1f:	ff 00 00 
ffffffff80211e22:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80211e25:	49 89 f0             	mov    %rsi,%r8
ffffffff80211e28:	49 21 c8             	and    %rcx,%r8
ffffffff80211e2b:	49 39 f8             	cmp    %rdi,%r8
ffffffff80211e2e:	0f 84 d7 06 00 00    	je     ffffffff8021250b <_RME_Svc_Handler+0xdcb>
ffffffff80211e34:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80211e38:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80211e3c:	0f 85 68 20 00 00    	jne    ffffffff80213eaa <_RME_Svc_Handler+0x276a>
ffffffff80211e42:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80211e46:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211e4b:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211e4e:	0f 83 ae 2d 00 00    	jae    ffffffff80214c02 <_RME_Svc_Handler+0x34c2>
ffffffff80211e54:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211e58:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211e5c:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211e5f:	48 21 d1             	and    %rdx,%rcx
ffffffff80211e62:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80211e65:	0f 84 a0 06 00 00    	je     ffffffff8021250b <_RME_Svc_Handler+0xdcb>
ffffffff80211e6b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211e6f:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80211e73:	0f 85 31 20 00 00    	jne    ffffffff80213eaa <_RME_Svc_Handler+0x276a>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff80211e79:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff80211e7d:	0f 84 ea 20 00 00    	je     ffffffff80213f6d <_RME_Svc_Handler+0x282d>
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff80211e83:	4c 8b 60 18          	mov    0x18(%rax),%r12
    Local=RME_CPU_LOCAL();
ffffffff80211e87:	e8 b3 a9 ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
ffffffff80211e8c:	49 89 c7             	mov    %rax,%r15
    if(Thread->Sched.Local!=Local)
ffffffff80211e8f:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
ffffffff80211e94:	0f 85 bb 20 00 00    	jne    ffffffff80213f55 <_RME_Svc_Handler+0x2815>
    if((Entry!=RME_NULL)&&(Stack!=RME_NULL))
ffffffff80211e9a:	4d 85 f6             	test   %r14,%r14
ffffffff80211e9d:	74 2d                	je     ffffffff80211ecc <_RME_Svc_Handler+0x78c>
ffffffff80211e9f:	4d 85 ed             	test   %r13,%r13
ffffffff80211ea2:	74 28                	je     ffffffff80211ecc <_RME_Svc_Handler+0x78c>
        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
ffffffff80211ea4:	4d 8b 84 24 90 00 00 	mov    0x90(%r12),%r8
ffffffff80211eab:	00 
ffffffff80211eac:	48 89 d9             	mov    %rbx,%rcx
ffffffff80211eaf:	4c 89 ea             	mov    %r13,%rdx
ffffffff80211eb2:	4c 89 f6             	mov    %r14,%rsi
ffffffff80211eb5:	48 bf ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdi
ffffffff80211ebc:	ff ff 7f 
ffffffff80211ebf:	49 23 bc 24 88 00 00 	and    0x88(%r12),%rdi
ffffffff80211ec6:	00 
ffffffff80211ec7:	e8 d4 8a 00 00       	call   ffffffff8021a9a0 <__RME_Thd_Reg_Init>
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80211ecc:	31 f6                	xor    %esi,%esi
ffffffff80211ece:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211ed1:	e8 6a 9b 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80211ed6:	49 83 7c 24 38 03    	cmpq   $0x3,0x38(%r12)
ffffffff80211edc:	0f 85 0e f9 ff ff    	jne    ffffffff802117f0 <_RME_Svc_Handler+0xb0>
        if(Thread->Sched.Slice!=0U)
ffffffff80211ee2:	49 83 7c 24 30 00    	cmpq   $0x0,0x30(%r12)
ffffffff80211ee8:	0f 84 71 1e 00 00    	je     ffffffff80213d5f <_RME_Svc_Handler+0x261f>
            Thread->Sched.State=RME_THD_READY;
ffffffff80211eee:	49 c7 44 24 38 00 00 	movq   $0x0,0x38(%r12)
ffffffff80211ef5:	00 00 
            _RME_Run_Ins(Thread);
ffffffff80211ef7:	4c 89 e7             	mov    %r12,%rdi
ffffffff80211efa:	e8 81 cd ff ff       	call   ffffffff8020ec80 <_RME_Run_Ins>
ffffffff80211eff:	90                   	nop
    _RME_Kern_High(Reg,Local);
ffffffff80211f00:	4c 89 fe             	mov    %r15,%rsi
ffffffff80211f03:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211f06:	e8 25 f6 ff ff       	call   ffffffff80211530 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211f0b:	e9 e0 f8 ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xb0>
                                       (rme_cid_t)Param[0]);                /* rme_cid_t Cap_Thd */
ffffffff80211f10:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff80211f15:	49 8b 4c 24 18       	mov    0x18(%r12),%rcx
ffffffff80211f1a:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211f1f:	f6 c4 80             	test   $0x80,%ah
ffffffff80211f22:	0f 85 f0 06 00 00    	jne    ffffffff80212618 <_RME_Svc_Handler+0xed8>
ffffffff80211f28:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211f2b:	0f 83 ad 2c 00 00    	jae    ffffffff80214bde <_RME_Svc_Handler+0x349e>
ffffffff80211f31:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211f38:	ff 00 00 
ffffffff80211f3b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211f3f:	48 8d 1c 08          	lea    (%rax,%rcx,1),%rbx
ffffffff80211f43:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80211f4a:	00 00 00 
ffffffff80211f4d:	48 8b 03             	mov    (%rbx),%rax
ffffffff80211f50:	48 21 c2             	and    %rax,%rdx
ffffffff80211f53:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211f56:	0f 84 2f 07 00 00    	je     ffffffff8021268b <_RME_Svc_Handler+0xf4b>
ffffffff80211f5c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211f60:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80211f64:	0f 85 4c 1f 00 00    	jne    ffffffff80213eb6 <_RME_Svc_Handler+0x2776>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff80211f6a:	f6 43 10 10          	testb  $0x10,0x10(%rbx)
ffffffff80211f6e:	0f 84 d4 24 00 00    	je     ffffffff80214448 <_RME_Svc_Handler+0x2d08>
    Local=RME_CPU_LOCAL();
ffffffff80211f74:	e8 c6 a8 ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
    Thread=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff80211f79:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
    Local=RME_CPU_LOCAL();
ffffffff80211f7d:	49 89 c4             	mov    %rax,%r12
    if(Thread->Sched.Local!=Local)
ffffffff80211f80:	48 3b 43 28          	cmp    0x28(%rbx),%rax
ffffffff80211f84:	0f 85 d7 1f 00 00    	jne    ffffffff80213f61 <_RME_Svc_Handler+0x2821>
    if(Thread->Sched.Sched_Ref!=0U)
ffffffff80211f8a:	48 83 7b 60 00       	cmpq   $0x0,0x60(%rbx)
ffffffff80211f8f:	0f 85 00 2d 00 00    	jne    ffffffff80214c95 <_RME_Svc_Handler+0x3555>
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
ffffffff80211f95:	48 8b 43 68          	mov    0x68(%rbx),%rax
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
ffffffff80211f99:	48 8b 73 10          	mov    0x10(%rbx),%rsi
ffffffff80211f9d:	4c 8d 6b 10          	lea    0x10(%rbx),%r13
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
ffffffff80211fa1:	48 83 68 60 01       	subq   $0x1,0x60(%rax)
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
ffffffff80211fa6:	4c 39 ee             	cmp    %r13,%rsi
ffffffff80211fa9:	74 11                	je     ffffffff80211fbc <_RME_Svc_Handler+0x87c>
        _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80211fab:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff80211faf:	e8 fc ca ff ff       	call   ffffffff8020eab0 <_RME_List_Del>
        _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80211fb4:	4c 89 ef             	mov    %r13,%rdi
ffffffff80211fb7:	e8 d4 ca ff ff       	call   ffffffff8020ea90 <_RME_List_Crt>
    if(Thread->Sched.Sched_Sig!=RME_NULL)
ffffffff80211fbc:	48 8b 43 70          	mov    0x70(%rbx),%rax
ffffffff80211fc0:	48 85 c0             	test   %rax,%rax
ffffffff80211fc3:	74 0d                	je     ffffffff80211fd2 <_RME_Svc_Handler+0x892>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80211fc5:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80211fcc:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80211fd2:	31 f6                	xor    %esi,%esi
ffffffff80211fd4:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211fd7:	e8 64 9a 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_READY)
ffffffff80211fdc:	48 8b 43 38          	mov    0x38(%rbx),%rax
ffffffff80211fe0:	48 85 c0             	test   %rax,%rax
ffffffff80211fe3:	0f 84 c7 1b 00 00    	je     ffffffff80213bb0 <_RME_Svc_Handler+0x2470>
    else if(Thread->Sched.State==RME_THD_BLOCKED)
ffffffff80211fe9:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80211fed:	0f 84 ab 1d 00 00    	je     ffffffff80213d9e <_RME_Svc_Handler+0x265e>
    Thread->Sched.Slice=0U;
ffffffff80211ff3:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff80211ffa:	00 
    if(Local->Thd_Cur==Thread)
ffffffff80211ffb:	49 3b 5c 24 08       	cmp    0x8(%r12),%rbx
ffffffff80212000:	0f 84 ea 1b 00 00    	je     ffffffff80213bf0 <_RME_Svc_Handler+0x24b0>
    RME_WRITE_RELEASE((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80212006:	48 c7 43 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rbx)
ffffffff8021200d:	ff 
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021200e:	e9 dd f7 ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xb0>
ffffffff80212013:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                                RME_PARAM_D1(Param[0]),                     /* rme_ptr_t Sub_ID */
ffffffff80212018:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8021201d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80212022:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
ffffffff80212027:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
ffffffff8021202c:	48 89 f1             	mov    %rsi,%rcx
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff8021202f:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
            Retval=_RME_Kfn_Act(Cpt,
ffffffff80212034:	89 f6                	mov    %esi,%esi
ffffffff80212036:	48 c1 e9 20          	shr    $0x20,%rcx
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff8021203a:	f6 c4 80             	test   $0x80,%ah
ffffffff8021203d:	0f 85 5d 06 00 00    	jne    ffffffff802126a0 <_RME_Svc_Handler+0xf60>
ffffffff80212043:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212046:	0f 83 aa 2b 00 00    	jae    ffffffff80214bf6 <_RME_Svc_Handler+0x34b6>
ffffffff8021204c:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80212053:	ff 00 00 
ffffffff80212056:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021205a:	49 03 44 24 18       	add    0x18(%r12),%rax
ffffffff8021205f:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80212066:	00 00 00 
ffffffff80212069:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021206c:	48 21 d7             	and    %rdx,%rdi
ffffffff8021206f:	4c 39 d7             	cmp    %r10,%rdi
ffffffff80212072:	0f 84 9a 06 00 00    	je     ffffffff80212712 <_RME_Svc_Handler+0xfd2>
ffffffff80212078:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021207c:	48 83 fa 01          	cmp    $0x1,%rdx
ffffffff80212080:	0f 85 94 1e 00 00    	jne    ffffffff80213f1a <_RME_Svc_Handler+0x27da>
                   struct RME_Cap_Kfn*,Kfn_Op,Type_Stat);    

    /* Check if the range of calling is allowed - kernel function specific */
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff80212086:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021208a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021208d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80212091:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80212094:	0f 82 74 1e 00 00    	jb     ffffffff80213f0e <_RME_Svc_Handler+0x27ce>
       (Func_ID<RME_KFN_FLAG_LOW(Kfn_Op->Head.Flag)))
ffffffff8021209a:	89 c0                	mov    %eax,%eax
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021209c:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021209f:	0f 82 69 1e 00 00    	jb     ffffffff80213f0e <_RME_Svc_Handler+0x27ce>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Return whatever the function returns */
    return __RME_Kfn_Handler(Cpt,Reg,Func_ID,Sub_ID,Param1,Param2);
ffffffff802120a5:	48 89 f2             	mov    %rsi,%rdx
ffffffff802120a8:	4c 89 e7             	mov    %r12,%rdi
ffffffff802120ab:	48 89 ee             	mov    %rbp,%rsi
ffffffff802120ae:	e8 0d 76 00 00       	call   ffffffff802196c0 <__RME_Kfn_Handler>
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff802120b3:	48 85 c0             	test   %rax,%rax
ffffffff802120b6:	0f 89 34 f7 ff ff    	jns    ffffffff802117f0 <_RME_Svc_Handler+0xb0>
ffffffff802120bc:	48 89 ef             	mov    %rbp,%rdi
ffffffff802120bf:	48 89 c6             	mov    %rax,%rsi
ffffffff802120c2:	e8 79 99 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
}
ffffffff802120c7:	48 83 c4 78          	add    $0x78,%rsp
ffffffff802120cb:	5b                   	pop    %rbx
ffffffff802120cc:	5d                   	pop    %rbp
ffffffff802120cd:	41 5c                	pop    %r12
ffffffff802120cf:	41 5d                	pop    %r13
ffffffff802120d1:	41 5e                	pop    %r14
ffffffff802120d3:	41 5f                	pop    %r15
ffffffff802120d5:	c3                   	ret
ffffffff802120d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff802120dd:	00 00 00 
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Sig */
ffffffff802120e0:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff802120e5:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
ffffffff802120ea:	49 8b 54 24 18       	mov    0x18(%r12),%rdx
ffffffff802120ef:	49 8b 4c 24 28       	mov    0x28(%r12),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802120f4:	f6 c7 80             	test   $0x80,%bh
ffffffff802120f7:	0f 84 9b 03 00 00    	je     ffffffff80212498 <_RME_Svc_Handler+0xd58>
ffffffff802120fd:	48 89 d8             	mov    %rbx,%rax
ffffffff80212100:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212104:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212107:	0f 83 b9 2a 00 00    	jae    ffffffff80214bc6 <_RME_Svc_Handler+0x3486>
ffffffff8021210d:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212114:	00 00 00 
ffffffff80212117:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021211b:	48 01 d0             	add    %rdx,%rax
ffffffff8021211e:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80212125:	ff 00 00 
ffffffff80212128:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021212b:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021212e:	48 21 d7             	and    %rdx,%rdi
ffffffff80212131:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80212134:	0f 84 91 03 00 00    	je     ffffffff802124cb <_RME_Svc_Handler+0xd8b>
ffffffff8021213a:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021213e:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212142:	0f 85 7a 1d 00 00    	jne    ffffffff80213ec2 <_RME_Svc_Handler+0x2782>
ffffffff80212148:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8021214c:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff80212152:	48 39 cb             	cmp    %rcx,%rbx
ffffffff80212155:	0f 83 6b 2a 00 00    	jae    ffffffff80214bc6 <_RME_Svc_Handler+0x3486>
ffffffff8021215b:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8021215f:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff80212163:	48 8b 03             	mov    (%rbx),%rax
ffffffff80212166:	48 21 c2             	and    %rax,%rdx
ffffffff80212169:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021216c:	0f 84 59 03 00 00    	je     ffffffff802124cb <_RME_Svc_Handler+0xd8b>
ffffffff80212172:	48 89 c2             	mov    %rax,%rdx
ffffffff80212175:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212179:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8021217d:	0f 85 3f 1d 00 00    	jne    ffffffff80213ec2 <_RME_Svc_Handler+0x2782>
    switch(Option)
ffffffff80212183:	49 83 fd 02          	cmp    $0x2,%r13
ffffffff80212187:	0f 84 93 1b 00 00    	je     ffffffff80213d20 <_RME_Svc_Handler+0x25e0>
ffffffff8021218d:	0f 87 35 1a 00 00    	ja     ffffffff80213bc8 <_RME_Svc_Handler+0x2488>
ffffffff80212193:	4d 85 ed             	test   %r13,%r13
ffffffff80212196:	0f 84 94 1b 00 00    	je     ffffffff80213d30 <_RME_Svc_Handler+0x25f0>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BM);
ffffffff8021219c:	f6 43 10 04          	testb  $0x4,0x10(%rbx)
ffffffff802121a0:	0f 84 36 1a 00 00    	je     ffffffff80213bdc <_RME_Svc_Handler+0x249c>
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802121a6:	85 c0                	test   %eax,%eax
ffffffff802121a8:	74 04                	je     ffffffff802121ae <_RME_Svc_Handler+0xa6e>
ffffffff802121aa:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    if(Sig_Root->Thd!=RME_NULL)
ffffffff802121ae:	48 83 7b 30 00       	cmpq   $0x0,0x30(%rbx)
ffffffff802121b3:	0f 85 d9 1b 00 00    	jne    ffffffff80213d92 <_RME_Svc_Handler+0x2652>
    Local=RME_CPU_LOCAL();
ffffffff802121b9:	e8 81 a6 ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
    Thd_Cur=Local->Thd_Cur;
ffffffff802121be:	48 8b 78 08          	mov    0x8(%rax),%rdi
    Local=RME_CPU_LOCAL();
ffffffff802121c2:	49 89 c4             	mov    %rax,%r12
    if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff802121c5:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff802121cc:	ff ff 7f 
ffffffff802121cf:	48 39 47 30          	cmp    %rax,0x30(%rdi)
ffffffff802121d3:	0f 84 2c 2b 00 00    	je     ffffffff80214d05 <_RME_Svc_Handler+0x35c5>
    Old_Value=Sig_Root->Sig_Num;
ffffffff802121d9:	48 8b 43 28          	mov    0x28(%rbx),%rax
    if(Old_Value>0U)
ffffffff802121dd:	48 85 c0             	test   %rax,%rax
ffffffff802121e0:	0f 84 0a 19 00 00    	je     ffffffff80213af0 <_RME_Svc_Handler+0x23b0>
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
ffffffff802121e6:	49 f7 c5 fd ff ff ff 	test   $0xfffffffffffffffd,%r13
ffffffff802121ed:	0f 85 4d 1b 00 00    	jne    ffffffff80213d40 <_RME_Svc_Handler+0x2600>
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff802121f3:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802121f7:	f0 48 0f b1 53 28    	lock cmpxchg %rdx,0x28(%rbx)
ffffffff802121fd:	0f 94 c2             	sete   %dl
ffffffff80212200:	84 d2                	test   %dl,%dl
ffffffff80212202:	0f 84 4b 1b 00 00    	je     ffffffff80213d53 <_RME_Svc_Handler+0x2613>
            __RME_Svc_Retval_Set(Reg,1);
ffffffff80212208:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021220d:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212210:	e8 2b 98 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80212215:	e9 d6 f5 ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xb0>
ffffffff8021221a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff80212220:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
ffffffff80212225:	49 8b 54 24 18       	mov    0x18(%r12),%rdx
ffffffff8021222a:	49 8b 4c 24 28       	mov    0x28(%r12),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8021222f:	f6 c7 80             	test   $0x80,%bh
ffffffff80212232:	0f 85 60 03 00 00    	jne    ffffffff80212598 <_RME_Svc_Handler+0xe58>
ffffffff80212238:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8021223b:	0f 83 91 29 00 00    	jae    ffffffff80214bd2 <_RME_Svc_Handler+0x3492>
ffffffff80212241:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80212248:	00 00 00 
ffffffff8021224b:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8021224f:	48 01 d3             	add    %rdx,%rbx
ffffffff80212252:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80212259:	ff 00 00 
ffffffff8021225c:	48 8b 03             	mov    (%rbx),%rax
ffffffff8021225f:	48 21 c2             	and    %rax,%rdx
ffffffff80212262:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80212265:	0f 84 9e 03 00 00    	je     ffffffff80212609 <_RME_Svc_Handler+0xec9>
ffffffff8021226b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021226f:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80212273:	0f 85 89 1c 00 00    	jne    ffffffff80213f02 <_RME_Svc_Handler+0x27c2>
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff80212279:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8021227d:	0f 84 5d 26 00 00    	je     ffffffff802148e0 <_RME_Svc_Handler+0x31a0>
    Local=RME_CPU_LOCAL();
ffffffff80212283:	e8 b7 a5 ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff80212288:	44 8b 3b             	mov    (%rbx),%r15d
    Local=RME_CPU_LOCAL();
ffffffff8021228b:	49 89 c4             	mov    %rax,%r12
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff8021228e:	45 85 ff             	test   %r15d,%r15d
ffffffff80212291:	74 04                	je     ffffffff80212297 <_RME_Svc_Handler+0xb57>
ffffffff80212293:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    Thd_Rcv=Sig_Root->Thd;
ffffffff80212297:	4c 8b 6b 30          	mov    0x30(%rbx),%r13
    if(Thd_Rcv!=RME_NULL)
ffffffff8021229b:	4d 85 ed             	test   %r13,%r13
ffffffff8021229e:	74 0a                	je     ffffffff802122aa <_RME_Svc_Handler+0xb6a>
        if(Thd_Rcv->Sched.Local==Local)
ffffffff802122a0:	4d 3b 65 28          	cmp    0x28(%r13),%r12
ffffffff802122a4:	0f 84 28 1b 00 00    	je     ffffffff80213dd2 <_RME_Svc_Handler+0x2692>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802122aa:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff802122af:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff802122b5:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff802122bc:	ff ff 7f 
ffffffff802122bf:	48 39 c2             	cmp    %rax,%rdx
ffffffff802122c2:	0f 82 b8 28 00 00    	jb     ffffffff80214b80 <_RME_Svc_Handler+0x3440>
        __RME_Svc_Retval_Set(Reg,0);
ffffffff802122c8:	31 f6                	xor    %esi,%esi
ffffffff802122ca:	48 89 ef             	mov    %rbp,%rdi
ffffffff802122cd:	e8 6e 97 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802122d2:	e9 19 f5 ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xb0>
ffffffff802122d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff802122de:	00 00 
                            (rme_cid_t)Param[0],                            /* rme_cid_t Cap_Inv */
ffffffff802122e0:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
        Retval=_RME_Inv_Act(Cpt,
ffffffff802122e5:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx
ffffffff802122ea:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff802122ef:	49 8b 4c 24 28       	mov    0x28(%r12),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff802122f4:	f6 c4 80             	test   $0x80,%ah
ffffffff802122f7:	0f 84 43 01 00 00    	je     ffffffff80212440 <_RME_Svc_Handler+0xd00>
ffffffff802122fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80212300:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80212304:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80212307:	0f 83 3b 27 00 00    	jae    ffffffff80214a48 <_RME_Svc_Handler+0x3308>
ffffffff8021230d:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212314:	00 00 00 
ffffffff80212317:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021231b:	48 01 f2             	add    %rsi,%rdx
ffffffff8021231e:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212325:	ff 00 00 
ffffffff80212328:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8021232b:	49 89 c8             	mov    %rcx,%r8
ffffffff8021232e:	49 21 f0             	and    %rsi,%r8
ffffffff80212331:	49 39 f8             	cmp    %rdi,%r8
ffffffff80212334:	0f 84 39 01 00 00    	je     ffffffff80212473 <_RME_Svc_Handler+0xd33>
ffffffff8021233a:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021233e:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212342:	0f 85 56 1b 00 00    	jne    ffffffff80213e9e <_RME_Svc_Handler+0x275e>
ffffffff80212348:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8021234c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212351:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212354:	0f 83 ee 26 00 00    	jae    ffffffff80214a48 <_RME_Svc_Handler+0x3308>
ffffffff8021235a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021235e:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80212362:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212365:	48 21 d6             	and    %rdx,%rsi
ffffffff80212368:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8021236b:	0f 84 02 01 00 00    	je     ffffffff80212473 <_RME_Svc_Handler+0xd33>
ffffffff80212371:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212375:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff80212379:	0f 85 1f 1b 00 00    	jne    ffffffff80213e9e <_RME_Svc_Handler+0x275e>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8021237f:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212383:	0f 84 d2 28 00 00    	je     ffffffff80214c5b <_RME_Svc_Handler+0x351b>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff80212389:	4c 8b 68 18          	mov    0x18(%rax),%r13
    if(RME_UNLIKELY(Thd_Act!=0U))
ffffffff8021238d:	49 83 7d 18 00       	cmpq   $0x0,0x18(%r13)
ffffffff80212392:	0f 85 b1 1a 00 00    	jne    ffffffff80213e49 <_RME_Svc_Handler+0x2709>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff80212398:	e8 a2 a4 ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
ffffffff8021239d:	4c 8b 60 08          	mov    0x8(%rax),%r12
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802123a1:	31 c0                	xor    %eax,%eax
ffffffff802123a3:	f0 4d 0f b1 65 18    	lock cmpxchg %r12,0x18(%r13)
ffffffff802123a9:	0f 94 c0             	sete   %al
    if(RME_UNLIKELY(RME_COMP_SWAP((volatile rme_ptr_t*)&(Invocation->Thd_Act),
ffffffff802123ac:	84 c0                	test   %al,%al
ffffffff802123ae:	0f 84 95 1a 00 00    	je     ffffffff80213e49 <_RME_Svc_Handler+0x2709>
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
ffffffff802123b4:	49 8d 7d 38          	lea    0x38(%r13),%rdi
ffffffff802123b8:	48 89 ee             	mov    %rbp,%rsi
ffffffff802123bb:	e8 e0 86 00 00       	call   ffffffff8021aaa0 <__RME_Inv_Reg_Save>
    _RME_List_Ins(&(Invocation->Head),
ffffffff802123c0:	49 8b 94 24 98 00 00 	mov    0x98(%r12),%rdx
ffffffff802123c7:	00 
ffffffff802123c8:	49 8d b4 24 98 00 00 	lea    0x98(%r12),%rsi
ffffffff802123cf:	00 
ffffffff802123d0:	4c 89 ef             	mov    %r13,%rdi
ffffffff802123d3:	e8 88 c8 ff ff       	call   ffffffff8020ec60 <_RME_List_Ins>
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff802123d8:	49 8b 55 28          	mov    0x28(%r13),%rdx
ffffffff802123dc:	49 8b 75 20          	mov    0x20(%r13),%rsi
ffffffff802123e0:	49 89 e8             	mov    %rbp,%r8
    Thd_Cur->Ctx.Invstk_Depth++;
ffffffff802123e3:	49 83 84 24 a8 00 00 	addq   $0x1,0xa8(%r12)
ffffffff802123ea:	00 01 
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff802123ec:	48 89 d9             	mov    %rbx,%rcx
ffffffff802123ef:	48 bf ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdi
ffffffff802123f6:	ff ff 7f 
ffffffff802123f9:	49 23 bc 24 88 00 00 	and    0x88(%r12),%rdi
ffffffff80212400:	00 
ffffffff80212401:	e8 9a 85 00 00       	call   ffffffff8021a9a0 <__RME_Thd_Reg_Init>
    __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff80212406:	49 8b 45 10          	mov    0x10(%r13),%rax
ffffffff8021240a:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8021240e:	e8 1d 89 00 00       	call   ffffffff8021ad30 <__RME_Pgt_Set>
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff80212413:	e9 d8 f3 ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xb0>
    switch(Svc_Num)
ffffffff80212418:	48 83 eb 0a          	sub    $0xa,%rbx
ffffffff8021241c:	48 83 fb 17          	cmp    $0x17,%rbx
ffffffff80212420:	0f 87 b1 13 00 00    	ja     ffffffff802137d7 <_RME_Svc_Handler+0x2097>
ffffffff80212426:	48 8d 15 7b ad 00 00 	lea    0xad7b(%rip),%rdx        # ffffffff8021d1a8 <UVM_Init+0x1708>
ffffffff8021242d:	48 63 04 9a          	movslq (%rdx,%rbx,4),%rax
ffffffff80212431:	48 01 d0             	add    %rdx,%rax
ffffffff80212434:	3e ff e0             	notrack jmp *%rax
ffffffff80212437:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021243e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80212440:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212443:	0f 83 ff 25 00 00    	jae    ffffffff80214a48 <_RME_Svc_Handler+0x3308>
ffffffff80212449:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212450:	ff 00 00 
ffffffff80212453:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212457:	48 01 f0             	add    %rsi,%rax
ffffffff8021245a:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212461:	00 00 00 
ffffffff80212464:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212467:	48 21 d1             	and    %rdx,%rcx
ffffffff8021246a:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021246d:	0f 85 fe fe ff ff    	jne    ffffffff80212371 <_RME_Svc_Handler+0xc31>
ffffffff80212473:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
    __RME_Svc_Retval_Set(Reg,Retval);
ffffffff8021247a:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021247d:	e8 be 95 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
}
ffffffff80212482:	48 83 c4 78          	add    $0x78,%rsp
ffffffff80212486:	5b                   	pop    %rbx
ffffffff80212487:	5d                   	pop    %rbp
ffffffff80212488:	41 5c                	pop    %r12
ffffffff8021248a:	41 5d                	pop    %r13
ffffffff8021248c:	41 5e                	pop    %r14
ffffffff8021248e:	41 5f                	pop    %r15
ffffffff80212490:	c3                   	ret
ffffffff80212491:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80212498:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8021249b:	0f 83 25 27 00 00    	jae    ffffffff80214bc6 <_RME_Svc_Handler+0x3486>
ffffffff802124a1:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff802124a8:	00 00 00 
ffffffff802124ab:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff802124af:	48 01 d3             	add    %rdx,%rbx
ffffffff802124b2:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802124b9:	ff 00 00 
ffffffff802124bc:	48 8b 03             	mov    (%rbx),%rax
ffffffff802124bf:	48 21 c2             	and    %rax,%rdx
ffffffff802124c2:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802124c5:	0f 85 a7 fc ff ff    	jne    ffffffff80212172 <_RME_Svc_Handler+0xa32>
ffffffff802124cb:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802124d2:	eb a6                	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802124d4:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802124d8:	48 39 f0             	cmp    %rsi,%rax
ffffffff802124db:	0f 83 21 27 00 00    	jae    ffffffff80214c02 <_RME_Svc_Handler+0x34c2>
ffffffff802124e1:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802124e8:	00 00 00 
ffffffff802124eb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802124ef:	48 01 c8             	add    %rcx,%rax
ffffffff802124f2:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802124f9:	ff 00 00 
ffffffff802124fc:	48 8b 10             	mov    (%rax),%rdx
ffffffff802124ff:	48 21 d1             	and    %rdx,%rcx
ffffffff80212502:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212505:	0f 85 60 f9 ff ff    	jne    ffffffff80211e6b <_RME_Svc_Handler+0x72b>
ffffffff8021250b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80212512:	e9 63 ff ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80212517:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021251e:	00 00 
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80212520:	48 85 db             	test   %rbx,%rbx
ffffffff80212523:	74 14                	je     ffffffff80212539 <_RME_Svc_Handler+0xdf9>
ffffffff80212525:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff8021252c:	ff ff 7f 
ffffffff8021252f:	49 3b 47 30          	cmp    0x30(%r15),%rax
ffffffff80212533:	0f 83 e3 18 00 00    	jae    ffffffff80213e1c <_RME_Svc_Handler+0x26dc>
            _RME_Run_Del(Thd_Cur);
ffffffff80212539:	4c 89 ff             	mov    %r15,%rdi
ffffffff8021253c:	e8 bf c6 ff ff       	call   ffffffff8020ec00 <_RME_Run_Del>
            _RME_Run_Ins(Thd_Cur);
ffffffff80212541:	4c 89 ff             	mov    %r15,%rdi
ffffffff80212544:	e8 37 c7 ff ff       	call   ffffffff8020ec80 <_RME_Run_Ins>
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80212549:	49 8b 46 20          	mov    0x20(%r14),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff8021254d:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80212551:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80212555:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80212558:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff8021255c:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80212561:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212565:	4d 8b 64 06 08       	mov    0x8(%r14,%rax,1),%r12
    __RME_Svc_Retval_Set(Reg,0);
ffffffff8021256a:	31 f6                	xor    %esi,%esi
ffffffff8021256c:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021256f:	e8 cc 94 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
    if(Thd_Cur==Thd_New)
ffffffff80212574:	4d 39 e7             	cmp    %r12,%r15
ffffffff80212577:	0f 84 73 f2 ff ff    	je     ffffffff802117f0 <_RME_Svc_Handler+0xb0>
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff8021257d:	4c 89 e2             	mov    %r12,%rdx
ffffffff80212580:	4c 89 fe             	mov    %r15,%rsi
ffffffff80212583:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212586:	e8 d5 e6 ff ff       	call   ffffffff80210c60 <_RME_Run_Swt.isra.0>
    Local->Thd_Cur=Thd_New;
ffffffff8021258b:	4d 89 66 08          	mov    %r12,0x8(%r14)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021258f:	e9 5c f2 ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xb0>
ffffffff80212594:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80212598:	48 89 d8             	mov    %rbx,%rax
ffffffff8021259b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021259f:	48 39 c8             	cmp    %rcx,%rax
ffffffff802125a2:	0f 83 2a 26 00 00    	jae    ffffffff80214bd2 <_RME_Svc_Handler+0x3492>
ffffffff802125a8:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802125af:	00 00 00 
ffffffff802125b2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802125b6:	48 01 d0             	add    %rdx,%rax
ffffffff802125b9:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802125c0:	ff 00 00 
ffffffff802125c3:	48 8b 08             	mov    (%rax),%rcx
ffffffff802125c6:	48 89 cf             	mov    %rcx,%rdi
ffffffff802125c9:	48 21 d7             	and    %rdx,%rdi
ffffffff802125cc:	48 39 f7             	cmp    %rsi,%rdi
ffffffff802125cf:	74 38                	je     ffffffff80212609 <_RME_Svc_Handler+0xec9>
ffffffff802125d1:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802125d5:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802125d9:	0f 85 23 19 00 00    	jne    ffffffff80213f02 <_RME_Svc_Handler+0x27c2>
ffffffff802125df:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff802125e3:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff802125e9:	48 39 cb             	cmp    %rcx,%rbx
ffffffff802125ec:	0f 83 e0 25 00 00    	jae    ffffffff80214bd2 <_RME_Svc_Handler+0x3492>
ffffffff802125f2:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff802125f6:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff802125fa:	48 8b 03             	mov    (%rbx),%rax
ffffffff802125fd:	48 21 c2             	and    %rax,%rdx
ffffffff80212600:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80212603:	0f 85 62 fc ff ff    	jne    ffffffff8021226b <_RME_Svc_Handler+0xb2b>
ffffffff80212609:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80212610:	e9 65 fe ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80212615:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80212618:	48 89 c2             	mov    %rax,%rdx
ffffffff8021261b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021261f:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80212622:	0f 83 b6 25 00 00    	jae    ffffffff80214bde <_RME_Svc_Handler+0x349e>
ffffffff80212628:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021262f:	00 00 00 
ffffffff80212632:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212636:	48 01 ca             	add    %rcx,%rdx
ffffffff80212639:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212640:	ff 00 00 
ffffffff80212643:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80212646:	49 89 f0             	mov    %rsi,%r8
ffffffff80212649:	49 21 c8             	and    %rcx,%r8
ffffffff8021264c:	49 39 f8             	cmp    %rdi,%r8
ffffffff8021264f:	74 3a                	je     ffffffff8021268b <_RME_Svc_Handler+0xf4b>
ffffffff80212651:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80212655:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80212659:	0f 85 57 18 00 00    	jne    ffffffff80213eb6 <_RME_Svc_Handler+0x2776>
ffffffff8021265f:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80212663:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212668:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021266b:	0f 83 6d 25 00 00    	jae    ffffffff80214bde <_RME_Svc_Handler+0x349e>
ffffffff80212671:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212675:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80212679:	48 89 c3             	mov    %rax,%rbx
ffffffff8021267c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021267f:	48 21 c1             	and    %rax,%rcx
ffffffff80212682:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80212685:	0f 85 d1 f8 ff ff    	jne    ffffffff80211f5c <_RME_Svc_Handler+0x81c>
ffffffff8021268b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80212692:	e9 e3 fd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80212697:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021269e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff802126a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802126a3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802126a7:	48 39 fa             	cmp    %rdi,%rdx
ffffffff802126aa:	0f 83 46 25 00 00    	jae    ffffffff80214bf6 <_RME_Svc_Handler+0x34b6>
ffffffff802126b0:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff802126b7:	ff 00 00 
ffffffff802126ba:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802126be:	49 03 54 24 18       	add    0x18(%r12),%rdx
ffffffff802126c3:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff802126ca:	00 00 00 
ffffffff802126cd:	4c 8b 1a             	mov    (%rdx),%r11
ffffffff802126d0:	4c 89 db             	mov    %r11,%rbx
ffffffff802126d3:	48 21 fb             	and    %rdi,%rbx
ffffffff802126d6:	4c 39 d3             	cmp    %r10,%rbx
ffffffff802126d9:	74 37                	je     ffffffff80212712 <_RME_Svc_Handler+0xfd2>
ffffffff802126db:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff802126df:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff802126e3:	0f 85 31 18 00 00    	jne    ffffffff80213f1a <_RME_Svc_Handler+0x27da>
ffffffff802126e9:	4c 8b 5a 28          	mov    0x28(%rdx),%r11
ffffffff802126ed:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802126f2:	4c 39 d8             	cmp    %r11,%rax
ffffffff802126f5:	0f 83 fb 24 00 00    	jae    ffffffff80214bf6 <_RME_Svc_Handler+0x34b6>
ffffffff802126fb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802126ff:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80212703:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212706:	48 21 d7             	and    %rdx,%rdi
ffffffff80212709:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8021270c:	0f 85 66 f9 ff ff    	jne    ffffffff80212078 <_RME_Svc_Handler+0x938>
ffffffff80212712:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212719:	e9 9e f9 ff ff       	jmp    ffffffff802120bc <_RME_Svc_Handler+0x97c>
ffffffff8021271e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80212720:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212723:	0f 83 cd 17 00 00    	jae    ffffffff80213ef6 <_RME_Svc_Handler+0x27b6>
ffffffff80212729:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff8021272e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212732:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80212739:	ff 00 00 
ffffffff8021273c:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212743:	00 00 00 
ffffffff80212746:	4c 8d 24 30          	lea    (%rax,%rsi,1),%r12
ffffffff8021274a:	49 8b 04 24          	mov    (%r12),%rax
ffffffff8021274e:	48 21 c2             	and    %rax,%rdx
ffffffff80212751:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80212754:	0f 85 88 f2 ff ff    	jne    ffffffff802119e2 <_RME_Svc_Handler+0x2a2>
ffffffff8021275a:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80212761:	e9 14 fd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80212766:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021276d:	00 00 00 
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80212770:	4d 39 c7             	cmp    %r8,%r15
ffffffff80212773:	0f 83 4c 25 00 00    	jae    ffffffff80214cc5 <_RME_Svc_Handler+0x3585>
ffffffff80212779:	4d 8b 4c 24 18       	mov    0x18(%r12),%r9
ffffffff8021277e:	49 c1 e7 06          	shl    $0x6,%r15
ffffffff80212782:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff80212789:	ff 00 00 
ffffffff8021278c:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff80212793:	00 00 00 
ffffffff80212796:	4b 8d 1c 0f          	lea    (%r15,%r9,1),%rbx
ffffffff8021279a:	48 8b 03             	mov    (%rbx),%rax
ffffffff8021279d:	49 21 c2             	and    %rax,%r10
ffffffff802127a0:	4d 39 da             	cmp    %r11,%r10
ffffffff802127a3:	0f 84 f8 13 00 00    	je     ffffffff80213ba1 <_RME_Svc_Handler+0x2461>
ffffffff802127a9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802127ad:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802127b1:	0f 84 3c f4 ff ff    	je     ffffffff80211bf3 <_RME_Svc_Handler+0x4b3>
ffffffff802127b7:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802127be:	e9 b7 fc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Retval=_RME_Inv_Del(Cpt,
ffffffff802127c3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Inv */
ffffffff802127c8:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
ffffffff802127cd:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff802127d2:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802127d7:	f6 c4 80             	test   $0x80,%ah
ffffffff802127da:	0f 85 40 1b 00 00    	jne    ffffffff80214320 <_RME_Svc_Handler+0x2be0>
ffffffff802127e0:	48 39 f8             	cmp    %rdi,%rax
ffffffff802127e3:	0f 83 42 2f 00 00    	jae    ffffffff8021572b <_RME_Svc_Handler+0x3feb>
ffffffff802127e9:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802127f0:	00 00 00 
ffffffff802127f3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802127f7:	48 01 f0             	add    %rsi,%rax
ffffffff802127fa:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212801:	ff 00 00 
ffffffff80212804:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212807:	48 21 ce             	and    %rcx,%rsi
ffffffff8021280a:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8021280d:	0f 84 f6 2a 00 00    	je     ffffffff80215309 <_RME_Svc_Handler+0x3bc9>
ffffffff80212813:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212817:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021281b:	0f 85 dc 2a 00 00    	jne    ffffffff802152fd <_RME_Svc_Handler+0x3bbd>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212821:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212825:	0f 84 c6 2a 00 00    	je     ffffffff802152f1 <_RME_Svc_Handler+0x3bb1>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff8021282b:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021282f:	0f 83 b0 2a 00 00    	jae    ffffffff802152e5 <_RME_Svc_Handler+0x3ba5>
ffffffff80212835:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80212839:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8021283d:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212844:	00 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff80212847:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8021284a:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80212851:	ff 00 00 
ffffffff80212854:	48 8b 01             	mov    (%rcx),%rax
ffffffff80212857:	48 21 c2             	and    %rax,%rdx
ffffffff8021285a:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021285d:	0f 85 16 2a 00 00    	jne    ffffffff80215279 <_RME_Svc_Handler+0x3b39>
ffffffff80212863:	48 89 c2             	mov    %rax,%rdx
ffffffff80212866:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021286a:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff8021286e:	0f 85 f9 29 00 00    	jne    ffffffff8021526d <_RME_Svc_Handler+0x3b2d>
ffffffff80212874:	48 8b 71 20          	mov    0x20(%rcx),%rsi
ffffffff80212878:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021287d:	48 29 f2             	sub    %rsi,%rdx
ffffffff80212880:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80212884:	0f 86 d7 29 00 00    	jbe    ffffffff80215261 <_RME_Svc_Handler+0x3b21>
ffffffff8021288a:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff8021288e:	48 85 d2             	test   %rdx,%rdx
ffffffff80212891:	0f 85 a8 29 00 00    	jne    ffffffff8021523f <_RME_Svc_Handler+0x3aff>
    Invocation=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
ffffffff80212897:	48 8b 79 18          	mov    0x18(%rcx),%rdi
    if(Invocation->Thd_Act!=RME_NULL)
ffffffff8021289b:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
ffffffff802128a0:	0f 85 b0 24 00 00    	jne    ffffffff80214d56 <_RME_Svc_Handler+0x3616>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802128a6:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff802128ab:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Inv_Del,Type_Stat);
ffffffff802128ae:	84 d2                	test   %dl,%dl
ffffffff802128b0:	0f 84 21 0f 00 00    	je     ffffffff802137d7 <_RME_Svc_Handler+0x2097>
    RME_FETCH_ADD(&(Invocation->Prc->Head.Root_Ref), -1);
ffffffff802128b6:	48 8b 47 10          	mov    0x10(%rdi),%rax
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802128ba:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802128c1:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
ffffffff802128c7:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff802128cc:	e8 ff df ff ff       	call   ffffffff802108d0 <_RME_Kot_Erase>
    return 0;
ffffffff802128d1:	31 f6                	xor    %esi,%esi
ffffffff802128d3:	e9 a2 fb ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff802128d8:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
            Retval=_RME_Inv_Crt(Cpt,
ffffffff802128dd:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff802128e1:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
ffffffff802128e6:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
ffffffff802128eb:	ff 74 24 48          	push   0x48(%rsp)
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff802128ef:	4c 89 c1             	mov    %r8,%rcx
            Retval=_RME_Inv_Crt(Cpt,
ffffffff802128f2:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
ffffffff802128f7:	45 89 c0             	mov    %r8d,%r8d
ffffffff802128fa:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff802128ff:	48 c1 e9 20          	shr    $0x20,%rcx
            Retval=_RME_Inv_Crt(Cpt,
ffffffff80212903:	e8 18 dc ff ff       	call   ffffffff80210520 <_RME_Inv_Crt.isra.0>
ffffffff80212908:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff8021290b:	58                   	pop    %rax
ffffffff8021290c:	5a                   	pop    %rdx
ffffffff8021290d:	e9 68 fb ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Retval=_RME_Sig_Del(Cpt,
ffffffff80212912:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff80212917:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
ffffffff8021291c:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff80212921:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212926:	f6 c4 80             	test   $0x80,%ah
ffffffff80212929:	0f 85 91 1e 00 00    	jne    ffffffff802147c0 <_RME_Svc_Handler+0x3080>
ffffffff8021292f:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212932:	0f 83 3f 27 00 00    	jae    ffffffff80215077 <_RME_Svc_Handler+0x3937>
ffffffff80212938:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021293f:	00 00 00 
ffffffff80212942:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212946:	48 01 f0             	add    %rsi,%rax
ffffffff80212949:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212950:	ff 00 00 
ffffffff80212953:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212956:	48 21 ce             	and    %rcx,%rsi
ffffffff80212959:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8021295c:	0f 84 09 27 00 00    	je     ffffffff8021506b <_RME_Svc_Handler+0x392b>
ffffffff80212962:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212966:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021296a:	0f 85 ef 26 00 00    	jne    ffffffff8021505f <_RME_Svc_Handler+0x391f>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212970:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212974:	0f 84 19 26 00 00    	je     ffffffff80214f93 <_RME_Svc_Handler+0x3853>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff8021297a:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021297e:	0f 83 03 26 00 00    	jae    ffffffff80214f87 <_RME_Svc_Handler+0x3847>
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80212984:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8021298b:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff8021298e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212992:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80212996:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021299d:	00 00 00 
ffffffff802129a0:	48 8b 02             	mov    (%rdx),%rax
ffffffff802129a3:	48 21 c1             	and    %rax,%rcx
ffffffff802129a6:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802129a9:	0f 85 cc 25 00 00    	jne    ffffffff80214f7b <_RME_Svc_Handler+0x383b>
ffffffff802129af:	48 89 c1             	mov    %rax,%rcx
ffffffff802129b2:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802129b6:	48 83 f9 08          	cmp    $0x8,%rcx
ffffffff802129ba:	0f 85 af 25 00 00    	jne    ffffffff80214f6f <_RME_Svc_Handler+0x382f>
ffffffff802129c0:	48 8b 72 20          	mov    0x20(%rdx),%rsi
ffffffff802129c4:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff802129c9:	48 29 f1             	sub    %rsi,%rcx
ffffffff802129cc:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff802129d0:	0f 86 5d 29 00 00    	jbe    ffffffff80215333 <_RME_Svc_Handler+0x3bf3>
ffffffff802129d6:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff802129da:	48 85 c9             	test   %rcx,%rcx
ffffffff802129dd:	0f 85 32 29 00 00    	jne    ffffffff80215315 <_RME_Svc_Handler+0x3bd5>
    if(Sig_Del->Thd!=0U)
ffffffff802129e3:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
ffffffff802129e7:	48 85 c9             	test   %rcx,%rcx
ffffffff802129ea:	0f 85 87 23 00 00    	jne    ffffffff80214d77 <_RME_Svc_Handler+0x3637>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802129f0:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802129f5:	0f 94 c1             	sete   %cl
    RME_CAP_DELETE(Sig_Del,Type_Stat);
ffffffff802129f8:	80 f9 01             	cmp    $0x1,%cl
ffffffff802129fb:	48 19 f6             	sbb    %rsi,%rsi
ffffffff802129fe:	e9 77 fa ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Retval=_RME_Sig_Crt(Cpt,
ffffffff80212a03:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff80212a08:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
ffffffff80212a0d:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff80212a12:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212a17:	f6 c4 80             	test   $0x80,%ah
ffffffff80212a1a:	0f 85 c8 1a 00 00    	jne    ffffffff802144e8 <_RME_Svc_Handler+0x2da8>
ffffffff80212a20:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212a23:	0f 83 22 2e 00 00    	jae    ffffffff8021584b <_RME_Svc_Handler+0x410b>
ffffffff80212a29:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212a30:	00 00 00 
ffffffff80212a33:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212a37:	48 01 f0             	add    %rsi,%rax
ffffffff80212a3a:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212a41:	ff 00 00 
ffffffff80212a44:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212a47:	48 21 ce             	and    %rcx,%rsi
ffffffff80212a4a:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80212a4d:	0f 84 ec 2d 00 00    	je     ffffffff8021583f <_RME_Svc_Handler+0x40ff>
ffffffff80212a53:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212a57:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212a5b:	0f 85 d2 2d 00 00    	jne    ffffffff80215833 <_RME_Svc_Handler+0x40f3>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80212a61:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff80212a65:	0f 84 20 27 00 00    	je     ffffffff8021518b <_RME_Svc_Handler+0x3a4b>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80212a6b:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212a6f:	0f 83 0a 27 00 00    	jae    ffffffff8021517f <_RME_Svc_Handler+0x3a3f>
ffffffff80212a75:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff80212a7c:	00 00 00 
ffffffff80212a7f:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212a83:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff80212a87:	31 c0                	xor    %eax,%eax
ffffffff80212a89:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80212a8e:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80212a91:	84 c9                	test   %cl,%cl
ffffffff80212a93:	0f 84 5b 0e 00 00    	je     ffffffff802138f4 <_RME_Svc_Handler+0x21b4>
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80212a99:	48 b8 00 00 00 00 00 	movabs $0x8000000000000,%rax
ffffffff80212aa0:	00 08 00 
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80212aa3:	48 c7 42 20 01 00 00 	movq   $0x1,0x20(%rdx)
ffffffff80212aaa:	00 
    return 0;
ffffffff80212aab:	31 f6                	xor    %esi,%esi
    Sig_Crt->Head.Root_Ref=0U;
ffffffff80212aad:	48 c7 42 08 00 00 00 	movq   $0x0,0x8(%rdx)
ffffffff80212ab4:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80212ab5:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff80212abc:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff80212abd:	48 c7 42 10 3f 00 00 	movq   $0x3f,0x10(%rdx)
ffffffff80212ac4:	00 
    Sig_Crt->Sig_Num=0U;
ffffffff80212ac5:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
ffffffff80212acc:	00 
    Sig_Crt->Thd=0U;
ffffffff80212acd:	48 c7 42 30 00 00 00 	movq   $0x0,0x30(%rdx)
ffffffff80212ad4:	00 
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80212ad5:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff80212ad8:	e9 9d f9 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                      (rme_cid_t)Param[0]);                 /* rme_cid_t Cap_Thd */
ffffffff80212add:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff80212ae2:	49 8b 4c 24 18       	mov    0x18(%r12),%rcx
ffffffff80212ae7:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80212aec:	f6 c4 80             	test   $0x80,%ah
ffffffff80212aef:	0f 85 ab 1b 00 00    	jne    ffffffff802146a0 <_RME_Svc_Handler+0x2f60>
ffffffff80212af5:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212af8:	0f 83 f9 26 00 00    	jae    ffffffff802151f7 <_RME_Svc_Handler+0x3ab7>
ffffffff80212afe:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212b05:	00 00 00 
ffffffff80212b08:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212b0c:	48 01 c8             	add    %rcx,%rax
ffffffff80212b0f:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212b16:	ff 00 00 
ffffffff80212b19:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212b1c:	48 21 d1             	and    %rdx,%rcx
ffffffff80212b1f:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212b22:	0f 84 c3 26 00 00    	je     ffffffff802151eb <_RME_Svc_Handler+0x3aab>
ffffffff80212b28:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212b2c:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80212b30:	0f 85 a9 26 00 00    	jne    ffffffff802151df <_RME_Svc_Handler+0x3a9f>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff80212b36:	f6 40 10 20          	testb  $0x20,0x10(%rax)
ffffffff80212b3a:	0f 84 0a 22 00 00    	je     ffffffff80214d4a <_RME_Svc_Handler+0x360a>
    Scheduler=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff80212b40:	4c 8b 60 18          	mov    0x18(%rax),%r12
    if(Scheduler->Sched.Local!=RME_CPU_LOCAL())
ffffffff80212b44:	49 8b 5c 24 28       	mov    0x28(%r12),%rbx
ffffffff80212b49:	e8 f1 9c ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
ffffffff80212b4e:	48 39 c3             	cmp    %rax,%rbx
ffffffff80212b51:	0f 85 e7 21 00 00    	jne    ffffffff80214d3e <_RME_Svc_Handler+0x35fe>
    if(Scheduler->Sched.Event.Next==&(Scheduler->Sched.Event))
ffffffff80212b57:	49 8b 5c 24 78       	mov    0x78(%r12),%rbx
ffffffff80212b5c:	49 83 c4 78          	add    $0x78,%r12
ffffffff80212b60:	4c 39 e3             	cmp    %r12,%rbx
ffffffff80212b63:	0f 84 62 22 00 00    	je     ffffffff80214dcb <_RME_Svc_Handler+0x368b>
    _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80212b69:	48 8b 33             	mov    (%rbx),%rsi
ffffffff80212b6c:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
ffffffff80212b70:	e8 3b bf ff ff       	call   ffffffff8020eab0 <_RME_List_Del>
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80212b75:	48 89 df             	mov    %rbx,%rdi
ffffffff80212b78:	e8 13 bf ff ff       	call   ffffffff8020ea90 <_RME_List_Crt>
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80212b7d:	48 8b 43 28          	mov    0x28(%rbx),%rax
ffffffff80212b81:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212b85:	0f 84 dc 20 00 00    	je     ffffffff80214c67 <_RME_Svc_Handler+0x3527>
    else if(Thread->Sched.State==RME_THD_TIMEOUT)
ffffffff80212b8b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212b8f:	0f 94 c0             	sete   %al
ffffffff80212b92:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b95:	48 c1 e0 3d          	shl    $0x3d,%rax
    return (rme_ret_t)(Thread->Sched.TID|Flag);
ffffffff80212b99:	48 0b 43 10          	or     0x10(%rbx),%rax
ffffffff80212b9d:	48 89 c6             	mov    %rax,%rsi
ffffffff80212ba0:	e9 d5 f8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                       RME_PARAM_D0(Param[1]),              /* rme_ptr_t Prio */
ffffffff80212ba5:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
ffffffff80212baa:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212baf:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
ffffffff80212bb4:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
ffffffff80212bb9:	ff 74 24 40          	push   0x40(%rsp)
ffffffff80212bbd:	44 89 c8             	mov    %r9d,%eax
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff80212bc0:	4c 89 c1             	mov    %r8,%rcx
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212bc3:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff80212bc7:	45 89 c0             	mov    %r8d,%r8d
ffffffff80212bca:	50                   	push   %rax
ffffffff80212bcb:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff80212bd0:	48 c1 e9 20          	shr    $0x20,%rcx
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212bd4:	e8 87 ab ff ff       	call   ffffffff8020d760 <_RME_Thd_Sched_Bind.isra.0>
            break;
ffffffff80212bd9:	59                   	pop    %rcx
ffffffff80212bda:	5f                   	pop    %rdi
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212bdb:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212bde:	e9 97 f8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Retval=_RME_Thd_Del(Cpt,
ffffffff80212be3:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Thd */
ffffffff80212be8:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
ffffffff80212bed:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff80212bf2:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212bf7:	f6 c4 80             	test   $0x80,%ah
ffffffff80212bfa:	0f 85 88 16 00 00    	jne    ffffffff80214288 <_RME_Svc_Handler+0x2b48>
ffffffff80212c00:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212c03:	0f 83 56 28 00 00    	jae    ffffffff8021545f <_RME_Svc_Handler+0x3d1f>
ffffffff80212c09:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212c10:	00 00 00 
ffffffff80212c13:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212c17:	48 01 f0             	add    %rsi,%rax
ffffffff80212c1a:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212c21:	ff 00 00 
ffffffff80212c24:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212c27:	48 21 ce             	and    %rcx,%rsi
ffffffff80212c2a:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80212c2d:	0f 84 20 28 00 00    	je     ffffffff80215453 <_RME_Svc_Handler+0x3d13>
ffffffff80212c33:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212c37:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212c3b:	0f 85 06 28 00 00    	jne    ffffffff80215447 <_RME_Svc_Handler+0x3d07>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212c41:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212c45:	0f 84 8e 26 00 00    	je     ffffffff802152d9 <_RME_Svc_Handler+0x3b99>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff80212c4b:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212c4f:	0f 83 78 26 00 00    	jae    ffffffff802152cd <_RME_Svc_Handler+0x3b8d>
ffffffff80212c55:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80212c59:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80212c5d:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212c64:	00 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff80212c67:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80212c6a:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80212c71:	ff 00 00 
ffffffff80212c74:	48 8b 01             	mov    (%rcx),%rax
ffffffff80212c77:	48 21 c2             	and    %rax,%rdx
ffffffff80212c7a:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80212c7d:	0f 85 3e 26 00 00    	jne    ffffffff802152c1 <_RME_Svc_Handler+0x3b81>
ffffffff80212c83:	48 89 c2             	mov    %rax,%rdx
ffffffff80212c86:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212c8a:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80212c8e:	0f 85 21 26 00 00    	jne    ffffffff802152b5 <_RME_Svc_Handler+0x3b75>
ffffffff80212c94:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212c99:	48 2b 51 20          	sub    0x20(%rcx),%rdx
ffffffff80212c9d:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80212ca1:	0f 86 d6 28 00 00    	jbe    ffffffff8021557d <_RME_Svc_Handler+0x3e3d>
ffffffff80212ca7:	48 83 79 08 00       	cmpq   $0x0,0x8(%rcx)
ffffffff80212cac:	0f 85 8d 25 00 00    	jne    ffffffff8021523f <_RME_Svc_Handler+0x3aff>
    Thread=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
ffffffff80212cb2:	4c 8b 61 18          	mov    0x18(%rcx),%r12
    if(Thread->Sched.Local!=RME_THD_FREE)
ffffffff80212cb6:	49 83 7c 24 28 ff    	cmpq   $0xffffffffffffffff,0x28(%r12)
ffffffff80212cbc:	0f 85 67 20 00 00    	jne    ffffffff80214d29 <_RME_Svc_Handler+0x35e9>
ffffffff80212cc2:	31 d2                	xor    %edx,%edx
ffffffff80212cc4:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80212cc9:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Thd_Del,Type_Stat);
ffffffff80212ccc:	84 d2                	test   %dl,%dl
ffffffff80212cce:	0f 84 03 0b 00 00    	je     ffffffff802137d7 <_RME_Svc_Handler+0x2097>
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80212cd4:	49 8b 9c 24 98 00 00 	mov    0x98(%r12),%rbx
ffffffff80212cdb:	00 
ffffffff80212cdc:	4d 8d ac 24 98 00 00 	lea    0x98(%r12),%r13
ffffffff80212ce3:	00 
ffffffff80212ce4:	4c 39 eb             	cmp    %r13,%rbx
ffffffff80212ce7:	74 31                	je     ffffffff80212d1a <_RME_Svc_Handler+0x15da>
ffffffff80212ce9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff80212cf0:	48 8b 33             	mov    (%rbx),%rsi
ffffffff80212cf3:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
ffffffff80212cf7:	e8 b4 bd ff ff       	call   ffffffff8020eab0 <_RME_List_Del>
        Invocation->Thd_Act=0U;
ffffffff80212cfc:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff80212d03:	00 
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80212d04:	49 8b 9c 24 98 00 00 	mov    0x98(%r12),%rbx
ffffffff80212d0b:	00 
        Thread->Ctx.Invstk_Depth--;
ffffffff80212d0c:	49 83 ac 24 a8 00 00 	subq   $0x1,0xa8(%r12)
ffffffff80212d13:	00 01 
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80212d15:	49 39 dd             	cmp    %rbx,%r13
ffffffff80212d18:	75 d6                	jne    ffffffff80212cf0 <_RME_Svc_Handler+0x15b0>
    RME_FETCH_ADD(&(Thread->Sched.Prc->Head.Root_Ref), -1);
ffffffff80212d1a:	49 8b 44 24 58       	mov    0x58(%r12),%rax
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80212d1f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212d26:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)==0U)
ffffffff80212d2c:	49 83 bc 24 88 00 00 	cmpq   $0x0,0x88(%r12)
ffffffff80212d33:	00 00 
ffffffff80212d35:	0f 88 df 1e 00 00    	js     ffffffff80214c1a <_RME_Svc_Handler+0x34da>
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff80212d3b:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff80212d40:	4c 89 e7             	mov    %r12,%rdi
ffffffff80212d43:	e8 88 db ff ff       	call   ffffffff802108d0 <_RME_Kot_Erase>
    return 0;
ffffffff80212d48:	31 f6                	xor    %esi,%esi
ffffffff80212d4a:	e9 2b f7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212d4f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Prio_Max */
ffffffff80212d54:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212d59:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80212d5d:	4c 89 e7             	mov    %r12,%rdi
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
ffffffff80212d60:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212d65:	48 89 c6             	mov    %rax,%rsi
ffffffff80212d68:	48 c1 e8 07          	shr    $0x7,%rax
ffffffff80212d6c:	45 89 c1             	mov    %r8d,%r9d
ffffffff80212d6f:	83 e6 40             	and    $0x40,%esi
ffffffff80212d72:	89 d1                	mov    %edx,%ecx
ffffffff80212d74:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80212d78:	56                   	push   %rsi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80212d79:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212d7d:	50                   	push   %rax
ffffffff80212d7e:	ff 74 24 58          	push   0x58(%rsp)
ffffffff80212d82:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff80212d87:	e8 b4 cd ff ff       	call   ffffffff8020fb40 <_RME_Thd_Crt>
            break;
ffffffff80212d8c:	48 83 c4 20          	add    $0x20,%rsp
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212d90:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212d93:	e9 e2 f6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff80212d98:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Cpt */
ffffffff80212d9d:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
ffffffff80212da2:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff80212da7:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80212dac:	f6 c4 80             	test   $0x80,%ah
ffffffff80212daf:	0f 85 9f 16 00 00    	jne    ffffffff80214454 <_RME_Svc_Handler+0x2d14>
ffffffff80212db5:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212db8:	0f 83 01 23 00 00    	jae    ffffffff802150bf <_RME_Svc_Handler+0x397f>
ffffffff80212dbe:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80212dc5:	ff 00 00 
ffffffff80212dc8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212dcc:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80212dd3:	00 00 00 
ffffffff80212dd6:	48 8d 0c 30          	lea    (%rax,%rsi,1),%rcx
ffffffff80212dda:	48 8b 01             	mov    (%rcx),%rax
ffffffff80212ddd:	49 21 c0             	and    %rax,%r8
ffffffff80212de0:	4d 39 c8             	cmp    %r9,%r8
ffffffff80212de3:	0f 84 62 25 00 00    	je     ffffffff8021534b <_RME_Svc_Handler+0x3c0b>
ffffffff80212de9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212ded:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80212df1:	0f 85 48 25 00 00    	jne    ffffffff8021533f <_RME_Svc_Handler+0x3bff>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212df7:	f6 c6 80             	test   $0x80,%dh
ffffffff80212dfa:	0f 85 19 1b 00 00    	jne    ffffffff80214919 <_RME_Svc_Handler+0x31d9>
ffffffff80212e00:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80212e03:	0f 83 d4 27 00 00    	jae    ffffffff802155dd <_RME_Svc_Handler+0x3e9d>
ffffffff80212e09:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212e10:	00 00 00 
ffffffff80212e13:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212e17:	48 01 f2             	add    %rsi,%rdx
ffffffff80212e1a:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212e21:	ff 00 00 
ffffffff80212e24:	48 8b 02             	mov    (%rdx),%rax
ffffffff80212e27:	48 21 c6             	and    %rax,%rsi
ffffffff80212e2a:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80212e2d:	0f 84 08 26 00 00    	je     ffffffff8021543b <_RME_Svc_Handler+0x3cfb>
ffffffff80212e33:	48 89 c6             	mov    %rax,%rsi
ffffffff80212e36:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80212e3a:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80212e3e:	0f 85 eb 25 00 00    	jne    ffffffff8021542f <_RME_Svc_Handler+0x3cef>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
ffffffff80212e44:	f6 41 10 04          	testb  $0x4,0x10(%rcx)
ffffffff80212e48:	0f 84 d5 25 00 00    	je     ffffffff80215423 <_RME_Svc_Handler+0x3ce3>
    RME_CAP_CHECK(Cpt_New,RME_CPT_FLAG_PRC_CPT);
ffffffff80212e4e:	f6 42 10 80          	testb  $0x80,0x10(%rdx)
ffffffff80212e52:	0f 84 bf 25 00 00    	je     ffffffff80215417 <_RME_Svc_Handler+0x3cd7>
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
ffffffff80212e58:	85 c0                	test   %eax,%eax
ffffffff80212e5a:	74 04                	je     ffffffff80212e60 <_RME_Svc_Handler+0x1720>
ffffffff80212e5c:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    Cpt_Old=Prc_Op->Cpt;
ffffffff80212e60:	48 8b 41 28          	mov    0x28(%rcx),%rax
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212e64:	f0 48 0f b1 51 28    	lock cmpxchg %rdx,0x28(%rcx)
ffffffff80212e6a:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Cpt)),
ffffffff80212e6e:	40 84 f6             	test   %sil,%sil
ffffffff80212e71:	0f 84 01 02 00 00    	je     ffffffff80213078 <_RME_Svc_Handler+0x1938>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80212e77:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80212e7c:	f0 48 0f c1 4a 08    	lock xadd %rcx,0x8(%rdx)
ffffffff80212e82:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212e89:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    return 0;
ffffffff80212e8f:	31 f6                	xor    %esi,%esi
ffffffff80212e91:	e9 e4 f5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Retval=_RME_Prc_Del(Cpt,
ffffffff80212e96:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Prc */
ffffffff80212e9b:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
ffffffff80212ea0:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff80212ea5:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212eaa:	f6 c4 80             	test   $0x80,%ah
ffffffff80212ead:	0f 85 cd 16 00 00    	jne    ffffffff80214580 <_RME_Svc_Handler+0x2e40>
ffffffff80212eb3:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212eb6:	0f 83 fb 20 00 00    	jae    ffffffff80214fb7 <_RME_Svc_Handler+0x3877>
ffffffff80212ebc:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212ec3:	00 00 00 
ffffffff80212ec6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212eca:	48 01 f0             	add    %rsi,%rax
ffffffff80212ecd:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212ed4:	ff 00 00 
ffffffff80212ed7:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212eda:	48 21 ce             	and    %rcx,%rsi
ffffffff80212edd:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80212ee0:	0f 84 c5 20 00 00    	je     ffffffff80214fab <_RME_Svc_Handler+0x386b>
ffffffff80212ee6:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212eea:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212eee:	0f 85 ab 20 00 00    	jne    ffffffff80214f9f <_RME_Svc_Handler+0x385f>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212ef4:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212ef8:	0f 84 7d 24 00 00    	je     ffffffff8021537b <_RME_Svc_Handler+0x3c3b>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff80212efe:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212f02:	0f 83 67 24 00 00    	jae    ffffffff8021536f <_RME_Svc_Handler+0x3c2f>
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff80212f08:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212f0f:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff80212f12:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212f16:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff80212f1a:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212f21:	00 00 00 
ffffffff80212f24:	48 8b 02             	mov    (%rdx),%rax
ffffffff80212f27:	48 21 c1             	and    %rax,%rcx
ffffffff80212f2a:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212f2d:	0f 85 30 24 00 00    	jne    ffffffff80215363 <_RME_Svc_Handler+0x3c23>
ffffffff80212f33:	48 89 c1             	mov    %rax,%rcx
ffffffff80212f36:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212f3a:	48 83 f9 05          	cmp    $0x5,%rcx
ffffffff80212f3e:	0f 85 13 24 00 00    	jne    ffffffff80215357 <_RME_Svc_Handler+0x3c17>
ffffffff80212f44:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80212f49:	48 2b 4a 20          	sub    0x20(%rdx),%rcx
ffffffff80212f4d:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff80212f51:	0f 86 c8 27 00 00    	jbe    ffffffff8021571f <_RME_Svc_Handler+0x3fdf>
ffffffff80212f57:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
ffffffff80212f5c:	0f 85 9b 27 00 00    	jne    ffffffff802156fd <_RME_Svc_Handler+0x3fbd>
    Prc_Cpt=Prc_Del->Cpt;
ffffffff80212f62:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
    Prc_Pgt=Prc_Del->Pgt;
ffffffff80212f66:	48 8b 72 30          	mov    0x30(%rdx),%rsi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212f6a:	31 c9                	xor    %ecx,%ecx
ffffffff80212f6c:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80212f71:	0f 94 c1             	sete   %cl
    RME_CAP_DELETE(Prc_Del,Type_Stat);
ffffffff80212f74:	84 c9                	test   %cl,%cl
ffffffff80212f76:	0f 84 5b 08 00 00    	je     ffffffff802137d7 <_RME_Svc_Handler+0x2097>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80212f7c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212f83:	48 89 c2             	mov    %rax,%rdx
ffffffff80212f86:	f0 48 0f c1 57 08    	lock xadd %rdx,0x8(%rdi)
ffffffff80212f8c:	f0 48 0f c1 46 08    	lock xadd %rax,0x8(%rsi)
    return 0;
ffffffff80212f92:	31 f6                	xor    %esi,%esi
ffffffff80212f94:	e9 e1 f4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff80212f99:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Pgt */
ffffffff80212f9e:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
ffffffff80212fa3:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff80212fa8:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80212fad:	f6 c4 80             	test   $0x80,%ah
ffffffff80212fb0:	0f 85 3d 12 00 00    	jne    ffffffff802141f3 <_RME_Svc_Handler+0x2ab3>
ffffffff80212fb6:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212fb9:	0f 83 4c 24 00 00    	jae    ffffffff8021540b <_RME_Svc_Handler+0x3ccb>
ffffffff80212fbf:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80212fc6:	ff 00 00 
ffffffff80212fc9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212fcd:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80212fd4:	00 00 00 
ffffffff80212fd7:	48 8d 0c 30          	lea    (%rax,%rsi,1),%rcx
ffffffff80212fdb:	48 8b 01             	mov    (%rcx),%rax
ffffffff80212fde:	49 21 c0             	and    %rax,%r8
ffffffff80212fe1:	4d 39 c8             	cmp    %r9,%r8
ffffffff80212fe4:	0f 84 15 24 00 00    	je     ffffffff802153ff <_RME_Svc_Handler+0x3cbf>
ffffffff80212fea:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212fee:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80212ff2:	0f 85 a7 23 00 00    	jne    ffffffff8021539f <_RME_Svc_Handler+0x3c5f>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80212ff8:	f6 c6 80             	test   $0x80,%dh
ffffffff80212ffb:	0f 85 af 19 00 00    	jne    ffffffff802149b0 <_RME_Svc_Handler+0x3270>
ffffffff80213001:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80213004:	0f 83 89 23 00 00    	jae    ffffffff80215393 <_RME_Svc_Handler+0x3c53>
ffffffff8021300a:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80213011:	ff 00 00 
ffffffff80213014:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213018:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021301f:	00 00 00 
ffffffff80213022:	48 01 f2             	add    %rsi,%rdx
ffffffff80213025:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213028:	48 21 f0             	and    %rsi,%rax
ffffffff8021302b:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021302e:	0f 84 53 23 00 00    	je     ffffffff80215387 <_RME_Svc_Handler+0x3c47>
ffffffff80213034:	48 89 f0             	mov    %rsi,%rax
ffffffff80213037:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021303b:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021303f:	0f 85 9e 20 00 00    	jne    ffffffff802150e3 <_RME_Svc_Handler+0x39a3>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff80213045:	f6 41 10 08          	testb  $0x8,0x10(%rcx)
ffffffff80213049:	0f 84 88 20 00 00    	je     ffffffff802150d7 <_RME_Svc_Handler+0x3997>
    RME_CAP_CHECK(Pgt_New,RME_PGT_FLAG_PRC_PGT);
ffffffff8021304f:	f6 42 10 80          	testb  $0x80,0x10(%rdx)
ffffffff80213053:	0f 84 d2 1d 00 00    	je     ffffffff80214e2b <_RME_Svc_Handler+0x36eb>
    Pgt_Old=Prc_Op->Pgt;
ffffffff80213059:	48 8b 41 30          	mov    0x30(%rcx),%rax
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff8021305d:	85 f6                	test   %esi,%esi
ffffffff8021305f:	74 04                	je     ffffffff80213065 <_RME_Svc_Handler+0x1925>
ffffffff80213061:	48 8b 52 08          	mov    0x8(%rdx),%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80213065:	f0 48 0f b1 51 30    	lock cmpxchg %rdx,0x30(%rcx)
ffffffff8021306b:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Pgt)),
ffffffff8021306f:	40 84 f6             	test   %sil,%sil
ffffffff80213072:	0f 85 ff fd ff ff    	jne    ffffffff80212e77 <_RME_Svc_Handler+0x1737>
        return RME_ERR_PTH_CONFLICT;
ffffffff80213078:	48 c7 c6 36 ff ff ff 	mov    $0xffffffffffffff36,%rsi
ffffffff8021307f:	e9 f6 f3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80213084:	0f 1f 40 00          	nopl   0x0(%rax)
                                RME_PARAM_Q0(Param[0]),                     /* rme_ptr_t Size_Order */
ffffffff80213088:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
ffffffff8021308d:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff80213092:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80213096:	4c 89 e7             	mov    %r12,%rdi
ffffffff80213099:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff8021309e:	48 89 c1             	mov    %rax,%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff802130a1:	48 89 c6             	mov    %rax,%rsi
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff802130a4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802130a7:	48 c1 ea 10          	shr    $0x10,%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff802130ab:	48 c1 ee 20          	shr    $0x20,%rsi
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff802130af:	52                   	push   %rdx
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff802130b0:	48 c1 e9 10          	shr    $0x10,%rcx
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff802130b4:	48 89 f2             	mov    %rsi,%rdx
ffffffff802130b7:	50                   	push   %rax
ffffffff802130b8:	4c 89 c8             	mov    %r9,%rax
ffffffff802130bb:	0f b7 c9             	movzwl %cx,%ecx
ffffffff802130be:	49 83 e1 fe          	and    $0xfffffffffffffffe,%r9
ffffffff802130c2:	83 e0 01             	and    $0x1,%eax
ffffffff802130c5:	50                   	push   %rax
ffffffff802130c6:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff802130cb:	4c 8b 44 24 58       	mov    0x58(%rsp),%r8
ffffffff802130d0:	e8 eb c6 ff ff       	call   ffffffff8020f7c0 <_RME_Pgt_Crt>
            break;
ffffffff802130d5:	48 83 c4 20          	add    $0x20,%rsp
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff802130d9:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff802130dc:	e9 99 f3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Retval=_RME_Cpt_Rem(Cpt,
ffffffff802130e1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Rem */
ffffffff802130e6:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
ffffffff802130eb:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff802130f0:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802130f5:	f6 c4 80             	test   $0x80,%ah
ffffffff802130f8:	0f 85 7b 0e 00 00    	jne    ffffffff80213f79 <_RME_Svc_Handler+0x2839>
ffffffff802130fe:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213101:	0f 83 e0 22 00 00    	jae    ffffffff802153e7 <_RME_Svc_Handler+0x3ca7>
ffffffff80213107:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021310e:	00 00 00 
ffffffff80213111:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213115:	48 01 f0             	add    %rsi,%rax
ffffffff80213118:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8021311f:	ff 00 00 
ffffffff80213122:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213125:	48 21 ce             	and    %rcx,%rsi
ffffffff80213128:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8021312b:	0f 84 c6 26 00 00    	je     ffffffff802157f7 <_RME_Svc_Handler+0x40b7>
ffffffff80213131:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213135:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213139:	0f 85 ac 26 00 00    	jne    ffffffff802157eb <_RME_Svc_Handler+0x40ab>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
ffffffff8021313f:	f6 40 10 20          	testb  $0x20,0x10(%rax)
ffffffff80213143:	0f 84 c8 23 00 00    	je     ffffffff80215511 <_RME_Svc_Handler+0x3dd1>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff80213149:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021314d:	0f 83 b2 23 00 00    	jae    ffffffff80215505 <_RME_Svc_Handler+0x3dc5>
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff80213153:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8021315a:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff8021315d:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213161:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff80213165:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021316c:	00 00 00 
ffffffff8021316f:	48 8b 02             	mov    (%rdx),%rax
ffffffff80213172:	48 21 c1             	and    %rax,%rcx
ffffffff80213175:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80213178:	0f 85 7b 23 00 00    	jne    ffffffff802154f9 <_RME_Svc_Handler+0x3db9>
ffffffff8021317e:	48 8b 72 20          	mov    0x20(%rdx),%rsi
ffffffff80213182:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80213187:	48 29 f1             	sub    %rsi,%rcx
ffffffff8021318a:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff8021318e:	0f 86 59 23 00 00    	jbe    ffffffff802154ed <_RME_Svc_Handler+0x3dad>
ffffffff80213194:	85 c0                	test   %eax,%eax
ffffffff80213196:	0f 84 37 26 00 00    	je     ffffffff802157d3 <_RME_Svc_Handler+0x4093>
    Rem_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8021319c:	48 89 c1             	mov    %rax,%rcx
ffffffff8021319f:	48 c1 e9 30          	shr    $0x30,%rcx
    if((Rem_Type!=RME_CAP_TYPE_KOM)&&(Rem_Type!=RME_CAP_TYPE_KFN))
ffffffff802131a3:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff802131a7:	48 83 f9 01          	cmp    $0x1,%rcx
ffffffff802131ab:	0f 86 7d 1a 00 00    	jbe    ffffffff80214c2e <_RME_Svc_Handler+0x34ee>
        Capobj_Root=(struct RME_Cap_Struct*)(Capobj_Rem->Head.Root_Ref);
ffffffff802131b1:	48 8b 72 08          	mov    0x8(%rdx),%rsi
ffffffff802131b5:	31 c9                	xor    %ecx,%ecx
ffffffff802131b7:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802131bc:	0f 94 c1             	sete   %cl
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff802131bf:	84 c9                	test   %cl,%cl
ffffffff802131c1:	0f 84 10 06 00 00    	je     ffffffff802137d7 <_RME_Svc_Handler+0x2097>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802131c7:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802131ce:	f0 48 0f c1 46 08    	lock xadd %rax,0x8(%rsi)
    return 0;
ffffffff802131d4:	31 f6                	xor    %esi,%esi
ffffffff802131d6:	e9 9f f2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff802131db:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
ffffffff802131e0:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
ffffffff802131e5:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff802131ea:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff802131ef:	48 c1 e0 20          	shl    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff802131f3:	48 0b 44 24 28       	or     0x28(%rsp),%rax
ffffffff802131f8:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
ffffffff802131fd:	45 89 c1             	mov    %r8d,%r9d
ffffffff80213200:	50                   	push   %rax
ffffffff80213201:	89 d1                	mov    %edx,%ecx
ffffffff80213203:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80213207:	ff 74 24 48          	push   0x48(%rsp)
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
ffffffff8021320b:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8021320f:	e8 cc af ff ff       	call   ffffffff8020e1e0 <_RME_Cpt_Add.isra.0>
            break;
ffffffff80213214:	41 5d                	pop    %r13
ffffffff80213216:	41 5e                	pop    %r14
            Retval=_RME_Cpt_Add(Cpt,
ffffffff80213218:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff8021321b:	e9 5a f2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Retval=_RME_Cpt_Frz(Cpt,
ffffffff80213220:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Frz */
ffffffff80213225:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
ffffffff8021322a:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
ffffffff8021322f:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff80213234:	f6 c4 80             	test   $0x80,%ah
ffffffff80213237:	0f 85 d3 13 00 00    	jne    ffffffff80214610 <_RME_Svc_Handler+0x2ed0>
ffffffff8021323d:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213240:	0f 83 f1 1b 00 00    	jae    ffffffff80214e37 <_RME_Svc_Handler+0x36f7>
ffffffff80213246:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021324d:	00 00 00 
ffffffff80213250:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213254:	48 01 f0             	add    %rsi,%rax
ffffffff80213257:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8021325e:	ff 00 00 
ffffffff80213261:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213264:	48 21 ce             	and    %rcx,%rsi
ffffffff80213267:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8021326a:	0f 84 f7 24 00 00    	je     ffffffff80215767 <_RME_Svc_Handler+0x4027>
ffffffff80213270:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213274:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213278:	0f 85 dd 24 00 00    	jne    ffffffff8021575b <_RME_Svc_Handler+0x401b>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
ffffffff8021327e:	f6 40 10 04          	testb  $0x4,0x10(%rax)
ffffffff80213282:	0f 84 c7 24 00 00    	je     ffffffff8021574f <_RME_Svc_Handler+0x400f>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Frz,struct RME_Cap_Struct*,Capobj_Frz);
ffffffff80213288:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021328c:	0f 83 b1 24 00 00    	jae    ffffffff80215743 <_RME_Svc_Handler+0x4003>
ffffffff80213292:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213296:	48 03 50 18          	add    0x18(%rax),%rdx
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
ffffffff8021329a:	48 8b 02             	mov    (%rdx),%rax
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
ffffffff8021329d:	48 89 c1             	mov    %rax,%rcx
ffffffff802132a0:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802132a4:	0f 84 2d 05 00 00    	je     ffffffff802137d7 <_RME_Svc_Handler+0x2097>
    if(RME_CAP_ATTR(Type_Stat)==RME_CAP_ATTR_ROOT)
ffffffff802132aa:	85 c0                	test   %eax,%eax
ffffffff802132ac:	75 0d                	jne    ffffffff802132bb <_RME_Svc_Handler+0x1b7b>
        if(Capobj_Frz->Head.Root_Ref!=0U)
ffffffff802132ae:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff802132b2:	48 85 c9             	test   %rcx,%rcx
ffffffff802132b5:	0f 85 f8 1a 00 00    	jne    ffffffff80214db3 <_RME_Svc_Handler+0x3673>
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff802132bb:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802132c2:	ff 00 00 
ffffffff802132c5:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802132cc:	00 00 00 
ffffffff802132cf:	48 21 c1             	and    %rax,%rcx
ffffffff802132d2:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802132d5:	0f 84 ce 23 00 00    	je     ffffffff802156a9 <_RME_Svc_Handler+0x3f69>
    if(RME_UNLIKELY(RME_CAP_QUIE(Capobj_Frz->Head.Timestamp)==0U))
ffffffff802132db:	48 8b 7a 20          	mov    0x20(%rdx),%rdi
ffffffff802132df:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff802132e4:	48 29 f9             	sub    %rdi,%rcx
ffffffff802132e7:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff802132eb:	0f 86 ac 23 00 00    	jbe    ffffffff8021569d <_RME_Svc_Handler+0x3f5d>
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff802132f1:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff802132f8:	00 ff ff 
    Capobj_Frz->Head.Timestamp=RME_TIMESTAMP;
ffffffff802132fb:	48 c7 42 20 01 00 00 	movq   $0x1,0x20(%rdx)
ffffffff80213302:	00 
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff80213303:	48 21 c1             	and    %rax,%rcx
ffffffff80213306:	48 09 f1             	or     %rsi,%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80213309:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021330e:	0f 94 c1             	sete   %cl
    return 0;
ffffffff80213311:	31 f6                	xor    %esi,%esi
ffffffff80213313:	e9 62 f1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Pgt_Child */
ffffffff80213318:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8021331d:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
ffffffff80213322:	4d 8b 44 24 18       	mov    0x18(%r12),%r8
ffffffff80213327:	4d 8b 4c 24 28       	mov    0x28(%r12),%r9
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff8021332c:	48 89 c1             	mov    %rax,%rcx
ffffffff8021332f:	89 c2                	mov    %eax,%edx
ffffffff80213331:	48 c1 e9 20          	shr    $0x20,%rcx
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff80213335:	f6 c5 80             	test   $0x80,%ch
ffffffff80213338:	0f 85 72 10 00 00    	jne    ffffffff802143b0 <_RME_Svc_Handler+0x2c70>
ffffffff8021333e:	4c 39 c9             	cmp    %r9,%rcx
ffffffff80213341:	0f 83 a8 1a 00 00    	jae    ffffffff80214def <_RME_Svc_Handler+0x36af>
ffffffff80213347:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8021334e:	ff 00 00 
ffffffff80213351:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80213355:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8021335c:	00 00 00 
ffffffff8021335f:	4e 8d 24 01          	lea    (%rcx,%r8,1),%r12
ffffffff80213363:	49 8b 0c 24          	mov    (%r12),%rcx
ffffffff80213367:	48 21 cf             	and    %rcx,%rdi
ffffffff8021336a:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8021336d:	0f 84 70 1a 00 00    	je     ffffffff80214de3 <_RME_Svc_Handler+0x36a3>
ffffffff80213373:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213377:	48 83 f9 04          	cmp    $0x4,%rcx
ffffffff8021337b:	0f 85 16 1b 00 00    	jne    ffffffff80214e97 <_RME_Svc_Handler+0x3757>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff80213381:	f6 c4 80             	test   $0x80,%ah
ffffffff80213384:	0f 85 66 17 00 00    	jne    ffffffff80214af0 <_RME_Svc_Handler+0x33b0>
ffffffff8021338a:	4c 39 ca             	cmp    %r9,%rdx
ffffffff8021338d:	0f 83 f8 1a 00 00    	jae    ffffffff80214e8b <_RME_Svc_Handler+0x374b>
ffffffff80213393:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8021339a:	00 00 00 
ffffffff8021339d:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802133a1:	4a 8d 1c 02          	lea    (%rdx,%r8,1),%rbx
ffffffff802133a5:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802133ac:	ff 00 00 
ffffffff802133af:	48 8b 03             	mov    (%rbx),%rax
ffffffff802133b2:	48 21 c2             	and    %rax,%rdx
ffffffff802133b5:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802133b8:	0f 84 c1 1a 00 00    	je     ffffffff80214e7f <_RME_Svc_Handler+0x373f>
ffffffff802133be:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802133c2:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802133c6:	0f 85 75 21 00 00    	jne    ffffffff80215541 <_RME_Svc_Handler+0x3e01>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff802133cc:	49 8b 44 24 10       	mov    0x10(%r12),%rax
ffffffff802133d1:	a8 10                	test   $0x10,%al
ffffffff802133d3:	0f 84 5c 21 00 00    	je     ffffffff80215535 <_RME_Svc_Handler+0x3df5>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff802133d9:	f6 43 10 08          	testb  $0x8,0x10(%rbx)
ffffffff802133dd:	0f 84 46 21 00 00    	je     ffffffff80215529 <_RME_Svc_Handler+0x3de9>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff802133e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802133e6:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff802133ea:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802133ed:	0f 82 2a 21 00 00    	jb     ffffffff8021551d <_RME_Svc_Handler+0x3ddd>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff802133f3:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802133f7:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff802133fc:	48 39 c6             	cmp    %rax,%rsi
ffffffff802133ff:	0f 82 9c 21 00 00    	jb     ffffffff802155a1 <_RME_Svc_Handler+0x3e61>
    if((Pos>>RME_PGT_NMORD(Pgt_Parent->Order))!=0U)
ffffffff80213405:	49 8b 4c 24 28       	mov    0x28(%r12),%rcx
ffffffff8021340a:	48 89 f0             	mov    %rsi,%rax
ffffffff8021340d:	48 d3 e8             	shr    %cl,%rax
ffffffff80213410:	48 85 c0             	test   %rax,%rax
ffffffff80213413:	0f 85 7c 21 00 00    	jne    ffffffff80215595 <_RME_Svc_Handler+0x3e55>
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff80213419:	48 8b 43 28          	mov    0x28(%rbx),%rax
    Szord_Parent=RME_PGT_SZORD(Pgt_Parent->Order);
ffffffff8021341d:	48 c1 e9 20          	shr    $0x20,%rcx
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff80213421:	89 c2                	mov    %eax,%edx
ffffffff80213423:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213427:	48 01 d0             	add    %rdx,%rax
    if(Szord_Parent!=Order_Child)
ffffffff8021342a:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021342d:	0f 85 ea 18 00 00    	jne    ffffffff80214d1d <_RME_Svc_Handler+0x35dd>
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff80213433:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
ffffffff80213438:	48 89 da             	mov    %rbx,%rdx
ffffffff8021343b:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021343e:	e8 7d 82 00 00       	call   ffffffff8021b6c0 <__RME_Pgt_Pgdir_Map>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80213443:	45 8b 1c 24          	mov    (%r12),%r11d
ffffffff80213447:	45 85 db             	test   %r11d,%r11d
ffffffff8021344a:	74 05                	je     ffffffff80213451 <_RME_Svc_Handler+0x1d11>
ffffffff8021344c:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80213451:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80213456:	f0 49 0f c1 44 24 08 	lock xadd %rax,0x8(%r12)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8021345d:	44 8b 13             	mov    (%rbx),%r10d
ffffffff80213460:	45 85 d2             	test   %r10d,%r10d
ffffffff80213463:	74 04                	je     ffffffff80213469 <_RME_Svc_Handler+0x1d29>
ffffffff80213465:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff80213469:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021346e:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    return 0;
ffffffff80213474:	31 f6                	xor    %esi,%esi
ffffffff80213476:	e9 ff ef ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt */
ffffffff8021347b:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff80213480:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
ffffffff80213485:	49 8b 4c 24 18       	mov    0x18(%r12),%rcx
ffffffff8021348a:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff8021348f:	f6 c4 80             	test   $0x80,%ah
ffffffff80213492:	0f 85 98 12 00 00    	jne    ffffffff80214730 <_RME_Svc_Handler+0x2ff0>
ffffffff80213498:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021349b:	0f 83 56 1a 00 00    	jae    ffffffff80214ef7 <_RME_Svc_Handler+0x37b7>
ffffffff802134a1:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802134a8:	00 00 00 
ffffffff802134ab:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802134af:	48 01 c8             	add    %rcx,%rax
ffffffff802134b2:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802134b9:	ff 00 00 
ffffffff802134bc:	48 8b 10             	mov    (%rax),%rdx
ffffffff802134bf:	48 21 d1             	and    %rdx,%rcx
ffffffff802134c2:	48 39 f9             	cmp    %rdi,%rcx
ffffffff802134c5:	0f 84 20 1a 00 00    	je     ffffffff80214eeb <_RME_Svc_Handler+0x37ab>
ffffffff802134cb:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802134cf:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802134d3:	0f 85 06 1a 00 00    	jne    ffffffff80214edf <_RME_Svc_Handler+0x379f>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802134d9:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff802134dd:	f6 c2 04             	test   $0x4,%dl
ffffffff802134e0:	0f 84 7d 1a 00 00    	je     ffffffff80214f63 <_RME_Svc_Handler+0x3823>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff802134e6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802134e9:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff802134ed:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802134f0:	0f 82 61 1a 00 00    	jb     ffffffff80214f57 <_RME_Svc_Handler+0x3817>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Rem->Head.Flag)))
ffffffff802134f6:	48 c1 ea 08          	shr    $0x8,%rdx
ffffffff802134fa:	81 e2 ff ff ff 0f    	and    $0xfffffff,%edx
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80213500:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80213503:	0f 82 42 1a 00 00    	jb     ffffffff80214f4b <_RME_Svc_Handler+0x380b>
    if((Pos>>RME_PGT_NMORD(Pgt_Rem->Order))!=0U)
ffffffff80213509:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8021350d:	48 89 f2             	mov    %rsi,%rdx
ffffffff80213510:	48 d3 ea             	shr    %cl,%rdx
ffffffff80213513:	48 85 d2             	test   %rdx,%rdx
ffffffff80213516:	0f 85 23 1a 00 00    	jne    ffffffff80214f3f <_RME_Svc_Handler+0x37ff>
    if(__RME_Pgt_Page_Unmap(Pgt_Rem,Pos)<0)
ffffffff8021351c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021351f:	e8 4c 81 00 00       	call   ffffffff8021b670 <__RME_Pgt_Page_Unmap>
    return 0;
ffffffff80213524:	31 f6                	xor    %esi,%esi
ffffffff80213526:	e9 4f ef ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8021352b:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
ffffffff80213530:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
ffffffff80213535:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
ffffffff8021353a:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
ffffffff8021353f:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
ffffffff80213544:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80213549:	e8 22 a6 ff ff       	call   ffffffff8020db70 <_RME_Prc_Crt.isra.0>
ffffffff8021354e:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80213551:	e9 24 ef ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
ffffffff80213556:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt_Child */
ffffffff8021355b:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
            Retval=_RME_Pgt_Des(Cpt,
ffffffff80213560:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
ffffffff80213565:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
ffffffff8021356a:	4d 8b 44 24 28       	mov    0x28(%r12),%r8
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff8021356f:	f6 c4 80             	test   $0x80,%ah
ffffffff80213572:	0f 85 28 0b 00 00    	jne    ffffffff802140a0 <_RME_Svc_Handler+0x2960>
ffffffff80213578:	4c 39 c0             	cmp    %r8,%rax
ffffffff8021357b:	0f 83 80 20 00 00    	jae    ffffffff80215601 <_RME_Svc_Handler+0x3ec1>
ffffffff80213581:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213588:	ff 00 00 
ffffffff8021358b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021358f:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80213596:	00 00 00 
ffffffff80213599:	48 8d 1c 38          	lea    (%rax,%rdi,1),%rbx
ffffffff8021359d:	48 8b 03             	mov    (%rbx),%rax
ffffffff802135a0:	48 21 c1             	and    %rax,%rcx
ffffffff802135a3:	4c 39 c9             	cmp    %r9,%rcx
ffffffff802135a6:	0f 84 49 20 00 00    	je     ffffffff802155f5 <_RME_Svc_Handler+0x3eb5>
ffffffff802135ac:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802135b0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802135b4:	0f 85 2f 20 00 00    	jne    ffffffff802155e9 <_RME_Svc_Handler+0x3ea9>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff802135ba:	f6 c6 80             	test   $0x80,%dh
ffffffff802135bd:	0f 85 91 14 00 00    	jne    ffffffff80214a54 <_RME_Svc_Handler+0x3314>
ffffffff802135c3:	4c 39 c2             	cmp    %r8,%rdx
ffffffff802135c6:	0f 83 65 20 00 00    	jae    ffffffff80215631 <_RME_Svc_Handler+0x3ef1>
ffffffff802135cc:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff802135d3:	00 00 00 
ffffffff802135d6:	48 89 d0             	mov    %rdx,%rax
ffffffff802135d9:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802135e0:	ff 00 00 
ffffffff802135e3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802135e7:	4c 8d 24 38          	lea    (%rax,%rdi,1),%r12
ffffffff802135eb:	49 8b 04 24          	mov    (%r12),%rax
ffffffff802135ef:	48 21 c2             	and    %rax,%rdx
ffffffff802135f2:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802135f5:	0f 84 2a 20 00 00    	je     ffffffff80215625 <_RME_Svc_Handler+0x3ee5>
ffffffff802135fb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802135ff:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213603:	0f 85 10 20 00 00    	jne    ffffffff80215619 <_RME_Svc_Handler+0x3ed9>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff80213609:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8021360d:	a8 20                	test   $0x20,%al
ffffffff8021360f:	0f 84 f8 1f 00 00    	je     ffffffff8021560d <_RME_Svc_Handler+0x3ecd>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff80213615:	41 f6 44 24 10 08    	testb  $0x8,0x10(%r12)
ffffffff8021361b:	0f 84 a6 21 00 00    	je     ffffffff802157c7 <_RME_Svc_Handler+0x4087>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80213621:	48 89 c2             	mov    %rax,%rdx
ffffffff80213624:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff80213628:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021362b:	0f 82 8a 21 00 00    	jb     ffffffff802157bb <_RME_Svc_Handler+0x407b>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80213631:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80213635:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff8021363a:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021363d:	0f 82 6c 21 00 00    	jb     ffffffff802157af <_RME_Svc_Handler+0x406f>
    if((Pos>>RME_PGT_NMORD(Pgt_Parent->Order))!=0U)
ffffffff80213643:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff80213647:	48 89 f0             	mov    %rsi,%rax
ffffffff8021364a:	48 d3 e8             	shr    %cl,%rax
ffffffff8021364d:	48 85 c0             	test   %rax,%rax
ffffffff80213650:	0f 85 4d 21 00 00    	jne    ffffffff802157a3 <_RME_Svc_Handler+0x4063>
    if(__RME_Pgt_Pgdir_Unmap(Pgt_Parent,Pos,Pgt_Child)<0)
ffffffff80213656:	4c 89 e2             	mov    %r12,%rdx
ffffffff80213659:	48 89 df             	mov    %rbx,%rdi
ffffffff8021365c:	e8 df 80 00 00       	call   ffffffff8021b740 <__RME_Pgt_Pgdir_Unmap>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80213661:	44 8b 0b             	mov    (%rbx),%r9d
ffffffff80213664:	45 85 c9             	test   %r9d,%r9d
ffffffff80213667:	74 04                	je     ffffffff8021366d <_RME_Svc_Handler+0x1f2d>
ffffffff80213669:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff8021366d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80213674:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8021367a:	45 8b 04 24          	mov    (%r12),%r8d
ffffffff8021367e:	45 85 c0             	test   %r8d,%r8d
ffffffff80213681:	74 05                	je     ffffffff80213688 <_RME_Svc_Handler+0x1f48>
ffffffff80213683:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
ffffffff80213688:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021368f:	f0 49 0f c1 44 24 08 	lock xadd %rax,0x8(%r12)
    return 0;
ffffffff80213696:	31 f6                	xor    %esi,%esi
ffffffff80213698:	e9 dd ed ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Pos_Src */
ffffffff8021369d:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
ffffffff802136a2:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            Retval=_RME_Pgt_Add(Cpt,
ffffffff802136a7:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
ffffffff802136ac:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
ffffffff802136b1:	ff 74 24 40          	push   0x40(%rsp)
ffffffff802136b5:	44 89 c8             	mov    %r9d,%eax
ffffffff802136b8:	89 d1                	mov    %edx,%ecx
ffffffff802136ba:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff802136be:	50                   	push   %rax
ffffffff802136bf:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
ffffffff802136c4:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Pgt_Add(Cpt,
ffffffff802136c8:	e8 f3 a7 ff ff       	call   ffffffff8020dec0 <_RME_Pgt_Add.isra.0>
            break;
ffffffff802136cd:	5b                   	pop    %rbx
ffffffff802136ce:	41 5c                	pop    %r12
            Retval=_RME_Pgt_Add(Cpt,
ffffffff802136d0:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff802136d3:	e9 a2 ed ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Retval=_RME_Pgt_Del(Cpt,
ffffffff802136d8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Pgt */
ffffffff802136dd:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
ffffffff802136e2:	49 8b 4c 24 18       	mov    0x18(%r12),%rcx
ffffffff802136e7:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802136ec:	f6 c4 80             	test   $0x80,%ah
ffffffff802136ef:	0f 85 43 0a 00 00    	jne    ffffffff80214138 <_RME_Svc_Handler+0x29f8>
ffffffff802136f5:	48 39 f0             	cmp    %rsi,%rax
ffffffff802136f8:	0f 83 b7 1f 00 00    	jae    ffffffff802156b5 <_RME_Svc_Handler+0x3f75>
ffffffff802136fe:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80213705:	00 00 00 
ffffffff80213708:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021370c:	48 01 c8             	add    %rcx,%rax
ffffffff8021370f:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213716:	ff 00 00 
ffffffff80213719:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021371c:	48 21 d1             	and    %rdx,%rcx
ffffffff8021371f:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80213722:	0f 84 81 1b 00 00    	je     ffffffff802152a9 <_RME_Svc_Handler+0x3b69>
ffffffff80213728:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021372c:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213730:	0f 85 67 1b 00 00    	jne    ffffffff8021529d <_RME_Svc_Handler+0x3b5d>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80213736:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8021373a:	0f 84 51 1b 00 00    	je     ffffffff80215291 <_RME_Svc_Handler+0x3b51>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80213740:	48 3b 58 28          	cmp    0x28(%rax),%rbx
ffffffff80213744:	0f 83 3b 1b 00 00    	jae    ffffffff80215285 <_RME_Svc_Handler+0x3b45>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff8021374a:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff80213751:	00 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80213754:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80213758:	48 03 58 18          	add    0x18(%rax),%rbx
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff8021375c:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80213763:	ff 00 00 
ffffffff80213766:	4c 8b 23             	mov    (%rbx),%r12
ffffffff80213769:	4c 21 e0             	and    %r12,%rax
ffffffff8021376c:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021376f:	0f 85 6c 1d 00 00    	jne    ffffffff802154e1 <_RME_Svc_Handler+0x3da1>
ffffffff80213775:	4c 89 e0             	mov    %r12,%rax
ffffffff80213778:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021377c:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213780:	0f 85 4f 1d 00 00    	jne    ffffffff802154d5 <_RME_Svc_Handler+0x3d95>
ffffffff80213786:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021378b:	48 2b 43 20          	sub    0x20(%rbx),%rax
ffffffff8021378f:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80213793:	0f 86 30 1d 00 00    	jbe    ffffffff802154c9 <_RME_Svc_Handler+0x3d89>
ffffffff80213799:	48 83 7b 08 00       	cmpq   $0x0,0x8(%rbx)
ffffffff8021379e:	0f 85 03 1d 00 00    	jne    ffffffff802154a7 <_RME_Svc_Handler+0x3d67>
    if(__RME_Pgt_Del_Check(Pgt_Del)<0)
ffffffff802137a4:	48 89 df             	mov    %rbx,%rdi
ffffffff802137a7:	e8 54 7e 00 00       	call   ffffffff8021b600 <__RME_Pgt_Del_Check>
        Table_Size=RME_PGT_SIZE_TOP(RME_PGT_NMORD(Pgt_Del->Order));
ffffffff802137ac:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff802137b0:	b8 01 00 00 00       	mov    $0x1,%eax
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802137b5:	31 d2                	xor    %edx,%edx
    Object=RME_CAP_GETOBJ(Pgt_Del,rme_ptr_t);
ffffffff802137b7:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
        Table_Size=RME_PGT_SIZE_NOM(RME_PGT_NMORD(Pgt_Del->Order));
ffffffff802137bb:	d3 e0                	shl    %cl,%eax
ffffffff802137bd:	48 63 f0             	movslq %eax,%rsi
ffffffff802137c0:	4c 89 e0             	mov    %r12,%rax
ffffffff802137c3:	48 c1 e6 03          	shl    $0x3,%rsi
ffffffff802137c7:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff802137cc:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Pgt_Del,Type_Stat);
ffffffff802137cf:	84 d2                	test   %dl,%dl
ffffffff802137d1:	0f 85 f5 f0 ff ff    	jne    ffffffff802128cc <_RME_Svc_Handler+0x118c>
        return RME_ERR_CPT_NULL;
ffffffff802137d7:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
ffffffff802137db:	e9 9a ec ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Retval=_RME_Cpt_Del(Cpt,
ffffffff802137e0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Cpt */
ffffffff802137e5:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
ffffffff802137ea:	49 8b 4c 24 18       	mov    0x18(%r12),%rcx
ffffffff802137ef:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802137f4:	f6 c4 80             	test   $0x80,%ah
ffffffff802137f7:	0f 85 13 08 00 00    	jne    ffffffff80214010 <_RME_Svc_Handler+0x28d0>
ffffffff802137fd:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213800:	0f 83 4f 1e 00 00    	jae    ffffffff80215655 <_RME_Svc_Handler+0x3f15>
ffffffff80213806:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021380d:	00 00 00 
ffffffff80213810:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213814:	48 01 c8             	add    %rcx,%rax
ffffffff80213817:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8021381e:	ff 00 00 
ffffffff80213821:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213824:	48 21 d1             	and    %rdx,%rcx
ffffffff80213827:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021382a:	0f 84 19 1e 00 00    	je     ffffffff80215649 <_RME_Svc_Handler+0x3f09>
ffffffff80213830:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213834:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213838:	0f 85 ff 1d 00 00    	jne    ffffffff8021563d <_RME_Svc_Handler+0x3efd>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021383e:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80213842:	0f 84 4f 1f 00 00    	je     ffffffff80215797 <_RME_Svc_Handler+0x4057>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff80213848:	48 3b 78 28          	cmp    0x28(%rax),%rdi
ffffffff8021384c:	0f 83 39 1f 00 00    	jae    ffffffff8021578b <_RME_Svc_Handler+0x404b>
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff80213852:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80213859:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff8021385c:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff80213860:	48 03 78 18          	add    0x18(%rax),%rdi
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff80213864:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8021386b:	00 00 00 
ffffffff8021386e:	48 8b 07             	mov    (%rdi),%rax
ffffffff80213871:	48 21 c2             	and    %rax,%rdx
ffffffff80213874:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80213877:	0f 85 02 1f 00 00    	jne    ffffffff8021577f <_RME_Svc_Handler+0x403f>
ffffffff8021387d:	48 89 c2             	mov    %rax,%rdx
ffffffff80213880:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213884:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213888:	0f 85 e5 1e 00 00    	jne    ffffffff80215773 <_RME_Svc_Handler+0x4033>
ffffffff8021388e:	48 8b 4f 20          	mov    0x20(%rdi),%rcx
ffffffff80213892:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80213897:	48 29 ca             	sub    %rcx,%rdx
ffffffff8021389a:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021389e:	0f 86 1b 15 00 00    	jbe    ffffffff80214dbf <_RME_Svc_Handler+0x367f>
ffffffff802138a4:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
ffffffff802138a8:	48 85 c9             	test   %rcx,%rcx
ffffffff802138ab:	0f 85 e9 14 00 00    	jne    ffffffff80214d9a <_RME_Svc_Handler+0x365a>
    Table=RME_CAP_GETOBJ(Cpt_Del,struct RME_Cap_Struct*);
ffffffff802138b1:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    Entry_Num=Cpt_Del->Entry_Num;
ffffffff802138b5:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff802138b9:	48 85 f6             	test   %rsi,%rsi
ffffffff802138bc:	75 1b                	jne    ffffffff802138d9 <_RME_Svc_Handler+0x2199>
ffffffff802138be:	e9 29 10 00 00       	jmp    ffffffff802148ec <_RME_Svc_Handler+0x31ac>
ffffffff802138c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff802138c8:	48 83 c1 01          	add    $0x1,%rcx
ffffffff802138cc:	48 83 c2 40          	add    $0x40,%rdx
ffffffff802138d0:	48 39 ce             	cmp    %rcx,%rsi
ffffffff802138d3:	0f 84 13 10 00 00    	je     ffffffff802148ec <_RME_Svc_Handler+0x31ac>
        if(Table[Count].Head.Type_Stat!=0U)
ffffffff802138d9:	48 83 3a 00          	cmpq   $0x0,(%rdx)
ffffffff802138dd:	74 e9                	je     ffffffff802138c8 <_RME_Svc_Handler+0x2188>
            RME_CAP_DEFROST(Cpt_Del,Type_Stat);
ffffffff802138df:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff802138e6:	00 ff ff 
ffffffff802138e9:	48 21 c2             	and    %rax,%rdx
ffffffff802138ec:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
ffffffff802138f1:	0f 94 c2             	sete   %dl
            return RME_ERR_CPT_EXIST;
ffffffff802138f4:	48 c7 c6 fb ff ff ff 	mov    $0xfffffffffffffffb,%rsi
ffffffff802138fb:	e9 7a eb ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                RME_PARAM_D1(Param[0]));                    /* rme_ptr_t Is_Exc_Ret */
ffffffff80213900:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff80213905:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
ffffffff8021390a:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
ffffffff8021390f:	4d 8b 44 24 18       	mov    0x18(%r12),%r8
ffffffff80213914:	48 89 c1             	mov    %rax,%rcx
ffffffff80213917:	4d 8b 4c 24 28       	mov    0x28(%r12),%r9
ffffffff8021391c:	89 c2                	mov    %eax,%edx
ffffffff8021391e:	48 c1 e9 20          	shr    $0x20,%rcx
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80213922:	f6 c4 80             	test   $0x80,%ah
ffffffff80213925:	0f 85 25 0f 00 00    	jne    ffffffff80214850 <_RME_Svc_Handler+0x3110>
ffffffff8021392b:	4c 39 ca             	cmp    %r9,%rdx
ffffffff8021392e:	0f 83 03 18 00 00    	jae    ffffffff80215137 <_RME_Svc_Handler+0x39f7>
ffffffff80213934:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8021393b:	00 00 00 
ffffffff8021393e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213942:	4a 8d 04 02          	lea    (%rdx,%r8,1),%rax
ffffffff80213946:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8021394d:	ff 00 00 
ffffffff80213950:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213953:	49 21 d0             	and    %rdx,%r8
ffffffff80213956:	4d 39 c8             	cmp    %r9,%r8
ffffffff80213959:	0f 84 cc 17 00 00    	je     ffffffff8021512b <_RME_Svc_Handler+0x39eb>
ffffffff8021395f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213963:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff80213967:	0f 85 b2 17 00 00    	jne    ffffffff8021511f <_RME_Svc_Handler+0x39df>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff8021396d:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff80213971:	0f 84 7c 1a 00 00    	je     ffffffff802153f3 <_RME_Svc_Handler+0x3cb3>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff80213977:	48 8b 40 18          	mov    0x18(%rax),%rax
    Invocation->Entry=Entry;
ffffffff8021397b:	48 89 78 20          	mov    %rdi,0x20(%rax)
    Invocation->Stack=Stack;
ffffffff8021397f:	48 89 70 28          	mov    %rsi,0x28(%rax)
    return 0;
ffffffff80213983:	31 f6                	xor    %esi,%esi
    Invocation->Is_Exc_Ret=Is_Exc_Ret;
ffffffff80213985:	48 89 48 30          	mov    %rcx,0x30(%rax)
    return 0;
ffffffff80213989:	e9 ec ea ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Crt */
ffffffff8021398e:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff80213993:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
ffffffff80213998:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021399b:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
ffffffff802139a0:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
ffffffff802139a5:	89 d1                	mov    %edx,%ecx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff802139a7:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff802139ab:	e8 20 bb ff ff       	call   ffffffff8020f4d0 <_RME_Cpt_Crt>
ffffffff802139b0:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff802139b3:	e9 c2 ea ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802139b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff802139bf:	00 
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff802139c0:	48 89 d8             	mov    %rbx,%rax
ffffffff802139c3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802139c7:	48 39 c8             	cmp    %rcx,%rax
ffffffff802139ca:	0f 83 26 05 00 00    	jae    ffffffff80213ef6 <_RME_Svc_Handler+0x27b6>
ffffffff802139d0:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802139d7:	ff 00 00 
ffffffff802139da:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802139de:	48 01 f0             	add    %rsi,%rax
ffffffff802139e1:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802139e8:	00 00 00 
ffffffff802139eb:	48 8b 08             	mov    (%rax),%rcx
ffffffff802139ee:	48 89 cf             	mov    %rcx,%rdi
ffffffff802139f1:	48 21 d7             	and    %rdx,%rdi
ffffffff802139f4:	48 39 f7             	cmp    %rsi,%rdi
ffffffff802139f7:	0f 84 5d ed ff ff    	je     ffffffff8021275a <_RME_Svc_Handler+0x101a>
ffffffff802139fd:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213a01:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213a05:	0f 85 5c 04 00 00    	jne    ffffffff80213e67 <_RME_Svc_Handler+0x2727>
ffffffff80213a0b:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80213a0f:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff80213a15:	48 39 cb             	cmp    %rcx,%rbx
ffffffff80213a18:	0f 83 d8 04 00 00    	jae    ffffffff80213ef6 <_RME_Svc_Handler+0x27b6>
ffffffff80213a1e:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80213a22:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff80213a26:	48 8b 03             	mov    (%rbx),%rax
ffffffff80213a29:	48 21 c2             	and    %rax,%rdx
ffffffff80213a2c:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213a2f:	0f 85 f7 df ff ff    	jne    ffffffff80211a2c <_RME_Svc_Handler+0x2ec>
ffffffff80213a35:	e9 20 ed ff ff       	jmp    ffffffff8021275a <_RME_Svc_Handler+0x101a>
ffffffff80213a3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80213a40:	4d 39 c6             	cmp    %r8,%r14
ffffffff80213a43:	0f 83 7c 12 00 00    	jae    ffffffff80214cc5 <_RME_Svc_Handler+0x3585>
ffffffff80213a49:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff80213a50:	ff 00 00 
ffffffff80213a53:	49 c1 e6 06          	shl    $0x6,%r14
ffffffff80213a57:	49 bc 00 00 00 00 02 	movabs $0x200000000,%r12
ffffffff80213a5e:	00 00 00 
ffffffff80213a61:	4b 8d 04 0e          	lea    (%r14,%r9,1),%rax
ffffffff80213a65:	4c 8b 10             	mov    (%rax),%r10
ffffffff80213a68:	4d 21 d3             	and    %r10,%r11
ffffffff80213a6b:	4d 39 e3             	cmp    %r12,%r11
ffffffff80213a6e:	0f 84 2d 01 00 00    	je     ffffffff80213ba1 <_RME_Svc_Handler+0x2461>
ffffffff80213a74:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80213a78:	49 83 fa 06          	cmp    $0x6,%r10
ffffffff80213a7c:	0f 84 37 e2 ff ff    	je     ffffffff80211cb9 <_RME_Svc_Handler+0x579>
ffffffff80213a82:	e9 30 ed ff ff       	jmp    ffffffff802127b7 <_RME_Svc_Handler+0x1077>
ffffffff80213a87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80213a8e:	00 00 
        if(Time>=RME_THD_INF_TIME)
ffffffff80213a90:	4c 39 ea             	cmp    %r13,%rdx
ffffffff80213a93:	0f 83 27 02 00 00    	jae    ffffffff80213cc0 <_RME_Svc_Handler+0x2580>
                if(Thd_Src->Sched.Slice!=RME_THD_INIT_TIME)
ffffffff80213a99:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff80213aa0:	ff ff 7f 
ffffffff80213aa3:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213aa6:	74 09                	je     ffffffff80213ab1 <_RME_Svc_Handler+0x2371>
ffffffff80213aa8:	49 39 cd             	cmp    %rcx,%r13
ffffffff80213aab:	0f 84 ca 03 00 00    	je     ffffffff80213e7b <_RME_Svc_Handler+0x273b>
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80213ab1:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80213ab8:	ff ff 7f 
ffffffff80213abb:	48 8b 73 30          	mov    0x30(%rbx),%rsi
ffffffff80213abf:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213ac2:	0f 82 18 e0 ff ff    	jb     ffffffff80211ae0 <_RME_Svc_Handler+0x3a0>
                Thd_Dst->Sched.Slice=RME_THD_INF_TIME;
ffffffff80213ac8:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
ffffffff80213acf:	ff ff 7f 
ffffffff80213ad2:	48 89 43 30          	mov    %rax,0x30(%rbx)
    if(Thd_Src->Sched.Slice==0U)
ffffffff80213ad6:	49 8b 46 30          	mov    0x30(%r14),%rax
ffffffff80213ada:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80213ae0:	48 85 c0             	test   %rax,%rax
ffffffff80213ae3:	0f 85 f3 df ff ff    	jne    ffffffff80211adc <_RME_Svc_Handler+0x39c>
ffffffff80213ae9:	e9 e3 df ff ff       	jmp    ffffffff80211ad1 <_RME_Svc_Handler+0x391>
ffffffff80213aee:	66 90                	xchg   %ax,%ax
        if((Option==RME_RCV_BS)||(Option==RME_RCV_BM))
ffffffff80213af0:	49 83 fd 01          	cmp    $0x1,%r13
ffffffff80213af4:	0f 87 ce e7 ff ff    	ja     ffffffff802122c8 <_RME_Svc_Handler+0xb88>
ffffffff80213afa:	f0 48 0f b1 7b 30    	lock cmpxchg %rdi,0x30(%rbx)
ffffffff80213b00:	0f 94 c0             	sete   %al
            if(RME_COMP_SWAP((rme_ptr_t*)&(Sig_Root->Thd),
ffffffff80213b03:	84 c0                	test   %al,%al
ffffffff80213b05:	0f 84 48 02 00 00    	je     ffffffff80213d53 <_RME_Svc_Handler+0x2613>
            Thd_Cur->Sched.Signal=Sig_Root;
ffffffff80213b0b:	48 89 5f 50          	mov    %rbx,0x50(%rdi)
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
ffffffff80213b0f:	48 c7 47 38 01 00 00 	movq   $0x1,0x38(%rdi)
ffffffff80213b16:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80213b17:	e8 e4 b0 ff ff       	call   ffffffff8020ec00 <_RME_Run_Del>
            _RME_Kern_High(Reg,Local);
ffffffff80213b1c:	4c 89 e6             	mov    %r12,%rsi
ffffffff80213b1f:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213b22:	e8 09 da ff ff       	call   ffffffff80211530 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213b27:	e9 c4 dc ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xb0>
ffffffff80213b2c:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80213b30:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213b34:	4c 39 c0             	cmp    %r8,%rax
ffffffff80213b37:	0f 83 88 11 00 00    	jae    ffffffff80214cc5 <_RME_Svc_Handler+0x3585>
ffffffff80213b3d:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80213b44:	ff 00 00 
ffffffff80213b47:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213b4b:	4c 01 c8             	add    %r9,%rax
ffffffff80213b4e:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80213b55:	00 00 00 
ffffffff80213b58:	48 8b 38             	mov    (%rax),%rdi
ffffffff80213b5b:	49 89 fa             	mov    %rdi,%r10
ffffffff80213b5e:	4d 21 c2             	and    %r8,%r10
ffffffff80213b61:	4d 39 ca             	cmp    %r9,%r10
ffffffff80213b64:	74 3b                	je     ffffffff80213ba1 <_RME_Svc_Handler+0x2461>
ffffffff80213b66:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213b6a:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213b6e:	0f 85 43 ec ff ff    	jne    ffffffff802127b7 <_RME_Svc_Handler+0x1077>
ffffffff80213b74:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff80213b78:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80213b7e:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80213b81:	0f 83 3e 11 00 00    	jae    ffffffff80214cc5 <_RME_Svc_Handler+0x3585>
ffffffff80213b87:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80213b8b:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff80213b8f:	48 89 f0             	mov    %rsi,%rax
ffffffff80213b92:	48 8b 36             	mov    (%rsi),%rsi
ffffffff80213b95:	49 21 f0             	and    %rsi,%r8
ffffffff80213b98:	4d 39 c8             	cmp    %r9,%r8
ffffffff80213b9b:	0f 85 94 e1 ff ff    	jne    ffffffff80211d35 <_RME_Svc_Handler+0x5f5>
ffffffff80213ba1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213ba8:	e9 cd e8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80213bad:	0f 1f 00             	nopl   (%rax)
        _RME_Run_Del(Thread);
ffffffff80213bb0:	48 89 df             	mov    %rbx,%rdi
ffffffff80213bb3:	e8 48 b0 ff ff       	call   ffffffff8020ec00 <_RME_Run_Del>
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80213bb8:	48 c7 43 38 02 00 00 	movq   $0x2,0x38(%rbx)
ffffffff80213bbf:	00 
ffffffff80213bc0:	e9 2e e4 ff ff       	jmp    ffffffff80211ff3 <_RME_Svc_Handler+0x8b3>
ffffffff80213bc5:	0f 1f 00             	nopl   (%rax)
    switch(Option)
ffffffff80213bc8:	49 83 fd 03          	cmp    $0x3,%r13
ffffffff80213bcc:	0f 85 c0 01 00 00    	jne    ffffffff80213d92 <_RME_Svc_Handler+0x2652>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NM);
ffffffff80213bd2:	f6 43 10 10          	testb  $0x10,0x10(%rbx)
ffffffff80213bd6:	0f 85 ca e5 ff ff    	jne    ffffffff802121a6 <_RME_Svc_Handler+0xa66>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff80213bdc:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213be3:	e9 92 e8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80213be8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80213bef:	00 
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80213bf0:	49 8b 44 24 20       	mov    0x20(%r12),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80213bf5:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80213bf9:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80213bfd:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80213c00:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80213c04:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80213c09:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80213c0d:	49 8b 7c 04 08       	mov    0x8(%r12,%rax,1),%rdi
        Local->Thd_Cur=_RME_Run_High(Local);
ffffffff80213c12:	49 89 7c 24 08       	mov    %rdi,0x8(%r12)
        _RME_Run_Ins(Local->Thd_Cur);
ffffffff80213c17:	e8 64 b0 ff ff       	call   ffffffff8020ec80 <_RME_Run_Ins>
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff80213c1c:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
ffffffff80213c21:	48 89 de             	mov    %rbx,%rsi
ffffffff80213c24:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213c27:	e8 34 d0 ff ff       	call   ffffffff80210c60 <_RME_Run_Swt.isra.0>
ffffffff80213c2c:	e9 d5 e3 ff ff       	jmp    ffffffff80212006 <_RME_Svc_Handler+0x8c6>
ffffffff80213c31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213c38:	4c 89 ea             	mov    %r13,%rdx
ffffffff80213c3b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213c3f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213c42:	0f 83 65 10 00 00    	jae    ffffffff80214cad <_RME_Svc_Handler+0x356d>
ffffffff80213c48:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213c4f:	ff 00 00 
ffffffff80213c52:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213c56:	49 03 54 24 18       	add    0x18(%r12),%rdx
ffffffff80213c5b:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80213c62:	00 00 00 
ffffffff80213c65:	48 8b 02             	mov    (%rdx),%rax
ffffffff80213c68:	48 89 c7             	mov    %rax,%rdi
ffffffff80213c6b:	48 21 cf             	and    %rcx,%rdi
ffffffff80213c6e:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80213c71:	74 3a                	je     ffffffff80213cad <_RME_Svc_Handler+0x256d>
ffffffff80213c73:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213c77:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213c7b:	0f 85 8d 0f 00 00    	jne    ffffffff80214c0e <_RME_Svc_Handler+0x34ce>
ffffffff80213c81:	4c 89 e8             	mov    %r13,%rax
ffffffff80213c84:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80213c88:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213c8d:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213c90:	0f 83 17 10 00 00    	jae    ffffffff80214cad <_RME_Svc_Handler+0x356d>
ffffffff80213c96:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213c9a:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213c9e:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213ca1:	48 21 d1             	and    %rdx,%rcx
ffffffff80213ca4:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80213ca7:	0f 85 c0 db ff ff    	jne    ffffffff8021186d <_RME_Svc_Handler+0x12d>
ffffffff80213cad:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213cb4:	e9 c1 e7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80213cb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time);
ffffffff80213cc0:	4c 03 6b 30          	add    0x30(%rbx),%r13
ffffffff80213cc4:	0f 82 2f 10 00 00    	jb     ffffffff80214cf9 <_RME_Svc_Handler+0x35b9>
ffffffff80213cca:	4c 39 ea             	cmp    %r13,%rdx
ffffffff80213ccd:	0f 82 26 10 00 00    	jb     ffffffff80214cf9 <_RME_Svc_Handler+0x35b9>
            Thd_Dst->Sched.Slice+=Time;
ffffffff80213cd3:	4c 89 6b 30          	mov    %r13,0x30(%rbx)
    if(Thd_Src->Sched.Slice==0U)
ffffffff80213cd7:	49 8b 46 30          	mov    0x30(%r14),%rax
ffffffff80213cdb:	e9 00 fe ff ff       	jmp    ffffffff80213ae0 <_RME_Svc_Handler+0x23a0>
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80213ce0:	48 8b 4b 30          	mov    0x30(%rbx),%rcx
            if(Thd_Src->Sched.Slice>Time)
ffffffff80213ce4:	49 39 c5             	cmp    %rax,%r13
ffffffff80213ce7:	4c 0f 47 e8          	cmova  %rax,%r13
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80213ceb:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80213cee:	72 1e                	jb     ffffffff80213d0e <_RME_Svc_Handler+0x25ce>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80213cf0:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80213cf7:	ff ff 7f 
ffffffff80213cfa:	4c 01 e9             	add    %r13,%rcx
ffffffff80213cfd:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213d00:	0f 82 f3 0f 00 00    	jb     ffffffff80214cf9 <_RME_Svc_Handler+0x35b9>
            Thd_Dst->Sched.Slice+=Time_Xfer;
ffffffff80213d06:	48 89 4b 30          	mov    %rcx,0x30(%rbx)
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff80213d0a:	49 8b 46 30          	mov    0x30(%r14),%rax
ffffffff80213d0e:	4c 29 e8             	sub    %r13,%rax
ffffffff80213d11:	49 89 46 30          	mov    %rax,0x30(%r14)
ffffffff80213d15:	e9 c6 fd ff ff       	jmp    ffffffff80213ae0 <_RME_Svc_Handler+0x23a0>
ffffffff80213d1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NS);
ffffffff80213d20:	f6 43 10 08          	testb  $0x8,0x10(%rbx)
ffffffff80213d24:	0f 85 7c e4 ff ff    	jne    ffffffff802121a6 <_RME_Svc_Handler+0xa66>
ffffffff80213d2a:	e9 ad fe ff ff       	jmp    ffffffff80213bdc <_RME_Svc_Handler+0x249c>
ffffffff80213d2f:	90                   	nop
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff80213d30:	f6 43 10 02          	testb  $0x2,0x10(%rbx)
ffffffff80213d34:	0f 85 6c e4 ff ff    	jne    ffffffff802121a6 <_RME_Svc_Handler+0xa66>
ffffffff80213d3a:	e9 9d fe ff ff       	jmp    ffffffff80213bdc <_RME_Svc_Handler+0x249c>
ffffffff80213d3f:	90                   	nop
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80213d40:	31 d2                	xor    %edx,%edx
ffffffff80213d42:	f0 48 0f b1 53 28    	lock cmpxchg %rdx,0x28(%rbx)
ffffffff80213d48:	0f 94 c2             	sete   %dl
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff80213d4b:	84 d2                	test   %dl,%dl
ffffffff80213d4d:	0f 85 69 e3 ff ff    	jne    ffffffff802120bc <_RME_Svc_Handler+0x97c>
                return RME_ERR_SIV_CONFLICT;
ffffffff80213d53:	48 c7 c6 cf fe ff ff 	mov    $0xfffffffffffffecf,%rsi
ffffffff80213d5a:	e9 1b e7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80213d5f:	49 c7 44 24 38 02 00 	movq   $0x2,0x38(%r12)
ffffffff80213d66:	00 00 
            _RME_Run_Notif(Thread);
ffffffff80213d68:	4c 89 e7             	mov    %r12,%rdi
ffffffff80213d6b:	e8 90 d9 ff ff       	call   ffffffff80211700 <_RME_Run_Notif>
        _RME_Kern_High(Reg,Local);
ffffffff80213d70:	e9 8b e1 ff ff       	jmp    ffffffff80211f00 <_RME_Svc_Handler+0x7c0>
            _RME_Run_Del(Thd_Src);
ffffffff80213d75:	4c 89 f7             	mov    %r14,%rdi
ffffffff80213d78:	e8 83 ae ff ff       	call   ffffffff8020ec00 <_RME_Run_Del>
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
ffffffff80213d7d:	49 c7 46 38 02 00 00 	movq   $0x2,0x38(%r14)
ffffffff80213d84:	00 
            _RME_Run_Notif(Thd_Src);
ffffffff80213d85:	4c 89 f7             	mov    %r14,%rdi
ffffffff80213d88:	e8 73 d9 ff ff       	call   ffffffff80211700 <_RME_Run_Notif>
ffffffff80213d8d:	e9 4a dd ff ff       	jmp    ffffffff80211adc <_RME_Svc_Handler+0x39c>
            return RME_ERR_SIV_ACT;
ffffffff80213d92:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff80213d99:	e9 dc e6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        __RME_Svc_Retval_Set(&(Thread->Ctx.Reg->Reg),RME_ERR_SIV_FREE);
ffffffff80213d9e:	48 8b bb 90 00 00 00 	mov    0x90(%rbx),%rdi
ffffffff80213da5:	48 c7 c6 ce fe ff ff 	mov    $0xfffffffffffffece,%rsi
ffffffff80213dac:	e8 8f 7c 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
        Thread->Sched.Signal->Thd=RME_NULL;
ffffffff80213db1:	48 8b 43 50          	mov    0x50(%rbx),%rax
ffffffff80213db5:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80213dbc:	00 
        Thread->Sched.Signal=RME_NULL;
ffffffff80213dbd:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
ffffffff80213dc4:	00 
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80213dc5:	48 c7 43 38 02 00 00 	movq   $0x2,0x38(%rbx)
ffffffff80213dcc:	00 
ffffffff80213dcd:	e9 21 e2 ff ff       	jmp    ffffffff80211ff3 <_RME_Svc_Handler+0x8b3>
        __RME_Svc_Retval_Set(Reg,0);
ffffffff80213dd2:	31 f6                	xor    %esi,%esi
ffffffff80213dd4:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213dd7:	e8 64 7c 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
        __RME_Svc_Retval_Set(&(Thd_Rcv->Ctx.Reg->Reg),1);
ffffffff80213ddc:	49 8b bd 90 00 00 00 	mov    0x90(%r13),%rdi
ffffffff80213de3:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213de8:	e8 53 7c 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
        if(Thd_Rcv->Sched.Slice!=0U)
ffffffff80213ded:	49 83 7d 30 00       	cmpq   $0x0,0x30(%r13)
ffffffff80213df2:	74 61                	je     ffffffff80213e55 <_RME_Svc_Handler+0x2715>
            Thd_Rcv->Sched.State=RME_THD_READY;
ffffffff80213df4:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
ffffffff80213dfb:	00 
            _RME_Run_Ins(Thd_Rcv);
ffffffff80213dfc:	4c 89 ef             	mov    %r13,%rdi
ffffffff80213dff:	e8 7c ae ff ff       	call   ffffffff8020ec80 <_RME_Run_Ins>
        _RME_Kern_High(Reg,Local);
ffffffff80213e04:	4c 89 e6             	mov    %r12,%rsi
ffffffff80213e07:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213e0a:	e8 21 d7 ff ff       	call   ffffffff80211530 <_RME_Kern_High>
        Sig_Root->Thd=RME_NULL;
ffffffff80213e0f:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff80213e16:	00 
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213e17:	e9 d4 d9 ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xb0>
            Thd_Cur->Sched.Slice=0U;
ffffffff80213e1c:	49 c7 47 30 00 00 00 	movq   $0x0,0x30(%r15)
ffffffff80213e23:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80213e24:	4c 89 ff             	mov    %r15,%rdi
ffffffff80213e27:	e8 d4 ad ff ff       	call   ffffffff8020ec00 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80213e2c:	49 c7 47 38 02 00 00 	movq   $0x2,0x38(%r15)
ffffffff80213e33:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff80213e34:	4c 89 ff             	mov    %r15,%rdi
ffffffff80213e37:	e8 c4 d8 ff ff       	call   ffffffff80211700 <_RME_Run_Notif>
ffffffff80213e3c:	e9 08 e7 ff ff       	jmp    ffffffff80212549 <_RME_Svc_Handler+0xe09>
            Time_Xfer=Thd_Src->Sched.Slice;
ffffffff80213e41:	49 89 c5             	mov    %rax,%r13
ffffffff80213e44:	e9 a7 fe ff ff       	jmp    ffffffff80213cf0 <_RME_Svc_Handler+0x25b0>
        return RME_ERR_SIV_ACT;
ffffffff80213e49:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff80213e50:	e9 25 e6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
ffffffff80213e55:	49 c7 45 38 02 00 00 	movq   $0x2,0x38(%r13)
ffffffff80213e5c:	00 
            _RME_Run_Notif(Thd_Rcv);
ffffffff80213e5d:	4c 89 ef             	mov    %r13,%rdi
ffffffff80213e60:	e8 9b d8 ff ff       	call   ffffffff80211700 <_RME_Run_Notif>
ffffffff80213e65:	eb 9d                	jmp    ffffffff80213e04 <_RME_Svc_Handler+0x26c4>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80213e67:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213e6e:	e9 07 e6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
                Thd_New=Thd_High;
ffffffff80213e73:	49 89 c4             	mov    %rax,%r12
ffffffff80213e76:	e9 ef e6 ff ff       	jmp    ffffffff8021256a <_RME_Svc_Handler+0xe2a>
                    Thd_Src->Sched.Slice=0U;
ffffffff80213e7b:	49 c7 46 30 00 00 00 	movq   $0x0,0x30(%r14)
ffffffff80213e82:	00 
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80213e83:	48 3b 53 30          	cmp    0x30(%rbx),%rdx
ffffffff80213e87:	0f 83 3b fc ff ff    	jae    ffffffff80213ac8 <_RME_Svc_Handler+0x2388>
ffffffff80213e8d:	e9 3f dc ff ff       	jmp    ffffffff80211ad1 <_RME_Svc_Handler+0x391>
        return RME_ERR_PTH_INVSTATE;
ffffffff80213e92:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213e99:	e9 dc e5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80213e9e:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213ea5:	e9 d0 e5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213eaa:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213eb1:	e9 c4 e5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213eb6:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213ebd:	e9 b8 e5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80213ec2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213ec9:	e9 ac e5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            _RME_Run_Del(Thread[Count]);
ffffffff80213ece:	48 89 df             	mov    %rbx,%rdi
ffffffff80213ed1:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff80213ed6:	e8 25 ad ff ff       	call   ffffffff8020ec00 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80213edb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            _RME_Run_Ins(Thread[Count]);
ffffffff80213ee0:	48 89 df             	mov    %rbx,%rdi
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80213ee3:	48 89 43 40          	mov    %rax,0x40(%rbx)
            _RME_Run_Ins(Thread[Count]);
ffffffff80213ee7:	e8 94 ad ff ff       	call   ffffffff8020ec80 <_RME_Run_Ins>
    for(Count=0U;Count<Number;Count++)
ffffffff80213eec:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff80213ef1:	e9 9c de ff ff       	jmp    ffffffff80211d92 <_RME_Svc_Handler+0x652>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80213ef6:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213efd:	e9 78 e5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80213f02:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213f09:	e9 6c e5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_CPT_FLAG;
ffffffff80213f0e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213f15:	e9 a2 e1 ff ff       	jmp    ffffffff802120bc <_RME_Svc_Handler+0x97c>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80213f1a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213f21:	e9 96 e1 ff ff       	jmp    ffffffff802120bc <_RME_Svc_Handler+0x97c>
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80213f26:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213f2d:	e9 48 e5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            _RME_Run_Del(Thread[Count]);
ffffffff80213f32:	48 89 df             	mov    %rbx,%rdi
ffffffff80213f35:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff80213f3a:	e8 c1 ac ff ff       	call   ffffffff8020ec00 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80213f3f:	4c 89 63 40          	mov    %r12,0x40(%rbx)
            _RME_Run_Ins(Thread[Count]);
ffffffff80213f43:	48 89 df             	mov    %rbx,%rdi
ffffffff80213f46:	e8 35 ad ff ff       	call   ffffffff8020ec80 <_RME_Run_Ins>
ffffffff80213f4b:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff80213f50:	e9 51 de ff ff       	jmp    ffffffff80211da6 <_RME_Svc_Handler+0x666>
        return RME_ERR_PTH_INVSTATE;
ffffffff80213f55:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213f5c:	e9 19 e5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_PTH_INVSTATE;
ffffffff80213f61:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff80213f68:	e9 0d e5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff80213f6d:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213f74:	e9 01 e5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213f79:	48 89 c1             	mov    %rax,%rcx
ffffffff80213f7c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80213f80:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213f83:	0f 83 08 17 00 00    	jae    ffffffff80215691 <_RME_Svc_Handler+0x3f51>
ffffffff80213f89:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213f90:	00 00 00 
ffffffff80213f93:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80213f97:	48 01 f1             	add    %rsi,%rcx
ffffffff80213f9a:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80213fa1:	ff 00 00 
ffffffff80213fa4:	48 8b 39             	mov    (%rcx),%rdi
ffffffff80213fa7:	49 89 f9             	mov    %rdi,%r9
ffffffff80213faa:	49 21 f1             	and    %rsi,%r9
ffffffff80213fad:	4d 39 c1             	cmp    %r8,%r9
ffffffff80213fb0:	0f 84 cf 16 00 00    	je     ffffffff80215685 <_RME_Svc_Handler+0x3f45>
ffffffff80213fb6:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213fba:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213fbe:	0f 85 b5 16 00 00    	jne    ffffffff80215679 <_RME_Svc_Handler+0x3f39>
ffffffff80213fc4:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff80213fc8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213fcd:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213fd0:	0f 83 97 16 00 00    	jae    ffffffff8021566d <_RME_Svc_Handler+0x3f2d>
ffffffff80213fd6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213fda:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80213fde:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213fe1:	48 21 ce             	and    %rcx,%rsi
ffffffff80213fe4:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80213fe7:	0f 84 74 16 00 00    	je     ffffffff80215661 <_RME_Svc_Handler+0x3f21>
ffffffff80213fed:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213ff1:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213ff5:	0f 84 44 f1 ff ff    	je     ffffffff8021313f <_RME_Svc_Handler+0x19ff>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213ffb:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214002:	e9 73 e4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214007:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021400e:	00 00 
ffffffff80214010:	48 89 c2             	mov    %rax,%rdx
ffffffff80214013:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214017:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021401a:	0f 83 b1 15 00 00    	jae    ffffffff802155d1 <_RME_Svc_Handler+0x3e91>
ffffffff80214020:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80214027:	00 00 00 
ffffffff8021402a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021402e:	48 01 ca             	add    %rcx,%rdx
ffffffff80214031:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80214038:	ff 00 00 
ffffffff8021403b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8021403e:	49 89 f1             	mov    %rsi,%r9
ffffffff80214041:	49 21 c9             	and    %rcx,%r9
ffffffff80214044:	4d 39 c1             	cmp    %r8,%r9
ffffffff80214047:	0f 84 78 15 00 00    	je     ffffffff802155c5 <_RME_Svc_Handler+0x3e85>
ffffffff8021404d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80214051:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80214055:	0f 85 5e 15 00 00    	jne    ffffffff802155b9 <_RME_Svc_Handler+0x3e79>
ffffffff8021405b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8021405f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214064:	48 39 f0             	cmp    %rsi,%rax
ffffffff80214067:	0f 83 40 15 00 00    	jae    ffffffff802155ad <_RME_Svc_Handler+0x3e6d>
ffffffff8021406d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214071:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80214075:	48 8b 10             	mov    (%rax),%rdx
ffffffff80214078:	48 21 d1             	and    %rdx,%rcx
ffffffff8021407b:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8021407e:	0f 84 05 15 00 00    	je     ffffffff80215589 <_RME_Svc_Handler+0x3e49>
ffffffff80214084:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80214088:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021408c:	0f 84 ac f7 ff ff    	je     ffffffff8021383e <_RME_Svc_Handler+0x20fe>
ffffffff80214092:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214099:	e9 dc e3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021409e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff802140a0:	48 89 c1             	mov    %rax,%rcx
ffffffff802140a3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802140a7:	4c 39 c1             	cmp    %r8,%rcx
ffffffff802140aa:	0f 83 41 16 00 00    	jae    ffffffff802156f1 <_RME_Svc_Handler+0x3fb1>
ffffffff802140b0:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff802140b7:	ff 00 00 
ffffffff802140ba:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802140be:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff802140c5:	00 00 00 
ffffffff802140c8:	48 01 f9             	add    %rdi,%rcx
ffffffff802140cb:	4c 8b 19             	mov    (%rcx),%r11
ffffffff802140ce:	4c 89 db             	mov    %r11,%rbx
ffffffff802140d1:	4c 21 cb             	and    %r9,%rbx
ffffffff802140d4:	4c 39 d3             	cmp    %r10,%rbx
ffffffff802140d7:	0f 84 08 16 00 00    	je     ffffffff802156e5 <_RME_Svc_Handler+0x3fa5>
ffffffff802140dd:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff802140e1:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff802140e5:	0f 85 ee 15 00 00    	jne    ffffffff802156d9 <_RME_Svc_Handler+0x3f99>
ffffffff802140eb:	4c 8b 59 28          	mov    0x28(%rcx),%r11
ffffffff802140ef:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802140f4:	4c 39 d8             	cmp    %r11,%rax
ffffffff802140f7:	0f 83 d0 15 00 00    	jae    ffffffff802156cd <_RME_Svc_Handler+0x3f8d>
ffffffff802140fd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214101:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80214105:	48 89 c3             	mov    %rax,%rbx
ffffffff80214108:	48 8b 00             	mov    (%rax),%rax
ffffffff8021410b:	49 21 c1             	and    %rax,%r9
ffffffff8021410e:	4d 39 d1             	cmp    %r10,%r9
ffffffff80214111:	0f 84 aa 15 00 00    	je     ffffffff802156c1 <_RME_Svc_Handler+0x3f81>
ffffffff80214117:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021411b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021411f:	0f 84 95 f4 ff ff    	je     ffffffff802135ba <_RME_Svc_Handler+0x1e7a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214125:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021412c:	e9 49 e3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214131:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214138:	48 89 c2             	mov    %rax,%rdx
ffffffff8021413b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021413f:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80214142:	0f 83 db 0e 00 00    	jae    ffffffff80215023 <_RME_Svc_Handler+0x38e3>
ffffffff80214148:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021414f:	00 00 00 
ffffffff80214152:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80214156:	48 01 ca             	add    %rcx,%rdx
ffffffff80214159:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80214160:	ff 00 00 
ffffffff80214163:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80214166:	49 89 f0             	mov    %rsi,%r8
ffffffff80214169:	49 21 c8             	and    %rcx,%r8
ffffffff8021416c:	49 39 f8             	cmp    %rdi,%r8
ffffffff8021416f:	0f 84 a2 0e 00 00    	je     ffffffff80215017 <_RME_Svc_Handler+0x38d7>
ffffffff80214175:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80214179:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021417d:	0f 85 88 0e 00 00    	jne    ffffffff8021500b <_RME_Svc_Handler+0x38cb>
ffffffff80214183:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80214187:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021418c:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021418f:	0f 83 6a 0e 00 00    	jae    ffffffff80214fff <_RME_Svc_Handler+0x38bf>
ffffffff80214195:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214199:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021419d:	48 8b 10             	mov    (%rax),%rdx
ffffffff802141a0:	48 21 d1             	and    %rdx,%rcx
ffffffff802141a3:	48 39 f9             	cmp    %rdi,%rcx
ffffffff802141a6:	0f 84 eb 0f 00 00    	je     ffffffff80215197 <_RME_Svc_Handler+0x3a57>
ffffffff802141ac:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802141b0:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802141b4:	0f 84 7c f5 ff ff    	je     ffffffff80213736 <_RME_Svc_Handler+0x1ff6>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802141ba:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802141c1:	e9 b4 e2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802141c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff802141cd:	00 00 00 
            _RME_Run_Del(Thread[Count]);
ffffffff802141d0:	48 89 df             	mov    %rbx,%rdi
ffffffff802141d3:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff802141d8:	e8 23 aa ff ff       	call   ffffffff8020ec00 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff802141dd:	4c 89 73 40          	mov    %r14,0x40(%rbx)
            _RME_Run_Ins(Thread[Count]);
ffffffff802141e1:	48 89 df             	mov    %rbx,%rdi
ffffffff802141e4:	e8 97 aa ff ff       	call   ffffffff8020ec80 <_RME_Run_Ins>
ffffffff802141e9:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff802141ee:	e9 cd db ff ff       	jmp    ffffffff80211dc0 <_RME_Svc_Handler+0x680>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802141f3:	48 89 c1             	mov    %rax,%rcx
ffffffff802141f6:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802141fa:	48 39 f9             	cmp    %rdi,%rcx
ffffffff802141fd:	0f 83 98 12 00 00    	jae    ffffffff8021549b <_RME_Svc_Handler+0x3d5b>
ffffffff80214203:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8021420a:	ff 00 00 
ffffffff8021420d:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80214211:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80214218:	00 00 00 
ffffffff8021421b:	48 01 f1             	add    %rsi,%rcx
ffffffff8021421e:	4c 8b 09             	mov    (%rcx),%r9
ffffffff80214221:	4d 89 cb             	mov    %r9,%r11
ffffffff80214224:	4d 21 c3             	and    %r8,%r11
ffffffff80214227:	4d 39 d3             	cmp    %r10,%r11
ffffffff8021422a:	0f 84 5f 12 00 00    	je     ffffffff8021548f <_RME_Svc_Handler+0x3d4f>
ffffffff80214230:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff80214234:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff80214238:	0f 85 45 12 00 00    	jne    ffffffff80215483 <_RME_Svc_Handler+0x3d43>
ffffffff8021423e:	4c 8b 49 28          	mov    0x28(%rcx),%r9
ffffffff80214242:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214247:	4c 39 c8             	cmp    %r9,%rax
ffffffff8021424a:	0f 83 27 12 00 00    	jae    ffffffff80215477 <_RME_Svc_Handler+0x3d37>
ffffffff80214250:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214254:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80214258:	48 89 c1             	mov    %rax,%rcx
ffffffff8021425b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021425e:	49 21 c0             	and    %rax,%r8
ffffffff80214261:	4d 39 d0             	cmp    %r10,%r8
ffffffff80214264:	0f 84 01 12 00 00    	je     ffffffff8021546b <_RME_Svc_Handler+0x3d2b>
ffffffff8021426a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021426e:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214272:	0f 84 80 ed ff ff    	je     ffffffff80212ff8 <_RME_Svc_Handler+0x18b8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214278:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021427f:	e9 f6 e1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214284:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214288:	48 89 c1             	mov    %rax,%rcx
ffffffff8021428b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021428f:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80214292:	0f 83 d9 12 00 00    	jae    ffffffff80215571 <_RME_Svc_Handler+0x3e31>
ffffffff80214298:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8021429f:	00 00 00 
ffffffff802142a2:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802142a6:	48 01 f1             	add    %rsi,%rcx
ffffffff802142a9:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802142b0:	ff 00 00 
ffffffff802142b3:	48 8b 39             	mov    (%rcx),%rdi
ffffffff802142b6:	49 89 f9             	mov    %rdi,%r9
ffffffff802142b9:	49 21 f1             	and    %rsi,%r9
ffffffff802142bc:	4d 39 c1             	cmp    %r8,%r9
ffffffff802142bf:	0f 84 a0 12 00 00    	je     ffffffff80215565 <_RME_Svc_Handler+0x3e25>
ffffffff802142c5:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff802142c9:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff802142cd:	0f 85 86 12 00 00    	jne    ffffffff80215559 <_RME_Svc_Handler+0x3e19>
ffffffff802142d3:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff802142d7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802142dc:	48 39 f8             	cmp    %rdi,%rax
ffffffff802142df:	0f 83 68 12 00 00    	jae    ffffffff8021554d <_RME_Svc_Handler+0x3e0d>
ffffffff802142e5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802142e9:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff802142ed:	48 8b 08             	mov    (%rax),%rcx
ffffffff802142f0:	48 21 ce             	and    %rcx,%rsi
ffffffff802142f3:	4c 39 c6             	cmp    %r8,%rsi
ffffffff802142f6:	0f 84 3b 14 00 00    	je     ffffffff80215737 <_RME_Svc_Handler+0x3ff7>
ffffffff802142fc:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80214300:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80214304:	0f 84 37 e9 ff ff    	je     ffffffff80212c41 <_RME_Svc_Handler+0x1501>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021430a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214311:	e9 64 e1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214316:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021431d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214320:	48 89 c1             	mov    %rax,%rcx
ffffffff80214323:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80214327:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021432a:	0f 83 ef 0a 00 00    	jae    ffffffff80214e1f <_RME_Svc_Handler+0x36df>
ffffffff80214330:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80214337:	00 00 00 
ffffffff8021433a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021433e:	48 01 f1             	add    %rsi,%rcx
ffffffff80214341:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80214348:	ff 00 00 
ffffffff8021434b:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8021434e:	49 89 f9             	mov    %rdi,%r9
ffffffff80214351:	49 21 f1             	and    %rsi,%r9
ffffffff80214354:	4d 39 c1             	cmp    %r8,%r9
ffffffff80214357:	0f 84 b6 0a 00 00    	je     ffffffff80214e13 <_RME_Svc_Handler+0x36d3>
ffffffff8021435d:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80214361:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80214365:	0f 85 9c 0a 00 00    	jne    ffffffff80214e07 <_RME_Svc_Handler+0x36c7>
ffffffff8021436b:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8021436f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214374:	48 39 f8             	cmp    %rdi,%rax
ffffffff80214377:	0f 83 7e 0a 00 00    	jae    ffffffff80214dfb <_RME_Svc_Handler+0x36bb>
ffffffff8021437d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214381:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80214385:	48 8b 08             	mov    (%rax),%rcx
ffffffff80214388:	48 21 ce             	and    %rcx,%rsi
ffffffff8021438b:	4c 39 c6             	cmp    %r8,%rsi
ffffffff8021438e:	0f 84 43 0a 00 00    	je     ffffffff80214dd7 <_RME_Svc_Handler+0x3697>
ffffffff80214394:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80214398:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021439c:	0f 84 7f e4 ff ff    	je     ffffffff80212821 <_RME_Svc_Handler+0x10e1>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802143a2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802143a9:	e9 cc e0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802143ae:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff802143b0:	48 89 c7             	mov    %rax,%rdi
ffffffff802143b3:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff802143b7:	4c 39 cf             	cmp    %r9,%rdi
ffffffff802143ba:	0f 83 53 0d 00 00    	jae    ffffffff80215113 <_RME_Svc_Handler+0x39d3>
ffffffff802143c0:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff802143c7:	ff 00 00 
ffffffff802143ca:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff802143ce:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff802143d5:	00 00 00 
ffffffff802143d8:	4c 01 c7             	add    %r8,%rdi
ffffffff802143db:	48 8b 1f             	mov    (%rdi),%rbx
ffffffff802143de:	49 89 dc             	mov    %rbx,%r12
ffffffff802143e1:	4d 21 d4             	and    %r10,%r12
ffffffff802143e4:	4d 39 dc             	cmp    %r11,%r12
ffffffff802143e7:	0f 84 1a 0d 00 00    	je     ffffffff80215107 <_RME_Svc_Handler+0x39c7>
ffffffff802143ed:	48 c1 eb 30          	shr    $0x30,%rbx
ffffffff802143f1:	48 83 fb 03          	cmp    $0x3,%rbx
ffffffff802143f5:	0f 85 00 0d 00 00    	jne    ffffffff802150fb <_RME_Svc_Handler+0x39bb>
ffffffff802143fb:	48 8b 5f 28          	mov    0x28(%rdi),%rbx
ffffffff802143ff:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff80214405:	48 39 d9             	cmp    %rbx,%rcx
ffffffff80214408:	0f 83 e1 0c 00 00    	jae    ffffffff802150ef <_RME_Svc_Handler+0x39af>
ffffffff8021440e:	4c 8b 67 18          	mov    0x18(%rdi),%r12
ffffffff80214412:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80214416:	49 01 cc             	add    %rcx,%r12
ffffffff80214419:	49 8b 0c 24          	mov    (%r12),%rcx
ffffffff8021441d:	49 21 ca             	and    %rcx,%r10
ffffffff80214420:	4d 39 da             	cmp    %r11,%r10
ffffffff80214423:	0f 84 a2 0c 00 00    	je     ffffffff802150cb <_RME_Svc_Handler+0x398b>
ffffffff80214429:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021442d:	48 83 f9 04          	cmp    $0x4,%rcx
ffffffff80214431:	0f 84 4a ef ff ff    	je     ffffffff80213381 <_RME_Svc_Handler+0x1c41>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214437:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021443e:	e9 37 e0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214443:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff80214448:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021444f:	e9 26 e0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80214454:	48 89 c1             	mov    %rax,%rcx
ffffffff80214457:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021445b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021445e:	0f 83 23 14 00 00    	jae    ffffffff80215887 <_RME_Svc_Handler+0x4147>
ffffffff80214464:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8021446b:	ff 00 00 
ffffffff8021446e:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80214472:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80214479:	00 00 00 
ffffffff8021447c:	48 01 f1             	add    %rsi,%rcx
ffffffff8021447f:	4c 8b 09             	mov    (%rcx),%r9
ffffffff80214482:	4d 89 cb             	mov    %r9,%r11
ffffffff80214485:	4d 21 c3             	and    %r8,%r11
ffffffff80214488:	4d 39 d3             	cmp    %r10,%r11
ffffffff8021448b:	0f 84 ea 13 00 00    	je     ffffffff8021587b <_RME_Svc_Handler+0x413b>
ffffffff80214491:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff80214495:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff80214499:	0f 85 d0 13 00 00    	jne    ffffffff8021586f <_RME_Svc_Handler+0x412f>
ffffffff8021449f:	4c 8b 49 28          	mov    0x28(%rcx),%r9
ffffffff802144a3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802144a8:	4c 39 c8             	cmp    %r9,%rax
ffffffff802144ab:	0f 83 b2 13 00 00    	jae    ffffffff80215863 <_RME_Svc_Handler+0x4123>
ffffffff802144b1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802144b5:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff802144b9:	48 89 c1             	mov    %rax,%rcx
ffffffff802144bc:	48 8b 00             	mov    (%rax),%rax
ffffffff802144bf:	49 21 c0             	and    %rax,%r8
ffffffff802144c2:	4d 39 d0             	cmp    %r10,%r8
ffffffff802144c5:	0f 84 8c 13 00 00    	je     ffffffff80215857 <_RME_Svc_Handler+0x4117>
ffffffff802144cb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802144cf:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802144d3:	0f 84 1e e9 ff ff    	je     ffffffff80212df7 <_RME_Svc_Handler+0x16b7>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802144d9:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802144e0:	e9 95 df ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802144e5:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802144e8:	48 89 c1             	mov    %rax,%rcx
ffffffff802144eb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802144ef:	48 39 f9             	cmp    %rdi,%rcx
ffffffff802144f2:	0f 83 fb 0a 00 00    	jae    ffffffff80214ff3 <_RME_Svc_Handler+0x38b3>
ffffffff802144f8:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802144ff:	00 00 00 
ffffffff80214502:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80214506:	48 01 f1             	add    %rsi,%rcx
ffffffff80214509:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80214510:	ff 00 00 
ffffffff80214513:	48 8b 39             	mov    (%rcx),%rdi
ffffffff80214516:	49 89 f9             	mov    %rdi,%r9
ffffffff80214519:	49 21 f1             	and    %rsi,%r9
ffffffff8021451c:	4d 39 c1             	cmp    %r8,%r9
ffffffff8021451f:	0f 84 c2 0a 00 00    	je     ffffffff80214fe7 <_RME_Svc_Handler+0x38a7>
ffffffff80214525:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80214529:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021452d:	0f 85 a8 0a 00 00    	jne    ffffffff80214fdb <_RME_Svc_Handler+0x389b>
ffffffff80214533:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff80214537:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021453c:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021453f:	0f 83 8a 0a 00 00    	jae    ffffffff80214fcf <_RME_Svc_Handler+0x388f>
ffffffff80214545:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214549:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8021454d:	48 8b 08             	mov    (%rax),%rcx
ffffffff80214550:	48 21 ce             	and    %rcx,%rsi
ffffffff80214553:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80214556:	0f 84 67 0a 00 00    	je     ffffffff80214fc3 <_RME_Svc_Handler+0x3883>
ffffffff8021455c:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80214560:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80214564:	0f 84 f7 e4 ff ff    	je     ffffffff80212a61 <_RME_Svc_Handler+0x1321>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021456a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214571:	e9 04 df ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214576:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021457d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214580:	48 89 c1             	mov    %rax,%rcx
ffffffff80214583:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80214587:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021458a:	0f 83 e3 08 00 00    	jae    ffffffff80214e73 <_RME_Svc_Handler+0x3733>
ffffffff80214590:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80214597:	00 00 00 
ffffffff8021459a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021459e:	48 01 f1             	add    %rsi,%rcx
ffffffff802145a1:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802145a8:	ff 00 00 
ffffffff802145ab:	48 8b 39             	mov    (%rcx),%rdi
ffffffff802145ae:	49 89 f9             	mov    %rdi,%r9
ffffffff802145b1:	49 21 f1             	and    %rsi,%r9
ffffffff802145b4:	4d 39 c1             	cmp    %r8,%r9
ffffffff802145b7:	0f 84 aa 08 00 00    	je     ffffffff80214e67 <_RME_Svc_Handler+0x3727>
ffffffff802145bd:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff802145c1:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff802145c5:	0f 85 90 08 00 00    	jne    ffffffff80214e5b <_RME_Svc_Handler+0x371b>
ffffffff802145cb:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff802145cf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802145d4:	48 39 f8             	cmp    %rdi,%rax
ffffffff802145d7:	0f 83 72 08 00 00    	jae    ffffffff80214e4f <_RME_Svc_Handler+0x370f>
ffffffff802145dd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802145e1:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff802145e5:	48 8b 08             	mov    (%rax),%rcx
ffffffff802145e8:	48 21 ce             	and    %rcx,%rsi
ffffffff802145eb:	4c 39 c6             	cmp    %r8,%rsi
ffffffff802145ee:	0f 84 4f 08 00 00    	je     ffffffff80214e43 <_RME_Svc_Handler+0x3703>
ffffffff802145f4:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802145f8:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802145fc:	0f 84 f2 e8 ff ff    	je     ffffffff80212ef4 <_RME_Svc_Handler+0x17b4>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214602:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214609:	e9 6c de ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021460e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff80214610:	48 89 c1             	mov    %rax,%rcx
ffffffff80214613:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80214617:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021461a:	0f 83 13 0c 00 00    	jae    ffffffff80215233 <_RME_Svc_Handler+0x3af3>
ffffffff80214620:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80214627:	00 00 00 
ffffffff8021462a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021462e:	48 01 f1             	add    %rsi,%rcx
ffffffff80214631:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80214638:	ff 00 00 
ffffffff8021463b:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8021463e:	49 89 f9             	mov    %rdi,%r9
ffffffff80214641:	49 21 f1             	and    %rsi,%r9
ffffffff80214644:	4d 39 c1             	cmp    %r8,%r9
ffffffff80214647:	0f 84 da 0b 00 00    	je     ffffffff80215227 <_RME_Svc_Handler+0x3ae7>
ffffffff8021464d:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80214651:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80214655:	0f 85 c0 0b 00 00    	jne    ffffffff8021521b <_RME_Svc_Handler+0x3adb>
ffffffff8021465b:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8021465f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214664:	48 39 f8             	cmp    %rdi,%rax
ffffffff80214667:	0f 83 a2 0b 00 00    	jae    ffffffff8021520f <_RME_Svc_Handler+0x3acf>
ffffffff8021466d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214671:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80214675:	48 8b 08             	mov    (%rax),%rcx
ffffffff80214678:	48 21 ce             	and    %rcx,%rsi
ffffffff8021467b:	4c 39 c6             	cmp    %r8,%rsi
ffffffff8021467e:	0f 84 7f 0b 00 00    	je     ffffffff80215203 <_RME_Svc_Handler+0x3ac3>
ffffffff80214684:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80214688:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021468c:	0f 84 ec eb ff ff    	je     ffffffff8021327e <_RME_Svc_Handler+0x1b3e>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214692:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214699:	e9 dc dd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021469e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802146a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802146a3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802146a7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802146aa:	0f 83 83 08 00 00    	jae    ffffffff80214f33 <_RME_Svc_Handler+0x37f3>
ffffffff802146b0:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802146b7:	00 00 00 
ffffffff802146ba:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802146be:	48 01 ca             	add    %rcx,%rdx
ffffffff802146c1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802146c8:	ff 00 00 
ffffffff802146cb:	48 8b 32             	mov    (%rdx),%rsi
ffffffff802146ce:	49 89 f0             	mov    %rsi,%r8
ffffffff802146d1:	49 21 c8             	and    %rcx,%r8
ffffffff802146d4:	49 39 f8             	cmp    %rdi,%r8
ffffffff802146d7:	0f 84 4a 08 00 00    	je     ffffffff80214f27 <_RME_Svc_Handler+0x37e7>
ffffffff802146dd:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802146e1:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802146e5:	0f 85 30 08 00 00    	jne    ffffffff80214f1b <_RME_Svc_Handler+0x37db>
ffffffff802146eb:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff802146ef:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802146f4:	48 39 f0             	cmp    %rsi,%rax
ffffffff802146f7:	0f 83 12 08 00 00    	jae    ffffffff80214f0f <_RME_Svc_Handler+0x37cf>
ffffffff802146fd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214701:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80214705:	48 8b 10             	mov    (%rax),%rdx
ffffffff80214708:	48 21 d1             	and    %rdx,%rcx
ffffffff8021470b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021470e:	0f 84 ef 07 00 00    	je     ffffffff80214f03 <_RME_Svc_Handler+0x37c3>
ffffffff80214714:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80214718:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8021471c:	0f 84 14 e4 ff ff    	je     ffffffff80212b36 <_RME_Svc_Handler+0x13f6>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214722:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214729:	e9 4c dd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021472e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff80214730:	48 89 c2             	mov    %rax,%rdx
ffffffff80214733:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214737:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8021473a:	0f 83 73 09 00 00    	jae    ffffffff802150b3 <_RME_Svc_Handler+0x3973>
ffffffff80214740:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80214747:	00 00 00 
ffffffff8021474a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021474e:	48 01 ca             	add    %rcx,%rdx
ffffffff80214751:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80214758:	ff 00 00 
ffffffff8021475b:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff8021475e:	49 89 f9             	mov    %rdi,%r9
ffffffff80214761:	49 21 c9             	and    %rcx,%r9
ffffffff80214764:	4d 39 c1             	cmp    %r8,%r9
ffffffff80214767:	0f 84 3a 09 00 00    	je     ffffffff802150a7 <_RME_Svc_Handler+0x3967>
ffffffff8021476d:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80214771:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80214775:	0f 85 20 09 00 00    	jne    ffffffff8021509b <_RME_Svc_Handler+0x395b>
ffffffff8021477b:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff8021477f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214784:	48 39 f8             	cmp    %rdi,%rax
ffffffff80214787:	0f 83 02 09 00 00    	jae    ffffffff8021508f <_RME_Svc_Handler+0x394f>
ffffffff8021478d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214791:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80214795:	48 8b 10             	mov    (%rax),%rdx
ffffffff80214798:	48 21 d1             	and    %rdx,%rcx
ffffffff8021479b:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8021479e:	0f 84 df 08 00 00    	je     ffffffff80215083 <_RME_Svc_Handler+0x3943>
ffffffff802147a4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802147a8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802147ac:	0f 84 27 ed ff ff    	je     ffffffff802134d9 <_RME_Svc_Handler+0x1d99>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802147b2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802147b9:	e9 bc dc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802147be:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802147c0:	48 89 c1             	mov    %rax,%rcx
ffffffff802147c3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802147c7:	48 39 f9             	cmp    %rdi,%rcx
ffffffff802147ca:	0f 83 a3 09 00 00    	jae    ffffffff80215173 <_RME_Svc_Handler+0x3a33>
ffffffff802147d0:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802147d7:	00 00 00 
ffffffff802147da:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802147de:	48 01 f1             	add    %rsi,%rcx
ffffffff802147e1:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802147e8:	ff 00 00 
ffffffff802147eb:	48 8b 39             	mov    (%rcx),%rdi
ffffffff802147ee:	49 89 f9             	mov    %rdi,%r9
ffffffff802147f1:	49 21 f1             	and    %rsi,%r9
ffffffff802147f4:	4d 39 c1             	cmp    %r8,%r9
ffffffff802147f7:	0f 84 6a 09 00 00    	je     ffffffff80215167 <_RME_Svc_Handler+0x3a27>
ffffffff802147fd:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80214801:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80214805:	0f 85 50 09 00 00    	jne    ffffffff8021515b <_RME_Svc_Handler+0x3a1b>
ffffffff8021480b:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8021480f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214814:	48 39 f8             	cmp    %rdi,%rax
ffffffff80214817:	0f 83 32 09 00 00    	jae    ffffffff8021514f <_RME_Svc_Handler+0x3a0f>
ffffffff8021481d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214821:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80214825:	48 8b 08             	mov    (%rax),%rcx
ffffffff80214828:	48 21 ce             	and    %rcx,%rsi
ffffffff8021482b:	4c 39 c6             	cmp    %r8,%rsi
ffffffff8021482e:	0f 84 0f 09 00 00    	je     ffffffff80215143 <_RME_Svc_Handler+0x3a03>
ffffffff80214834:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80214838:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021483c:	0f 84 2e e1 ff ff    	je     ffffffff80212970 <_RME_Svc_Handler+0x1230>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214842:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214849:	e9 2c dc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021484e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80214850:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214854:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80214857:	0f 83 76 09 00 00    	jae    ffffffff802151d3 <_RME_Svc_Handler+0x3a93>
ffffffff8021485d:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80214864:	00 00 00 
ffffffff80214867:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021486b:	4c 01 c2             	add    %r8,%rdx
ffffffff8021486e:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80214875:	ff 00 00 
ffffffff80214878:	4c 8b 0a             	mov    (%rdx),%r9
ffffffff8021487b:	4d 89 cb             	mov    %r9,%r11
ffffffff8021487e:	4d 21 c3             	and    %r8,%r11
ffffffff80214881:	4d 39 d3             	cmp    %r10,%r11
ffffffff80214884:	0f 84 3d 09 00 00    	je     ffffffff802151c7 <_RME_Svc_Handler+0x3a87>
ffffffff8021488a:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8021488e:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff80214892:	0f 85 23 09 00 00    	jne    ffffffff802151bb <_RME_Svc_Handler+0x3a7b>
ffffffff80214898:	4c 8b 4a 28          	mov    0x28(%rdx),%r9
ffffffff8021489c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802148a1:	4c 39 c8             	cmp    %r9,%rax
ffffffff802148a4:	0f 83 05 09 00 00    	jae    ffffffff802151af <_RME_Svc_Handler+0x3a6f>
ffffffff802148aa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802148ae:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802148b2:	48 8b 10             	mov    (%rax),%rdx
ffffffff802148b5:	49 21 d0             	and    %rdx,%r8
ffffffff802148b8:	4d 39 d0             	cmp    %r10,%r8
ffffffff802148bb:	0f 84 e2 08 00 00    	je     ffffffff802151a3 <_RME_Svc_Handler+0x3a63>
ffffffff802148c1:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802148c5:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff802148c9:	0f 84 9e f0 ff ff    	je     ffffffff8021396d <_RME_Svc_Handler+0x222d>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802148cf:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802148d6:	e9 9f db ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802148db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff802148e0:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802148e7:	e9 8e db ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    Object=RME_CAP_GETOBJ(Cpt_Del,rme_ptr_t);
ffffffff802148ec:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
    Size=RME_CPT_SIZE(Cpt_Del->Entry_Num);
ffffffff802148f0:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff802148f4:	31 d2                	xor    %edx,%edx
ffffffff802148f6:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802148fa:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
ffffffff802148ff:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Cpt_Del,Type_Stat);
ffffffff80214902:	84 d2                	test   %dl,%dl
ffffffff80214904:	0f 84 cd ee ff ff    	je     ffffffff802137d7 <_RME_Svc_Handler+0x2097>
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
ffffffff8021490a:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021490d:	e8 be bf ff ff       	call   ffffffff802108d0 <_RME_Kot_Erase>
    return 0;
ffffffff80214912:	31 f6                	xor    %esi,%esi
ffffffff80214914:	e9 61 db ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214919:	48 89 d0             	mov    %rdx,%rax
ffffffff8021491c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214920:	48 39 f8             	cmp    %rdi,%rax
ffffffff80214923:	0f 83 b2 0a 00 00    	jae    ffffffff802153db <_RME_Svc_Handler+0x3c9b>
ffffffff80214929:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80214930:	00 00 00 
ffffffff80214933:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214937:	48 01 f0             	add    %rsi,%rax
ffffffff8021493a:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80214941:	ff 00 00 
ffffffff80214944:	48 8b 38             	mov    (%rax),%rdi
ffffffff80214947:	49 89 f9             	mov    %rdi,%r9
ffffffff8021494a:	49 21 f1             	and    %rsi,%r9
ffffffff8021494d:	4d 39 c1             	cmp    %r8,%r9
ffffffff80214950:	0f 84 79 0a 00 00    	je     ffffffff802153cf <_RME_Svc_Handler+0x3c8f>
ffffffff80214956:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021495a:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021495e:	0f 85 5f 0a 00 00    	jne    ffffffff802153c3 <_RME_Svc_Handler+0x3c83>
ffffffff80214964:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff80214968:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021496e:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80214971:	0f 83 40 0a 00 00    	jae    ffffffff802153b7 <_RME_Svc_Handler+0x3c77>
ffffffff80214977:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021497b:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff8021497f:	48 8b 02             	mov    (%rdx),%rax
ffffffff80214982:	48 21 c6             	and    %rax,%rsi
ffffffff80214985:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80214988:	0f 84 1d 0a 00 00    	je     ffffffff802153ab <_RME_Svc_Handler+0x3c6b>
ffffffff8021498e:	48 89 c6             	mov    %rax,%rsi
ffffffff80214991:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80214995:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80214999:	0f 84 a5 e4 ff ff    	je     ffffffff80212e44 <_RME_Svc_Handler+0x1704>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021499f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802149a6:	e9 cf da ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802149ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff802149b0:	48 89 d0             	mov    %rdx,%rax
ffffffff802149b3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802149b7:	48 39 f8             	cmp    %rdi,%rax
ffffffff802149ba:	0f 83 67 0e 00 00    	jae    ffffffff80215827 <_RME_Svc_Handler+0x40e7>
ffffffff802149c0:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff802149c7:	ff 00 00 
ffffffff802149ca:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802149ce:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802149d5:	00 00 00 
ffffffff802149d8:	48 01 f0             	add    %rsi,%rax
ffffffff802149db:	48 8b 30             	mov    (%rax),%rsi
ffffffff802149de:	49 89 f1             	mov    %rsi,%r9
ffffffff802149e1:	49 21 f9             	and    %rdi,%r9
ffffffff802149e4:	4d 39 c1             	cmp    %r8,%r9
ffffffff802149e7:	0f 84 2e 0e 00 00    	je     ffffffff8021581b <_RME_Svc_Handler+0x40db>
ffffffff802149ed:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802149f1:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802149f5:	0f 85 14 0e 00 00    	jne    ffffffff8021580f <_RME_Svc_Handler+0x40cf>
ffffffff802149fb:	48 8b 70 28          	mov    0x28(%rax),%rsi
ffffffff802149ff:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff80214a05:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80214a08:	0f 83 f5 0d 00 00    	jae    ffffffff80215803 <_RME_Svc_Handler+0x40c3>
ffffffff80214a0e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80214a12:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff80214a16:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80214a19:	48 21 f7             	and    %rsi,%rdi
ffffffff80214a1c:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80214a1f:	0f 84 ba 0d 00 00    	je     ffffffff802157df <_RME_Svc_Handler+0x409f>
ffffffff80214a25:	48 89 f0             	mov    %rsi,%rax
ffffffff80214a28:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214a2c:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214a30:	0f 84 0f e6 ff ff    	je     ffffffff80213045 <_RME_Svc_Handler+0x1905>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214a36:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214a3d:	e9 38 da ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214a42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80214a48:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a4f:	e9 26 da ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff80214a54:	48 89 d0             	mov    %rdx,%rax
ffffffff80214a57:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214a5b:	4c 39 c0             	cmp    %r8,%rax
ffffffff80214a5e:	0f 83 6f 04 00 00    	jae    ffffffff80214ed3 <_RME_Svc_Handler+0x3793>
ffffffff80214a64:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80214a6b:	00 00 00 
ffffffff80214a6e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214a72:	48 8d 0c 38          	lea    (%rax,%rdi,1),%rcx
ffffffff80214a76:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80214a7d:	ff 00 00 
ffffffff80214a80:	48 8b 01             	mov    (%rcx),%rax
ffffffff80214a83:	49 89 c1             	mov    %rax,%r9
ffffffff80214a86:	49 21 f9             	and    %rdi,%r9
ffffffff80214a89:	4d 39 c1             	cmp    %r8,%r9
ffffffff80214a8c:	0f 84 35 04 00 00    	je     ffffffff80214ec7 <_RME_Svc_Handler+0x3787>
ffffffff80214a92:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214a96:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214a9a:	0f 85 1b 04 00 00    	jne    ffffffff80214ebb <_RME_Svc_Handler+0x377b>
ffffffff80214aa0:	48 89 d0             	mov    %rdx,%rax
ffffffff80214aa3:	48 8b 51 28          	mov    0x28(%rcx),%rdx
ffffffff80214aa7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214aac:	48 39 d0             	cmp    %rdx,%rax
ffffffff80214aaf:	0f 83 fa 03 00 00    	jae    ffffffff80214eaf <_RME_Svc_Handler+0x376f>
ffffffff80214ab5:	4c 8b 61 18          	mov    0x18(%rcx),%r12
ffffffff80214ab9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214abd:	49 01 c4             	add    %rax,%r12
ffffffff80214ac0:	49 8b 04 24          	mov    (%r12),%rax
ffffffff80214ac4:	48 21 c7             	and    %rax,%rdi
ffffffff80214ac7:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80214aca:	0f 84 d3 03 00 00    	je     ffffffff80214ea3 <_RME_Svc_Handler+0x3763>
ffffffff80214ad0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214ad4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214ad8:	0f 84 2b eb ff ff    	je     ffffffff80213609 <_RME_Svc_Handler+0x1ec9>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214ade:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214ae5:	e9 90 d9 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214aea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff80214af0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80214af4:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80214af7:	0f 83 56 05 00 00    	jae    ffffffff80215053 <_RME_Svc_Handler+0x3913>
ffffffff80214afd:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80214b04:	ff 00 00 
ffffffff80214b07:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80214b0b:	4c 01 c2             	add    %r8,%rdx
ffffffff80214b0e:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80214b15:	00 00 00 
ffffffff80214b18:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80214b1b:	49 89 c9             	mov    %rcx,%r9
ffffffff80214b1e:	49 21 f9             	and    %rdi,%r9
ffffffff80214b21:	4d 39 c1             	cmp    %r8,%r9
ffffffff80214b24:	0f 84 1d 05 00 00    	je     ffffffff80215047 <_RME_Svc_Handler+0x3907>
ffffffff80214b2a:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80214b2e:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80214b32:	0f 85 03 05 00 00    	jne    ffffffff8021503b <_RME_Svc_Handler+0x38fb>
ffffffff80214b38:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80214b3c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214b41:	48 39 c8             	cmp    %rcx,%rax
ffffffff80214b44:	0f 83 e5 04 00 00    	jae    ffffffff8021502f <_RME_Svc_Handler+0x38ef>
ffffffff80214b4a:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
ffffffff80214b4e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214b52:	48 01 c3             	add    %rax,%rbx
ffffffff80214b55:	48 8b 03             	mov    (%rbx),%rax
ffffffff80214b58:	48 21 c7             	and    %rax,%rdi
ffffffff80214b5b:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80214b5e:	0f 84 2a 02 00 00    	je     ffffffff80214d8e <_RME_Svc_Handler+0x364e>
ffffffff80214b64:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214b68:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214b6c:	0f 84 5a e8 ff ff    	je     ffffffff802133cc <_RME_Svc_Handler+0x1c8c>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214b72:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214b79:	e9 fc d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214b7e:	66 90                	xchg   %ax,%ax
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80214b80:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80214b87:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
            return RME_ERR_SIV_FULL;
ffffffff80214b8d:	48 c7 c6 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rsi
ffffffff80214b94:	e9 e1 d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80214b99:	31 f6                	xor    %esi,%esi
ffffffff80214b9b:	48 89 ef             	mov    %rbp,%rdi
ffffffff80214b9e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff80214ba3:	e8 98 6e 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff80214ba8:	48 83 7b 38 00       	cmpq   $0x0,0x38(%rbx)
ffffffff80214bad:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff80214bb2:	0f 84 19 01 00 00    	je     ffffffff80214cd1 <_RME_Svc_Handler+0x3591>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80214bb8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80214bbd:	48 89 43 40          	mov    %rax,0x40(%rbx)
    for(Count=0U;Count<Number;Count++)
ffffffff80214bc1:	e9 fa d1 ff ff       	jmp    ffffffff80211dc0 <_RME_Svc_Handler+0x680>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80214bc6:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214bcd:	e9 a8 d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80214bd2:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214bd9:	e9 9c d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80214bde:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214be5:	e9 90 d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            return RME_ERR_PTH_INVSTATE;
ffffffff80214bea:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80214bf1:	e9 84 d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80214bf6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214bfd:	e9 ba d4 ff ff       	jmp    ffffffff802120bc <_RME_Svc_Handler+0x97c>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80214c02:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c09:	e9 6c d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80214c0e:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c15:	e9 60 d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff80214c1a:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff80214c1f:	4c 89 e7             	mov    %r12,%rdi
ffffffff80214c22:	e8 a9 bc ff ff       	call   ffffffff802108d0 <_RME_Kot_Erase>
    return 0;
ffffffff80214c27:	31 f6                	xor    %esi,%esi
ffffffff80214c29:	e9 4c d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80214c2e:	31 c9                	xor    %ecx,%ecx
ffffffff80214c30:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80214c35:	0f 94 c1             	sete   %cl
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff80214c38:	80 f9 01             	cmp    $0x1,%cl
ffffffff80214c3b:	48 19 f6             	sbb    %rsi,%rsi
ffffffff80214c3e:	e9 37 d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            return RME_ERR_PTH_PRIO;
ffffffff80214c43:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff80214c4a:	e9 2b d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80214c4f:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214c56:	e9 1f d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff80214c5b:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff80214c62:	e9 13 d8 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        Flag=RME_THD_EXCPEND_FLAG;
ffffffff80214c67:	48 b8 00 00 00 00 00 	movabs $0x6000000000000000,%rax
ffffffff80214c6e:	00 00 60 
ffffffff80214c71:	48 83 7b 20 00       	cmpq   $0x0,0x20(%rbx)
ffffffff80214c76:	48 ba 00 00 00 00 00 	movabs $0x4000000000000000,%rdx
ffffffff80214c7d:	00 00 40 
ffffffff80214c80:	48 0f 45 c2          	cmovne %rdx,%rax
ffffffff80214c84:	e9 10 df ff ff       	jmp    ffffffff80212b99 <_RME_Svc_Handler+0x1459>
            return RME_ERR_PTH_PRIO;
ffffffff80214c89:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff80214c90:	e9 e5 d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_PTH_REFCNT;
ffffffff80214c95:	48 c7 c6 32 ff ff ff 	mov    $0xffffffffffffff32,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80214c9c:	e9 d9 d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_PTH_INVSTATE;
ffffffff80214ca1:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff80214ca8:	e9 cd d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80214cad:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214cb4:	e9 c1 d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_PTH_PRIO;
ffffffff80214cb9:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff80214cc0:	e9 b5 d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80214cc5:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80214ccc:	e9 a9 d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
            _RME_Run_Del(Thread[Count]);
ffffffff80214cd1:	48 89 df             	mov    %rbx,%rdi
ffffffff80214cd4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff80214cd9:	e8 22 9f ff ff       	call   ffffffff8020ec00 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80214cde:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            _RME_Run_Ins(Thread[Count]);
ffffffff80214ce3:	48 89 df             	mov    %rbx,%rdi
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80214ce6:	48 89 43 40          	mov    %rax,0x40(%rbx)
            _RME_Run_Ins(Thread[Count]);
ffffffff80214cea:	e8 91 9f ff ff       	call   ffffffff8020ec80 <_RME_Run_Ins>
    for(Count=0U;Count<Number;Count++)
ffffffff80214cef:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff80214cf4:	e9 c7 d0 ff ff       	jmp    ffffffff80211dc0 <_RME_Svc_Handler+0x680>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80214cf9:	48 c7 c6 30 ff ff ff 	mov    $0xffffffffffffff30,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80214d00:	e9 75 d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_SIV_BOOT;
ffffffff80214d05:	48 c7 c6 cd fe ff ff 	mov    $0xfffffffffffffecd,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80214d0c:	e9 69 d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff80214d11:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214d18:	e9 5d d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_PGT_ADDR;
ffffffff80214d1d:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff80214d24:	e9 51 d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        RME_CAP_DEFROST(Thd_Del,Type_Stat);
ffffffff80214d29:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff80214d30:	00 ff ff 
ffffffff80214d33:	48 21 c2             	and    %rax,%rdx
ffffffff80214d36:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80214d3b:	0f 94 c2             	sete   %dl
        return RME_ERR_PTH_INVSTATE;
ffffffff80214d3e:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff80214d45:	e9 30 d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214d4a:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214d51:	e9 24 d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        RME_CAP_DEFROST(Inv_Del,Type_Stat);
ffffffff80214d56:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff80214d5d:	00 ff ff 
ffffffff80214d60:	48 21 c2             	and    %rax,%rdx
ffffffff80214d63:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80214d68:	0f 94 c2             	sete   %dl
        return RME_ERR_SIV_ACT;
ffffffff80214d6b:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff80214d72:	e9 03 d7 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        RME_CAP_DEFROST(Sig_Del,Type_Stat);
ffffffff80214d77:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff80214d7e:	00 ff ff 
ffffffff80214d81:	48 21 c1             	and    %rax,%rcx
ffffffff80214d84:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80214d89:	0f 94 c1             	sete   %cl
        return RME_ERR_SIV_ACT;
ffffffff80214d8c:	eb dd                	jmp    ffffffff80214d6b <_RME_Svc_Handler+0x362b>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214d8e:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214d95:	e9 e0 d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff80214d9a:	85 c0                	test   %eax,%eax
ffffffff80214d9c:	75 15                	jne    ffffffff80214db3 <_RME_Svc_Handler+0x3673>
ffffffff80214d9e:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff80214da5:	00 ff ff 
ffffffff80214da8:	48 21 c2             	and    %rax,%rdx
ffffffff80214dab:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
ffffffff80214db0:	0f 94 c2             	sete   %dl
ffffffff80214db3:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
ffffffff80214dba:	e9 bb d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_CPT_QUIE;
ffffffff80214dbf:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff80214dc6:	e9 af d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_PTH_NOTIF;
ffffffff80214dcb:	48 c7 c6 31 ff ff ff 	mov    $0xffffffffffffff31,%rsi
ffffffff80214dd2:	e9 a3 d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214dd7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214dde:	e9 97 d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214de3:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214dea:	e9 8b d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214def:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214df6:	e9 7f d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214dfb:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214e02:	e9 73 d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214e07:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214e0e:	e9 67 d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214e13:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214e1a:	e9 5b d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214e1f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214e26:	e9 4f d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214e2b:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214e32:	e9 43 d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214e37:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214e3e:	e9 37 d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214e43:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214e4a:	e9 2b d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214e4f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214e56:	e9 1f d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214e5b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214e62:	e9 13 d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214e67:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214e6e:	e9 07 d6 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214e73:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214e7a:	e9 fb d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214e7f:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214e86:	e9 ef d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214e8b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214e92:	e9 e3 d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214e97:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214e9e:	e9 d7 d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214ea3:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214eaa:	e9 cb d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214eaf:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214eb6:	e9 bf d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214ebb:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214ec2:	e9 b3 d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214ec7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ece:	e9 a7 d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214ed3:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214eda:	e9 9b d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214edf:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214ee6:	e9 8f d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214eeb:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ef2:	e9 83 d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214ef7:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214efe:	e9 77 d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214f03:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214f0a:	e9 6b d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214f0f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214f16:	e9 5f d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214f1b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214f22:	e9 53 d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214f27:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214f2e:	e9 47 d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214f33:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214f3a:	e9 3b d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_PGT_ADDR;
ffffffff80214f3f:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff80214f46:	e9 2f d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214f4b:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214f52:	e9 23 d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214f57:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214f5e:	e9 17 d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214f63:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214f6a:	e9 0b d5 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214f6f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214f76:	e9 ff d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214f7b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214f82:	e9 f3 d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214f87:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214f8e:	e9 e7 d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214f93:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214f9a:	e9 db d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214f9f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214fa6:	e9 cf d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214fab:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214fb2:	e9 c3 d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214fb7:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214fbe:	e9 b7 d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214fc3:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214fca:	e9 ab d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214fcf:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214fd6:	e9 9f d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214fdb:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214fe2:	e9 93 d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214fe7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214fee:	e9 87 d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214ff3:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214ffa:	e9 7b d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80214fff:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215006:	e9 6f d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021500b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215012:	e9 63 d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215017:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021501e:	e9 57 d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215023:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021502a:	e9 4b d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021502f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215036:	e9 3f d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021503b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215042:	e9 33 d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215047:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021504e:	e9 27 d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215053:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021505a:	e9 1b d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021505f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215066:	e9 0f d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021506b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215072:	e9 03 d4 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215077:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021507e:	e9 f7 d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215083:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021508a:	e9 eb d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021508f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215096:	e9 df d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021509b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802150a2:	e9 d3 d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802150a7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802150ae:	e9 c7 d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802150b3:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802150ba:	e9 bb d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802150bf:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802150c6:	e9 af d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802150cb:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802150d2:	e9 a3 d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802150d7:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802150de:	e9 97 d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802150e3:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802150ea:	e9 8b d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802150ef:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802150f6:	e9 7f d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802150fb:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215102:	e9 73 d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215107:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021510e:	e9 67 d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215113:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021511a:	e9 5b d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021511f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215126:	e9 4f d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021512b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215132:	e9 43 d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215137:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021513e:	e9 37 d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215143:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021514a:	e9 2b d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021514f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215156:	e9 1f d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021515b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215162:	e9 13 d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215167:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021516e:	e9 07 d3 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215173:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021517a:	e9 fb d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021517f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215186:	e9 ef d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff8021518b:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80215192:	e9 e3 d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80215197:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021519e:	e9 d7 d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802151a3:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802151aa:	e9 cb d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802151af:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802151b6:	e9 bf d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802151bb:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802151c2:	e9 b3 d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802151c7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802151ce:	e9 a7 d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802151d3:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802151da:	e9 9b d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802151df:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802151e6:	e9 8f d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802151eb:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802151f2:	e9 83 d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802151f7:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802151fe:	e9 77 d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215203:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021520a:	e9 6b d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021520f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215216:	e9 5f d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021521b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215222:	e9 53 d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215227:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021522e:	e9 47 d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215233:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021523a:	e9 3b d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8021523f:	85 c0                	test   %eax,%eax
ffffffff80215241:	0f 85 6c fb ff ff    	jne    ffffffff80214db3 <_RME_Svc_Handler+0x3673>
ffffffff80215247:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff8021524e:	00 ff ff 
ffffffff80215251:	48 21 c2             	and    %rax,%rdx
ffffffff80215254:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80215259:	0f 94 c2             	sete   %dl
	return (rme_ptr_t)Zero;
ffffffff8021525c:	e9 52 fb ff ff       	jmp    ffffffff80214db3 <_RME_Svc_Handler+0x3673>
        return RME_ERR_CPT_QUIE;
ffffffff80215261:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff80215268:	e9 0d d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021526d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215274:	e9 01 d2 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215279:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215280:	e9 f5 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215285:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021528c:	e9 e9 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80215291:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80215298:	e9 dd d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021529d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802152a4:	e9 d1 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802152a9:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802152b0:	e9 c5 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802152b5:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802152bc:	e9 b9 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802152c1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802152c8:	e9 ad d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802152cd:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802152d4:	e9 a1 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802152d9:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802152e0:	e9 95 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802152e5:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802152ec:	e9 89 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802152f1:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802152f8:	e9 7d d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802152fd:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215304:	e9 71 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215309:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215310:	e9 65 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80215315:	85 c0                	test   %eax,%eax
ffffffff80215317:	0f 85 96 fa ff ff    	jne    ffffffff80214db3 <_RME_Svc_Handler+0x3673>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021531d:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80215322:	48 c1 e1 33          	shl    $0x33,%rcx
ffffffff80215326:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021532b:	0f 94 c1             	sete   %cl
	return (rme_ptr_t)Zero;
ffffffff8021532e:	e9 80 fa ff ff       	jmp    ffffffff80214db3 <_RME_Svc_Handler+0x3673>
        return RME_ERR_CPT_QUIE;
ffffffff80215333:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff8021533a:	e9 3b d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021533f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215346:	e9 2f d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021534b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215352:	e9 23 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215357:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021535e:	e9 17 d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215363:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021536a:	e9 0b d1 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021536f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215376:	e9 ff d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff8021537b:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80215382:	e9 f3 d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80215387:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021538e:	e9 e7 d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215393:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021539a:	e9 db d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021539f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802153a6:	e9 cf d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802153ab:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802153b2:	e9 c3 d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802153b7:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802153be:	e9 b7 d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802153c3:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802153ca:	e9 ab d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802153cf:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802153d6:	e9 9f d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802153db:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802153e2:	e9 93 d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802153e7:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802153ee:	e9 87 d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802153f3:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802153fa:	e9 7b d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802153ff:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215406:	e9 6f d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021540b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215412:	e9 63 d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80215417:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021541e:	e9 57 d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215423:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021542a:	e9 4b d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021542f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215436:	e9 3f d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021543b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215442:	e9 33 d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215447:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021544e:	e9 27 d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215453:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021545a:	e9 1b d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021545f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215466:	e9 0f d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021546b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215472:	e9 03 d0 ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215477:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021547e:	e9 f7 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215483:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021548a:	e9 eb cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021548f:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215496:	e9 df cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021549b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802154a2:	e9 d3 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff802154a7:	45 85 e4             	test   %r12d,%r12d
ffffffff802154aa:	0f 85 03 f9 ff ff    	jne    ffffffff80214db3 <_RME_Svc_Handler+0x3673>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802154b0:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802154b5:	4c 89 e0             	mov    %r12,%rax
ffffffff802154b8:	48 c1 e2 32          	shl    $0x32,%rdx
ffffffff802154bc:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff802154c1:	0f 94 c2             	sete   %dl
	return (rme_ptr_t)Zero;
ffffffff802154c4:	e9 ea f8 ff ff       	jmp    ffffffff80214db3 <_RME_Svc_Handler+0x3673>
        return RME_ERR_CPT_QUIE;
ffffffff802154c9:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802154d0:	e9 a5 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802154d5:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802154dc:	e9 99 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802154e1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802154e8:	e9 8d cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_CPT_QUIE;
ffffffff802154ed:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802154f4:	e9 81 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802154f9:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215500:	e9 75 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215505:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021550c:	e9 69 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80215511:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80215518:	e9 5d cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021551d:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80215524:	e9 51 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215529:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80215530:	e9 45 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215535:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021553c:	e9 39 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80215541:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215548:	e9 2d cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021554d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215554:	e9 21 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215559:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215560:	e9 15 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215565:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021556c:	e9 09 cf ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215571:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215578:	e9 fd ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_CPT_QUIE;
ffffffff8021557d:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff80215584:	e9 f1 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80215589:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215590:	e9 e5 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_PGT_ADDR;
ffffffff80215595:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff8021559c:	e9 d9 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802155a1:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802155a8:	e9 cd ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802155ad:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802155b4:	e9 c1 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802155b9:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802155c0:	e9 b5 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802155c5:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802155cc:	e9 a9 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802155d1:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802155d8:	e9 9d ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802155dd:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802155e4:	e9 91 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802155e9:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802155f0:	e9 85 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802155f5:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802155fc:	e9 79 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215601:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215608:	e9 6d ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff8021560d:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80215614:	e9 61 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80215619:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215620:	e9 55 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215625:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021562c:	e9 49 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215631:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215638:	e9 3d ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021563d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215644:	e9 31 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215649:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215650:	e9 25 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215655:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021565c:	e9 19 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215661:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215668:	e9 0d ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021566d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215674:	e9 01 ce ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215679:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215680:	e9 f5 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215685:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021568c:	e9 e9 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215691:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215698:	e9 dd cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_CPT_QUIE;
ffffffff8021569d:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802156a4:	e9 d1 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802156a9:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802156b0:	e9 c5 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802156b5:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802156bc:	e9 b9 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802156c1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802156c8:	e9 ad cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802156cd:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802156d4:	e9 a1 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802156d9:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802156e0:	e9 95 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802156e5:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802156ec:	e9 89 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802156f1:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802156f8:	e9 7d cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff802156fd:	85 c0                	test   %eax,%eax
ffffffff802156ff:	0f 85 ae f6 ff ff    	jne    ffffffff80214db3 <_RME_Svc_Handler+0x3673>
ffffffff80215705:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff8021570c:	00 ff ff 
ffffffff8021570f:	48 21 c1             	and    %rax,%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80215712:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80215717:	0f 94 c1             	sete   %cl
	return (rme_ptr_t)Zero;
ffffffff8021571a:	e9 94 f6 ff ff       	jmp    ffffffff80214db3 <_RME_Svc_Handler+0x3673>
        return RME_ERR_CPT_QUIE;
ffffffff8021571f:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff80215726:	e9 4f cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021572b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215732:	e9 43 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215737:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021573e:	e9 37 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215743:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021574a:	e9 2b cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff8021574f:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80215756:	e9 1f cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021575b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215762:	e9 13 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215767:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021576e:	e9 07 cd ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215773:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021577a:	e9 fb cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021577f:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215786:	e9 ef cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021578b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215792:	e9 e3 cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80215797:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021579e:	e9 d7 cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
        return RME_ERR_PGT_ADDR;
ffffffff802157a3:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff802157aa:	e9 cb cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802157af:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802157b6:	e9 bf cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802157bb:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802157c2:	e9 b3 cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802157c7:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802157ce:	e9 a7 cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff802157d3:	48 c7 c6 f6 ff ff ff 	mov    $0xfffffffffffffff6,%rsi
ffffffff802157da:	e9 9b cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802157df:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802157e6:	e9 8f cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802157eb:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802157f2:	e9 83 cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff802157f7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802157fe:	e9 77 cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215803:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021580a:	e9 6b cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021580f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215816:	e9 5f cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021581b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215822:	e9 53 cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215827:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021582e:	e9 47 cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215833:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021583a:	e9 3b cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021583f:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215846:	e9 2f cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021584b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80215852:	e9 23 cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215857:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021585e:	e9 17 cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215863:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021586a:	e9 0b cc ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021586f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80215876:	e9 ff cb ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff8021587b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80215882:	e9 f3 cb ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215887:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021588e:	e9 e7 cb ff ff       	jmp    ffffffff8021247a <_RME_Svc_Handler+0xd3a>
ffffffff80215893:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021589a:	00 00 00 00 
ffffffff8021589e:	66 90                	xchg   %ax,%ax

ffffffff802158a0 <_RME_Tim_Handler>:
{
ffffffff802158a0:	f3 0f 1e fa          	endbr64
ffffffff802158a4:	41 56                	push   %r14
ffffffff802158a6:	41 55                	push   %r13
ffffffff802158a8:	49 89 f5             	mov    %rsi,%r13
ffffffff802158ab:	41 54                	push   %r12
ffffffff802158ad:	55                   	push   %rbp
ffffffff802158ae:	48 89 fd             	mov    %rdi,%rbp
ffffffff802158b1:	53                   	push   %rbx
    Local=RME_CPU_LOCAL();
ffffffff802158b2:	e8 88 6f ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff802158b7:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff802158be:	ff ff 7f 
    Thd_Cur=Local->Thd_Cur;
ffffffff802158c1:	4c 8b 60 08          	mov    0x8(%rax),%r12
    Local=RME_CPU_LOCAL();
ffffffff802158c5:	48 89 c3             	mov    %rax,%rbx
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff802158c8:	49 8b 44 24 30       	mov    0x30(%r12),%rax
ffffffff802158cd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802158d0:	72 0d                	jb     ffffffff802158df <_RME_Tim_Handler+0x3f>
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff802158d2:	49 39 c5             	cmp    %rax,%r13
ffffffff802158d5:	73 29                	jae    ffffffff80215900 <_RME_Tim_Handler+0x60>
            Thd_Cur->Sched.Slice-=Slice;
ffffffff802158d7:	4c 29 e8             	sub    %r13,%rax
ffffffff802158da:	49 89 44 24 30       	mov    %rax,0x30(%r12)
    _RME_Kern_Snd(Local->Sig_Tim);
ffffffff802158df:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff802158e3:	e8 f8 bc ff ff       	call   ffffffff802115e0 <_RME_Kern_Snd>
    _RME_Kern_High(Reg,Local);
ffffffff802158e8:	48 89 de             	mov    %rbx,%rsi
ffffffff802158eb:	48 89 ef             	mov    %rbp,%rdi
}
ffffffff802158ee:	5b                   	pop    %rbx
ffffffff802158ef:	5d                   	pop    %rbp
ffffffff802158f0:	41 5c                	pop    %r12
ffffffff802158f2:	41 5d                	pop    %r13
ffffffff802158f4:	41 5e                	pop    %r14
    _RME_Kern_High(Reg,Local);
ffffffff802158f6:	e9 35 bc ff ff       	jmp    ffffffff80211530 <_RME_Kern_High>
ffffffff802158fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Thd_Cur->Sched.Slice=0U;
ffffffff80215900:	49 c7 44 24 30 00 00 	movq   $0x0,0x30(%r12)
ffffffff80215907:	00 00 
    Prio=Thd->Sched.Prio;
ffffffff80215909:	4d 8b 6c 24 40       	mov    0x40(%r12),%r13
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021590e:	49 8b 34 24          	mov    (%r12),%rsi
ffffffff80215912:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    Local=Thd->Sched.Local;
ffffffff80215917:	4d 8b 74 24 28       	mov    0x28(%r12),%r14
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021591c:	e8 8f 91 ff ff       	call   ffffffff8020eab0 <_RME_List_Del>
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff80215921:	4c 89 ea             	mov    %r13,%rdx
ffffffff80215924:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80215928:	49 8d 44 16 28       	lea    0x28(%r14,%rdx,1),%rax
ffffffff8021592d:	4a 39 44 32 28       	cmp    %rax,0x28(%rdx,%r14,1)
ffffffff80215932:	74 2c                	je     ffffffff80215960 <_RME_Tim_Handler+0xc0>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80215934:	49 c7 44 24 38 02 00 	movq   $0x2,0x38(%r12)
ffffffff8021593b:	00 00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8021593d:	49 8d 7c 24 10       	lea    0x10(%r12),%rdi
ffffffff80215942:	49 39 7c 24 10       	cmp    %rdi,0x10(%r12)
ffffffff80215947:	74 37                	je     ffffffff80215980 <_RME_Tim_Handler+0xe0>
    if(Thd->Sched.Sched_Sig!=0U)
ffffffff80215949:	49 8b 7c 24 70       	mov    0x70(%r12),%rdi
ffffffff8021594e:	48 85 ff             	test   %rdi,%rdi
ffffffff80215951:	74 8c                	je     ffffffff802158df <_RME_Tim_Handler+0x3f>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80215953:	e8 88 bc ff ff       	call   ffffffff802115e0 <_RME_Kern_Snd>
ffffffff80215958:	eb 85                	jmp    ffffffff802158df <_RME_Tim_Handler+0x3f>
ffffffff8021595a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff80215960:	4c 89 ea             	mov    %r13,%rdx
ffffffff80215963:	44 89 e9             	mov    %r13d,%ecx
ffffffff80215966:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021596b:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff8021596f:	48 d3 e0             	shl    %cl,%rax
ffffffff80215972:	48 f7 d0             	not    %rax
ffffffff80215975:	49 21 44 d6 20       	and    %rax,0x20(%r14,%rdx,8)
ffffffff8021597a:	eb b8                	jmp    ffffffff80215934 <_RME_Tim_Handler+0x94>
ffffffff8021597c:	0f 1f 40 00          	nopl   0x0(%rax)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80215980:	49 8b 44 24 68       	mov    0x68(%r12),%rax
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80215985:	48 8b b0 80 00 00 00 	mov    0x80(%rax),%rsi
ffffffff8021598c:	48 8d 50 78          	lea    0x78(%rax),%rdx
ffffffff80215990:	e8 cb 92 ff ff       	call   ffffffff8020ec60 <_RME_List_Ins>
ffffffff80215995:	eb b2                	jmp    ffffffff80215949 <_RME_Tim_Handler+0xa9>
ffffffff80215997:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021599e:	00 00 

ffffffff802159a0 <_RME_Thd_Fatal>:
{
ffffffff802159a0:	f3 0f 1e fa          	endbr64
ffffffff802159a4:	41 56                	push   %r14
ffffffff802159a6:	41 55                	push   %r13
ffffffff802159a8:	41 54                	push   %r12
ffffffff802159aa:	49 89 fc             	mov    %rdi,%r12
ffffffff802159ad:	55                   	push   %rbp
ffffffff802159ae:	53                   	push   %rbx
    Thread=RME_CPU_LOCAL()->Thd_Cur;
ffffffff802159af:	e8 8b 6e ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
ffffffff802159b4:	48 8b 68 08          	mov    0x8(%rax),%rbp
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff802159b8:	48 8b 9d 98 00 00 00 	mov    0x98(%rbp),%rbx
ffffffff802159bf:	4c 8d ad 98 00 00 00 	lea    0x98(%rbp),%r13
    if(RME_UNLIKELY(Invocation==RME_NULL))
ffffffff802159c6:	4c 39 eb             	cmp    %r13,%rbx
ffffffff802159c9:	74 7d                	je     ffffffff80215a48 <_RME_Thd_Fatal+0xa8>
ffffffff802159cb:	48 85 db             	test   %rbx,%rbx
ffffffff802159ce:	74 78                	je     ffffffff80215a48 <_RME_Thd_Fatal+0xa8>
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff802159d0:	48 83 7b 30 00       	cmpq   $0x0,0x30(%rbx)
ffffffff802159d5:	74 71                	je     ffffffff80215a48 <_RME_Thd_Fatal+0xa8>
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff802159d7:	48 8b 33             	mov    (%rbx),%rsi
ffffffff802159da:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
ffffffff802159de:	e8 cd 90 ff ff       	call   ffffffff8020eab0 <_RME_List_Del>
    Thread->Ctx.Invstk_Depth--;
ffffffff802159e3:	48 83 ad a8 00 00 00 	subq   $0x1,0xa8(%rbp)
ffffffff802159ea:	01 
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff802159eb:	48 8d 73 38          	lea    0x38(%rbx),%rsi
ffffffff802159ef:	4c 89 e7             	mov    %r12,%rdi
ffffffff802159f2:	e8 c9 50 00 00       	call   ffffffff8021aac0 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff802159f7:	31 f6                	xor    %esi,%esi
ffffffff802159f9:	4c 89 e7             	mov    %r12,%rdi
ffffffff802159fc:	e8 af 3c 00 00       	call   ffffffff802196b0 <__RME_Inv_Retval_Set>
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff80215a01:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff80215a08:	00 
        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
ffffffff80215a09:	48 c7 c6 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rsi
ffffffff80215a10:	4c 89 e7             	mov    %r12,%rdi
ffffffff80215a13:	e8 28 60 00 00       	call   ffffffff8021ba40 <__RME_Svc_Retval_Set>
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff80215a18:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Invocation!=RME_NULL)
ffffffff80215a1f:	49 39 c5             	cmp    %rax,%r13
ffffffff80215a22:	74 0c                	je     ffffffff80215a30 <_RME_Thd_Fatal+0x90>
ffffffff80215a24:	48 85 c0             	test   %rax,%rax
ffffffff80215a27:	74 07                	je     ffffffff80215a30 <_RME_Thd_Fatal+0x90>
        __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff80215a29:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215a2d:	eb 05                	jmp    ffffffff80215a34 <_RME_Thd_Fatal+0x94>
ffffffff80215a2f:	90                   	nop
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
ffffffff80215a30:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff80215a34:	48 8b 78 30          	mov    0x30(%rax),%rdi
}
ffffffff80215a38:	5b                   	pop    %rbx
ffffffff80215a39:	5d                   	pop    %rbp
ffffffff80215a3a:	41 5c                	pop    %r12
ffffffff80215a3c:	41 5d                	pop    %r13
ffffffff80215a3e:	41 5e                	pop    %r14
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
ffffffff80215a40:	e9 eb 52 00 00       	jmp    ffffffff8021ad30 <__RME_Pgt_Set>
ffffffff80215a45:	0f 1f 00             	nopl   (%rax)
        Local=RME_CPU_LOCAL();
ffffffff80215a48:	e8 f2 6d ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
        Thd_Cur=Local->Thd_Cur;
ffffffff80215a4d:	48 8b 58 08          	mov    0x8(%rax),%rbx
        Local=RME_CPU_LOCAL();
ffffffff80215a51:	48 89 c5             	mov    %rax,%rbp
        if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80215a54:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80215a5b:	ff ff 7f 
ffffffff80215a5e:	48 39 43 30          	cmp    %rax,0x30(%rbx)
ffffffff80215a62:	74 7c                	je     ffffffff80215ae0 <_RME_Thd_Fatal+0x140>
    Prio=Thd->Sched.Prio;
ffffffff80215a64:	4c 8b 6b 40          	mov    0x40(%rbx),%r13
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80215a68:	48 8b 33             	mov    (%rbx),%rsi
ffffffff80215a6b:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
    Local=Thd->Sched.Local;
ffffffff80215a6f:	4c 8b 73 28          	mov    0x28(%rbx),%r14
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80215a73:	e8 38 90 ff ff       	call   ffffffff8020eab0 <_RME_List_Del>
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff80215a78:	4c 89 ea             	mov    %r13,%rdx
ffffffff80215a7b:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80215a7f:	49 8d 44 16 28       	lea    0x28(%r14,%rdx,1),%rax
ffffffff80215a84:	4a 39 44 32 28       	cmp    %rax,0x28(%rdx,%r14,1)
ffffffff80215a89:	74 35                	je     ffffffff80215ac0 <_RME_Thd_Fatal+0x120>
        Thd_Cur->Sched.State=RME_THD_EXCPEND;
ffffffff80215a8b:	48 c7 43 38 03 00 00 	movq   $0x3,0x38(%rbx)
ffffffff80215a92:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80215a93:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
ffffffff80215a97:	48 39 7b 10          	cmp    %rdi,0x10(%rbx)
ffffffff80215a9b:	74 5b                	je     ffffffff80215af8 <_RME_Thd_Fatal+0x158>
    if(Thd->Sched.Sched_Sig!=0U)
ffffffff80215a9d:	48 8b 7b 70          	mov    0x70(%rbx),%rdi
ffffffff80215aa1:	48 85 ff             	test   %rdi,%rdi
ffffffff80215aa4:	74 05                	je     ffffffff80215aab <_RME_Thd_Fatal+0x10b>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80215aa6:	e8 35 bb ff ff       	call   ffffffff802115e0 <_RME_Kern_Snd>
}
ffffffff80215aab:	5b                   	pop    %rbx
        _RME_Kern_High(Reg,Local);
ffffffff80215aac:	48 89 ee             	mov    %rbp,%rsi
ffffffff80215aaf:	4c 89 e7             	mov    %r12,%rdi
}
ffffffff80215ab2:	5d                   	pop    %rbp
ffffffff80215ab3:	41 5c                	pop    %r12
ffffffff80215ab5:	41 5d                	pop    %r13
ffffffff80215ab7:	41 5e                	pop    %r14
        _RME_Kern_High(Reg,Local);
ffffffff80215ab9:	e9 72 ba ff ff       	jmp    ffffffff80211530 <_RME_Kern_High>
ffffffff80215abe:	66 90                	xchg   %ax,%ax
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff80215ac0:	4c 89 ea             	mov    %r13,%rdx
ffffffff80215ac3:	44 89 e9             	mov    %r13d,%ecx
ffffffff80215ac6:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80215acb:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff80215acf:	48 d3 e0             	shl    %cl,%rax
ffffffff80215ad2:	48 f7 d0             	not    %rax
ffffffff80215ad5:	49 21 44 d6 20       	and    %rax,0x20(%r14,%rdx,8)
ffffffff80215ada:	eb af                	jmp    ffffffff80215a8b <_RME_Thd_Fatal+0xeb>
ffffffff80215adc:	0f 1f 40 00          	nopl   0x0(%rax)
            RME_DBG_S("Attempted to kill init thread.");
ffffffff80215ae0:	48 8d 3d 31 76 00 00 	lea    0x7631(%rip),%rdi        # ffffffff8021d118 <UVM_Init+0x1678>
ffffffff80215ae7:	e8 34 8d ff ff       	call   ffffffff8020e820 <RME_Str_Print>
            RME_ASSERT(0U);
ffffffff80215aec:	e9 73 ff ff ff       	jmp    ffffffff80215a64 <_RME_Thd_Fatal+0xc4>
ffffffff80215af1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80215af8:	48 8b 43 68          	mov    0x68(%rbx),%rax
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80215afc:	48 8b b0 80 00 00 00 	mov    0x80(%rax),%rsi
ffffffff80215b03:	48 8d 50 78          	lea    0x78(%rax),%rdx
ffffffff80215b07:	e8 54 91 ff ff       	call   ffffffff8020ec60 <_RME_List_Ins>
ffffffff80215b0c:	eb 8f                	jmp    ffffffff80215a9d <_RME_Thd_Fatal+0xfd>
ffffffff80215b0e:	66 90                	xchg   %ax,%ax

ffffffff80215b10 <_RME_Kfn_Boot_Crt>:
{
ffffffff80215b10:	f3 0f 1e fa          	endbr64
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80215b14:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff80215b18:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80215b1e:	75 40                	jne    ffffffff80215b60 <_RME_Kfn_Boot_Crt+0x50>
ffffffff80215b20:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80215b23:	0f 83 17 01 00 00    	jae    ffffffff80215c40 <_RME_Kfn_Boot_Crt+0x130>
ffffffff80215b29:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80215b30:	ff 00 00 
ffffffff80215b33:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80215b37:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80215b3b:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80215b42:	00 00 00 
ffffffff80215b45:	48 8b 06             	mov    (%rsi),%rax
ffffffff80215b48:	48 21 c1             	and    %rax,%rcx
ffffffff80215b4b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80215b4e:	75 7e                	jne    ffffffff80215bce <_RME_Kfn_Boot_Crt+0xbe>
ffffffff80215b50:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215b57:	c3                   	ret
ffffffff80215b58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80215b5f:	00 
ffffffff80215b60:	48 89 f0             	mov    %rsi,%rax
ffffffff80215b63:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215b67:	48 39 c8             	cmp    %rcx,%rax
ffffffff80215b6a:	0f 83 d0 00 00 00    	jae    ffffffff80215c40 <_RME_Kfn_Boot_Crt+0x130>
ffffffff80215b70:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80215b77:	00 00 00 
ffffffff80215b7a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215b7e:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80215b82:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80215b89:	ff 00 00 
ffffffff80215b8c:	48 8b 08             	mov    (%rax),%rcx
ffffffff80215b8f:	49 89 c9             	mov    %rcx,%r9
ffffffff80215b92:	49 21 f9             	and    %rdi,%r9
ffffffff80215b95:	4d 39 c1             	cmp    %r8,%r9
ffffffff80215b98:	74 b6                	je     ffffffff80215b50 <_RME_Kfn_Boot_Crt+0x40>
ffffffff80215b9a:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80215b9e:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80215ba2:	0f 85 a8 00 00 00    	jne    ffffffff80215c50 <_RME_Kfn_Boot_Crt+0x140>
ffffffff80215ba8:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80215bac:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80215bb2:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80215bb5:	0f 83 85 00 00 00    	jae    ffffffff80215c40 <_RME_Kfn_Boot_Crt+0x130>
ffffffff80215bbb:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80215bbf:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff80215bc3:	48 8b 06             	mov    (%rsi),%rax
ffffffff80215bc6:	48 21 c7             	and    %rax,%rdi
ffffffff80215bc9:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80215bcc:	74 82                	je     ffffffff80215b50 <_RME_Kfn_Boot_Crt+0x40>
ffffffff80215bce:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215bd2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215bd6:	75 78                	jne    ffffffff80215c50 <_RME_Kfn_Boot_Crt+0x140>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80215bd8:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff80215bdc:	74 7a                	je     ffffffff80215c58 <_RME_Kfn_Boot_Crt+0x148>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kfn,struct RME_Cap_Kfn*,Kfn_Crt);
ffffffff80215bde:	48 3b 56 28          	cmp    0x28(%rsi),%rdx
ffffffff80215be2:	73 5c                	jae    ffffffff80215c40 <_RME_Kfn_Boot_Crt+0x130>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80215be4:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff80215beb:	00 00 00 
ffffffff80215bee:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80215bf2:	31 c0                	xor    %eax,%eax
ffffffff80215bf4:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff80215bf8:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80215bfd:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff80215c00:	84 c9                	test   %cl,%cl
ffffffff80215c02:	74 5c                	je     ffffffff80215c60 <_RME_Kfn_Boot_Crt+0x150>
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff80215c04:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
ffffffff80215c0b:	ff ff ff 
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff80215c0e:	48 c7 42 20 01 00 00 	movq   $0x1,0x20(%rdx)
ffffffff80215c15:	00 
    Kfn_Crt->Head.Root_Ref=1U;
ffffffff80215c16:	48 c7 42 08 01 00 00 	movq   $0x1,0x8(%rdx)
ffffffff80215c1d:	00 
    Kfn_Crt->Head.Object=0U;
ffffffff80215c1e:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff80215c25:	00 
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff80215c26:	48 89 42 10          	mov    %rax,0x10(%rdx)
    RME_WRITE_RELEASE(&(Kfn_Crt->Head.Type_Stat),
ffffffff80215c2a:	48 b8 00 00 00 00 00 	movabs $0x1000000000000,%rax
ffffffff80215c31:	00 01 00 
ffffffff80215c34:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff80215c37:	31 c0                	xor    %eax,%eax
ffffffff80215c39:	c3                   	ret
ffffffff80215c3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80215c40:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215c47:	c3                   	ret
ffffffff80215c48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80215c4f:	00 
ffffffff80215c50:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215c57:	c3                   	ret
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80215c58:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215c5f:	c3                   	ret
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff80215c60:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80215c67:	c3                   	ret
ffffffff80215c68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80215c6f:	00 

ffffffff80215c70 <__RME_X64_CPU_Local_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_CPU_Local_Init(void)
{
ffffffff80215c70:	41 54                	push   %r12
ffffffff80215c72:	55                   	push   %rbp
ffffffff80215c73:	53                   	push   %rbx
ffffffff80215c74:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_CPU_Local* CPU_Local;
    rme_ptr_t* GDT_Table;
    rme_ptr_t TSS_Table;
    rme_cnt_t Count;

    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff80215c78:	48 8b 05 51 28 01 00 	mov    0x12851(%rip),%rax        # ffffffff802284d0 <RME_X64_Layout+0x10>
ffffffff80215c7f:	48 8b 1d 1a 28 01 00 	mov    0x1281a(%rip),%rbx        # ffffffff802284a0 <RME_X64_CPU_Cnt>
ffffffff80215c86:	48 c1 e3 0d          	shl    $0xd,%rbx
ffffffff80215c8a:	48 01 c3             	add    %rax,%rbx
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
ffffffff80215c8d:	48 8d 93 00 10 00 00 	lea    0x1000(%rbx),%rdx
    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff80215c94:	48 89 d8             	mov    %rbx,%rax
ffffffff80215c97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80215c9e:	00 00 
        IDT_Table[Count].Type_Attr=0;
ffffffff80215ca0:	c6 40 05 00          	movb   $0x0,0x5(%rax)
    for(Count=0;Count<256;Count++)
ffffffff80215ca4:	48 83 c0 20          	add    $0x20,%rax
        IDT_Table[Count].Type_Attr=0;
ffffffff80215ca8:	c6 40 f5 00          	movb   $0x0,-0xb(%rax)
    for(Count=0;Count<256;Count++)
ffffffff80215cac:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215caf:	75 ef                	jne    ffffffff80215ca0 <__RME_X64_CPU_Local_Init+0x30>

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215cb1:	48 8b 05 08 86 00 00 	mov    0x8608(%rip),%rax        # ffffffff8021e2c0 <RME_X64_Pgflg_RME2NAT+0xc80>
ffffffff80215cb8:	c7 43 02 08 00 00 8e 	movl   $0x8e000008,0x2(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215cbf:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215cc4:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215cc9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80215cd0:	bf 08 00 00 00       	mov    $0x8,%edi

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80215cd5:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80215cdb:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215ce1:	66 89 03             	mov    %ax,(%rbx)
ffffffff80215ce4:	48 89 c2             	mov    %rax,%rdx
ffffffff80215ce7:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80215ceb:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215cf1:	89 43 08             	mov    %eax,0x8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215cf4:	48 8b 05 3d 86 00 00 	mov    0x863d(%rip),%rax        # ffffffff8021e338 <RME_X64_Pgflg_RME2NAT+0xcf8>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215cfb:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80215cff:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215d05:	66 89 53 06          	mov    %dx,0x6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215d09:	66 89 43 10          	mov    %ax,0x10(%rbx)
ffffffff80215d0d:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d10:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215d14:	89 43 18             	mov    %eax,0x18(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80215d17:	48 8b 05 b2 86 00 00 	mov    0x86b2(%rip),%rax        # ffffffff8021e3d0 <RME_X64_Pgflg_RME2NAT+0xd90>
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215d1e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215d22:	66 89 53 16          	mov    %dx,0x16(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80215d26:	66 89 43 20          	mov    %ax,0x20(%rbx)
ffffffff80215d2a:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d2d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215d31:	89 43 28             	mov    %eax,0x28(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80215d34:	48 8b 05 f5 85 00 00 	mov    0x85f5(%rip),%rax        # ffffffff8021e330 <RME_X64_Pgflg_RME2NAT+0xcf0>
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80215d3b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215d3f:	66 89 53 26          	mov    %dx,0x26(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80215d43:	66 89 43 30          	mov    %ax,0x30(%rbx)
ffffffff80215d47:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d4a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215d4e:	89 43 38             	mov    %eax,0x38(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80215d51:	48 8b 05 b0 87 00 00 	mov    0x87b0(%rip),%rax        # ffffffff8021e508 <RME_X64_Pgflg_RME2NAT+0xec8>
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80215d58:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215d5c:	66 89 53 36          	mov    %dx,0x36(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80215d60:	66 89 43 40          	mov    %ax,0x40(%rbx)
ffffffff80215d64:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d67:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215d6b:	89 43 48             	mov    %eax,0x48(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80215d6e:	48 8b 05 8b 87 00 00 	mov    0x878b(%rip),%rax        # ffffffff8021e500 <RME_X64_Pgflg_RME2NAT+0xec0>
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80215d75:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215d79:	66 89 53 46          	mov    %dx,0x46(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80215d7d:	66 89 43 50          	mov    %ax,0x50(%rbx)
ffffffff80215d81:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d84:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215d88:	c7 43 12 08 00 00 8e 	movl   $0x8e000008,0x12(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80215d8f:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215d93:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80215d9a:	c7 43 22 08 00 00 8e 	movl   $0x8e000008,0x22(%rbx)
ffffffff80215da1:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80215da8:	c7 43 32 08 00 00 ee 	movl   $0xee000008,0x32(%rbx)
ffffffff80215daf:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80215db6:	c7 43 42 08 00 00 8e 	movl   $0x8e000008,0x42(%rbx)
ffffffff80215dbd:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80215dc4:	c7 43 52 08 00 00 8e 	movl   $0x8e000008,0x52(%rbx)
ffffffff80215dcb:	89 43 58             	mov    %eax,0x58(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff80215dce:	48 8b 05 b3 89 00 00 	mov    0x89b3(%rip),%rax        # ffffffff8021e788 <RME_X64_Pgflg_RME2NAT+0x1148>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80215dd5:	66 89 53 56          	mov    %dx,0x56(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff80215dd9:	66 89 43 60          	mov    %ax,0x60(%rbx)
ffffffff80215ddd:	48 89 c2             	mov    %rax,%rdx
ffffffff80215de0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215de4:	89 43 68             	mov    %eax,0x68(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80215de7:	48 8b 05 82 89 00 00 	mov    0x8982(%rip),%rax        # ffffffff8021e770 <RME_X64_Pgflg_RME2NAT+0x1130>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff80215dee:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215df2:	66 89 53 66          	mov    %dx,0x66(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80215df6:	66 89 43 70          	mov    %ax,0x70(%rbx)
ffffffff80215dfa:	48 89 c2             	mov    %rax,%rdx
ffffffff80215dfd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215e01:	89 43 78             	mov    %eax,0x78(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215e04:	48 8b 05 fd 82 00 00 	mov    0x82fd(%rip),%rax        # ffffffff8021e108 <RME_X64_Pgflg_RME2NAT+0xac8>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80215e0b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215e0f:	66 89 53 76          	mov    %dx,0x76(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215e13:	66 89 83 80 00 00 00 	mov    %ax,0x80(%rbx)
ffffffff80215e1a:	48 89 c2             	mov    %rax,%rdx
ffffffff80215e1d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215e21:	89 83 88 00 00 00    	mov    %eax,0x88(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80215e27:	48 8b 05 3a 85 00 00 	mov    0x853a(%rip),%rax        # ffffffff8021e368 <RME_X64_Pgflg_RME2NAT+0xd28>
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215e2e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215e32:	66 89 93 86 00 00 00 	mov    %dx,0x86(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80215e39:	66 89 83 90 00 00 00 	mov    %ax,0x90(%rbx)
ffffffff80215e40:	48 89 c2             	mov    %rax,%rdx
ffffffff80215e43:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215e47:	89 83 98 00 00 00    	mov    %eax,0x98(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80215e4d:	48 8b 05 04 84 00 00 	mov    0x8404(%rip),%rax        # ffffffff8021e258 <RME_X64_Pgflg_RME2NAT+0xc18>
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80215e54:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215e58:	66 89 93 96 00 00 00 	mov    %dx,0x96(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80215e5f:	48 89 c2             	mov    %rax,%rdx
ffffffff80215e62:	66 89 83 a0 00 00 00 	mov    %ax,0xa0(%rbx)
ffffffff80215e69:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215e6d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215e71:	89 83 a8 00 00 00    	mov    %eax,0xa8(%rbx)
ffffffff80215e77:	66 89 93 a6 00 00 00 	mov    %dx,0xa6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80215e7e:	c7 43 5c 00 00 00 00 	movl   $0x0,0x5c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff80215e85:	c7 43 62 08 00 00 8e 	movl   $0x8e000008,0x62(%rbx)
ffffffff80215e8c:	c7 43 6c 00 00 00 00 	movl   $0x0,0x6c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80215e93:	c7 43 72 08 00 00 8e 	movl   $0x8e000008,0x72(%rbx)
ffffffff80215e9a:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215ea1:	c7 83 82 00 00 00 08 	movl   $0x8e000008,0x82(%rbx)
ffffffff80215ea8:	00 00 8e 
ffffffff80215eab:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%rbx)
ffffffff80215eb2:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80215eb5:	c7 83 92 00 00 00 08 	movl   $0x8e000008,0x92(%rbx)
ffffffff80215ebc:	00 00 8e 
ffffffff80215ebf:	c7 83 9c 00 00 00 00 	movl   $0x0,0x9c(%rbx)
ffffffff80215ec6:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80215ec9:	c7 83 a2 00 00 00 08 	movl   $0x8e000008,0xa2(%rbx)
ffffffff80215ed0:	00 00 8e 
ffffffff80215ed3:	c7 83 ac 00 00 00 00 	movl   $0x0,0xac(%rbx)
ffffffff80215eda:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff80215edd:	48 8b 05 3c 88 00 00 	mov    0x883c(%rip),%rax        # ffffffff8021e720 <RME_X64_Pgflg_RME2NAT+0x10e0>
ffffffff80215ee4:	c7 83 b2 00 00 00 08 	movl   $0x8e000008,0xb2(%rbx)
ffffffff80215eeb:	00 00 8e 
ffffffff80215eee:	66 89 83 b0 00 00 00 	mov    %ax,0xb0(%rbx)
ffffffff80215ef5:	48 89 c2             	mov    %rax,%rdx
ffffffff80215ef8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215efc:	89 83 b8 00 00 00    	mov    %eax,0xb8(%rbx)
ffffffff80215f02:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215f06:	48 8b 05 ab 86 00 00 	mov    0x86ab(%rip),%rax        # ffffffff8021e5b8 <RME_X64_Pgflg_RME2NAT+0xf78>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff80215f0d:	66 89 93 b6 00 00 00 	mov    %dx,0xb6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215f14:	66 89 83 c0 00 00 00 	mov    %ax,0xc0(%rbx)
ffffffff80215f1b:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f1e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215f22:	89 83 c8 00 00 00    	mov    %eax,0xc8(%rbx)
ffffffff80215f28:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215f2c:	48 8b 05 ed 86 00 00 	mov    0x86ed(%rip),%rax        # ffffffff8021e620 <RME_X64_Pgflg_RME2NAT+0xfe0>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215f33:	66 89 93 c6 00 00 00 	mov    %dx,0xc6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215f3a:	66 89 83 d0 00 00 00 	mov    %ax,0xd0(%rbx)
ffffffff80215f41:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f44:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215f48:	89 83 d8 00 00 00    	mov    %eax,0xd8(%rbx)
ffffffff80215f4e:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215f52:	48 8b 05 b7 84 00 00 	mov    0x84b7(%rip),%rax        # ffffffff8021e410 <RME_X64_Pgflg_RME2NAT+0xdd0>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215f59:	66 89 93 d6 00 00 00 	mov    %dx,0xd6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215f60:	66 89 83 e0 00 00 00 	mov    %ax,0xe0(%rbx)
ffffffff80215f67:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f6a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215f6e:	89 83 e8 00 00 00    	mov    %eax,0xe8(%rbx)
ffffffff80215f74:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff80215f78:	48 8b 05 49 81 00 00 	mov    0x8149(%rip),%rax        # ffffffff8021e0c8 <RME_X64_Pgflg_RME2NAT+0xa88>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215f7f:	66 89 93 e6 00 00 00 	mov    %dx,0xe6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff80215f86:	66 89 83 00 01 00 00 	mov    %ax,0x100(%rbx)
ffffffff80215f8d:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f90:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215f94:	89 83 08 01 00 00    	mov    %eax,0x108(%rbx)
ffffffff80215f9a:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80215f9e:	48 8b 05 d3 87 00 00 	mov    0x87d3(%rip),%rax        # ffffffff8021e778 <RME_X64_Pgflg_RME2NAT+0x1138>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff80215fa5:	66 89 93 06 01 00 00 	mov    %dx,0x106(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80215fac:	48 89 c2             	mov    %rax,%rdx
ffffffff80215faf:	66 89 83 10 01 00 00 	mov    %ax,0x110(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff80215fb6:	c7 83 bc 00 00 00 00 	movl   $0x0,0xbc(%rbx)
ffffffff80215fbd:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80215fc0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215fc4:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215fc8:	c7 83 c2 00 00 00 08 	movl   $0x8e000008,0xc2(%rbx)
ffffffff80215fcf:	00 00 8e 
ffffffff80215fd2:	c7 83 cc 00 00 00 00 	movl   $0x0,0xcc(%rbx)
ffffffff80215fd9:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215fdc:	c7 83 d2 00 00 00 08 	movl   $0x8e000008,0xd2(%rbx)
ffffffff80215fe3:	00 00 8e 
ffffffff80215fe6:	c7 83 dc 00 00 00 00 	movl   $0x0,0xdc(%rbx)
ffffffff80215fed:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215ff0:	c7 83 e2 00 00 00 08 	movl   $0x8e000008,0xe2(%rbx)
ffffffff80215ff7:	00 00 8e 
ffffffff80215ffa:	c7 83 ec 00 00 00 00 	movl   $0x0,0xec(%rbx)
ffffffff80216001:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff80216004:	c7 83 02 01 00 00 08 	movl   $0x8e000008,0x102(%rbx)
ffffffff8021600b:	00 00 8e 
ffffffff8021600e:	c7 83 0c 01 00 00 00 	movl   $0x0,0x10c(%rbx)
ffffffff80216015:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80216018:	c7 83 12 01 00 00 08 	movl   $0x8e000008,0x112(%rbx)
ffffffff8021601f:	00 00 8e 
ffffffff80216022:	89 83 18 01 00 00    	mov    %eax,0x118(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff80216028:	48 8b 05 39 86 00 00 	mov    0x8639(%rip),%rax        # ffffffff8021e668 <RME_X64_Pgflg_RME2NAT+0x1028>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8021602f:	66 89 93 16 01 00 00 	mov    %dx,0x116(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff80216036:	66 89 83 20 01 00 00 	mov    %ax,0x120(%rbx)
ffffffff8021603d:	48 89 c2             	mov    %rax,%rdx
ffffffff80216040:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216044:	89 83 28 01 00 00    	mov    %eax,0x128(%rbx)
ffffffff8021604a:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021604e:	48 8b 05 fb 7f 00 00 	mov    0x7ffb(%rip),%rax        # ffffffff8021e050 <RME_X64_Pgflg_RME2NAT+0xa10>
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff80216055:	66 89 93 26 01 00 00 	mov    %dx,0x126(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021605c:	66 89 83 30 01 00 00 	mov    %ax,0x130(%rbx)
ffffffff80216063:	48 89 c2             	mov    %rax,%rdx
ffffffff80216066:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021606a:	89 83 38 01 00 00    	mov    %eax,0x138(%rbx)
ffffffff80216070:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80216074:	48 8b 05 e5 82 00 00 	mov    0x82e5(%rip),%rax        # ffffffff8021e360 <RME_X64_Pgflg_RME2NAT+0xd20>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021607b:	66 89 93 36 01 00 00 	mov    %dx,0x136(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80216082:	66 89 83 40 01 00 00 	mov    %ax,0x140(%rbx)
ffffffff80216089:	48 89 c2             	mov    %rax,%rdx
ffffffff8021608c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216090:	89 83 48 01 00 00    	mov    %eax,0x148(%rbx)
ffffffff80216096:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8021609a:	48 8b 05 2f 86 00 00 	mov    0x862f(%rip),%rax        # ffffffff8021e6d0 <RME_X64_Pgflg_RME2NAT+0x1090>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff802160a1:	66 89 93 46 01 00 00 	mov    %dx,0x146(%rbx)
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff802160a8:	48 89 c2             	mov    %rax,%rdx
ffffffff802160ab:	66 89 83 00 02 00 00 	mov    %ax,0x200(%rbx)
ffffffff802160b2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802160b6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802160ba:	89 83 08 02 00 00    	mov    %eax,0x208(%rbx)
ffffffff802160c0:	0f b7 05 79 76 00 00 	movzwl 0x7679(%rip),%eax        # ffffffff8021d740 <RME_X64_Pgflg_RME2NAT+0x100>
ffffffff802160c7:	66 89 93 06 02 00 00 	mov    %dx,0x206(%rbx)
ffffffff802160ce:	48 8b 15 33 86 00 00 	mov    0x8633(%rip),%rdx        # ffffffff8021e708 <RME_X64_Pgflg_RME2NAT+0x10c8>
ffffffff802160d5:	66 89 8b 12 02 00 00 	mov    %cx,0x212(%rbx)
ffffffff802160dc:	48 89 d1             	mov    %rdx,%rcx
ffffffff802160df:	66 89 93 10 02 00 00 	mov    %dx,0x210(%rbx)
ffffffff802160e6:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802160ea:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802160ee:	66 89 83 14 02 00 00 	mov    %ax,0x214(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff802160f5:	c7 83 1c 01 00 00 00 	movl   $0x0,0x11c(%rbx)
ffffffff802160fc:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff802160ff:	c7 83 22 01 00 00 08 	movl   $0x8e000008,0x122(%rbx)
ffffffff80216106:	00 00 8e 
ffffffff80216109:	c7 83 2c 01 00 00 00 	movl   $0x0,0x12c(%rbx)
ffffffff80216110:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff80216113:	c7 83 32 01 00 00 08 	movl   $0x8e000008,0x132(%rbx)
ffffffff8021611a:	00 00 8e 
ffffffff8021611d:	c7 83 3c 01 00 00 00 	movl   $0x0,0x13c(%rbx)
ffffffff80216124:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80216127:	c7 83 42 01 00 00 08 	movl   $0x8e000008,0x142(%rbx)
ffffffff8021612e:	00 00 8e 
ffffffff80216131:	c7 83 4c 01 00 00 00 	movl   $0x0,0x14c(%rbx)
ffffffff80216138:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8021613b:	c7 83 02 02 00 00 08 	movl   $0x8e000008,0x202(%rbx)
ffffffff80216142:	00 00 8e 
ffffffff80216145:	c7 83 0c 02 00 00 00 	movl   $0x0,0x20c(%rbx)
ffffffff8021614c:	00 00 00 
ffffffff8021614f:	66 89 8b 16 02 00 00 	mov    %cx,0x216(%rbx)
ffffffff80216156:	89 93 18 02 00 00    	mov    %edx,0x218(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021615c:	48 8b 15 a5 82 00 00 	mov    0x82a5(%rip),%rdx        # ffffffff8021e408 <RME_X64_Pgflg_RME2NAT+0xdc8>
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80216163:	c7 83 1c 02 00 00 00 	movl   $0x0,0x21c(%rbx)
ffffffff8021616a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021616d:	66 89 93 20 02 00 00 	mov    %dx,0x220(%rbx)
ffffffff80216174:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216177:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021617b:	89 93 28 02 00 00    	mov    %edx,0x228(%rbx)
ffffffff80216181:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216185:	48 8b 15 2c 81 00 00 	mov    0x812c(%rip),%rdx        # ffffffff8021e2b8 <RME_X64_Pgflg_RME2NAT+0xc78>
ffffffff8021618c:	66 89 8b 26 02 00 00 	mov    %cx,0x226(%rbx)
ffffffff80216193:	66 89 93 30 02 00 00 	mov    %dx,0x230(%rbx)
ffffffff8021619a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021619d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802161a1:	89 93 38 02 00 00    	mov    %edx,0x238(%rbx)
ffffffff802161a7:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff802161ab:	48 8b 15 26 83 00 00 	mov    0x8326(%rip),%rdx        # ffffffff8021e4d8 <RME_X64_Pgflg_RME2NAT+0xe98>
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff802161b2:	66 89 8b 36 02 00 00 	mov    %cx,0x236(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff802161b9:	66 89 93 40 02 00 00 	mov    %dx,0x240(%rbx)
ffffffff802161c0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802161c3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802161c7:	89 93 48 02 00 00    	mov    %edx,0x248(%rbx)
ffffffff802161cd:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802161d1:	48 8b 15 d8 81 00 00 	mov    0x81d8(%rip),%rdx        # ffffffff8021e3b0 <RME_X64_Pgflg_RME2NAT+0xd70>
ffffffff802161d8:	66 89 8b 46 02 00 00 	mov    %cx,0x246(%rbx)
ffffffff802161df:	66 89 93 50 02 00 00 	mov    %dx,0x250(%rbx)
ffffffff802161e6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802161e9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802161ed:	89 93 58 02 00 00    	mov    %edx,0x258(%rbx)
ffffffff802161f3:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff802161f7:	48 8b 15 62 80 00 00 	mov    0x8062(%rip),%rdx        # ffffffff8021e260 <RME_X64_Pgflg_RME2NAT+0xc20>
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff802161fe:	66 89 8b 56 02 00 00 	mov    %cx,0x256(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80216205:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216208:	66 89 93 60 02 00 00 	mov    %dx,0x260(%rbx)
ffffffff8021620f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216213:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216217:	89 93 68 02 00 00    	mov    %edx,0x268(%rbx)
ffffffff8021621d:	66 89 8b 66 02 00 00 	mov    %cx,0x266(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff80216224:	c7 83 22 02 00 00 08 	movl   $0x8e000008,0x222(%rbx)
ffffffff8021622b:	00 00 8e 
ffffffff8021622e:	c7 83 2c 02 00 00 00 	movl   $0x0,0x22c(%rbx)
ffffffff80216235:	00 00 00 
ffffffff80216238:	c7 83 32 02 00 00 08 	movl   $0x8e000008,0x232(%rbx)
ffffffff8021623f:	00 00 8e 
ffffffff80216242:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%rbx)
ffffffff80216249:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8021624c:	c7 83 42 02 00 00 08 	movl   $0x8e000008,0x242(%rbx)
ffffffff80216253:	00 00 8e 
ffffffff80216256:	c7 83 4c 02 00 00 00 	movl   $0x0,0x24c(%rbx)
ffffffff8021625d:	00 00 00 
ffffffff80216260:	c7 83 52 02 00 00 08 	movl   $0x8e000008,0x252(%rbx)
ffffffff80216267:	00 00 8e 
ffffffff8021626a:	c7 83 5c 02 00 00 00 	movl   $0x0,0x25c(%rbx)
ffffffff80216271:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80216274:	c7 83 62 02 00 00 08 	movl   $0x8e000008,0x262(%rbx)
ffffffff8021627b:	00 00 8e 
ffffffff8021627e:	c7 83 6c 02 00 00 00 	movl   $0x0,0x26c(%rbx)
ffffffff80216285:	00 00 00 
ffffffff80216288:	48 8b 15 99 83 00 00 	mov    0x8399(%rip),%rdx        # ffffffff8021e628 <RME_X64_Pgflg_RME2NAT+0xfe8>
ffffffff8021628f:	c7 83 72 02 00 00 08 	movl   $0x8e000008,0x272(%rbx)
ffffffff80216296:	00 00 8e 
ffffffff80216299:	66 89 93 70 02 00 00 	mov    %dx,0x270(%rbx)
ffffffff802162a0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802162a3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802162a7:	89 93 78 02 00 00    	mov    %edx,0x278(%rbx)
ffffffff802162ad:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff802162b1:	48 8b 15 78 81 00 00 	mov    0x8178(%rip),%rdx        # ffffffff8021e430 <RME_X64_Pgflg_RME2NAT+0xdf0>
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff802162b8:	66 89 8b 76 02 00 00 	mov    %cx,0x276(%rbx)
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff802162bf:	66 89 93 80 02 00 00 	mov    %dx,0x280(%rbx)
ffffffff802162c6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802162c9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802162cd:	89 93 88 02 00 00    	mov    %edx,0x288(%rbx)
ffffffff802162d3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802162d7:	48 8b 15 da 81 00 00 	mov    0x81da(%rip),%rdx        # ffffffff8021e4b8 <RME_X64_Pgflg_RME2NAT+0xe78>
ffffffff802162de:	66 89 8b 86 02 00 00 	mov    %cx,0x286(%rbx)
ffffffff802162e5:	66 89 93 90 02 00 00 	mov    %dx,0x290(%rbx)
ffffffff802162ec:	48 89 d1             	mov    %rdx,%rcx
ffffffff802162ef:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802162f3:	89 93 98 02 00 00    	mov    %edx,0x298(%rbx)
ffffffff802162f9:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff802162fd:	48 8b 15 ac 84 00 00 	mov    0x84ac(%rip),%rdx        # ffffffff8021e7b0 <RME_X64_Pgflg_RME2NAT+0x1170>
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80216304:	66 89 8b 96 02 00 00 	mov    %cx,0x296(%rbx)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8021630b:	66 89 93 a0 02 00 00 	mov    %dx,0x2a0(%rbx)
ffffffff80216312:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216315:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216319:	89 93 a8 02 00 00    	mov    %edx,0x2a8(%rbx)
ffffffff8021631f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216323:	48 8b 15 1e 83 00 00 	mov    0x831e(%rip),%rdx        # ffffffff8021e648 <RME_X64_Pgflg_RME2NAT+0x1008>
ffffffff8021632a:	66 89 8b a6 02 00 00 	mov    %cx,0x2a6(%rbx)
ffffffff80216331:	66 89 93 b0 02 00 00 	mov    %dx,0x2b0(%rbx)
ffffffff80216338:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021633b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021633f:	89 93 b8 02 00 00    	mov    %edx,0x2b8(%rbx)
ffffffff80216345:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80216349:	48 8b 15 90 81 00 00 	mov    0x8190(%rip),%rdx        # ffffffff8021e4e0 <RME_X64_Pgflg_RME2NAT+0xea0>
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80216350:	66 89 8b b6 02 00 00 	mov    %cx,0x2b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80216357:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021635a:	66 89 93 c0 02 00 00 	mov    %dx,0x2c0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80216361:	c7 83 7c 02 00 00 00 	movl   $0x0,0x27c(%rbx)
ffffffff80216368:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8021636b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021636f:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80216373:	c7 83 82 02 00 00 08 	movl   $0x8e000008,0x282(%rbx)
ffffffff8021637a:	00 00 8e 
ffffffff8021637d:	c7 83 8c 02 00 00 00 	movl   $0x0,0x28c(%rbx)
ffffffff80216384:	00 00 00 
ffffffff80216387:	c7 83 92 02 00 00 08 	movl   $0x8e000008,0x292(%rbx)
ffffffff8021638e:	00 00 8e 
ffffffff80216391:	c7 83 9c 02 00 00 00 	movl   $0x0,0x29c(%rbx)
ffffffff80216398:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8021639b:	c7 83 a2 02 00 00 08 	movl   $0x8e000008,0x2a2(%rbx)
ffffffff802163a2:	00 00 8e 
ffffffff802163a5:	c7 83 ac 02 00 00 00 	movl   $0x0,0x2ac(%rbx)
ffffffff802163ac:	00 00 00 
ffffffff802163af:	c7 83 b2 02 00 00 08 	movl   $0x8e000008,0x2b2(%rbx)
ffffffff802163b6:	00 00 8e 
ffffffff802163b9:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%rbx)
ffffffff802163c0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff802163c3:	c7 83 c2 02 00 00 08 	movl   $0x8e000008,0x2c2(%rbx)
ffffffff802163ca:	00 00 8e 
ffffffff802163cd:	89 93 c8 02 00 00    	mov    %edx,0x2c8(%rbx)
ffffffff802163d3:	48 8b 15 8e 7e 00 00 	mov    0x7e8e(%rip),%rdx        # ffffffff8021e268 <RME_X64_Pgflg_RME2NAT+0xc28>
ffffffff802163da:	66 89 8b c6 02 00 00 	mov    %cx,0x2c6(%rbx)
ffffffff802163e1:	66 89 93 d0 02 00 00 	mov    %dx,0x2d0(%rbx)
ffffffff802163e8:	48 89 d1             	mov    %rdx,%rcx
ffffffff802163eb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802163ef:	89 93 d8 02 00 00    	mov    %edx,0x2d8(%rbx)
ffffffff802163f5:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff802163f9:	48 8b 15 30 81 00 00 	mov    0x8130(%rip),%rdx        # ffffffff8021e530 <RME_X64_Pgflg_RME2NAT+0xef0>
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80216400:	66 89 8b d6 02 00 00 	mov    %cx,0x2d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80216407:	66 89 93 e0 02 00 00 	mov    %dx,0x2e0(%rbx)
ffffffff8021640e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216411:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216415:	89 93 e8 02 00 00    	mov    %edx,0x2e8(%rbx)
ffffffff8021641b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021641f:	48 8b 15 fa 7c 00 00 	mov    0x7cfa(%rip),%rdx        # ffffffff8021e120 <RME_X64_Pgflg_RME2NAT+0xae0>
ffffffff80216426:	66 89 8b e6 02 00 00 	mov    %cx,0x2e6(%rbx)
ffffffff8021642d:	66 89 93 f0 02 00 00 	mov    %dx,0x2f0(%rbx)
ffffffff80216434:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216437:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021643b:	89 93 f8 02 00 00    	mov    %edx,0x2f8(%rbx)
ffffffff80216441:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80216445:	48 8b 15 c4 7c 00 00 	mov    0x7cc4(%rip),%rdx        # ffffffff8021e110 <RME_X64_Pgflg_RME2NAT+0xad0>
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8021644c:	66 89 8b f6 02 00 00 	mov    %cx,0x2f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80216453:	66 89 93 00 03 00 00 	mov    %dx,0x300(%rbx)
ffffffff8021645a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021645d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216461:	89 93 08 03 00 00    	mov    %edx,0x308(%rbx)
ffffffff80216467:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021646b:	48 8b 15 8e 81 00 00 	mov    0x818e(%rip),%rdx        # ffffffff8021e600 <RME_X64_Pgflg_RME2NAT+0xfc0>
ffffffff80216472:	66 89 8b 06 03 00 00 	mov    %cx,0x306(%rbx)
ffffffff80216479:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021647c:	66 89 93 10 03 00 00 	mov    %dx,0x310(%rbx)
ffffffff80216483:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216487:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021648b:	89 93 18 03 00 00    	mov    %edx,0x318(%rbx)
ffffffff80216491:	66 89 8b 16 03 00 00 	mov    %cx,0x316(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80216498:	c7 83 cc 02 00 00 00 	movl   $0x0,0x2cc(%rbx)
ffffffff8021649f:	00 00 00 
ffffffff802164a2:	c7 83 d2 02 00 00 08 	movl   $0x8e000008,0x2d2(%rbx)
ffffffff802164a9:	00 00 8e 
ffffffff802164ac:	c7 83 dc 02 00 00 00 	movl   $0x0,0x2dc(%rbx)
ffffffff802164b3:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff802164b6:	c7 83 e2 02 00 00 08 	movl   $0x8e000008,0x2e2(%rbx)
ffffffff802164bd:	00 00 8e 
ffffffff802164c0:	c7 83 ec 02 00 00 00 	movl   $0x0,0x2ec(%rbx)
ffffffff802164c7:	00 00 00 
ffffffff802164ca:	c7 83 f2 02 00 00 08 	movl   $0x8e000008,0x2f2(%rbx)
ffffffff802164d1:	00 00 8e 
ffffffff802164d4:	c7 83 fc 02 00 00 00 	movl   $0x0,0x2fc(%rbx)
ffffffff802164db:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff802164de:	c7 83 02 03 00 00 08 	movl   $0x8e000008,0x302(%rbx)
ffffffff802164e5:	00 00 8e 
ffffffff802164e8:	c7 83 0c 03 00 00 00 	movl   $0x0,0x30c(%rbx)
ffffffff802164ef:	00 00 00 
ffffffff802164f2:	c7 83 12 03 00 00 08 	movl   $0x8e000008,0x312(%rbx)
ffffffff802164f9:	00 00 8e 
ffffffff802164fc:	c7 83 1c 03 00 00 00 	movl   $0x0,0x31c(%rbx)
ffffffff80216503:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80216506:	48 8b 15 6b 7b 00 00 	mov    0x7b6b(%rip),%rdx        # ffffffff8021e078 <RME_X64_Pgflg_RME2NAT+0xa38>
ffffffff8021650d:	c7 83 22 03 00 00 08 	movl   $0x8e000008,0x322(%rbx)
ffffffff80216514:	00 00 8e 
ffffffff80216517:	66 89 93 20 03 00 00 	mov    %dx,0x320(%rbx)
ffffffff8021651e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216521:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216525:	89 93 28 03 00 00    	mov    %edx,0x328(%rbx)
ffffffff8021652b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021652f:	48 8b 15 6a 82 00 00 	mov    0x826a(%rip),%rdx        # ffffffff8021e7a0 <RME_X64_Pgflg_RME2NAT+0x1160>
ffffffff80216536:	66 89 8b 26 03 00 00 	mov    %cx,0x326(%rbx)
ffffffff8021653d:	66 89 93 30 03 00 00 	mov    %dx,0x330(%rbx)
ffffffff80216544:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216547:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021654b:	89 93 38 03 00 00    	mov    %edx,0x338(%rbx)
ffffffff80216551:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80216555:	48 8b 15 1c 81 00 00 	mov    0x811c(%rip),%rdx        # ffffffff8021e678 <RME_X64_Pgflg_RME2NAT+0x1038>
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8021655c:	66 89 8b 36 03 00 00 	mov    %cx,0x336(%rbx)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80216563:	66 89 93 40 03 00 00 	mov    %dx,0x340(%rbx)
ffffffff8021656a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021656d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216571:	89 93 48 03 00 00    	mov    %edx,0x348(%rbx)
ffffffff80216577:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021657b:	48 8b 15 96 7c 00 00 	mov    0x7c96(%rip),%rdx        # ffffffff8021e218 <RME_X64_Pgflg_RME2NAT+0xbd8>
ffffffff80216582:	66 89 8b 46 03 00 00 	mov    %cx,0x346(%rbx)
ffffffff80216589:	66 89 93 50 03 00 00 	mov    %dx,0x350(%rbx)
ffffffff80216590:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216593:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216597:	89 93 58 03 00 00    	mov    %edx,0x358(%rbx)
ffffffff8021659d:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff802165a1:	48 8b 15 10 7c 00 00 	mov    0x7c10(%rip),%rdx        # ffffffff8021e1b8 <RME_X64_Pgflg_RME2NAT+0xb78>
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff802165a8:	66 89 8b 56 03 00 00 	mov    %cx,0x356(%rbx)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff802165af:	66 89 93 60 03 00 00 	mov    %dx,0x360(%rbx)
ffffffff802165b6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802165b9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802165bd:	89 93 68 03 00 00    	mov    %edx,0x368(%rbx)
ffffffff802165c3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802165c7:	48 8b 15 fa 7d 00 00 	mov    0x7dfa(%rip),%rdx        # ffffffff8021e3c8 <RME_X64_Pgflg_RME2NAT+0xd88>
ffffffff802165ce:	66 89 8b 66 03 00 00 	mov    %cx,0x366(%rbx)
ffffffff802165d5:	66 89 93 70 03 00 00 	mov    %dx,0x370(%rbx)
ffffffff802165dc:	48 89 d1             	mov    %rdx,%rcx
ffffffff802165df:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff802165e3:	c7 83 2c 03 00 00 00 	movl   $0x0,0x32c(%rbx)
ffffffff802165ea:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff802165ed:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff802165f1:	c7 83 32 03 00 00 08 	movl   $0x8e000008,0x332(%rbx)
ffffffff802165f8:	00 00 8e 
ffffffff802165fb:	c7 83 3c 03 00 00 00 	movl   $0x0,0x33c(%rbx)
ffffffff80216602:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80216605:	c7 83 42 03 00 00 08 	movl   $0x8e000008,0x342(%rbx)
ffffffff8021660c:	00 00 8e 
ffffffff8021660f:	c7 83 4c 03 00 00 00 	movl   $0x0,0x34c(%rbx)
ffffffff80216616:	00 00 00 
ffffffff80216619:	c7 83 52 03 00 00 08 	movl   $0x8e000008,0x352(%rbx)
ffffffff80216620:	00 00 8e 
ffffffff80216623:	c7 83 5c 03 00 00 00 	movl   $0x0,0x35c(%rbx)
ffffffff8021662a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8021662d:	c7 83 62 03 00 00 08 	movl   $0x8e000008,0x362(%rbx)
ffffffff80216634:	00 00 8e 
ffffffff80216637:	c7 83 6c 03 00 00 00 	movl   $0x0,0x36c(%rbx)
ffffffff8021663e:	00 00 00 
ffffffff80216641:	c7 83 72 03 00 00 08 	movl   $0x8e000008,0x372(%rbx)
ffffffff80216648:	00 00 8e 
ffffffff8021664b:	89 93 78 03 00 00    	mov    %edx,0x378(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80216651:	48 8b 15 00 7a 00 00 	mov    0x7a00(%rip),%rdx        # ffffffff8021e058 <RME_X64_Pgflg_RME2NAT+0xa18>
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80216658:	66 89 8b 76 03 00 00 	mov    %cx,0x376(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8021665f:	66 89 93 80 03 00 00 	mov    %dx,0x380(%rbx)
ffffffff80216666:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216669:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021666d:	89 93 88 03 00 00    	mov    %edx,0x388(%rbx)
ffffffff80216673:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216677:	48 8b 15 ca 7c 00 00 	mov    0x7cca(%rip),%rdx        # ffffffff8021e348 <RME_X64_Pgflg_RME2NAT+0xd08>
ffffffff8021667e:	66 89 8b 86 03 00 00 	mov    %cx,0x386(%rbx)
ffffffff80216685:	66 89 93 90 03 00 00 	mov    %dx,0x390(%rbx)
ffffffff8021668c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021668f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216693:	89 93 98 03 00 00    	mov    %edx,0x398(%rbx)
ffffffff80216699:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8021669d:	48 8b 15 ec 79 00 00 	mov    0x79ec(%rip),%rdx        # ffffffff8021e090 <RME_X64_Pgflg_RME2NAT+0xa50>
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff802166a4:	66 89 8b 96 03 00 00 	mov    %cx,0x396(%rbx)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff802166ab:	66 89 93 a0 03 00 00 	mov    %dx,0x3a0(%rbx)
ffffffff802166b2:	48 89 d1             	mov    %rdx,%rcx
ffffffff802166b5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802166b9:	89 93 a8 03 00 00    	mov    %edx,0x3a8(%rbx)
ffffffff802166bf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802166c3:	48 8b 15 8e 7e 00 00 	mov    0x7e8e(%rip),%rdx        # ffffffff8021e558 <RME_X64_Pgflg_RME2NAT+0xf18>
ffffffff802166ca:	66 89 8b a6 03 00 00 	mov    %cx,0x3a6(%rbx)
ffffffff802166d1:	66 89 93 b0 03 00 00 	mov    %dx,0x3b0(%rbx)
ffffffff802166d8:	48 89 d1             	mov    %rdx,%rcx
ffffffff802166db:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802166df:	89 93 b8 03 00 00    	mov    %edx,0x3b8(%rbx)
ffffffff802166e5:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff802166e9:	48 8b 15 98 7a 00 00 	mov    0x7a98(%rip),%rdx        # ffffffff8021e188 <RME_X64_Pgflg_RME2NAT+0xb48>
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff802166f0:	66 89 8b b6 03 00 00 	mov    %cx,0x3b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff802166f7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802166fa:	66 89 93 c0 03 00 00 	mov    %dx,0x3c0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80216701:	c7 83 7c 03 00 00 00 	movl   $0x0,0x37c(%rbx)
ffffffff80216708:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8021670b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021670f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216713:	66 89 8b c6 03 00 00 	mov    %cx,0x3c6(%rbx)
ffffffff8021671a:	89 93 c8 03 00 00    	mov    %edx,0x3c8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80216720:	c7 83 82 03 00 00 08 	movl   $0x8e000008,0x382(%rbx)
ffffffff80216727:	00 00 8e 
ffffffff8021672a:	c7 83 8c 03 00 00 00 	movl   $0x0,0x38c(%rbx)
ffffffff80216731:	00 00 00 
ffffffff80216734:	c7 83 92 03 00 00 08 	movl   $0x8e000008,0x392(%rbx)
ffffffff8021673b:	00 00 8e 
ffffffff8021673e:	c7 83 9c 03 00 00 00 	movl   $0x0,0x39c(%rbx)
ffffffff80216745:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff80216748:	c7 83 a2 03 00 00 08 	movl   $0x8e000008,0x3a2(%rbx)
ffffffff8021674f:	00 00 8e 
ffffffff80216752:	c7 83 ac 03 00 00 00 	movl   $0x0,0x3ac(%rbx)
ffffffff80216759:	00 00 00 
ffffffff8021675c:	c7 83 b2 03 00 00 08 	movl   $0x8e000008,0x3b2(%rbx)
ffffffff80216763:	00 00 8e 
ffffffff80216766:	c7 83 bc 03 00 00 00 	movl   $0x0,0x3bc(%rbx)
ffffffff8021676d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80216770:	c7 83 c2 03 00 00 08 	movl   $0x8e000008,0x3c2(%rbx)
ffffffff80216777:	00 00 8e 
ffffffff8021677a:	c7 83 cc 03 00 00 00 	movl   $0x0,0x3cc(%rbx)
ffffffff80216781:	00 00 00 
ffffffff80216784:	48 8b 15 8d 7e 00 00 	mov    0x7e8d(%rip),%rdx        # ffffffff8021e618 <RME_X64_Pgflg_RME2NAT+0xfd8>
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8021678b:	66 89 83 14 04 00 00 	mov    %ax,0x414(%rbx)
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80216792:	66 89 93 d0 03 00 00 	mov    %dx,0x3d0(%rbx)
ffffffff80216799:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021679c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802167a0:	89 93 d8 03 00 00    	mov    %edx,0x3d8(%rbx)
ffffffff802167a6:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff802167aa:	48 8b 15 17 80 00 00 	mov    0x8017(%rip),%rdx        # ffffffff8021e7c8 <RME_X64_Pgflg_RME2NAT+0x1188>
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff802167b1:	66 89 8b d6 03 00 00 	mov    %cx,0x3d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff802167b8:	66 89 93 e0 03 00 00 	mov    %dx,0x3e0(%rbx)
ffffffff802167bf:	48 89 d1             	mov    %rdx,%rcx
ffffffff802167c2:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802167c6:	89 93 e8 03 00 00    	mov    %edx,0x3e8(%rbx)
ffffffff802167cc:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802167d0:	48 8b 15 e9 7f 00 00 	mov    0x7fe9(%rip),%rdx        # ffffffff8021e7c0 <RME_X64_Pgflg_RME2NAT+0x1180>
ffffffff802167d7:	66 89 8b e6 03 00 00 	mov    %cx,0x3e6(%rbx)
ffffffff802167de:	66 89 93 f0 03 00 00 	mov    %dx,0x3f0(%rbx)
ffffffff802167e5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802167e8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802167ec:	89 93 f8 03 00 00    	mov    %edx,0x3f8(%rbx)
ffffffff802167f2:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff802167f6:	48 8b 15 a3 78 00 00 	mov    0x78a3(%rip),%rdx        # ffffffff8021e0a0 <RME_X64_Pgflg_RME2NAT+0xa60>
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff802167fd:	66 89 8b f6 03 00 00 	mov    %cx,0x3f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80216804:	66 89 93 00 04 00 00 	mov    %dx,0x400(%rbx)
ffffffff8021680b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021680e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216812:	89 93 08 04 00 00    	mov    %edx,0x408(%rbx)
ffffffff80216818:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021681c:	48 8b 15 5d 78 00 00 	mov    0x785d(%rip),%rdx        # ffffffff8021e080 <RME_X64_Pgflg_RME2NAT+0xa40>
ffffffff80216823:	66 89 8b 06 04 00 00 	mov    %cx,0x406(%rbx)
ffffffff8021682a:	66 89 93 10 04 00 00 	mov    %dx,0x410(%rbx)
ffffffff80216831:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216834:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216838:	89 93 18 04 00 00    	mov    %edx,0x418(%rbx)
ffffffff8021683e:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80216842:	48 8b 15 a7 7a 00 00 	mov    0x7aa7(%rip),%rdx        # ffffffff8021e2f0 <RME_X64_Pgflg_RME2NAT+0xcb0>
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80216849:	66 89 8b 16 04 00 00 	mov    %cx,0x416(%rbx)
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80216850:	c7 83 d2 03 00 00 08 	movl   $0x8e000008,0x3d2(%rbx)
ffffffff80216857:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8021685a:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8021685d:	c7 83 dc 03 00 00 00 	movl   $0x0,0x3dc(%rbx)
ffffffff80216864:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80216867:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8021686b:	c7 83 e2 03 00 00 08 	movl   $0x8e000008,0x3e2(%rbx)
ffffffff80216872:	00 00 8e 
ffffffff80216875:	c7 83 ec 03 00 00 00 	movl   $0x0,0x3ec(%rbx)
ffffffff8021687c:	00 00 00 
ffffffff8021687f:	c7 83 f2 03 00 00 08 	movl   $0x8e000008,0x3f2(%rbx)
ffffffff80216886:	00 00 8e 
ffffffff80216889:	c7 83 fc 03 00 00 00 	movl   $0x0,0x3fc(%rbx)
ffffffff80216890:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80216893:	c7 83 02 04 00 00 08 	movl   $0x8e000008,0x402(%rbx)
ffffffff8021689a:	00 00 8e 
ffffffff8021689d:	c7 83 0c 04 00 00 00 	movl   $0x0,0x40c(%rbx)
ffffffff802168a4:	00 00 00 
ffffffff802168a7:	66 89 b3 12 04 00 00 	mov    %si,0x412(%rbx)
ffffffff802168ae:	c7 83 1c 04 00 00 00 	movl   $0x0,0x41c(%rbx)
ffffffff802168b5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff802168b8:	66 89 93 20 04 00 00 	mov    %dx,0x420(%rbx)
ffffffff802168bf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802168c3:	89 93 28 04 00 00    	mov    %edx,0x428(%rbx)
ffffffff802168c9:	48 8b 15 50 79 00 00 	mov    0x7950(%rip),%rdx        # ffffffff8021e220 <RME_X64_Pgflg_RME2NAT+0xbe0>
ffffffff802168d0:	66 89 8b 26 04 00 00 	mov    %cx,0x426(%rbx)
ffffffff802168d7:	66 89 93 30 04 00 00 	mov    %dx,0x430(%rbx)
ffffffff802168de:	48 89 d1             	mov    %rdx,%rcx
ffffffff802168e1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802168e5:	89 93 38 04 00 00    	mov    %edx,0x438(%rbx)
ffffffff802168eb:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff802168ef:	48 8b 15 f2 7c 00 00 	mov    0x7cf2(%rip),%rdx        # ffffffff8021e5e8 <RME_X64_Pgflg_RME2NAT+0xfa8>
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff802168f6:	66 89 8b 36 04 00 00 	mov    %cx,0x436(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff802168fd:	66 89 93 40 04 00 00 	mov    %dx,0x440(%rbx)
ffffffff80216904:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216907:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021690b:	89 93 48 04 00 00    	mov    %edx,0x448(%rbx)
ffffffff80216911:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216915:	48 8b 15 2c 78 00 00 	mov    0x782c(%rip),%rdx        # ffffffff8021e148 <RME_X64_Pgflg_RME2NAT+0xb08>
ffffffff8021691c:	66 89 8b 46 04 00 00 	mov    %cx,0x446(%rbx)
ffffffff80216923:	66 89 93 50 04 00 00 	mov    %dx,0x450(%rbx)
ffffffff8021692a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021692d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216931:	89 93 58 04 00 00    	mov    %edx,0x458(%rbx)
ffffffff80216937:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021693b:	48 8b 15 5e 7a 00 00 	mov    0x7a5e(%rip),%rdx        # ffffffff8021e3a0 <RME_X64_Pgflg_RME2NAT+0xd60>
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80216942:	66 89 8b 56 04 00 00 	mov    %cx,0x456(%rbx)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80216949:	66 89 93 60 04 00 00 	mov    %dx,0x460(%rbx)
ffffffff80216950:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216953:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216957:	89 93 68 04 00 00    	mov    %edx,0x468(%rbx)
ffffffff8021695d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216961:	48 8b 15 28 7b 00 00 	mov    0x7b28(%rip),%rdx        # ffffffff8021e490 <RME_X64_Pgflg_RME2NAT+0xe50>
ffffffff80216968:	66 89 8b 66 04 00 00 	mov    %cx,0x466(%rbx)
ffffffff8021696f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216972:	66 89 93 70 04 00 00 	mov    %dx,0x470(%rbx)
ffffffff80216979:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8021697d:	c7 83 22 04 00 00 08 	movl   $0x8e000008,0x422(%rbx)
ffffffff80216984:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80216987:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021698b:	66 89 8b 76 04 00 00 	mov    %cx,0x476(%rbx)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80216992:	c7 83 2c 04 00 00 00 	movl   $0x0,0x42c(%rbx)
ffffffff80216999:	00 00 00 
ffffffff8021699c:	c7 83 32 04 00 00 08 	movl   $0x8e000008,0x432(%rbx)
ffffffff802169a3:	00 00 8e 
ffffffff802169a6:	c7 83 3c 04 00 00 00 	movl   $0x0,0x43c(%rbx)
ffffffff802169ad:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff802169b0:	c7 83 42 04 00 00 08 	movl   $0x8e000008,0x442(%rbx)
ffffffff802169b7:	00 00 8e 
ffffffff802169ba:	c7 83 4c 04 00 00 00 	movl   $0x0,0x44c(%rbx)
ffffffff802169c1:	00 00 00 
ffffffff802169c4:	c7 83 52 04 00 00 08 	movl   $0x8e000008,0x452(%rbx)
ffffffff802169cb:	00 00 8e 
ffffffff802169ce:	c7 83 5c 04 00 00 00 	movl   $0x0,0x45c(%rbx)
ffffffff802169d5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff802169d8:	c7 83 62 04 00 00 08 	movl   $0x8e000008,0x462(%rbx)
ffffffff802169df:	00 00 8e 
ffffffff802169e2:	c7 83 6c 04 00 00 00 	movl   $0x0,0x46c(%rbx)
ffffffff802169e9:	00 00 00 
ffffffff802169ec:	c7 83 72 04 00 00 08 	movl   $0x8e000008,0x472(%rbx)
ffffffff802169f3:	00 00 8e 
ffffffff802169f6:	89 93 78 04 00 00    	mov    %edx,0x478(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff802169fc:	48 8b 15 8d 79 00 00 	mov    0x798d(%rip),%rdx        # ffffffff8021e390 <RME_X64_Pgflg_RME2NAT+0xd50>
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80216a03:	c7 83 7c 04 00 00 00 	movl   $0x0,0x47c(%rbx)
ffffffff80216a0a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80216a0d:	66 89 93 80 04 00 00 	mov    %dx,0x480(%rbx)
ffffffff80216a14:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216a17:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216a1b:	89 93 88 04 00 00    	mov    %edx,0x488(%rbx)
ffffffff80216a21:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216a25:	48 8b 15 dc 75 00 00 	mov    0x75dc(%rip),%rdx        # ffffffff8021e008 <RME_X64_Pgflg_RME2NAT+0x9c8>
ffffffff80216a2c:	66 89 8b 86 04 00 00 	mov    %cx,0x486(%rbx)
ffffffff80216a33:	66 89 93 90 04 00 00 	mov    %dx,0x490(%rbx)
ffffffff80216a3a:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216a3d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216a41:	89 93 98 04 00 00    	mov    %edx,0x498(%rbx)
ffffffff80216a47:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216a4b:	48 8b 15 4e 7c 00 00 	mov    0x7c4e(%rip),%rdx        # ffffffff8021e6a0 <RME_X64_Pgflg_RME2NAT+0x1060>
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80216a52:	66 89 8b 96 04 00 00 	mov    %cx,0x496(%rbx)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216a59:	66 89 93 a0 04 00 00 	mov    %dx,0x4a0(%rbx)
ffffffff80216a60:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216a63:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216a67:	89 93 a8 04 00 00    	mov    %edx,0x4a8(%rbx)
ffffffff80216a6d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216a71:	48 8b 15 58 77 00 00 	mov    0x7758(%rip),%rdx        # ffffffff8021e1d0 <RME_X64_Pgflg_RME2NAT+0xb90>
ffffffff80216a78:	66 89 8b a6 04 00 00 	mov    %cx,0x4a6(%rbx)
ffffffff80216a7f:	66 89 93 b0 04 00 00 	mov    %dx,0x4b0(%rbx)
ffffffff80216a86:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216a89:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216a8d:	89 93 b8 04 00 00    	mov    %edx,0x4b8(%rbx)
ffffffff80216a93:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216a97:	48 8b 15 9a 75 00 00 	mov    0x759a(%rip),%rdx        # ffffffff8021e038 <RME_X64_Pgflg_RME2NAT+0x9f8>
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216a9e:	66 89 8b b6 04 00 00 	mov    %cx,0x4b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216aa5:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216aa8:	66 89 93 c0 04 00 00 	mov    %dx,0x4c0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80216aaf:	c7 83 82 04 00 00 08 	movl   $0x8e000008,0x482(%rbx)
ffffffff80216ab6:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216ab9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216abd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216ac1:	89 93 c8 04 00 00    	mov    %edx,0x4c8(%rbx)
ffffffff80216ac7:	48 8b 15 8a 76 00 00 	mov    0x768a(%rip),%rdx        # ffffffff8021e158 <RME_X64_Pgflg_RME2NAT+0xb18>
ffffffff80216ace:	66 89 8b c6 04 00 00 	mov    %cx,0x4c6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80216ad5:	c7 83 8c 04 00 00 00 	movl   $0x0,0x48c(%rbx)
ffffffff80216adc:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216adf:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80216ae2:	c7 83 92 04 00 00 08 	movl   $0x8e000008,0x492(%rbx)
ffffffff80216ae9:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216aec:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff80216af0:	c7 83 9c 04 00 00 00 	movl   $0x0,0x49c(%rbx)
ffffffff80216af7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216afa:	c7 83 a2 04 00 00 08 	movl   $0x8e000008,0x4a2(%rbx)
ffffffff80216b01:	00 00 8e 
ffffffff80216b04:	c7 83 ac 04 00 00 00 	movl   $0x0,0x4ac(%rbx)
ffffffff80216b0b:	00 00 00 
ffffffff80216b0e:	c7 83 b2 04 00 00 08 	movl   $0x8e000008,0x4b2(%rbx)
ffffffff80216b15:	00 00 8e 
ffffffff80216b18:	c7 83 bc 04 00 00 00 	movl   $0x0,0x4bc(%rbx)
ffffffff80216b1f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216b22:	c7 83 c2 04 00 00 08 	movl   $0x8e000008,0x4c2(%rbx)
ffffffff80216b29:	00 00 8e 
ffffffff80216b2c:	c7 83 cc 04 00 00 00 	movl   $0x0,0x4cc(%rbx)
ffffffff80216b33:	00 00 00 
ffffffff80216b36:	66 89 93 d0 04 00 00 	mov    %dx,0x4d0(%rbx)
ffffffff80216b3d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b41:	89 93 d8 04 00 00    	mov    %edx,0x4d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80216b47:	48 8b 15 aa 77 00 00 	mov    0x77aa(%rip),%rdx        # ffffffff8021e2f8 <RME_X64_Pgflg_RME2NAT+0xcb8>
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216b4e:	66 89 8b d6 04 00 00 	mov    %cx,0x4d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80216b55:	66 89 93 e0 04 00 00 	mov    %dx,0x4e0(%rbx)
ffffffff80216b5c:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b5f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b63:	89 93 e8 04 00 00    	mov    %edx,0x4e8(%rbx)
ffffffff80216b69:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216b6d:	48 8b 15 a4 78 00 00 	mov    0x78a4(%rip),%rdx        # ffffffff8021e418 <RME_X64_Pgflg_RME2NAT+0xdd8>
ffffffff80216b74:	66 89 8b e6 04 00 00 	mov    %cx,0x4e6(%rbx)
ffffffff80216b7b:	66 89 93 f0 04 00 00 	mov    %dx,0x4f0(%rbx)
ffffffff80216b82:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b85:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b89:	89 93 f8 04 00 00    	mov    %edx,0x4f8(%rbx)
ffffffff80216b8f:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216b93:	48 8b 15 fe 7a 00 00 	mov    0x7afe(%rip),%rdx        # ffffffff8021e698 <RME_X64_Pgflg_RME2NAT+0x1058>
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80216b9a:	66 89 8b f6 04 00 00 	mov    %cx,0x4f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216ba1:	66 89 93 00 05 00 00 	mov    %dx,0x500(%rbx)
ffffffff80216ba8:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216bab:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216baf:	89 93 08 05 00 00    	mov    %edx,0x508(%rbx)
ffffffff80216bb5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216bb9:	48 8b 15 68 7b 00 00 	mov    0x7b68(%rip),%rdx        # ffffffff8021e728 <RME_X64_Pgflg_RME2NAT+0x10e8>
ffffffff80216bc0:	66 89 8b 06 05 00 00 	mov    %cx,0x506(%rbx)
ffffffff80216bc7:	66 89 93 10 05 00 00 	mov    %dx,0x510(%rbx)
ffffffff80216bce:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216bd1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216bd5:	89 93 18 05 00 00    	mov    %edx,0x518(%rbx)
ffffffff80216bdb:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80216bdf:	48 8b 15 82 79 00 00 	mov    0x7982(%rip),%rdx        # ffffffff8021e568 <RME_X64_Pgflg_RME2NAT+0xf28>
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216be6:	66 89 8b 16 05 00 00 	mov    %cx,0x516(%rbx)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80216bed:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216bf0:	66 89 93 20 05 00 00 	mov    %dx,0x520(%rbx)
ffffffff80216bf7:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216bfb:	c7 83 d2 04 00 00 08 	movl   $0x8e000008,0x4d2(%rbx)
ffffffff80216c02:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80216c05:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216c09:	66 89 8b 26 05 00 00 	mov    %cx,0x526(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216c10:	c7 83 dc 04 00 00 00 	movl   $0x0,0x4dc(%rbx)
ffffffff80216c17:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80216c1a:	c7 83 e2 04 00 00 08 	movl   $0x8e000008,0x4e2(%rbx)
ffffffff80216c21:	00 00 8e 
ffffffff80216c24:	c7 83 ec 04 00 00 00 	movl   $0x0,0x4ec(%rbx)
ffffffff80216c2b:	00 00 00 
ffffffff80216c2e:	c7 83 f2 04 00 00 08 	movl   $0x8e000008,0x4f2(%rbx)
ffffffff80216c35:	00 00 8e 
ffffffff80216c38:	c7 83 fc 04 00 00 00 	movl   $0x0,0x4fc(%rbx)
ffffffff80216c3f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216c42:	c7 83 02 05 00 00 08 	movl   $0x8e000008,0x502(%rbx)
ffffffff80216c49:	00 00 8e 
ffffffff80216c4c:	c7 83 0c 05 00 00 00 	movl   $0x0,0x50c(%rbx)
ffffffff80216c53:	00 00 00 
ffffffff80216c56:	c7 83 12 05 00 00 08 	movl   $0x8e000008,0x512(%rbx)
ffffffff80216c5d:	00 00 8e 
ffffffff80216c60:	c7 83 1c 05 00 00 00 	movl   $0x0,0x51c(%rbx)
ffffffff80216c67:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80216c6a:	c7 83 22 05 00 00 08 	movl   $0x8e000008,0x522(%rbx)
ffffffff80216c71:	00 00 8e 
ffffffff80216c74:	89 93 28 05 00 00    	mov    %edx,0x528(%rbx)
ffffffff80216c7a:	48 8b 15 8f 79 00 00 	mov    0x798f(%rip),%rdx        # ffffffff8021e610 <RME_X64_Pgflg_RME2NAT+0xfd0>
ffffffff80216c81:	c7 83 2c 05 00 00 00 	movl   $0x0,0x52c(%rbx)
ffffffff80216c88:	00 00 00 
ffffffff80216c8b:	66 89 93 30 05 00 00 	mov    %dx,0x530(%rbx)
ffffffff80216c92:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216c95:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216c99:	89 93 38 05 00 00    	mov    %edx,0x538(%rbx)
ffffffff80216c9f:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80216ca3:	48 8b 15 be 74 00 00 	mov    0x74be(%rip),%rdx        # ffffffff8021e168 <RME_X64_Pgflg_RME2NAT+0xb28>
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80216caa:	66 89 8b 36 05 00 00 	mov    %cx,0x536(%rbx)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80216cb1:	66 89 93 40 05 00 00 	mov    %dx,0x540(%rbx)
ffffffff80216cb8:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216cbb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216cbf:	89 93 48 05 00 00    	mov    %edx,0x548(%rbx)
ffffffff80216cc5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216cc9:	48 8b 15 98 77 00 00 	mov    0x7798(%rip),%rdx        # ffffffff8021e468 <RME_X64_Pgflg_RME2NAT+0xe28>
ffffffff80216cd0:	66 89 8b 46 05 00 00 	mov    %cx,0x546(%rbx)
ffffffff80216cd7:	66 89 93 50 05 00 00 	mov    %dx,0x550(%rbx)
ffffffff80216cde:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216ce1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216ce5:	89 93 58 05 00 00    	mov    %edx,0x558(%rbx)
ffffffff80216ceb:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff80216cef:	48 8b 15 fa 79 00 00 	mov    0x79fa(%rip),%rdx        # ffffffff8021e6f0 <RME_X64_Pgflg_RME2NAT+0x10b0>
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80216cf6:	66 89 8b 56 05 00 00 	mov    %cx,0x556(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff80216cfd:	66 89 93 60 05 00 00 	mov    %dx,0x560(%rbx)
ffffffff80216d04:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216d07:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216d0b:	89 93 68 05 00 00    	mov    %edx,0x568(%rbx)
ffffffff80216d11:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216d15:	48 8b 15 64 74 00 00 	mov    0x7464(%rip),%rdx        # ffffffff8021e180 <RME_X64_Pgflg_RME2NAT+0xb40>
ffffffff80216d1c:	66 89 8b 66 05 00 00 	mov    %cx,0x566(%rbx)
ffffffff80216d23:	66 89 93 70 05 00 00 	mov    %dx,0x570(%rbx)
ffffffff80216d2a:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216d2d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216d31:	89 93 78 05 00 00    	mov    %edx,0x578(%rbx)
ffffffff80216d37:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216d3b:	48 8b 15 06 73 00 00 	mov    0x7306(%rip),%rdx        # ffffffff8021e048 <RME_X64_Pgflg_RME2NAT+0xa08>
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff80216d42:	66 89 8b 76 05 00 00 	mov    %cx,0x576(%rbx)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80216d49:	c7 83 32 05 00 00 08 	movl   $0x8e000008,0x532(%rbx)
ffffffff80216d50:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216d53:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80216d56:	c7 83 3c 05 00 00 00 	movl   $0x0,0x53c(%rbx)
ffffffff80216d5d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216d60:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80216d64:	c7 83 42 05 00 00 08 	movl   $0x8e000008,0x542(%rbx)
ffffffff80216d6b:	00 00 8e 
ffffffff80216d6e:	c7 83 4c 05 00 00 00 	movl   $0x0,0x54c(%rbx)
ffffffff80216d75:	00 00 00 
ffffffff80216d78:	c7 83 52 05 00 00 08 	movl   $0x8e000008,0x552(%rbx)
ffffffff80216d7f:	00 00 8e 
ffffffff80216d82:	c7 83 5c 05 00 00 00 	movl   $0x0,0x55c(%rbx)
ffffffff80216d89:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff80216d8c:	c7 83 62 05 00 00 08 	movl   $0x8e000008,0x562(%rbx)
ffffffff80216d93:	00 00 8e 
ffffffff80216d96:	c7 83 6c 05 00 00 00 	movl   $0x0,0x56c(%rbx)
ffffffff80216d9d:	00 00 00 
ffffffff80216da0:	c7 83 72 05 00 00 08 	movl   $0x8e000008,0x572(%rbx)
ffffffff80216da7:	00 00 8e 
ffffffff80216daa:	c7 83 7c 05 00 00 00 	movl   $0x0,0x57c(%rbx)
ffffffff80216db1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216db4:	66 89 93 80 05 00 00 	mov    %dx,0x580(%rbx)
ffffffff80216dbb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216dbf:	89 93 88 05 00 00    	mov    %edx,0x588(%rbx)
ffffffff80216dc5:	48 8b 15 5c 74 00 00 	mov    0x745c(%rip),%rdx        # ffffffff8021e228 <RME_X64_Pgflg_RME2NAT+0xbe8>
ffffffff80216dcc:	66 89 8b 86 05 00 00 	mov    %cx,0x586(%rbx)
ffffffff80216dd3:	66 89 93 90 05 00 00 	mov    %dx,0x590(%rbx)
ffffffff80216dda:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216ddd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216de1:	89 93 98 05 00 00    	mov    %edx,0x598(%rbx)
ffffffff80216de7:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216deb:	48 8b 15 6e 76 00 00 	mov    0x766e(%rip),%rdx        # ffffffff8021e460 <RME_X64_Pgflg_RME2NAT+0xe20>
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216df2:	66 89 8b 96 05 00 00 	mov    %cx,0x596(%rbx)
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216df9:	66 89 93 a0 05 00 00 	mov    %dx,0x5a0(%rbx)
ffffffff80216e00:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e03:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e07:	89 93 a8 05 00 00    	mov    %edx,0x5a8(%rbx)
ffffffff80216e0d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e11:	48 8b 15 e0 78 00 00 	mov    0x78e0(%rip),%rdx        # ffffffff8021e6f8 <RME_X64_Pgflg_RME2NAT+0x10b8>
ffffffff80216e18:	66 89 8b a6 05 00 00 	mov    %cx,0x5a6(%rbx)
ffffffff80216e1f:	66 89 93 b0 05 00 00 	mov    %dx,0x5b0(%rbx)
ffffffff80216e26:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e29:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e2d:	89 93 b8 05 00 00    	mov    %edx,0x5b8(%rbx)
ffffffff80216e33:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216e37:	48 8b 15 82 76 00 00 	mov    0x7682(%rip),%rdx        # ffffffff8021e4c0 <RME_X64_Pgflg_RME2NAT+0xe80>
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216e3e:	66 89 8b b6 05 00 00 	mov    %cx,0x5b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216e45:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e48:	66 89 93 c0 05 00 00 	mov    %dx,0x5c0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216e4f:	c7 83 82 05 00 00 08 	movl   $0x8e000008,0x582(%rbx)
ffffffff80216e56:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216e59:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e5d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e61:	89 93 c8 05 00 00    	mov    %edx,0x5c8(%rbx)
ffffffff80216e67:	48 8b 15 6a 77 00 00 	mov    0x776a(%rip),%rdx        # ffffffff8021e5d8 <RME_X64_Pgflg_RME2NAT+0xf98>
ffffffff80216e6e:	66 89 8b c6 05 00 00 	mov    %cx,0x5c6(%rbx)
ffffffff80216e75:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e78:	66 89 93 d0 05 00 00 	mov    %dx,0x5d0(%rbx)
ffffffff80216e7f:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216e83:	c7 83 8c 05 00 00 00 	movl   $0x0,0x58c(%rbx)
ffffffff80216e8a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216e8d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e91:	66 89 8b d6 05 00 00 	mov    %cx,0x5d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216e98:	c7 83 92 05 00 00 08 	movl   $0x8e000008,0x592(%rbx)
ffffffff80216e9f:	00 00 8e 
ffffffff80216ea2:	c7 83 9c 05 00 00 00 	movl   $0x0,0x59c(%rbx)
ffffffff80216ea9:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216eac:	c7 83 a2 05 00 00 08 	movl   $0x8e000008,0x5a2(%rbx)
ffffffff80216eb3:	00 00 8e 
ffffffff80216eb6:	c7 83 ac 05 00 00 00 	movl   $0x0,0x5ac(%rbx)
ffffffff80216ebd:	00 00 00 
ffffffff80216ec0:	c7 83 b2 05 00 00 08 	movl   $0x8e000008,0x5b2(%rbx)
ffffffff80216ec7:	00 00 8e 
ffffffff80216eca:	c7 83 bc 05 00 00 00 	movl   $0x0,0x5bc(%rbx)
ffffffff80216ed1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216ed4:	c7 83 c2 05 00 00 08 	movl   $0x8e000008,0x5c2(%rbx)
ffffffff80216edb:	00 00 8e 
ffffffff80216ede:	c7 83 cc 05 00 00 00 	movl   $0x0,0x5cc(%rbx)
ffffffff80216ee5:	00 00 00 
ffffffff80216ee8:	c7 83 d2 05 00 00 08 	movl   $0x8e000008,0x5d2(%rbx)
ffffffff80216eef:	00 00 8e 
ffffffff80216ef2:	89 93 d8 05 00 00    	mov    %edx,0x5d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff80216ef8:	48 8b 15 99 73 00 00 	mov    0x7399(%rip),%rdx        # ffffffff8021e298 <RME_X64_Pgflg_RME2NAT+0xc58>
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216eff:	66 89 83 14 06 00 00 	mov    %ax,0x614(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff80216f06:	66 89 93 e0 05 00 00 	mov    %dx,0x5e0(%rbx)
ffffffff80216f0d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f10:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f14:	89 93 e8 05 00 00    	mov    %edx,0x5e8(%rbx)
ffffffff80216f1a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216f1e:	48 8b 15 cb 72 00 00 	mov    0x72cb(%rip),%rdx        # ffffffff8021e1f0 <RME_X64_Pgflg_RME2NAT+0xbb0>
ffffffff80216f25:	66 89 8b e6 05 00 00 	mov    %cx,0x5e6(%rbx)
ffffffff80216f2c:	66 89 93 f0 05 00 00 	mov    %dx,0x5f0(%rbx)
ffffffff80216f33:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f36:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f3a:	89 93 f8 05 00 00    	mov    %edx,0x5f8(%rbx)
ffffffff80216f40:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216f44:	48 8b 15 8d 73 00 00 	mov    0x738d(%rip),%rdx        # ffffffff8021e2d8 <RME_X64_Pgflg_RME2NAT+0xc98>
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff80216f4b:	66 89 8b f6 05 00 00 	mov    %cx,0x5f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216f52:	66 89 93 00 06 00 00 	mov    %dx,0x600(%rbx)
ffffffff80216f59:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f5c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f60:	89 93 08 06 00 00    	mov    %edx,0x608(%rbx)
ffffffff80216f66:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216f6a:	48 8b 15 07 73 00 00 	mov    0x7307(%rip),%rdx        # ffffffff8021e278 <RME_X64_Pgflg_RME2NAT+0xc38>
ffffffff80216f71:	66 89 8b 06 06 00 00 	mov    %cx,0x606(%rbx)
ffffffff80216f78:	66 89 93 10 06 00 00 	mov    %dx,0x610(%rbx)
ffffffff80216f7f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f82:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f86:	89 93 18 06 00 00    	mov    %edx,0x618(%rbx)
ffffffff80216f8c:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff80216f90:	48 8b 15 99 77 00 00 	mov    0x7799(%rip),%rdx        # ffffffff8021e730 <RME_X64_Pgflg_RME2NAT+0x10f0>
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216f97:	66 89 8b 16 06 00 00 	mov    %cx,0x616(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff80216f9e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216fa1:	66 89 93 20 06 00 00 	mov    %dx,0x620(%rbx)
ffffffff80216fa8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216fac:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216fb0:	89 93 28 06 00 00    	mov    %edx,0x628(%rbx)
ffffffff80216fb6:	66 89 8b 26 06 00 00 	mov    %cx,0x626(%rbx)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216fbd:	c7 83 dc 05 00 00 00 	movl   $0x0,0x5dc(%rbx)
ffffffff80216fc4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff80216fc7:	c7 83 e2 05 00 00 08 	movl   $0x8e000008,0x5e2(%rbx)
ffffffff80216fce:	00 00 8e 
ffffffff80216fd1:	c7 83 ec 05 00 00 00 	movl   $0x0,0x5ec(%rbx)
ffffffff80216fd8:	00 00 00 
ffffffff80216fdb:	c7 83 f2 05 00 00 08 	movl   $0x8e000008,0x5f2(%rbx)
ffffffff80216fe2:	00 00 8e 
ffffffff80216fe5:	c7 83 fc 05 00 00 00 	movl   $0x0,0x5fc(%rbx)
ffffffff80216fec:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216fef:	c7 83 02 06 00 00 08 	movl   $0x8e000008,0x602(%rbx)
ffffffff80216ff6:	00 00 8e 
ffffffff80216ff9:	c7 83 0c 06 00 00 00 	movl   $0x0,0x60c(%rbx)
ffffffff80217000:	00 00 00 
ffffffff80217003:	66 89 bb 12 06 00 00 	mov    %di,0x612(%rbx)
ffffffff8021700a:	c7 83 1c 06 00 00 00 	movl   $0x0,0x61c(%rbx)
ffffffff80217011:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff80217014:	c7 83 22 06 00 00 08 	movl   $0x8e000008,0x622(%rbx)
ffffffff8021701b:	00 00 8e 
ffffffff8021701e:	c7 83 2c 06 00 00 00 	movl   $0x0,0x62c(%rbx)
ffffffff80217025:	00 00 00 
ffffffff80217028:	48 8b 15 19 74 00 00 	mov    0x7419(%rip),%rdx        # ffffffff8021e448 <RME_X64_Pgflg_RME2NAT+0xe08>
ffffffff8021702f:	c7 83 32 06 00 00 08 	movl   $0x8e000008,0x632(%rbx)
ffffffff80217036:	00 00 8e 
ffffffff80217039:	66 89 93 30 06 00 00 	mov    %dx,0x630(%rbx)
ffffffff80217040:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217043:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217047:	89 93 38 06 00 00    	mov    %edx,0x638(%rbx)
ffffffff8021704d:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80217051:	48 8b 15 90 72 00 00 	mov    0x7290(%rip),%rdx        # ffffffff8021e2e8 <RME_X64_Pgflg_RME2NAT+0xca8>
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff80217058:	66 89 8b 36 06 00 00 	mov    %cx,0x636(%rbx)
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8021705f:	66 89 93 40 06 00 00 	mov    %dx,0x640(%rbx)
ffffffff80217066:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217069:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021706d:	89 93 48 06 00 00    	mov    %edx,0x648(%rbx)
ffffffff80217073:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217077:	48 8b 15 a2 72 00 00 	mov    0x72a2(%rip),%rdx        # ffffffff8021e320 <RME_X64_Pgflg_RME2NAT+0xce0>
ffffffff8021707e:	66 89 8b 46 06 00 00 	mov    %cx,0x646(%rbx)
ffffffff80217085:	66 89 93 50 06 00 00 	mov    %dx,0x650(%rbx)
ffffffff8021708c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021708f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217093:	89 93 58 06 00 00    	mov    %edx,0x658(%rbx)
ffffffff80217099:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8021709d:	48 8b 15 fc 71 00 00 	mov    0x71fc(%rip),%rdx        # ffffffff8021e2a0 <RME_X64_Pgflg_RME2NAT+0xc60>
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff802170a4:	66 89 8b 56 06 00 00 	mov    %cx,0x656(%rbx)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff802170ab:	66 89 93 60 06 00 00 	mov    %dx,0x660(%rbx)
ffffffff802170b2:	48 89 d1             	mov    %rdx,%rcx
ffffffff802170b5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802170b9:	89 93 68 06 00 00    	mov    %edx,0x668(%rbx)
ffffffff802170bf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802170c3:	48 8b 15 7e 71 00 00 	mov    0x717e(%rip),%rdx        # ffffffff8021e248 <RME_X64_Pgflg_RME2NAT+0xc08>
ffffffff802170ca:	66 89 8b 66 06 00 00 	mov    %cx,0x666(%rbx)
ffffffff802170d1:	66 89 93 70 06 00 00 	mov    %dx,0x670(%rbx)
ffffffff802170d8:	48 89 d1             	mov    %rdx,%rcx
ffffffff802170db:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802170df:	89 93 78 06 00 00    	mov    %edx,0x678(%rbx)
ffffffff802170e5:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff802170e9:	48 8b 15 50 73 00 00 	mov    0x7350(%rip),%rdx        # ffffffff8021e440 <RME_X64_Pgflg_RME2NAT+0xe00>
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff802170f0:	66 89 8b 76 06 00 00 	mov    %cx,0x676(%rbx)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff802170f7:	66 89 93 80 06 00 00 	mov    %dx,0x680(%rbx)
ffffffff802170fe:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217101:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff80217105:	c7 83 3c 06 00 00 00 	movl   $0x0,0x63c(%rbx)
ffffffff8021710c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8021710f:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80217113:	c7 83 42 06 00 00 08 	movl   $0x8e000008,0x642(%rbx)
ffffffff8021711a:	00 00 8e 
ffffffff8021711d:	c7 83 4c 06 00 00 00 	movl   $0x0,0x64c(%rbx)
ffffffff80217124:	00 00 00 
ffffffff80217127:	c7 83 52 06 00 00 08 	movl   $0x8e000008,0x652(%rbx)
ffffffff8021712e:	00 00 8e 
ffffffff80217131:	c7 83 5c 06 00 00 00 	movl   $0x0,0x65c(%rbx)
ffffffff80217138:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8021713b:	c7 83 62 06 00 00 08 	movl   $0x8e000008,0x662(%rbx)
ffffffff80217142:	00 00 8e 
ffffffff80217145:	c7 83 6c 06 00 00 00 	movl   $0x0,0x66c(%rbx)
ffffffff8021714c:	00 00 00 
ffffffff8021714f:	c7 83 72 06 00 00 08 	movl   $0x8e000008,0x672(%rbx)
ffffffff80217156:	00 00 8e 
ffffffff80217159:	c7 83 7c 06 00 00 00 	movl   $0x0,0x67c(%rbx)
ffffffff80217160:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff80217163:	c7 83 82 06 00 00 08 	movl   $0x8e000008,0x682(%rbx)
ffffffff8021716a:	00 00 8e 
ffffffff8021716d:	89 93 88 06 00 00    	mov    %edx,0x688(%rbx)
ffffffff80217173:	48 8b 15 c6 6e 00 00 	mov    0x6ec6(%rip),%rdx        # ffffffff8021e040 <RME_X64_Pgflg_RME2NAT+0xa00>
ffffffff8021717a:	66 89 8b 86 06 00 00 	mov    %cx,0x686(%rbx)
ffffffff80217181:	66 89 93 90 06 00 00 	mov    %dx,0x690(%rbx)
ffffffff80217188:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021718b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021718f:	89 93 98 06 00 00    	mov    %edx,0x698(%rbx)
ffffffff80217195:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff80217199:	48 8b 15 e8 74 00 00 	mov    0x74e8(%rip),%rdx        # ffffffff8021e688 <RME_X64_Pgflg_RME2NAT+0x1048>
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff802171a0:	66 89 8b 96 06 00 00 	mov    %cx,0x696(%rbx)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff802171a7:	66 89 93 a0 06 00 00 	mov    %dx,0x6a0(%rbx)
ffffffff802171ae:	48 89 d1             	mov    %rdx,%rcx
ffffffff802171b1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802171b5:	89 93 a8 06 00 00    	mov    %edx,0x6a8(%rbx)
ffffffff802171bb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802171bf:	48 8b 15 2a 73 00 00 	mov    0x732a(%rip),%rdx        # ffffffff8021e4f0 <RME_X64_Pgflg_RME2NAT+0xeb0>
ffffffff802171c6:	66 89 8b a6 06 00 00 	mov    %cx,0x6a6(%rbx)
ffffffff802171cd:	66 89 93 b0 06 00 00 	mov    %dx,0x6b0(%rbx)
ffffffff802171d4:	48 89 d1             	mov    %rdx,%rcx
ffffffff802171d7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802171db:	89 93 b8 06 00 00    	mov    %edx,0x6b8(%rbx)
ffffffff802171e1:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff802171e5:	48 8b 15 14 75 00 00 	mov    0x7514(%rip),%rdx        # ffffffff8021e700 <RME_X64_Pgflg_RME2NAT+0x10c0>
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff802171ec:	66 89 8b b6 06 00 00 	mov    %cx,0x6b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff802171f3:	48 89 d1             	mov    %rdx,%rcx
ffffffff802171f6:	66 89 93 c0 06 00 00 	mov    %dx,0x6c0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff802171fd:	c7 83 8c 06 00 00 00 	movl   $0x0,0x68c(%rbx)
ffffffff80217204:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff80217207:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021720b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021720f:	89 93 c8 06 00 00    	mov    %edx,0x6c8(%rbx)
ffffffff80217215:	48 8b 15 cc 6f 00 00 	mov    0x6fcc(%rip),%rdx        # ffffffff8021e1e8 <RME_X64_Pgflg_RME2NAT+0xba8>
ffffffff8021721c:	66 89 8b c6 06 00 00 	mov    %cx,0x6c6(%rbx)
ffffffff80217223:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217226:	66 89 93 d0 06 00 00 	mov    %dx,0x6d0(%rbx)
ffffffff8021722d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217231:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217235:	89 93 d8 06 00 00    	mov    %edx,0x6d8(%rbx)
ffffffff8021723b:	66 89 8b d6 06 00 00 	mov    %cx,0x6d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff80217242:	c7 83 92 06 00 00 08 	movl   $0x8e000008,0x692(%rbx)
ffffffff80217249:	00 00 8e 
ffffffff8021724c:	c7 83 9c 06 00 00 00 	movl   $0x0,0x69c(%rbx)
ffffffff80217253:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff80217256:	c7 83 a2 06 00 00 08 	movl   $0x8e000008,0x6a2(%rbx)
ffffffff8021725d:	00 00 8e 
ffffffff80217260:	c7 83 ac 06 00 00 00 	movl   $0x0,0x6ac(%rbx)
ffffffff80217267:	00 00 00 
ffffffff8021726a:	c7 83 b2 06 00 00 08 	movl   $0x8e000008,0x6b2(%rbx)
ffffffff80217271:	00 00 8e 
ffffffff80217274:	c7 83 bc 06 00 00 00 	movl   $0x0,0x6bc(%rbx)
ffffffff8021727b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8021727e:	c7 83 c2 06 00 00 08 	movl   $0x8e000008,0x6c2(%rbx)
ffffffff80217285:	00 00 8e 
ffffffff80217288:	c7 83 cc 06 00 00 00 	movl   $0x0,0x6cc(%rbx)
ffffffff8021728f:	00 00 00 
ffffffff80217292:	c7 83 d2 06 00 00 08 	movl   $0x8e000008,0x6d2(%rbx)
ffffffff80217299:	00 00 8e 
ffffffff8021729c:	c7 83 dc 06 00 00 00 	movl   $0x0,0x6dc(%rbx)
ffffffff802172a3:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff802172a6:	48 8b 15 43 73 00 00 	mov    0x7343(%rip),%rdx        # ffffffff8021e5f0 <RME_X64_Pgflg_RME2NAT+0xfb0>
ffffffff802172ad:	c7 83 e2 06 00 00 08 	movl   $0x8e000008,0x6e2(%rbx)
ffffffff802172b4:	00 00 8e 
ffffffff802172b7:	66 89 93 e0 06 00 00 	mov    %dx,0x6e0(%rbx)
ffffffff802172be:	48 89 d1             	mov    %rdx,%rcx
ffffffff802172c1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802172c5:	89 93 e8 06 00 00    	mov    %edx,0x6e8(%rbx)
ffffffff802172cb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802172cf:	48 8b 15 9a 73 00 00 	mov    0x739a(%rip),%rdx        # ffffffff8021e670 <RME_X64_Pgflg_RME2NAT+0x1030>
ffffffff802172d6:	66 89 8b e6 06 00 00 	mov    %cx,0x6e6(%rbx)
ffffffff802172dd:	66 89 93 f0 06 00 00 	mov    %dx,0x6f0(%rbx)
ffffffff802172e4:	48 89 d1             	mov    %rdx,%rcx
ffffffff802172e7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802172eb:	89 93 f8 06 00 00    	mov    %edx,0x6f8(%rbx)
ffffffff802172f1:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff802172f5:	48 8b 15 24 72 00 00 	mov    0x7224(%rip),%rdx        # ffffffff8021e520 <RME_X64_Pgflg_RME2NAT+0xee0>
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff802172fc:	66 89 8b f6 06 00 00 	mov    %cx,0x6f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80217303:	66 89 93 00 07 00 00 	mov    %dx,0x700(%rbx)
ffffffff8021730a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021730d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217311:	89 93 08 07 00 00    	mov    %edx,0x708(%rbx)
ffffffff80217317:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021731b:	48 8b 15 66 72 00 00 	mov    0x7266(%rip),%rdx        # ffffffff8021e588 <RME_X64_Pgflg_RME2NAT+0xf48>
ffffffff80217322:	66 89 8b 06 07 00 00 	mov    %cx,0x706(%rbx)
ffffffff80217329:	66 89 93 10 07 00 00 	mov    %dx,0x710(%rbx)
ffffffff80217330:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217333:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217337:	89 93 18 07 00 00    	mov    %edx,0x718(%rbx)
ffffffff8021733d:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80217341:	48 8b 15 f8 6e 00 00 	mov    0x6ef8(%rip),%rdx        # ffffffff8021e240 <RME_X64_Pgflg_RME2NAT+0xc00>
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80217348:	66 89 8b 16 07 00 00 	mov    %cx,0x716(%rbx)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8021734f:	66 89 93 20 07 00 00 	mov    %dx,0x720(%rbx)
ffffffff80217356:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217359:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021735d:	89 93 28 07 00 00    	mov    %edx,0x728(%rbx)
ffffffff80217363:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217367:	48 8b 15 52 6d 00 00 	mov    0x6d52(%rip),%rdx        # ffffffff8021e0c0 <RME_X64_Pgflg_RME2NAT+0xa80>
ffffffff8021736e:	66 89 8b 26 07 00 00 	mov    %cx,0x726(%rbx)
ffffffff80217375:	66 89 93 30 07 00 00 	mov    %dx,0x730(%rbx)
ffffffff8021737c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021737f:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80217383:	c7 83 ec 06 00 00 00 	movl   $0x0,0x6ec(%rbx)
ffffffff8021738a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8021738d:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80217391:	c7 83 f2 06 00 00 08 	movl   $0x8e000008,0x6f2(%rbx)
ffffffff80217398:	00 00 8e 
ffffffff8021739b:	c7 83 fc 06 00 00 00 	movl   $0x0,0x6fc(%rbx)
ffffffff802173a2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff802173a5:	c7 83 02 07 00 00 08 	movl   $0x8e000008,0x702(%rbx)
ffffffff802173ac:	00 00 8e 
ffffffff802173af:	c7 83 0c 07 00 00 00 	movl   $0x0,0x70c(%rbx)
ffffffff802173b6:	00 00 00 
ffffffff802173b9:	c7 83 12 07 00 00 08 	movl   $0x8e000008,0x712(%rbx)
ffffffff802173c0:	00 00 8e 
ffffffff802173c3:	c7 83 1c 07 00 00 00 	movl   $0x0,0x71c(%rbx)
ffffffff802173ca:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff802173cd:	c7 83 22 07 00 00 08 	movl   $0x8e000008,0x722(%rbx)
ffffffff802173d4:	00 00 8e 
ffffffff802173d7:	c7 83 2c 07 00 00 00 	movl   $0x0,0x72c(%rbx)
ffffffff802173de:	00 00 00 
ffffffff802173e1:	c7 83 32 07 00 00 08 	movl   $0x8e000008,0x732(%rbx)
ffffffff802173e8:	00 00 8e 
ffffffff802173eb:	89 93 38 07 00 00    	mov    %edx,0x738(%rbx)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff802173f1:	48 8b 15 f0 72 00 00 	mov    0x72f0(%rip),%rdx        # ffffffff8021e6e8 <RME_X64_Pgflg_RME2NAT+0x10a8>
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff802173f8:	66 89 8b 36 07 00 00 	mov    %cx,0x736(%rbx)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff802173ff:	66 89 93 40 07 00 00 	mov    %dx,0x740(%rbx)
ffffffff80217406:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217409:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021740d:	89 93 48 07 00 00    	mov    %edx,0x748(%rbx)
ffffffff80217413:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217417:	48 8b 15 7a 70 00 00 	mov    0x707a(%rip),%rdx        # ffffffff8021e498 <RME_X64_Pgflg_RME2NAT+0xe58>
ffffffff8021741e:	66 89 8b 46 07 00 00 	mov    %cx,0x746(%rbx)
ffffffff80217425:	66 89 93 50 07 00 00 	mov    %dx,0x750(%rbx)
ffffffff8021742c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021742f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217433:	89 93 58 07 00 00    	mov    %edx,0x758(%rbx)
ffffffff80217439:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8021743d:	48 8b 15 ec 6d 00 00 	mov    0x6dec(%rip),%rdx        # ffffffff8021e230 <RME_X64_Pgflg_RME2NAT+0xbf0>
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80217444:	66 89 8b 56 07 00 00 	mov    %cx,0x756(%rbx)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8021744b:	66 89 93 60 07 00 00 	mov    %dx,0x760(%rbx)
ffffffff80217452:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217455:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217459:	89 93 68 07 00 00    	mov    %edx,0x768(%rbx)
ffffffff8021745f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217463:	48 8b 15 be 6c 00 00 	mov    0x6cbe(%rip),%rdx        # ffffffff8021e128 <RME_X64_Pgflg_RME2NAT+0xae8>
ffffffff8021746a:	66 89 8b 66 07 00 00 	mov    %cx,0x766(%rbx)
ffffffff80217471:	66 89 93 70 07 00 00 	mov    %dx,0x770(%rbx)
ffffffff80217478:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021747b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021747f:	89 93 78 07 00 00    	mov    %edx,0x778(%rbx)
ffffffff80217485:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80217489:	48 8b 15 d8 6b 00 00 	mov    0x6bd8(%rip),%rdx        # ffffffff8021e068 <RME_X64_Pgflg_RME2NAT+0xa28>
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80217490:	66 89 8b 76 07 00 00 	mov    %cx,0x776(%rbx)
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80217497:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021749a:	66 89 93 80 07 00 00 	mov    %dx,0x780(%rbx)
ffffffff802174a1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802174a5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802174a9:	89 93 88 07 00 00    	mov    %edx,0x788(%rbx)
ffffffff802174af:	66 89 8b 86 07 00 00 	mov    %cx,0x786(%rbx)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff802174b6:	c7 83 3c 07 00 00 00 	movl   $0x0,0x73c(%rbx)
ffffffff802174bd:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff802174c0:	c7 83 42 07 00 00 08 	movl   $0x8e000008,0x742(%rbx)
ffffffff802174c7:	00 00 8e 
ffffffff802174ca:	c7 83 4c 07 00 00 00 	movl   $0x0,0x74c(%rbx)
ffffffff802174d1:	00 00 00 
ffffffff802174d4:	c7 83 52 07 00 00 08 	movl   $0x8e000008,0x752(%rbx)
ffffffff802174db:	00 00 8e 
ffffffff802174de:	c7 83 5c 07 00 00 00 	movl   $0x0,0x75c(%rbx)
ffffffff802174e5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff802174e8:	c7 83 62 07 00 00 08 	movl   $0x8e000008,0x762(%rbx)
ffffffff802174ef:	00 00 8e 
ffffffff802174f2:	c7 83 6c 07 00 00 00 	movl   $0x0,0x76c(%rbx)
ffffffff802174f9:	00 00 00 
ffffffff802174fc:	c7 83 72 07 00 00 08 	movl   $0x8e000008,0x772(%rbx)
ffffffff80217503:	00 00 8e 
ffffffff80217506:	c7 83 7c 07 00 00 00 	movl   $0x0,0x77c(%rbx)
ffffffff8021750d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80217510:	c7 83 82 07 00 00 08 	movl   $0x8e000008,0x782(%rbx)
ffffffff80217517:	00 00 8e 
ffffffff8021751a:	c7 83 8c 07 00 00 00 	movl   $0x0,0x78c(%rbx)
ffffffff80217521:	00 00 00 
ffffffff80217524:	48 8b 15 d5 6c 00 00 	mov    0x6cd5(%rip),%rdx        # ffffffff8021e200 <RME_X64_Pgflg_RME2NAT+0xbc0>
ffffffff8021752b:	c7 83 92 07 00 00 08 	movl   $0x8e000008,0x792(%rbx)
ffffffff80217532:	00 00 8e 
ffffffff80217535:	66 89 93 90 07 00 00 	mov    %dx,0x790(%rbx)
ffffffff8021753c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021753f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217543:	89 93 98 07 00 00    	mov    %edx,0x798(%rbx)
ffffffff80217549:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8021754d:	48 8b 15 dc 70 00 00 	mov    0x70dc(%rip),%rdx        # ffffffff8021e630 <RME_X64_Pgflg_RME2NAT+0xff0>
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80217554:	66 89 8b 96 07 00 00 	mov    %cx,0x796(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8021755b:	66 89 93 a0 07 00 00 	mov    %dx,0x7a0(%rbx)
ffffffff80217562:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217565:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217569:	89 93 a8 07 00 00    	mov    %edx,0x7a8(%rbx)
ffffffff8021756f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217573:	48 8b 15 46 6e 00 00 	mov    0x6e46(%rip),%rdx        # ffffffff8021e3c0 <RME_X64_Pgflg_RME2NAT+0xd80>
ffffffff8021757a:	66 89 8b a6 07 00 00 	mov    %cx,0x7a6(%rbx)
ffffffff80217581:	66 89 93 b0 07 00 00 	mov    %dx,0x7b0(%rbx)
ffffffff80217588:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021758b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021758f:	89 93 b8 07 00 00    	mov    %edx,0x7b8(%rbx)
ffffffff80217595:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80217599:	48 8b 15 f8 6b 00 00 	mov    0x6bf8(%rip),%rdx        # ffffffff8021e198 <RME_X64_Pgflg_RME2NAT+0xb58>
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff802175a0:	66 89 8b b6 07 00 00 	mov    %cx,0x7b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff802175a7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802175aa:	66 89 93 c0 07 00 00 	mov    %dx,0x7c0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff802175b1:	c7 83 9c 07 00 00 00 	movl   $0x0,0x79c(%rbx)
ffffffff802175b8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff802175bb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802175bf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802175c3:	89 93 c8 07 00 00    	mov    %edx,0x7c8(%rbx)
ffffffff802175c9:	48 8b 15 90 70 00 00 	mov    0x7090(%rip),%rdx        # ffffffff8021e660 <RME_X64_Pgflg_RME2NAT+0x1020>
ffffffff802175d0:	66 89 8b c6 07 00 00 	mov    %cx,0x7c6(%rbx)
ffffffff802175d7:	66 89 93 d0 07 00 00 	mov    %dx,0x7d0(%rbx)
ffffffff802175de:	48 89 d1             	mov    %rdx,%rcx
ffffffff802175e1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802175e5:	89 93 d8 07 00 00    	mov    %edx,0x7d8(%rbx)
ffffffff802175eb:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff802175ef:	48 8b 15 d2 6b 00 00 	mov    0x6bd2(%rip),%rdx        # ffffffff8021e1c8 <RME_X64_Pgflg_RME2NAT+0xb88>
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff802175f6:	66 89 8b d6 07 00 00 	mov    %cx,0x7d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff802175fd:	66 89 93 e0 07 00 00 	mov    %dx,0x7e0(%rbx)
ffffffff80217604:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217607:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8021760b:	c7 83 a2 07 00 00 08 	movl   $0x8e000008,0x7a2(%rbx)
ffffffff80217612:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80217615:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80217619:	c7 83 ac 07 00 00 00 	movl   $0x0,0x7ac(%rbx)
ffffffff80217620:	00 00 00 
ffffffff80217623:	c7 83 b2 07 00 00 08 	movl   $0x8e000008,0x7b2(%rbx)
ffffffff8021762a:	00 00 8e 
ffffffff8021762d:	c7 83 bc 07 00 00 00 	movl   $0x0,0x7bc(%rbx)
ffffffff80217634:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80217637:	c7 83 c2 07 00 00 08 	movl   $0x8e000008,0x7c2(%rbx)
ffffffff8021763e:	00 00 8e 
ffffffff80217641:	c7 83 cc 07 00 00 00 	movl   $0x0,0x7cc(%rbx)
ffffffff80217648:	00 00 00 
ffffffff8021764b:	c7 83 d2 07 00 00 08 	movl   $0x8e000008,0x7d2(%rbx)
ffffffff80217652:	00 00 8e 
ffffffff80217655:	c7 83 dc 07 00 00 00 	movl   $0x0,0x7dc(%rbx)
ffffffff8021765c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8021765f:	c7 83 e2 07 00 00 08 	movl   $0x8e000008,0x7e2(%rbx)
ffffffff80217666:	00 00 8e 
ffffffff80217669:	89 93 e8 07 00 00    	mov    %edx,0x7e8(%rbx)
ffffffff8021766f:	48 8b 15 22 6a 00 00 	mov    0x6a22(%rip),%rdx        # ffffffff8021e098 <RME_X64_Pgflg_RME2NAT+0xa58>
ffffffff80217676:	66 89 8b e6 07 00 00 	mov    %cx,0x7e6(%rbx)
ffffffff8021767d:	66 89 93 f0 07 00 00 	mov    %dx,0x7f0(%rbx)
ffffffff80217684:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217687:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021768b:	89 93 f8 07 00 00    	mov    %edx,0x7f8(%rbx)
ffffffff80217691:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80217695:	48 8b 15 64 6c 00 00 	mov    0x6c64(%rip),%rdx        # ffffffff8021e300 <RME_X64_Pgflg_RME2NAT+0xcc0>
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8021769c:	66 89 8b f6 07 00 00 	mov    %cx,0x7f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff802176a3:	66 89 93 00 08 00 00 	mov    %dx,0x800(%rbx)
ffffffff802176aa:	48 89 d1             	mov    %rdx,%rcx
ffffffff802176ad:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802176b1:	89 93 08 08 00 00    	mov    %edx,0x808(%rbx)
ffffffff802176b7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802176bb:	48 8b 15 4e 6e 00 00 	mov    0x6e4e(%rip),%rdx        # ffffffff8021e510 <RME_X64_Pgflg_RME2NAT+0xed0>
ffffffff802176c2:	66 89 8b 06 08 00 00 	mov    %cx,0x806(%rbx)
ffffffff802176c9:	66 89 93 10 08 00 00 	mov    %dx,0x810(%rbx)
ffffffff802176d0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802176d3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802176d7:	89 93 18 08 00 00    	mov    %edx,0x818(%rbx)
ffffffff802176dd:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff802176e1:	48 8b 15 18 69 00 00 	mov    0x6918(%rip),%rdx        # ffffffff8021e000 <RME_X64_Pgflg_RME2NAT+0x9c0>
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff802176e8:	66 89 8b 16 08 00 00 	mov    %cx,0x816(%rbx)
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff802176ef:	66 89 93 20 08 00 00 	mov    %dx,0x820(%rbx)
ffffffff802176f6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802176f9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802176fd:	89 93 28 08 00 00    	mov    %edx,0x828(%rbx)
ffffffff80217703:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217707:	48 8b 15 aa 6f 00 00 	mov    0x6faa(%rip),%rdx        # ffffffff8021e6b8 <RME_X64_Pgflg_RME2NAT+0x1078>
ffffffff8021770e:	66 89 8b 26 08 00 00 	mov    %cx,0x826(%rbx)
ffffffff80217715:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217718:	66 89 93 30 08 00 00 	mov    %dx,0x830(%rbx)
ffffffff8021771f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217723:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80217727:	66 89 83 14 08 00 00 	mov    %ax,0x814(%rbx)
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8021772e:	66 89 8b 36 08 00 00 	mov    %cx,0x836(%rbx)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80217735:	c7 83 ec 07 00 00 00 	movl   $0x0,0x7ec(%rbx)
ffffffff8021773c:	00 00 00 
ffffffff8021773f:	c7 83 f2 07 00 00 08 	movl   $0x8e000008,0x7f2(%rbx)
ffffffff80217746:	00 00 8e 
ffffffff80217749:	c7 83 fc 07 00 00 00 	movl   $0x0,0x7fc(%rbx)
ffffffff80217750:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80217753:	c7 83 02 08 00 00 08 	movl   $0x8e000008,0x802(%rbx)
ffffffff8021775a:	00 00 8e 
ffffffff8021775d:	c7 83 0c 08 00 00 00 	movl   $0x0,0x80c(%rbx)
ffffffff80217764:	00 00 00 
ffffffff80217767:	66 44 89 83 12 08 00 	mov    %r8w,0x812(%rbx)
ffffffff8021776e:	00 
ffffffff8021776f:	c7 83 1c 08 00 00 00 	movl   $0x0,0x81c(%rbx)
ffffffff80217776:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff80217779:	c7 83 22 08 00 00 08 	movl   $0x8e000008,0x822(%rbx)
ffffffff80217780:	00 00 8e 
ffffffff80217783:	c7 83 2c 08 00 00 00 	movl   $0x0,0x82c(%rbx)
ffffffff8021778a:	00 00 00 
ffffffff8021778d:	c7 83 32 08 00 00 08 	movl   $0x8e000008,0x832(%rbx)
ffffffff80217794:	00 00 8e 
ffffffff80217797:	89 93 38 08 00 00    	mov    %edx,0x838(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8021779d:	48 8b 15 ec 6d 00 00 	mov    0x6dec(%rip),%rdx        # ffffffff8021e590 <RME_X64_Pgflg_RME2NAT+0xf50>
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff802177a4:	c7 83 3c 08 00 00 00 	movl   $0x0,0x83c(%rbx)
ffffffff802177ab:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff802177ae:	66 89 93 40 08 00 00 	mov    %dx,0x840(%rbx)
ffffffff802177b5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802177b8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802177bc:	89 93 48 08 00 00    	mov    %edx,0x848(%rbx)
ffffffff802177c2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802177c6:	48 8b 15 ab 69 00 00 	mov    0x69ab(%rip),%rdx        # ffffffff8021e178 <RME_X64_Pgflg_RME2NAT+0xb38>
ffffffff802177cd:	66 89 8b 46 08 00 00 	mov    %cx,0x846(%rbx)
ffffffff802177d4:	66 89 93 50 08 00 00 	mov    %dx,0x850(%rbx)
ffffffff802177db:	48 89 d1             	mov    %rdx,%rcx
ffffffff802177de:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802177e2:	89 93 58 08 00 00    	mov    %edx,0x858(%rbx)
ffffffff802177e8:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff802177ec:	48 8b 15 8d 6e 00 00 	mov    0x6e8d(%rip),%rdx        # ffffffff8021e680 <RME_X64_Pgflg_RME2NAT+0x1040>
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff802177f3:	66 89 8b 56 08 00 00 	mov    %cx,0x856(%rbx)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff802177fa:	66 89 93 60 08 00 00 	mov    %dx,0x860(%rbx)
ffffffff80217801:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217804:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217808:	89 93 68 08 00 00    	mov    %edx,0x868(%rbx)
ffffffff8021780e:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217812:	48 8b 15 6f 68 00 00 	mov    0x686f(%rip),%rdx        # ffffffff8021e088 <RME_X64_Pgflg_RME2NAT+0xa48>
ffffffff80217819:	66 89 8b 66 08 00 00 	mov    %cx,0x866(%rbx)
ffffffff80217820:	66 89 93 70 08 00 00 	mov    %dx,0x870(%rbx)
ffffffff80217827:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021782a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021782e:	89 93 78 08 00 00    	mov    %edx,0x878(%rbx)
ffffffff80217834:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80217838:	48 8b 15 31 68 00 00 	mov    0x6831(%rip),%rdx        # ffffffff8021e070 <RME_X64_Pgflg_RME2NAT+0xa30>
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8021783f:	66 89 8b 76 08 00 00 	mov    %cx,0x876(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80217846:	66 89 93 80 08 00 00 	mov    %dx,0x880(%rbx)
ffffffff8021784d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217850:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217854:	89 93 88 08 00 00    	mov    %edx,0x888(%rbx)
ffffffff8021785a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021785e:	48 8b 15 43 6d 00 00 	mov    0x6d43(%rip),%rdx        # ffffffff8021e5a8 <RME_X64_Pgflg_RME2NAT+0xf68>
ffffffff80217865:	66 89 8b 86 08 00 00 	mov    %cx,0x886(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8021786c:	c7 83 42 08 00 00 08 	movl   $0x8e000008,0x842(%rbx)
ffffffff80217873:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80217876:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80217879:	c7 83 4c 08 00 00 00 	movl   $0x0,0x84c(%rbx)
ffffffff80217880:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80217883:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80217887:	c7 83 52 08 00 00 08 	movl   $0x8e000008,0x852(%rbx)
ffffffff8021788e:	00 00 8e 
ffffffff80217891:	c7 83 5c 08 00 00 00 	movl   $0x0,0x85c(%rbx)
ffffffff80217898:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8021789b:	c7 83 62 08 00 00 08 	movl   $0x8e000008,0x862(%rbx)
ffffffff802178a2:	00 00 8e 
ffffffff802178a5:	c7 83 6c 08 00 00 00 	movl   $0x0,0x86c(%rbx)
ffffffff802178ac:	00 00 00 
ffffffff802178af:	c7 83 72 08 00 00 08 	movl   $0x8e000008,0x872(%rbx)
ffffffff802178b6:	00 00 8e 
ffffffff802178b9:	c7 83 7c 08 00 00 00 	movl   $0x0,0x87c(%rbx)
ffffffff802178c0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff802178c3:	c7 83 82 08 00 00 08 	movl   $0x8e000008,0x882(%rbx)
ffffffff802178ca:	00 00 8e 
ffffffff802178cd:	c7 83 8c 08 00 00 00 	movl   $0x0,0x88c(%rbx)
ffffffff802178d4:	00 00 00 
ffffffff802178d7:	66 89 93 90 08 00 00 	mov    %dx,0x890(%rbx)
ffffffff802178de:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802178e2:	89 93 98 08 00 00    	mov    %edx,0x898(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff802178e8:	48 8b 15 89 6a 00 00 	mov    0x6a89(%rip),%rdx        # ffffffff8021e378 <RME_X64_Pgflg_RME2NAT+0xd38>
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff802178ef:	66 89 8b 96 08 00 00 	mov    %cx,0x896(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff802178f6:	66 89 93 a0 08 00 00 	mov    %dx,0x8a0(%rbx)
ffffffff802178fd:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217900:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217904:	89 93 a8 08 00 00    	mov    %edx,0x8a8(%rbx)
ffffffff8021790a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021790e:	48 8b 15 93 6e 00 00 	mov    0x6e93(%rip),%rdx        # ffffffff8021e7a8 <RME_X64_Pgflg_RME2NAT+0x1168>
ffffffff80217915:	66 89 8b a6 08 00 00 	mov    %cx,0x8a6(%rbx)
ffffffff8021791c:	66 89 93 b0 08 00 00 	mov    %dx,0x8b0(%rbx)
ffffffff80217923:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217926:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021792a:	89 93 b8 08 00 00    	mov    %edx,0x8b8(%rbx)
ffffffff80217930:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217934:	48 8b 15 0d 6c 00 00 	mov    0x6c0d(%rip),%rdx        # ffffffff8021e548 <RME_X64_Pgflg_RME2NAT+0xf08>
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff8021793b:	66 89 8b b6 08 00 00 	mov    %cx,0x8b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217942:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217945:	66 89 93 c0 08 00 00 	mov    %dx,0x8c0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8021794c:	c7 83 92 08 00 00 08 	movl   $0x8e000008,0x892(%rbx)
ffffffff80217953:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217956:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021795a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021795e:	89 93 c8 08 00 00    	mov    %edx,0x8c8(%rbx)
ffffffff80217964:	48 8b 15 05 6a 00 00 	mov    0x6a05(%rip),%rdx        # ffffffff8021e370 <RME_X64_Pgflg_RME2NAT+0xd30>
ffffffff8021796b:	66 89 8b c6 08 00 00 	mov    %cx,0x8c6(%rbx)
ffffffff80217972:	66 89 93 d0 08 00 00 	mov    %dx,0x8d0(%rbx)
ffffffff80217979:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021797c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217980:	89 93 d8 08 00 00    	mov    %edx,0x8d8(%rbx)
ffffffff80217986:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8021798a:	48 8b 15 0f 6b 00 00 	mov    0x6b0f(%rip),%rdx        # ffffffff8021e4a0 <RME_X64_Pgflg_RME2NAT+0xe60>
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217991:	66 89 8b d6 08 00 00 	mov    %cx,0x8d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80217998:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021799b:	66 89 93 e0 08 00 00 	mov    %dx,0x8e0(%rbx)
ffffffff802179a2:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff802179a6:	c7 83 9c 08 00 00 00 	movl   $0x0,0x89c(%rbx)
ffffffff802179ad:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff802179b0:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802179b4:	66 89 8b e6 08 00 00 	mov    %cx,0x8e6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff802179bb:	c7 83 a2 08 00 00 08 	movl   $0x8e000008,0x8a2(%rbx)
ffffffff802179c2:	00 00 8e 
ffffffff802179c5:	c7 83 ac 08 00 00 00 	movl   $0x0,0x8ac(%rbx)
ffffffff802179cc:	00 00 00 
ffffffff802179cf:	c7 83 b2 08 00 00 08 	movl   $0x8e000008,0x8b2(%rbx)
ffffffff802179d6:	00 00 8e 
ffffffff802179d9:	c7 83 bc 08 00 00 00 	movl   $0x0,0x8bc(%rbx)
ffffffff802179e0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff802179e3:	c7 83 c2 08 00 00 08 	movl   $0x8e000008,0x8c2(%rbx)
ffffffff802179ea:	00 00 8e 
ffffffff802179ed:	c7 83 cc 08 00 00 00 	movl   $0x0,0x8cc(%rbx)
ffffffff802179f4:	00 00 00 
ffffffff802179f7:	c7 83 d2 08 00 00 08 	movl   $0x8e000008,0x8d2(%rbx)
ffffffff802179fe:	00 00 8e 
ffffffff80217a01:	c7 83 dc 08 00 00 00 	movl   $0x0,0x8dc(%rbx)
ffffffff80217a08:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80217a0b:	c7 83 e2 08 00 00 08 	movl   $0x8e000008,0x8e2(%rbx)
ffffffff80217a12:	00 00 8e 
ffffffff80217a15:	89 93 e8 08 00 00    	mov    %edx,0x8e8(%rbx)
ffffffff80217a1b:	48 8b 15 e6 68 00 00 	mov    0x68e6(%rip),%rdx        # ffffffff8021e308 <RME_X64_Pgflg_RME2NAT+0xcc8>
ffffffff80217a22:	c7 83 ec 08 00 00 00 	movl   $0x0,0x8ec(%rbx)
ffffffff80217a29:	00 00 00 
ffffffff80217a2c:	66 89 93 f0 08 00 00 	mov    %dx,0x8f0(%rbx)
ffffffff80217a33:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a36:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a3a:	89 93 f8 08 00 00    	mov    %edx,0x8f8(%rbx)
ffffffff80217a40:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff80217a44:	48 8b 15 9d 6a 00 00 	mov    0x6a9d(%rip),%rdx        # ffffffff8021e4e8 <RME_X64_Pgflg_RME2NAT+0xea8>
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80217a4b:	66 89 8b f6 08 00 00 	mov    %cx,0x8f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff80217a52:	66 89 93 00 09 00 00 	mov    %dx,0x900(%rbx)
ffffffff80217a59:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a5c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a60:	89 93 08 09 00 00    	mov    %edx,0x908(%rbx)
ffffffff80217a66:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217a6a:	48 8b 15 4f 67 00 00 	mov    0x674f(%rip),%rdx        # ffffffff8021e1c0 <RME_X64_Pgflg_RME2NAT+0xb80>
ffffffff80217a71:	66 89 8b 06 09 00 00 	mov    %cx,0x906(%rbx)
ffffffff80217a78:	66 89 93 10 09 00 00 	mov    %dx,0x910(%rbx)
ffffffff80217a7f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a82:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a86:	89 93 18 09 00 00    	mov    %edx,0x918(%rbx)
ffffffff80217a8c:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80217a90:	48 8b 15 c1 6b 00 00 	mov    0x6bc1(%rip),%rdx        # ffffffff8021e658 <RME_X64_Pgflg_RME2NAT+0x1018>
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff80217a97:	66 89 8b 16 09 00 00 	mov    %cx,0x916(%rbx)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80217a9e:	66 89 93 20 09 00 00 	mov    %dx,0x920(%rbx)
ffffffff80217aa5:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217aa8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217aac:	89 93 28 09 00 00    	mov    %edx,0x928(%rbx)
ffffffff80217ab2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ab6:	48 8b 15 23 6b 00 00 	mov    0x6b23(%rip),%rdx        # ffffffff8021e5e0 <RME_X64_Pgflg_RME2NAT+0xfa0>
ffffffff80217abd:	66 89 8b 26 09 00 00 	mov    %cx,0x926(%rbx)
ffffffff80217ac4:	66 89 93 30 09 00 00 	mov    %dx,0x930(%rbx)
ffffffff80217acb:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217ace:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217ad2:	89 93 38 09 00 00    	mov    %edx,0x938(%rbx)
ffffffff80217ad8:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80217adc:	48 8b 15 55 67 00 00 	mov    0x6755(%rip),%rdx        # ffffffff8021e238 <RME_X64_Pgflg_RME2NAT+0xbf8>
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80217ae3:	66 89 8b 36 09 00 00 	mov    %cx,0x936(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80217aea:	c7 83 f2 08 00 00 08 	movl   $0x8e000008,0x8f2(%rbx)
ffffffff80217af1:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80217af4:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80217af7:	c7 83 fc 08 00 00 00 	movl   $0x0,0x8fc(%rbx)
ffffffff80217afe:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80217b01:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff80217b05:	c7 83 02 09 00 00 08 	movl   $0x8e000008,0x902(%rbx)
ffffffff80217b0c:	00 00 8e 
ffffffff80217b0f:	c7 83 0c 09 00 00 00 	movl   $0x0,0x90c(%rbx)
ffffffff80217b16:	00 00 00 
ffffffff80217b19:	c7 83 12 09 00 00 08 	movl   $0x8e000008,0x912(%rbx)
ffffffff80217b20:	00 00 8e 
ffffffff80217b23:	c7 83 1c 09 00 00 00 	movl   $0x0,0x91c(%rbx)
ffffffff80217b2a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80217b2d:	c7 83 22 09 00 00 08 	movl   $0x8e000008,0x922(%rbx)
ffffffff80217b34:	00 00 8e 
ffffffff80217b37:	c7 83 2c 09 00 00 00 	movl   $0x0,0x92c(%rbx)
ffffffff80217b3e:	00 00 00 
ffffffff80217b41:	c7 83 32 09 00 00 08 	movl   $0x8e000008,0x932(%rbx)
ffffffff80217b48:	00 00 8e 
ffffffff80217b4b:	c7 83 3c 09 00 00 00 	movl   $0x0,0x93c(%rbx)
ffffffff80217b52:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80217b55:	66 89 93 40 09 00 00 	mov    %dx,0x940(%rbx)
ffffffff80217b5c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b60:	89 93 48 09 00 00    	mov    %edx,0x948(%rbx)
ffffffff80217b66:	48 8b 15 3b 69 00 00 	mov    0x693b(%rip),%rdx        # ffffffff8021e4a8 <RME_X64_Pgflg_RME2NAT+0xe68>
ffffffff80217b6d:	66 89 8b 46 09 00 00 	mov    %cx,0x946(%rbx)
ffffffff80217b74:	66 89 93 50 09 00 00 	mov    %dx,0x950(%rbx)
ffffffff80217b7b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217b7e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b82:	89 93 58 09 00 00    	mov    %edx,0x958(%rbx)
ffffffff80217b88:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80217b8c:	48 8b 15 85 69 00 00 	mov    0x6985(%rip),%rdx        # ffffffff8021e518 <RME_X64_Pgflg_RME2NAT+0xed8>
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80217b93:	66 89 8b 56 09 00 00 	mov    %cx,0x956(%rbx)
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80217b9a:	66 89 93 60 09 00 00 	mov    %dx,0x960(%rbx)
ffffffff80217ba1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217ba4:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217ba8:	89 93 68 09 00 00    	mov    %edx,0x968(%rbx)
ffffffff80217bae:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217bb2:	48 8b 15 ff 64 00 00 	mov    0x64ff(%rip),%rdx        # ffffffff8021e0b8 <RME_X64_Pgflg_RME2NAT+0xa78>
ffffffff80217bb9:	66 89 8b 66 09 00 00 	mov    %cx,0x966(%rbx)
ffffffff80217bc0:	66 89 93 70 09 00 00 	mov    %dx,0x970(%rbx)
ffffffff80217bc7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217bca:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217bce:	89 93 78 09 00 00    	mov    %edx,0x978(%rbx)
ffffffff80217bd4:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80217bd8:	48 8b 15 31 6b 00 00 	mov    0x6b31(%rip),%rdx        # ffffffff8021e710 <RME_X64_Pgflg_RME2NAT+0x10d0>
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80217bdf:	66 89 8b 76 09 00 00 	mov    %cx,0x976(%rbx)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80217be6:	66 89 93 80 09 00 00 	mov    %dx,0x980(%rbx)
ffffffff80217bed:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217bf0:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217bf4:	89 93 88 09 00 00    	mov    %edx,0x988(%rbx)
ffffffff80217bfa:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217bfe:	48 8b 15 5b 64 00 00 	mov    0x645b(%rip),%rdx        # ffffffff8021e060 <RME_X64_Pgflg_RME2NAT+0xa20>
ffffffff80217c05:	66 89 8b 86 09 00 00 	mov    %cx,0x986(%rbx)
ffffffff80217c0c:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217c0f:	66 89 93 90 09 00 00 	mov    %dx,0x990(%rbx)
ffffffff80217c16:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80217c1a:	c7 83 42 09 00 00 08 	movl   $0x8e000008,0x942(%rbx)
ffffffff80217c21:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80217c24:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217c28:	66 89 8b 96 09 00 00 	mov    %cx,0x996(%rbx)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80217c2f:	c7 83 4c 09 00 00 00 	movl   $0x0,0x94c(%rbx)
ffffffff80217c36:	00 00 00 
ffffffff80217c39:	c7 83 52 09 00 00 08 	movl   $0x8e000008,0x952(%rbx)
ffffffff80217c40:	00 00 8e 
ffffffff80217c43:	c7 83 5c 09 00 00 00 	movl   $0x0,0x95c(%rbx)
ffffffff80217c4a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80217c4d:	c7 83 62 09 00 00 08 	movl   $0x8e000008,0x962(%rbx)
ffffffff80217c54:	00 00 8e 
ffffffff80217c57:	c7 83 6c 09 00 00 00 	movl   $0x0,0x96c(%rbx)
ffffffff80217c5e:	00 00 00 
ffffffff80217c61:	c7 83 72 09 00 00 08 	movl   $0x8e000008,0x972(%rbx)
ffffffff80217c68:	00 00 8e 
ffffffff80217c6b:	c7 83 7c 09 00 00 00 	movl   $0x0,0x97c(%rbx)
ffffffff80217c72:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80217c75:	c7 83 82 09 00 00 08 	movl   $0x8e000008,0x982(%rbx)
ffffffff80217c7c:	00 00 8e 
ffffffff80217c7f:	c7 83 8c 09 00 00 00 	movl   $0x0,0x98c(%rbx)
ffffffff80217c86:	00 00 00 
ffffffff80217c89:	c7 83 92 09 00 00 08 	movl   $0x8e000008,0x992(%rbx)
ffffffff80217c90:	00 00 8e 
ffffffff80217c93:	89 93 98 09 00 00    	mov    %edx,0x998(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80217c99:	48 8b 15 b0 66 00 00 	mov    0x66b0(%rip),%rdx        # ffffffff8021e350 <RME_X64_Pgflg_RME2NAT+0xd10>
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80217ca0:	c7 83 9c 09 00 00 00 	movl   $0x0,0x99c(%rbx)
ffffffff80217ca7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80217caa:	66 89 93 a0 09 00 00 	mov    %dx,0x9a0(%rbx)
ffffffff80217cb1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217cb4:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217cb8:	89 93 a8 09 00 00    	mov    %edx,0x9a8(%rbx)
ffffffff80217cbe:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217cc2:	48 8b 15 6f 68 00 00 	mov    0x686f(%rip),%rdx        # ffffffff8021e538 <RME_X64_Pgflg_RME2NAT+0xef8>
ffffffff80217cc9:	66 89 8b a6 09 00 00 	mov    %cx,0x9a6(%rbx)
ffffffff80217cd0:	66 89 93 b0 09 00 00 	mov    %dx,0x9b0(%rbx)
ffffffff80217cd7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217cda:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217cde:	89 93 b8 09 00 00    	mov    %edx,0x9b8(%rbx)
ffffffff80217ce4:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217ce8:	48 8b 15 91 67 00 00 	mov    0x6791(%rip),%rdx        # ffffffff8021e480 <RME_X64_Pgflg_RME2NAT+0xe40>
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80217cef:	66 89 8b b6 09 00 00 	mov    %cx,0x9b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217cf6:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217cf9:	66 89 93 c0 09 00 00 	mov    %dx,0x9c0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80217d00:	c7 83 a2 09 00 00 08 	movl   $0x8e000008,0x9a2(%rbx)
ffffffff80217d07:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217d0a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d0e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d12:	89 93 c8 09 00 00    	mov    %edx,0x9c8(%rbx)
ffffffff80217d18:	48 8b 15 19 64 00 00 	mov    0x6419(%rip),%rdx        # ffffffff8021e138 <RME_X64_Pgflg_RME2NAT+0xaf8>
ffffffff80217d1f:	66 89 8b c6 09 00 00 	mov    %cx,0x9c6(%rbx)
ffffffff80217d26:	66 89 93 d0 09 00 00 	mov    %dx,0x9d0(%rbx)
ffffffff80217d2d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d30:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d34:	89 93 d8 09 00 00    	mov    %edx,0x9d8(%rbx)
ffffffff80217d3a:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217d3e:	48 8b 15 f3 66 00 00 	mov    0x66f3(%rip),%rdx        # ffffffff8021e438 <RME_X64_Pgflg_RME2NAT+0xdf8>
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217d45:	66 89 8b d6 09 00 00 	mov    %cx,0x9d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217d4c:	66 89 93 e0 09 00 00 	mov    %dx,0x9e0(%rbx)
ffffffff80217d53:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d56:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d5a:	89 93 e8 09 00 00    	mov    %edx,0x9e8(%rbx)
ffffffff80217d60:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d64:	48 8b 15 a5 62 00 00 	mov    0x62a5(%rip),%rdx        # ffffffff8021e010 <RME_X64_Pgflg_RME2NAT+0x9d0>
ffffffff80217d6b:	66 89 8b e6 09 00 00 	mov    %cx,0x9e6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80217d72:	c7 83 ac 09 00 00 00 	movl   $0x0,0x9ac(%rbx)
ffffffff80217d79:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217d7c:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80217d7f:	c7 83 b2 09 00 00 08 	movl   $0x8e000008,0x9b2(%rbx)
ffffffff80217d86:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217d89:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80217d8d:	c7 83 bc 09 00 00 00 	movl   $0x0,0x9bc(%rbx)
ffffffff80217d94:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217d97:	c7 83 c2 09 00 00 08 	movl   $0x8e000008,0x9c2(%rbx)
ffffffff80217d9e:	00 00 8e 
ffffffff80217da1:	c7 83 cc 09 00 00 00 	movl   $0x0,0x9cc(%rbx)
ffffffff80217da8:	00 00 00 
ffffffff80217dab:	c7 83 d2 09 00 00 08 	movl   $0x8e000008,0x9d2(%rbx)
ffffffff80217db2:	00 00 8e 
ffffffff80217db5:	c7 83 dc 09 00 00 00 	movl   $0x0,0x9dc(%rbx)
ffffffff80217dbc:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217dbf:	c7 83 e2 09 00 00 08 	movl   $0x8e000008,0x9e2(%rbx)
ffffffff80217dc6:	00 00 8e 
ffffffff80217dc9:	c7 83 ec 09 00 00 00 	movl   $0x0,0x9ec(%rbx)
ffffffff80217dd0:	00 00 00 
ffffffff80217dd3:	66 89 93 f0 09 00 00 	mov    %dx,0x9f0(%rbx)
ffffffff80217dda:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217dde:	89 93 f8 09 00 00    	mov    %edx,0x9f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80217de4:	48 8b 15 e5 64 00 00 	mov    0x64e5(%rip),%rdx        # ffffffff8021e2d0 <RME_X64_Pgflg_RME2NAT+0xc90>
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217deb:	66 89 8b f6 09 00 00 	mov    %cx,0x9f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80217df2:	66 89 93 00 0a 00 00 	mov    %dx,0xa00(%rbx)
ffffffff80217df9:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217dfc:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e00:	89 93 08 0a 00 00    	mov    %edx,0xa08(%rbx)
ffffffff80217e06:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217e0a:	48 8b 15 f7 67 00 00 	mov    0x67f7(%rip),%rdx        # ffffffff8021e608 <RME_X64_Pgflg_RME2NAT+0xfc8>
ffffffff80217e11:	66 89 8b 06 0a 00 00 	mov    %cx,0xa06(%rbx)
ffffffff80217e18:	66 89 93 10 0a 00 00 	mov    %dx,0xa10(%rbx)
ffffffff80217e1f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e22:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e26:	89 93 18 0a 00 00    	mov    %edx,0xa18(%rbx)
ffffffff80217e2c:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80217e30:	48 8b 15 b1 62 00 00 	mov    0x62b1(%rip),%rdx        # ffffffff8021e0e8 <RME_X64_Pgflg_RME2NAT+0xaa8>
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80217e37:	66 89 8b 16 0a 00 00 	mov    %cx,0xa16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80217e3e:	66 89 93 20 0a 00 00 	mov    %dx,0xa20(%rbx)
ffffffff80217e45:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e48:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e4c:	89 93 28 0a 00 00    	mov    %edx,0xa28(%rbx)
ffffffff80217e52:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217e56:	48 8b 15 63 67 00 00 	mov    0x6763(%rip),%rdx        # ffffffff8021e5c0 <RME_X64_Pgflg_RME2NAT+0xf80>
ffffffff80217e5d:	66 89 8b 26 0a 00 00 	mov    %cx,0xa26(%rbx)
ffffffff80217e64:	66 89 93 30 0a 00 00 	mov    %dx,0xa30(%rbx)
ffffffff80217e6b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e6e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e72:	89 93 38 0a 00 00    	mov    %edx,0xa38(%rbx)
ffffffff80217e78:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80217e7c:	48 8b 15 2d 64 00 00 	mov    0x642d(%rip),%rdx        # ffffffff8021e2b0 <RME_X64_Pgflg_RME2NAT+0xc70>
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80217e83:	66 89 8b 36 0a 00 00 	mov    %cx,0xa36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80217e8a:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e8d:	66 89 93 40 0a 00 00 	mov    %dx,0xa40(%rbx)
ffffffff80217e94:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e98:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80217e9c:	66 89 83 14 0a 00 00 	mov    %ax,0xa14(%rbx)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217ea3:	c7 83 f2 09 00 00 08 	movl   $0x8e000008,0x9f2(%rbx)
ffffffff80217eaa:	00 00 8e 
ffffffff80217ead:	c7 83 fc 09 00 00 00 	movl   $0x0,0x9fc(%rbx)
ffffffff80217eb4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80217eb7:	c7 83 02 0a 00 00 08 	movl   $0x8e000008,0xa02(%rbx)
ffffffff80217ebe:	00 00 8e 
ffffffff80217ec1:	c7 83 0c 0a 00 00 00 	movl   $0x0,0xa0c(%rbx)
ffffffff80217ec8:	00 00 00 
ffffffff80217ecb:	66 44 89 8b 12 0a 00 	mov    %r9w,0xa12(%rbx)
ffffffff80217ed2:	00 
ffffffff80217ed3:	c7 83 1c 0a 00 00 00 	movl   $0x0,0xa1c(%rbx)
ffffffff80217eda:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80217edd:	c7 83 22 0a 00 00 08 	movl   $0x8e000008,0xa22(%rbx)
ffffffff80217ee4:	00 00 8e 
ffffffff80217ee7:	c7 83 2c 0a 00 00 00 	movl   $0x0,0xa2c(%rbx)
ffffffff80217eee:	00 00 00 
ffffffff80217ef1:	c7 83 32 0a 00 00 08 	movl   $0x8e000008,0xa32(%rbx)
ffffffff80217ef8:	00 00 8e 
ffffffff80217efb:	c7 83 3c 0a 00 00 00 	movl   $0x0,0xa3c(%rbx)
ffffffff80217f02:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80217f05:	c7 83 42 0a 00 00 08 	movl   $0x8e000008,0xa42(%rbx)
ffffffff80217f0c:	00 00 8e 
ffffffff80217f0f:	66 89 8b 46 0a 00 00 	mov    %cx,0xa46(%rbx)
ffffffff80217f16:	89 93 48 0a 00 00    	mov    %edx,0xa48(%rbx)
ffffffff80217f1c:	48 8b 15 a5 66 00 00 	mov    0x66a5(%rip),%rdx        # ffffffff8021e5c8 <RME_X64_Pgflg_RME2NAT+0xf88>
ffffffff80217f23:	c7 83 4c 0a 00 00 00 	movl   $0x0,0xa4c(%rbx)
ffffffff80217f2a:	00 00 00 
ffffffff80217f2d:	66 89 93 50 0a 00 00 	mov    %dx,0xa50(%rbx)
ffffffff80217f34:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217f37:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217f3b:	89 93 58 0a 00 00    	mov    %edx,0xa58(%rbx)
ffffffff80217f41:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80217f45:	48 8b 15 0c 64 00 00 	mov    0x640c(%rip),%rdx        # ffffffff8021e358 <RME_X64_Pgflg_RME2NAT+0xd18>
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80217f4c:	66 89 8b 56 0a 00 00 	mov    %cx,0xa56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80217f53:	66 89 93 60 0a 00 00 	mov    %dx,0xa60(%rbx)
ffffffff80217f5a:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217f5d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217f61:	89 93 68 0a 00 00    	mov    %edx,0xa68(%rbx)
ffffffff80217f67:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217f6b:	48 8b 15 5e 68 00 00 	mov    0x685e(%rip),%rdx        # ffffffff8021e7d0 <RME_X64_Pgflg_RME2NAT+0x1190>
ffffffff80217f72:	66 89 8b 66 0a 00 00 	mov    %cx,0xa66(%rbx)
ffffffff80217f79:	66 89 93 70 0a 00 00 	mov    %dx,0xa70(%rbx)
ffffffff80217f80:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217f83:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217f87:	89 93 78 0a 00 00    	mov    %edx,0xa78(%rbx)
ffffffff80217f8d:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80217f91:	48 8b 15 60 61 00 00 	mov    0x6160(%rip),%rdx        # ffffffff8021e0f8 <RME_X64_Pgflg_RME2NAT+0xab8>
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80217f98:	66 89 8b 76 0a 00 00 	mov    %cx,0xa76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80217f9f:	66 89 93 80 0a 00 00 	mov    %dx,0xa80(%rbx)
ffffffff80217fa6:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217fa9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217fad:	89 93 88 0a 00 00    	mov    %edx,0xa88(%rbx)
ffffffff80217fb3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217fb7:	48 8b 15 92 65 00 00 	mov    0x6592(%rip),%rdx        # ffffffff8021e550 <RME_X64_Pgflg_RME2NAT+0xf10>
ffffffff80217fbe:	66 89 8b 86 0a 00 00 	mov    %cx,0xa86(%rbx)
ffffffff80217fc5:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217fc8:	66 89 93 90 0a 00 00 	mov    %dx,0xa90(%rbx)
ffffffff80217fcf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217fd3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217fd7:	89 93 98 0a 00 00    	mov    %edx,0xa98(%rbx)
ffffffff80217fdd:	66 89 8b 96 0a 00 00 	mov    %cx,0xa96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80217fe4:	c7 83 52 0a 00 00 08 	movl   $0x8e000008,0xa52(%rbx)
ffffffff80217feb:	00 00 8e 
ffffffff80217fee:	c7 83 5c 0a 00 00 00 	movl   $0x0,0xa5c(%rbx)
ffffffff80217ff5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80217ff8:	c7 83 62 0a 00 00 08 	movl   $0x8e000008,0xa62(%rbx)
ffffffff80217fff:	00 00 8e 
ffffffff80218002:	c7 83 6c 0a 00 00 00 	movl   $0x0,0xa6c(%rbx)
ffffffff80218009:	00 00 00 
ffffffff8021800c:	c7 83 72 0a 00 00 08 	movl   $0x8e000008,0xa72(%rbx)
ffffffff80218013:	00 00 8e 
ffffffff80218016:	c7 83 7c 0a 00 00 00 	movl   $0x0,0xa7c(%rbx)
ffffffff8021801d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80218020:	c7 83 82 0a 00 00 08 	movl   $0x8e000008,0xa82(%rbx)
ffffffff80218027:	00 00 8e 
ffffffff8021802a:	c7 83 8c 0a 00 00 00 	movl   $0x0,0xa8c(%rbx)
ffffffff80218031:	00 00 00 
ffffffff80218034:	c7 83 92 0a 00 00 08 	movl   $0x8e000008,0xa92(%rbx)
ffffffff8021803b:	00 00 8e 
ffffffff8021803e:	c7 83 9c 0a 00 00 00 	movl   $0x0,0xa9c(%rbx)
ffffffff80218045:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80218048:	48 8b 15 19 67 00 00 	mov    0x6719(%rip),%rdx        # ffffffff8021e768 <RME_X64_Pgflg_RME2NAT+0x1128>
ffffffff8021804f:	c7 83 a2 0a 00 00 08 	movl   $0x8e000008,0xaa2(%rbx)
ffffffff80218056:	00 00 8e 
ffffffff80218059:	66 89 93 a0 0a 00 00 	mov    %dx,0xaa0(%rbx)
ffffffff80218060:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218063:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218067:	89 93 a8 0a 00 00    	mov    %edx,0xaa8(%rbx)
ffffffff8021806d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218071:	48 8b 15 18 66 00 00 	mov    0x6618(%rip),%rdx        # ffffffff8021e690 <RME_X64_Pgflg_RME2NAT+0x1050>
ffffffff80218078:	66 89 8b a6 0a 00 00 	mov    %cx,0xaa6(%rbx)
ffffffff8021807f:	66 89 93 b0 0a 00 00 	mov    %dx,0xab0(%rbx)
ffffffff80218086:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218089:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021808d:	89 93 b8 0a 00 00    	mov    %edx,0xab8(%rbx)
ffffffff80218093:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80218097:	48 8b 15 62 60 00 00 	mov    0x6062(%rip),%rdx        # ffffffff8021e100 <RME_X64_Pgflg_RME2NAT+0xac0>
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8021809e:	66 89 8b b6 0a 00 00 	mov    %cx,0xab6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff802180a5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802180a8:	66 89 93 c0 0a 00 00 	mov    %dx,0xac0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff802180af:	c7 83 ac 0a 00 00 00 	movl   $0x0,0xaac(%rbx)
ffffffff802180b6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff802180b9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802180bd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802180c1:	89 93 c8 0a 00 00    	mov    %edx,0xac8(%rbx)
ffffffff802180c7:	48 8b 15 fa 65 00 00 	mov    0x65fa(%rip),%rdx        # ffffffff8021e6c8 <RME_X64_Pgflg_RME2NAT+0x1088>
ffffffff802180ce:	66 89 8b c6 0a 00 00 	mov    %cx,0xac6(%rbx)
ffffffff802180d5:	66 89 93 d0 0a 00 00 	mov    %dx,0xad0(%rbx)
ffffffff802180dc:	48 89 d1             	mov    %rdx,%rcx
ffffffff802180df:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802180e3:	89 93 d8 0a 00 00    	mov    %edx,0xad8(%rbx)
ffffffff802180e9:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff802180ed:	48 8b 15 04 65 00 00 	mov    0x6504(%rip),%rdx        # ffffffff8021e5f8 <RME_X64_Pgflg_RME2NAT+0xfb8>
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff802180f4:	66 89 8b d6 0a 00 00 	mov    %cx,0xad6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff802180fb:	66 89 93 e0 0a 00 00 	mov    %dx,0xae0(%rbx)
ffffffff80218102:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218105:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218109:	89 93 e8 0a 00 00    	mov    %edx,0xae8(%rbx)
ffffffff8021810f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218113:	48 8b 15 66 62 00 00 	mov    0x6266(%rip),%rdx        # ffffffff8021e380 <RME_X64_Pgflg_RME2NAT+0xd40>
ffffffff8021811a:	66 89 8b e6 0a 00 00 	mov    %cx,0xae6(%rbx)
ffffffff80218121:	66 89 93 f0 0a 00 00 	mov    %dx,0xaf0(%rbx)
ffffffff80218128:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021812b:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8021812f:	c7 83 b2 0a 00 00 08 	movl   $0x8e000008,0xab2(%rbx)
ffffffff80218136:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80218139:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8021813d:	c7 83 bc 0a 00 00 00 	movl   $0x0,0xabc(%rbx)
ffffffff80218144:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80218147:	c7 83 c2 0a 00 00 08 	movl   $0x8e000008,0xac2(%rbx)
ffffffff8021814e:	00 00 8e 
ffffffff80218151:	c7 83 cc 0a 00 00 00 	movl   $0x0,0xacc(%rbx)
ffffffff80218158:	00 00 00 
ffffffff8021815b:	c7 83 d2 0a 00 00 08 	movl   $0x8e000008,0xad2(%rbx)
ffffffff80218162:	00 00 8e 
ffffffff80218165:	c7 83 dc 0a 00 00 00 	movl   $0x0,0xadc(%rbx)
ffffffff8021816c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8021816f:	c7 83 e2 0a 00 00 08 	movl   $0x8e000008,0xae2(%rbx)
ffffffff80218176:	00 00 8e 
ffffffff80218179:	c7 83 ec 0a 00 00 00 	movl   $0x0,0xaec(%rbx)
ffffffff80218180:	00 00 00 
ffffffff80218183:	c7 83 f2 0a 00 00 08 	movl   $0x8e000008,0xaf2(%rbx)
ffffffff8021818a:	00 00 8e 
ffffffff8021818d:	89 93 f8 0a 00 00    	mov    %edx,0xaf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80218193:	48 8b 15 46 60 00 00 	mov    0x6046(%rip),%rdx        # ffffffff8021e1e0 <RME_X64_Pgflg_RME2NAT+0xba0>
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8021819a:	66 89 8b f6 0a 00 00 	mov    %cx,0xaf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff802181a1:	66 89 93 00 0b 00 00 	mov    %dx,0xb00(%rbx)
ffffffff802181a8:	48 89 d1             	mov    %rdx,%rcx
ffffffff802181ab:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802181af:	89 93 08 0b 00 00    	mov    %edx,0xb08(%rbx)
ffffffff802181b5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802181b9:	48 8b 15 c8 60 00 00 	mov    0x60c8(%rip),%rdx        # ffffffff8021e288 <RME_X64_Pgflg_RME2NAT+0xc48>
ffffffff802181c0:	66 89 8b 06 0b 00 00 	mov    %cx,0xb06(%rbx)
ffffffff802181c7:	66 89 93 10 0b 00 00 	mov    %dx,0xb10(%rbx)
ffffffff802181ce:	48 89 d1             	mov    %rdx,%rcx
ffffffff802181d1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802181d5:	89 93 18 0b 00 00    	mov    %edx,0xb18(%rbx)
ffffffff802181db:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff802181df:	48 8b 15 32 5e 00 00 	mov    0x5e32(%rip),%rdx        # ffffffff8021e018 <RME_X64_Pgflg_RME2NAT+0x9d8>
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff802181e6:	66 89 8b 16 0b 00 00 	mov    %cx,0xb16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff802181ed:	66 89 93 20 0b 00 00 	mov    %dx,0xb20(%rbx)
ffffffff802181f4:	48 89 d1             	mov    %rdx,%rcx
ffffffff802181f7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802181fb:	89 93 28 0b 00 00    	mov    %edx,0xb28(%rbx)
ffffffff80218201:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218205:	48 8b 15 d4 60 00 00 	mov    0x60d4(%rip),%rdx        # ffffffff8021e2e0 <RME_X64_Pgflg_RME2NAT+0xca0>
ffffffff8021820c:	66 89 8b 26 0b 00 00 	mov    %cx,0xb26(%rbx)
ffffffff80218213:	66 89 93 30 0b 00 00 	mov    %dx,0xb30(%rbx)
ffffffff8021821a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021821d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218221:	89 93 38 0b 00 00    	mov    %edx,0xb38(%rbx)
ffffffff80218227:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff8021822b:	48 8b 15 be 5e 00 00 	mov    0x5ebe(%rip),%rdx        # ffffffff8021e0f0 <RME_X64_Pgflg_RME2NAT+0xab0>
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80218232:	66 89 8b 36 0b 00 00 	mov    %cx,0xb36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80218239:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021823c:	66 89 93 40 0b 00 00 	mov    %dx,0xb40(%rbx)
ffffffff80218243:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218247:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021824b:	89 93 48 0b 00 00    	mov    %edx,0xb48(%rbx)
ffffffff80218251:	66 89 8b 46 0b 00 00 	mov    %cx,0xb46(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80218258:	c7 83 fc 0a 00 00 00 	movl   $0x0,0xafc(%rbx)
ffffffff8021825f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80218262:	c7 83 02 0b 00 00 08 	movl   $0x8e000008,0xb02(%rbx)
ffffffff80218269:	00 00 8e 
ffffffff8021826c:	c7 83 0c 0b 00 00 00 	movl   $0x0,0xb0c(%rbx)
ffffffff80218273:	00 00 00 
ffffffff80218276:	c7 83 12 0b 00 00 08 	movl   $0x8e000008,0xb12(%rbx)
ffffffff8021827d:	00 00 8e 
ffffffff80218280:	c7 83 1c 0b 00 00 00 	movl   $0x0,0xb1c(%rbx)
ffffffff80218287:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8021828a:	c7 83 22 0b 00 00 08 	movl   $0x8e000008,0xb22(%rbx)
ffffffff80218291:	00 00 8e 
ffffffff80218294:	c7 83 2c 0b 00 00 00 	movl   $0x0,0xb2c(%rbx)
ffffffff8021829b:	00 00 00 
ffffffff8021829e:	c7 83 32 0b 00 00 08 	movl   $0x8e000008,0xb32(%rbx)
ffffffff802182a5:	00 00 8e 
ffffffff802182a8:	c7 83 3c 0b 00 00 00 	movl   $0x0,0xb3c(%rbx)
ffffffff802182af:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff802182b2:	c7 83 42 0b 00 00 08 	movl   $0x8e000008,0xb42(%rbx)
ffffffff802182b9:	00 00 8e 
ffffffff802182bc:	c7 83 4c 0b 00 00 00 	movl   $0x0,0xb4c(%rbx)
ffffffff802182c3:	00 00 00 
ffffffff802182c6:	48 8b 15 73 63 00 00 	mov    0x6373(%rip),%rdx        # ffffffff8021e640 <RME_X64_Pgflg_RME2NAT+0x1000>
ffffffff802182cd:	c7 83 52 0b 00 00 08 	movl   $0x8e000008,0xb52(%rbx)
ffffffff802182d4:	00 00 8e 
ffffffff802182d7:	66 89 93 50 0b 00 00 	mov    %dx,0xb50(%rbx)
ffffffff802182de:	48 89 d1             	mov    %rdx,%rcx
ffffffff802182e1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802182e5:	89 93 58 0b 00 00    	mov    %edx,0xb58(%rbx)
ffffffff802182eb:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff802182ef:	48 8b 15 ba 62 00 00 	mov    0x62ba(%rip),%rdx        # ffffffff8021e5b0 <RME_X64_Pgflg_RME2NAT+0xf70>
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff802182f6:	66 89 8b 56 0b 00 00 	mov    %cx,0xb56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff802182fd:	66 89 93 60 0b 00 00 	mov    %dx,0xb60(%rbx)
ffffffff80218304:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218307:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021830b:	89 93 68 0b 00 00    	mov    %edx,0xb68(%rbx)
ffffffff80218311:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218315:	48 8b 15 44 5e 00 00 	mov    0x5e44(%rip),%rdx        # ffffffff8021e160 <RME_X64_Pgflg_RME2NAT+0xb20>
ffffffff8021831c:	66 89 8b 66 0b 00 00 	mov    %cx,0xb66(%rbx)
ffffffff80218323:	66 89 93 70 0b 00 00 	mov    %dx,0xb70(%rbx)
ffffffff8021832a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021832d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218331:	89 93 78 0b 00 00    	mov    %edx,0xb78(%rbx)
ffffffff80218337:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8021833b:	48 8b 15 8e 61 00 00 	mov    0x618e(%rip),%rdx        # ffffffff8021e4d0 <RME_X64_Pgflg_RME2NAT+0xe90>
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80218342:	66 89 8b 76 0b 00 00 	mov    %cx,0xb76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80218349:	66 89 93 80 0b 00 00 	mov    %dx,0xb80(%rbx)
ffffffff80218350:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218353:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218357:	89 93 88 0b 00 00    	mov    %edx,0xb88(%rbx)
ffffffff8021835d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218361:	48 8b 15 48 61 00 00 	mov    0x6148(%rip),%rdx        # ffffffff8021e4b0 <RME_X64_Pgflg_RME2NAT+0xe70>
ffffffff80218368:	66 89 8b 86 0b 00 00 	mov    %cx,0xb86(%rbx)
ffffffff8021836f:	66 89 93 90 0b 00 00 	mov    %dx,0xb90(%rbx)
ffffffff80218376:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218379:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021837d:	89 93 98 0b 00 00    	mov    %edx,0xb98(%rbx)
ffffffff80218383:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80218387:	48 8b 15 1a 5e 00 00 	mov    0x5e1a(%rip),%rdx        # ffffffff8021e1a8 <RME_X64_Pgflg_RME2NAT+0xb68>
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8021838e:	66 89 8b 96 0b 00 00 	mov    %cx,0xb96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80218395:	66 89 93 a0 0b 00 00 	mov    %dx,0xba0(%rbx)
ffffffff8021839c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021839f:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff802183a3:	c7 83 5c 0b 00 00 00 	movl   $0x0,0xb5c(%rbx)
ffffffff802183aa:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff802183ad:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff802183b1:	c7 83 62 0b 00 00 08 	movl   $0x8e000008,0xb62(%rbx)
ffffffff802183b8:	00 00 8e 
ffffffff802183bb:	c7 83 6c 0b 00 00 00 	movl   $0x0,0xb6c(%rbx)
ffffffff802183c2:	00 00 00 
ffffffff802183c5:	c7 83 72 0b 00 00 08 	movl   $0x8e000008,0xb72(%rbx)
ffffffff802183cc:	00 00 8e 
ffffffff802183cf:	c7 83 7c 0b 00 00 00 	movl   $0x0,0xb7c(%rbx)
ffffffff802183d6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff802183d9:	c7 83 82 0b 00 00 08 	movl   $0x8e000008,0xb82(%rbx)
ffffffff802183e0:	00 00 8e 
ffffffff802183e3:	c7 83 8c 0b 00 00 00 	movl   $0x0,0xb8c(%rbx)
ffffffff802183ea:	00 00 00 
ffffffff802183ed:	c7 83 92 0b 00 00 08 	movl   $0x8e000008,0xb92(%rbx)
ffffffff802183f4:	00 00 8e 
ffffffff802183f7:	c7 83 9c 0b 00 00 00 	movl   $0x0,0xb9c(%rbx)
ffffffff802183fe:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80218401:	c7 83 a2 0b 00 00 08 	movl   $0x8e000008,0xba2(%rbx)
ffffffff80218408:	00 00 8e 
ffffffff8021840b:	89 93 a8 0b 00 00    	mov    %edx,0xba8(%rbx)
ffffffff80218411:	48 8b 15 80 61 00 00 	mov    0x6180(%rip),%rdx        # ffffffff8021e598 <RME_X64_Pgflg_RME2NAT+0xf58>
ffffffff80218418:	66 89 8b a6 0b 00 00 	mov    %cx,0xba6(%rbx)
ffffffff8021841f:	66 89 93 b0 0b 00 00 	mov    %dx,0xbb0(%rbx)
ffffffff80218426:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218429:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021842d:	89 93 b8 0b 00 00    	mov    %edx,0xbb8(%rbx)
ffffffff80218433:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80218437:	48 8b 15 52 5d 00 00 	mov    0x5d52(%rip),%rdx        # ffffffff8021e190 <RME_X64_Pgflg_RME2NAT+0xb50>
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8021843e:	66 89 8b b6 0b 00 00 	mov    %cx,0xbb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80218445:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218448:	66 89 93 c0 0b 00 00 	mov    %dx,0xbc0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8021844f:	c7 83 ac 0b 00 00 00 	movl   $0x0,0xbac(%rbx)
ffffffff80218456:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80218459:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021845d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218461:	89 93 c8 0b 00 00    	mov    %edx,0xbc8(%rbx)
ffffffff80218467:	48 8b 15 6a 5d 00 00 	mov    0x5d6a(%rip),%rdx        # ffffffff8021e1d8 <RME_X64_Pgflg_RME2NAT+0xb98>
ffffffff8021846e:	66 89 8b c6 0b 00 00 	mov    %cx,0xbc6(%rbx)
ffffffff80218475:	66 89 93 d0 0b 00 00 	mov    %dx,0xbd0(%rbx)
ffffffff8021847c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021847f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218483:	89 93 d8 0b 00 00    	mov    %edx,0xbd8(%rbx)
ffffffff80218489:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8021848d:	48 8b 15 a4 61 00 00 	mov    0x61a4(%rip),%rdx        # ffffffff8021e638 <RME_X64_Pgflg_RME2NAT+0xff8>
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80218494:	66 89 8b d6 0b 00 00 	mov    %cx,0xbd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8021849b:	66 89 93 e0 0b 00 00 	mov    %dx,0xbe0(%rbx)
ffffffff802184a2:	48 89 d1             	mov    %rdx,%rcx
ffffffff802184a5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802184a9:	89 93 e8 0b 00 00    	mov    %edx,0xbe8(%rbx)
ffffffff802184af:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802184b3:	48 8b 15 56 5e 00 00 	mov    0x5e56(%rip),%rdx        # ffffffff8021e310 <RME_X64_Pgflg_RME2NAT+0xcd0>
ffffffff802184ba:	66 89 8b e6 0b 00 00 	mov    %cx,0xbe6(%rbx)
ffffffff802184c1:	48 89 d1             	mov    %rdx,%rcx
ffffffff802184c4:	66 89 93 f0 0b 00 00 	mov    %dx,0xbf0(%rbx)
ffffffff802184cb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802184cf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802184d3:	89 93 f8 0b 00 00    	mov    %edx,0xbf8(%rbx)
ffffffff802184d9:	66 89 8b f6 0b 00 00 	mov    %cx,0xbf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff802184e0:	c7 83 b2 0b 00 00 08 	movl   $0x8e000008,0xbb2(%rbx)
ffffffff802184e7:	00 00 8e 
ffffffff802184ea:	c7 83 bc 0b 00 00 00 	movl   $0x0,0xbbc(%rbx)
ffffffff802184f1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff802184f4:	c7 83 c2 0b 00 00 08 	movl   $0x8e000008,0xbc2(%rbx)
ffffffff802184fb:	00 00 8e 
ffffffff802184fe:	c7 83 cc 0b 00 00 00 	movl   $0x0,0xbcc(%rbx)
ffffffff80218505:	00 00 00 
ffffffff80218508:	c7 83 d2 0b 00 00 08 	movl   $0x8e000008,0xbd2(%rbx)
ffffffff8021850f:	00 00 8e 
ffffffff80218512:	c7 83 dc 0b 00 00 00 	movl   $0x0,0xbdc(%rbx)
ffffffff80218519:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8021851c:	c7 83 e2 0b 00 00 08 	movl   $0x8e000008,0xbe2(%rbx)
ffffffff80218523:	00 00 8e 
ffffffff80218526:	c7 83 ec 0b 00 00 00 	movl   $0x0,0xbec(%rbx)
ffffffff8021852d:	00 00 00 
ffffffff80218530:	c7 83 f2 0b 00 00 08 	movl   $0x8e000008,0xbf2(%rbx)
ffffffff80218537:	00 00 8e 
ffffffff8021853a:	c7 83 fc 0b 00 00 00 	movl   $0x0,0xbfc(%rbx)
ffffffff80218541:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80218544:	48 8b 15 dd 5f 00 00 	mov    0x5fdd(%rip),%rdx        # ffffffff8021e528 <RME_X64_Pgflg_RME2NAT+0xee8>
ffffffff8021854b:	66 89 83 14 0c 00 00 	mov    %ax,0xc14(%rbx)
ffffffff80218552:	66 89 93 00 0c 00 00 	mov    %dx,0xc00(%rbx)
ffffffff80218559:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021855c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218560:	89 93 08 0c 00 00    	mov    %edx,0xc08(%rbx)
ffffffff80218566:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021856a:	48 8b 15 b7 5e 00 00 	mov    0x5eb7(%rip),%rdx        # ffffffff8021e428 <RME_X64_Pgflg_RME2NAT+0xde8>
ffffffff80218571:	66 89 8b 06 0c 00 00 	mov    %cx,0xc06(%rbx)
ffffffff80218578:	66 89 93 10 0c 00 00 	mov    %dx,0xc10(%rbx)
ffffffff8021857f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218582:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218586:	89 93 18 0c 00 00    	mov    %edx,0xc18(%rbx)
ffffffff8021858c:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80218590:	48 8b 15 a9 5b 00 00 	mov    0x5ba9(%rip),%rdx        # ffffffff8021e140 <RME_X64_Pgflg_RME2NAT+0xb00>
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80218597:	66 89 8b 16 0c 00 00 	mov    %cx,0xc16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8021859e:	66 89 93 20 0c 00 00 	mov    %dx,0xc20(%rbx)
ffffffff802185a5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802185a8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802185ac:	89 93 28 0c 00 00    	mov    %edx,0xc28(%rbx)
ffffffff802185b2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802185b6:	48 8b 15 1b 5e 00 00 	mov    0x5e1b(%rip),%rdx        # ffffffff8021e3d8 <RME_X64_Pgflg_RME2NAT+0xd98>
ffffffff802185bd:	66 89 8b 26 0c 00 00 	mov    %cx,0xc26(%rbx)
ffffffff802185c4:	66 89 93 30 0c 00 00 	mov    %dx,0xc30(%rbx)
ffffffff802185cb:	48 89 d1             	mov    %rdx,%rcx
ffffffff802185ce:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802185d2:	89 93 38 0c 00 00    	mov    %edx,0xc38(%rbx)
ffffffff802185d8:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff802185dc:	48 8b 15 fd 61 00 00 	mov    0x61fd(%rip),%rdx        # ffffffff8021e7e0 <RME_X64_Pgflg_RME2NAT+0x11a0>
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff802185e3:	66 89 8b 36 0c 00 00 	mov    %cx,0xc36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff802185ea:	66 89 93 40 0c 00 00 	mov    %dx,0xc40(%rbx)
ffffffff802185f1:	48 89 d1             	mov    %rdx,%rcx
ffffffff802185f4:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802185f8:	89 93 48 0c 00 00    	mov    %edx,0xc48(%rbx)
ffffffff802185fe:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218602:	48 8b 15 87 5c 00 00 	mov    0x5c87(%rip),%rdx        # ffffffff8021e290 <RME_X64_Pgflg_RME2NAT+0xc50>
ffffffff80218609:	66 89 8b 46 0c 00 00 	mov    %cx,0xc46(%rbx)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80218610:	c7 83 02 0c 00 00 08 	movl   $0x8e000008,0xc02(%rbx)
ffffffff80218617:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff8021861a:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8021861d:	c7 83 0c 0c 00 00 00 	movl   $0x0,0xc0c(%rbx)
ffffffff80218624:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80218627:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8021862b:	66 44 89 93 12 0c 00 	mov    %r10w,0xc12(%rbx)
ffffffff80218632:	00 
ffffffff80218633:	c7 83 1c 0c 00 00 00 	movl   $0x0,0xc1c(%rbx)
ffffffff8021863a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8021863d:	c7 83 22 0c 00 00 08 	movl   $0x8e000008,0xc22(%rbx)
ffffffff80218644:	00 00 8e 
ffffffff80218647:	c7 83 2c 0c 00 00 00 	movl   $0x0,0xc2c(%rbx)
ffffffff8021864e:	00 00 00 
ffffffff80218651:	c7 83 32 0c 00 00 08 	movl   $0x8e000008,0xc32(%rbx)
ffffffff80218658:	00 00 8e 
ffffffff8021865b:	c7 83 3c 0c 00 00 00 	movl   $0x0,0xc3c(%rbx)
ffffffff80218662:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80218665:	c7 83 42 0c 00 00 08 	movl   $0x8e000008,0xc42(%rbx)
ffffffff8021866c:	00 00 8e 
ffffffff8021866f:	c7 83 4c 0c 00 00 00 	movl   $0x0,0xc4c(%rbx)
ffffffff80218676:	00 00 00 
ffffffff80218679:	66 89 93 50 0c 00 00 	mov    %dx,0xc50(%rbx)
ffffffff80218680:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218684:	89 93 58 0c 00 00    	mov    %edx,0xc58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff8021868a:	48 8b 15 bf 5d 00 00 	mov    0x5dbf(%rip),%rdx        # ffffffff8021e450 <RME_X64_Pgflg_RME2NAT+0xe10>
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80218691:	66 89 8b 56 0c 00 00 	mov    %cx,0xc56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80218698:	66 89 93 60 0c 00 00 	mov    %dx,0xc60(%rbx)
ffffffff8021869f:	48 89 d1             	mov    %rdx,%rcx
ffffffff802186a2:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802186a6:	89 93 68 0c 00 00    	mov    %edx,0xc68(%rbx)
ffffffff802186ac:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802186b0:	48 8b 15 c9 5e 00 00 	mov    0x5ec9(%rip),%rdx        # ffffffff8021e580 <RME_X64_Pgflg_RME2NAT+0xf40>
ffffffff802186b7:	66 89 8b 66 0c 00 00 	mov    %cx,0xc66(%rbx)
ffffffff802186be:	66 89 93 70 0c 00 00 	mov    %dx,0xc70(%rbx)
ffffffff802186c5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802186c8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802186cc:	89 93 78 0c 00 00    	mov    %edx,0xc78(%rbx)
ffffffff802186d2:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff802186d6:	48 8b 15 eb 5b 00 00 	mov    0x5beb(%rip),%rdx        # ffffffff8021e2c8 <RME_X64_Pgflg_RME2NAT+0xc88>
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff802186dd:	66 89 8b 76 0c 00 00 	mov    %cx,0xc76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff802186e4:	66 89 93 80 0c 00 00 	mov    %dx,0xc80(%rbx)
ffffffff802186eb:	48 89 d1             	mov    %rdx,%rcx
ffffffff802186ee:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802186f2:	89 93 88 0c 00 00    	mov    %edx,0xc88(%rbx)
ffffffff802186f8:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802186fc:	48 8b 15 cd 5e 00 00 	mov    0x5ecd(%rip),%rdx        # ffffffff8021e5d0 <RME_X64_Pgflg_RME2NAT+0xf90>
ffffffff80218703:	66 89 8b 86 0c 00 00 	mov    %cx,0xc86(%rbx)
ffffffff8021870a:	66 89 93 90 0c 00 00 	mov    %dx,0xc90(%rbx)
ffffffff80218711:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218714:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218718:	89 93 98 0c 00 00    	mov    %edx,0xc98(%rbx)
ffffffff8021871e:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80218722:	48 8b 15 cf 5a 00 00 	mov    0x5acf(%rip),%rdx        # ffffffff8021e1f8 <RME_X64_Pgflg_RME2NAT+0xbb8>
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80218729:	66 89 8b 96 0c 00 00 	mov    %cx,0xc96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80218730:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218733:	66 89 93 a0 0c 00 00 	mov    %dx,0xca0(%rbx)
ffffffff8021873a:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff8021873e:	c7 83 52 0c 00 00 08 	movl   $0x8e000008,0xc52(%rbx)
ffffffff80218745:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80218748:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021874c:	66 89 8b a6 0c 00 00 	mov    %cx,0xca6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80218753:	c7 83 5c 0c 00 00 00 	movl   $0x0,0xc5c(%rbx)
ffffffff8021875a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff8021875d:	c7 83 62 0c 00 00 08 	movl   $0x8e000008,0xc62(%rbx)
ffffffff80218764:	00 00 8e 
ffffffff80218767:	c7 83 6c 0c 00 00 00 	movl   $0x0,0xc6c(%rbx)
ffffffff8021876e:	00 00 00 
ffffffff80218771:	c7 83 72 0c 00 00 08 	movl   $0x8e000008,0xc72(%rbx)
ffffffff80218778:	00 00 8e 
ffffffff8021877b:	c7 83 7c 0c 00 00 00 	movl   $0x0,0xc7c(%rbx)
ffffffff80218782:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80218785:	c7 83 82 0c 00 00 08 	movl   $0x8e000008,0xc82(%rbx)
ffffffff8021878c:	00 00 8e 
ffffffff8021878f:	c7 83 8c 0c 00 00 00 	movl   $0x0,0xc8c(%rbx)
ffffffff80218796:	00 00 00 
ffffffff80218799:	c7 83 92 0c 00 00 08 	movl   $0x8e000008,0xc92(%rbx)
ffffffff802187a0:	00 00 8e 
ffffffff802187a3:	c7 83 9c 0c 00 00 00 	movl   $0x0,0xc9c(%rbx)
ffffffff802187aa:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff802187ad:	c7 83 a2 0c 00 00 08 	movl   $0x8e000008,0xca2(%rbx)
ffffffff802187b4:	00 00 8e 
ffffffff802187b7:	89 93 a8 0c 00 00    	mov    %edx,0xca8(%rbx)
ffffffff802187bd:	48 8b 15 6c 58 00 00 	mov    0x586c(%rip),%rdx        # ffffffff8021e030 <RME_X64_Pgflg_RME2NAT+0x9f0>
ffffffff802187c4:	c7 83 ac 0c 00 00 00 	movl   $0x0,0xcac(%rbx)
ffffffff802187cb:	00 00 00 
ffffffff802187ce:	66 89 93 b0 0c 00 00 	mov    %dx,0xcb0(%rbx)
ffffffff802187d5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802187d8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802187dc:	89 93 b8 0c 00 00    	mov    %edx,0xcb8(%rbx)
ffffffff802187e2:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802187e6:	48 8b 15 5b 5f 00 00 	mov    0x5f5b(%rip),%rdx        # ffffffff8021e748 <RME_X64_Pgflg_RME2NAT+0x1108>
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff802187ed:	66 89 8b b6 0c 00 00 	mov    %cx,0xcb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802187f4:	48 89 d1             	mov    %rdx,%rcx
ffffffff802187f7:	66 89 93 c0 0c 00 00 	mov    %dx,0xcc0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff802187fe:	c7 83 b2 0c 00 00 08 	movl   $0x8e000008,0xcb2(%rbx)
ffffffff80218805:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80218808:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021880c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218810:	89 93 c8 0c 00 00    	mov    %edx,0xcc8(%rbx)
ffffffff80218816:	48 8b 15 bb 5e 00 00 	mov    0x5ebb(%rip),%rdx        # ffffffff8021e6d8 <RME_X64_Pgflg_RME2NAT+0x1098>
ffffffff8021881d:	66 89 8b c6 0c 00 00 	mov    %cx,0xcc6(%rbx)
ffffffff80218824:	66 89 93 d0 0c 00 00 	mov    %dx,0xcd0(%rbx)
ffffffff8021882b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021882e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218832:	89 93 d8 0c 00 00    	mov    %edx,0xcd8(%rbx)
ffffffff80218838:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff8021883c:	48 8b 15 d5 5e 00 00 	mov    0x5ed5(%rip),%rdx        # ffffffff8021e718 <RME_X64_Pgflg_RME2NAT+0x10d8>
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80218843:	66 89 8b d6 0c 00 00 	mov    %cx,0xcd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff8021884a:	66 89 93 e0 0c 00 00 	mov    %dx,0xce0(%rbx)
ffffffff80218851:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218854:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218858:	89 93 e8 0c 00 00    	mov    %edx,0xce8(%rbx)
ffffffff8021885e:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218862:	48 8b 15 3f 58 00 00 	mov    0x583f(%rip),%rdx        # ffffffff8021e0a8 <RME_X64_Pgflg_RME2NAT+0xa68>
ffffffff80218869:	66 89 8b e6 0c 00 00 	mov    %cx,0xce6(%rbx)
ffffffff80218870:	66 89 93 f0 0c 00 00 	mov    %dx,0xcf0(%rbx)
ffffffff80218877:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021887a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021887e:	89 93 f8 0c 00 00    	mov    %edx,0xcf8(%rbx)
ffffffff80218884:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80218888:	48 8b 15 69 5c 00 00 	mov    0x5c69(%rip),%rdx        # ffffffff8021e4f8 <RME_X64_Pgflg_RME2NAT+0xeb8>
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff8021888f:	66 89 8b f6 0c 00 00 	mov    %cx,0xcf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80218896:	c7 83 bc 0c 00 00 00 	movl   $0x0,0xcbc(%rbx)
ffffffff8021889d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802188a0:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802188a3:	c7 83 c2 0c 00 00 08 	movl   $0x8e000008,0xcc2(%rbx)
ffffffff802188aa:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802188ad:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802188b1:	c7 83 cc 0c 00 00 00 	movl   $0x0,0xccc(%rbx)
ffffffff802188b8:	00 00 00 
ffffffff802188bb:	c7 83 d2 0c 00 00 08 	movl   $0x8e000008,0xcd2(%rbx)
ffffffff802188c2:	00 00 8e 
ffffffff802188c5:	c7 83 dc 0c 00 00 00 	movl   $0x0,0xcdc(%rbx)
ffffffff802188cc:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802188cf:	c7 83 e2 0c 00 00 08 	movl   $0x8e000008,0xce2(%rbx)
ffffffff802188d6:	00 00 8e 
ffffffff802188d9:	c7 83 ec 0c 00 00 00 	movl   $0x0,0xcec(%rbx)
ffffffff802188e0:	00 00 00 
ffffffff802188e3:	c7 83 f2 0c 00 00 08 	movl   $0x8e000008,0xcf2(%rbx)
ffffffff802188ea:	00 00 8e 
ffffffff802188ed:	c7 83 fc 0c 00 00 00 	movl   $0x0,0xcfc(%rbx)
ffffffff802188f4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802188f7:	66 89 93 00 0d 00 00 	mov    %dx,0xd00(%rbx)
ffffffff802188fe:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218902:	89 93 08 0d 00 00    	mov    %edx,0xd08(%rbx)
ffffffff80218908:	48 8b 15 19 5a 00 00 	mov    0x5a19(%rip),%rdx        # ffffffff8021e328 <RME_X64_Pgflg_RME2NAT+0xce8>
ffffffff8021890f:	66 89 8b 06 0d 00 00 	mov    %cx,0xd06(%rbx)
ffffffff80218916:	66 89 93 10 0d 00 00 	mov    %dx,0xd10(%rbx)
ffffffff8021891d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218920:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218924:	89 93 18 0d 00 00    	mov    %edx,0xd18(%rbx)
ffffffff8021892a:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff8021892e:	48 8b 15 0b 5a 00 00 	mov    0x5a0b(%rip),%rdx        # ffffffff8021e340 <RME_X64_Pgflg_RME2NAT+0xd00>
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80218935:	66 89 8b 16 0d 00 00 	mov    %cx,0xd16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff8021893c:	66 89 93 20 0d 00 00 	mov    %dx,0xd20(%rbx)
ffffffff80218943:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218946:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021894a:	89 93 28 0d 00 00    	mov    %edx,0xd28(%rbx)
ffffffff80218950:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218954:	48 8b 15 a5 5a 00 00 	mov    0x5aa5(%rip),%rdx        # ffffffff8021e400 <RME_X64_Pgflg_RME2NAT+0xdc0>
ffffffff8021895b:	66 89 8b 26 0d 00 00 	mov    %cx,0xd26(%rbx)
ffffffff80218962:	66 89 93 30 0d 00 00 	mov    %dx,0xd30(%rbx)
ffffffff80218969:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021896c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218970:	89 93 38 0d 00 00    	mov    %edx,0xd38(%rbx)
ffffffff80218976:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff8021897a:	48 8b 15 d7 5a 00 00 	mov    0x5ad7(%rip),%rdx        # ffffffff8021e458 <RME_X64_Pgflg_RME2NAT+0xe18>
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80218981:	66 89 8b 36 0d 00 00 	mov    %cx,0xd36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80218988:	66 89 93 40 0d 00 00 	mov    %dx,0xd40(%rbx)
ffffffff8021898f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218992:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218996:	89 93 48 0d 00 00    	mov    %edx,0xd48(%rbx)
ffffffff8021899c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802189a0:	48 8b 15 11 5e 00 00 	mov    0x5e11(%rip),%rdx        # ffffffff8021e7b8 <RME_X64_Pgflg_RME2NAT+0x1178>
ffffffff802189a7:	66 89 8b 46 0d 00 00 	mov    %cx,0xd46(%rbx)
ffffffff802189ae:	48 89 d1             	mov    %rdx,%rcx
ffffffff802189b1:	66 89 93 50 0d 00 00 	mov    %dx,0xd50(%rbx)
ffffffff802189b8:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802189bc:	c7 83 02 0d 00 00 08 	movl   $0x8e000008,0xd02(%rbx)
ffffffff802189c3:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff802189c6:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802189ca:	66 89 8b 56 0d 00 00 	mov    %cx,0xd56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802189d1:	c7 83 0c 0d 00 00 00 	movl   $0x0,0xd0c(%rbx)
ffffffff802189d8:	00 00 00 
ffffffff802189db:	c7 83 12 0d 00 00 08 	movl   $0x8e000008,0xd12(%rbx)
ffffffff802189e2:	00 00 8e 
ffffffff802189e5:	c7 83 1c 0d 00 00 00 	movl   $0x0,0xd1c(%rbx)
ffffffff802189ec:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff802189ef:	c7 83 22 0d 00 00 08 	movl   $0x8e000008,0xd22(%rbx)
ffffffff802189f6:	00 00 8e 
ffffffff802189f9:	c7 83 2c 0d 00 00 00 	movl   $0x0,0xd2c(%rbx)
ffffffff80218a00:	00 00 00 
ffffffff80218a03:	c7 83 32 0d 00 00 08 	movl   $0x8e000008,0xd32(%rbx)
ffffffff80218a0a:	00 00 8e 
ffffffff80218a0d:	c7 83 3c 0d 00 00 00 	movl   $0x0,0xd3c(%rbx)
ffffffff80218a14:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80218a17:	c7 83 42 0d 00 00 08 	movl   $0x8e000008,0xd42(%rbx)
ffffffff80218a1e:	00 00 8e 
ffffffff80218a21:	c7 83 4c 0d 00 00 00 	movl   $0x0,0xd4c(%rbx)
ffffffff80218a28:	00 00 00 
ffffffff80218a2b:	c7 83 52 0d 00 00 08 	movl   $0x8e000008,0xd52(%rbx)
ffffffff80218a32:	00 00 8e 
ffffffff80218a35:	89 93 58 0d 00 00    	mov    %edx,0xd58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80218a3b:	48 8b 15 9e 5c 00 00 	mov    0x5c9e(%rip),%rdx        # ffffffff8021e6e0 <RME_X64_Pgflg_RME2NAT+0x10a0>
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80218a42:	c7 83 5c 0d 00 00 00 	movl   $0x0,0xd5c(%rbx)
ffffffff80218a49:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80218a4c:	66 89 93 60 0d 00 00 	mov    %dx,0xd60(%rbx)
ffffffff80218a53:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218a56:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218a5a:	89 93 68 0d 00 00    	mov    %edx,0xd68(%rbx)
ffffffff80218a60:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218a64:	48 8b 15 15 5d 00 00 	mov    0x5d15(%rip),%rdx        # ffffffff8021e780 <RME_X64_Pgflg_RME2NAT+0x1140>
ffffffff80218a6b:	66 89 8b 66 0d 00 00 	mov    %cx,0xd66(%rbx)
ffffffff80218a72:	66 89 93 70 0d 00 00 	mov    %dx,0xd70(%rbx)
ffffffff80218a79:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218a7c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218a80:	89 93 78 0d 00 00    	mov    %edx,0xd78(%rbx)
ffffffff80218a86:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80218a8a:	48 8b 15 87 58 00 00 	mov    0x5887(%rip),%rdx        # ffffffff8021e318 <RME_X64_Pgflg_RME2NAT+0xcd8>
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80218a91:	66 89 8b 76 0d 00 00 	mov    %cx,0xd76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80218a98:	66 89 93 80 0d 00 00 	mov    %dx,0xd80(%rbx)
ffffffff80218a9f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218aa2:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218aa6:	89 93 88 0d 00 00    	mov    %edx,0xd88(%rbx)
ffffffff80218aac:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218ab0:	48 8b 15 e9 56 00 00 	mov    0x56e9(%rip),%rdx        # ffffffff8021e1a0 <RME_X64_Pgflg_RME2NAT+0xb60>
ffffffff80218ab7:	66 89 8b 86 0d 00 00 	mov    %cx,0xd86(%rbx)
ffffffff80218abe:	66 89 93 90 0d 00 00 	mov    %dx,0xd90(%rbx)
ffffffff80218ac5:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218ac8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218acc:	89 93 98 0d 00 00    	mov    %edx,0xd98(%rbx)
ffffffff80218ad2:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218ad6:	48 8b 15 83 5c 00 00 	mov    0x5c83(%rip),%rdx        # ffffffff8021e760 <RME_X64_Pgflg_RME2NAT+0x1120>
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80218add:	66 89 8b 96 0d 00 00 	mov    %cx,0xd96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218ae4:	66 89 93 a0 0d 00 00 	mov    %dx,0xda0(%rbx)
ffffffff80218aeb:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218aee:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218af2:	89 93 a8 0d 00 00    	mov    %edx,0xda8(%rbx)
ffffffff80218af8:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218afc:	48 8b 15 1d 59 00 00 	mov    0x591d(%rip),%rdx        # ffffffff8021e420 <RME_X64_Pgflg_RME2NAT+0xde0>
ffffffff80218b03:	66 89 8b a6 0d 00 00 	mov    %cx,0xda6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80218b0a:	c7 83 62 0d 00 00 08 	movl   $0x8e000008,0xd62(%rbx)
ffffffff80218b11:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218b14:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80218b17:	c7 83 6c 0d 00 00 00 	movl   $0x0,0xd6c(%rbx)
ffffffff80218b1e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218b21:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80218b25:	c7 83 72 0d 00 00 08 	movl   $0x8e000008,0xd72(%rbx)
ffffffff80218b2c:	00 00 8e 
ffffffff80218b2f:	c7 83 7c 0d 00 00 00 	movl   $0x0,0xd7c(%rbx)
ffffffff80218b36:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80218b39:	c7 83 82 0d 00 00 08 	movl   $0x8e000008,0xd82(%rbx)
ffffffff80218b40:	00 00 8e 
ffffffff80218b43:	c7 83 8c 0d 00 00 00 	movl   $0x0,0xd8c(%rbx)
ffffffff80218b4a:	00 00 00 
ffffffff80218b4d:	c7 83 92 0d 00 00 08 	movl   $0x8e000008,0xd92(%rbx)
ffffffff80218b54:	00 00 8e 
ffffffff80218b57:	c7 83 9c 0d 00 00 00 	movl   $0x0,0xd9c(%rbx)
ffffffff80218b5e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218b61:	c7 83 a2 0d 00 00 08 	movl   $0x8e000008,0xda2(%rbx)
ffffffff80218b68:	00 00 8e 
ffffffff80218b6b:	c7 83 ac 0d 00 00 00 	movl   $0x0,0xdac(%rbx)
ffffffff80218b72:	00 00 00 
ffffffff80218b75:	66 89 93 b0 0d 00 00 	mov    %dx,0xdb0(%rbx)
ffffffff80218b7c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218b80:	89 93 b8 0d 00 00    	mov    %edx,0xdb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80218b86:	48 8b 15 1b 58 00 00 	mov    0x581b(%rip),%rdx        # ffffffff8021e3a8 <RME_X64_Pgflg_RME2NAT+0xd68>
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218b8d:	66 89 8b b6 0d 00 00 	mov    %cx,0xdb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80218b94:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218b97:	66 89 93 c0 0d 00 00 	mov    %dx,0xdc0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218b9e:	c7 83 b2 0d 00 00 08 	movl   $0x8e000008,0xdb2(%rbx)
ffffffff80218ba5:	00 00 8e 
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80218ba8:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218bac:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218bb0:	89 93 c8 0d 00 00    	mov    %edx,0xdc8(%rbx)
ffffffff80218bb6:	48 8b 15 d3 5b 00 00 	mov    0x5bd3(%rip),%rdx        # ffffffff8021e790 <RME_X64_Pgflg_RME2NAT+0x1150>
ffffffff80218bbd:	66 89 8b c6 0d 00 00 	mov    %cx,0xdc6(%rbx)
ffffffff80218bc4:	66 89 93 d0 0d 00 00 	mov    %dx,0xdd0(%rbx)
ffffffff80218bcb:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218bce:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218bd2:	89 93 d8 0d 00 00    	mov    %edx,0xdd8(%rbx)
ffffffff80218bd8:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80218bdc:	48 8b 15 95 58 00 00 	mov    0x5895(%rip),%rdx        # ffffffff8021e478 <RME_X64_Pgflg_RME2NAT+0xe38>
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80218be3:	66 89 8b d6 0d 00 00 	mov    %cx,0xdd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80218bea:	66 89 93 e0 0d 00 00 	mov    %dx,0xde0(%rbx)
ffffffff80218bf1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218bf4:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218bf8:	89 93 e8 0d 00 00    	mov    %edx,0xde8(%rbx)
ffffffff80218bfe:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218c02:	48 8b 15 e7 57 00 00 	mov    0x57e7(%rip),%rdx        # ffffffff8021e3f0 <RME_X64_Pgflg_RME2NAT+0xdb0>
ffffffff80218c09:	66 89 8b e6 0d 00 00 	mov    %cx,0xde6(%rbx)
ffffffff80218c10:	66 89 93 f0 0d 00 00 	mov    %dx,0xdf0(%rbx)
ffffffff80218c17:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218c1a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218c1e:	89 93 f8 0d 00 00    	mov    %edx,0xdf8(%rbx)
ffffffff80218c24:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218c28:	48 8b 15 b1 54 00 00 	mov    0x54b1(%rip),%rdx        # ffffffff8021e0e0 <RME_X64_Pgflg_RME2NAT+0xaa0>
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80218c2f:	66 89 8b f6 0d 00 00 	mov    %cx,0xdf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218c36:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218c39:	66 89 93 00 0e 00 00 	mov    %dx,0xe00(%rbx)
ffffffff80218c40:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218c44:	c7 83 bc 0d 00 00 00 	movl   $0x0,0xdbc(%rbx)
ffffffff80218c4b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218c4e:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80218c52:	c7 83 c2 0d 00 00 08 	movl   $0x8e000008,0xdc2(%rbx)
ffffffff80218c59:	00 00 8e 
ffffffff80218c5c:	c7 83 cc 0d 00 00 00 	movl   $0x0,0xdcc(%rbx)
ffffffff80218c63:	00 00 00 
ffffffff80218c66:	c7 83 d2 0d 00 00 08 	movl   $0x8e000008,0xdd2(%rbx)
ffffffff80218c6d:	00 00 8e 
ffffffff80218c70:	c7 83 dc 0d 00 00 00 	movl   $0x0,0xddc(%rbx)
ffffffff80218c77:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80218c7a:	c7 83 e2 0d 00 00 08 	movl   $0x8e000008,0xde2(%rbx)
ffffffff80218c81:	00 00 8e 
ffffffff80218c84:	c7 83 ec 0d 00 00 00 	movl   $0x0,0xdec(%rbx)
ffffffff80218c8b:	00 00 00 
ffffffff80218c8e:	c7 83 f2 0d 00 00 08 	movl   $0x8e000008,0xdf2(%rbx)
ffffffff80218c95:	00 00 8e 
ffffffff80218c98:	c7 83 fc 0d 00 00 00 	movl   $0x0,0xdfc(%rbx)
ffffffff80218c9f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218ca2:	c7 83 02 0e 00 00 08 	movl   $0x8e000008,0xe02(%rbx)
ffffffff80218ca9:	00 00 8e 
ffffffff80218cac:	66 89 8b 06 0e 00 00 	mov    %cx,0xe06(%rbx)
ffffffff80218cb3:	89 93 08 0e 00 00    	mov    %edx,0xe08(%rbx)
ffffffff80218cb9:	48 8b 15 48 55 00 00 	mov    0x5548(%rip),%rdx        # ffffffff8021e208 <RME_X64_Pgflg_RME2NAT+0xbc8>
ffffffff80218cc0:	66 89 83 14 0e 00 00 	mov    %ax,0xe14(%rbx)
ffffffff80218cc7:	48 89 d0             	mov    %rdx,%rax
ffffffff80218cca:	66 89 93 10 0e 00 00 	mov    %dx,0xe10(%rbx)
ffffffff80218cd1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218cd5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218cd9:	89 93 18 0e 00 00    	mov    %edx,0xe18(%rbx)
ffffffff80218cdf:	66 89 83 16 0e 00 00 	mov    %ax,0xe16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218ce6:	48 8b 05 53 58 00 00 	mov    0x5853(%rip),%rax        # ffffffff8021e540 <RME_X64_Pgflg_RME2NAT+0xf00>
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218ced:	c7 83 0c 0e 00 00 00 	movl   $0x0,0xe0c(%rbx)
ffffffff80218cf4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218cf7:	66 89 83 20 0e 00 00 	mov    %ax,0xe20(%rbx)
ffffffff80218cfe:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d01:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218d05:	89 83 28 0e 00 00    	mov    %eax,0xe28(%rbx)
ffffffff80218d0b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218d0f:	48 8b 05 5a 57 00 00 	mov    0x575a(%rip),%rax        # ffffffff8021e470 <RME_X64_Pgflg_RME2NAT+0xe30>
ffffffff80218d16:	66 89 93 26 0e 00 00 	mov    %dx,0xe26(%rbx)
ffffffff80218d1d:	66 89 83 30 0e 00 00 	mov    %ax,0xe30(%rbx)
ffffffff80218d24:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d27:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218d2b:	89 83 38 0e 00 00    	mov    %eax,0xe38(%rbx)
ffffffff80218d31:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80218d35:	48 8b 05 84 59 00 00 	mov    0x5984(%rip),%rax        # ffffffff8021e6c0 <RME_X64_Pgflg_RME2NAT+0x1080>
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218d3c:	66 89 93 36 0e 00 00 	mov    %dx,0xe36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80218d43:	66 89 83 40 0e 00 00 	mov    %ax,0xe40(%rbx)
ffffffff80218d4a:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d4d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218d51:	89 83 48 0e 00 00    	mov    %eax,0xe48(%rbx)
ffffffff80218d57:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218d5b:	48 8b 05 b6 53 00 00 	mov    0x53b6(%rip),%rax        # ffffffff8021e118 <RME_X64_Pgflg_RME2NAT+0xad8>
ffffffff80218d62:	66 89 93 46 0e 00 00 	mov    %dx,0xe46(%rbx)
ffffffff80218d69:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d6c:	66 89 83 50 0e 00 00 	mov    %ax,0xe50(%rbx)
ffffffff80218d73:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218d77:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218d7b:	89 83 58 0e 00 00    	mov    %eax,0xe58(%rbx)
ffffffff80218d81:	66 89 93 56 0e 00 00 	mov    %dx,0xe56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218d88:	66 44 89 9b 12 0e 00 	mov    %r11w,0xe12(%rbx)
ffffffff80218d8f:	00 
ffffffff80218d90:	c7 83 1c 0e 00 00 00 	movl   $0x0,0xe1c(%rbx)
ffffffff80218d97:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218d9a:	c7 83 22 0e 00 00 08 	movl   $0x8e000008,0xe22(%rbx)
ffffffff80218da1:	00 00 8e 
ffffffff80218da4:	c7 83 2c 0e 00 00 00 	movl   $0x0,0xe2c(%rbx)
ffffffff80218dab:	00 00 00 
ffffffff80218dae:	c7 83 32 0e 00 00 08 	movl   $0x8e000008,0xe32(%rbx)
ffffffff80218db5:	00 00 8e 
ffffffff80218db8:	c7 83 3c 0e 00 00 00 	movl   $0x0,0xe3c(%rbx)
ffffffff80218dbf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80218dc2:	c7 83 42 0e 00 00 08 	movl   $0x8e000008,0xe42(%rbx)
ffffffff80218dc9:	00 00 8e 
ffffffff80218dcc:	c7 83 4c 0e 00 00 00 	movl   $0x0,0xe4c(%rbx)
ffffffff80218dd3:	00 00 00 
ffffffff80218dd6:	c7 83 52 0e 00 00 08 	movl   $0x8e000008,0xe52(%rbx)
ffffffff80218ddd:	00 00 8e 
ffffffff80218de0:	c7 83 5c 0e 00 00 00 	movl   $0x0,0xe5c(%rbx)
ffffffff80218de7:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80218dea:	48 8b 05 4f 59 00 00 	mov    0x594f(%rip),%rax        # ffffffff8021e740 <RME_X64_Pgflg_RME2NAT+0x1100>
ffffffff80218df1:	c7 83 62 0e 00 00 08 	movl   $0x8e000008,0xe62(%rbx)
ffffffff80218df8:	00 00 8e 
ffffffff80218dfb:	66 89 83 60 0e 00 00 	mov    %ax,0xe60(%rbx)
ffffffff80218e02:	48 89 c2             	mov    %rax,%rdx
ffffffff80218e05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218e09:	89 83 68 0e 00 00    	mov    %eax,0xe68(%rbx)
ffffffff80218e0f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218e13:	48 8b 05 c6 55 00 00 	mov    0x55c6(%rip),%rax        # ffffffff8021e3e0 <RME_X64_Pgflg_RME2NAT+0xda0>
ffffffff80218e1a:	66 89 93 66 0e 00 00 	mov    %dx,0xe66(%rbx)
ffffffff80218e21:	66 89 83 70 0e 00 00 	mov    %ax,0xe70(%rbx)
ffffffff80218e28:	48 89 c2             	mov    %rax,%rdx
ffffffff80218e2b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218e2f:	89 83 78 0e 00 00    	mov    %eax,0xe78(%rbx)
ffffffff80218e35:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80218e39:	48 8b 05 58 55 00 00 	mov    0x5558(%rip),%rax        # ffffffff8021e398 <RME_X64_Pgflg_RME2NAT+0xd58>
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80218e40:	66 89 93 76 0e 00 00 	mov    %dx,0xe76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80218e47:	66 89 83 80 0e 00 00 	mov    %ax,0xe80(%rbx)
ffffffff80218e4e:	48 89 c2             	mov    %rax,%rdx
ffffffff80218e51:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218e55:	89 83 88 0e 00 00    	mov    %eax,0xe88(%rbx)
ffffffff80218e5b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218e5f:	48 8b 05 ba 51 00 00 	mov    0x51ba(%rip),%rax        # ffffffff8021e020 <RME_X64_Pgflg_RME2NAT+0x9e0>
ffffffff80218e66:	66 89 93 86 0e 00 00 	mov    %dx,0xe86(%rbx)
ffffffff80218e6d:	66 89 83 90 0e 00 00 	mov    %ax,0xe90(%rbx)
ffffffff80218e74:	48 89 c2             	mov    %rax,%rdx
ffffffff80218e77:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218e7b:	89 83 98 0e 00 00    	mov    %eax,0xe98(%rbx)
ffffffff80218e81:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218e85:	48 8b 05 3c 56 00 00 	mov    0x563c(%rip),%rax        # ffffffff8021e4c8 <RME_X64_Pgflg_RME2NAT+0xe88>
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80218e8c:	66 89 93 96 0e 00 00 	mov    %dx,0xe96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218e93:	66 89 83 a0 0e 00 00 	mov    %ax,0xea0(%rbx)
ffffffff80218e9a:	48 89 c2             	mov    %rax,%rdx
ffffffff80218e9d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218ea1:	89 83 a8 0e 00 00    	mov    %eax,0xea8(%rbx)
ffffffff80218ea7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218eab:	48 8b 05 9e 53 00 00 	mov    0x539e(%rip),%rax        # ffffffff8021e250 <RME_X64_Pgflg_RME2NAT+0xc10>
ffffffff80218eb2:	66 89 93 a6 0e 00 00 	mov    %dx,0xea6(%rbx)
ffffffff80218eb9:	66 89 83 b0 0e 00 00 	mov    %ax,0xeb0(%rbx)
ffffffff80218ec0:	48 89 c2             	mov    %rax,%rdx
ffffffff80218ec3:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80218ec7:	c7 83 6c 0e 00 00 00 	movl   $0x0,0xe6c(%rbx)
ffffffff80218ece:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218ed1:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80218ed5:	c7 83 72 0e 00 00 08 	movl   $0x8e000008,0xe72(%rbx)
ffffffff80218edc:	00 00 8e 
ffffffff80218edf:	c7 83 7c 0e 00 00 00 	movl   $0x0,0xe7c(%rbx)
ffffffff80218ee6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80218ee9:	c7 83 82 0e 00 00 08 	movl   $0x8e000008,0xe82(%rbx)
ffffffff80218ef0:	00 00 8e 
ffffffff80218ef3:	c7 83 8c 0e 00 00 00 	movl   $0x0,0xe8c(%rbx)
ffffffff80218efa:	00 00 00 
ffffffff80218efd:	c7 83 92 0e 00 00 08 	movl   $0x8e000008,0xe92(%rbx)
ffffffff80218f04:	00 00 8e 
ffffffff80218f07:	c7 83 9c 0e 00 00 00 	movl   $0x0,0xe9c(%rbx)
ffffffff80218f0e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218f11:	c7 83 a2 0e 00 00 08 	movl   $0x8e000008,0xea2(%rbx)
ffffffff80218f18:	00 00 8e 
ffffffff80218f1b:	c7 83 ac 0e 00 00 00 	movl   $0x0,0xeac(%rbx)
ffffffff80218f22:	00 00 00 
ffffffff80218f25:	c7 83 b2 0e 00 00 08 	movl   $0x8e000008,0xeb2(%rbx)
ffffffff80218f2c:	00 00 8e 
ffffffff80218f2f:	89 83 b8 0e 00 00    	mov    %eax,0xeb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218f35:	48 8b 05 34 53 00 00 	mov    0x5334(%rip),%rax        # ffffffff8021e270 <RME_X64_Pgflg_RME2NAT+0xc30>
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218f3c:	66 89 93 b6 0e 00 00 	mov    %dx,0xeb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218f43:	48 89 c2             	mov    %rax,%rdx
ffffffff80218f46:	66 89 83 c0 0e 00 00 	mov    %ax,0xec0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218f4d:	c7 83 bc 0e 00 00 00 	movl   $0x0,0xebc(%rbx)
ffffffff80218f54:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218f57:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218f5b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218f5f:	89 83 c8 0e 00 00    	mov    %eax,0xec8(%rbx)
ffffffff80218f65:	48 8b 05 cc 57 00 00 	mov    0x57cc(%rip),%rax        # ffffffff8021e738 <RME_X64_Pgflg_RME2NAT+0x10f8>
ffffffff80218f6c:	66 89 93 c6 0e 00 00 	mov    %dx,0xec6(%rbx)
ffffffff80218f73:	66 89 83 d0 0e 00 00 	mov    %ax,0xed0(%rbx)
ffffffff80218f7a:	48 89 c2             	mov    %rax,%rdx
ffffffff80218f7d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218f81:	89 83 d8 0e 00 00    	mov    %eax,0xed8(%rbx)
ffffffff80218f87:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80218f8b:	48 8b 05 be 51 00 00 	mov    0x51be(%rip),%rax        # ffffffff8021e150 <RME_X64_Pgflg_RME2NAT+0xb10>
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218f92:	66 89 93 d6 0e 00 00 	mov    %dx,0xed6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80218f99:	66 89 83 e0 0e 00 00 	mov    %ax,0xee0(%rbx)
ffffffff80218fa0:	48 89 c2             	mov    %rax,%rdx
ffffffff80218fa3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218fa7:	89 83 e8 0e 00 00    	mov    %eax,0xee8(%rbx)
ffffffff80218fad:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218fb1:	48 8b 05 d0 53 00 00 	mov    0x53d0(%rip),%rax        # ffffffff8021e388 <RME_X64_Pgflg_RME2NAT+0xd48>
ffffffff80218fb8:	66 89 93 e6 0e 00 00 	mov    %dx,0xee6(%rbx)
ffffffff80218fbf:	66 89 83 f0 0e 00 00 	mov    %ax,0xef0(%rbx)
ffffffff80218fc6:	48 89 c2             	mov    %rax,%rdx
ffffffff80218fc9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218fcd:	89 83 f8 0e 00 00    	mov    %eax,0xef8(%rbx)
ffffffff80218fd3:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218fd7:	48 8b 05 fa 50 00 00 	mov    0x50fa(%rip),%rax        # ffffffff8021e0d8 <RME_X64_Pgflg_RME2NAT+0xa98>
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80218fde:	66 89 93 f6 0e 00 00 	mov    %dx,0xef6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218fe5:	48 89 c2             	mov    %rax,%rdx
ffffffff80218fe8:	66 89 83 00 0f 00 00 	mov    %ax,0xf00(%rbx)
ffffffff80218fef:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218ff3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218ff7:	89 83 08 0f 00 00    	mov    %eax,0xf08(%rbx)
ffffffff80218ffd:	66 89 93 06 0f 00 00 	mov    %dx,0xf06(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80219004:	c7 83 c2 0e 00 00 08 	movl   $0x8e000008,0xec2(%rbx)
ffffffff8021900b:	00 00 8e 
ffffffff8021900e:	c7 83 cc 0e 00 00 00 	movl   $0x0,0xecc(%rbx)
ffffffff80219015:	00 00 00 
ffffffff80219018:	c7 83 d2 0e 00 00 08 	movl   $0x8e000008,0xed2(%rbx)
ffffffff8021901f:	00 00 8e 
ffffffff80219022:	c7 83 dc 0e 00 00 00 	movl   $0x0,0xedc(%rbx)
ffffffff80219029:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff8021902c:	c7 83 e2 0e 00 00 08 	movl   $0x8e000008,0xee2(%rbx)
ffffffff80219033:	00 00 8e 
ffffffff80219036:	c7 83 ec 0e 00 00 00 	movl   $0x0,0xeec(%rbx)
ffffffff8021903d:	00 00 00 
ffffffff80219040:	c7 83 f2 0e 00 00 08 	movl   $0x8e000008,0xef2(%rbx)
ffffffff80219047:	00 00 8e 
ffffffff8021904a:	c7 83 fc 0e 00 00 00 	movl   $0x0,0xefc(%rbx)
ffffffff80219051:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80219054:	c7 83 02 0f 00 00 08 	movl   $0x8e000008,0xf02(%rbx)
ffffffff8021905b:	00 00 8e 
ffffffff8021905e:	c7 83 0c 0f 00 00 00 	movl   $0x0,0xf0c(%rbx)
ffffffff80219065:	00 00 00 
ffffffff80219068:	48 8b 05 89 53 00 00 	mov    0x5389(%rip),%rax        # ffffffff8021e3f8 <RME_X64_Pgflg_RME2NAT+0xdb8>
ffffffff8021906f:	c7 83 12 0f 00 00 08 	movl   $0x8e000008,0xf12(%rbx)
ffffffff80219076:	00 00 8e 
ffffffff80219079:	66 89 83 10 0f 00 00 	mov    %ax,0xf10(%rbx)
ffffffff80219080:	48 89 c2             	mov    %rax,%rdx
ffffffff80219083:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219087:	89 83 18 0f 00 00    	mov    %eax,0xf18(%rbx)
ffffffff8021908d:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80219091:	48 8b 05 10 52 00 00 	mov    0x5210(%rip),%rax        # ffffffff8021e2a8 <RME_X64_Pgflg_RME2NAT+0xc68>
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80219098:	66 89 93 16 0f 00 00 	mov    %dx,0xf16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff8021909f:	66 89 83 20 0f 00 00 	mov    %ax,0xf20(%rbx)
ffffffff802190a6:	48 89 c2             	mov    %rax,%rdx
ffffffff802190a9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802190ad:	89 83 28 0f 00 00    	mov    %eax,0xf28(%rbx)
ffffffff802190b3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802190b7:	48 8b 05 f2 50 00 00 	mov    0x50f2(%rip),%rax        # ffffffff8021e1b0 <RME_X64_Pgflg_RME2NAT+0xb70>
ffffffff802190be:	66 89 93 26 0f 00 00 	mov    %dx,0xf26(%rbx)
ffffffff802190c5:	66 89 83 30 0f 00 00 	mov    %ax,0xf30(%rbx)
ffffffff802190cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802190cf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802190d3:	89 83 38 0f 00 00    	mov    %eax,0xf38(%rbx)
ffffffff802190d9:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff802190dd:	48 8b 05 2c 51 00 00 	mov    0x512c(%rip),%rax        # ffffffff8021e210 <RME_X64_Pgflg_RME2NAT+0xbd0>
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff802190e4:	66 89 93 36 0f 00 00 	mov    %dx,0xf36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff802190eb:	66 89 83 40 0f 00 00 	mov    %ax,0xf40(%rbx)
ffffffff802190f2:	48 89 c2             	mov    %rax,%rdx
ffffffff802190f5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802190f9:	89 83 48 0f 00 00    	mov    %eax,0xf48(%rbx)
ffffffff802190ff:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80219103:	48 8b 05 ce 56 00 00 	mov    0x56ce(%rip),%rax        # ffffffff8021e7d8 <RME_X64_Pgflg_RME2NAT+0x1198>
ffffffff8021910a:	66 89 93 46 0f 00 00 	mov    %dx,0xf46(%rbx)
ffffffff80219111:	66 89 83 50 0f 00 00 	mov    %ax,0xf50(%rbx)
ffffffff80219118:	48 89 c2             	mov    %rax,%rdx
ffffffff8021911b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021911f:	89 83 58 0f 00 00    	mov    %eax,0xf58(%rbx)
ffffffff80219125:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80219129:	48 8b 05 68 56 00 00 	mov    0x5668(%rip),%rax        # ffffffff8021e798 <RME_X64_Pgflg_RME2NAT+0x1158>
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80219130:	66 89 93 56 0f 00 00 	mov    %dx,0xf56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80219137:	66 89 83 60 0f 00 00 	mov    %ax,0xf60(%rbx)
ffffffff8021913e:	48 89 c2             	mov    %rax,%rdx
ffffffff80219141:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80219145:	c7 83 1c 0f 00 00 00 	movl   $0x0,0xf1c(%rbx)
ffffffff8021914c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff8021914f:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80219153:	c7 83 22 0f 00 00 08 	movl   $0x8e000008,0xf22(%rbx)
ffffffff8021915a:	00 00 8e 
ffffffff8021915d:	c7 83 2c 0f 00 00 00 	movl   $0x0,0xf2c(%rbx)
ffffffff80219164:	00 00 00 
ffffffff80219167:	c7 83 32 0f 00 00 08 	movl   $0x8e000008,0xf32(%rbx)
ffffffff8021916e:	00 00 8e 
ffffffff80219171:	c7 83 3c 0f 00 00 00 	movl   $0x0,0xf3c(%rbx)
ffffffff80219178:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff8021917b:	c7 83 42 0f 00 00 08 	movl   $0x8e000008,0xf42(%rbx)
ffffffff80219182:	00 00 8e 
ffffffff80219185:	c7 83 4c 0f 00 00 00 	movl   $0x0,0xf4c(%rbx)
ffffffff8021918c:	00 00 00 
ffffffff8021918f:	c7 83 52 0f 00 00 08 	movl   $0x8e000008,0xf52(%rbx)
ffffffff80219196:	00 00 8e 
ffffffff80219199:	c7 83 5c 0f 00 00 00 	movl   $0x0,0xf5c(%rbx)
ffffffff802191a0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff802191a3:	c7 83 62 0f 00 00 08 	movl   $0x8e000008,0xf62(%rbx)
ffffffff802191aa:	00 00 8e 
ffffffff802191ad:	89 83 68 0f 00 00    	mov    %eax,0xf68(%rbx)
ffffffff802191b3:	48 8b 05 be 53 00 00 	mov    0x53be(%rip),%rax        # ffffffff8021e578 <RME_X64_Pgflg_RME2NAT+0xf38>
ffffffff802191ba:	66 89 93 66 0f 00 00 	mov    %dx,0xf66(%rbx)
ffffffff802191c1:	66 89 83 70 0f 00 00 	mov    %ax,0xf70(%rbx)
ffffffff802191c8:	48 89 c2             	mov    %rax,%rdx
ffffffff802191cb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802191cf:	89 83 78 0f 00 00    	mov    %eax,0xf78(%rbx)
ffffffff802191d5:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff802191d9:	48 8b 05 d0 4e 00 00 	mov    0x4ed0(%rip),%rax        # ffffffff8021e0b0 <RME_X64_Pgflg_RME2NAT+0xa70>
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff802191e0:	66 89 93 76 0f 00 00 	mov    %dx,0xf76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff802191e7:	66 89 83 80 0f 00 00 	mov    %ax,0xf80(%rbx)
ffffffff802191ee:	48 89 c2             	mov    %rax,%rdx
ffffffff802191f1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802191f5:	89 83 88 0f 00 00    	mov    %eax,0xf88(%rbx)
ffffffff802191fb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802191ff:	48 8b 05 4a 54 00 00 	mov    0x544a(%rip),%rax        # ffffffff8021e650 <RME_X64_Pgflg_RME2NAT+0x1010>
ffffffff80219206:	66 89 93 86 0f 00 00 	mov    %dx,0xf86(%rbx)
ffffffff8021920d:	66 89 83 90 0f 00 00 	mov    %ax,0xf90(%rbx)
ffffffff80219214:	48 89 c2             	mov    %rax,%rdx
ffffffff80219217:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021921b:	89 83 98 0f 00 00    	mov    %eax,0xf98(%rbx)
ffffffff80219221:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80219225:	48 8b 05 2c 55 00 00 	mov    0x552c(%rip),%rax        # ffffffff8021e758 <RME_X64_Pgflg_RME2NAT+0x1118>
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff8021922c:	66 89 93 96 0f 00 00 	mov    %dx,0xf96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80219233:	66 89 83 a0 0f 00 00 	mov    %ax,0xfa0(%rbx)
ffffffff8021923a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021923d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219241:	89 83 a8 0f 00 00    	mov    %eax,0xfa8(%rbx)
ffffffff80219247:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021924b:	48 8b 05 2e 50 00 00 	mov    0x502e(%rip),%rax        # ffffffff8021e280 <RME_X64_Pgflg_RME2NAT+0xc40>
ffffffff80219252:	66 89 93 a6 0f 00 00 	mov    %dx,0xfa6(%rbx)
ffffffff80219259:	48 89 c2             	mov    %rax,%rdx
ffffffff8021925c:	66 89 83 b0 0f 00 00 	mov    %ax,0xfb0(%rbx)
ffffffff80219263:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219267:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021926b:	89 83 b8 0f 00 00    	mov    %eax,0xfb8(%rbx)
ffffffff80219271:	66 89 93 b6 0f 00 00 	mov    %dx,0xfb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80219278:	c7 83 6c 0f 00 00 00 	movl   $0x0,0xf6c(%rbx)
ffffffff8021927f:	00 00 00 
ffffffff80219282:	c7 83 72 0f 00 00 08 	movl   $0x8e000008,0xf72(%rbx)
ffffffff80219289:	00 00 8e 
ffffffff8021928c:	c7 83 7c 0f 00 00 00 	movl   $0x0,0xf7c(%rbx)
ffffffff80219293:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80219296:	c7 83 82 0f 00 00 08 	movl   $0x8e000008,0xf82(%rbx)
ffffffff8021929d:	00 00 8e 
ffffffff802192a0:	c7 83 8c 0f 00 00 00 	movl   $0x0,0xf8c(%rbx)
ffffffff802192a7:	00 00 00 
ffffffff802192aa:	c7 83 92 0f 00 00 08 	movl   $0x8e000008,0xf92(%rbx)
ffffffff802192b1:	00 00 8e 
ffffffff802192b4:	c7 83 9c 0f 00 00 00 	movl   $0x0,0xf9c(%rbx)
ffffffff802192bb:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff802192be:	c7 83 a2 0f 00 00 08 	movl   $0x8e000008,0xfa2(%rbx)
ffffffff802192c5:	00 00 8e 
ffffffff802192c8:	c7 83 ac 0f 00 00 00 	movl   $0x0,0xfac(%rbx)
ffffffff802192cf:	00 00 00 
ffffffff802192d2:	c7 83 b2 0f 00 00 08 	movl   $0x8e000008,0xfb2(%rbx)
ffffffff802192d9:	00 00 8e 
ffffffff802192dc:	c7 83 bc 0f 00 00 00 	movl   $0x0,0xfbc(%rbx)
ffffffff802192e3:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff802192e6:	48 8b 05 83 52 00 00 	mov    0x5283(%rip),%rax        # ffffffff8021e570 <RME_X64_Pgflg_RME2NAT+0xf30>
ffffffff802192ed:	c7 83 c2 0f 00 00 08 	movl   $0x8e000008,0xfc2(%rbx)
ffffffff802192f4:	00 00 8e 
ffffffff802192f7:	48 89 c2             	mov    %rax,%rdx
ffffffff802192fa:	66 89 83 c0 0f 00 00 	mov    %ax,0xfc0(%rbx)
ffffffff80219301:	c7 83 cc 0f 00 00 00 	movl   $0x0,0xfcc(%rbx)
ffffffff80219308:	00 00 00 
ffffffff8021930b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021930f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219313:	89 83 c8 0f 00 00    	mov    %eax,0xfc8(%rbx)
ffffffff80219319:	48 8b 05 80 52 00 00 	mov    0x5280(%rip),%rax        # ffffffff8021e5a0 <RME_X64_Pgflg_RME2NAT+0xf60>
ffffffff80219320:	66 89 93 c6 0f 00 00 	mov    %dx,0xfc6(%rbx)
ffffffff80219327:	66 89 83 d0 0f 00 00 	mov    %ax,0xfd0(%rbx)
ffffffff8021932e:	48 89 c2             	mov    %rax,%rdx
ffffffff80219331:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219335:	89 83 d8 0f 00 00    	mov    %eax,0xfd8(%rbx)
ffffffff8021933b:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff8021933f:	48 8b 05 e2 4c 00 00 	mov    0x4ce2(%rip),%rax        # ffffffff8021e028 <RME_X64_Pgflg_RME2NAT+0x9e8>
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80219346:	66 89 93 d6 0f 00 00 	mov    %dx,0xfd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff8021934d:	66 89 83 e0 0f 00 00 	mov    %ax,0xfe0(%rbx)
ffffffff80219354:	48 89 c2             	mov    %rax,%rdx
ffffffff80219357:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021935b:	89 83 e8 0f 00 00    	mov    %eax,0xfe8(%rbx)
ffffffff80219361:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80219365:	48 8b 05 3c 53 00 00 	mov    0x533c(%rip),%rax        # ffffffff8021e6a8 <RME_X64_Pgflg_RME2NAT+0x1068>
ffffffff8021936c:	66 89 93 e6 0f 00 00 	mov    %dx,0xfe6(%rbx)
ffffffff80219373:	66 89 83 f0 0f 00 00 	mov    %ax,0xff0(%rbx)
ffffffff8021937a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021937d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219381:	89 83 f8 0f 00 00    	mov    %eax,0xff8(%rbx)
ffffffff80219387:	48 c1 ea 10          	shr    $0x10,%rdx

    /* Replace systick handler with customized ones - spurious interrupts
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
ffffffff8021938b:	48 8b 05 0e f1 00 00 	mov    0xf10e(%rip),%rax        # ffffffff802284a0 <RME_X64_CPU_Cnt>
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80219392:	c7 83 d2 0f 00 00 08 	movl   $0x8e000008,0xfd2(%rbx)
ffffffff80219399:	00 00 8e 
ffffffff8021939c:	c7 83 dc 0f 00 00 00 	movl   $0x0,0xfdc(%rbx)
ffffffff802193a3:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff802193a6:	c7 83 e2 0f 00 00 08 	movl   $0x8e000008,0xfe2(%rbx)
ffffffff802193ad:	00 00 8e 
ffffffff802193b0:	c7 83 ec 0f 00 00 00 	movl   $0x0,0xfec(%rbx)
ffffffff802193b7:	00 00 00 
ffffffff802193ba:	c7 83 f2 0f 00 00 08 	movl   $0x8e000008,0xff2(%rbx)
ffffffff802193c1:	00 00 8e 
ffffffff802193c4:	66 89 93 f6 0f 00 00 	mov    %dx,0xff6(%rbx)
ffffffff802193cb:	c7 83 fc 0f 00 00 00 	movl   $0x0,0xffc(%rbx)
ffffffff802193d2:	00 00 00 
    if(RME_X64_CPU_Cnt==0)
ffffffff802193d5:	48 85 c0             	test   %rax,%rax
ffffffff802193d8:	75 3a                	jne    ffffffff80219414 <__RME_X64_CPU_Local_Init+0x37a4>
        RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
ffffffff802193da:	48 8b 05 ef 4c 00 00 	mov    0x4cef(%rip),%rax        # ffffffff8021e0d0 <RME_X64_Pgflg_RME2NAT+0xa90>
ffffffff802193e1:	c7 83 22 02 00 00 08 	movl   $0x8e000008,0x222(%rbx)
ffffffff802193e8:	00 00 8e 
ffffffff802193eb:	c7 83 2c 02 00 00 00 	movl   $0x0,0x22c(%rbx)
ffffffff802193f2:	00 00 00 
ffffffff802193f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802193f8:	66 89 83 20 02 00 00 	mov    %ax,0x220(%rbx)
ffffffff802193ff:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219403:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80219407:	89 83 28 02 00 00    	mov    %eax,0x228(%rbx)
ffffffff8021940d:	66 89 93 26 02 00 00 	mov    %dx,0x226(%rbx)
    /* Register SMP handlers */
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80219414:	48 8b 05 55 4d 00 00 	mov    0x4d55(%rip),%rax        # ffffffff8021e170 <RME_X64_Pgflg_RME2NAT+0xb30>
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
    Desc[1]=(rme_ptr_t)IDT_Table;
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
    Desc[4]=((rme_ptr_t)IDT_Table)>>48;
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff8021941b:	4c 8d 64 24 06       	lea    0x6(%rsp),%r12
ffffffff80219420:	4c 89 e7             	mov    %r12,%rdi
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80219423:	66 89 83 30 08 00 00 	mov    %ax,0x830(%rbx)
ffffffff8021942a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021942d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219431:	89 83 38 08 00 00    	mov    %eax,0x838(%rbx)
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80219437:	b8 ff 0f 00 00       	mov    $0xfff,%eax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff8021943c:	48 c1 ea 10          	shr    $0x10,%rdx
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80219440:	66 89 44 24 06       	mov    %ax,0x6(%rsp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80219445:	48 89 d8             	mov    %rbx,%rax
ffffffff80219448:	48 c1 e8 10          	shr    $0x10,%rax
    Desc[1]=(rme_ptr_t)IDT_Table;
ffffffff8021944c:	66 89 5c 24 08       	mov    %bx,0x8(%rsp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80219451:	66 89 44 24 0a       	mov    %ax,0xa(%rsp)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80219456:	48 89 d8             	mov    %rbx,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80219459:	66 89 93 36 08 00 00 	mov    %dx,0x836(%rbx)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80219460:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219464:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
    Desc[4]=((rme_ptr_t)IDT_Table)>>48;
ffffffff80219469:	48 89 d8             	mov    %rbx,%rax
ffffffff8021946c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219470:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80219475:	e8 ff 33 ff ff       	call   ffffffff8020c879 <__RME_X64_IDT_Load>

    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff8021947a:	48 8b 15 4f f0 00 00 	mov    0xf04f(%rip),%rdx        # ffffffff802284d0 <RME_X64_Layout+0x10>
ffffffff80219481:	48 8b 05 18 f0 00 00 	mov    0xf018(%rip),%rax        # ffffffff802284a0 <RME_X64_CPU_Cnt>
    Desc[0]=8*sizeof(rme_ptr_t)-1;
    Desc[1]=(rme_ptr_t)GDT_Table;
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff80219488:	4c 89 e7             	mov    %r12,%rdi
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff8021948b:	48 be 00 00 ff ff ff 	movabs $0xffffff0000,%rsi
ffffffff80219492:	00 00 00 
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80219495:	66 0f 6f 05 53 40 00 	movdqa 0x4053(%rip),%xmm0        # ffffffff8021d4f0 <Table.1+0x1d0>
ffffffff8021949c:	00 
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff8021949d:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff802194a1:	48 8d 84 02 00 10 00 	lea    0x1000(%rdx,%rax,1),%rax
ffffffff802194a8:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff802194a9:	48 8b 15 20 f0 00 00 	mov    0xf020(%rip),%rdx        # ffffffff802284d0 <RME_X64_Layout+0x10>
ffffffff802194b0:	48 8b 2d e9 ef 00 00 	mov    0xefe9(%rip),%rbp        # ffffffff802284a0 <RME_X64_CPU_Cnt>
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff802194b7:	0f 11 00             	movups %xmm0,(%rax)
ffffffff802194ba:	66 0f 6f 05 3e 40 00 	movdqa 0x403e(%rip),%xmm0        # ffffffff8021d500 <Table.1+0x1e0>
ffffffff802194c1:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff802194c2:	48 c1 e5 0d          	shl    $0xd,%rbp
ffffffff802194c6:	48 01 d5             	add    %rdx,%rbp
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff802194c9:	0f 11 40 10          	movups %xmm0,0x10(%rax)
ffffffff802194cd:	66 0f 6f 05 3b 40 00 	movdqa 0x403b(%rip),%xmm0        # ffffffff8021d510 <Table.1+0x1f0>
ffffffff802194d4:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff802194d5:	48 8d 8d 80 10 00 00 	lea    0x1080(%rbp),%rcx
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802194dc:	48 89 ca             	mov    %rcx,%rdx
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff802194df:	0f 11 40 20          	movups %xmm0,0x20(%rax)
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802194e3:	48 c1 e2 10          	shl    $0x10,%rdx
ffffffff802194e7:	48 21 f2             	and    %rsi,%rdx
ffffffff802194ea:	48 89 ce             	mov    %rcx,%rsi
    GDT_Table[7]=(TSS_Table>>32);
ffffffff802194ed:	48 c1 e9 20          	shr    $0x20,%rcx
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802194f1:	48 c1 ee 18          	shr    $0x18,%rsi
    GDT_Table[7]=(TSS_Table>>32);
ffffffff802194f5:	48 89 48 38          	mov    %rcx,0x38(%rax)
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802194f9:	48 c1 e6 38          	shl    $0x38,%rsi
ffffffff802194fd:	48 09 f2             	or     %rsi,%rdx
ffffffff80219500:	48 be 67 00 00 00 00 	movabs $0x890000000067,%rsi
ffffffff80219507:	89 00 00 
ffffffff8021950a:	48 09 f2             	or     %rsi,%rdx
ffffffff8021950d:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Desc[0]=8*sizeof(rme_ptr_t)-1;
ffffffff80219511:	ba 3f 00 00 00       	mov    $0x3f,%edx
ffffffff80219516:	66 89 54 24 06       	mov    %dx,0x6(%rsp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff8021951b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021951e:	48 c1 ea 10          	shr    $0x10,%rdx
    Desc[1]=(rme_ptr_t)GDT_Table;
ffffffff80219522:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff80219527:	66 89 54 24 0a       	mov    %dx,0xa(%rsp)
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff8021952c:	48 89 c2             	mov    %rax,%rdx
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff8021952f:	48 c1 e8 30          	shr    $0x30,%rax
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff80219533:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80219537:	66 89 54 24 0c       	mov    %dx,0xc(%rsp)
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff8021953c:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff80219541:	e8 2f 33 ff ff       	call   ffffffff8020c875 <__RME_X64_GDT_Load>
    /* Set the RSP to TSS */
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80219546:	48 8b 15 cb f1 00 00 	mov    0xf1cb(%rip),%rdx        # ffffffff80228718 <RME_X64_Layout+0x258>
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
    /* IO Map Base = End of TSS (What's this?) */
    ((rme_u32_t*)TSS_Table)[16]=0x00680000;
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff8021954d:	bf 30 00 00 00       	mov    $0x30,%edi
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80219552:	48 8b 05 47 ef 00 00 	mov    0xef47(%rip),%rax        # ffffffff802284a0 <RME_X64_CPU_Cnt>
ffffffff80219559:	83 c0 01             	add    $0x1,%eax
ffffffff8021955c:	c1 e0 14             	shl    $0x14,%eax
ffffffff8021955f:	01 d0                	add    %edx,%eax
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80219561:	48 8b 15 b0 f1 00 00 	mov    0xf1b0(%rip),%rdx        # ffffffff80228718 <RME_X64_Layout+0x258>
    ((rme_u32_t*)TSS_Table)[16]=0x00680000;
ffffffff80219568:	c7 85 c0 10 00 00 00 	movl   $0x680000,0x10c0(%rbp)
ffffffff8021956f:	00 68 00 
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80219572:	89 85 84 10 00 00    	mov    %eax,0x1084(%rbp)
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80219578:	48 8b 05 21 ef 00 00 	mov    0xef21(%rip),%rax        # ffffffff802284a0 <RME_X64_CPU_Cnt>
ffffffff8021957f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80219583:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80219587:	48 01 d0             	add    %rdx,%rax
ffffffff8021958a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021958e:	89 85 88 10 00 00    	mov    %eax,0x1088(%rbp)
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff80219594:	e8 e4 32 ff ff       	call   ffffffff8020c87d <__RME_X64_TSS_Load>

    /* Initialize the RME per-cpu data here */
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80219599:	48 8b 15 30 ef 00 00 	mov    0xef30(%rip),%rdx        # ffffffff802284d0 <RME_X64_Layout+0x10>
ffffffff802195a0:	48 8b 05 f9 ee 00 00 	mov    0xeef9(%rip),%rax        # ffffffff802284a0 <RME_X64_CPU_Cnt>
    		                          RME_POW2(RME_PGT_SIZE_4K)+
									  RME_POW2(RME_PGT_SIZE_1K));
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff802195a7:	48 8b 35 f2 ee 00 00 	mov    0xeef2(%rip),%rsi        # ffffffff802284a0 <RME_X64_CPU_Cnt>
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff802195ae:	48 c1 e0 0d          	shl    $0xd,%rax
    		                          RME_POW2(RME_PGT_SIZE_4K)+
ffffffff802195b2:	48 8d ac 02 00 14 00 	lea    0x1400(%rdx,%rax,1),%rbp
ffffffff802195b9:	00 
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff802195ba:	48 89 ef             	mov    %rbp,%rdi
ffffffff802195bd:	e8 0e 76 ff ff       	call   ffffffff80210bd0 <_RME_CPU_Local_Init>

    /* Initialize x64 specific CPU-local data structure */
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff802195c2:	48 8b 15 07 ef 00 00 	mov    0xef07(%rip),%rdx        # ffffffff802284d0 <RME_X64_Layout+0x10>
    Temp->CPU_Local_Addr=(rme_ptr_t)CPU_Local;
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
    Temp->Temp_User_SP=0;

    /* Set the base of GS to this memory */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff802195c9:	48 89 de             	mov    %rbx,%rsi
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff802195cc:	48 8b 05 cd ee 00 00 	mov    0xeecd(%rip),%rax        # ffffffff802284a0 <RME_X64_CPU_Cnt>
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff802195d3:	48 8b 0d 3e f1 00 00 	mov    0xf13e(%rip),%rcx        # ffffffff80228718 <RME_X64_Layout+0x258>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff802195da:	bf 02 01 00 c0       	mov    $0xc0000102,%edi
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff802195df:	48 83 c0 01          	add    $0x1,%rax
ffffffff802195e3:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff802195e7:	48 8d 54 02 e8       	lea    -0x18(%rdx,%rax,1),%rdx
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff802195ec:	48 8b 05 ad ee 00 00 	mov    0xeead(%rip),%rax        # ffffffff802284a0 <RME_X64_CPU_Cnt>
    Temp->CPU_Local_Addr=(rme_ptr_t)CPU_Local;
ffffffff802195f3:	48 89 2a             	mov    %rbp,(%rdx)
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff802195f6:	48 83 c0 01          	add    $0x1,%rax
    Temp->Temp_User_SP=0;
ffffffff802195fa:	48 c7 42 10 00 00 00 	movq   $0x0,0x10(%rdx)
ffffffff80219601:	00 
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80219602:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80219606:	48 01 c8             	add    %rcx,%rax
ffffffff80219609:	48 89 42 08          	mov    %rax,0x8(%rdx)
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff8021960d:	e8 18 32 ff ff       	call   ffffffff8020c82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80219612:	48 89 de             	mov    %rbx,%rsi
ffffffff80219615:	bf 01 01 00 c0       	mov    $0xc0000101,%edi
    /* Enable SYSCALL/SYSRET */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff8021961a:	bb 80 00 00 c0       	mov    $0xc0000080,%ebx
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff8021961f:	e8 06 32 ff ff       	call   ffffffff8020c82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff80219624:	48 89 df             	mov    %rbx,%rdi
ffffffff80219627:	e8 ea 31 ff ff       	call   ffffffff8020c816 <__RME_X64_Read_MSR>
ffffffff8021962c:	48 89 df             	mov    %rbx,%rdi
ffffffff8021962f:	48 83 c8 01          	or     $0x1,%rax
ffffffff80219633:	48 89 c6             	mov    %rax,%rsi
ffffffff80219636:	e8 ef 31 ff ff       	call   ffffffff8020c82a <__RME_X64_Write_MSR>
    /* Set up SYSCALL/SYSRET parameters */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_LSTAR, (rme_ptr_t)SVC_Handler);
ffffffff8021963b:	48 8b 35 1e 4f 00 00 	mov    0x4f1e(%rip),%rsi        # ffffffff8021e560 <RME_X64_Pgflg_RME2NAT+0xf20>
ffffffff80219642:	bf 82 00 00 c0       	mov    $0xc0000082,%edi
ffffffff80219647:	e8 de 31 ff ff       	call   ffffffff8020c82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_FMASK, ~RME_X64_RFLAGS_IF);
ffffffff8021964c:	48 c7 c6 ff fd ff ff 	mov    $0xfffffffffffffdff,%rsi
ffffffff80219653:	bf 84 00 00 c0       	mov    $0xc0000084,%edi
ffffffff80219658:	e8 cd 31 ff ff       	call   ffffffff8020c82a <__RME_X64_Write_MSR>
    /* The SYSRET, when returning to user mode in 64-bit, will load the SS from +8, and CS from +16.
     * The original place for CS is reserved for 32-bit usages and is thus not usable by 64-bit */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_STAR, (((rme_ptr_t)RME_X64_SEG_EMPTY)<<48)|(((rme_ptr_t)RME_X64_SEG_KERNEL_CODE)<<32));
ffffffff8021965d:	bf 81 00 00 c0       	mov    $0xc0000081,%edi
ffffffff80219662:	48 be 00 00 00 00 08 	movabs $0x1b000800000000,%rsi
ffffffff80219669:	00 1b 00 
ffffffff8021966c:	e8 b9 31 ff ff       	call   ffffffff8020c82a <__RME_X64_Write_MSR>
}
ffffffff80219671:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80219675:	5b                   	pop    %rbx
ffffffff80219676:	5d                   	pop    %rbp
ffffffff80219677:	41 5c                	pop    %r12
ffffffff80219679:	c3                   	ret
ffffffff8021967a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80219680 <__RME_List_Crt>:
{
ffffffff80219680:	f3 0f 1e fa          	endbr64
}
ffffffff80219684:	c3                   	ret
ffffffff80219685:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021968c:	00 00 00 00 

ffffffff80219690 <__RME_List_Ins>:
{
ffffffff80219690:	f3 0f 1e fa          	endbr64
}
ffffffff80219694:	c3                   	ret
ffffffff80219695:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021969c:	00 00 00 00 

ffffffff802196a0 <__RME_List_Del>:
{
ffffffff802196a0:	f3 0f 1e fa          	endbr64
}
ffffffff802196a4:	c3                   	ret
ffffffff802196a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff802196ac:	00 00 00 00 

ffffffff802196b0 <__RME_Inv_Retval_Set>:
void __RME_Inv_Retval_Set(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
ffffffff802196b0:	f3 0f 1e fa          	endbr64
ffffffff802196b4:	c3                   	ret
ffffffff802196b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff802196bc:	00 00 00 00 

ffffffff802196c0 <__RME_Kfn_Handler>:
{
ffffffff802196c0:	f3 0f 1e fa          	endbr64
}
ffffffff802196c4:	31 c0                	xor    %eax,%eax
ffffffff802196c6:	c3                   	ret
ffffffff802196c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff802196ce:	00 00 

ffffffff802196d0 <__RME_Putchar>:
{
ffffffff802196d0:	f3 0f 1e fa          	endbr64
    if(RME_X64_UART_Exist==0)
ffffffff802196d4:	48 8b 05 55 f0 00 00 	mov    0xf055(%rip),%rax        # ffffffff80228730 <RME_X64_UART_Exist>
ffffffff802196db:	48 85 c0             	test   %rax,%rax
ffffffff802196de:	74 30                	je     ffffffff80219710 <__RME_Putchar+0x40>
{
ffffffff802196e0:	53                   	push   %rbx
ffffffff802196e1:	89 fb                	mov    %edi,%ebx
ffffffff802196e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    while((__RME_X64_In(RME_X64_COM1+5)&0x20)==0);
ffffffff802196e8:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff802196ed:	e8 0e 31 ff ff       	call   ffffffff8020c800 <__RME_X64_In>
ffffffff802196f2:	a8 20                	test   $0x20,%al
ffffffff802196f4:	74 f2                	je     ffffffff802196e8 <__RME_Putchar+0x18>
    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff802196f6:	48 0f be f3          	movsbq %bl,%rsi
ffffffff802196fa:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff802196ff:	e8 06 31 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
}
ffffffff80219704:	31 c0                	xor    %eax,%eax
ffffffff80219706:	5b                   	pop    %rbx
ffffffff80219707:	c3                   	ret
ffffffff80219708:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021970f:	00 
ffffffff80219710:	31 c0                	xor    %eax,%eax
ffffffff80219712:	c3                   	ret
ffffffff80219713:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021971a:	00 00 00 00 
ffffffff8021971e:	66 90                	xchg   %ax,%ax

ffffffff80219720 <__RME_X64_LAPIC_Ack>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Ack(void)
{
ffffffff80219720:	f3 0f 1e fa          	endbr64
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff80219724:	48 8b 15 05 dd 00 00 	mov    0xdd05(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff8021972b:	48 b8 b0 00 00 00 00 	movabs $0xffff8000000000b0,%rax
ffffffff80219732:	80 ff ff 
ffffffff80219735:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
}
ffffffff8021973c:	c3                   	ret
ffffffff8021973d:	0f 1f 00             	nopl   (%rax)

ffffffff80219740 <__RME_X64_LAPIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
ffffffff80219740:	48 83 ec 08          	sub    $0x8,%rsp
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff80219744:	48 8b 05 e5 dc 00 00 	mov    0xdce5(%rip),%rax        # ffffffff80227430 <RME_X64_LAPIC_Addr>

    /* Enable local APIC; set spurious interrupt vector to 32 */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_SVR, RME_X64_LAPIC_SVR_ENABLE|RME_X64_INT_SPUR);
ffffffff8021974b:	48 8b 15 de dc 00 00 	mov    0xdcde(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff80219752:	48 b8 f0 00 00 00 00 	movabs $0xffff8000000000f0,%rax
ffffffff80219759:	80 ff ff 
ffffffff8021975c:	c7 04 02 80 01 00 00 	movl   $0x180,(%rdx,%rax,1)

    /* Disable local interrupt lines */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff80219763:	48 8b 15 c6 dc 00 00 	mov    0xdcc6(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff8021976a:	c7 84 10 60 02 00 00 	movl   $0x10000,0x260(%rax,%rdx,1)
ffffffff80219771:	00 00 01 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);
ffffffff80219775:	48 8b 15 b4 dc 00 00 	mov    0xdcb4(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff8021977c:	c7 84 10 70 02 00 00 	movl   $0x10000,0x270(%rax,%rdx,1)
ffffffff80219783:	00 00 01 00 

    /* Disable performance counter overflow interrupts when there is one */
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff80219787:	48 8b 15 a2 dc 00 00 	mov    0xdca2(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff8021978e:	f7 84 10 40 ff ff ff 	testl  $0xfc0000,-0xc0(%rax,%rdx,1)
ffffffff80219795:	00 00 fc 00 
ffffffff80219799:	74 18                	je     ffffffff802197b3 <__RME_X64_LAPIC_Init+0x73>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_PCINT, RME_X64_LAPIC_MASKED);
ffffffff8021979b:	48 8b 15 8e dc 00 00 	mov    0xdc8e(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff802197a2:	48 2d c0 00 00 00    	sub    $0xc0,%rax
ffffffff802197a8:	c7 84 10 10 03 00 00 	movl   $0x10000,0x310(%rax,%rdx,1)
ffffffff802197af:	00 00 01 00 

    /* Map error interrupt to IRQ_ERROR */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ERROR, RME_X64_INT_ERROR);
ffffffff802197b3:	48 8b 15 76 dc 00 00 	mov    0xdc76(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff802197ba:	48 b8 70 03 00 00 00 	movabs $0xffff800000000370,%rax
ffffffff802197c1:	80 ff ff 
ffffffff802197c4:	c7 04 02 81 00 00 00 	movl   $0x81,(%rdx,%rax,1)

    /* Clear error status register (requires back-to-back writes) */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff802197cb:	48 8b 15 5e dc 00 00 	mov    0xdc5e(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff802197d2:	c7 84 10 10 ff ff ff 	movl   $0x0,-0xf0(%rax,%rdx,1)
ffffffff802197d9:	00 00 00 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff802197dd:	48 8b 15 4c dc 00 00 	mov    0xdc4c(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff802197e4:	c7 84 10 10 ff ff ff 	movl   $0x0,-0xf0(%rax,%rdx,1)
ffffffff802197eb:	00 00 00 00 

    /* Acknowledge any outstanding interrupts */
    __RME_X64_LAPIC_Ack();
ffffffff802197ef:	e8 2c ff ff ff       	call   ffffffff80219720 <__RME_X64_LAPIC_Ack>

    /* Send an Init Level De-Assert to synchronise arbitration IDs */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0);
ffffffff802197f4:	48 8b 15 35 dc 00 00 	mov    0xdc35(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff802197fb:	48 b8 10 03 00 00 00 	movabs $0xffff800000000310,%rax
ffffffff80219802:	80 ff ff 
ffffffff80219805:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_BCAST|
ffffffff8021980c:	48 8b 05 1d dc 00 00 	mov    0xdc1d(%rip),%rax        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff80219813:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff8021981a:	80 ff ff 
ffffffff8021981d:	c7 04 10 00 85 08 00 	movl   $0x88500,(%rax,%rdx,1)
                                             RME_X64_LAPIC_ICRLO_INIT|
                                             RME_X64_LAPIC_ICRLO_LEVEL);
    while(RME_X64_LAPIC_READ(RME_X64_LAPIC_ICRLO)&RME_X64_LAPIC_ICRLO_DELIVS);
ffffffff80219824:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80219828:	48 8b 05 01 dc 00 00 	mov    0xdc01(%rip),%rax        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff8021982f:	8b 04 10             	mov    (%rax,%rdx,1),%eax
ffffffff80219832:	f6 c4 10             	test   $0x10,%ah
ffffffff80219835:	75 f1                	jne    ffffffff80219828 <__RME_X64_LAPIC_Init+0xe8>

    /* Enable interrupts on the APIC */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_TPR, 0);
ffffffff80219837:	48 8b 15 f2 db 00 00 	mov    0xdbf2(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff8021983e:	48 b8 80 00 00 00 00 	movabs $0xffff800000000080,%rax
ffffffff80219845:	80 ff ff 
ffffffff80219848:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
}
ffffffff8021984f:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80219853:	c3                   	ret
ffffffff80219854:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021985b:	00 00 00 00 
ffffffff8021985f:	90                   	nop

ffffffff80219860 <__RME_X64_SMP_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff80219860:	f3 0f 1e fa          	endbr64
    rme_u16_t* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(rme_u8_t*)RME_X64_PA2VA(0x7000);
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80219864:	48 ba 00 90 ff ff ff 	movabs $0x7fffffff9000,%rdx
ffffffff8021986b:	7f 00 00 
ffffffff8021986e:	48 8d 0d cb 3c 00 00 	lea    0x3ccb(%rip),%rcx        # ffffffff8021d540 <RME_X64_Boot_Code>
{
ffffffff80219875:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax
ffffffff8021987c:	80 ff ff 
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff8021987f:	48 be 62 70 00 00 00 	movabs $0xffff800000007062,%rsi
ffffffff80219886:	80 ff ff 
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80219889:	48 01 d1             	add    %rdx,%rcx
ffffffff8021988c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80219890:	0f b6 14 08          	movzbl (%rax,%rcx,1),%edx
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80219894:	48 83 c0 01          	add    $0x1,%rax
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80219898:	88 50 ff             	mov    %dl,-0x1(%rax)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff8021989b:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021989e:	75 f0                	jne    ffffffff80219890 <__RME_X64_SMP_Init+0x30>

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
ffffffff802198a0:	48 c7 05 f5 eb 00 00 	movq   $0x1,0xebf5(%rip)        # ffffffff802284a0 <RME_X64_CPU_Cnt>
ffffffff802198a7:	01 00 00 00 
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff802198ab:	48 8b 05 f6 eb 00 00 	mov    0xebf6(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff802198b2:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802198b6:	0f 86 7c 01 00 00    	jbe    ffffffff80219a38 <__RME_X64_SMP_Init+0x1d8>
{
ffffffff802198bc:	41 57                	push   %r15
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff802198be:	41 bf 01 00 00 00    	mov    $0x1,%r15d
{
ffffffff802198c4:	41 56                	push   %r14
ffffffff802198c6:	41 55                	push   %r13
ffffffff802198c8:	4c 8d 2d d1 db 00 00 	lea    0xdbd1(%rip),%r13        # ffffffff802274a0 <RME_X64_CPU_Info>
ffffffff802198cf:	41 54                	push   %r12
    {
        RME_DBG_S("\n\rBooting CPU ");
        RME_DBG_I(Count);
        /* Temporary stack */
        *(rme_u32_t*)(Code-4)=0x8000;
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff802198d1:	49 bc f8 6f 00 00 00 	movabs $0xffff800000006ff8,%r12
ffffffff802198d8:	80 ff ff 
{
ffffffff802198db:	55                   	push   %rbp
        Warm_Reset=(rme_u16_t*)RME_X64_PA2VA((0x40<<4|0x67));
        Warm_Reset[0]=0;
        Warm_Reset[1]=0x7000>>4;

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802198dc:	48 bd 10 03 00 00 00 	movabs $0xffff800000000310,%rbp
ffffffff802198e3:	80 ff ff 
{
ffffffff802198e6:	53                   	push   %rbx
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff802198e7:	48 bb 00 03 00 00 00 	movabs $0xffff800000000300,%rbx
ffffffff802198ee:	80 ff ff 
{
ffffffff802198f1:	48 83 ec 18          	sub    $0x18,%rsp
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff802198f5:	8b 05 ed 4a 00 00    	mov    0x4aed(%rip),%eax        # ffffffff8021e3e8 <RME_X64_Pgflg_RME2NAT+0xda8>
ffffffff802198fb:	05 00 00 00 80       	add    $0x80000000,%eax
ffffffff80219900:	89 44 24 0c          	mov    %eax,0xc(%rsp)
ffffffff80219904:	0f 1f 40 00          	nopl   0x0(%rax)
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff80219908:	48 b8 fc 6f 00 00 00 	movabs $0xffff800000006ffc,%rax
ffffffff8021990f:	80 ff ff 
ffffffff80219912:	4d 89 fe             	mov    %r15,%r14
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80219915:	49 83 c7 01          	add    $0x1,%r15
ffffffff80219919:	48 8b 35 f8 ed 00 00 	mov    0xedf8(%rip),%rsi        # ffffffff80228718 <RME_X64_Layout+0x258>
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff80219920:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80219926:	8b 44 24 0c          	mov    0xc(%rsp),%eax
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff8021992a:	49 c1 e6 04          	shl    $0x4,%r14
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff8021992e:	48 bf f0 6f 00 00 00 	movabs $0xffff800000006ff0,%rdi
ffffffff80219935:	80 ff ff 
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80219938:	41 89 04 24          	mov    %eax,(%r12)
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff8021993c:	4c 89 f8             	mov    %r15,%rax
ffffffff8021993f:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80219943:	48 01 f0             	add    %rsi,%rax
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff80219946:	be 0f 00 00 00       	mov    $0xf,%esi
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff8021994b:	48 89 07             	mov    %rax,(%rdi)
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff8021994e:	bf 70 00 00 00       	mov    $0x70,%edi
ffffffff80219953:	e8 b2 2e ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
ffffffff80219958:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff8021995d:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff80219962:	e8 a3 2e ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
        Warm_Reset[0]=0;
ffffffff80219967:	31 d2                	xor    %edx,%edx
        Warm_Reset[1]=0x7000>>4;
ffffffff80219969:	b9 00 07 00 00       	mov    $0x700,%ecx
        Warm_Reset[0]=0;
ffffffff8021996e:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax
ffffffff80219975:	80 ff ff 
ffffffff80219978:	66 89 10             	mov    %dx,(%rax)
        Warm_Reset[1]=0x7000>>4;
ffffffff8021997b:	66 89 48 02          	mov    %cx,0x2(%rax)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff8021997f:	4b 8d 44 35 00       	lea    0x0(%r13,%r14,1),%rax
ffffffff80219984:	48 8b 30             	mov    (%rax),%rsi
ffffffff80219987:	48 8b 3d a2 da 00 00 	mov    0xdaa2(%rip),%rdi        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff8021998e:	c1 e6 18             	shl    $0x18,%esi
ffffffff80219991:	89 34 2f             	mov    %esi,(%rdi,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80219994:	48 8b 35 95 da 00 00 	mov    0xda95(%rip),%rsi        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff8021999b:	c7 04 1e 00 c5 00 00 	movl   $0xc500,(%rsi,%rbx,1)
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff802199a2:	48 8b 35 87 da 00 00 	mov    0xda87(%rip),%rsi        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff802199a9:	c7 04 1e 00 85 00 00 	movl   $0x8500,(%rsi,%rbx,1)
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802199b0:	48 8b 30             	mov    (%rax),%rsi
ffffffff802199b3:	48 8b 3d 76 da 00 00 	mov    0xda76(%rip),%rdi        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff802199ba:	c1 e6 18             	shl    $0x18,%esi
ffffffff802199bd:	89 34 2f             	mov    %esi,(%rdi,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff802199c0:	48 8b 35 69 da 00 00 	mov    0xda69(%rip),%rsi        # ffffffff80227430 <RME_X64_LAPIC_Addr>
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802199c7:	48 8b 00             	mov    (%rax),%rax
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff802199ca:	c7 04 1e 07 06 00 00 	movl   $0x607,(%rsi,%rbx,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802199d1:	48 8b 35 58 da 00 00 	mov    0xda58(%rip),%rsi        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff802199d8:	c1 e0 18             	shl    $0x18,%eax
ffffffff802199db:	89 04 2e             	mov    %eax,(%rsi,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff802199de:	48 8b 05 4b da 00 00 	mov    0xda4b(%rip),%rax        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff802199e5:	c7 04 18 07 06 00 00 	movl   $0x607,(%rax,%rbx,1)
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
ffffffff802199ec:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff802199f0:	48 8b 05 a9 ea 00 00 	mov    0xeaa9(%rip),%rax        # ffffffff802284a0 <RME_X64_CPU_Cnt>
ffffffff802199f7:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802199fb:	4c 01 e8             	add    %r13,%rax
ffffffff802199fe:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80219a02:	48 85 c0             	test   %rax,%rax
ffffffff80219a05:	74 e9                	je     ffffffff802199f0 <__RME_X64_SMP_Init+0x190>
        RME_X64_CPU_Cnt++;
ffffffff80219a07:	48 8b 05 92 ea 00 00 	mov    0xea92(%rip),%rax        # ffffffff802284a0 <RME_X64_CPU_Cnt>
ffffffff80219a0e:	48 83 c0 01          	add    $0x1,%rax
ffffffff80219a12:	48 89 05 87 ea 00 00 	mov    %rax,0xea87(%rip)        # ffffffff802284a0 <RME_X64_CPU_Cnt>
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80219a19:	48 8b 05 88 ea 00 00 	mov    0xea88(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff80219a20:	49 39 c7             	cmp    %rax,%r15
ffffffff80219a23:	0f 82 df fe ff ff    	jb     ffffffff80219908 <__RME_X64_SMP_Init+0xa8>
    }
}
ffffffff80219a29:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80219a2d:	5b                   	pop    %rbx
ffffffff80219a2e:	5d                   	pop    %rbp
ffffffff80219a2f:	41 5c                	pop    %r12
ffffffff80219a31:	41 5d                	pop    %r13
ffffffff80219a33:	41 5e                	pop    %r14
ffffffff80219a35:	41 5f                	pop    %r15
ffffffff80219a37:	c3                   	ret
ffffffff80219a38:	c3                   	ret
ffffffff80219a39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80219a40 <__RME_X64_SMP_Tick>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Tick(void)
{
ffffffff80219a40:	f3 0f 1e fa          	endbr64
    /* Is this a SMP? */
    if(RME_X64_Num_CPU>1)
ffffffff80219a44:	48 8b 05 5d ea 00 00 	mov    0xea5d(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff80219a4b:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80219a4f:	76 27                	jbe    ffffffff80219a78 <__RME_X64_SMP_Tick+0x38>
    {
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0xFFULL<<24);
ffffffff80219a51:	48 8b 15 d8 d9 00 00 	mov    0xd9d8(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff80219a58:	48 b8 10 03 00 00 00 	movabs $0xffff800000000310,%rax
ffffffff80219a5f:	80 ff ff 
ffffffff80219a62:	c7 04 02 00 00 00 ff 	movl   $0xff000000,(%rdx,%rax,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_EXC_SELF|
ffffffff80219a69:	48 8b 15 c0 d9 00 00 	mov    0xd9c0(%rip),%rdx        # ffffffff80227430 <RME_X64_LAPIC_Addr>
ffffffff80219a70:	c7 44 10 f0 83 00 0c 	movl   $0xc0083,-0x10(%rax,%rdx,1)
ffffffff80219a77:	00 
                                                 RME_X64_LAPIC_ICRLO_FIXED|
                                                 RME_X64_INT_SMP_SYSTICK);
    }
}
ffffffff80219a78:	c3                   	ret
ffffffff80219a79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80219a80 <__RME_Lowlvl_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Lowlvl_Init(void)
{
ffffffff80219a80:	f3 0f 1e fa          	endbr64
ffffffff80219a84:	41 57                	push   %r15
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80219a86:	31 f6                	xor    %esi,%esi
ffffffff80219a88:	bf f9 03 00 00       	mov    $0x3f9,%edi
{
ffffffff80219a8d:	41 56                	push   %r14
ffffffff80219a8f:	41 55                	push   %r13
ffffffff80219a91:	41 54                	push   %r12
ffffffff80219a93:	55                   	push   %rbp
ffffffff80219a94:	53                   	push   %rbx
ffffffff80219a95:	48 83 ec 48          	sub    $0x48,%rsp
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80219a99:	e8 6c 2d ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x80);
ffffffff80219a9e:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff80219aa3:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff80219aa8:	e8 5d 2d ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+0, 115200/9600);
ffffffff80219aad:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff80219ab2:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80219ab7:	e8 4e 2d ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80219abc:	31 f6                	xor    %esi,%esi
ffffffff80219abe:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff80219ac3:	e8 42 2d ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x03);
ffffffff80219ac8:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80219acd:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff80219ad2:	e8 33 2d ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+2, 0xC7);
ffffffff80219ad7:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff80219adc:	bf fa 03 00 00       	mov    $0x3fa,%edi
ffffffff80219ae1:	e8 24 2d ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+4, 0);
ffffffff80219ae6:	31 f6                	xor    %esi,%esi
ffffffff80219ae8:	bf fc 03 00 00       	mov    $0x3fc,%edi
ffffffff80219aed:	e8 18 2d ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
ffffffff80219af2:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff80219af7:	e8 04 2d ff ff       	call   ffffffff8020c800 <__RME_X64_In>
ffffffff80219afc:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff80219b02:	0f 84 af 07 00 00    	je     ffffffff8021a2b7 <__RME_Lowlvl_Init+0x837>
        RME_X64_UART_Exist=1;
ffffffff80219b08:	48 c7 05 1d ec 00 00 	movq   $0x1,0xec1d(%rip)        # ffffffff80228730 <RME_X64_UART_Exist>
ffffffff80219b0f:	01 00 00 00 
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff80219b13:	48 b8 0e 04 00 00 00 	movabs $0xffff80000000040e,%rax
ffffffff80219b1a:	80 ff ff 
ffffffff80219b1d:	0f b7 00             	movzwl (%rax),%eax
    if(Paddr!=0)
ffffffff80219b20:	c1 e0 04             	shl    $0x4,%eax
ffffffff80219b23:	0f 85 18 06 00 00    	jne    ffffffff8021a141 <__RME_Lowlvl_Init+0x6c1>
ffffffff80219b29:	4c 8d 25 1f 36 00 00 	lea    0x361f(%rip),%r12        # ffffffff8021d14f <UVM_Init+0x16af>
{
ffffffff80219b30:	48 bd 00 00 0e 00 00 	movabs $0xffff8000000e0000,%rbp
ffffffff80219b37:	80 ff ff 
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff80219b3a:	49 be e0 ff 0f 00 00 	movabs $0xffff8000000fffe0,%r14
ffffffff80219b41:	80 ff ff 
ffffffff80219b44:	eb 17                	jmp    ffffffff80219b5d <__RME_Lowlvl_Init+0xdd>
ffffffff80219b46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80219b4d:	00 00 00 
ffffffff80219b50:	48 83 c5 04          	add    $0x4,%rbp
ffffffff80219b54:	4c 39 f5             	cmp    %r14,%rbp
ffffffff80219b57:	0f 84 8c 07 00 00    	je     ffffffff8021a2e9 <__RME_Lowlvl_Init+0x869>
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff80219b5d:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80219b62:	4c 89 e6             	mov    %r12,%rsi
ffffffff80219b65:	48 89 ef             	mov    %rbp,%rdi
ffffffff80219b68:	49 89 ed             	mov    %rbp,%r13
ffffffff80219b6b:	e8 50 52 ff ff       	call   ffffffff8020edc0 <_RME_Memcmp>
ffffffff80219b70:	48 85 c0             	test   %rax,%rax
ffffffff80219b73:	75 db                	jne    ffffffff80219b50 <__RME_Lowlvl_Init+0xd0>
                Checksum+=Pos[Count+Check_Cnt];
ffffffff80219b75:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff80219b79:	66 0f ef db          	pxor   %xmm3,%xmm3
ffffffff80219b7d:	0f b6 45 11          	movzbl 0x11(%rbp),%eax
ffffffff80219b81:	0f b6 55 10          	movzbl 0x10(%rbp),%edx
ffffffff80219b85:	f3 0f 6f 55 00       	movdqu 0x0(%rbp),%xmm2
ffffffff80219b8a:	48 01 c2             	add    %rax,%rdx
ffffffff80219b8d:	0f b6 45 12          	movzbl 0x12(%rbp),%eax
ffffffff80219b91:	66 0f 6f ca          	movdqa %xmm2,%xmm1
ffffffff80219b95:	66 0f 68 d0          	punpckhbw %xmm0,%xmm2
ffffffff80219b99:	66 0f 60 c8          	punpcklbw %xmm0,%xmm1
ffffffff80219b9d:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff80219ba1:	66 0f 6f e2          	movdqa %xmm2,%xmm4
ffffffff80219ba5:	48 01 c2             	add    %rax,%rdx
ffffffff80219ba8:	66 0f 6f e9          	movdqa %xmm1,%xmm5
ffffffff80219bac:	66 0f 69 c8          	punpckhwd %xmm0,%xmm1
ffffffff80219bb0:	66 0f 61 e0          	punpcklwd %xmm0,%xmm4
ffffffff80219bb4:	0f b6 45 13          	movzbl 0x13(%rbp),%eax
ffffffff80219bb8:	66 0f 61 e8          	punpcklwd %xmm0,%xmm5
ffffffff80219bbc:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
ffffffff80219bc0:	66 0f 6f f1          	movdqa %xmm1,%xmm6
ffffffff80219bc4:	66 0f 6f c1          	movdqa %xmm1,%xmm0
ffffffff80219bc8:	66 0f 6f cd          	movdqa %xmm5,%xmm1
ffffffff80219bcc:	66 0f 62 eb          	punpckldq %xmm3,%xmm5
ffffffff80219bd0:	48 01 c2             	add    %rax,%rdx
ffffffff80219bd3:	66 0f 6a cb          	punpckhdq %xmm3,%xmm1
ffffffff80219bd7:	66 0f 6a f3          	punpckhdq %xmm3,%xmm6
ffffffff80219bdb:	66 0f 62 c3          	punpckldq %xmm3,%xmm0
ffffffff80219bdf:	66 0f d4 e9          	paddq  %xmm1,%xmm5
ffffffff80219be3:	66 0f 6f cc          	movdqa %xmm4,%xmm1
ffffffff80219be7:	66 0f 62 e3          	punpckldq %xmm3,%xmm4
ffffffff80219beb:	66 0f 6a cb          	punpckhdq %xmm3,%xmm1
ffffffff80219bef:	66 0f d4 c6          	paddq  %xmm6,%xmm0
ffffffff80219bf3:	66 0f d4 e1          	paddq  %xmm1,%xmm4
ffffffff80219bf7:	66 0f 6f ca          	movdqa %xmm2,%xmm1
ffffffff80219bfb:	66 0f d4 c5          	paddq  %xmm5,%xmm0
ffffffff80219bff:	66 0f 6a cb          	punpckhdq %xmm3,%xmm1
ffffffff80219c03:	66 0f 62 d3          	punpckldq %xmm3,%xmm2
ffffffff80219c07:	66 0f d4 c4          	paddq  %xmm4,%xmm0
ffffffff80219c0b:	66 0f d4 d1          	paddq  %xmm1,%xmm2
ffffffff80219c0f:	66 0f d4 c2          	paddq  %xmm2,%xmm0
ffffffff80219c13:	66 0f 6f c8          	movdqa %xmm0,%xmm1
ffffffff80219c17:	66 0f 73 d9 08       	psrldq $0x8,%xmm1
ffffffff80219c1c:	66 0f d4 c1          	paddq  %xmm1,%xmm0
ffffffff80219c20:	66 48 0f 7e c0       	movq   %xmm0,%rax
            if((Checksum&0xFF)==0)
ffffffff80219c25:	00 c2                	add    %al,%dl
ffffffff80219c27:	0f 85 23 ff ff ff    	jne    ffffffff80219b50 <__RME_Lowlvl_Init+0xd0>
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff80219c2d:	49 be 00 00 00 00 00 	movabs $0xffff800000000000,%r14
ffffffff80219c34:	80 ff ff 
ffffffff80219c37:	45 8b 6d 10          	mov    0x10(%r13),%r13d
ffffffff80219c3b:	4d 01 f5             	add    %r14,%r13
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;
ffffffff80219c3e:	45 8b 65 04          	mov    0x4(%r13),%r12d
ffffffff80219c42:	49 83 ec 24          	sub    $0x24,%r12
    for(Count=0;Count<Table_Num;Count++)
ffffffff80219c46:	49 c1 ec 02          	shr    $0x2,%r12
ffffffff80219c4a:	0f 84 b9 00 00 00    	je     ffffffff80219d09 <__RME_Lowlvl_Init+0x289>
ffffffff80219c50:	48 8d 44 24 26       	lea    0x26(%rsp),%rax
ffffffff80219c55:	45 31 ff             	xor    %r15d,%r15d
ffffffff80219c58:	48 89 04 24          	mov    %rax,(%rsp)
ffffffff80219c5c:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
ffffffff80219c61:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80219c66:	48 8d 44 24 37       	lea    0x37(%rsp),%rax
ffffffff80219c6b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff80219c70:	48 8d 44 24 2b       	lea    0x2b(%rsp),%rax
ffffffff80219c75:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80219c7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff80219c80:	43 8b 6c bd 24       	mov    0x24(%r13,%r15,4),%ebp
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff80219c85:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff80219c89:	ba 04 00 00 00       	mov    $0x4,%edx
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff80219c8e:	4c 01 f5             	add    %r14,%rbp
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff80219c91:	48 89 ee             	mov    %rbp,%rsi
ffffffff80219c94:	e8 67 51 ff ff       	call   ffffffff8020ee00 <_RME_Memcpy>
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff80219c99:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
ffffffff80219c9e:	48 8d 75 0a          	lea    0xa(%rbp),%rsi
ffffffff80219ca2:	ba 06 00 00 00       	mov    $0x6,%edx
    Signature[4]='\0';
ffffffff80219ca7:	c6 44 24 2a 00       	movb   $0x0,0x2a(%rsp)
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff80219cac:	e8 4f 51 ff ff       	call   ffffffff8020ee00 <_RME_Memcpy>
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff80219cb1:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
ffffffff80219cb6:	48 8d 75 10          	lea    0x10(%rbp),%rsi
ffffffff80219cba:	ba 08 00 00 00       	mov    $0x8,%edx
    ID[6]='\0';
ffffffff80219cbf:	c6 44 24 36 00       	movb   $0x0,0x36(%rsp)
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff80219cc4:	e8 37 51 ff ff       	call   ffffffff8020ee00 <_RME_Memcpy>
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff80219cc9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff80219cce:	48 8d 75 1c          	lea    0x1c(%rbp),%rsi
ffffffff80219cd2:	ba 04 00 00 00       	mov    $0x4,%edx
    Table_ID[8]='\0';
ffffffff80219cd7:	c6 44 24 3f 00       	movb   $0x0,0x3f(%rsp)
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff80219cdc:	e8 1f 51 ff ff       	call   ffffffff8020ee00 <_RME_Memcpy>
        if(_RME_Memcmp(Header->Signature, "APIC", 4)==0)
ffffffff80219ce1:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80219ce6:	48 8d 35 6b 34 00 00 	lea    0x346b(%rip),%rsi        # ffffffff8021d158 <UVM_Init+0x16b8>
ffffffff80219ced:	48 89 ef             	mov    %rbp,%rdi
ffffffff80219cf0:	e8 cb 50 ff ff       	call   ffffffff8020edc0 <_RME_Memcmp>
            MADT=(struct RME_X64_ACPI_MADT_Hdr*)Header;
ffffffff80219cf5:	48 85 c0             	test   %rax,%rax
ffffffff80219cf8:	48 0f 44 dd          	cmove  %rbp,%rbx
    for(Count=0;Count<Table_Num;Count++)
ffffffff80219cfc:	49 83 c7 01          	add    $0x1,%r15
ffffffff80219d00:	4d 39 fc             	cmp    %r15,%r12
ffffffff80219d03:	0f 85 77 ff ff ff    	jne    ffffffff80219c80 <__RME_Lowlvl_Init+0x200>
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
ffffffff80219d09:	8b 43 04             	mov    0x4(%rbx),%eax
ffffffff80219d0c:	83 f8 2b             	cmp    $0x2b,%eax
ffffffff80219d0f:	0f 86 bb 00 00 00    	jbe    ffffffff80219dd0 <__RME_Lowlvl_Init+0x350>
    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff80219d15:	8b 53 24             	mov    0x24(%rbx),%edx
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff80219d18:	48 83 e8 2c          	sub    $0x2c,%rax
    Ptr=MADT->Table;
ffffffff80219d1c:	48 83 c3 2c          	add    $0x2c,%rbx
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff80219d20:	4c 8d 24 03          	lea    (%rbx,%rax,1),%r12
    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff80219d24:	48 89 15 05 d7 00 00 	mov    %rdx,0xd705(%rip)        # ffffffff80227430 <RME_X64_LAPIC_Addr>
    RME_X64_Num_IOAPIC=0;
ffffffff80219d2b:	48 c7 05 4a d7 00 00 	movq   $0x0,0xd74a(%rip)        # ffffffff80227480 <RME_X64_Num_IOAPIC>
ffffffff80219d32:	00 00 00 00 
    RME_X64_Num_CPU=0;
ffffffff80219d36:	48 c7 05 67 e7 00 00 	movq   $0x0,0xe767(%rip)        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff80219d3d:	00 00 00 00 
    while(Ptr<End)
ffffffff80219d41:	4c 39 e3             	cmp    %r12,%rbx
ffffffff80219d44:	72 30                	jb     ffffffff80219d76 <__RME_Lowlvl_Init+0x2f6>
ffffffff80219d46:	e9 85 00 00 00       	jmp    ffffffff80219dd0 <__RME_Lowlvl_Init+0x350>
ffffffff80219d4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        switch(Ptr[0])
ffffffff80219d50:	84 c0                	test   %al,%al
ffffffff80219d52:	75 14                	jne    ffffffff80219d68 <__RME_Lowlvl_Init+0x2e8>
                if(Length<sizeof(struct RME_X64_ACPI_MADT_LAPIC_Record))
ffffffff80219d54:	48 83 fd 07          	cmp    $0x7,%rbp
ffffffff80219d58:	76 0e                	jbe    ffffffff80219d68 <__RME_Lowlvl_Init+0x2e8>
                if((LAPIC->Flags&RME_X64_APIC_LAPIC_ENABLED)==0)
ffffffff80219d5a:	f6 43 04 01          	testb  $0x1,0x4(%rbx)
ffffffff80219d5e:	0f 85 ee 04 00 00    	jne    ffffffff8021a252 <__RME_Lowlvl_Init+0x7d2>
ffffffff80219d64:	0f 1f 40 00          	nopl   0x0(%rax)
        Ptr+=Length;
ffffffff80219d68:	48 01 eb             	add    %rbp,%rbx
    while(Ptr<End)
ffffffff80219d6b:	4c 39 e3             	cmp    %r12,%rbx
ffffffff80219d6e:	73 60                	jae    ffffffff80219dd0 <__RME_Lowlvl_Init+0x350>
        if((End-Ptr)<2)
ffffffff80219d70:	4c 89 e0             	mov    %r12,%rax
ffffffff80219d73:	48 29 d8             	sub    %rbx,%rax
ffffffff80219d76:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80219d7a:	74 54                	je     ffffffff80219dd0 <__RME_Lowlvl_Init+0x350>
        Length=Ptr[1];
ffffffff80219d7c:	0f b6 6b 01          	movzbl 0x1(%rbx),%ebp
        if((End-Ptr)<Length)
ffffffff80219d80:	48 39 e8             	cmp    %rbp,%rax
ffffffff80219d83:	72 4b                	jb     ffffffff80219dd0 <__RME_Lowlvl_Init+0x350>
        switch(Ptr[0])
ffffffff80219d85:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80219d88:	3c 01                	cmp    $0x1,%al
ffffffff80219d8a:	0f 84 10 03 00 00    	je     ffffffff8021a0a0 <__RME_Lowlvl_Init+0x620>
ffffffff80219d90:	3c 02                	cmp    $0x2,%al
ffffffff80219d92:	75 bc                	jne    ffffffff80219d50 <__RME_Lowlvl_Init+0x2d0>
                if(Length<sizeof(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record))
ffffffff80219d94:	48 83 fd 06          	cmp    $0x6,%rbp
ffffffff80219d98:	76 ce                	jbe    ffffffff80219d68 <__RME_Lowlvl_Init+0x2e8>
                RME_Int_Print(OVERRIDE->Bus);
ffffffff80219d9a:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
ffffffff80219d9e:	e8 8d 48 ff ff       	call   ffffffff8020e630 <RME_Int_Print>
                RME_Hex_Print(OVERRIDE->Source);
ffffffff80219da3:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
ffffffff80219da7:	e8 b4 49 ff ff       	call   ffffffff8020e760 <RME_Hex_Print>
                RME_Int_Print(OVERRIDE->GS_Interrupt);
ffffffff80219dac:	0f b6 7b 04          	movzbl 0x4(%rbx),%edi
ffffffff80219db0:	e8 7b 48 ff ff       	call   ffffffff8020e630 <RME_Int_Print>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff80219db5:	0f b7 7b 05          	movzwl 0x5(%rbx),%edi
        Ptr+=Length;
ffffffff80219db9:	48 01 eb             	add    %rbp,%rbx
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff80219dbc:	e8 6f 48 ff ff       	call   ffffffff8020e630 <RME_Int_Print>
    while(Ptr<End)
ffffffff80219dc1:	4c 39 e3             	cmp    %r12,%rbx
ffffffff80219dc4:	72 aa                	jb     ffffffff80219d70 <__RME_Lowlvl_Init+0x2f0>
ffffffff80219dc6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80219dcd:	00 00 00 
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff80219dd0:	48 8d 0d 71 d2 00 00 	lea    0xd271(%rip),%rcx        # ffffffff80227048 <RME_X64_Feature+0x28>
ffffffff80219dd7:	31 ff                	xor    %edi,%edi
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80219dd9:	bb 01 00 00 00       	mov    $0x1,%ebx
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff80219dde:	48 8d 51 f8          	lea    -0x8(%rcx),%rdx
ffffffff80219de2:	48 8d 2d 6f d2 00 00 	lea    0xd26f(%rip),%rbp        # ffffffff80227058 <RME_X64_Feature+0x38>
ffffffff80219de9:	48 8d 72 f8          	lea    -0x8(%rdx),%rsi
ffffffff80219ded:	4c 8d 65 c8          	lea    -0x38(%rbp),%r12
ffffffff80219df1:	e8 53 2a ff ff       	call   ffffffff8020c849 <__RME_X64_CPUID_Get>
ffffffff80219df6:	48 89 05 23 d2 00 00 	mov    %rax,0xd223(%rip)        # ffffffff80227020 <RME_X64_Feature>
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;
ffffffff80219dfd:	48 8b 05 1c d2 00 00 	mov    0xd21c(%rip),%rax        # ffffffff80227020 <RME_X64_Feature>
ffffffff80219e04:	48 89 05 25 d2 00 00 	mov    %rax,0xd225(%rip)        # ffffffff80227030 <RME_X64_Feature+0x10>
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80219e0b:	48 8b 05 0e d2 00 00 	mov    0xd20e(%rip),%rax        # ffffffff80227020 <RME_X64_Feature>
ffffffff80219e12:	48 85 c0             	test   %rax,%rax
ffffffff80219e15:	74 3b                	je     ffffffff80219e52 <__RME_Lowlvl_Init+0x3d2>
ffffffff80219e17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80219e1e:	00 00 
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
ffffffff80219e20:	48 8d 55 08          	lea    0x8(%rbp),%rdx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][3]));
ffffffff80219e24:	48 8d 4d 10          	lea    0x10(%rbp),%rcx
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff80219e28:	48 89 ee             	mov    %rbp,%rsi
ffffffff80219e2b:	48 89 df             	mov    %rbx,%rdi
ffffffff80219e2e:	e8 16 2a ff ff       	call   ffffffff8020c849 <__RME_X64_CPUID_Get>
ffffffff80219e33:	48 89 da             	mov    %rbx,%rdx
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80219e36:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80219e3a:	48 83 c5 20          	add    $0x20,%rbp
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff80219e3e:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff80219e42:	4c 01 e2             	add    %r12,%rdx
ffffffff80219e45:	48 89 42 10          	mov    %rax,0x10(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80219e49:	49 8b 04 24          	mov    (%r12),%rax
ffffffff80219e4d:	48 39 d8             	cmp    %rbx,%rax
ffffffff80219e50:	73 ce                	jae    ffffffff80219e20 <__RME_Lowlvl_Init+0x3a0>
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff80219e52:	48 8d 0d ef d3 00 00 	lea    0xd3ef(%rip),%rcx        # ffffffff80227248 <RME_X64_Feature+0x228>
ffffffff80219e59:	bb 00 00 00 80       	mov    $0x80000000,%ebx
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80219e5e:	bd 01 00 00 00       	mov    $0x1,%ebp
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff80219e63:	48 8d 51 f8          	lea    -0x8(%rcx),%rdx
ffffffff80219e67:	48 89 df             	mov    %rbx,%rdi
ffffffff80219e6a:	4c 8d 2d e7 d3 00 00 	lea    0xd3e7(%rip),%r13        # ffffffff80227258 <RME_X64_Feature+0x238>
ffffffff80219e71:	48 8d 72 f8          	lea    -0x8(%rdx),%rsi
ffffffff80219e75:	4d 8d a5 c8 fd ff ff 	lea    -0x238(%r13),%r12
ffffffff80219e7c:	e8 c8 29 ff ff       	call   ffffffff8020c849 <__RME_X64_CPUID_Get>
ffffffff80219e81:	48 89 05 a0 d1 00 00 	mov    %rax,0xd1a0(%rip)        # ffffffff80227028 <RME_X64_Feature+0x8>
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;
ffffffff80219e88:	48 8b 05 99 d1 00 00 	mov    0xd199(%rip),%rax        # ffffffff80227028 <RME_X64_Feature+0x8>
ffffffff80219e8f:	48 89 05 9a d3 00 00 	mov    %rax,0xd39a(%rip)        # ffffffff80227230 <RME_X64_Feature+0x210>
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80219e96:	48 8b 05 8b d1 00 00 	mov    0xd18b(%rip),%rax        # ffffffff80227028 <RME_X64_Feature+0x8>
ffffffff80219e9d:	48 39 d8             	cmp    %rbx,%rax
ffffffff80219ea0:	74 47                	je     ffffffff80219ee9 <__RME_Lowlvl_Init+0x469>
ffffffff80219ea2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80219ea8:	48 89 ef             	mov    %rbp,%rdi
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
ffffffff80219eab:	49 8d 55 08          	lea    0x8(%r13),%rdx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][3]));
ffffffff80219eaf:	49 8d 4d 10          	lea    0x10(%r13),%rcx
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80219eb3:	4c 89 ee             	mov    %r13,%rsi
ffffffff80219eb6:	48 09 df             	or     %rbx,%rdi
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80219eb9:	49 83 c5 20          	add    $0x20,%r13
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80219ebd:	e8 87 29 ff ff       	call   ffffffff8020c849 <__RME_X64_CPUID_Get>
ffffffff80219ec2:	48 89 ea             	mov    %rbp,%rdx
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80219ec5:	48 83 c5 01          	add    $0x1,%rbp
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80219ec9:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff80219ecd:	4c 01 e2             	add    %r12,%rdx
ffffffff80219ed0:	48 89 82 10 02 00 00 	mov    %rax,0x210(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80219ed7:	48 8b 05 4a d1 00 00 	mov    0xd14a(%rip),%rax        # ffffffff80227028 <RME_X64_Feature+0x8>
ffffffff80219ede:	48 05 00 00 00 80    	add    $0xffffffff80000000,%rax
ffffffff80219ee4:	48 39 e8             	cmp    %rbp,%rax
ffffffff80219ee7:	73 bf                	jae    ffffffff80219ea8 <__RME_Lowlvl_Init+0x428>
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
    /* Detect CPU features */
    __RME_X64_Feature_Get();
    /* Extract memory specifications */
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80219ee9:	48 8b 05 38 e8 00 00 	mov    0xe838(%rip),%rax        # ffffffff80228728 <RME_X64_MBInfo>
    __RME_List_Crt(&RME_X64_Phys_Mem);
ffffffff80219ef0:	48 8b 2d b9 47 00 00 	mov    0x47b9(%rip),%rbp        # ffffffff8021e6b0 <RME_X64_Pgflg_RME2NAT+0x1070>
    Info_Cnt=0;
ffffffff80219ef7:	45 31 ff             	xor    %r15d,%r15d
    MMap_Cnt=0;
ffffffff80219efa:	45 31 e4             	xor    %r12d,%r12d
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80219efd:	44 8b 68 2c          	mov    0x2c(%rax),%r13d
    __RME_List_Crt(&RME_X64_Phys_Mem);
ffffffff80219f01:	48 89 ef             	mov    %rbp,%rdi
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80219f04:	44 8b 70 30          	mov    0x30(%rax),%r14d
    __RME_List_Crt(&RME_X64_Phys_Mem);
ffffffff80219f08:	e8 73 f7 ff ff       	call   ffffffff80219680 <__RME_List_Crt>
    while(MMap_Cnt<MMap_Length)
ffffffff80219f0d:	4d 85 ed             	test   %r13,%r13
ffffffff80219f10:	75 17                	jne    ffffffff80219f29 <__RME_Lowlvl_Init+0x4a9>
ffffffff80219f12:	e9 96 00 00 00       	jmp    ffffffff80219fad <__RME_Lowlvl_Init+0x52d>
ffffffff80219f17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80219f1e:	00 00 
ffffffff80219f20:	4d 39 ec             	cmp    %r13,%r12
ffffffff80219f23:	0f 83 84 00 00 00    	jae    ffffffff80219fad <__RME_Lowlvl_Init+0x52d>
        MMap=(struct multiboot_mmap_entry*)(MMap_Addr+MMap_Cnt);
ffffffff80219f29:	4b 8d 1c 26          	lea    (%r14,%r12,1),%rbx
        MMap_Cnt+=MMap->size+4;
ffffffff80219f2d:	8b 03                	mov    (%rbx),%eax
ffffffff80219f2f:	83 c0 04             	add    $0x4,%eax
ffffffff80219f32:	49 01 c4             	add    %rax,%r12
        if(MMap->type!=1)
ffffffff80219f35:	83 7b 14 01          	cmpl   $0x1,0x14(%rbx)
ffffffff80219f39:	75 e5                	jne    ffffffff80219f20 <__RME_Lowlvl_Init+0x4a0>
        Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff80219f3b:	48 8b 55 00          	mov    0x0(%rbp),%rdx
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff80219f3f:	48 8b 43 04          	mov    0x4(%rbx),%rax
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff80219f43:	48 39 ea             	cmp    %rbp,%rdx
ffffffff80219f46:	75 10                	jne    ffffffff80219f58 <__RME_Lowlvl_Init+0x4d8>
ffffffff80219f48:	eb 14                	jmp    ffffffff80219f5e <__RME_Lowlvl_Init+0x4de>
ffffffff80219f4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            Trav_Ptr=Trav_Ptr->Next;
ffffffff80219f50:	48 8b 12             	mov    (%rdx),%rdx
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff80219f53:	48 39 ea             	cmp    %rbp,%rdx
ffffffff80219f56:	74 06                	je     ffffffff80219f5e <__RME_Lowlvl_Init+0x4de>
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
ffffffff80219f58:	48 3b 42 10          	cmp    0x10(%rdx),%rax
ffffffff80219f5c:	73 f2                	jae    ffffffff80219f50 <__RME_Lowlvl_Init+0x4d0>
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff80219f5e:	48 8b 0d cb 41 00 00 	mov    0x41cb(%rip),%rcx        # ffffffff8021e130 <RME_X64_Pgflg_RME2NAT+0xaf0>
ffffffff80219f65:	66 48 0f 6e c0       	movq   %rax,%xmm0
ffffffff80219f6a:	4c 89 ff             	mov    %r15,%rdi
        __RME_List_Ins(&(RME_X64_Mem[Info_Cnt].Head),Trav_Ptr->Prev,Trav_Ptr);
ffffffff80219f6d:	48 8b 72 08          	mov    0x8(%rdx),%rsi
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff80219f71:	0f 16 43 0c          	movhps 0xc(%rbx),%xmm0
ffffffff80219f75:	48 c1 e7 05          	shl    $0x5,%rdi
        Info_Cnt++;
ffffffff80219f79:	49 83 c7 01          	add    $0x1,%r15
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff80219f7d:	0f 29 44 0f 10       	movaps %xmm0,0x10(%rdi,%rcx,1)
        __RME_List_Ins(&(RME_X64_Mem[Info_Cnt].Head),Trav_Ptr->Prev,Trav_Ptr);
ffffffff80219f82:	48 01 cf             	add    %rcx,%rdi
ffffffff80219f85:	e8 06 f7 ff ff       	call   ffffffff80219690 <__RME_List_Ins>
        RME_Hex_Print(MMap->addr);
ffffffff80219f8a:	48 8b 7b 04          	mov    0x4(%rbx),%rdi
ffffffff80219f8e:	e8 cd 47 ff ff       	call   ffffffff8020e760 <RME_Hex_Print>
        RME_Hex_Print(MMap->len);
ffffffff80219f93:	48 8b 7b 0c          	mov    0xc(%rbx),%rdi
ffffffff80219f97:	e8 c4 47 ff ff       	call   ffffffff8020e760 <RME_Hex_Print>
        RME_Hex_Print(MMap->type);
ffffffff80219f9c:	8b 7b 14             	mov    0x14(%rbx),%edi
ffffffff80219f9f:	e8 bc 47 ff ff       	call   ffffffff8020e760 <RME_Hex_Print>
    while(MMap_Cnt<MMap_Length)
ffffffff80219fa4:	4d 39 ec             	cmp    %r13,%r12
ffffffff80219fa7:	0f 82 7c ff ff ff    	jb     ffffffff80219f29 <__RME_Lowlvl_Init+0x4a9>
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff80219fad:	48 8b 5d 00          	mov    0x0(%rbp),%rbx
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff80219fb1:	48 39 eb             	cmp    %rbp,%rbx
ffffffff80219fb4:	0f 84 0d 03 00 00    	je     ffffffff8021a2c7 <__RME_Lowlvl_Init+0x847>
ffffffff80219fba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80219fc0:	48 8b 03             	mov    (%rbx),%rax
ffffffff80219fc3:	48 39 e8             	cmp    %rbp,%rax
ffffffff80219fc6:	74 20                	je     ffffffff80219fe8 <__RME_Lowlvl_Init+0x568>
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff80219fc8:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff80219fcc:	48 8b 53 18          	mov    0x18(%rbx),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr)
ffffffff80219fd0:	48 8b 0b             	mov    (%rbx),%rcx
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff80219fd3:	48 01 c2             	add    %rax,%rdx
ffffffff80219fd6:	48 39 51 10          	cmp    %rdx,0x10(%rcx)
ffffffff80219fda:	0f 82 30 01 00 00    	jb     ffffffff8021a110 <__RME_Lowlvl_Init+0x690>
        Trav_Ptr=Trav_Ptr->Next;
ffffffff80219fe0:	48 8b 1b             	mov    (%rbx),%rbx
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff80219fe3:	48 39 eb             	cmp    %rbp,%rbx
ffffffff80219fe6:	75 d8                	jne    ffffffff80219fc0 <__RME_Lowlvl_Init+0x540>
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff80219fe8:	48 8b 45 00          	mov    0x0(%rbp),%rax
    MMap_Cnt=0;
ffffffff80219fec:	31 db                	xor    %ebx,%ebx
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff80219fee:	48 39 e8             	cmp    %rbp,%rax
ffffffff80219ff1:	0f 84 d0 02 00 00    	je     ffffffff8021a2c7 <__RME_Lowlvl_Init+0x847>
ffffffff80219ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80219ffe:	00 00 
        MMap_Cnt+=((struct __RME_X64_Mem*)(Trav_Ptr))->Length;
ffffffff8021a000:	48 03 58 18          	add    0x18(%rax),%rbx
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021a004:	48 8b 00             	mov    (%rax),%rax
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021a007:	48 39 e8             	cmp    %rbp,%rax
ffffffff8021a00a:	75 f4                	jne    ffffffff8021a000 <__RME_Lowlvl_Init+0x580>
    RME_Hex_Print(MMap_Cnt);
ffffffff8021a00c:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a00f:	e8 4c 47 ff ff       	call   ffffffff8020e760 <RME_Hex_Print>
    RME_X64_Layout.Kot_Start=(rme_ptr_t)RME_KOT_VA_BASE;
ffffffff8021a014:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021a01b:	80 ff ff 
ffffffff8021a01e:	48 89 05 9b e4 00 00 	mov    %rax,0xe49b(%rip)        # ffffffff802284c0 <RME_X64_Layout>
    Info_Cnt=(MMap_Cnt>3*RME_POW2(RME_PGT_SIZE_1G))?(MMap_Cnt+RME_POW2(RME_PGT_SIZE_1G)):MMap_Cnt;
ffffffff8021a025:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
ffffffff8021a02a:	48 39 d8             	cmp    %rbx,%rax
ffffffff8021a02d:	73 07                	jae    ffffffff8021a036 <__RME_Lowlvl_Init+0x5b6>
ffffffff8021a02f:	48 81 c3 00 00 00 40 	add    $0x40000000,%rbx
    RME_X64_Layout.Kot_Size=((Info_Cnt>>RME_KOM_SLOT_ORDER)>>RME_WORD_ORDER)+1;
ffffffff8021a036:	48 c1 eb 0a          	shr    $0xa,%rbx
ffffffff8021a03a:	48 8d 43 01          	lea    0x1(%rbx),%rax
ffffffff8021a03e:	48 89 05 83 e4 00 00 	mov    %rax,0xe483(%rip)        # ffffffff802284c8 <RME_X64_Layout+0x8>
    RME_X64_Layout.PerCPU_Start=RME_ROUND_UP(RME_X64_Layout.Kot_Start+RME_X64_Layout.Kot_Size,RME_PGT_SIZE_4K);
ffffffff8021a045:	48 8b 15 74 e4 00 00 	mov    0xe474(%rip),%rdx        # ffffffff802284c0 <RME_X64_Layout>
ffffffff8021a04c:	48 8b 05 75 e4 00 00 	mov    0xe475(%rip),%rax        # ffffffff802284c8 <RME_X64_Layout+0x8>
ffffffff8021a053:	48 8d 84 02 ff 0f 00 	lea    0xfff(%rdx,%rax,1),%rax
ffffffff8021a05a:	00 
ffffffff8021a05b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff8021a061:	48 89 05 68 e4 00 00 	mov    %rax,0xe468(%rip)        # ffffffff802284d0 <RME_X64_Layout+0x10>
    RME_X64_Layout.PerCPU_Size=2*RME_POW2(RME_PGT_SIZE_4K)*RME_X64_Num_CPU;
ffffffff8021a068:	48 8b 05 39 e4 00 00 	mov    0xe439(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021a06f:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8021a073:	48 89 05 5e e4 00 00 	mov    %rax,0xe45e(%rip)        # ffffffff802284d8 <RME_X64_Layout+0x18>
    RME_X64_Layout.Stack_Size=RME_X64_Num_CPU<<RME_X64_KSTACK_ORDER;
ffffffff8021a07a:	48 8b 05 27 e4 00 00 	mov    0xe427(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021a081:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff8021a085:	48 89 05 94 e6 00 00 	mov    %rax,0xe694(%rip)        # ffffffff80228720 <RME_X64_Layout+0x260>

    return 0;
}
ffffffff8021a08c:	48 83 c4 48          	add    $0x48,%rsp
ffffffff8021a090:	31 c0                	xor    %eax,%eax
ffffffff8021a092:	5b                   	pop    %rbx
ffffffff8021a093:	5d                   	pop    %rbp
ffffffff8021a094:	41 5c                	pop    %r12
ffffffff8021a096:	41 5d                	pop    %r13
ffffffff8021a098:	41 5e                	pop    %r14
ffffffff8021a09a:	41 5f                	pop    %r15
ffffffff8021a09c:	c3                   	ret
ffffffff8021a09d:	0f 1f 00             	nopl   (%rax)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_IOAPIC_Record))
ffffffff8021a0a0:	48 83 fd 0b          	cmp    $0xb,%rbp
ffffffff8021a0a4:	0f 86 be fc ff ff    	jbe    ffffffff80219d68 <__RME_Lowlvl_Init+0x2e8>
                RME_Int_Print(RME_X64_Num_IOAPIC);
ffffffff8021a0aa:	48 8b 3d cf d3 00 00 	mov    0xd3cf(%rip),%rdi        # ffffffff80227480 <RME_X64_Num_IOAPIC>
ffffffff8021a0b1:	e8 7a 45 ff ff       	call   ffffffff8020e630 <RME_Int_Print>
                RME_Hex_Print(IOAPIC->Addr);
ffffffff8021a0b6:	8b 7b 04             	mov    0x4(%rbx),%edi
ffffffff8021a0b9:	e8 a2 46 ff ff       	call   ffffffff8020e760 <RME_Hex_Print>
                RME_Int_Print(IOAPIC->ID);
ffffffff8021a0be:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
ffffffff8021a0c2:	e8 69 45 ff ff       	call   ffffffff8020e630 <RME_Int_Print>
                RME_Int_Print(IOAPIC->Interrupt_Base);
ffffffff8021a0c7:	8b 7b 08             	mov    0x8(%rbx),%edi
ffffffff8021a0ca:	e8 61 45 ff ff       	call   ffffffff8020e630 <RME_Int_Print>
                if(RME_X64_Num_IOAPIC!=0)
ffffffff8021a0cf:	48 8b 05 aa d3 00 00 	mov    0xd3aa(%rip),%rax        # ffffffff80227480 <RME_X64_Num_IOAPIC>
ffffffff8021a0d6:	48 85 c0             	test   %rax,%rax
ffffffff8021a0d9:	75 16                	jne    ffffffff8021a0f1 <__RME_Lowlvl_Init+0x671>
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
ffffffff8021a0db:	48 8b 15 9e d3 00 00 	mov    0xd39e(%rip),%rdx        # ffffffff80227480 <RME_X64_Num_IOAPIC>
ffffffff8021a0e2:	0f b6 4b 02          	movzbl 0x2(%rbx),%ecx
ffffffff8021a0e6:	48 8d 05 53 d3 00 00 	lea    0xd353(%rip),%rax        # ffffffff80227440 <RME_X64_IOAPIC_Info>
ffffffff8021a0ed:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
                RME_X64_Num_IOAPIC++;
ffffffff8021a0f1:	48 8b 05 88 d3 00 00 	mov    0xd388(%rip),%rax        # ffffffff80227480 <RME_X64_Num_IOAPIC>
ffffffff8021a0f8:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021a0fc:	48 89 05 7d d3 00 00 	mov    %rax,0xd37d(%rip)        # ffffffff80227480 <RME_X64_Num_IOAPIC>
                RME_ASSERT(RME_X64_Num_IOAPIC<=RME_X64_IOAPIC_NUM);
ffffffff8021a103:	48 8b 05 76 d3 00 00 	mov    0xd376(%rip),%rax        # ffffffff80227480 <RME_X64_Num_IOAPIC>
                break;
ffffffff8021a10a:	e9 59 fc ff ff       	jmp    ffffffff80219d68 <__RME_Lowlvl_Init+0x2e8>
ffffffff8021a10f:	90                   	nop
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021a110:	48 8b 0b             	mov    (%rbx),%rcx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021a113:	48 8b 13             	mov    (%rbx),%rdx
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff8021a116:	48 89 df             	mov    %rbx,%rdi
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021a119:	48 8b 52 18          	mov    0x18(%rdx),%rdx
ffffffff8021a11d:	48 03 51 10          	add    0x10(%rcx),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021a121:	48 29 c2             	sub    %rax,%rdx
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff8021a124:	48 8b 03             	mov    (%rbx),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021a127:	48 89 53 18          	mov    %rdx,0x18(%rbx)
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff8021a12b:	48 8b 30             	mov    (%rax),%rsi
ffffffff8021a12e:	e8 6d f5 ff ff       	call   ffffffff802196a0 <__RME_List_Del>
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021a133:	48 39 eb             	cmp    %rbp,%rbx
ffffffff8021a136:	0f 85 84 fe ff ff    	jne    ffffffff80219fc0 <__RME_Lowlvl_Init+0x540>
ffffffff8021a13c:	e9 a7 fe ff ff       	jmp    ffffffff80219fe8 <__RME_Lowlvl_Init+0x568>
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff8021a141:	48 98                	cltq
ffffffff8021a143:	4c 8d 25 05 30 00 00 	lea    0x3005(%rip),%r12        # ffffffff8021d14f <UVM_Init+0x16af>
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff8021a14a:	48 bd 00 00 00 00 00 	movabs $0xffff800000000000,%rbp
ffffffff8021a151:	80 ff ff 
ffffffff8021a154:	48 ba e0 03 00 00 00 	movabs $0xffff8000000003e0,%rdx
ffffffff8021a15b:	80 ff ff 
ffffffff8021a15e:	48 01 c5             	add    %rax,%rbp
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff8021a161:	4c 8d 34 10          	lea    (%rax,%rdx,1),%r14
ffffffff8021a165:	eb 16                	jmp    ffffffff8021a17d <__RME_Lowlvl_Init+0x6fd>
ffffffff8021a167:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a16e:	00 00 
ffffffff8021a170:	48 83 c5 04          	add    $0x4,%rbp
ffffffff8021a174:	49 39 ee             	cmp    %rbp,%r14
ffffffff8021a177:	0f 84 b3 f9 ff ff    	je     ffffffff80219b30 <__RME_Lowlvl_Init+0xb0>
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff8021a17d:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021a182:	4c 89 e6             	mov    %r12,%rsi
ffffffff8021a185:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021a188:	49 89 ed             	mov    %rbp,%r13
ffffffff8021a18b:	e8 30 4c ff ff       	call   ffffffff8020edc0 <_RME_Memcmp>
ffffffff8021a190:	48 85 c0             	test   %rax,%rax
ffffffff8021a193:	75 db                	jne    ffffffff8021a170 <__RME_Lowlvl_Init+0x6f0>
                Checksum+=Pos[Count+Check_Cnt];
ffffffff8021a195:	66 0f ef ff          	pxor   %xmm7,%xmm7
ffffffff8021a199:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021a19d:	66 0f ef db          	pxor   %xmm3,%xmm3
ffffffff8021a1a1:	0f b6 45 11          	movzbl 0x11(%rbp),%eax
ffffffff8021a1a5:	f3 0f 6f 55 00       	movdqu 0x0(%rbp),%xmm2
ffffffff8021a1aa:	0f b6 55 10          	movzbl 0x10(%rbp),%edx
ffffffff8021a1ae:	66 0f 6f ca          	movdqa %xmm2,%xmm1
ffffffff8021a1b2:	66 0f 68 d7          	punpckhbw %xmm7,%xmm2
ffffffff8021a1b6:	48 01 c2             	add    %rax,%rdx
ffffffff8021a1b9:	0f b6 45 12          	movzbl 0x12(%rbp),%eax
ffffffff8021a1bd:	66 0f 60 cf          	punpcklbw %xmm7,%xmm1
ffffffff8021a1c1:	66 0f 6f e2          	movdqa %xmm2,%xmm4
ffffffff8021a1c5:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
ffffffff8021a1c9:	66 0f 6f e9          	movdqa %xmm1,%xmm5
ffffffff8021a1cd:	66 0f 69 c8          	punpckhwd %xmm0,%xmm1
ffffffff8021a1d1:	66 0f 61 e0          	punpcklwd %xmm0,%xmm4
ffffffff8021a1d5:	48 01 c2             	add    %rax,%rdx
ffffffff8021a1d8:	66 0f 61 e8          	punpcklwd %xmm0,%xmm5
ffffffff8021a1dc:	66 0f 6f f1          	movdqa %xmm1,%xmm6
ffffffff8021a1e0:	66 0f 6f c1          	movdqa %xmm1,%xmm0
ffffffff8021a1e4:	0f b6 45 13          	movzbl 0x13(%rbp),%eax
ffffffff8021a1e8:	66 0f 6f cd          	movdqa %xmm5,%xmm1
ffffffff8021a1ec:	66 0f 62 eb          	punpckldq %xmm3,%xmm5
ffffffff8021a1f0:	66 0f 6a f3          	punpckhdq %xmm3,%xmm6
ffffffff8021a1f4:	66 0f 6a cb          	punpckhdq %xmm3,%xmm1
ffffffff8021a1f8:	66 0f 62 c3          	punpckldq %xmm3,%xmm0
ffffffff8021a1fc:	48 01 c2             	add    %rax,%rdx
ffffffff8021a1ff:	66 0f d4 e9          	paddq  %xmm1,%xmm5
ffffffff8021a203:	66 0f 6f cc          	movdqa %xmm4,%xmm1
ffffffff8021a207:	66 0f 62 e3          	punpckldq %xmm3,%xmm4
ffffffff8021a20b:	66 0f 6a cb          	punpckhdq %xmm3,%xmm1
ffffffff8021a20f:	66 0f d4 c6          	paddq  %xmm6,%xmm0
ffffffff8021a213:	66 0f d4 e1          	paddq  %xmm1,%xmm4
ffffffff8021a217:	66 0f 6f ca          	movdqa %xmm2,%xmm1
ffffffff8021a21b:	66 0f d4 c5          	paddq  %xmm5,%xmm0
ffffffff8021a21f:	66 0f 6a cb          	punpckhdq %xmm3,%xmm1
ffffffff8021a223:	66 0f 62 d3          	punpckldq %xmm3,%xmm2
ffffffff8021a227:	66 0f d4 c4          	paddq  %xmm4,%xmm0
ffffffff8021a22b:	66 0f d4 d1          	paddq  %xmm1,%xmm2
ffffffff8021a22f:	66 0f d4 c2          	paddq  %xmm2,%xmm0
ffffffff8021a233:	66 0f 6f c8          	movdqa %xmm0,%xmm1
ffffffff8021a237:	66 0f 73 d9 08       	psrldq $0x8,%xmm1
ffffffff8021a23c:	66 0f d4 c1          	paddq  %xmm1,%xmm0
ffffffff8021a240:	66 48 0f 7e c0       	movq   %xmm0,%rax
            if((Checksum&0xFF)==0)
ffffffff8021a245:	00 c2                	add    %al,%dl
ffffffff8021a247:	0f 85 23 ff ff ff    	jne    ffffffff8021a170 <__RME_Lowlvl_Init+0x6f0>
ffffffff8021a24d:	e9 db f9 ff ff       	jmp    ffffffff80219c2d <__RME_Lowlvl_Init+0x1ad>
                RME_Int_Print(RME_X64_Num_CPU);
ffffffff8021a252:	48 8b 3d 4f e2 00 00 	mov    0xe24f(%rip),%rdi        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021a259:	e8 d2 43 ff ff       	call   ffffffff8020e630 <RME_Int_Print>
                RME_Int_Print(LAPIC->APIC_ID);
ffffffff8021a25e:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
ffffffff8021a262:	e8 c9 43 ff ff       	call   ffffffff8020e630 <RME_Int_Print>
                RME_X64_CPU_Info[RME_X64_Num_CPU].LAPIC_ID=LAPIC->APIC_ID;
ffffffff8021a267:	48 8b 05 3a e2 00 00 	mov    0xe23a(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021a26e:	0f b6 4b 03          	movzbl 0x3(%rbx),%ecx
ffffffff8021a272:	48 8d 15 27 d2 00 00 	lea    0xd227(%rip),%rdx        # ffffffff802274a0 <RME_X64_CPU_Info>
ffffffff8021a279:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021a27d:	48 01 d0             	add    %rdx,%rax
ffffffff8021a280:	48 89 08             	mov    %rcx,(%rax)
                RME_X64_CPU_Info[RME_X64_Num_CPU].Boot_Done=0;
ffffffff8021a283:	48 8b 05 1e e2 00 00 	mov    0xe21e(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021a28a:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021a28e:	48 01 c2             	add    %rax,%rdx
ffffffff8021a291:	48 c7 42 08 00 00 00 	movq   $0x0,0x8(%rdx)
ffffffff8021a298:	00 
                RME_X64_Num_CPU++;
ffffffff8021a299:	48 8b 05 08 e2 00 00 	mov    0xe208(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021a2a0:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021a2a4:	48 89 05 fd e1 00 00 	mov    %rax,0xe1fd(%rip)        # ffffffff802284a8 <RME_X64_Num_CPU>
                RME_ASSERT(RME_X64_Num_CPU<=RME_X64_CPU_NUM);
ffffffff8021a2ab:	48 8b 05 f6 e1 00 00 	mov    0xe1f6(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
                break;
ffffffff8021a2b2:	e9 b1 fa ff ff       	jmp    ffffffff80219d68 <__RME_Lowlvl_Init+0x2e8>
        RME_X64_UART_Exist=0;
ffffffff8021a2b7:	48 c7 05 6e e4 00 00 	movq   $0x0,0xe46e(%rip)        # ffffffff80228730 <RME_X64_UART_Exist>
ffffffff8021a2be:	00 00 00 00 
ffffffff8021a2c2:	e9 4c f8 ff ff       	jmp    ffffffff80219b13 <__RME_Lowlvl_Init+0x93>
    RME_Hex_Print(MMap_Cnt);
ffffffff8021a2c7:	31 ff                	xor    %edi,%edi
ffffffff8021a2c9:	e8 92 44 ff ff       	call   ffffffff8020e760 <RME_Hex_Print>
    RME_X64_Layout.Kot_Start=(rme_ptr_t)RME_KOT_VA_BASE;
ffffffff8021a2ce:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021a2d5:	80 ff ff 
ffffffff8021a2d8:	48 89 05 e1 e1 00 00 	mov    %rax,0xe1e1(%rip)        # ffffffff802284c0 <RME_X64_Layout>
ffffffff8021a2df:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021a2e4:	e9 55 fd ff ff       	jmp    ffffffff8021a03e <__RME_Lowlvl_Init+0x5be>
ffffffff8021a2e9:	e9 98 17 00 00       	jmp    ffffffff8021ba86 <__RME_Lowlvl_Init.cold>
ffffffff8021a2ee:	66 90                	xchg   %ax,%ax

ffffffff8021a2f0 <__RME_Pgt_Kom_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Kom_Init(void)
{
ffffffff8021a2f0:	f3 0f 1e fa          	endbr64
ffffffff8021a2f4:	41 54                	push   %r12
    rme_cnt_t PDE_Cnt;
    rme_cnt_t Addr_Cnt;
    struct __RME_X64_Mem* Mem;

    /* Now initialize the kernel object allocation table */
    _RME_Kot_Init(RME_X64_Layout.Kot_Size/sizeof(rme_ptr_t));
ffffffff8021a2f6:	48 8b 3d cb e1 00 00 	mov    0xe1cb(%rip),%rdi        # ffffffff802284c8 <RME_X64_Layout+0x8>
{
ffffffff8021a2fd:	55                   	push   %rbp
ffffffff8021a2fe:	53                   	push   %rbx
    _RME_Kot_Init(RME_X64_Layout.Kot_Size/sizeof(rme_ptr_t));
ffffffff8021a2ff:	48 c1 ef 03          	shr    $0x3,%rdi
ffffffff8021a303:	e8 58 4f ff ff       	call   ffffffff8020f260 <_RME_Kot_Init>
    /* Reset PCID counter */
    RME_X64_PCID_Inc=0;
ffffffff8021a308:	48 8b 3d a9 40 00 00 	mov    0x40a9(%rip),%rdi        # ffffffff8021e3b8 <RME_X64_Pgflg_RME2NAT+0xd78>
ffffffff8021a30f:	48 c7 05 f6 cc 00 00 	movq   $0x0,0xccf6(%rip)        # ffffffff80227010 <RME_X64_PCID_Inc>
ffffffff8021a316:	00 00 00 00 

    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
    {
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|
ffffffff8021a31a:	49 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%r9
ffffffff8021a321:	ff 0f 00 
ffffffff8021a324:	66 0f 6f 05 f4 31 00 	movdqa 0x31f4(%rip),%xmm0        # ffffffff8021d520 <Table.1+0x200>
ffffffff8021a32b:	00 
ffffffff8021a32c:	48 8d b7 00 08 00 00 	lea    0x800(%rdi),%rsi
ffffffff8021a333:	48 8d 8f 00 10 00 00 	lea    0x1000(%rdi),%rcx
ffffffff8021a33a:	48 8d 97 00 20 00 00 	lea    0x2000(%rdi),%rdx
ffffffff8021a341:	4c 8d 97 00 20 10 00 	lea    0x102000(%rdi),%r10
ffffffff8021a348:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a34f:	00 
ffffffff8021a350:	48 8d 82 00 f0 ff 7f 	lea    0x7ffff000(%rdx),%rax
ffffffff8021a357:	49 89 d0             	mov    %rdx,%r8
ffffffff8021a35a:	4c 21 c8             	and    %r9,%rax
ffffffff8021a35d:	49 29 c8             	sub    %rcx,%r8
ffffffff8021a360:	48 0d 03 01 00 00    	or     $0x103,%rax
ffffffff8021a366:	41 83 e0 10          	and    $0x10,%r8d
ffffffff8021a36a:	48 89 06             	mov    %rax,(%rsi)
ffffffff8021a36d:	48 89 c8             	mov    %rcx,%rax
ffffffff8021a370:	74 0e                	je     ffffffff8021a380 <__RME_Pgt_Kom_Init+0x90>
        		                    RME_X64_MMU_KERN_PML4;

        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff8021a372:	48 8d 41 10          	lea    0x10(%rcx),%rax
ffffffff8021a376:	0f 11 01             	movups %xmm0,(%rcx)
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff8021a379:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a37c:	74 12                	je     ffffffff8021a390 <__RME_Pgt_Kom_Init+0xa0>
ffffffff8021a37e:	66 90                	xchg   %ax,%ax
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff8021a380:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8021a383:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021a387:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff8021a38b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a38e:	75 f0                	jne    ffffffff8021a380 <__RME_Pgt_Kom_Init+0x90>
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff8021a390:	48 81 c2 00 10 00 00 	add    $0x1000,%rdx
ffffffff8021a397:	48 83 c6 08          	add    $0x8,%rsi
ffffffff8021a39b:	48 81 c1 00 10 00 00 	add    $0x1000,%rcx
ffffffff8021a3a2:	49 39 d2             	cmp    %rdx,%r10
ffffffff8021a3a5:	75 a9                	jne    ffffffff8021a350 <__RME_Pgt_Kom_Init+0x60>
    }

    /* Map in the first 4GB as linear mappings as always, 4 super pages, including the device hole.
     * We need to detect whether the 1GB page is supported. If not, we just map the initial tables
     * in, and we know where they are hard-coded in the assembly file */
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff8021a3a7:	4c 8b 15 ba ce 00 00 	mov    0xceba(%rip),%r10        # ffffffff80227268 <RME_X64_Feature+0x248>
    {
        /* Can use 1GB pages */
        RME_DBG_S("\n\rThis CPU have 1GB superpage support");
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a3ae:	4c 8b 8f 00 10 00 00 	mov    0x1000(%rdi),%r9
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a3b5:	4c 8b 87 08 10 00 00 	mov    0x1008(%rdi),%r8
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a3bc:	48 8b b7 10 10 00 00 	mov    0x1010(%rdi),%rsi
        /* We need to mark the device hole as unbufferable */
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_ADDR(3*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a3c3:	48 8b 8f 18 10 00 00 	mov    0x1018(%rdi),%rcx
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a3ca:	48 8b 97 f0 0f 10 00 	mov    0x100ff0(%rdi),%rdx
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a3d1:	48 8b 87 f8 0f 10 00 	mov    0x100ff8(%rdi),%rax
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff8021a3d8:	41 f7 c2 00 00 00 04 	test   $0x4000000,%r10d
ffffffff8021a3df:	0f 84 2b 04 00 00    	je     ffffffff8021a810 <__RME_Pgt_Kom_Init+0x520>
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a3e5:	41 ba 81 00 00 80    	mov    $0x80000081,%r10d
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a3eb:	41 80 c9 81          	or     $0x81,%r9b
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a3ef:	80 ca 81             	or     $0x81,%dl
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a3f2:	48 0d 81 00 00 40    	or     $0x40000081,%rax
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a3f8:	4c 09 d6             	or     %r10,%rsi
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff8021a3fb:	49 81 c2 18 00 00 40 	add    $0x40000018,%r10
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a402:	49 81 c8 81 00 00 40 	or     $0x40000081,%r8
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff8021a409:	4c 09 d1             	or     %r10,%rcx
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a40c:	4c 89 87 08 10 00 00 	mov    %r8,0x1008(%rdi)
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
    }

    /* Ignore all memory below 4G, but we need to get the size of such memory above 16MB */
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff8021a413:	4c 8b 05 96 42 00 00 	mov    0x4296(%rip),%r8        # ffffffff8021e6b0 <RME_X64_Pgflg_RME2NAT+0x1070>
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a41a:	48 89 87 f8 0f 10 00 	mov    %rax,0x100ff8(%rdi)
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff8021a421:	49 8b 00             	mov    (%r8),%rax
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a424:	4c 89 8f 00 10 00 00 	mov    %r9,0x1000(%rdi)
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a42b:	48 89 b7 10 10 00 00 	mov    %rsi,0x1010(%rdi)
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff8021a432:	48 89 8f 18 10 00 00 	mov    %rcx,0x1018(%rdi)
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021a439:	48 89 97 f0 0f 10 00 	mov    %rdx,0x100ff0(%rdi)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021a440:	4c 39 c0             	cmp    %r8,%rax
ffffffff8021a443:	75 17                	jne    ffffffff8021a45c <__RME_Pgt_Kom_Init+0x16c>
ffffffff8021a445:	e9 a6 04 00 00       	jmp    ffffffff8021a8f0 <__RME_Pgt_Kom_Init+0x600>
ffffffff8021a44a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    {
        /* See if this memory segment passes 16MB limit */
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff8021a450:	48 8b 00             	mov    (%rax),%rax
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021a453:	4c 39 c0             	cmp    %r8,%rax
ffffffff8021a456:	0f 84 37 04 00 00    	je     ffffffff8021a893 <__RME_Pgt_Kom_Init+0x5a3>
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
ffffffff8021a45c:	48 8b 48 10          	mov    0x10(%rax),%rcx
ffffffff8021a460:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff8021a464:	48 8d 14 31          	lea    (%rcx,%rsi,1),%rdx
ffffffff8021a468:	48 81 fa 00 00 00 01 	cmp    $0x1000000,%rdx
ffffffff8021a46f:	76 df                	jbe    ffffffff8021a450 <__RME_Pgt_Kom_Init+0x160>
    }

    /* The first Kom1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGT_SIZE_16M));
    /* The raw sizes of kernel memory segment 1 - per CPU area is already aligned so no need to align again */
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff8021a471:	48 8b 15 58 e0 00 00 	mov    0xe058(%rip),%rdx        # ffffffff802284d0 <RME_X64_Layout+0x10>
ffffffff8021a478:	4c 8b 0d 59 e0 00 00 	mov    0xe059(%rip),%r9        # ffffffff802284d8 <RME_X64_Layout+0x18>
ffffffff8021a47f:	4c 01 ca             	add    %r9,%rdx
ffffffff8021a482:	48 89 15 6f e0 00 00 	mov    %rdx,0xe06f(%rip)        # ffffffff802284f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff8021a489:	4c 8b 0d 68 e0 00 00 	mov    0xe068(%rip),%r9        # ffffffff802284f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff8021a490:	48 ba 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rdx
ffffffff8021a497:	7f ff ff 
ffffffff8021a49a:	4c 29 ca             	sub    %r9,%rdx
ffffffff8021a49d:	48 01 f2             	add    %rsi,%rdx
ffffffff8021a4a0:	48 01 ca             	add    %rcx,%rdx
ffffffff8021a4a3:	48 89 15 4e e1 00 00 	mov    %rdx,0xe14e(%rip)        # ffffffff802285f8 <RME_X64_Layout+0x138>

    /* Add the rest of Kom1 into the array */
    Addr_Cnt=1;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021a4aa:	4c 39 c0             	cmp    %r8,%rax
ffffffff8021a4ad:	0f 84 21 04 00 00    	je     ffffffff8021a8d4 <__RME_Pgt_Kom_Init+0x5e4>
    Addr_Cnt=1;
ffffffff8021a4b3:	ba 01 00 00 00       	mov    $0x1,%edx
    {
        /* Add all segments under 4GB to Kom1 */
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
        /* If detected anything above 4GB, then this is not Kom1, exiting */
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff8021a4b8:	41 bb ff ff ff ff    	mov    $0xffffffff,%r11d
ffffffff8021a4be:	48 8d 35 fb df 00 00 	lea    0xdffb(%rip),%rsi        # ffffffff802284c0 <RME_X64_Layout>
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
        {
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
            RME_ASSERT(0);
        }
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff8021a4c5:	49 ba 00 00 00 00 00 	movabs $0xffff800000000000,%r10
ffffffff8021a4cc:	80 ff ff 
ffffffff8021a4cf:	eb 44                	jmp    ffffffff8021a515 <__RME_Pgt_Kom_Init+0x225>
        if(Mem->Length<RME_POW2(RME_PGT_SIZE_4M))
ffffffff8021a4d1:	4c 8b 48 18          	mov    0x18(%rax),%r9
ffffffff8021a4d5:	49 81 f9 ff ff 3f 00 	cmp    $0x3fffff,%r9
ffffffff8021a4dc:	76 2e                	jbe    ffffffff8021a50c <__RME_Pgt_Kom_Init+0x21c>
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff8021a4de:	48 81 c1 ff ff 1f 00 	add    $0x1fffff,%rcx
ffffffff8021a4e5:	48 8d 5a 06          	lea    0x6(%rdx),%rbx
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff8021a4e9:	49 81 e1 00 00 e0 ff 	and    $0xffffffffffe00000,%r9
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff8021a4f0:	48 81 e1 00 00 e0 ff 	and    $0xffffffffffe00000,%rcx
ffffffff8021a4f7:	4c 01 d1             	add    %r10,%rcx
ffffffff8021a4fa:	48 89 4c de 08       	mov    %rcx,0x8(%rsi,%rbx,8)
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff8021a4ff:	48 8d 4a 26          	lea    0x26(%rdx),%rcx
        Addr_Cnt++;
ffffffff8021a503:	48 83 c2 01          	add    $0x1,%rdx
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff8021a507:	4c 89 4c ce 08       	mov    %r9,0x8(%rsi,%rcx,8)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021a50c:	4c 39 c0             	cmp    %r8,%rax
ffffffff8021a50f:	0f 84 94 01 00 00    	je     ffffffff8021a6a9 <__RME_Pgt_Kom_Init+0x3b9>
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff8021a515:	48 8b 00             	mov    (%rax),%rax
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff8021a518:	48 8b 48 10          	mov    0x10(%rax),%rcx
ffffffff8021a51c:	49 39 cb             	cmp    %rcx,%r11
ffffffff8021a51f:	73 b0                	jae    ffffffff8021a4d1 <__RME_Pgt_Kom_Init+0x1e1>
    }
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff8021a521:	48 89 15 c8 df 00 00 	mov    %rdx,0xdfc8(%rip)        # ffffffff802284f0 <RME_X64_Layout+0x30>

    /* This is the hole */
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff8021a528:	48 8d 4a 05          	lea    0x5(%rdx),%rcx
ffffffff8021a52c:	48 83 c2 25          	add    $0x25,%rdx
ffffffff8021a530:	48 8b 4c ce 08       	mov    0x8(%rsi,%rcx,8),%rcx
ffffffff8021a535:	48 8b 54 d6 08       	mov    0x8(%rsi,%rdx,8),%rdx
ffffffff8021a53a:	48 01 ca             	add    %rcx,%rdx
ffffffff8021a53d:	48 89 15 b4 e1 00 00 	mov    %rdx,0xe1b4(%rip)        # ffffffff802286f8 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff8021a544:	48 8b 35 ad e1 00 00 	mov    0xe1ad(%rip),%rsi        # ffffffff802286f8 <RME_X64_Layout+0x238>
ffffffff8021a54b:	48 ba 00 00 00 00 01 	movabs $0xffff800100000000,%rdx
ffffffff8021a552:	80 ff ff 
ffffffff8021a555:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021a558:	48 29 f1             	sub    %rsi,%rcx
ffffffff8021a55b:	48 89 0d 9e e1 00 00 	mov    %rcx,0xe19e(%rip)        # ffffffff80228700 <RME_X64_Layout+0x240>

    /* Create kernel page mappings for memory above 4GB - we assume only one segment below 4GB */
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff8021a562:	48 8b 0d 8f df 00 00 	mov    0xdf8f(%rip),%rcx        # ffffffff802284f8 <RME_X64_Layout+0x38>
ffffffff8021a569:	48 89 0d 70 df 00 00 	mov    %rcx,0xdf70(%rip)        # ffffffff802284e0 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff8021a570:	48 89 15 91 e1 00 00 	mov    %rdx,0xe191(%rip)        # ffffffff80228708 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff8021a577:	48 c7 05 8e e1 00 00 	movq   $0x0,0xe18e(%rip)        # ffffffff80228710 <RME_X64_Layout+0x250>
ffffffff8021a57e:	00 00 00 00 

    /* We have filled the first 4 1GB superpages */
    PML4_Cnt=0;
    PDP_Cnt=3;
    PDE_Cnt=511;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021a582:	4c 39 c0             	cmp    %r8,%rax
ffffffff8021a585:	0f 84 83 01 00 00    	je     ffffffff8021a70e <__RME_Pgt_Kom_Init+0x41e>
    PDE_Cnt=511;
ffffffff8021a58b:	b9 ff 01 00 00       	mov    $0x1ff,%ecx
    PDP_Cnt=3;
ffffffff8021a590:	41 ba 03 00 00 00    	mov    $0x3,%r10d
    PML4_Cnt=0;
ffffffff8021a596:	31 db                	xor    %ebx,%ebx
                {
                    PDP_Cnt=0;
                    PML4_Cnt++;
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff8021a598:	48 bd 00 00 00 00 00 	movabs $0x800000000000,%rbp
ffffffff8021a59f:	80 00 00 
ffffffff8021a5a2:	49 bb 00 f0 ff ff ff 	movabs $0xffffffffff000,%r11
ffffffff8021a5a9:	ff 0f 00 
ffffffff8021a5ac:	eb 09                	jmp    ffffffff8021a5b7 <__RME_Pgt_Kom_Init+0x2c7>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021a5ae:	4c 39 c0             	cmp    %r8,%rax
ffffffff8021a5b1:	0f 84 57 01 00 00    	je     ffffffff8021a70e <__RME_Pgt_Kom_Init+0x41e>
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a5b7:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff8021a5bb:	49 89 c1             	mov    %rax,%r9
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff8021a5be:	48 8b 00             	mov    (%rax),%rax
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a5c1:	48 81 fe ff ff 3f 00 	cmp    $0x3fffff,%rsi
ffffffff8021a5c8:	76 e4                	jbe    ffffffff8021a5ae <__RME_Pgt_Kom_Init+0x2be>
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff8021a5ca:	49 8b 51 10          	mov    0x10(%r9),%rdx
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff8021a5ce:	48 83 ee 01          	sub    $0x1,%rsi
ffffffff8021a5d2:	48 81 e6 00 00 e0 ff 	and    $0xffffffffffe00000,%rsi
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff8021a5d9:	48 81 c2 ff ff 1f 00 	add    $0x1fffff,%rdx
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff8021a5e0:	49 89 71 18          	mov    %rsi,0x18(%r9)
ffffffff8021a5e4:	31 f6                	xor    %esi,%esi
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff8021a5e6:	48 81 e2 00 00 e0 ff 	and    $0xffffffffffe00000,%rdx
ffffffff8021a5ed:	49 89 51 10          	mov    %rdx,0x10(%r9)
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a5f1:	eb 66                	jmp    ffffffff8021a659 <__RME_Pgt_Kom_Init+0x369>
            }

            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff8021a5f3:	48 01 f2             	add    %rsi,%rdx
ffffffff8021a5f6:	4c 8b 25 fb de 00 00 	mov    0xdefb(%rip),%r12        # ffffffff802284f8 <RME_X64_Layout+0x38>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a5fd:	48 81 c6 00 00 20 00 	add    $0x200000,%rsi
            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff8021a604:	4c 21 da             	and    %r11,%rdx
ffffffff8021a607:	48 81 ca 83 01 00 00 	or     $0x183,%rdx
ffffffff8021a60e:	49 89 14 24          	mov    %rdx,(%r12)
            RME_X64_Layout.Kom1_Start[0]+=sizeof(rme_ptr_t);
ffffffff8021a612:	48 8b 15 df de 00 00 	mov    0xdedf(%rip),%rdx        # ffffffff802284f8 <RME_X64_Layout+0x38>
ffffffff8021a619:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8021a61d:	48 89 15 d4 de 00 00 	mov    %rdx,0xded4(%rip)        # ffffffff802284f8 <RME_X64_Layout+0x38>
            RME_X64_Layout.Kom1_Size[0]-=sizeof(rme_ptr_t);
ffffffff8021a624:	48 8b 15 cd df 00 00 	mov    0xdfcd(%rip),%rdx        # ffffffff802285f8 <RME_X64_Layout+0x138>
ffffffff8021a62b:	48 83 ea 08          	sub    $0x8,%rdx
ffffffff8021a62f:	48 89 15 c2 df 00 00 	mov    %rdx,0xdfc2(%rip)        # ffffffff802285f8 <RME_X64_Layout+0x138>
            RME_X64_Layout.Kom2_Size+=RME_POW2(RME_PGT_SIZE_2M);
ffffffff8021a636:	48 8b 15 d3 e0 00 00 	mov    0xe0d3(%rip),%rdx        # ffffffff80228710 <RME_X64_Layout+0x250>
ffffffff8021a63d:	48 81 c2 00 00 20 00 	add    $0x200000,%rdx
ffffffff8021a644:	48 89 15 c5 e0 00 00 	mov    %rdx,0xe0c5(%rip)        # ffffffff80228710 <RME_X64_Layout+0x250>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a64b:	49 3b 71 18          	cmp    0x18(%r9),%rsi
ffffffff8021a64f:	0f 83 59 ff ff ff    	jae    ffffffff8021a5ae <__RME_Pgt_Kom_Init+0x2be>
            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff8021a655:	49 8b 51 10          	mov    0x10(%r9),%rdx
            PDE_Cnt++;
ffffffff8021a659:	48 83 c1 01          	add    $0x1,%rcx
            if(PDE_Cnt==512)
ffffffff8021a65d:	48 81 f9 00 02 00 00 	cmp    $0x200,%rcx
ffffffff8021a664:	75 8d                	jne    ffffffff8021a5f3 <__RME_Pgt_Kom_Init+0x303>
                PDP_Cnt++;
ffffffff8021a666:	49 83 c2 01          	add    $0x1,%r10
                if(PDP_Cnt==512)
ffffffff8021a66a:	49 81 fa 00 02 00 00 	cmp    $0x200,%r10
ffffffff8021a671:	75 07                	jne    ffffffff8021a67a <__RME_Pgt_Kom_Init+0x38a>
                    PML4_Cnt++;
ffffffff8021a673:	48 83 c3 01          	add    $0x1,%rbx
                    PDP_Cnt=0;
ffffffff8021a677:	45 31 d2             	xor    %r10d,%r10d
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff8021a67a:	48 8b 0d 77 de 00 00 	mov    0xde77(%rip),%rcx        # ffffffff802284f8 <RME_X64_Layout+0x38>
ffffffff8021a681:	49 89 dc             	mov    %rbx,%r12
ffffffff8021a684:	49 c1 e4 09          	shl    $0x9,%r12
ffffffff8021a688:	4f 8d a4 22 00 02 00 	lea    0x200(%r10,%r12,1),%r12
ffffffff8021a68f:	00 
ffffffff8021a690:	48 01 e9             	add    %rbp,%rcx
ffffffff8021a693:	4c 21 d9             	and    %r11,%rcx
ffffffff8021a696:	4a 0b 0c e7          	or     (%rdi,%r12,8),%rcx
ffffffff8021a69a:	48 83 c9 01          	or     $0x1,%rcx
ffffffff8021a69e:	4a 89 0c e7          	mov    %rcx,(%rdi,%r12,8)
                PDE_Cnt=0;
ffffffff8021a6a2:	31 c9                	xor    %ecx,%ecx
ffffffff8021a6a4:	e9 4a ff ff ff       	jmp    ffffffff8021a5f3 <__RME_Pgt_Kom_Init+0x303>
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff8021a6a9:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff8021a6ad:	48 89 15 3c de 00 00 	mov    %rdx,0xde3c(%rip)        # ffffffff802284f0 <RME_X64_Layout+0x30>
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff8021a6b4:	48 8d 50 06          	lea    0x6(%rax),%rdx
ffffffff8021a6b8:	48 83 c0 26          	add    $0x26,%rax
ffffffff8021a6bc:	48 8b 54 d6 08       	mov    0x8(%rsi,%rdx,8),%rdx
ffffffff8021a6c1:	48 8b 44 c6 08       	mov    0x8(%rsi,%rax,8),%rax
ffffffff8021a6c6:	48 01 d0             	add    %rdx,%rax
ffffffff8021a6c9:	48 89 05 28 e0 00 00 	mov    %rax,0xe028(%rip)        # ffffffff802286f8 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff8021a6d0:	48 8b 0d 21 e0 00 00 	mov    0xe021(%rip),%rcx        # ffffffff802286f8 <RME_X64_Layout+0x238>
ffffffff8021a6d7:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff8021a6de:	80 ff ff 
ffffffff8021a6e1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a6e4:	48 29 ca             	sub    %rcx,%rdx
ffffffff8021a6e7:	48 89 15 12 e0 00 00 	mov    %rdx,0xe012(%rip)        # ffffffff80228700 <RME_X64_Layout+0x240>
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff8021a6ee:	48 8b 15 03 de 00 00 	mov    0xde03(%rip),%rdx        # ffffffff802284f8 <RME_X64_Layout+0x38>
ffffffff8021a6f5:	48 89 15 e4 dd 00 00 	mov    %rdx,0xdde4(%rip)        # ffffffff802284e0 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff8021a6fc:	48 89 05 05 e0 00 00 	mov    %rax,0xe005(%rip)        # ffffffff80228708 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff8021a703:	48 c7 05 02 e0 00 00 	movq   $0x0,0xe002(%rip)        # ffffffff80228710 <RME_X64_Layout+0x250>
ffffffff8021a70a:	00 00 00 00 
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff8021a70e:	48 b9 00 f0 ef ff ff 	movabs $0x7fffffeff000,%rcx
ffffffff8021a715:	7f 00 00 
                PDE_Cnt=0;
ffffffff8021a718:	48 b8 00 18 10 00 00 	movabs $0xffff800000101800,%rax
ffffffff8021a71f:	80 ff ff 
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff8021a722:	48 be 00 20 10 00 00 	movabs $0xffff800000102000,%rsi
ffffffff8021a729:	80 ff ff 
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff8021a72c:	48 01 f9             	add    %rdi,%rcx
ffffffff8021a72f:	90                   	nop
ffffffff8021a730:	48 8b 14 08          	mov    (%rax,%rcx,1),%rdx
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff8021a734:	48 83 c0 08          	add    $0x8,%rax
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff8021a738:	48 89 50 f8          	mov    %rdx,-0x8(%rax)
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff8021a73c:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021a73f:	75 ef                	jne    ffffffff8021a730 <__RME_Pgt_Kom_Init+0x440>

    /* Page table allocation finished. Now need to align Kom1 to 2MB page boundary */
    RME_X64_Layout.Kom1_Start[0]=RME_ROUND_UP(RME_X64_Layout.Kom1_Start[0],RME_PGT_SIZE_2M);
ffffffff8021a741:	48 8b 05 b0 dd 00 00 	mov    0xddb0(%rip),%rax        # ffffffff802284f8 <RME_X64_Layout+0x38>
ffffffff8021a748:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff8021a74e:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff8021a754:	48 89 05 9d dd 00 00 	mov    %rax,0xdd9d(%rip)        # ffffffff802284f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Size[0]-1,RME_PGT_SIZE_2M);
ffffffff8021a75b:	48 8b 05 96 de 00 00 	mov    0xde96(%rip),%rax        # ffffffff802285f8 <RME_X64_Layout+0x138>
ffffffff8021a762:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8021a766:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff8021a76c:	48 89 05 85 de 00 00 	mov    %rax,0xde85(%rip)        # ffffffff802285f8 <RME_X64_Layout+0x138>

    /* All memory is mapped. Now figure out the size of kernel stacks */
    RME_X64_Layout.Kpgtbl_Size=RME_X64_Layout.Kom1_Start[0]-RME_X64_Layout.Kpgtbl_Start;
ffffffff8021a773:	48 8b 05 7e dd 00 00 	mov    0xdd7e(%rip),%rax        # ffffffff802284f8 <RME_X64_Layout+0x38>
ffffffff8021a77a:	48 8b 15 5f dd 00 00 	mov    0xdd5f(%rip),%rdx        # ffffffff802284e0 <RME_X64_Layout+0x20>
ffffffff8021a781:	48 29 d0             	sub    %rdx,%rax
ffffffff8021a784:	48 89 05 5d dd 00 00 	mov    %rax,0xdd5d(%rip)        # ffffffff802284e8 <RME_X64_Layout+0x28>

    /* See if we are allocating the stack from Kom2 or Kom1 */
    if(RME_X64_Layout.Kom2_Size==0)
ffffffff8021a78b:	48 8b 05 7e df 00 00 	mov    0xdf7e(%rip),%rax        # ffffffff80228710 <RME_X64_Layout+0x250>
ffffffff8021a792:	48 85 c0             	test   %rax,%rax
ffffffff8021a795:	0f 85 a3 00 00 00    	jne    ffffffff8021a83e <__RME_Pgt_Kom_Init+0x54e>
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Start[0]+RME_X64_Layout.Kom1_Size[0]-1,RME_X64_KSTACK_ORDER);
ffffffff8021a79b:	48 8b 15 56 dd 00 00 	mov    0xdd56(%rip),%rdx        # ffffffff802284f8 <RME_X64_Layout+0x38>
ffffffff8021a7a2:	48 8b 05 4f de 00 00 	mov    0xde4f(%rip),%rax        # ffffffff802285f8 <RME_X64_Layout+0x138>
ffffffff8021a7a9:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff8021a7ae:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff8021a7b4:	48 89 05 5d df 00 00 	mov    %rax,0xdf5d(%rip)        # ffffffff80228718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff8021a7bb:	48 8b 15 5e df 00 00 	mov    0xdf5e(%rip),%rdx        # ffffffff80228720 <RME_X64_Layout+0x260>
ffffffff8021a7c2:	48 8b 05 4f df 00 00 	mov    0xdf4f(%rip),%rax        # ffffffff80228718 <RME_X64_Layout+0x258>
ffffffff8021a7c9:	48 29 d0             	sub    %rdx,%rax
ffffffff8021a7cc:	48 89 05 45 df 00 00 	mov    %rax,0xdf45(%rip)        # ffffffff80228718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom1_Start[0];
ffffffff8021a7d3:	48 8b 05 3e df 00 00 	mov    0xdf3e(%rip),%rax        # ffffffff80228718 <RME_X64_Layout+0x258>
ffffffff8021a7da:	48 8b 15 17 dd 00 00 	mov    0xdd17(%rip),%rdx        # ffffffff802284f8 <RME_X64_Layout+0x38>
ffffffff8021a7e1:	48 29 d0             	sub    %rdx,%rax
ffffffff8021a7e4:	48 89 05 0d de 00 00 	mov    %rax,0xde0d(%rip)        # ffffffff802285f8 <RME_X64_Layout+0x138>
    RME_DBG_U(RME_X64_Layout.PerCPU_Size);
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Start);
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Size);
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff8021a7eb:	48 8b 05 fe dc 00 00 	mov    0xdcfe(%rip),%rax        # ffffffff802284f0 <RME_X64_Layout+0x30>
ffffffff8021a7f2:	48 85 c0             	test   %rax,%rax
ffffffff8021a7f5:	74 12                	je     ffffffff8021a809 <__RME_Pgt_Kom_Init+0x519>
ffffffff8021a7f7:	31 c0                	xor    %eax,%eax
ffffffff8021a7f9:	48 8b 15 f0 dc 00 00 	mov    0xdcf0(%rip),%rdx        # ffffffff802284f0 <RME_X64_Layout+0x30>
ffffffff8021a800:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021a804:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021a807:	72 f0                	jb     ffffffff8021a7f9 <__RME_Pgt_Kom_Init+0x509>
    RME_DBG_U(RME_X64_Layout.Stack_Start);
    RME_DBG_S("\n\rStack_Size:      0x");
    RME_DBG_U(RME_X64_Layout.Stack_Size);

    return 0;
}
ffffffff8021a809:	5b                   	pop    %rbx
ffffffff8021a80a:	31 c0                	xor    %eax,%eax
ffffffff8021a80c:	5d                   	pop    %rbp
ffffffff8021a80d:	41 5c                	pop    %r12
ffffffff8021a80f:	c3                   	ret
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff8021a810:	49 81 c9 01 40 10 00 	or     $0x104001,%r9
        RME_X64_Kpgt.PDP[0][1]|=0x105000|RME_X64_MMU_P;
ffffffff8021a817:	49 81 c8 01 50 10 00 	or     $0x105001,%r8
        RME_X64_Kpgt.PDP[0][2]|=0x106000|RME_X64_MMU_P;
ffffffff8021a81e:	48 81 ce 01 60 10 00 	or     $0x106001,%rsi
        RME_X64_Kpgt.PDP[0][3]|=0x107000|RME_X64_MMU_PCD|RME_X64_MMU_PWT|RME_X64_MMU_P;
ffffffff8021a825:	48 81 c9 19 70 10 00 	or     $0x107019,%rcx
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
ffffffff8021a82c:	48 81 ca 01 40 10 00 	or     $0x104001,%rdx
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff8021a833:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff8021a839:	e9 ce fb ff ff       	jmp    ffffffff8021a40c <__RME_Pgt_Kom_Init+0x11c>
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size-1,RME_X64_KSTACK_ORDER);
ffffffff8021a83e:	48 8b 15 c3 de 00 00 	mov    0xdec3(%rip),%rdx        # ffffffff80228708 <RME_X64_Layout+0x248>
ffffffff8021a845:	48 8b 05 c4 de 00 00 	mov    0xdec4(%rip),%rax        # ffffffff80228710 <RME_X64_Layout+0x250>
ffffffff8021a84c:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff8021a851:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff8021a857:	48 89 05 ba de 00 00 	mov    %rax,0xdeba(%rip)        # ffffffff80228718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff8021a85e:	48 8b 15 bb de 00 00 	mov    0xdebb(%rip),%rdx        # ffffffff80228720 <RME_X64_Layout+0x260>
ffffffff8021a865:	48 8b 05 ac de 00 00 	mov    0xdeac(%rip),%rax        # ffffffff80228718 <RME_X64_Layout+0x258>
ffffffff8021a86c:	48 29 d0             	sub    %rdx,%rax
ffffffff8021a86f:	48 89 05 a2 de 00 00 	mov    %rax,0xdea2(%rip)        # ffffffff80228718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
ffffffff8021a876:	48 8b 05 9b de 00 00 	mov    0xde9b(%rip),%rax        # ffffffff80228718 <RME_X64_Layout+0x258>
ffffffff8021a87d:	48 8b 15 84 de 00 00 	mov    0xde84(%rip),%rdx        # ffffffff80228708 <RME_X64_Layout+0x248>
ffffffff8021a884:	48 29 d0             	sub    %rdx,%rax
ffffffff8021a887:	48 89 05 82 de 00 00 	mov    %rax,0xde82(%rip)        # ffffffff80228710 <RME_X64_Layout+0x250>
ffffffff8021a88e:	e9 58 ff ff ff       	jmp    ffffffff8021a7eb <__RME_Pgt_Kom_Init+0x4fb>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff8021a893:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff8021a897:	48 8b 48 18          	mov    0x18(%rax),%rcx
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff8021a89b:	48 8b 05 2e dc 00 00 	mov    0xdc2e(%rip),%rax        # ffffffff802284d0 <RME_X64_Layout+0x10>
ffffffff8021a8a2:	48 8b 35 2f dc 00 00 	mov    0xdc2f(%rip),%rsi        # ffffffff802284d8 <RME_X64_Layout+0x18>
ffffffff8021a8a9:	48 01 f0             	add    %rsi,%rax
ffffffff8021a8ac:	48 89 05 45 dc 00 00 	mov    %rax,0xdc45(%rip)        # ffffffff802284f8 <RME_X64_Layout+0x38>
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff8021a8b3:	48 8b 35 3e dc 00 00 	mov    0xdc3e(%rip),%rsi        # ffffffff802284f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff8021a8ba:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff8021a8c1:	7f ff ff 
ffffffff8021a8c4:	48 29 f0             	sub    %rsi,%rax
ffffffff8021a8c7:	48 01 c8             	add    %rcx,%rax
ffffffff8021a8ca:	48 01 d0             	add    %rdx,%rax
ffffffff8021a8cd:	48 89 05 24 dd 00 00 	mov    %rax,0xdd24(%rip)        # ffffffff802285f8 <RME_X64_Layout+0x138>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff8021a8d4:	31 c0                	xor    %eax,%eax
ffffffff8021a8d6:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021a8db:	48 8d 35 de db 00 00 	lea    0xdbde(%rip),%rsi        # ffffffff802284c0 <RME_X64_Layout>
ffffffff8021a8e2:	e9 c6 fd ff ff       	jmp    ffffffff8021a6ad <__RME_Pgt_Kom_Init+0x3bd>
ffffffff8021a8e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a8ee:	00 00 
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff8021a8f0:	48 8b 15 d9 db 00 00 	mov    0xdbd9(%rip),%rdx        # ffffffff802284d0 <RME_X64_Layout+0x10>
ffffffff8021a8f7:	48 8b 0d da db 00 00 	mov    0xdbda(%rip),%rcx        # ffffffff802284d8 <RME_X64_Layout+0x18>
ffffffff8021a8fe:	48 01 ca             	add    %rcx,%rdx
ffffffff8021a901:	48 89 15 f0 db 00 00 	mov    %rdx,0xdbf0(%rip)        # ffffffff802284f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff8021a908:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff8021a90c:	48 03 50 18          	add    0x18(%rax),%rdx
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff8021a910:	48 8b 0d e1 db 00 00 	mov    0xdbe1(%rip),%rcx        # ffffffff802284f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff8021a917:	48 89 d0             	mov    %rdx,%rax
ffffffff8021a91a:	48 ba 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rdx
ffffffff8021a921:	7f ff ff 
ffffffff8021a924:	48 01 d0             	add    %rdx,%rax
ffffffff8021a927:	48 29 c8             	sub    %rcx,%rax
ffffffff8021a92a:	48 89 05 c7 dc 00 00 	mov    %rax,0xdcc7(%rip)        # ffffffff802285f8 <RME_X64_Layout+0x138>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021a931:	eb a1                	jmp    ffffffff8021a8d4 <__RME_Pgt_Kom_Init+0x5e4>
ffffffff8021a933:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a93a:	00 00 00 00 
ffffffff8021a93e:	66 90                	xchg   %ax,%ax

ffffffff8021a940 <__RME_Reboot>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Reboot(void)
{
ffffffff8021a940:	f3 0f 1e fa          	endbr64
    /* Currently we cannot parse th FADT yet. We need these info to shutdown the machine */
    /* outportb(FADT->ResetReg.Address, FADT->ResetValue); */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
}
ffffffff8021a944:	c3                   	ret
ffffffff8021a945:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a94c:	00 00 00 00 

ffffffff8021a950 <__RME_Shutdown>:
Description : Shutdown the machine, abandon all operating system states.
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Shutdown(void)
ffffffff8021a950:	f3 0f 1e fa          	endbr64
ffffffff8021a954:	c3                   	ret
ffffffff8021a955:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a95c:	00 00 00 00 

ffffffff8021a960 <__RME_Get_Syscall_Param>:
              rme_ptr_t* Capid - The capability ID number.
              rme_ptr_t* Param - The parameters.
Return      : None.
******************************************************************************/
void __RME_Get_Syscall_Param(struct RME_Reg_Struct* Reg, rme_ptr_t* Svc, rme_ptr_t* Capid, rme_ptr_t* Param)
{
ffffffff8021a960:	f3 0f 1e fa          	endbr64
    *Svc=(Reg->RDI)>>32;
ffffffff8021a964:	8b 47 2c             	mov    0x2c(%rdi),%eax
ffffffff8021a967:	48 89 06             	mov    %rax,(%rsi)
    *Capid=(Reg->RDI)&0xFFFFFFFF;
ffffffff8021a96a:	8b 47 28             	mov    0x28(%rdi),%eax
ffffffff8021a96d:	48 89 02             	mov    %rax,(%rdx)
    Param[0]=Reg->RSI;
ffffffff8021a970:	48 8b 47 20          	mov    0x20(%rdi),%rax
ffffffff8021a974:	48 89 01             	mov    %rax,(%rcx)
    Param[1]=Reg->RDX;
ffffffff8021a977:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8021a97b:	48 89 41 08          	mov    %rax,0x8(%rcx)
    Param[2]=Reg->R8;
ffffffff8021a97f:	48 8b 47 38          	mov    0x38(%rdi),%rax
ffffffff8021a983:	48 89 41 10          	mov    %rax,0x10(%rcx)
}
ffffffff8021a987:	c3                   	ret
ffffffff8021a988:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a98f:	00 

ffffffff8021a990 <__RME_Set_Syscall_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Syscall_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff8021a990:	f3 0f 1e fa          	endbr64
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff8021a994:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8021a997:	c3                   	ret
ffffffff8021a998:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a99f:	00 

ffffffff8021a9a0 <__RME_Thd_Reg_Init>:
              rme_ptr_t Param - The parameter to pass to it.
Output      : struct RME_Reg_Struct* Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Init(rme_ptr_t Attr,rme_ptr_t Entry, rme_ptr_t Stack, rme_ptr_t Param, struct RME_Reg_Struct* Reg)
{
ffffffff8021a9a0:	f3 0f 1e fa          	endbr64
    /* We use the SYSRET path on creation if possible */
    Reg->INT_NUM=0x10000;
ffffffff8021a9a4:	66 0f 6f 05 84 2b 00 	movdqa 0x2b84(%rip),%xmm0        # ffffffff8021d530 <Table.1+0x210>
ffffffff8021a9ab:	00 
    /* IOPL 3, IF */
    Reg->RFLAGS=0x3200;
    Reg->RSP=Stack;
    Reg->SS=RME_X64_SEG_USER_DATA;
    /* Pass the parameter */
    Reg->RDI=Param;
ffffffff8021a9ac:	49 89 48 28          	mov    %rcx,0x28(%r8)
    Reg->RIP=Entry;
ffffffff8021a9b0:	49 89 b0 88 00 00 00 	mov    %rsi,0x88(%r8)
    Reg->CS=RME_X64_SEG_USER_CODE;
ffffffff8021a9b7:	49 c7 80 90 00 00 00 	movq   $0x2b,0x90(%r8)
ffffffff8021a9be:	2b 00 00 00 
    Reg->RFLAGS=0x3200;
ffffffff8021a9c2:	49 c7 80 98 00 00 00 	movq   $0x3200,0x98(%r8)
ffffffff8021a9c9:	00 32 00 00 
    Reg->RSP=Stack;
ffffffff8021a9cd:	49 89 90 a0 00 00 00 	mov    %rdx,0xa0(%r8)
    Reg->SS=RME_X64_SEG_USER_DATA;
ffffffff8021a9d4:	49 c7 80 a8 00 00 00 	movq   $0x23,0xa8(%r8)
ffffffff8021a9db:	23 00 00 00 
    Reg->INT_NUM=0x10000;
ffffffff8021a9df:	41 0f 11 40 78       	movups %xmm0,0x78(%r8)
}
ffffffff8021a9e4:	c3                   	ret
ffffffff8021a9e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a9ec:	00 00 00 00 

ffffffff8021a9f0 <__RME_Thd_Reg_Copy>:
Input       : struct RME_Reg_Struct* Src - The source register set.
Output      : struct RME_Reg_Struct* Dst - The destination register set.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Copy(struct RME_Reg_Struct* Dst, struct RME_Reg_Struct* Src)
{
ffffffff8021a9f0:	f3 0f 1e fa          	endbr64
    /* Make sure that the ordering is the same so the compiler can optimize */
    Dst->RAX=Src->RAX;
ffffffff8021a9f4:	f3 44 0f 6f 0e       	movdqu (%rsi),%xmm9
ffffffff8021a9f9:	f3 44 0f 6f 46 10    	movdqu 0x10(%rsi),%xmm8
ffffffff8021a9ff:	f3 0f 6f 7e 20       	movdqu 0x20(%rsi),%xmm7
ffffffff8021aa04:	f3 0f 6f 76 30       	movdqu 0x30(%rsi),%xmm6
ffffffff8021aa09:	f3 0f 6f 6e 40       	movdqu 0x40(%rsi),%xmm5
ffffffff8021aa0e:	f3 0f 6f 66 50       	movdqu 0x50(%rsi),%xmm4
ffffffff8021aa13:	f3 0f 6f 5e 60       	movdqu 0x60(%rsi),%xmm3
ffffffff8021aa18:	f3 0f 6f 56 70       	movdqu 0x70(%rsi),%xmm2
ffffffff8021aa1d:	f3 0f 6f 8e 80 00 00 	movdqu 0x80(%rsi),%xmm1
ffffffff8021aa24:	00 
ffffffff8021aa25:	f3 0f 6f 86 90 00 00 	movdqu 0x90(%rsi),%xmm0
ffffffff8021aa2c:	00 
ffffffff8021aa2d:	f3 44 0f 6f 96 a0 00 	movdqu 0xa0(%rsi),%xmm10
ffffffff8021aa34:	00 00 
ffffffff8021aa36:	44 0f 11 0f          	movups %xmm9,(%rdi)
ffffffff8021aa3a:	44 0f 11 47 10       	movups %xmm8,0x10(%rdi)
ffffffff8021aa3f:	44 0f 11 97 a0 00 00 	movups %xmm10,0xa0(%rdi)
ffffffff8021aa46:	00 
ffffffff8021aa47:	0f 11 7f 20          	movups %xmm7,0x20(%rdi)
ffffffff8021aa4b:	0f 11 77 30          	movups %xmm6,0x30(%rdi)
ffffffff8021aa4f:	0f 11 6f 40          	movups %xmm5,0x40(%rdi)
ffffffff8021aa53:	0f 11 67 50          	movups %xmm4,0x50(%rdi)
ffffffff8021aa57:	0f 11 5f 60          	movups %xmm3,0x60(%rdi)
ffffffff8021aa5b:	0f 11 57 70          	movups %xmm2,0x70(%rdi)
ffffffff8021aa5f:	0f 11 8f 80 00 00 00 	movups %xmm1,0x80(%rdi)
ffffffff8021aa66:	0f 11 87 90 00 00 00 	movups %xmm0,0x90(%rdi)
    Dst->RIP=Src->RIP;
    Dst->CS=Src->CS;
    Dst->RFLAGS=Src->RFLAGS;
    Dst->RSP=Src->RSP;
    Dst->SS=Src->SS;
}
ffffffff8021aa6d:	c3                   	ret
ffffffff8021aa6e:	66 90                	xchg   %ax,%ax

ffffffff8021aa70 <__RME_Thd_Cop_Init>:
Description : Initialize the coprocessor register set for the thread.
Input       : struct RME_Reg_Struct* Reg - The register struct to help initialize the coprocessor.
Output      : struct RME_Reg_Cop_Struct* Cop_Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Init(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021aa70:	f3 0f 1e fa          	endbr64
ffffffff8021aa74:	c3                   	ret
ffffffff8021aa75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021aa7c:	00 00 00 00 

ffffffff8021aa80 <__RME_Thd_Cop_Save>:
Input       : struct RME_Reg_Struct* Reg - The context, used to decide whether
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Save(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021aa80:	f3 0f 1e fa          	endbr64
ffffffff8021aa84:	c3                   	ret
ffffffff8021aa85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021aa8c:	00 00 00 00 

ffffffff8021aa90 <__RME_Thd_Cop_Restore>:
Input       : struct RME_Reg_Struct* Reg - The context, used to decide whether
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Restore(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021aa90:	f3 0f 1e fa          	endbr64
ffffffff8021aa94:	c3                   	ret
ffffffff8021aa95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021aa9c:	00 00 00 00 

ffffffff8021aaa0 <__RME_Inv_Reg_Save>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Iret_Struct* Ret - The invocation return register context.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Save(struct RME_Iret_Struct* Ret, struct RME_Reg_Struct* Reg)
{
ffffffff8021aaa0:	f3 0f 1e fa          	endbr64
    Ret->RIP=Reg->RIP;
ffffffff8021aaa4:	f3 0f 6f 86 98 00 00 	movdqu 0x98(%rsi),%xmm0
ffffffff8021aaab:	00 
ffffffff8021aaac:	66 0f 12 86 88 00 00 	movlpd 0x88(%rsi),%xmm0
ffffffff8021aab3:	00 
ffffffff8021aab4:	0f 11 07             	movups %xmm0,(%rdi)
    Ret->RSP=Reg->RSP;
}
ffffffff8021aab7:	c3                   	ret
ffffffff8021aab8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021aabf:	00 

ffffffff8021aac0 <__RME_Inv_Reg_Restore>:
Input       : struct RME_Iret_Struct* Ret - The invocation return register context.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Restore(struct RME_Reg_Struct* Reg, struct RME_Iret_Struct* Ret)
{
ffffffff8021aac0:	f3 0f 1e fa          	endbr64
    Reg->RIP=Ret->RIP;
ffffffff8021aac4:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021aac7:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
    Reg->RSP=Ret->RSP;
ffffffff8021aace:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8021aad2:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
}
ffffffff8021aad9:	c3                   	ret
ffffffff8021aada:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021aae0 <__RME_Set_Inv_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Inv_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff8021aae0:	f3 0f 1e fa          	endbr64
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff8021aae4:	48 89 77 28          	mov    %rsi,0x28(%rdi)
}
ffffffff8021aae8:	c3                   	ret
ffffffff8021aae9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021aaf0 <write_string>:
/* End Function:__RME_Set_Inv_Retval *****************************************/

/* Crap for test */
void write_string( int colour, const char *string, rme_ptr_t pos)
{
ffffffff8021aaf0:	f3 0f 1e fa          	endbr64
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021aaf4:	48 b8 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rax
ffffffff8021aafb:	80 ff ff 
ffffffff8021aafe:	48 01 c2             	add    %rax,%rdx
    while( *string != 0 )
ffffffff8021ab01:	0f b6 06             	movzbl (%rsi),%eax
ffffffff8021ab04:	84 c0                	test   %al,%al
ffffffff8021ab06:	74 20                	je     ffffffff8021ab28 <write_string+0x38>
ffffffff8021ab08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021ab0f:	00 
    {
        *video++ = *string++;
ffffffff8021ab10:	88 02                	mov    %al,(%rdx)
ffffffff8021ab12:	48 83 c6 01          	add    $0x1,%rsi
        *video++ = colour;
ffffffff8021ab16:	48 89 d0             	mov    %rdx,%rax
ffffffff8021ab19:	48 83 c2 02          	add    $0x2,%rdx
ffffffff8021ab1d:	40 88 78 01          	mov    %dil,0x1(%rax)
    while( *string != 0 )
ffffffff8021ab21:	0f b6 06             	movzbl (%rsi),%eax
ffffffff8021ab24:	84 c0                	test   %al,%al
ffffffff8021ab26:	75 e8                	jne    ffffffff8021ab10 <write_string+0x20>
    }
}
ffffffff8021ab28:	c3                   	ret
ffffffff8021ab29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021ab30 <NDBG>:

void NDBG(void)
{
ffffffff8021ab30:	f3 0f 1e fa          	endbr64
    write_string( 0x07, "Here", 0);
ffffffff8021ab34:	31 d2                	xor    %edx,%edx
ffffffff8021ab36:	48 8d 35 20 26 00 00 	lea    0x2620(%rip),%rsi        # ffffffff8021d15d <UVM_Init+0x16bd>
ffffffff8021ab3d:	bf 07 00 00 00       	mov    $0x7,%edi
ffffffff8021ab42:	e9 a9 ff ff ff       	jmp    ffffffff8021aaf0 <write_string>
ffffffff8021ab47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021ab4e:	00 00 

ffffffff8021ab50 <__RME_Kern_Func_Handler>:
Output      : None.
Return      : rme_ret_t - The value that the function returned.
******************************************************************************/
rme_ret_t __RME_Kern_Func_Handler(struct RME_Cap_Cpt* Cpt, struct RME_Reg_Struct* Reg,
                                  rme_ptr_t Func_ID, rme_ptr_t Sub_ID, rme_ptr_t Param1, rme_ptr_t Param2)
{
ffffffff8021ab50:	f3 0f 1e fa          	endbr64
    /* Now always call the HALT */
    char String[16];

    String[0]=Param1/10000000+'0';
ffffffff8021ab54:	48 b8 bd 42 7a e5 d5 	movabs $0xd6bf94d5e57a42bd,%rax
ffffffff8021ab5b:	94 bf d6 
{
ffffffff8021ab5e:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021ab61:	41 55                	push   %r13
    String[1]=(Param1/1000000)%10+'0';
    String[2]=(Param1/100000)%10+'0';
ffffffff8021ab63:	4d 89 c2             	mov    %r8,%r10
    String[0]=Param1/10000000+'0';
ffffffff8021ab66:	49 f7 e0             	mul    %r8
{
ffffffff8021ab69:	41 54                	push   %r12
    String[2]=(Param1/100000)%10+'0';
ffffffff8021ab6b:	49 c1 ea 05          	shr    $0x5,%r10
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021ab6f:	48 b8 db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rax
ffffffff8021ab76:	de 1b 43 
ffffffff8021ab79:	49 bc cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r12
ffffffff8021ab80:	cc cc cc 
{
ffffffff8021ab83:	55                   	push   %rbp
    String[3]=(Param1/10000)%10+'0';
    String[4]=(Param1/1000)%10+'0';
    String[5]=(Param1/100)%10+'0';
ffffffff8021ab84:	4c 89 c5             	mov    %r8,%rbp
{
ffffffff8021ab87:	53                   	push   %rbx
    String[4]=(Param1/1000)%10+'0';
ffffffff8021ab88:	4c 89 c3             	mov    %r8,%rbx
    String[5]=(Param1/100)%10+'0';
ffffffff8021ab8b:	48 c1 ed 02          	shr    $0x2,%rbp
    String[0]=Param1/10000000+'0';
ffffffff8021ab8f:	48 89 d6             	mov    %rdx,%rsi
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021ab92:	49 f7 e0             	mul    %r8
    String[4]=(Param1/1000)%10+'0';
ffffffff8021ab95:	48 c1 eb 03          	shr    $0x3,%rbx
    String[0]=Param1/10000000+'0';
ffffffff8021ab99:	48 c1 ee 17          	shr    $0x17,%rsi
{
ffffffff8021ab9d:	48 83 ec 18          	sub    $0x18,%rsp
    String[0]=Param1/10000000+'0';
ffffffff8021aba1:	40 0f b6 f6          	movzbl %sil,%esi
ffffffff8021aba5:	f3 0f 7e 05 9b 2b 00 	movq   0x2b9b(%rip),%xmm0        # ffffffff8021d748 <RME_X64_Pgflg_RME2NAT+0x108>
ffffffff8021abac:	00 
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021abad:	49 89 d1             	mov    %rdx,%r9
    String[6]=(Param1/10)%10+'0';
    String[7]=(Param1)%10+'0';
    String[8]='\0';
ffffffff8021abb0:	c6 44 24 08 00       	movb   $0x0,0x8(%rsp)
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021abb5:	49 c1 e9 12          	shr    $0x12,%r9
ffffffff8021abb9:	4c 89 c8             	mov    %r9,%rax
ffffffff8021abbc:	49 f7 e4             	mul    %r12
ffffffff8021abbf:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021abc3:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021abc7:	48 01 c0             	add    %rax,%rax
ffffffff8021abca:	49 29 c1             	sub    %rax,%r9
    String[2]=(Param1/100000)%10+'0';
ffffffff8021abcd:	48 b8 43 78 b4 71 c4 	movabs $0xa7c5ac471b47843,%rax
ffffffff8021abd4:	5a 7c 0a 
ffffffff8021abd7:	49 f7 e2             	mul    %r10
    String[0]=Param1/10000000+'0';
ffffffff8021abda:	45 0f b6 c9          	movzbl %r9b,%r9d
    String[2]=(Param1/100000)%10+'0';
ffffffff8021abde:	49 89 d2             	mov    %rdx,%r10
ffffffff8021abe1:	49 c1 ea 07          	shr    $0x7,%r10
ffffffff8021abe5:	4c 89 d0             	mov    %r10,%rax
ffffffff8021abe8:	49 f7 e4             	mul    %r12
ffffffff8021abeb:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021abef:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021abf3:	48 01 c0             	add    %rax,%rax
ffffffff8021abf6:	49 29 c2             	sub    %rax,%r10
    String[3]=(Param1/10000)%10+'0';
ffffffff8021abf9:	48 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rax
ffffffff8021ac00:	c5 6d 34 
ffffffff8021ac03:	49 f7 e0             	mul    %r8
    String[0]=Param1/10000000+'0';
ffffffff8021ac06:	45 0f b6 d2          	movzbl %r10b,%r10d
    String[3]=(Param1/10000)%10+'0';
ffffffff8021ac0a:	49 89 d3             	mov    %rdx,%r11
ffffffff8021ac0d:	49 c1 eb 0b          	shr    $0xb,%r11
ffffffff8021ac11:	4c 89 d8             	mov    %r11,%rax
ffffffff8021ac14:	49 f7 e4             	mul    %r12
ffffffff8021ac17:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021ac1b:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021ac1f:	48 01 c0             	add    %rax,%rax
ffffffff8021ac22:	49 29 c3             	sub    %rax,%r11
    String[4]=(Param1/1000)%10+'0';
ffffffff8021ac25:	48 b8 cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rax
ffffffff8021ac2c:	9b c4 20 
ffffffff8021ac2f:	48 f7 e3             	mul    %rbx
    String[0]=Param1/10000000+'0';
ffffffff8021ac32:	45 0f b6 db          	movzbl %r11b,%r11d
    String[4]=(Param1/1000)%10+'0';
ffffffff8021ac36:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021ac39:	48 c1 eb 04          	shr    $0x4,%rbx
ffffffff8021ac3d:	48 89 d8             	mov    %rbx,%rax
ffffffff8021ac40:	49 f7 e4             	mul    %r12
ffffffff8021ac43:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021ac47:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021ac4b:	48 01 c0             	add    %rax,%rax
ffffffff8021ac4e:	48 29 c3             	sub    %rax,%rbx
    String[5]=(Param1/100)%10+'0';
ffffffff8021ac51:	48 b8 c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rax
ffffffff8021ac58:	c2 f5 28 
ffffffff8021ac5b:	48 f7 e5             	mul    %rbp
    String[0]=Param1/10000000+'0';
ffffffff8021ac5e:	0f b6 db             	movzbl %bl,%ebx
    String[5]=(Param1/100)%10+'0';
ffffffff8021ac61:	48 89 d5             	mov    %rdx,%rbp
ffffffff8021ac64:	48 c1 ed 02          	shr    $0x2,%rbp
ffffffff8021ac68:	48 89 e8             	mov    %rbp,%rax
ffffffff8021ac6b:	49 f7 e4             	mul    %r12
ffffffff8021ac6e:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021ac72:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021ac76:	48 01 c0             	add    %rax,%rax
ffffffff8021ac79:	48 29 c5             	sub    %rax,%rbp
    String[6]=(Param1/10)%10+'0';
ffffffff8021ac7c:	4c 89 c0             	mov    %r8,%rax
ffffffff8021ac7f:	49 f7 e4             	mul    %r12
    String[0]=Param1/10000000+'0';
ffffffff8021ac82:	40 0f b6 ed          	movzbl %bpl,%ebp
    String[6]=(Param1/10)%10+'0';
ffffffff8021ac86:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021ac8a:	48 89 d0             	mov    %rdx,%rax
ffffffff8021ac8d:	49 89 d5             	mov    %rdx,%r13
ffffffff8021ac90:	49 f7 e4             	mul    %r12
ffffffff8021ac93:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021ac97:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021ac9b:	4c 89 ea             	mov    %r13,%rdx
ffffffff8021ac9e:	48 01 c0             	add    %rax,%rax
ffffffff8021aca1:	48 29 c2             	sub    %rax,%rdx
    String[7]=(Param1)%10+'0';
ffffffff8021aca4:	4b 8d 44 ad 00       	lea    0x0(%r13,%r13,4),%rax
ffffffff8021aca9:	48 01 c0             	add    %rax,%rax
    String[0]=Param1/10000000+'0';
ffffffff8021acac:	0f b6 d2             	movzbl %dl,%edx
    String[7]=(Param1)%10+'0';
ffffffff8021acaf:	49 29 c0             	sub    %rax,%r8
    String[0]=Param1/10000000+'0';
ffffffff8021acb2:	41 0f b6 c0          	movzbl %r8b,%eax
ffffffff8021acb6:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021acba:	48 09 d0             	or     %rdx,%rax
    write_string(Func_ID, (const char *)String, Sub_ID);
ffffffff8021acbd:	48 89 ca             	mov    %rcx,%rdx
    String[0]=Param1/10000000+'0';
ffffffff8021acc0:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021acc4:	48 09 e8             	or     %rbp,%rax
ffffffff8021acc7:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021accb:	48 09 d8             	or     %rbx,%rax
ffffffff8021acce:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021acd2:	4c 09 d8             	or     %r11,%rax
ffffffff8021acd5:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021acd9:	4c 09 d0             	or     %r10,%rax
ffffffff8021acdc:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021ace0:	4c 09 c8             	or     %r9,%rax
ffffffff8021ace3:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021ace7:	48 09 f0             	or     %rsi,%rax
    write_string(Func_ID, (const char *)String, Sub_ID);
ffffffff8021acea:	48 89 e6             	mov    %rsp,%rsi
    String[0]=Param1/10000000+'0';
ffffffff8021aced:	66 48 0f 6e c8       	movq   %rax,%xmm1
ffffffff8021acf2:	66 0f fc c1          	paddb  %xmm1,%xmm0
ffffffff8021acf6:	66 0f d6 04 24       	movq   %xmm0,(%rsp)
    write_string(Func_ID, (const char *)String, Sub_ID);
ffffffff8021acfb:	e8 f0 fd ff ff       	call   ffffffff8021aaf0 <write_string>

    //__RME_X64_Halt();
    return 0;
}
ffffffff8021ad00:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021ad04:	31 c0                	xor    %eax,%eax
ffffffff8021ad06:	5b                   	pop    %rbx
ffffffff8021ad07:	5d                   	pop    %rbp
ffffffff8021ad08:	41 5c                	pop    %r12
ffffffff8021ad0a:	41 5d                	pop    %r13
ffffffff8021ad0c:	c3                   	ret
ffffffff8021ad0d:	0f 1f 00             	nopl   (%rax)

ffffffff8021ad10 <__RME_X64_Fault_Handler>:
              rme_ptr_t Reason - The fault source.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Fault_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Reason)
{
ffffffff8021ad10:	f3 0f 1e fa          	endbr64
ffffffff8021ad14:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_DBG_S("\n\rRFLAGS:     0x");RME_DBG_U(Reg->RFLAGS);
    RME_DBG_S("\n\rRSP:        0x");RME_DBG_U(Reg->RSP);
    RME_DBG_S("\n\rSS:         0x");RME_DBG_U(Reg->SS);
    RME_DBG_S("\n\rHang");

    while(1);
ffffffff8021ad18:	eb fe                	jmp    ffffffff8021ad18 <__RME_X64_Fault_Handler+0x8>
ffffffff8021ad1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021ad20 <__RME_X64_Generic_Handler>:
              rme_ptr_t Int_Num - The interrupt number.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Generic_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Int_Num)
{
ffffffff8021ad20:	f3 0f 1e fa          	endbr64
        /* Is this a generic IPI from other processors? */

        default:break;
    }
    /* Remember to perform context switch after any kernel sends */
}
ffffffff8021ad24:	c3                   	ret
ffffffff8021ad25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021ad2c:	00 00 00 00 

ffffffff8021ad30 <__RME_Pgt_Set>:
Input       : rme_ptr_t Pgt - The virtual address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgt_Set(rme_ptr_t Pgt)
{
ffffffff8021ad30:	f3 0f 1e fa          	endbr64
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff8021ad34:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8021ad3b:	80 00 00 
ffffffff8021ad3e:	48 01 c7             	add    %rax,%rdi
ffffffff8021ad41:	e9 63 1b ff ff       	jmp    ffffffff8020c8a9 <__RME_X64_Pgt_Set>
ffffffff8021ad46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021ad4d:	00 00 00 

ffffffff8021ad50 <__RME_SMP_Low_Level_Init>:
{
ffffffff8021ad50:	f3 0f 1e fa          	endbr64
ffffffff8021ad54:	53                   	push   %rbx
    __RME_X64_CPU_Local_Init();
ffffffff8021ad55:	e8 16 af ff ff       	call   ffffffff80215c70 <__RME_X64_CPU_Local_Init>
    __RME_X64_LAPIC_Init();
ffffffff8021ad5a:	e8 e1 e9 ff ff       	call   ffffffff80219740 <__RME_X64_LAPIC_Init>
    CPU_Local=RME_CPU_LOCAL();
ffffffff8021ad5f:	e8 db 1a ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
ffffffff8021ad64:	48 89 c3             	mov    %rax,%rbx
    RME_ASSERT(CPU_Local->CPUID==RME_X64_CPU_Cnt);
ffffffff8021ad67:	48 8b 05 32 d7 00 00 	mov    0xd732(%rip),%rax        # ffffffff802284a0 <RME_X64_CPU_Cnt>
    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
ffffffff8021ad6e:	48 8b 15 2b d7 00 00 	mov    0xd72b(%rip),%rdx        # ffffffff802284a0 <RME_X64_CPU_Cnt>
ffffffff8021ad75:	48 8d 05 24 c7 00 00 	lea    0xc724(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Info>
ffffffff8021ad7c:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff8021ad80:	48 01 d0             	add    %rdx,%rax
ffffffff8021ad83:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8021ad8a:	00 
    while(RME_X64_CPU_Cnt!=0);
ffffffff8021ad8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff8021ad90:	48 8b 15 09 d7 00 00 	mov    0xd709(%rip),%rdx        # ffffffff802284a0 <RME_X64_CPU_Cnt>
ffffffff8021ad97:	48 85 d2             	test   %rdx,%rdx
ffffffff8021ad9a:	75 f4                	jne    ffffffff8021ad90 <__RME_SMP_Low_Level_Init+0x40>
    __RME_Pgt_Set(RME_CAP_GETOBJ((CPU_Local->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff8021ad9c:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffff8021ada0:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021ada4:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021ada8:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8021adac:	e8 7f ff ff ff       	call   ffffffff8021ad30 <__RME_Pgt_Set>
    __RME_Enter_User_Mode(0, RME_X64_USTACK(CPU_Local->CPUID), CPU_Local->CPUID);
ffffffff8021adb1:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8021adb4:	31 ff                	xor    %edi,%edi
ffffffff8021adb6:	48 8d b2 01 04 00 00 	lea    0x401(%rdx),%rsi
ffffffff8021adbd:	48 c1 e6 0b          	shl    $0xb,%rsi
ffffffff8021adc1:	e8 fa 1a ff ff       	call   ffffffff8020c8c0 <__RME_Enter_User_Mode>
}
ffffffff8021adc6:	31 c0                	xor    %eax,%eax
ffffffff8021adc8:	5b                   	pop    %rbx
ffffffff8021adc9:	c3                   	ret
ffffffff8021adca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021add0 <__RME_Boot>:
{
ffffffff8021add0:	f3 0f 1e fa          	endbr64
ffffffff8021add4:	41 57                	push   %r15
ffffffff8021add6:	41 56                	push   %r14
ffffffff8021add8:	41 55                	push   %r13
ffffffff8021adda:	41 54                	push   %r12
ffffffff8021addc:	55                   	push   %rbp
    for(Count=0;Count<16;Count++)
ffffffff8021addd:	31 ed                	xor    %ebp,%ebp
{
ffffffff8021addf:	53                   	push   %rbx
ffffffff8021ade0:	48 83 ec 28          	sub    $0x28,%rsp
    RME_X64_CPU_Cnt=0;
ffffffff8021ade4:	48 c7 05 b1 d6 00 00 	movq   $0x0,0xd6b1(%rip)        # ffffffff802284a0 <RME_X64_CPU_Cnt>
ffffffff8021adeb:	00 00 00 00 
    __RME_X64_CPU_Local_Init();
ffffffff8021adef:	e8 7c ae ff ff       	call   ffffffff80215c70 <__RME_X64_CPU_Local_Init>
    __RME_X64_LAPIC_Init();
ffffffff8021adf4:	e8 47 e9 ff ff       	call   ffffffff80219740 <__RME_X64_LAPIC_Init>
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff8021adf9:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8021adfe:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021ae03:	e8 02 1a ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff8021ae08:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8021ae0d:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021ae12:	e8 f3 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x11);
ffffffff8021ae17:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff8021ae1c:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8021ae21:	e8 e4 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, RME_X64_INT_USER(0));
ffffffff8021ae26:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8021ae2b:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021ae30:	e8 d5 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 1<<2);
ffffffff8021ae35:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff8021ae3a:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021ae3f:	e8 c6 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0x3);
ffffffff8021ae44:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021ae49:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021ae4e:	e8 b7 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x11);
ffffffff8021ae53:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff8021ae58:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8021ae5d:	e8 a8 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, RME_X64_INT_USER(8));
ffffffff8021ae62:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff8021ae67:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021ae6c:	e8 99 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 2);
ffffffff8021ae71:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff8021ae76:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021ae7b:	e8 8a 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0x3);
ffffffff8021ae80:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021ae85:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021ae8a:	e8 7b 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x68);
ffffffff8021ae8f:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff8021ae94:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8021ae99:	e8 6c 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x0A);
ffffffff8021ae9e:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff8021aea3:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8021aea8:	e8 5d 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x68);
ffffffff8021aead:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff8021aeb2:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8021aeb7:	e8 4e 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x0A);
ffffffff8021aebc:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff8021aec1:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8021aec6:	e8 3f 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff8021aecb:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8021aed0:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021aed5:	e8 30 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff8021aeda:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8021aedf:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021aee4:	e8 21 19 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff8021aee9:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8021aef0:	80 ff ff 
    Max_Int=((Max_Int>>16)&0xFF);
ffffffff8021aef3:	0f b6 50 12          	movzbl 0x12(%rax),%edx
ffffffff8021aef7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,0);
ffffffff8021aefe:	8d 54 12 11          	lea    0x11(%rdx,%rdx,1),%edx
ffffffff8021af02:	89 10                	mov    %edx,(%rax)
    __RME_X64_SMP_Init();
ffffffff8021af04:	e8 57 e9 ff ff       	call   ffffffff80219860 <__RME_X64_SMP_Init>
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff8021af09:	4c 8b 3d e8 d5 00 00 	mov    0xd5e8(%rip),%r15        # ffffffff802284f8 <RME_X64_Layout+0x38>
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff8021af10:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff8021af15:	31 ff                	xor    %edi,%edi
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff8021af17:	49 8d 9f 00 00 00 02 	lea    0x2000000(%r15),%rbx
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff8021af1e:	48 89 de             	mov    %rbx,%rsi
ffffffff8021af21:	e8 da 50 ff ff       	call   ffffffff80210000 <_RME_Cpt_Boot_Init>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff8021af26:	41 b8 11 20 00 00    	mov    $0x2011,%r8d
ffffffff8021af2c:	31 f6                	xor    %esi,%esi
ffffffff8021af2e:	48 89 df             	mov    %rbx,%rdi
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(16));
ffffffff8021af31:	49 8d 8f 00 10 00 02 	lea    0x2001000(%r15),%rcx
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff8021af38:	49 81 c7 ff 2f 08 02 	add    $0x2082fff,%r15
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff8021af3f:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021af44:	e8 77 51 ff ff       	call   ffffffff802100c0 <_RME_Cpt_Boot_Crt>
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021af49:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff8021af4f:	45 31 c0             	xor    %r8d,%r8d
ffffffff8021af52:	31 d2                	xor    %edx,%edx
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff8021af54:	49 81 e7 00 f0 ff ff 	and    $0xfffffffffffff000,%r15
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021af5b:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021af60:	48 89 df             	mov    %rbx,%rdi
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff8021af63:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021af68:	4c 89 f9             	mov    %r15,%rcx
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff8021af6b:	4d 8d a7 00 10 00 00 	lea    0x1000(%r15),%r12
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021af72:	6a 09                	push   $0x9
ffffffff8021af74:	6a 27                	push   $0x27
ffffffff8021af76:	e8 35 53 ff ff       	call   ffffffff802102b0 <_RME_Pgt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff8021af7b:	41 5a                	pop    %r10
ffffffff8021af7d:	41 5b                	pop    %r11
ffffffff8021af7f:	90                   	nop
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff8021af80:	6a 09                	push   $0x9
ffffffff8021af82:	49 89 ed             	mov    %rbp,%r13
ffffffff8021af85:	48 83 c5 01          	add    $0x1,%rbp
ffffffff8021af89:	45 31 c9             	xor    %r9d,%r9d
ffffffff8021af8c:	6a 1e                	push   $0x1e
ffffffff8021af8e:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021af91:	45 31 c0             	xor    %r8d,%r8d
ffffffff8021af94:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021af97:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021af9c:	48 89 df             	mov    %rbx,%rdi
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8021af9f:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff8021afa6:	e8 05 53 ff ff       	call   ffffffff802102b0 <_RME_Pgt_Boot_Crt>
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4), Count,
ffffffff8021afab:	49 8d 4d 02          	lea    0x2(%r13),%rcx
ffffffff8021afaf:	4c 89 ea             	mov    %r13,%rdx
ffffffff8021afb2:	48 89 df             	mov    %rbx,%rdi
ffffffff8021afb5:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8021afbb:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021afc0:	e8 3b 40 ff ff       	call   ffffffff8020f000 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<16;Count++)
ffffffff8021afc5:	41 58                	pop    %r8
ffffffff8021afc7:	41 59                	pop    %r9
ffffffff8021afc9:	48 83 fd 10          	cmp    $0x10,%rbp
ffffffff8021afcd:	75 b1                	jne    ffffffff8021af80 <__RME_Boot+0x1b0>
ffffffff8021afcf:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    for(Count=0;Count<8192;Count++)
ffffffff8021afd4:	31 ed                	xor    %ebp,%ebp
ffffffff8021afd6:	4c 8d a0 00 10 01 00 	lea    0x11000(%rax),%r12
ffffffff8021afdd:	0f 1f 00             	nopl   (%rax)
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff8021afe0:	6a 09                	push   $0x9
ffffffff8021afe2:	48 8d 55 11          	lea    0x11(%rbp),%rdx
ffffffff8021afe6:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021afe9:	45 31 c9             	xor    %r9d,%r9d
ffffffff8021afec:	6a 15                	push   $0x15
ffffffff8021afee:	45 31 c0             	xor    %r8d,%r8d
ffffffff8021aff1:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021aff6:	48 89 df             	mov    %rbx,%rdi
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8021aff9:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff8021b000:	e8 ab 52 ff ff       	call   ffffffff802102b0 <_RME_Pgt_Boot_Crt>
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff8021b005:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021b008:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021b00b:	48 8d 4d 12          	lea    0x12(%rbp),%rcx
ffffffff8021b00f:	48 c1 fe 09          	sar    $0x9,%rsi
ffffffff8021b013:	48 89 df             	mov    %rbx,%rdi
ffffffff8021b016:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff8021b01c:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8021b022:	48 83 c6 02          	add    $0x2,%rsi
    for(Count=0;Count<8192;Count++)
ffffffff8021b026:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff8021b02a:	e8 d1 3f ff ff       	call   ffffffff8020f000 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<8192;Count++)
ffffffff8021b02f:	5e                   	pop    %rsi
ffffffff8021b030:	5f                   	pop    %rdi
ffffffff8021b031:	48 81 fd 00 20 00 00 	cmp    $0x2000,%rbp
ffffffff8021b038:	75 a6                	jne    ffffffff8021afe0 <__RME_Boot+0x210>
ffffffff8021b03a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8021b03f:	4c 8b 3d aa d4 00 00 	mov    0xd4aa(%rip),%r15        # ffffffff802284f0 <RME_X64_Layout+0x30>
ffffffff8021b046:	48 05 00 10 01 02    	add    $0x2011000,%rax
ffffffff8021b04c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff8021b051:	4d 85 ff             	test   %r15,%r15
ffffffff8021b054:	0f 84 9d 00 00 00    	je     ffffffff8021b0f7 <__RME_Boot+0x327>
ffffffff8021b05a:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff8021b061:	00 00 
    Page_Ptr=0;
ffffffff8021b063:	45 31 ff             	xor    %r15d,%r15d
ffffffff8021b066:	4c 8d 35 53 d4 00 00 	lea    0xd453(%rip),%r14        # ffffffff802284c0 <RME_X64_Layout>
ffffffff8021b06d:	0f 1f 00             	nopl   (%rax)
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021b070:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff8021b075:	45 31 ed             	xor    %r13d,%r13d
ffffffff8021b078:	48 8d 6f 26          	lea    0x26(%rdi),%rbp
ffffffff8021b07c:	4c 8d 67 06          	lea    0x6(%rdi),%r12
ffffffff8021b080:	49 8b 44 ee 08       	mov    0x8(%r14,%rbp,8),%rax
ffffffff8021b085:	48 85 c0             	test   %rax,%rax
ffffffff8021b088:	74 52                	je     ffffffff8021b0dc <__RME_Boot+0x30c>
ffffffff8021b08a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021b090:	4b 8b 54 e6 08       	mov    0x8(%r14,%r12,8),%rdx
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021b095:	4c 89 fe             	mov    %r15,%rsi
ffffffff8021b098:	4c 89 f9             	mov    %r15,%rcx
ffffffff8021b09b:	48 89 df             	mov    %rbx,%rdi
ffffffff8021b09e:	48 c1 ee 09          	shr    $0x9,%rsi
ffffffff8021b0a2:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
ffffffff8021b0a8:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021b0ae:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8021b0b5:	80 00 00 
ffffffff8021b0b8:	48 01 c2             	add    %rax,%rdx
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021b0bb:	48 83 c6 12          	add    $0x12,%rsi
            Page_Ptr++;
ffffffff8021b0bf:	49 83 c7 01          	add    $0x1,%r15
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021b0c3:	4c 01 ea             	add    %r13,%rdx
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021b0c6:	49 81 c5 00 00 20 00 	add    $0x200000,%r13
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021b0cd:	e8 de 3d ff ff       	call   ffffffff8020eeb0 <_RME_Pgt_Boot_Add>
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021b0d2:	49 8b 44 ee 08       	mov    0x8(%r14,%rbp,8),%rax
ffffffff8021b0d7:	49 39 c5             	cmp    %rax,%r13
ffffffff8021b0da:	72 b4                	jb     ffffffff8021b090 <__RME_Boot+0x2c0>
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8021b0dc:	48 83 44 24 08 01    	addq   $0x1,0x8(%rsp)
ffffffff8021b0e2:	48 8b 05 07 d4 00 00 	mov    0xd407(%rip),%rax        # ffffffff802284f0 <RME_X64_Layout+0x30>
ffffffff8021b0e9:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff8021b0ee:	48 39 c7             	cmp    %rax,%rdi
ffffffff8021b0f1:	0f 82 79 ff ff ff    	jb     ffffffff8021b070 <__RME_Boot+0x2a0>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021b0f7:	48 8b 05 12 d6 00 00 	mov    0xd612(%rip),%rax        # ffffffff80228710 <RME_X64_Layout+0x250>
ffffffff8021b0fe:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021b102:	0f 84 a0 00 00 00    	je     ffffffff8021b1a8 <__RME_Boot+0x3d8>
ffffffff8021b108:	4c 8b 25 a9 32 00 00 	mov    0x32a9(%rip),%r12        # ffffffff8021e3b8 <RME_X64_Pgflg_RME2NAT+0xd78>
ffffffff8021b10f:	41 be 00 08 00 00    	mov    $0x800,%r14d
ffffffff8021b115:	4d 8d af 00 f8 ff ff 	lea    -0x800(%r15),%r13
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021b11c:	48 bd 00 00 00 00 00 	movabs $0xffff800000000000,%rbp
ffffffff8021b123:	80 ff ff 
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021b126:	49 bf 00 f0 ff ff ff 	movabs $0xffffffffff000,%r15
ffffffff8021b12d:	ff 0f 00 
ffffffff8021b130:	4c 89 f0             	mov    %r14,%rax
ffffffff8021b133:	4c 89 f2             	mov    %r14,%rdx
ffffffff8021b136:	4b 8d 34 2e          	lea    (%r14,%r13,1),%rsi
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021b13a:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021b140:	48 c1 f8 12          	sar    $0x12,%rax
ffffffff8021b144:	48 c1 fa 09          	sar    $0x9,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021b148:	48 89 f1             	mov    %rsi,%rcx
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021b14b:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff8021b151:	48 c1 e0 09          	shl    $0x9,%rax
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021b155:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021b15b:	48 8d 84 02 00 02 00 	lea    0x200(%rdx,%rax,1),%rax
ffffffff8021b162:	00 
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021b163:	4c 89 f2             	mov    %r14,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021b166:	48 c1 ee 09          	shr    $0x9,%rsi
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021b16a:	49 83 c6 01          	add    $0x1,%r14
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021b16e:	49 8b 3c c4          	mov    (%r12,%rax,8),%rdi
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021b172:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021b178:	48 83 c6 12          	add    $0x12,%rsi
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021b17c:	4c 21 ff             	and    %r15,%rdi
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021b17f:	48 8d 04 d7          	lea    (%rdi,%rdx,8),%rax
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021b183:	48 89 df             	mov    %rbx,%rdi
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021b186:	48 8b 14 28          	mov    (%rax,%rbp,1),%rdx
ffffffff8021b18a:	4c 21 fa             	and    %r15,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021b18d:	e8 1e 3d ff ff       	call   ffffffff8020eeb0 <_RME_Pgt_Boot_Add>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021b192:	48 8b 05 77 d5 00 00 	mov    0xd577(%rip),%rax        # ffffffff80228710 <RME_X64_Layout+0x250>
ffffffff8021b199:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021b19d:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021b1a3:	49 39 c6             	cmp    %rax,%r14
ffffffff8021b1a6:	72 88                	jb     ffffffff8021b130 <__RME_Boot+0x360>
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff8021b1a8:	41 b8 01 00 00 00    	mov    $0x1,%r8d
ffffffff8021b1ae:	31 c9                	xor    %ecx,%ecx
ffffffff8021b1b0:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff8021b1b5:	31 f6                	xor    %esi,%esi
ffffffff8021b1b7:	48 89 df             	mov    %rbx,%rdi
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021b1ba:	31 ed                	xor    %ebp,%ebp
ffffffff8021b1bc:	4c 8d 35 fd d2 00 00 	lea    0xd2fd(%rip),%r14        # ffffffff802284c0 <RME_X64_Layout>
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff8021b1c3:	e8 18 5b ff ff       	call   ffffffff80210ce0 <_RME_Prc_Boot_Crt>
    RME_ASSERT(_RME_Kfn_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_KERN)==0);
ffffffff8021b1c8:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b1cd:	31 f6                	xor    %esi,%esi
ffffffff8021b1cf:	48 89 df             	mov    %rbx,%rdi
ffffffff8021b1d2:	e8 39 a9 ff ff       	call   ffffffff80215b10 <_RME_Kfn_Boot_Crt>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_KOM, Cur_Addr, RME_X64_KOM1_MAXSEGS+1)==0);
ffffffff8021b1d7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
ffffffff8021b1dc:	31 f6                	xor    %esi,%esi
ffffffff8021b1de:	48 89 df             	mov    %rbx,%rdi
ffffffff8021b1e1:	41 b8 21 00 00 00    	mov    $0x21,%r8d
ffffffff8021b1e7:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff8021b1ec:	e8 cf 4e ff ff       	call   ffffffff802100c0 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff8021b1f1:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021b1f6:	48 8b 05 f3 d2 00 00 	mov    0xd2f3(%rip),%rax        # ffffffff802284f0 <RME_X64_Layout+0x30>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff8021b1fd:	49 81 c7 00 20 01 02 	add    $0x2012000,%r15
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021b204:	48 85 c0             	test   %rax,%rax
ffffffff8021b207:	74 48                	je     ffffffff8021b251 <__RME_Boot+0x481>
ffffffff8021b209:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021b210:	48 8d 45 06          	lea    0x6(%rbp),%rax
ffffffff8021b214:	48 8d 55 26          	lea    0x26(%rbp),%rdx
ffffffff8021b218:	41 b9 0f 00 00 00    	mov    $0xf,%r9d
ffffffff8021b21e:	48 89 df             	mov    %rbx,%rdi
ffffffff8021b221:	49 8b 74 c6 08       	mov    0x8(%r14,%rax,8),%rsi
ffffffff8021b226:	49 8b 54 d6 08       	mov    0x8(%r14,%rdx,8),%rdx
ffffffff8021b22b:	49 8b 4c c6 08       	mov    0x8(%r14,%rax,8),%rcx
ffffffff8021b230:	4c 8d 04 16          	lea    (%rsi,%rdx,1),%r8
ffffffff8021b234:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021b237:	be 05 00 00 00       	mov    $0x5,%esi
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021b23c:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021b240:	e8 0b 58 ff ff       	call   ffffffff80210a50 <_RME_Kom_Boot_Crt>
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021b245:	48 8b 05 a4 d2 00 00 	mov    0xd2a4(%rip),%rax        # ffffffff802284f0 <RME_X64_Layout+0x30>
ffffffff8021b24c:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021b24f:	72 bf                	jb     ffffffff8021b210 <__RME_Boot+0x440>
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021b251:	41 b9 0d 00 00 00    	mov    $0xd,%r9d
ffffffff8021b257:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff8021b25c:	48 89 df             	mov    %rbx,%rdi
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b25f:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021b261:	48 8b 15 a0 d4 00 00 	mov    0xd4a0(%rip),%rdx        # ffffffff80228708 <RME_X64_Layout+0x248>
ffffffff8021b268:	48 8b 05 a1 d4 00 00 	mov    0xd4a1(%rip),%rax        # ffffffff80228710 <RME_X64_Layout+0x250>
ffffffff8021b26f:	48 8b 0d 92 d4 00 00 	mov    0xd492(%rip),%rcx        # ffffffff80228708 <RME_X64_Layout+0x248>
ffffffff8021b276:	4c 8d 04 02          	lea    (%rdx,%rax,1),%r8
ffffffff8021b27a:	ba 20 00 00 00       	mov    $0x20,%edx
ffffffff8021b27f:	e8 cc 57 ff ff       	call   ffffffff80210a50 <_RME_Kom_Boot_Crt>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021b284:	4c 89 f9             	mov    %r15,%rcx
ffffffff8021b287:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff8021b28c:	31 f6                	xor    %esi,%esi
ffffffff8021b28e:	4c 8b 05 13 d2 00 00 	mov    0xd213(%rip),%r8        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021b295:	48 89 df             	mov    %rbx,%rdi
ffffffff8021b298:	e8 23 4e ff ff       	call   ffffffff802100c0 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021b29d:	4c 8b 25 04 d2 00 00 	mov    0xd204(%rip),%r12        # ffffffff802284a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b2a4:	48 8b 05 fd d1 00 00 	mov    0xd1fd(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021b2ab:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021b2af:	49 81 c4 ff 0f 00 00 	add    $0xfff,%r12
ffffffff8021b2b6:	49 81 e4 00 f0 ff ff 	and    $0xfffffffffffff000,%r12
ffffffff8021b2bd:	4d 01 fc             	add    %r15,%r12
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b2c0:	48 85 c0             	test   %rax,%rax
ffffffff8021b2c3:	74 47                	je     ffffffff8021b30c <__RME_Boot+0x53c>
ffffffff8021b2c5:	0f 1f 00             	nopl   (%rax)
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021b2c8:	48 8b 0d 01 d2 00 00 	mov    0xd201(%rip),%rcx        # ffffffff802284d0 <RME_X64_Layout+0x10>
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021b2cf:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021b2d2:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021b2d5:	48 89 df             	mov    %rbx,%rdi
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021b2d8:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021b2dc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021b2e0:	48 03 83 98 01 00 00 	add    0x198(%rbx),%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021b2e7:	be 06 00 00 00       	mov    $0x6,%esi
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021b2ec:	48 89 84 11 10 14 00 	mov    %rax,0x1410(%rcx,%rdx,1)
ffffffff8021b2f3:	00 
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021b2f4:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b2f7:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021b2fb:	e8 e0 60 ff ff       	call   ffffffff802113e0 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b300:	48 8b 05 a1 d1 00 00 	mov    0xd1a1(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021b307:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021b30a:	72 bc                	jb     ffffffff8021b2c8 <__RME_Boot+0x4f8>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021b30c:	4c 8b 05 95 d1 00 00 	mov    0xd195(%rip),%r8        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021b313:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021b316:	31 f6                	xor    %esi,%esi
ffffffff8021b318:	48 89 df             	mov    %rbx,%rdi
ffffffff8021b31b:	ba 07 00 00 00       	mov    $0x7,%edx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b320:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021b322:	e8 99 4d ff ff       	call   ffffffff802100c0 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021b327:	4c 8b 2d 7a d1 00 00 	mov    0xd17a(%rip),%r13        # ffffffff802284a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b32e:	48 8b 05 73 d1 00 00 	mov    0xd173(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021b335:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8021b339:	49 81 c5 ff 0f 00 00 	add    $0xfff,%r13
ffffffff8021b340:	49 81 e5 00 f0 ff ff 	and    $0xfffffffffffff000,%r13
ffffffff8021b347:	4d 01 e5             	add    %r12,%r13
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b34a:	48 85 c0             	test   %rax,%rax
ffffffff8021b34d:	74 45                	je     ffffffff8021b394 <__RME_Boot+0x5c4>
ffffffff8021b34f:	90                   	nop
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021b350:	48 8b 0d 79 d1 00 00 	mov    0xd179(%rip),%rcx        # ffffffff802284d0 <RME_X64_Layout+0x10>
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021b357:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021b35a:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021b35d:	48 89 df             	mov    %rbx,%rdi
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021b360:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021b364:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021b368:	48 03 83 d8 01 00 00 	add    0x1d8(%rbx),%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021b36f:	be 07 00 00 00       	mov    $0x7,%esi
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021b374:	48 89 84 11 18 14 00 	mov    %rax,0x1418(%rcx,%rdx,1)
ffffffff8021b37b:	00 
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021b37c:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b37f:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021b383:	e8 58 60 ff ff       	call   ffffffff802113e0 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b388:	48 8b 05 19 d1 00 00 	mov    0xd119(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021b38f:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021b392:	72 bc                	jb     ffffffff8021b350 <__RME_Boot+0x580>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021b394:	4c 8b 05 0d d1 00 00 	mov    0xd10d(%rip),%r8        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021b39b:	4c 89 e9             	mov    %r13,%rcx
ffffffff8021b39e:	31 f6                	xor    %esi,%esi
ffffffff8021b3a0:	48 89 df             	mov    %rbx,%rdi
ffffffff8021b3a3:	ba 03 00 00 00       	mov    $0x3,%edx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b3a8:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021b3aa:	e8 11 4d ff ff       	call   ffffffff802100c0 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021b3af:	4c 8b 25 f2 d0 00 00 	mov    0xd0f2(%rip),%r12        # ffffffff802284a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b3b6:	48 8b 05 eb d0 00 00 	mov    0xd0eb(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021b3bd:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021b3c1:	49 81 c4 ff 0f 00 00 	add    $0xfff,%r12
ffffffff8021b3c8:	49 81 e4 00 f0 ff ff 	and    $0xfffffffffffff000,%r12
ffffffff8021b3cf:	4d 01 ec             	add    %r13,%r12
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b3d2:	48 85 c0             	test   %rax,%rax
ffffffff8021b3d5:	74 58                	je     ffffffff8021b42f <__RME_Boot+0x65f>
ffffffff8021b3d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021b3de:	00 00 
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021b3e0:	48 8b 15 e9 d0 00 00 	mov    0xd0e9(%rip),%rdx        # ffffffff802284d0 <RME_X64_Layout+0x10>
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021b3e7:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021b3ea:	4d 89 e0             	mov    %r12,%r8
ffffffff8021b3ed:	45 31 c9             	xor    %r9d,%r9d
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021b3f0:	48 c1 e0 0d          	shl    $0xd,%rax
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021b3f4:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8021b3f8:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff8021b3fd:	48 89 df             	mov    %rbx,%rdi
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021b400:	48 8d 84 02 00 14 00 	lea    0x1400(%rdx,%rax,1),%rax
ffffffff8021b407:	00 
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021b408:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021b40d:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b410:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021b414:	50                   	push   %rax
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_THD_SIZE);
ffffffff8021b415:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021b41c:	e8 1f 5c ff ff       	call   ffffffff80211040 <_RME_Thd_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021b421:	48 8b 05 80 d0 00 00 	mov    0xd080(%rip),%rax        # ffffffff802284a8 <RME_X64_Num_CPU>
ffffffff8021b428:	5a                   	pop    %rdx
ffffffff8021b429:	59                   	pop    %rcx
ffffffff8021b42a:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021b42d:	72 b1                	jb     ffffffff8021b3e0 <__RME_Boot+0x610>
    __RME_X64_Out(RME_X64_PIT_CMD,0x34);
ffffffff8021b42f:	be 34 00 00 00       	mov    $0x34,%esi
ffffffff8021b434:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff8021b439:	e8 cc 13 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,(1193182/2/RME_X64_TIMER_FREQ)&0xFF);
ffffffff8021b43e:	be 54 00 00 00       	mov    $0x54,%esi
ffffffff8021b443:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff8021b448:	e8 bd 13 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,((1193182/2/RME_X64_TIMER_FREQ)>>8)&0xFF);
ffffffff8021b44d:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff8021b452:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff8021b457:	e8 ae 13 ff ff       	call   ffffffff8020c80a <__RME_X64_Out>
    __RME_Pgt_Set(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff8021b45c:	e8 de 13 ff ff       	call   ffffffff8020c83f <__RME_X64_CPU_Local_Get>
ffffffff8021b461:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021b465:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021b469:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021b46d:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8021b471:	e8 ba f8 ff ff       	call   ffffffff8021ad30 <__RME_Pgt_Set>
    _RME_Memcpy(0,(void*)UVM_Init,RME_POW2(RME_PGT_SIZE_2M));
ffffffff8021b476:	48 8b 35 0b 30 00 00 	mov    0x300b(%rip),%rsi        # ffffffff8021e488 <RME_X64_Pgflg_RME2NAT+0xe48>
ffffffff8021b47d:	ba 00 00 20 00       	mov    $0x200000,%edx
ffffffff8021b482:	31 ff                	xor    %edi,%edi
ffffffff8021b484:	e8 77 39 ff ff       	call   ffffffff8020ee00 <_RME_Memcpy>
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff8021b489:	31 d2                	xor    %edx,%edx
ffffffff8021b48b:	be 00 08 20 00       	mov    $0x200800,%esi
ffffffff8021b490:	31 ff                	xor    %edi,%edi
    RME_X64_CPU_Cnt=0;
ffffffff8021b492:	48 c7 05 03 d0 00 00 	movq   $0x0,0xd003(%rip)        # ffffffff802284a0 <RME_X64_CPU_Cnt>
ffffffff8021b499:	00 00 00 00 
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff8021b49d:	e8 1e 14 ff ff       	call   ffffffff8020c8c0 <__RME_Enter_User_Mode>
}
ffffffff8021b4a2:	48 83 c4 28          	add    $0x28,%rsp
ffffffff8021b4a6:	31 c0                	xor    %eax,%eax
ffffffff8021b4a8:	5b                   	pop    %rbx
ffffffff8021b4a9:	5d                   	pop    %rbp
ffffffff8021b4aa:	41 5c                	pop    %r12
ffffffff8021b4ac:	41 5d                	pop    %r13
ffffffff8021b4ae:	41 5e                	pop    %r14
ffffffff8021b4b0:	41 5f                	pop    %r15
ffffffff8021b4b2:	c3                   	ret
ffffffff8021b4b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b4ba:	00 00 00 00 
ffffffff8021b4be:	66 90                	xchg   %ax,%ax

ffffffff8021b4c0 <__RME_Pgt_Check>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Check(rme_ptr_t Base_Addr, rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order, rme_ptr_t Num_Order, rme_ptr_t Vaddr)
{
ffffffff8021b4c0:	f3 0f 1e fa          	endbr64
    /* Is the table address aligned to 4kB? */
    if((Vaddr&0xFFF)!=0)
        return RME_ERR_PGT_OPFAIL;
ffffffff8021b4c4:	b8 01 00 00 00       	mov    $0x1,%eax
    if((Vaddr&0xFFF)!=0)
ffffffff8021b4c9:	41 f7 c0 ff 0f 00 00 	test   $0xfff,%r8d
ffffffff8021b4d0:	75 31                	jne    ffffffff8021b503 <__RME_Pgt_Check+0x43>

    /* Is the size order allowed? */
    if((Size_Order!=RME_PGT_SIZE_512G)&&(Size_Order!=RME_PGT_SIZE_1G)&&
       (Size_Order!=RME_PGT_SIZE_2M)&&(Size_Order!=RME_PGT_SIZE_4K))
ffffffff8021b4d2:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff8021b4d6:	77 2b                	ja     ffffffff8021b503 <__RME_Pgt_Check+0x43>
ffffffff8021b4d8:	48 bf ff ef df bf 7f 	movabs $0xffffff7fbfdfefff,%rdi
ffffffff8021b4df:	ff ff ff 
ffffffff8021b4e2:	48 0f a3 d7          	bt     %rdx,%rdi
ffffffff8021b4e6:	72 1b                	jb     ffffffff8021b503 <__RME_Pgt_Check+0x43>
        return RME_ERR_PGT_OPFAIL;

    /* Is the top-level relationship correct? */
    if(((Size_Order==RME_PGT_SIZE_512G)^(Is_Top!=0))!=0)
ffffffff8021b4e8:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff8021b4ec:	0f 94 c0             	sete   %al
ffffffff8021b4ef:	48 85 f6             	test   %rsi,%rsi
ffffffff8021b4f2:	0f 95 c2             	setne  %dl
ffffffff8021b4f5:	31 d0                	xor    %edx,%eax
        return RME_ERR_PGT_OPFAIL;

    /* Is the number order allowed? */
    if(Num_Order!=RME_PGT_NUM_512)
ffffffff8021b4f7:	48 83 f9 09          	cmp    $0x9,%rcx
ffffffff8021b4fb:	0f 95 c2             	setne  %dl
ffffffff8021b4fe:	09 d0                	or     %edx,%eax
ffffffff8021b500:	0f b6 c0             	movzbl %al,%eax
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021b503:	c3                   	ret
ffffffff8021b504:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b50b:	00 00 00 00 
ffffffff8021b50f:	90                   	nop

ffffffff8021b510 <__RME_Pgt_Init>:
Input       : struct RME_Cap_Pgt* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Init(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff8021b510:	f3 0f 1e fa          	endbr64
    rme_cnt_t Count;
    rme_ptr_t* Ptr;
    
    /* Get the actual table */
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8021b514:	4c 8b 47 18          	mov    0x18(%rdi),%r8

    /* Hopefully the compiler optimize this to rep stos */
    for(Count=0;Count<256;Count++)
        Ptr[Count]=0;
ffffffff8021b518:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021b51c:	49 8d 90 00 08 00 00 	lea    0x800(%r8),%rdx
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8021b523:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b526:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021b52d:	00 00 00 
        Ptr[Count]=0;
ffffffff8021b530:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8021b533:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021b537:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021b53b:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021b53e:	75 f0                	jne    ffffffff8021b530 <__RME_Pgt_Init+0x20>

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgt_Op->Base&RME_PGT_TOP)!=0)
ffffffff8021b540:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b544:	74 3f                	je     ffffffff8021b585 <__RME_Pgt_Init+0x75>
ffffffff8021b546:	48 8b 0d 6b 2e 00 00 	mov    0x2e6b(%rip),%rcx        # ffffffff8021e3b8 <RME_X64_Pgflg_RME2NAT+0xd78>
ffffffff8021b54d:	48 8d b1 08 08 00 00 	lea    0x808(%rcx),%rsi
ffffffff8021b554:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021b557:	49 8d b0 00 10 00 00 	lea    0x1000(%r8),%rsi
ffffffff8021b55e:	74 72                	je     ffffffff8021b5d2 <__RME_Pgt_Init+0xc2>
    {
        for(;Count<512;Count++)
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021b560:	4c 29 c1             	sub    %r8,%rcx
ffffffff8021b563:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021b566:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021b56d:	00 00 00 
ffffffff8021b570:	f3 0f 6f 0c 10       	movdqu (%rax,%rdx,1),%xmm1
        for(;Count<512;Count++)
ffffffff8021b575:	48 83 c0 10          	add    $0x10,%rax
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021b579:	0f 11 48 f0          	movups %xmm1,-0x10(%rax)
        for(;Count<512;Count++)
ffffffff8021b57d:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021b580:	75 ee                	jne    ffffffff8021b570 <__RME_Pgt_Init+0x60>
        for(;Count<512;Count++)
            Ptr[Count]=0;
    }

    return 0;
}
ffffffff8021b582:	31 c0                	xor    %eax,%eax
ffffffff8021b584:	c3                   	ret
ffffffff8021b585:	49 8d 80 00 10 00 00 	lea    0x1000(%r8),%rax
            Ptr[Count]=0;
ffffffff8021b58c:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021b590:	48 89 c1             	mov    %rax,%rcx
ffffffff8021b593:	48 29 d1             	sub    %rdx,%rcx
ffffffff8021b596:	83 e1 10             	and    $0x10,%ecx
ffffffff8021b599:	74 15                	je     ffffffff8021b5b0 <__RME_Pgt_Init+0xa0>
ffffffff8021b59b:	0f 11 02             	movups %xmm0,(%rdx)
        for(;Count<512;Count++)
ffffffff8021b59e:	48 83 c2 10          	add    $0x10,%rdx
ffffffff8021b5a2:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b5a5:	74 db                	je     ffffffff8021b582 <__RME_Pgt_Init+0x72>
ffffffff8021b5a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021b5ae:	00 00 
            Ptr[Count]=0;
ffffffff8021b5b0:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8021b5b3:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8021b5b7:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
        for(;Count<512;Count++)
ffffffff8021b5bb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b5be:	74 c2                	je     ffffffff8021b582 <__RME_Pgt_Init+0x72>
            Ptr[Count]=0;
ffffffff8021b5c0:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8021b5c3:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8021b5c7:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
        for(;Count<512;Count++)
ffffffff8021b5cb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b5ce:	75 e0                	jne    ffffffff8021b5b0 <__RME_Pgt_Init+0xa0>
ffffffff8021b5d0:	eb b0                	jmp    ffffffff8021b582 <__RME_Pgt_Init+0x72>
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021b5d2:	48 89 c8             	mov    %rcx,%rax
ffffffff8021b5d5:	4c 29 c0             	sub    %r8,%rax
ffffffff8021b5d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021b5df:	00 
ffffffff8021b5e0:	48 8b 0c 10          	mov    (%rax,%rdx,1),%rcx
        for(;Count<512;Count++)
ffffffff8021b5e4:	48 83 c2 08          	add    $0x8,%rdx
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021b5e8:	48 89 4a f8          	mov    %rcx,-0x8(%rdx)
        for(;Count<512;Count++)
ffffffff8021b5ec:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8021b5ef:	75 ef                	jne    ffffffff8021b5e0 <__RME_Pgt_Init+0xd0>
ffffffff8021b5f1:	eb 8f                	jmp    ffffffff8021b582 <__RME_Pgt_Init+0x72>
ffffffff8021b5f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b5fa:	00 00 00 00 
ffffffff8021b5fe:	66 90                	xchg   %ax,%ax

ffffffff8021b600 <__RME_Pgt_Del_Check>:
Input       : struct RME_Cap_Pgt Pgt_Op* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If can be deleted, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Del_Check(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff8021b600:	f3 0f 1e fa          	endbr64

    return 0;
}
ffffffff8021b604:	31 c0                	xor    %eax,%eax
ffffffff8021b606:	c3                   	ret
ffffffff8021b607:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021b60e:	00 00 

ffffffff8021b610 <__RME_Pgt_Page_Map>:
                                architecture specific page table's settings.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Map(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Paddr, rme_ptr_t Pos, rme_ptr_t Flags)
{
ffffffff8021b610:	f3 0f 1e fa          	endbr64
    rme_ptr_t* Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff8021b614:	48 89 c8             	mov    %rcx,%rax
ffffffff8021b617:	83 e0 01             	and    $0x1,%eax
ffffffff8021b61a:	74 4c                	je     ffffffff8021b668 <__RME_Pgt_Page_Map+0x58>
        return RME_ERR_PGT_OPFAIL;

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b61c:	48 81 fa ff 00 00 00 	cmp    $0xff,%rdx
ffffffff8021b623:	76 06                	jbe    ffffffff8021b62b <__RME_Pgt_Page_Map+0x1b>
ffffffff8021b625:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b629:	75 42                	jne    ffffffff8021b66d <__RME_Pgt_Page_Map+0x5d>

    /* Generate flags */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;
ffffffff8021b62b:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff8021b632:	ff 0f 00 
ffffffff8021b635:	83 e1 df             	and    $0xffffffdf,%ecx

    /* Try to map it in */
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff8021b638:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;
ffffffff8021b63c:	48 21 c6             	and    %rax,%rsi
ffffffff8021b63f:	48 8d 05 fa 1f 00 00 	lea    0x1ffa(%rip),%rax        # ffffffff8021d640 <RME_X64_Pgflg_RME2NAT>
ffffffff8021b646:	48 0b 34 c8          	or     (%rax,%rcx,8),%rsi
ffffffff8021b64a:	31 c0                	xor    %eax,%eax
ffffffff8021b64c:	40 80 ce 84          	or     $0x84,%sil
ffffffff8021b650:	f0 48 0f b1 34 d7    	lock cmpxchg %rsi,(%rdi,%rdx,8)
ffffffff8021b656:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff8021b65a:	31 c0                	xor    %eax,%eax
ffffffff8021b65c:	40 84 f6             	test   %sil,%sil
ffffffff8021b65f:	0f 94 c0             	sete   %al
ffffffff8021b662:	c3                   	ret
ffffffff8021b663:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return RME_ERR_PGT_OPFAIL;
ffffffff8021b668:	b8 01 00 00 00       	mov    $0x1,%eax
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021b66d:	c3                   	ret
ffffffff8021b66e:	66 90                	xchg   %ax,%ax

ffffffff8021b670 <__RME_Pgt_Page_Unmap>:
              rme_ptr_t Pos - The position in the page table.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Unmap(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos)
{
ffffffff8021b670:	f3 0f 1e fa          	endbr64
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b674:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021b67b:	76 0b                	jbe    ffffffff8021b688 <__RME_Pgt_Page_Unmap+0x18>
        return RME_ERR_PGT_OPFAIL;
ffffffff8021b67d:	ba 01 00 00 00       	mov    $0x1,%edx
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b682:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b686:	75 2b                	jne    ffffffff8021b6b3 <__RME_Pgt_Page_Unmap+0x43>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);

    /* Make sure that there is something */
    Temp=Table[Pos];
ffffffff8021b688:	48 8b 47 18          	mov    0x18(%rdi),%rax
        return RME_ERR_PGT_OPFAIL;
ffffffff8021b68c:	ba 01 00 00 00       	mov    $0x1,%edx
    Temp=Table[Pos];
ffffffff8021b691:	48 8d 0c f0          	lea    (%rax,%rsi,8),%rcx
ffffffff8021b695:	48 8b 01             	mov    (%rcx),%rax
    if(Temp==0)
ffffffff8021b698:	48 85 c0             	test   %rax,%rax
ffffffff8021b69b:	74 16                	je     ffffffff8021b6b3 <__RME_Pgt_Page_Unmap+0x43>
        return RME_ERR_PGT_OPFAIL;

    /* Is this a page directory? We cannot unmap page directories like this */
    if((RME_PGT_SIZEORD(Pgt_Op->Order)!=RME_PGT_SIZE_4K)&&((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff8021b69d:	a8 80                	test   $0x80,%al
ffffffff8021b69f:	74 12                	je     ffffffff8021b6b3 <__RME_Pgt_Page_Unmap+0x43>
ffffffff8021b6a1:	31 d2                	xor    %edx,%edx
ffffffff8021b6a3:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021b6a8:	0f 94 c2             	sete   %dl
        return RME_ERR_PGT_OPFAIL;

    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Table[Pos]),Temp,0)==0)
ffffffff8021b6ab:	84 d2                	test   %dl,%dl
ffffffff8021b6ad:	0f 94 c2             	sete   %dl
ffffffff8021b6b0:	0f b6 d2             	movzbl %dl,%edx
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021b6b3:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b6b6:	c3                   	ret
ffffffff8021b6b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021b6be:	00 00 

ffffffff8021b6c0 <__RME_Pgt_Pgdir_Map>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Map(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                struct RME_Cap_Pgt* Pgt_Child, rme_ptr_t Flags)
{
ffffffff8021b6c0:	f3 0f 1e fa          	endbr64
ffffffff8021b6c4:	48 89 d0             	mov    %rdx,%rax
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff8021b6c7:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021b6ca:	83 e2 01             	and    $0x1,%edx
ffffffff8021b6cd:	74 61                	je     ffffffff8021b730 <__RME_Pgt_Pgdir_Map+0x70>
        return RME_ERR_PGT_OPFAIL;

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b6cf:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021b6d6:	76 06                	jbe    ffffffff8021b6de <__RME_Pgt_Pgdir_Map+0x1e>
ffffffff8021b6d8:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b6dc:	75 44                	jne    ffffffff8021b722 <__RME_Pgt_Pgdir_Map+0x62>
    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
    Child_Table=RME_CAP_GETOBJ(Pgt_Child,rme_ptr_t*);

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021b6de:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021b6e5:	80 00 00 
ffffffff8021b6e8:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff8021b6ec:	83 e1 df             	and    $0xffffffdf,%ecx

    /* Try to map it in - may need to increase some count */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff8021b6ef:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021b6f3:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff8021b6fa:	ff 0f 00 
ffffffff8021b6fd:	48 21 c2             	and    %rax,%rdx
ffffffff8021b700:	48 8d 05 39 1f 00 00 	lea    0x1f39(%rip),%rax        # ffffffff8021d640 <RME_X64_Pgflg_RME2NAT>
ffffffff8021b707:	48 0b 14 c8          	or     (%rax,%rcx,8),%rdx
ffffffff8021b70b:	31 c0                	xor    %eax,%eax
ffffffff8021b70d:	48 83 ca 04          	or     $0x4,%rdx
ffffffff8021b711:	f0 48 0f b1 14 f7    	lock cmpxchg %rdx,(%rdi,%rsi,8)
ffffffff8021b717:	0f 94 c2             	sete   %dl
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff8021b71a:	84 d2                	test   %dl,%dl
ffffffff8021b71c:	0f 94 c2             	sete   %dl
ffffffff8021b71f:	0f b6 d2             	movzbl %dl,%edx
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021b722:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b725:	c3                   	ret
ffffffff8021b726:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021b72d:	00 00 00 
        return RME_ERR_PGT_OPFAIL;
ffffffff8021b730:	ba 01 00 00 00       	mov    $0x1,%edx
}
ffffffff8021b735:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b738:	c3                   	ret
ffffffff8021b739:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021b740 <__RME_Pgt_Pgdir_Unmap>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Unmap(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                  struct RME_Cap_Pgt* Pgt_Child)
{
ffffffff8021b740:	f3 0f 1e fa          	endbr64
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b744:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021b74b:	76 0b                	jbe    ffffffff8021b758 <__RME_Pgt_Pgdir_Unmap+0x18>
        return RME_ERR_PGT_OPFAIL;
ffffffff8021b74d:	ba 01 00 00 00       	mov    $0x1,%edx
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021b752:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b756:	75 31                	jne    ffffffff8021b789 <__RME_Pgt_Pgdir_Unmap+0x49>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);

    /* Make sure that there is something */
    Temp=Parent_Table[Pos];
ffffffff8021b758:	48 8b 47 18          	mov    0x18(%rdi),%rax
        return RME_ERR_PGT_OPFAIL;
ffffffff8021b75c:	ba 01 00 00 00       	mov    $0x1,%edx
    Temp=Parent_Table[Pos];
ffffffff8021b761:	48 8d 0c f0          	lea    (%rax,%rsi,8),%rcx
ffffffff8021b765:	48 8b 01             	mov    (%rcx),%rax
    if(Temp==0)
ffffffff8021b768:	48 85 c0             	test   %rax,%rax
ffffffff8021b76b:	74 1c                	je     ffffffff8021b789 <__RME_Pgt_Pgdir_Unmap+0x49>
        return RME_ERR_PGT_OPFAIL;

    /* Is this a page? We cannot unmap pages like this */
    if((RME_PGT_SIZEORD(Pgt_Parent->Order)==RME_PGT_SIZE_4K)||((Temp&RME_X64_MMU_PDE_SUP)!=0))
ffffffff8021b76d:	48 89 c6             	mov    %rax,%rsi
ffffffff8021b770:	81 e6 80 00 00 00    	and    $0x80,%esi
ffffffff8021b776:	75 11                	jne    ffffffff8021b789 <__RME_Pgt_Pgdir_Unmap+0x49>
ffffffff8021b778:	f0 48 0f b1 31       	lock cmpxchg %rsi,(%rcx)
ffffffff8021b77d:	40 0f 94 c6          	sete   %sil

    /* Is this child table mapped here? - check that in the future */

    Child_Table=(rme_ptr_t*)Temp;
    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),Temp,0)==0)
ffffffff8021b781:	31 d2                	xor    %edx,%edx
ffffffff8021b783:	40 84 f6             	test   %sil,%sil
ffffffff8021b786:	0f 94 c2             	sete   %dl
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021b789:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b78c:	c3                   	ret
ffffffff8021b78d:	0f 1f 00             	nopl   (%rax)

ffffffff8021b790 <__RME_Pgt_Lookup>:
Output      : rme_ptr_t* Paddr - The physical address of the page.
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Lookup(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos, rme_ptr_t* Paddr, rme_ptr_t* Flags)
{
ffffffff8021b790:	f3 0f 1e fa          	endbr64
ffffffff8021b794:	49 89 c8             	mov    %rcx,%r8
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Check if the position is within the range of this page table */
    if((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0)
        return RME_ERR_PGT_OPFAIL;
ffffffff8021b797:	b9 01 00 00 00       	mov    $0x1,%ecx
    if((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0)
ffffffff8021b79c:	48 85 f6             	test   %rsi,%rsi
ffffffff8021b79f:	75 60                	jne    ffffffff8021b801 <__RME_Pgt_Lookup+0x71>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
    /* Get the position requested - atomic read */
    Temp=Table[Pos];
ffffffff8021b7a1:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8021b7a5:	48 8b 00             	mov    (%rax),%rax
        if((Temp&RME_X64_MMU_P)==0)
            return RME_ERR_PGT_OPFAIL;
    }
    else
    {
        if(((Temp&RME_X64_MMU_P)==0)||((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff8021b7a8:	48 89 c6             	mov    %rax,%rsi
ffffffff8021b7ab:	48 f7 d6             	not    %rsi
ffffffff8021b7ae:	81 e6 81 00 00 00    	and    $0x81,%esi
ffffffff8021b7b4:	75 4b                	jne    ffffffff8021b801 <__RME_Pgt_Lookup+0x71>
            return RME_ERR_PGT_OPFAIL;
    }

    /* This is a page. Return the physical address and flags */
    if(Paddr!=0)
ffffffff8021b7b6:	48 85 d2             	test   %rdx,%rdx
ffffffff8021b7b9:	74 10                	je     ffffffff8021b7cb <__RME_Pgt_Lookup+0x3b>
        *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff8021b7bb:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff8021b7c2:	ff 0f 00 
ffffffff8021b7c5:	48 21 c1             	and    %rax,%rcx
ffffffff8021b7c8:	48 89 0a             	mov    %rcx,(%rdx)

    if(Flags!=0)
ffffffff8021b7cb:	4d 85 c0             	test   %r8,%r8
ffffffff8021b7ce:	74 2f                	je     ffffffff8021b7ff <__RME_Pgt_Lookup+0x6f>
        *Flags=RME_X64_PGFLG_NAT2RME(Temp);
ffffffff8021b7d0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b7d3:	48 89 c1             	mov    %rax,%rcx
ffffffff8021b7d6:	48 d1 e8             	shr    $1,%rax
ffffffff8021b7d9:	48 c1 ea 3f          	shr    $0x3f,%rdx
ffffffff8021b7dd:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff8021b7e1:	83 e0 01             	and    $0x1,%eax
ffffffff8021b7e4:	48 c1 e2 03          	shl    $0x3,%rdx
ffffffff8021b7e8:	83 e1 06             	and    $0x6,%ecx
ffffffff8021b7eb:	48 09 ca             	or     %rcx,%rdx
ffffffff8021b7ee:	48 09 d0             	or     %rdx,%rax
ffffffff8021b7f1:	48 8d 15 c8 1d 00 00 	lea    0x1dc8(%rip),%rdx        # ffffffff8021d5c0 <RME_X64_Pgflg_NAT2RME>
ffffffff8021b7f8:	48 8b 04 c2          	mov    (%rdx,%rax,8),%rax
ffffffff8021b7fc:	49 89 00             	mov    %rax,(%r8)

    return 0;
ffffffff8021b7ff:	31 c9                	xor    %ecx,%ecx
}
ffffffff8021b801:	48 89 c8             	mov    %rcx,%rax
ffffffff8021b804:	c3                   	ret
ffffffff8021b805:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b80c:	00 00 00 00 

ffffffff8021b810 <__RME_Pgt_Walk>:
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Walk(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Vaddr, rme_ptr_t* Pgt,
                           rme_ptr_t* Map_Vaddr, rme_ptr_t* Paddr, rme_ptr_t* Size_Order, rme_ptr_t* Num_Order, rme_ptr_t* Flags)
{
ffffffff8021b810:	f3 0f 1e fa          	endbr64
ffffffff8021b814:	41 56                	push   %r14
ffffffff8021b816:	41 55                	push   %r13
ffffffff8021b818:	41 54                	push   %r12
ffffffff8021b81a:	55                   	push   %rbp
ffffffff8021b81b:	53                   	push   %rbx
    /* Check if this is the top-level page table */
    if(((Pgt_Op->Base)&RME_PGT_TOP)==0)
        return RME_ERR_PGT_OPFAIL;

    /* Are we attempting a kernel or non-canonical lookup? If yes, stop immediately */
    if(Vaddr>=0x7FFFFFFFFFFFULL)
ffffffff8021b81c:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b820:	0f 84 9a 01 00 00    	je     ffffffff8021b9c0 <__RME_Pgt_Walk+0x1b0>
ffffffff8021b826:	49 89 d3             	mov    %rdx,%r11
ffffffff8021b829:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffe,%rdx
ffffffff8021b830:	7f 00 00 
ffffffff8021b833:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021b836:	0f 82 84 01 00 00    	jb     ffffffff8021b9c0 <__RME_Pgt_Walk+0x1b0>
        return RME_ERR_PGT_OPFAIL;

    /* Get the table and start lookup */
    Table=RME_CAP_GETOBJ(Pgt_Op, rme_ptr_t*);
ffffffff8021b83c:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
    Flags_Accum=0xFFF;
    No_Execute=0;
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b840:	48 89 f0             	mov    %rsi,%rax
ffffffff8021b843:	48 c1 e8 27          	shr    $0x27,%rax
        /* Atomic read */
        Temp=Table[Pos];
ffffffff8021b847:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b84b:	48 89 c3             	mov    %rax,%rbx
ffffffff8021b84e:	83 e3 01             	and    $0x1,%ebx
ffffffff8021b851:	0f 84 69 01 00 00    	je     ffffffff8021b9c0 <__RME_Pgt_Walk+0x1b0>
ffffffff8021b857:	49 89 ca             	mov    %rcx,%r10
            return RME_ERR_PGT_OPFAIL;
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b85a:	a8 80                	test   $0x80,%al
ffffffff8021b85c:	0f 85 76 01 00 00    	jne    ffffffff8021b9d8 <__RME_Pgt_Walk+0x1c8>
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Flags_Accum&=Temp;
            No_Execute|=Temp&RME_X64_MMU_NX;
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b862:	48 bd 00 f0 ff ff ff 	movabs $0xffffffffff000,%rbp
ffffffff8021b869:	ff 0f 00 
ffffffff8021b86c:	48 89 c7             	mov    %rax,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b86f:	48 89 f1             	mov    %rsi,%rcx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b872:	49 bd 00 00 00 00 00 	movabs $0xffff800000000000,%r13
ffffffff8021b879:	80 ff ff 
ffffffff8021b87c:	48 21 ef             	and    %rbp,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b87f:	48 c1 e9 1e          	shr    $0x1e,%rcx
            Flags_Accum&=Temp;
ffffffff8021b883:	48 89 c2             	mov    %rax,%rdx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b886:	4c 01 ef             	add    %r13,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b889:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
            Flags_Accum&=Temp;
ffffffff8021b88f:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
        Temp=Table[Pos];
ffffffff8021b895:	48 8b 0c cf          	mov    (%rdi,%rcx,8),%rcx
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b899:	49 89 ce             	mov    %rcx,%r14
ffffffff8021b89c:	41 83 e6 01          	and    $0x1,%r14d
ffffffff8021b8a0:	0f 84 1f 01 00 00    	je     ffffffff8021b9c5 <__RME_Pgt_Walk+0x1b5>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b8a6:	f6 c1 80             	test   $0x80,%cl
ffffffff8021b8a9:	0f 85 41 01 00 00    	jne    ffffffff8021b9f0 <__RME_Pgt_Walk+0x1e0>
            Flags_Accum&=Temp;
ffffffff8021b8af:	48 09 c8             	or     %rcx,%rax
ffffffff8021b8b2:	48 21 ca             	and    %rcx,%rdx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b8b5:	48 21 e9             	and    %rbp,%rcx
ffffffff8021b8b8:	49 89 c4             	mov    %rax,%r12
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b8bb:	48 89 f0             	mov    %rsi,%rax
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b8be:	4a 8d 3c 29          	lea    (%rcx,%r13,1),%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b8c2:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021b8c6:	25 ff 01 00 00       	and    $0x1ff,%eax
        Temp=Table[Pos];
ffffffff8021b8cb:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b8cf:	48 89 c3             	mov    %rax,%rbx
ffffffff8021b8d2:	83 e3 01             	and    $0x1,%ebx
ffffffff8021b8d5:	0f 84 34 01 00 00    	je     ffffffff8021ba0f <__RME_Pgt_Walk+0x1ff>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b8db:	a8 80                	test   $0x80,%al
ffffffff8021b8dd:	0f 85 31 01 00 00    	jne    ffffffff8021ba14 <__RME_Pgt_Walk+0x204>
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b8e3:	49 09 c4             	or     %rax,%r12
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b8e6:	48 21 c5             	and    %rax,%rbp
            Flags_Accum&=Temp;
ffffffff8021b8e9:	48 21 c2             	and    %rax,%rdx
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b8ec:	48 89 f0             	mov    %rsi,%rax
ffffffff8021b8ef:	48 c1 e8 0c          	shr    $0xc,%rax
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b8f3:	4a 8d 7c 2d 00       	lea    0x0(%rbp,%r13,1),%rdi
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b8f8:	48 b9 00 00 00 00 00 	movabs $0x8000000000000000,%rcx
ffffffff8021b8ff:	00 00 80 
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b902:	25 ff 01 00 00       	and    $0x1ff,%eax
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b907:	49 21 cc             	and    %rcx,%r12
        Temp=Table[Pos];
ffffffff8021b90a:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b90e:	a8 01                	test   $0x1,%al
ffffffff8021b910:	0f 84 af 00 00 00    	je     ffffffff8021b9c5 <__RME_Pgt_Walk+0x1b5>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b916:	bb 0c 00 00 00       	mov    $0xc,%ebx
ffffffff8021b91b:	b9 0c 00 00 00       	mov    $0xc,%ecx
            if(Pgt!=0)
ffffffff8021b920:	4d 85 db             	test   %r11,%r11
ffffffff8021b923:	74 03                	je     ffffffff8021b928 <__RME_Pgt_Walk+0x118>
                *Pgt=(rme_ptr_t)Table;
ffffffff8021b925:	49 89 3b             	mov    %rdi,(%r11)
            if(Map_Vaddr!=0)
ffffffff8021b928:	4d 85 d2             	test   %r10,%r10
ffffffff8021b92b:	74 10                	je     ffffffff8021b93d <__RME_Pgt_Walk+0x12d>
                *Map_Vaddr=RME_ROUND_DOWN(Vaddr,Size_Cnt);
ffffffff8021b92d:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
ffffffff8021b934:	48 d3 e7             	shl    %cl,%rdi
ffffffff8021b937:	48 21 f7             	and    %rsi,%rdi
ffffffff8021b93a:	49 89 3a             	mov    %rdi,(%r10)
            if(Paddr!=0)
ffffffff8021b93d:	4d 85 c0             	test   %r8,%r8
ffffffff8021b940:	74 10                	je     ffffffff8021b952 <__RME_Pgt_Walk+0x142>
                *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff8021b942:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff8021b949:	ff 0f 00 
ffffffff8021b94c:	48 21 c1             	and    %rax,%rcx
ffffffff8021b94f:	49 89 08             	mov    %rcx,(%r8)
            if(Size_Order!=0)
ffffffff8021b952:	4d 85 c9             	test   %r9,%r9
ffffffff8021b955:	74 03                	je     ffffffff8021b95a <__RME_Pgt_Walk+0x14a>
                *Size_Order=Size_Cnt;
ffffffff8021b957:	49 89 19             	mov    %rbx,(%r9)
            if(Num_Order!=0)
ffffffff8021b95a:	48 83 7c 24 30 00    	cmpq   $0x0,0x30(%rsp)
ffffffff8021b960:	74 0c                	je     ffffffff8021b96e <__RME_Pgt_Walk+0x15e>
                *Num_Order=RME_PGT_NUM_512;
ffffffff8021b962:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
ffffffff8021b967:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
            if(Flags!=0)
ffffffff8021b96e:	48 83 7c 24 38 00    	cmpq   $0x0,0x38(%rsp)
ffffffff8021b974:	74 3a                	je     ffffffff8021b9b0 <__RME_Pgt_Walk+0x1a0>
                *Flags=RME_X64_PGFLG_NAT2RME(No_Execute|(Temp&Flags_Accum));
ffffffff8021b976:	48 21 c2             	and    %rax,%rdx
ffffffff8021b979:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx
ffffffff8021b97e:	4c 09 e2             	or     %r12,%rdx
ffffffff8021b981:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b984:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021b987:	48 d1 ea             	shr    $1,%rdx
ffffffff8021b98a:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8021b98e:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff8021b992:	83 e2 01             	and    $0x1,%edx
ffffffff8021b995:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8021b999:	83 e1 06             	and    $0x6,%ecx
ffffffff8021b99c:	48 09 c8             	or     %rcx,%rax
ffffffff8021b99f:	48 09 d0             	or     %rdx,%rax
ffffffff8021b9a2:	48 8d 15 17 1c 00 00 	lea    0x1c17(%rip),%rdx        # ffffffff8021d5c0 <RME_X64_Pgflg_NAT2RME>
ffffffff8021b9a9:	48 8b 04 c2          	mov    (%rdx,%rax,8),%rax
ffffffff8021b9ad:	48 89 03             	mov    %rax,(%rbx)

        /* The size order always decreases by 512 */
        Size_Cnt-=RME_PGT_SIZE_512B;
    }

    return 0;
ffffffff8021b9b0:	31 db                	xor    %ebx,%ebx
}
ffffffff8021b9b2:	48 89 d8             	mov    %rbx,%rax
ffffffff8021b9b5:	5b                   	pop    %rbx
ffffffff8021b9b6:	5d                   	pop    %rbp
ffffffff8021b9b7:	41 5c                	pop    %r12
ffffffff8021b9b9:	41 5d                	pop    %r13
ffffffff8021b9bb:	41 5e                	pop    %r14
ffffffff8021b9bd:	c3                   	ret
ffffffff8021b9be:	66 90                	xchg   %ax,%ax
        return RME_ERR_PGT_OPFAIL;
ffffffff8021b9c0:	bb 01 00 00 00       	mov    $0x1,%ebx
}
ffffffff8021b9c5:	48 89 d8             	mov    %rbx,%rax
ffffffff8021b9c8:	5b                   	pop    %rbx
ffffffff8021b9c9:	5d                   	pop    %rbp
ffffffff8021b9ca:	41 5c                	pop    %r12
ffffffff8021b9cc:	41 5d                	pop    %r13
ffffffff8021b9ce:	41 5e                	pop    %r14
ffffffff8021b9d0:	c3                   	ret
ffffffff8021b9d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    No_Execute=0;
ffffffff8021b9d8:	45 31 e4             	xor    %r12d,%r12d
    Flags_Accum=0xFFF;
ffffffff8021b9db:	ba ff 0f 00 00       	mov    $0xfff,%edx
    Size_Cnt=RME_PGT_SIZE_512G;
ffffffff8021b9e0:	bb 27 00 00 00       	mov    $0x27,%ebx
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b9e5:	b9 27 00 00 00       	mov    $0x27,%ecx
ffffffff8021b9ea:	e9 31 ff ff ff       	jmp    ffffffff8021b920 <__RME_Pgt_Walk+0x110>
ffffffff8021b9ef:	90                   	nop
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b9f0:	49 bc 00 00 00 00 00 	movabs $0x8000000000000000,%r12
ffffffff8021b9f7:	00 00 80 
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff8021b9fa:	bb 1e 00 00 00       	mov    $0x1e,%ebx
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b9ff:	49 21 c4             	and    %rax,%r12
        Temp=Table[Pos];
ffffffff8021ba02:	48 89 c8             	mov    %rcx,%rax
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021ba05:	b9 1e 00 00 00       	mov    $0x1e,%ecx
ffffffff8021ba0a:	e9 11 ff ff ff       	jmp    ffffffff8021b920 <__RME_Pgt_Walk+0x110>
        return RME_ERR_PGT_OPFAIL;
ffffffff8021ba0f:	4c 89 f3             	mov    %r14,%rbx
ffffffff8021ba12:	eb b1                	jmp    ffffffff8021b9c5 <__RME_Pgt_Walk+0x1b5>
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021ba14:	48 b9 00 00 00 00 00 	movabs $0x8000000000000000,%rcx
ffffffff8021ba1b:	00 00 80 
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff8021ba1e:	bb 15 00 00 00       	mov    $0x15,%ebx
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021ba23:	49 21 cc             	and    %rcx,%r12
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021ba26:	b9 15 00 00 00       	mov    $0x15,%ecx
ffffffff8021ba2b:	e9 f0 fe ff ff       	jmp    ffffffff8021b920 <__RME_Pgt_Walk+0x110>

ffffffff8021ba30 <__RME_Svc_Param_Get>:
/* End Function:__RME_X64_Pgt_Set*/

/*Function:__RME_Svc_Param_Get*/

void __RME_Svc_Param_Get(struct RME_Reg_Struct* Reg,rme_ptr_t* Svc,rme_ptr_t* Cid,rme_ptr_t* Param)
{
ffffffff8021ba30:	f3 0f 1e fa          	endbr64

}
ffffffff8021ba34:	c3                   	ret
ffffffff8021ba35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021ba3c:	00 00 00 00 

ffffffff8021ba40 <__RME_Svc_Retval_Set>:
/*End Function:__RME_Svc_Param_Get*/

/*Function:__RME_Svc_Retval_Set*/

void __RME_Svc_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff8021ba40:	f3 0f 1e fa          	endbr64

}
ffffffff8021ba44:	c3                   	ret
ffffffff8021ba45:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021ba4c:	00 00 00 
ffffffff8021ba4f:	90                   	nop

ffffffff8021ba50 <main>:
{
ffffffff8021ba50:	f3 0f 1e fa          	endbr64
ffffffff8021ba54:	53                   	push   %rbx
ffffffff8021ba55:	48 89 fb             	mov    %rdi,%rbx
    RME_Int_Print(1111);
ffffffff8021ba58:	bf 57 04 00 00       	mov    $0x457,%edi
ffffffff8021ba5d:	e8 ce 2b ff ff       	call   ffffffff8020e630 <RME_Int_Print>
    _RME_Kmain(RME_KOM_STACK_ADDR);
ffffffff8021ba62:	48 8b 3d e7 2c 00 00 	mov    0x2ce7(%rip),%rdi        # ffffffff8021e750 <RME_X64_Pgflg_RME2NAT+0x1110>
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021ba69:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021ba70:	80 ff ff 
ffffffff8021ba73:	48 01 c3             	add    %rax,%rbx
ffffffff8021ba76:	48 89 1d ab cc 00 00 	mov    %rbx,0xccab(%rip)        # ffffffff80228728 <RME_X64_MBInfo>
    _RME_Kmain(RME_KOM_STACK_ADDR);
ffffffff8021ba7d:	e8 31 0e ff ff       	call   ffffffff8020c8b3 <_RME_Kmain>
}
ffffffff8021ba82:	31 c0                	xor    %eax,%eax
ffffffff8021ba84:	5b                   	pop    %rbx
ffffffff8021ba85:	c3                   	ret

ffffffff8021ba86 <__RME_Lowlvl_Init.cold>:
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff8021ba86:	8b 04 25 10 00 00 00 	mov    0x10,%eax
ffffffff8021ba8d:	0f 0b                	ud2
