
./Object/RME：     文件格式 elf64-x86-64


Disassembly of section .text:

ffffffff80100000 <__RME_X64_Mboot_Header>:
ffffffff80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
ffffffff80100006:	01 00                	add    %eax,(%rax)
ffffffff80100008:	fe 4f 51             	decb   0x51(%rdi)
ffffffff8010000b:	e4 00                	in     $0x0,%al
ffffffff8010000d:	00 10                	add    %dl,(%rax)
ffffffff8010000f:	00 00                	add    %al,(%rax)
ffffffff80100011:	00 10                	add    %dl,(%rax)
ffffffff80100013:	00 00                	add    %al,(%rax)
ffffffff80100015:	d0 21                	shlb   $1,(%rcx)
ffffffff80100017:	00 38                	add    %bh,(%rax)
ffffffff80100019:	67 22 00             	and    (%eax),%al
ffffffff8010001c:	00 80 10 00 90 e9    	add    %al,-0x166ffff0(%rax)
ffffffff80100022:	da 0f                	fimull (%rdi)
ffffffff80100024:	00 00                	add    %al,(%rax)
ffffffff80100026:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010002d:	00 00 00 00 
ffffffff80100031:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100038:	00 00 00 00 
ffffffff8010003c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100043:	00 00 00 00 
ffffffff80100047:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010004e:	00 00 00 00 
ffffffff80100052:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100059:	00 00 00 00 
ffffffff8010005d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100064:	00 00 00 00 
ffffffff80100068:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010006f:	00 00 00 00 
ffffffff80100073:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010007a:	00 00 00 00 
ffffffff8010007e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100085:	00 00 00 00 
ffffffff80100089:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100090:	00 00 00 00 
ffffffff80100094:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010009b:	00 00 00 00 
ffffffff8010009f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000a6:	00 00 00 00 
ffffffff801000aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000b1:	00 00 00 00 
ffffffff801000b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000bc:	00 00 00 00 
ffffffff801000c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000c7:	00 00 00 00 
ffffffff801000cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000d2:	00 00 00 00 
ffffffff801000d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000dd:	00 00 00 00 
ffffffff801000e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000e8:	00 00 00 00 
ffffffff801000ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000f3:	00 00 00 00 
ffffffff801000f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000fe:	00 00 00 00 
ffffffff80100102:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100109:	00 00 00 00 
ffffffff8010010d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100114:	00 00 00 00 
ffffffff80100118:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010011f:	00 00 00 00 
ffffffff80100123:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010012a:	00 00 00 00 
ffffffff8010012e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100135:	00 00 00 00 
ffffffff80100139:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100140:	00 00 00 00 
ffffffff80100144:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010014b:	00 00 00 00 
ffffffff8010014f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100156:	00 00 00 00 
ffffffff8010015a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100161:	00 00 00 00 
ffffffff80100165:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010016c:	00 00 00 00 
ffffffff80100170:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100177:	00 00 00 00 
ffffffff8010017b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100182:	00 00 00 00 
ffffffff80100186:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010018d:	00 00 00 00 
ffffffff80100191:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100198:	00 00 00 00 
ffffffff8010019c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001a3:	00 00 00 00 
ffffffff801001a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ae:	00 00 00 00 
ffffffff801001b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001b9:	00 00 00 00 
ffffffff801001bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001c4:	00 00 00 00 
ffffffff801001c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001cf:	00 00 00 00 
ffffffff801001d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001da:	00 00 00 00 
ffffffff801001de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001e5:	00 00 00 00 
ffffffff801001e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001f0:	00 00 00 00 
ffffffff801001f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001fb:	00 00 00 00 
ffffffff801001ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100206:	00 00 00 00 
ffffffff8010020a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100211:	00 00 00 00 
ffffffff80100215:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010021c:	00 00 00 00 
ffffffff80100220:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100227:	00 00 00 00 
ffffffff8010022b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100232:	00 00 00 00 
ffffffff80100236:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010023d:	00 00 00 00 
ffffffff80100241:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100248:	00 00 00 00 
ffffffff8010024c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100253:	00 00 00 00 
ffffffff80100257:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010025e:	00 00 00 00 
ffffffff80100262:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100269:	00 00 00 00 
ffffffff8010026d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100274:	00 00 00 00 
ffffffff80100278:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010027f:	00 00 00 00 
ffffffff80100283:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010028a:	00 00 00 00 
ffffffff8010028e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100295:	00 00 00 00 
ffffffff80100299:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002a0:	00 00 00 00 
ffffffff801002a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ab:	00 00 00 00 
ffffffff801002af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002b6:	00 00 00 00 
ffffffff801002ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002c1:	00 00 00 00 
ffffffff801002c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002cc:	00 00 00 00 
ffffffff801002d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002d7:	00 00 00 00 
ffffffff801002db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002e2:	00 00 00 00 
ffffffff801002e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ed:	00 00 00 00 
ffffffff801002f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002f8:	00 00 00 00 
ffffffff801002fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100303:	00 00 00 00 
ffffffff80100307:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010030e:	00 00 00 00 
ffffffff80100312:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100319:	00 00 00 00 
ffffffff8010031d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100324:	00 00 00 00 
ffffffff80100328:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010032f:	00 00 00 00 
ffffffff80100333:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010033a:	00 00 00 00 
ffffffff8010033e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100345:	00 00 00 00 
ffffffff80100349:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100350:	00 00 00 00 
ffffffff80100354:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010035b:	00 00 00 00 
ffffffff8010035f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100366:	00 00 00 00 
ffffffff8010036a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100371:	00 00 00 00 
ffffffff80100375:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010037c:	00 00 00 00 
ffffffff80100380:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100387:	00 00 00 00 
ffffffff8010038b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100392:	00 00 00 00 
ffffffff80100396:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010039d:	00 00 00 00 
ffffffff801003a1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003a8:	00 00 00 00 
ffffffff801003ac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003b3:	00 00 00 00 
ffffffff801003b7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003be:	00 00 00 00 
ffffffff801003c2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003c9:	00 00 00 00 
ffffffff801003cd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003d4:	00 00 00 00 
ffffffff801003d8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003df:	00 00 00 00 
ffffffff801003e3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003ea:	00 00 00 00 
ffffffff801003ee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003f5:	00 00 00 00 
ffffffff801003f9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100400:	00 00 00 00 
ffffffff80100404:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010040b:	00 00 00 00 
ffffffff8010040f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100416:	00 00 00 00 
ffffffff8010041a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100421:	00 00 00 00 
ffffffff80100425:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010042c:	00 00 00 00 
ffffffff80100430:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100437:	00 00 00 00 
ffffffff8010043b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100442:	00 00 00 00 
ffffffff80100446:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010044d:	00 00 00 00 
ffffffff80100451:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100458:	00 00 00 00 
ffffffff8010045c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100463:	00 00 00 00 
ffffffff80100467:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010046e:	00 00 00 00 
ffffffff80100472:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100479:	00 00 00 00 
ffffffff8010047d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100484:	00 00 00 00 
ffffffff80100488:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010048f:	00 00 00 00 
ffffffff80100493:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010049a:	00 00 00 00 
ffffffff8010049e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004a5:	00 00 00 00 
ffffffff801004a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004b0:	00 00 00 00 
ffffffff801004b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004bb:	00 00 00 00 
ffffffff801004bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004c6:	00 00 00 00 
ffffffff801004ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004d1:	00 00 00 00 
ffffffff801004d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004dc:	00 00 00 00 
ffffffff801004e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004e7:	00 00 00 00 
ffffffff801004eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004f2:	00 00 00 00 
ffffffff801004f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004fd:	00 00 00 00 
ffffffff80100501:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100508:	00 00 00 00 
ffffffff8010050c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100513:	00 00 00 00 
ffffffff80100517:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010051e:	00 00 00 00 
ffffffff80100522:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100529:	00 00 00 00 
ffffffff8010052d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100534:	00 00 00 00 
ffffffff80100538:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010053f:	00 00 00 00 
ffffffff80100543:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010054a:	00 00 00 00 
ffffffff8010054e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100555:	00 00 00 00 
ffffffff80100559:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100560:	00 00 00 00 
ffffffff80100564:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010056b:	00 00 00 00 
ffffffff8010056f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100576:	00 00 00 00 
ffffffff8010057a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100581:	00 00 00 00 
ffffffff80100585:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010058c:	00 00 00 00 
ffffffff80100590:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100597:	00 00 00 00 
ffffffff8010059b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005a2:	00 00 00 00 
ffffffff801005a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ad:	00 00 00 00 
ffffffff801005b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005b8:	00 00 00 00 
ffffffff801005bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005c3:	00 00 00 00 
ffffffff801005c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ce:	00 00 00 00 
ffffffff801005d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005d9:	00 00 00 00 
ffffffff801005dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005e4:	00 00 00 00 
ffffffff801005e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ef:	00 00 00 00 
ffffffff801005f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005fa:	00 00 00 00 
ffffffff801005fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100605:	00 00 00 00 
ffffffff80100609:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100610:	00 00 00 00 
ffffffff80100614:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010061b:	00 00 00 00 
ffffffff8010061f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100626:	00 00 00 00 
ffffffff8010062a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100631:	00 00 00 00 
ffffffff80100635:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010063c:	00 00 00 00 
ffffffff80100640:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100647:	00 00 00 00 
ffffffff8010064b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100652:	00 00 00 00 
ffffffff80100656:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010065d:	00 00 00 00 
ffffffff80100661:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100668:	00 00 00 00 
ffffffff8010066c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100673:	00 00 00 00 
ffffffff80100677:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010067e:	00 00 00 00 
ffffffff80100682:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100689:	00 00 00 00 
ffffffff8010068d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100694:	00 00 00 00 
ffffffff80100698:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010069f:	00 00 00 00 
ffffffff801006a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006aa:	00 00 00 00 
ffffffff801006ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006b5:	00 00 00 00 
ffffffff801006b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006c0:	00 00 00 00 
ffffffff801006c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006cb:	00 00 00 00 
ffffffff801006cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006d6:	00 00 00 00 
ffffffff801006da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006e1:	00 00 00 00 
ffffffff801006e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006ec:	00 00 00 00 
ffffffff801006f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006f7:	00 00 00 00 
ffffffff801006fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100702:	00 00 00 00 
ffffffff80100706:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010070d:	00 00 00 00 
ffffffff80100711:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100718:	00 00 00 00 
ffffffff8010071c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100723:	00 00 00 00 
ffffffff80100727:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010072e:	00 00 00 00 
ffffffff80100732:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100739:	00 00 00 00 
ffffffff8010073d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100744:	00 00 00 00 
ffffffff80100748:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010074f:	00 00 00 00 
ffffffff80100753:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010075a:	00 00 00 00 
ffffffff8010075e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100765:	00 00 00 00 
ffffffff80100769:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100770:	00 00 00 00 
ffffffff80100774:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010077b:	00 00 00 00 
ffffffff8010077f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100786:	00 00 00 00 
ffffffff8010078a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100791:	00 00 00 00 
ffffffff80100795:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010079c:	00 00 00 00 
ffffffff801007a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007a7:	00 00 00 00 
ffffffff801007ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007b2:	00 00 00 00 
ffffffff801007b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007bd:	00 00 00 00 
ffffffff801007c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007c8:	00 00 00 00 
ffffffff801007cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007d3:	00 00 00 00 
ffffffff801007d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007de:	00 00 00 00 
ffffffff801007e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007e9:	00 00 00 00 
ffffffff801007ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007f4:	00 00 00 00 
ffffffff801007f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007ff:	00 00 00 00 
ffffffff80100803:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010080a:	00 00 00 00 
ffffffff8010080e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100815:	00 00 00 00 
ffffffff80100819:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100820:	00 00 00 00 
ffffffff80100824:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010082b:	00 00 00 00 
ffffffff8010082f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100836:	00 00 00 00 
ffffffff8010083a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100841:	00 00 00 00 
ffffffff80100845:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010084c:	00 00 00 00 
ffffffff80100850:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100857:	00 00 00 00 
ffffffff8010085b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100862:	00 00 00 00 
ffffffff80100866:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010086d:	00 00 00 00 
ffffffff80100871:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100878:	00 00 00 00 
ffffffff8010087c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100883:	00 00 00 00 
ffffffff80100887:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010088e:	00 00 00 00 
ffffffff80100892:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100899:	00 00 00 00 
ffffffff8010089d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008a4:	00 00 00 00 
ffffffff801008a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008af:	00 00 00 00 
ffffffff801008b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008ba:	00 00 00 00 
ffffffff801008be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008c5:	00 00 00 00 
ffffffff801008c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008d0:	00 00 00 00 
ffffffff801008d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008db:	00 00 00 00 
ffffffff801008df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008e6:	00 00 00 00 
ffffffff801008ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008f1:	00 00 00 00 
ffffffff801008f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008fc:	00 00 00 00 
ffffffff80100900:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100907:	00 00 00 00 
ffffffff8010090b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100912:	00 00 00 00 
ffffffff80100916:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010091d:	00 00 00 00 
ffffffff80100921:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100928:	00 00 00 00 
ffffffff8010092c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100933:	00 00 00 00 
ffffffff80100937:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010093e:	00 00 00 00 
ffffffff80100942:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100949:	00 00 00 00 
ffffffff8010094d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100954:	00 00 00 00 
ffffffff80100958:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010095f:	00 00 00 00 
ffffffff80100963:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010096a:	00 00 00 00 
ffffffff8010096e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100975:	00 00 00 00 
ffffffff80100979:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100980:	00 00 00 00 
ffffffff80100984:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010098b:	00 00 00 00 
ffffffff8010098f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100996:	00 00 00 00 
ffffffff8010099a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009a1:	00 00 00 00 
ffffffff801009a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ac:	00 00 00 00 
ffffffff801009b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009b7:	00 00 00 00 
ffffffff801009bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009c2:	00 00 00 00 
ffffffff801009c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009cd:	00 00 00 00 
ffffffff801009d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009d8:	00 00 00 00 
ffffffff801009dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009e3:	00 00 00 00 
ffffffff801009e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ee:	00 00 00 00 
ffffffff801009f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009f9:	00 00 00 00 
ffffffff801009fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a04:	00 00 00 00 
ffffffff80100a08:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a0f:	00 00 00 00 
ffffffff80100a13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a1a:	00 00 00 00 
ffffffff80100a1e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a25:	00 00 00 00 
ffffffff80100a29:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a30:	00 00 00 00 
ffffffff80100a34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a3b:	00 00 00 00 
ffffffff80100a3f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a46:	00 00 00 00 
ffffffff80100a4a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a51:	00 00 00 00 
ffffffff80100a55:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a5c:	00 00 00 00 
ffffffff80100a60:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a67:	00 00 00 00 
ffffffff80100a6b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a72:	00 00 00 00 
ffffffff80100a76:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a7d:	00 00 00 00 
ffffffff80100a81:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a88:	00 00 00 00 
ffffffff80100a8c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a93:	00 00 00 00 
ffffffff80100a97:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a9e:	00 00 00 00 
ffffffff80100aa2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aa9:	00 00 00 00 
ffffffff80100aad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ab4:	00 00 00 00 
ffffffff80100ab8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100abf:	00 00 00 00 
ffffffff80100ac3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aca:	00 00 00 00 
ffffffff80100ace:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ad5:	00 00 00 00 
ffffffff80100ad9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ae0:	00 00 00 00 
ffffffff80100ae4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aeb:	00 00 00 00 
ffffffff80100aef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100af6:	00 00 00 00 
ffffffff80100afa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b01:	00 00 00 00 
ffffffff80100b05:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b0c:	00 00 00 00 
ffffffff80100b10:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b17:	00 00 00 00 
ffffffff80100b1b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b22:	00 00 00 00 
ffffffff80100b26:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b2d:	00 00 00 00 
ffffffff80100b31:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b38:	00 00 00 00 
ffffffff80100b3c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b43:	00 00 00 00 
ffffffff80100b47:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b4e:	00 00 00 00 
ffffffff80100b52:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b59:	00 00 00 00 
ffffffff80100b5d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b64:	00 00 00 00 
ffffffff80100b68:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b6f:	00 00 00 00 
ffffffff80100b73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b7a:	00 00 00 00 
ffffffff80100b7e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b85:	00 00 00 00 
ffffffff80100b89:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b90:	00 00 00 00 
ffffffff80100b94:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b9b:	00 00 00 00 
ffffffff80100b9f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ba6:	00 00 00 00 
ffffffff80100baa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bb1:	00 00 00 00 
ffffffff80100bb5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bbc:	00 00 00 00 
ffffffff80100bc0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bc7:	00 00 00 00 
ffffffff80100bcb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bd2:	00 00 00 00 
ffffffff80100bd6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bdd:	00 00 00 00 
ffffffff80100be1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100be8:	00 00 00 00 
ffffffff80100bec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bf3:	00 00 00 00 
ffffffff80100bf7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bfe:	00 00 00 00 
ffffffff80100c02:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c09:	00 00 00 00 
ffffffff80100c0d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c14:	00 00 00 00 
ffffffff80100c18:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c1f:	00 00 00 00 
ffffffff80100c23:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c2a:	00 00 00 00 
ffffffff80100c2e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c35:	00 00 00 00 
ffffffff80100c39:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c40:	00 00 00 00 
ffffffff80100c44:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c4b:	00 00 00 00 
ffffffff80100c4f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c56:	00 00 00 00 
ffffffff80100c5a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c61:	00 00 00 00 
ffffffff80100c65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c6c:	00 00 00 00 
ffffffff80100c70:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c77:	00 00 00 00 
ffffffff80100c7b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c82:	00 00 00 00 
ffffffff80100c86:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c8d:	00 00 00 00 
ffffffff80100c91:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c98:	00 00 00 00 
ffffffff80100c9c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ca3:	00 00 00 00 
ffffffff80100ca7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cae:	00 00 00 00 
ffffffff80100cb2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cb9:	00 00 00 00 
ffffffff80100cbd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cc4:	00 00 00 00 
ffffffff80100cc8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ccf:	00 00 00 00 
ffffffff80100cd3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cda:	00 00 00 00 
ffffffff80100cde:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ce5:	00 00 00 00 
ffffffff80100ce9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cf0:	00 00 00 00 
ffffffff80100cf4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cfb:	00 00 00 00 
ffffffff80100cff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d06:	00 00 00 00 
ffffffff80100d0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d11:	00 00 00 00 
ffffffff80100d15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d1c:	00 00 00 00 
ffffffff80100d20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d27:	00 00 00 00 
ffffffff80100d2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d32:	00 00 00 00 
ffffffff80100d36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d3d:	00 00 00 00 
ffffffff80100d41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d48:	00 00 00 00 
ffffffff80100d4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d53:	00 00 00 00 
ffffffff80100d57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d5e:	00 00 00 00 
ffffffff80100d62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d69:	00 00 00 00 
ffffffff80100d6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d74:	00 00 00 00 
ffffffff80100d78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d7f:	00 00 00 00 
ffffffff80100d83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d8a:	00 00 00 00 
ffffffff80100d8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d95:	00 00 00 00 
ffffffff80100d99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100da0:	00 00 00 00 
ffffffff80100da4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dab:	00 00 00 00 
ffffffff80100daf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100db6:	00 00 00 00 
ffffffff80100dba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dc1:	00 00 00 00 
ffffffff80100dc5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dcc:	00 00 00 00 
ffffffff80100dd0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dd7:	00 00 00 00 
ffffffff80100ddb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100de2:	00 00 00 00 
ffffffff80100de6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ded:	00 00 00 00 
ffffffff80100df1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100df8:	00 00 00 00 
ffffffff80100dfc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e03:	00 00 00 00 
ffffffff80100e07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e0e:	00 00 00 00 
ffffffff80100e12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e19:	00 00 00 00 
ffffffff80100e1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e24:	00 00 00 00 
ffffffff80100e28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e2f:	00 00 00 00 
ffffffff80100e33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e3a:	00 00 00 00 
ffffffff80100e3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e45:	00 00 00 00 
ffffffff80100e49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e50:	00 00 00 00 
ffffffff80100e54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e5b:	00 00 00 00 
ffffffff80100e5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e66:	00 00 00 00 
ffffffff80100e6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e71:	00 00 00 00 
ffffffff80100e75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e7c:	00 00 00 00 
ffffffff80100e80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e87:	00 00 00 00 
ffffffff80100e8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e92:	00 00 00 00 
ffffffff80100e96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e9d:	00 00 00 00 
ffffffff80100ea1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ea8:	00 00 00 00 
ffffffff80100eac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eb3:	00 00 00 00 
ffffffff80100eb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ebe:	00 00 00 00 
ffffffff80100ec2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ec9:	00 00 00 00 
ffffffff80100ecd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ed4:	00 00 00 00 
ffffffff80100ed8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100edf:	00 00 00 00 
ffffffff80100ee3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eea:	00 00 00 00 
ffffffff80100eee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ef5:	00 00 00 00 
ffffffff80100ef9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f00:	00 00 00 00 
ffffffff80100f04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f0b:	00 00 00 00 
ffffffff80100f0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f16:	00 00 00 00 
ffffffff80100f1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f21:	00 00 00 00 
ffffffff80100f25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f2c:	00 00 00 00 
ffffffff80100f30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f37:	00 00 00 00 
ffffffff80100f3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f42:	00 00 00 00 
ffffffff80100f46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f4d:	00 00 00 00 
ffffffff80100f51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f58:	00 00 00 00 
ffffffff80100f5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f63:	00 00 00 00 
ffffffff80100f67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f6e:	00 00 00 00 
ffffffff80100f72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f79:	00 00 00 00 
ffffffff80100f7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f84:	00 00 00 00 
ffffffff80100f88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f8f:	00 00 00 00 
ffffffff80100f93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f9a:	00 00 00 00 
ffffffff80100f9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fa5:	00 00 00 00 
ffffffff80100fa9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fb0:	00 00 00 00 
ffffffff80100fb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fbb:	00 00 00 00 
ffffffff80100fbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fc6:	00 00 00 00 
ffffffff80100fca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fd1:	00 00 00 00 
ffffffff80100fd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fdc:	00 00 00 00 
ffffffff80100fe0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fe7:	00 00 00 00 
ffffffff80100feb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ff2:	00 00 00 00 
ffffffff80100ff6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80100ffd:	00 00 00 
	...

ffffffff80108000 <__RME_X64_Mboot_Entry>:
/* The entry point after the bootloader finishes *****************************/
    .code32
    .align              16
__RME_X64_Mboot_Entry:
     /* EBX contains Multiboot data structure, let's relocate it to some other places */
     MOV                %EBX,%ESI
ffffffff80108000:	89 de                	mov    %ebx,%esi
     /* Zero 7 pages for our bootstrap page tables, PML4 @ 0x101000 */
     CLD
ffffffff80108002:	fc                   	cld
     XOR                %EAX,%EAX
ffffffff80108003:	31 c0                	xor    %eax,%eax
     MOV                $0x101000,%EDI
ffffffff80108005:	bf 00 10 10 00       	mov    $0x101000,%edi
     MOV                $0x7000,%ECX
ffffffff8010800a:	b9 00 70 00 00       	mov    $0x7000,%ecx
     REP STOSB
ffffffff8010800f:	f3 aa                	rep stos %al,%es:(%rdi)
     /* PML4[0] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff80108011:	b8 03 20 10 00       	mov    $0x102003,%eax
     MOV                %EAX,0x101000
ffffffff80108016:	a3 00 10 10 00 b8 03 	movabs %eax,0x102003b800101000
ffffffff8010801d:	20 10 
     /* PML4[256] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff8010801f:	00 a3 00 18 10 00    	add    %ah,0x101800(%rbx)
     MOV                %EAX,0x101800
     /* PML4[511] -> PDP-B @ 0x103000 */
     MOV                $(0x103000|3),%EAX
ffffffff80108025:	b8 03 30 10 00       	mov    $0x103003,%eax
     MOV                %EAX,0x101FF8
ffffffff8010802a:	a3 f8 1f 10 00 b8 03 	movabs %eax,0x104003b800101ff8
ffffffff80108031:	40 10 
     /* PDP-A[0] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff80108033:	00 a3 00 20 10 00    	add    %ah,0x102000(%rbx)
     MOV                %EAX,0x102000
     /* PDP-A[1] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108039:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x102008
ffffffff8010803e:	a3 08 20 10 00 b8 03 	movabs %eax,0x106003b800102008
ffffffff80108045:	60 10 
     /* PDP-A[2] -> PDE-C @ 0x106000 */
     MOV                $(0x106000|3),%EAX
ffffffff80108047:	00 a3 10 20 10 00    	add    %ah,0x102010(%rbx)
     MOV                %EAX,0x102010
     /* PDP-A[3] -> PDE-D @ 0x107000 unbufferable uncacheable */
     MOV                $(0x107000|3|0x18),%EAX
ffffffff8010804d:	b8 1b 70 10 00       	mov    $0x10701b,%eax
     MOV                %EAX,0x102018
ffffffff80108052:	a3 18 20 10 00 b8 03 	movabs %eax,0x104003b800102018
ffffffff80108059:	40 10 
     /* PDP-B[510] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff8010805b:	00 a3 f0 3f 10 00    	add    %ah,0x103ff0(%rbx)
     MOV                %EAX,0x103FF0
     /* PDP-B[511] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108061:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x103FF8
ffffffff80108066:	a3 f8 3f 10 00 b8 83 	movabs %eax,0x83b800103ff8
ffffffff8010806d:	00 00 
     /* PDE-A/B/C/D [0..511/0...511/0..511/0..511] -> 0..4094MB */
     MOV                $(0x83),%EAX
ffffffff8010806f:	00 bb 00 40 10 00    	add    %bh,0x104000(%rbx)
     MOV                $0x104000,%EBX
     MOV                $(512*4),%ECX
ffffffff80108075:	b9 00 08 00 00       	mov    $0x800,%ecx

ffffffff8010807a <PDE_Loop>:
PDE_Loop:
     MOV                %EAX,(%EBX)
ffffffff8010807a:	89 03                	mov    %eax,(%rbx)
     ADD                $0x200000,%EAX
ffffffff8010807c:	05 00 00 20 00       	add    $0x200000,%eax
     ADD                $0x8,%EBX
ffffffff80108081:	83 c3 08             	add    $0x8,%ebx
     DEC                %ECX
ffffffff80108084:	49 75 f3             	rex.WB jne ffffffff8010807a <PDE_Loop>
     JNZ                PDE_Loop
	 /* Clear ebx for initial processor boot.
      * When secondary processors boot, they'll call through
      * __RME_X64_SMP_Boot, but with a nonzero ebx.
      * We'll reuse these bootstrap pagetables and GDT. */
     XOR                %EBX,%EBX
ffffffff80108087:	31 db                	xor    %ebx,%ebx

ffffffff80108089 <__RME_X64_SMP_Boot_32>:
     /* SMP boot will run directly from here */
__RME_X64_SMP_Boot_32:
     /* CR3 -> PML4 @ 0x101000 */
     MOV                $0x101000,%EAX
ffffffff80108089:	b8 00 10 10 00       	mov    $0x101000,%eax
     MOV                %EAX,%CR3
ffffffff8010808e:	0f 22 d8             	mov    %rax,%cr3
     /* Load GDT */
     LGDT               (Boot_GDT_Desc-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff80108091:	0f 01 15 28 81 10 00 	lgdt   0x108128(%rip)        # ffffffff802101c0 <_RME_Kom_Boot_Crt+0xc0>
     /* Enable PAE - CR4.PAE=1 */
     MOV                %CR4,%EAX
ffffffff80108098:	0f 20 e0             	mov    %cr4,%rax
     BTS                $5,%EAX
ffffffff8010809b:	0f ba e8 05          	bts    $0x5,%eax
     MOV                %EAX,%CR4
ffffffff8010809f:	0f 22 e0             	mov    %rax,%cr4
     /* Enable long mode and no execute bit - EFER.LME=1, EFER.NXE=1 */
     MOV                $0xC0000080,%ECX
ffffffff801080a2:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
     RDMSR
ffffffff801080a7:	0f 32                	rdmsr
     BTS                $8,%EAX
ffffffff801080a9:	0f ba e8 08          	bts    $0x8,%eax
     BTS                $11,%EAX
ffffffff801080ad:	0f ba e8 0b          	bts    $0xb,%eax
     WRMSR
ffffffff801080b1:	0f 30                	wrmsr
     /* Enable paging */
     MOV                %CR0,%EAX
ffffffff801080b3:	0f 20 c0             	mov    %cr0,%rax
     BTS                $31,%EAX
ffffffff801080b6:	0f ba e8 1f          	bts    $0x1f,%eax
     MOV                %EAX,%CR0
ffffffff801080ba:	0f 22 c0             	mov    %rax,%cr0
     /* Enable PCID - CR4.PCIDE=1 FIXME: this made things slower - due to extra logic for PCID processing *//*
     MOV                %CR4,%EAX
     BTS                $17,%EAX
     MOV                %EAX,%CR4 */
     /* shift to 64bit segment */
     LJMP               $8,$(Boot_Low_64-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff801080bd:	ea                   	(bad)
ffffffff801080be:	d0 80 10 00 08 00    	rolb   $1,0x80010(%rax)
ffffffff801080c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801080cb:	00 00 00 00 
ffffffff801080cf:	90                   	nop

ffffffff801080d0 <Boot_Low_64>:

/* Now we are in 64-bit mode *************************************************/
    .align              16
    .code64
Boot_Low_64:
    movq                $Boot_High_64,%RAX
ffffffff801080d0:	48 c7 c0 d9 80 10 80 	mov    $0xffffffff801080d9,%rax
    jmp                 *%RAX
ffffffff801080d7:	ff e0                	jmp    *%rax

ffffffff801080d9 <_start>:
_start:
Boot_High_64:
    /* ensure data segment registers are sane - zero out all of them */
    XOR                 %RAX,%RAX
ffffffff801080d9:	48 31 c0             	xor    %rax,%rax
    /* Below are all 16-bit moves */
    MOV                 %AX,%SS
ffffffff801080dc:	8e d0                	mov    %eax,%ss
    MOV                 %AX,%DS
ffffffff801080de:	8e d8                	mov    %eax,%ds
    MOV                 %AX,%ES
ffffffff801080e0:	8e c0                	mov    %eax,%es
    MOV                 %AX,%FS
ffffffff801080e2:	8e e0                	mov    %eax,%fs
    MOV                 %AX,%GS
ffffffff801080e4:	8e e8                	mov    %eax,%gs
    /* Check to see if we're booting a secondary core */
    TEST                %EBX,%EBX
ffffffff801080e6:	85 db                	test   %ebx,%ebx
    JNZ                 Boot_SMP_64
ffffffff801080e8:	75 14                	jne    ffffffff801080fe <Boot_SMP_64>
    /* Setup initial stack - this is hard-coded at low memory */
    MOV                 $__RME_X64_Kern_Boot_Stack,%RAX
ffffffff801080ea:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
    MOV                 %RAX,%RSP
ffffffff801080f1:	48 89 c4             	mov    %rax,%rsp
    /* Pass the physical address of RSI to it */
    MOV                 %RSI,%RDI
ffffffff801080f4:	48 89 f7             	mov    %rsi,%rdi
    JMP                 main
ffffffff801080f7:	e9 54 2f 11 00       	jmp    ffffffff8021b050 <main>
    JMP                 .
ffffffff801080fc:	eb fe                	jmp    ffffffff801080fc <_start+0x23>

ffffffff801080fe <Boot_SMP_64>:
Boot_SMP_64:
    MOV                 $0x7000,%RAX
ffffffff801080fe:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax
    MOV                 -16(%RAX),%RSP
ffffffff80108105:	48 8b 60 f0          	mov    -0x10(%rax),%rsp
    JMP                 __RME_SMP_Low_Level_Init
ffffffff80108109:	e9 82 1d 11 00       	jmp    ffffffff80219e90 <__RME_SMP_Low_Level_Init>
    JMP                 .
ffffffff8010810e:	eb fe                	jmp    ffffffff8010810e <Boot_SMP_64+0x10>

ffffffff80108110 <Boot_GDT>:
	...
ffffffff8010811c:	00 98 20 00 00 00    	add    %bl,0x20(%rax)
ffffffff80108122:	00 00                	add    %al,(%rax)
ffffffff80108124:	00                   	.byte 0
ffffffff80108125:	90                   	nop
	...

ffffffff80108128 <Boot_GDT_Desc>:
ffffffff80108128:	17                   	(bad)
ffffffff80108129:	00 10                	add    %dl,(%rax)
ffffffff8010812b:	81 10 00 00 00 00    	adcl   $0x0,(%rax)
ffffffff80108131:	00 90 66 66 2e 0f    	add    %dl,0xf2e6666(%rax)
ffffffff80108137:	1f                   	(bad)
ffffffff80108138:	84 00                	test   %al,(%rax)
ffffffff8010813a:	00 00                	add    %al,(%rax)
ffffffff8010813c:	00 00                	add    %al,(%rax)
ffffffff8010813e:	66 90                	xchg   %ax,%ax
ffffffff80108140:	90                   	nop
ffffffff80108141:	e9 ba 0e 00 00       	jmp    ffffffff80109000 <RME_X64_Kpgt>
ffffffff80108146:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010814d:	00 00 00 00 
ffffffff80108151:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108158:	00 00 00 00 
ffffffff8010815c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108163:	00 00 00 00 
ffffffff80108167:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010816e:	00 00 00 00 
ffffffff80108172:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108179:	00 00 00 00 
ffffffff8010817d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108184:	00 00 00 00 
ffffffff80108188:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010818f:	00 00 00 00 
ffffffff80108193:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010819a:	00 00 00 00 
ffffffff8010819e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081a5:	00 00 00 00 
ffffffff801081a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081b0:	00 00 00 00 
ffffffff801081b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081bb:	00 00 00 00 
ffffffff801081bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081c6:	00 00 00 00 
ffffffff801081ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081d1:	00 00 00 00 
ffffffff801081d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081dc:	00 00 00 00 
ffffffff801081e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081e7:	00 00 00 00 
ffffffff801081eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081f2:	00 00 00 00 
ffffffff801081f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081fd:	00 00 00 00 
ffffffff80108201:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108208:	00 00 00 00 
ffffffff8010820c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108213:	00 00 00 00 
ffffffff80108217:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010821e:	00 00 00 00 
ffffffff80108222:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108229:	00 00 00 00 
ffffffff8010822d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108234:	00 00 00 00 
ffffffff80108238:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010823f:	00 00 00 00 
ffffffff80108243:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010824a:	00 00 00 00 
ffffffff8010824e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108255:	00 00 00 00 
ffffffff80108259:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108260:	00 00 00 00 
ffffffff80108264:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010826b:	00 00 00 00 
ffffffff8010826f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108276:	00 00 00 00 
ffffffff8010827a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108281:	00 00 00 00 
ffffffff80108285:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010828c:	00 00 00 00 
ffffffff80108290:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108297:	00 00 00 00 
ffffffff8010829b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082a2:	00 00 00 00 
ffffffff801082a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ad:	00 00 00 00 
ffffffff801082b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082b8:	00 00 00 00 
ffffffff801082bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082c3:	00 00 00 00 
ffffffff801082c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ce:	00 00 00 00 
ffffffff801082d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082d9:	00 00 00 00 
ffffffff801082dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082e4:	00 00 00 00 
ffffffff801082e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ef:	00 00 00 00 
ffffffff801082f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082fa:	00 00 00 00 
ffffffff801082fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108305:	00 00 00 00 
ffffffff80108309:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108310:	00 00 00 00 
ffffffff80108314:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010831b:	00 00 00 00 
ffffffff8010831f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108326:	00 00 00 00 
ffffffff8010832a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108331:	00 00 00 00 
ffffffff80108335:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010833c:	00 00 00 00 
ffffffff80108340:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108347:	00 00 00 00 
ffffffff8010834b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108352:	00 00 00 00 
ffffffff80108356:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010835d:	00 00 00 00 
ffffffff80108361:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108368:	00 00 00 00 
ffffffff8010836c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108373:	00 00 00 00 
ffffffff80108377:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010837e:	00 00 00 00 
ffffffff80108382:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108389:	00 00 00 00 
ffffffff8010838d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108394:	00 00 00 00 
ffffffff80108398:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010839f:	00 00 00 00 
ffffffff801083a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083aa:	00 00 00 00 
ffffffff801083ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083b5:	00 00 00 00 
ffffffff801083b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083c0:	00 00 00 00 
ffffffff801083c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083cb:	00 00 00 00 
ffffffff801083cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083d6:	00 00 00 00 
ffffffff801083da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083e1:	00 00 00 00 
ffffffff801083e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083ec:	00 00 00 00 
ffffffff801083f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083f7:	00 00 00 00 
ffffffff801083fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108402:	00 00 00 00 
ffffffff80108406:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010840d:	00 00 00 00 
ffffffff80108411:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108418:	00 00 00 00 
ffffffff8010841c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108423:	00 00 00 00 
ffffffff80108427:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010842e:	00 00 00 00 
ffffffff80108432:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108439:	00 00 00 00 
ffffffff8010843d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108444:	00 00 00 00 
ffffffff80108448:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010844f:	00 00 00 00 
ffffffff80108453:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010845a:	00 00 00 00 
ffffffff8010845e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108465:	00 00 00 00 
ffffffff80108469:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108470:	00 00 00 00 
ffffffff80108474:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010847b:	00 00 00 00 
ffffffff8010847f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108486:	00 00 00 00 
ffffffff8010848a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108491:	00 00 00 00 
ffffffff80108495:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010849c:	00 00 00 00 
ffffffff801084a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084a7:	00 00 00 00 
ffffffff801084ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084b2:	00 00 00 00 
ffffffff801084b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084bd:	00 00 00 00 
ffffffff801084c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084c8:	00 00 00 00 
ffffffff801084cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084d3:	00 00 00 00 
ffffffff801084d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084de:	00 00 00 00 
ffffffff801084e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084e9:	00 00 00 00 
ffffffff801084ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084f4:	00 00 00 00 
ffffffff801084f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084ff:	00 00 00 00 
ffffffff80108503:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010850a:	00 00 00 00 
ffffffff8010850e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108515:	00 00 00 00 
ffffffff80108519:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108520:	00 00 00 00 
ffffffff80108524:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010852b:	00 00 00 00 
ffffffff8010852f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108536:	00 00 00 00 
ffffffff8010853a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108541:	00 00 00 00 
ffffffff80108545:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010854c:	00 00 00 00 
ffffffff80108550:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108557:	00 00 00 00 
ffffffff8010855b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108562:	00 00 00 00 
ffffffff80108566:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010856d:	00 00 00 00 
ffffffff80108571:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108578:	00 00 00 00 
ffffffff8010857c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108583:	00 00 00 00 
ffffffff80108587:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010858e:	00 00 00 00 
ffffffff80108592:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108599:	00 00 00 00 
ffffffff8010859d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085a4:	00 00 00 00 
ffffffff801085a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085af:	00 00 00 00 
ffffffff801085b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085ba:	00 00 00 00 
ffffffff801085be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085c5:	00 00 00 00 
ffffffff801085c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085d0:	00 00 00 00 
ffffffff801085d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085db:	00 00 00 00 
ffffffff801085df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085e6:	00 00 00 00 
ffffffff801085ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085f1:	00 00 00 00 
ffffffff801085f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085fc:	00 00 00 00 
ffffffff80108600:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108607:	00 00 00 00 
ffffffff8010860b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108612:	00 00 00 00 
ffffffff80108616:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010861d:	00 00 00 00 
ffffffff80108621:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108628:	00 00 00 00 
ffffffff8010862c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108633:	00 00 00 00 
ffffffff80108637:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010863e:	00 00 00 00 
ffffffff80108642:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108649:	00 00 00 00 
ffffffff8010864d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108654:	00 00 00 00 
ffffffff80108658:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010865f:	00 00 00 00 
ffffffff80108663:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010866a:	00 00 00 00 
ffffffff8010866e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108675:	00 00 00 00 
ffffffff80108679:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108680:	00 00 00 00 
ffffffff80108684:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010868b:	00 00 00 00 
ffffffff8010868f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108696:	00 00 00 00 
ffffffff8010869a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086a1:	00 00 00 00 
ffffffff801086a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ac:	00 00 00 00 
ffffffff801086b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086b7:	00 00 00 00 
ffffffff801086bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086c2:	00 00 00 00 
ffffffff801086c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086cd:	00 00 00 00 
ffffffff801086d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086d8:	00 00 00 00 
ffffffff801086dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086e3:	00 00 00 00 
ffffffff801086e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ee:	00 00 00 00 
ffffffff801086f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086f9:	00 00 00 00 
ffffffff801086fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108704:	00 00 00 00 
ffffffff80108708:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010870f:	00 00 00 00 
ffffffff80108713:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010871a:	00 00 00 00 
ffffffff8010871e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108725:	00 00 00 00 
ffffffff80108729:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108730:	00 00 00 00 
ffffffff80108734:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010873b:	00 00 00 00 
ffffffff8010873f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108746:	00 00 00 00 
ffffffff8010874a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108751:	00 00 00 00 
ffffffff80108755:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010875c:	00 00 00 00 
ffffffff80108760:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108767:	00 00 00 00 
ffffffff8010876b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108772:	00 00 00 00 
ffffffff80108776:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010877d:	00 00 00 00 
ffffffff80108781:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108788:	00 00 00 00 
ffffffff8010878c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108793:	00 00 00 00 
ffffffff80108797:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010879e:	00 00 00 00 
ffffffff801087a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087a9:	00 00 00 00 
ffffffff801087ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087b4:	00 00 00 00 
ffffffff801087b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087bf:	00 00 00 00 
ffffffff801087c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087ca:	00 00 00 00 
ffffffff801087ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087d5:	00 00 00 00 
ffffffff801087d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087e0:	00 00 00 00 
ffffffff801087e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087eb:	00 00 00 00 
ffffffff801087ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087f6:	00 00 00 00 
ffffffff801087fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108801:	00 00 00 00 
ffffffff80108805:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010880c:	00 00 00 00 
ffffffff80108810:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108817:	00 00 00 00 
ffffffff8010881b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108822:	00 00 00 00 
ffffffff80108826:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010882d:	00 00 00 00 
ffffffff80108831:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108838:	00 00 00 00 
ffffffff8010883c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108843:	00 00 00 00 
ffffffff80108847:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010884e:	00 00 00 00 
ffffffff80108852:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108859:	00 00 00 00 
ffffffff8010885d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108864:	00 00 00 00 
ffffffff80108868:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010886f:	00 00 00 00 
ffffffff80108873:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010887a:	00 00 00 00 
ffffffff8010887e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108885:	00 00 00 00 
ffffffff80108889:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108890:	00 00 00 00 
ffffffff80108894:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010889b:	00 00 00 00 
ffffffff8010889f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088a6:	00 00 00 00 
ffffffff801088aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088b1:	00 00 00 00 
ffffffff801088b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088bc:	00 00 00 00 
ffffffff801088c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088c7:	00 00 00 00 
ffffffff801088cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088d2:	00 00 00 00 
ffffffff801088d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088dd:	00 00 00 00 
ffffffff801088e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088e8:	00 00 00 00 
ffffffff801088ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088f3:	00 00 00 00 
ffffffff801088f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088fe:	00 00 00 00 
ffffffff80108902:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108909:	00 00 00 00 
ffffffff8010890d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108914:	00 00 00 00 
ffffffff80108918:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010891f:	00 00 00 00 
ffffffff80108923:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010892a:	00 00 00 00 
ffffffff8010892e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108935:	00 00 00 00 
ffffffff80108939:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108940:	00 00 00 00 
ffffffff80108944:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010894b:	00 00 00 00 
ffffffff8010894f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108956:	00 00 00 00 
ffffffff8010895a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108961:	00 00 00 00 
ffffffff80108965:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010896c:	00 00 00 00 
ffffffff80108970:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108977:	00 00 00 00 
ffffffff8010897b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108982:	00 00 00 00 
ffffffff80108986:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010898d:	00 00 00 00 
ffffffff80108991:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108998:	00 00 00 00 
ffffffff8010899c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089a3:	00 00 00 00 
ffffffff801089a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ae:	00 00 00 00 
ffffffff801089b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089b9:	00 00 00 00 
ffffffff801089bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089c4:	00 00 00 00 
ffffffff801089c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089cf:	00 00 00 00 
ffffffff801089d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089da:	00 00 00 00 
ffffffff801089de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089e5:	00 00 00 00 
ffffffff801089e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089f0:	00 00 00 00 
ffffffff801089f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089fb:	00 00 00 00 
ffffffff801089ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a06:	00 00 00 00 
ffffffff80108a0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a11:	00 00 00 00 
ffffffff80108a15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a1c:	00 00 00 00 
ffffffff80108a20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a27:	00 00 00 00 
ffffffff80108a2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a32:	00 00 00 00 
ffffffff80108a36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a3d:	00 00 00 00 
ffffffff80108a41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a48:	00 00 00 00 
ffffffff80108a4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a53:	00 00 00 00 
ffffffff80108a57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a5e:	00 00 00 00 
ffffffff80108a62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a69:	00 00 00 00 
ffffffff80108a6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a74:	00 00 00 00 
ffffffff80108a78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a7f:	00 00 00 00 
ffffffff80108a83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a8a:	00 00 00 00 
ffffffff80108a8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a95:	00 00 00 00 
ffffffff80108a99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aa0:	00 00 00 00 
ffffffff80108aa4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aab:	00 00 00 00 
ffffffff80108aaf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ab6:	00 00 00 00 
ffffffff80108aba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ac1:	00 00 00 00 
ffffffff80108ac5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108acc:	00 00 00 00 
ffffffff80108ad0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ad7:	00 00 00 00 
ffffffff80108adb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ae2:	00 00 00 00 
ffffffff80108ae6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aed:	00 00 00 00 
ffffffff80108af1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108af8:	00 00 00 00 
ffffffff80108afc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b03:	00 00 00 00 
ffffffff80108b07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b0e:	00 00 00 00 
ffffffff80108b12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b19:	00 00 00 00 
ffffffff80108b1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b24:	00 00 00 00 
ffffffff80108b28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b2f:	00 00 00 00 
ffffffff80108b33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b3a:	00 00 00 00 
ffffffff80108b3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b45:	00 00 00 00 
ffffffff80108b49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b50:	00 00 00 00 
ffffffff80108b54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b5b:	00 00 00 00 
ffffffff80108b5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b66:	00 00 00 00 
ffffffff80108b6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b71:	00 00 00 00 
ffffffff80108b75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b7c:	00 00 00 00 
ffffffff80108b80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b87:	00 00 00 00 
ffffffff80108b8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b92:	00 00 00 00 
ffffffff80108b96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b9d:	00 00 00 00 
ffffffff80108ba1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ba8:	00 00 00 00 
ffffffff80108bac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bb3:	00 00 00 00 
ffffffff80108bb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bbe:	00 00 00 00 
ffffffff80108bc2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bc9:	00 00 00 00 
ffffffff80108bcd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bd4:	00 00 00 00 
ffffffff80108bd8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bdf:	00 00 00 00 
ffffffff80108be3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bea:	00 00 00 00 
ffffffff80108bee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bf5:	00 00 00 00 
ffffffff80108bf9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c00:	00 00 00 00 
ffffffff80108c04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c0b:	00 00 00 00 
ffffffff80108c0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c16:	00 00 00 00 
ffffffff80108c1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c21:	00 00 00 00 
ffffffff80108c25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c2c:	00 00 00 00 
ffffffff80108c30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c37:	00 00 00 00 
ffffffff80108c3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c42:	00 00 00 00 
ffffffff80108c46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c4d:	00 00 00 00 
ffffffff80108c51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c58:	00 00 00 00 
ffffffff80108c5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c63:	00 00 00 00 
ffffffff80108c67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c6e:	00 00 00 00 
ffffffff80108c72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c79:	00 00 00 00 
ffffffff80108c7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c84:	00 00 00 00 
ffffffff80108c88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c8f:	00 00 00 00 
ffffffff80108c93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c9a:	00 00 00 00 
ffffffff80108c9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ca5:	00 00 00 00 
ffffffff80108ca9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cb0:	00 00 00 00 
ffffffff80108cb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cbb:	00 00 00 00 
ffffffff80108cbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cc6:	00 00 00 00 
ffffffff80108cca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cd1:	00 00 00 00 
ffffffff80108cd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cdc:	00 00 00 00 
ffffffff80108ce0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ce7:	00 00 00 00 
ffffffff80108ceb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cf2:	00 00 00 00 
ffffffff80108cf6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cfd:	00 00 00 00 
ffffffff80108d01:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d08:	00 00 00 00 
ffffffff80108d0c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d13:	00 00 00 00 
ffffffff80108d17:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d1e:	00 00 00 00 
ffffffff80108d22:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d29:	00 00 00 00 
ffffffff80108d2d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d34:	00 00 00 00 
ffffffff80108d38:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d3f:	00 00 00 00 
ffffffff80108d43:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d4a:	00 00 00 00 
ffffffff80108d4e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d55:	00 00 00 00 
ffffffff80108d59:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d60:	00 00 00 00 
ffffffff80108d64:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d6b:	00 00 00 00 
ffffffff80108d6f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d76:	00 00 00 00 
ffffffff80108d7a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d81:	00 00 00 00 
ffffffff80108d85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d8c:	00 00 00 00 
ffffffff80108d90:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d97:	00 00 00 00 
ffffffff80108d9b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108da2:	00 00 00 00 
ffffffff80108da6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dad:	00 00 00 00 
ffffffff80108db1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108db8:	00 00 00 00 
ffffffff80108dbc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dc3:	00 00 00 00 
ffffffff80108dc7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dce:	00 00 00 00 
ffffffff80108dd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dd9:	00 00 00 00 
ffffffff80108ddd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108de4:	00 00 00 00 
ffffffff80108de8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108def:	00 00 00 00 
ffffffff80108df3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dfa:	00 00 00 00 
ffffffff80108dfe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e05:	00 00 00 00 
ffffffff80108e09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e10:	00 00 00 00 
ffffffff80108e14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e1b:	00 00 00 00 
ffffffff80108e1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e26:	00 00 00 00 
ffffffff80108e2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e31:	00 00 00 00 
ffffffff80108e35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e3c:	00 00 00 00 
ffffffff80108e40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e47:	00 00 00 00 
ffffffff80108e4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e52:	00 00 00 00 
ffffffff80108e56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e5d:	00 00 00 00 
ffffffff80108e61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e68:	00 00 00 00 
ffffffff80108e6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e73:	00 00 00 00 
ffffffff80108e77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e7e:	00 00 00 00 
ffffffff80108e82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e89:	00 00 00 00 
ffffffff80108e8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e94:	00 00 00 00 
ffffffff80108e98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e9f:	00 00 00 00 
ffffffff80108ea3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eaa:	00 00 00 00 
ffffffff80108eae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eb5:	00 00 00 00 
ffffffff80108eb9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ec0:	00 00 00 00 
ffffffff80108ec4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ecb:	00 00 00 00 
ffffffff80108ecf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ed6:	00 00 00 00 
ffffffff80108eda:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ee1:	00 00 00 00 
ffffffff80108ee5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eec:	00 00 00 00 
ffffffff80108ef0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ef7:	00 00 00 00 
ffffffff80108efb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f02:	00 00 00 00 
ffffffff80108f06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f0d:	00 00 00 00 
ffffffff80108f11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f18:	00 00 00 00 
ffffffff80108f1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f23:	00 00 00 00 
ffffffff80108f27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f2e:	00 00 00 00 
ffffffff80108f32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f39:	00 00 00 00 
ffffffff80108f3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f44:	00 00 00 00 
ffffffff80108f48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f4f:	00 00 00 00 
ffffffff80108f53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f5a:	00 00 00 00 
ffffffff80108f5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f65:	00 00 00 00 
ffffffff80108f69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f70:	00 00 00 00 
ffffffff80108f74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f7b:	00 00 00 00 
ffffffff80108f7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f86:	00 00 00 00 
ffffffff80108f8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f91:	00 00 00 00 
ffffffff80108f95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f9c:	00 00 00 00 
ffffffff80108fa0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fa7:	00 00 00 00 
ffffffff80108fab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fb2:	00 00 00 00 
ffffffff80108fb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fbd:	00 00 00 00 
ffffffff80108fc1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fc8:	00 00 00 00 
ffffffff80108fcc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fd3:	00 00 00 00 
ffffffff80108fd7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fde:	00 00 00 00 
ffffffff80108fe2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fe9:	00 00 00 00 
ffffffff80108fed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ff4:	00 00 00 00 
ffffffff80108ff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80108fff:	00 

ffffffff80109000 <RME_X64_Kpgt>:
	...

ffffffff8020b800 <__RME_X64_In>:
Input       : ptr_t Port - The port to output to.
Output      : None.
Return      : ptr_t - The data received from that port.
******************************************************************************/
__RME_X64_In:
    PUSHQ               %RDX
ffffffff8020b800:	52                   	push   %rdx
    MOVQ                %RDI,%RDX
ffffffff8020b801:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RAX,%RAX
ffffffff8020b804:	48 89 c0             	mov    %rax,%rax
    INB                 (%DX),%AL
ffffffff8020b807:	ec                   	in     (%dx),%al
    POPQ                %RDX
ffffffff8020b808:	5a                   	pop    %rdx
    RETQ
ffffffff8020b809:	c3                   	ret

ffffffff8020b80a <__RME_X64_Out>:
                 ptr_t Data - The data to send to that port.
Output         : None.
Return         : None.
******************************************************************************/
__RME_X64_Out:
    PUSHQ               %RDX
ffffffff8020b80a:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b80b:	50                   	push   %rax
    MOVQ                %RDI,%RDX
ffffffff8020b80c:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RSI,%RAX
ffffffff8020b80f:	48 89 f0             	mov    %rsi,%rax
    OUTB                %AL,(%DX)
ffffffff8020b812:	ee                   	out    %al,(%dx)
    POPQ                %RAX
ffffffff8020b813:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b814:	5a                   	pop    %rdx
    RETQ
ffffffff8020b815:	c3                   	ret

ffffffff8020b816 <__RME_X64_Read_MSR>:
Input       : ptr_t MSR - The MSR to read.
Output      : None.
Return      : ptr_t - The content of the MSR.
******************************************************************************/
__RME_X64_Read_MSR:
    PUSHQ               %RCX
ffffffff8020b816:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b817:	52                   	push   %rdx
    MOVQ                %RDI,%RCX
ffffffff8020b818:	48 89 f9             	mov    %rdi,%rcx
    XORQ                %RAX,%RAX
ffffffff8020b81b:	48 31 c0             	xor    %rax,%rax
    RDMSR
ffffffff8020b81e:	0f 32                	rdmsr
    SHLQ                $32,%RDX
ffffffff8020b820:	48 c1 e2 20          	shl    $0x20,%rdx
    ADDQ                %RDX,%RAX
ffffffff8020b824:	48 01 d0             	add    %rdx,%rax
    POPQ                %RDX
ffffffff8020b827:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b828:	59                   	pop    %rcx
    RETQ
ffffffff8020b829:	c3                   	ret

ffffffff8020b82a <__RME_X64_Write_MSR>:
              ptr_t Value - The value to write to it.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_MSR:
    PUSHQ               %RCX
ffffffff8020b82a:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b82b:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b82c:	50                   	push   %rax
    MOVQ                %RDI,%RCX
ffffffff8020b82d:	48 89 f9             	mov    %rdi,%rcx
    MOVL                %ESI,%EAX
ffffffff8020b830:	89 f0                	mov    %esi,%eax
    MOVQ                %RSI,%RDX
ffffffff8020b832:	48 89 f2             	mov    %rsi,%rdx
    SHR                 $32,%RDX
ffffffff8020b835:	48 c1 ea 20          	shr    $0x20,%rdx
    WRMSR
ffffffff8020b839:	0f 30                	wrmsr
    POPQ                %RAX
ffffffff8020b83b:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b83c:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b83d:	59                   	pop    %rcx
    RETQ
ffffffff8020b83e:	c3                   	ret

ffffffff8020b83f <__RME_X64_CPU_Local_Get>:
Input       : None.
Output      : None.
Return      : struct RME_CPU_Local* - The CPU-local data structures.
******************************************************************************/
__RME_X64_CPU_Local_Get:
    MOVQ                %GS:(8192-8*3),%RAX
ffffffff8020b83f:	65 48 8b 04 25 e8 1f 	mov    %gs:0x1fe8,%rax
ffffffff8020b846:	00 00 
    RETQ
ffffffff8020b848:	c3                   	ret

ffffffff8020b849 <__RME_X64_CPUID_Get>:
              ptr_t* ECX - The ECX info.
              ptr_t* EDX - The EDX info.
Return      : ptr_t - The maximum number for CPUID instruction.
******************************************************************************/
__RME_X64_CPUID_Get:
    PUSHQ               %R8
ffffffff8020b849:	41 50                	push   %r8
    PUSHQ               %R9
ffffffff8020b84b:	41 51                	push   %r9
    PUSHQ               %RBX
ffffffff8020b84d:	53                   	push   %rbx
    PUSHQ               %RCX
ffffffff8020b84e:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b84f:	52                   	push   %rdx

    MOVQ                %RDI,%RAX
ffffffff8020b850:	48 89 f8             	mov    %rdi,%rax
    MOVQ                %RDX,%R8
ffffffff8020b853:	49 89 d0             	mov    %rdx,%r8
    MOVQ                %RCX,%R9
ffffffff8020b856:	49 89 c9             	mov    %rcx,%r9

    MOVQ                (%RSI),%RBX
ffffffff8020b859:	48 8b 1e             	mov    (%rsi),%rbx
    MOVQ                (%R8),%RCX
ffffffff8020b85c:	49 8b 08             	mov    (%r8),%rcx
    MOVQ                (%R9),%RDX
ffffffff8020b85f:	49 8b 11             	mov    (%r9),%rdx
    CPUID
ffffffff8020b862:	0f a2                	cpuid
    MOVQ                %RBX,(%RSI)
ffffffff8020b864:	48 89 1e             	mov    %rbx,(%rsi)
    MOVQ                %RCX,(%R8)
ffffffff8020b867:	49 89 08             	mov    %rcx,(%r8)
    MOVQ                %RDX,(%R9)
ffffffff8020b86a:	49 89 11             	mov    %rdx,(%r9)

    POPQ                %RDX
ffffffff8020b86d:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b86e:	59                   	pop    %rcx
    POPQ                %RBX
ffffffff8020b86f:	5b                   	pop    %rbx
    POPQ                %R9
ffffffff8020b870:	41 59                	pop    %r9
    POPQ                %R8
ffffffff8020b872:	41 58                	pop    %r8
    RETQ
ffffffff8020b874:	c3                   	ret

ffffffff8020b875 <__RME_X64_GDT_Load>:
Input       : ptr_t* GDTR - The pointer to the GDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_GDT_Load:
    LGDT                (%RDI)
ffffffff8020b875:	0f 01 17             	lgdt   (%rdi)
    RETQ
ffffffff8020b878:	c3                   	ret

ffffffff8020b879 <__RME_X64_IDT_Load>:
Input       : ptr_t* IDTR - The pointer to the IDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_IDT_Load:
    LIDT                (%RDI)
ffffffff8020b879:	0f 01 1f             	lidt   (%rdi)
    RETQ
ffffffff8020b87c:	c3                   	ret

ffffffff8020b87d <__RME_X64_TSS_Load>:
Input       : ptr_t TSS - The TSS's position in GDT.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_TSS_Load:
    LTR                 %DI
ffffffff8020b87d:	0f 00 df             	ltr    %edi
    RETQ
ffffffff8020b880:	c3                   	ret

ffffffff8020b881 <__RME_X64_Comp_Swap>:
              ptr_t New - The new value.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - If successful, 1; else 0.
******************************************************************************/
__RME_X64_Comp_Swap:
    MOVQ                %RSI,%RAX
ffffffff8020b881:	48 89 f0             	mov    %rsi,%rax
    XOR                 %RSI,%RSI
ffffffff8020b884:	48 31 f6             	xor    %rsi,%rsi
    /* In x86, locked instructions act as a fence */
    LOCK CMPXCHGQ       %RDX,(%RDI)
ffffffff8020b887:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
    /* Set the bit if ZF is set */
    SETZ                %SIL
ffffffff8020b88c:	40 0f 94 c6          	sete   %sil
    MOVQ                %RSI,%RAX
ffffffff8020b890:	48 89 f0             	mov    %rsi,%rax
    RETQ
ffffffff8020b893:	c3                   	ret

ffffffff8020b894 <__RME_X64_Fetch_Add>:
              cnt_t Addend - The number to add.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the addition.
******************************************************************************/
__RME_X64_Fetch_Add:
    MOVQ                %RSI,%RAX
ffffffff8020b894:	48 89 f0             	mov    %rsi,%rax
    /* In x86, locked instructions act as a fence */
    LOCK XADDQ          %RAX,(%RDI)
ffffffff8020b897:	f0 48 0f c1 07       	lock xadd %rax,(%rdi)
    RETQ
ffffffff8020b89c:	c3                   	ret

ffffffff8020b89d <__RME_X64_Fetch_And>:
              cnt_t Operand - The number to logic AND with the destination.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the AND operation.
******************************************************************************/
__RME_X64_Fetch_And:
    MOVQ                (%RDI),%RAX
ffffffff8020b89d:	48 8b 07             	mov    (%rdi),%rax
    /* In x86, locked instructions act as a fence */
    LOCK ANDQ           %RSI,(%RDI)
ffffffff8020b8a0:	f0 48 21 37          	lock and %rsi,(%rdi)
    RETQ
ffffffff8020b8a4:	c3                   	ret

ffffffff8020b8a5 <__RME_X64_Write_Release>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_Release:
    MFENCE
ffffffff8020b8a5:	0f ae f0             	mfence
    RETQ
ffffffff8020b8a8:	c3                   	ret

ffffffff8020b8a9 <__RME_X64_Pgt_Set>:
Input       : ptr_t Pgt - The physical address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Pgt_Set:
    MOV                 %RDI,%CR3
ffffffff8020b8a9:	0f 22 df             	mov    %rdi,%cr3
    RETQ
ffffffff8020b8ac:	c3                   	ret

ffffffff8020b8ad <__RME_Disable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Disable_Int:
    /* Disable all interrupts */
    CLI
ffffffff8020b8ad:	fa                   	cli
    RETQ
ffffffff8020b8ae:	c3                   	ret

ffffffff8020b8af <__RME_Enable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enable_Int:
    /* Enable all interrupts */
    STI
ffffffff8020b8af:	fb                   	sti
    RETQ
ffffffff8020b8b0:	c3                   	ret

ffffffff8020b8b1 <__RME_X64_Halt>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Halt:
    /* Wait for interrupt */
    HLT
ffffffff8020b8b1:	f4                   	hlt
    RETQ
ffffffff8020b8b2:	c3                   	ret

ffffffff8020b8b3 <_RME_Kmain>:
Input       : ptr_t Stack - The stack address to set SP to.
Output      : None.
Return      : None.
******************************************************************************/
_RME_Kmain:
    MOVQ                %RDI,%RSP
ffffffff8020b8b3:	48 89 fc             	mov    %rdi,%rsp
    JMP                 RME_Kmain
ffffffff8020b8b6:	e9 b5 2b 00 00       	jmp    ffffffff8020e470 <RME_Kmain>

ffffffff8020b8bb <__RME_X64_MSB_Get>:
Input       : ptr_t Val - The value.
Output      : None.
Return      : ptr_t - The MSB position.
******************************************************************************/
__RME_X64_MSB_Get:
    BSRQ                %RDI,%RAX
ffffffff8020b8bb:	48 0f bd c7          	bsr    %rdi,%rax
    RETQ
ffffffff8020b8bf:	c3                   	ret

ffffffff8020b8c0 <__RME_Enter_User_Mode>:
              ptr_t CPUID - The CPUID.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enter_User_Mode:
    MOVQ                %RDI,%RCX           /* Entry */
ffffffff8020b8c0:	48 89 f9             	mov    %rdi,%rcx
    MOVQ                %RSI,%RSP           /* Stack */
ffffffff8020b8c3:	48 89 f4             	mov    %rsi,%rsp
    MOVQ                $0x3200,%R11        /* Flags - IOPL 3, IF */
ffffffff8020b8c6:	49 c7 c3 00 32 00 00 	mov    $0x3200,%r11
    MOVQ                %RDX,%RDI           /* CPUID */
ffffffff8020b8cd:	48 89 d7             	mov    %rdx,%rdi
    SYSRETQ
ffffffff8020b8d0:	48 0f 07             	sysretq

ffffffff8020b8d3 <__RME_X64_FAULT_DE_Handler>:
    PUSHQ               $\REASON
    JMP                 Fault_Handler
.endm

/* Fault handlers */
FAULT_HANDLER NAME=__RME_X64_FAULT_DE_Handler ERRCODE=0 REASON=0
ffffffff8020b8d3:	0f 01 f8             	swapgs
ffffffff8020b8d6:	6a 00                	push   $0x0
ffffffff8020b8d8:	6a 00                	push   $0x0
ffffffff8020b8da:	e9 a6 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8df <__RME_X64_TRAP_DB_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_DB_Handler ERRCODE=0 REASON=1
ffffffff8020b8df:	0f 01 f8             	swapgs
ffffffff8020b8e2:	6a 00                	push   $0x0
ffffffff8020b8e4:	6a 01                	push   $0x1
ffffffff8020b8e6:	e9 9a 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8eb <__RME_X64_INT_NMI_Handler>:
FAULT_HANDLER NAME=__RME_X64_INT_NMI_Handler ERRCODE=0 REASON=2
ffffffff8020b8eb:	0f 01 f8             	swapgs
ffffffff8020b8ee:	6a 00                	push   $0x0
ffffffff8020b8f0:	6a 02                	push   $0x2
ffffffff8020b8f2:	e9 8e 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8f7 <__RME_X64_TRAP_BP_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_BP_Handler ERRCODE=0 REASON=3
ffffffff8020b8f7:	0f 01 f8             	swapgs
ffffffff8020b8fa:	6a 00                	push   $0x0
ffffffff8020b8fc:	6a 03                	push   $0x3
ffffffff8020b8fe:	e9 82 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b903 <__RME_X64_TRAP_OF_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_OF_Handler ERRCODE=0 REASON=4
ffffffff8020b903:	0f 01 f8             	swapgs
ffffffff8020b906:	6a 00                	push   $0x0
ffffffff8020b908:	6a 04                	push   $0x4
ffffffff8020b90a:	eb 79                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b90c <__RME_X64_FAULT_BR_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_BR_Handler ERRCODE=0 REASON=5
ffffffff8020b90c:	0f 01 f8             	swapgs
ffffffff8020b90f:	6a 00                	push   $0x0
ffffffff8020b911:	6a 05                	push   $0x5
ffffffff8020b913:	eb 70                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b915 <__RME_X64_FAULT_UD_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_UD_Handler ERRCODE=0 REASON=6
ffffffff8020b915:	0f 01 f8             	swapgs
ffffffff8020b918:	6a 00                	push   $0x0
ffffffff8020b91a:	6a 06                	push   $0x6
ffffffff8020b91c:	eb 67                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b91e <__RME_X64_FAULT_NM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NM_Handler ERRCODE=0 REASON=7
ffffffff8020b91e:	0f 01 f8             	swapgs
ffffffff8020b921:	6a 00                	push   $0x0
ffffffff8020b923:	6a 07                	push   $0x7
ffffffff8020b925:	eb 5e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b927 <__RME_X64_ABORT_DF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_DF_Handler ERRCODE=1 REASON=8
ffffffff8020b927:	0f 01 f8             	swapgs
ffffffff8020b92a:	6a 08                	push   $0x8
ffffffff8020b92c:	eb 57                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b92e <__RME_X64_ABORT_OLD_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_OLD_MF_Handler ERRCODE=0 REASON=9
ffffffff8020b92e:	0f 01 f8             	swapgs
ffffffff8020b931:	6a 00                	push   $0x0
ffffffff8020b933:	6a 09                	push   $0x9
ffffffff8020b935:	eb 4e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b937 <__RME_X64_FAULT_TS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_TS_Handler ERRCODE=1 REASON=10
ffffffff8020b937:	0f 01 f8             	swapgs
ffffffff8020b93a:	6a 0a                	push   $0xa
ffffffff8020b93c:	eb 47                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b93e <__RME_X64_FAULT_NP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NP_Handler ERRCODE=1 REASON=11
ffffffff8020b93e:	0f 01 f8             	swapgs
ffffffff8020b941:	6a 0b                	push   $0xb
ffffffff8020b943:	eb 40                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b945 <__RME_X64_FAULT_SS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_SS_Handler ERRCODE=1 REASON=12
ffffffff8020b945:	0f 01 f8             	swapgs
ffffffff8020b948:	6a 0c                	push   $0xc
ffffffff8020b94a:	eb 39                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b94c <__RME_X64_FAULT_GP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_GP_Handler ERRCODE=1 REASON=13
ffffffff8020b94c:	0f 01 f8             	swapgs
ffffffff8020b94f:	6a 0d                	push   $0xd
ffffffff8020b951:	eb 32                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b953 <__RME_X64_FAULT_PF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_PF_Handler ERRCODE=1 REASON=14
ffffffff8020b953:	0f 01 f8             	swapgs
ffffffff8020b956:	6a 0e                	push   $0xe
ffffffff8020b958:	eb 2b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b95a <__RME_X64_FAULT_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_MF_Handler ERRCODE=0 REASON=16
ffffffff8020b95a:	0f 01 f8             	swapgs
ffffffff8020b95d:	6a 00                	push   $0x0
ffffffff8020b95f:	6a 10                	push   $0x10
ffffffff8020b961:	eb 22                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b963 <__RME_X64_FAULT_AC_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_AC_Handler ERRCODE=1 REASON=17
ffffffff8020b963:	0f 01 f8             	swapgs
ffffffff8020b966:	6a 11                	push   $0x11
ffffffff8020b968:	eb 1b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b96a <__RME_X64_ABORT_MC_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_MC_Handler ERRCODE=0 REASON=18
ffffffff8020b96a:	0f 01 f8             	swapgs
ffffffff8020b96d:	6a 00                	push   $0x0
ffffffff8020b96f:	6a 12                	push   $0x12
ffffffff8020b971:	eb 12                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b973 <__RME_X64_FAULT_XM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_XM_Handler ERRCODE=0 REASON=19
ffffffff8020b973:	0f 01 f8             	swapgs
ffffffff8020b976:	6a 00                	push   $0x0
ffffffff8020b978:	6a 13                	push   $0x13
ffffffff8020b97a:	eb 09                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b97c <__RME_X64_FAULT_VE_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_VE_Handler ERRCODE=0 REASON=20
ffffffff8020b97c:	0f 01 f8             	swapgs
ffffffff8020b97f:	6a 00                	push   $0x0
ffffffff8020b981:	6a 14                	push   $0x14
ffffffff8020b983:	eb 00                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b985 <Fault_Handler>:
/* Common function body for fault handlers - reduce I-Cache usage */
Fault_Handler:
    SAVE_GP_REGS
ffffffff8020b985:	41 57                	push   %r15
ffffffff8020b987:	41 56                	push   %r14
ffffffff8020b989:	41 55                	push   %r13
ffffffff8020b98b:	41 54                	push   %r12
ffffffff8020b98d:	41 53                	push   %r11
ffffffff8020b98f:	41 52                	push   %r10
ffffffff8020b991:	41 51                	push   %r9
ffffffff8020b993:	41 50                	push   %r8
ffffffff8020b995:	55                   	push   %rbp
ffffffff8020b996:	57                   	push   %rdi
ffffffff8020b997:	56                   	push   %rsi
ffffffff8020b998:	52                   	push   %rdx
ffffffff8020b999:	51                   	push   %rcx
ffffffff8020b99a:	53                   	push   %rbx
ffffffff8020b99b:	50                   	push   %rax
ffffffff8020b99c:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020b9a0:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020b9a2:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020b9a5:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Fault_Handler
ffffffff8020b9aa:	e8 d1 f0 00 00       	call   ffffffff8021aa80 <__RME_X64_Fault_Handler>

    RESTORE_GP_REGS
ffffffff8020b9af:	0f 01 f8             	swapgs
ffffffff8020b9b2:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020b9b6:	8e d8                	mov    %eax,%ds
ffffffff8020b9b8:	58                   	pop    %rax
ffffffff8020b9b9:	5b                   	pop    %rbx
ffffffff8020b9ba:	59                   	pop    %rcx
ffffffff8020b9bb:	5a                   	pop    %rdx
ffffffff8020b9bc:	5e                   	pop    %rsi
ffffffff8020b9bd:	5f                   	pop    %rdi
ffffffff8020b9be:	5d                   	pop    %rbp
ffffffff8020b9bf:	41 58                	pop    %r8
ffffffff8020b9c1:	41 59                	pop    %r9
ffffffff8020b9c3:	41 5a                	pop    %r10
ffffffff8020b9c5:	41 5b                	pop    %r11
ffffffff8020b9c7:	41 5c                	pop    %r12
ffffffff8020b9c9:	41 5d                	pop    %r13
ffffffff8020b9cb:	41 5e                	pop    %r14
ffffffff8020b9cd:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020b9cf:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020b9d3:	48 cf                	iretq

ffffffff8020b9d5 <__RME_X64_USER32_Handler>:
    PUSHQ               $0                  /* Make a dummy error code */
    PUSHQ               $\VECTNUM           /* Interrupt number */
    JMP                 User_Handler
.endm
/* User handlers */
USER_HANDLER NAME=__RME_X64_USER32_Handler VECTNUM=32
ffffffff8020b9d5:	0f 01 f8             	swapgs
ffffffff8020b9d8:	6a 00                	push   $0x0
ffffffff8020b9da:	6a 20                	push   $0x20
ffffffff8020b9dc:	e9 d3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9e1 <__RME_X64_USER33_Handler>:
USER_HANDLER NAME=__RME_X64_USER33_Handler VECTNUM=33
ffffffff8020b9e1:	0f 01 f8             	swapgs
ffffffff8020b9e4:	6a 00                	push   $0x0
ffffffff8020b9e6:	6a 21                	push   $0x21
ffffffff8020b9e8:	e9 c7 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9ed <__RME_X64_USER34_Handler>:
USER_HANDLER NAME=__RME_X64_USER34_Handler VECTNUM=34
ffffffff8020b9ed:	0f 01 f8             	swapgs
ffffffff8020b9f0:	6a 00                	push   $0x0
ffffffff8020b9f2:	6a 22                	push   $0x22
ffffffff8020b9f4:	e9 bb 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9f9 <__RME_X64_USER35_Handler>:
USER_HANDLER NAME=__RME_X64_USER35_Handler VECTNUM=35
ffffffff8020b9f9:	0f 01 f8             	swapgs
ffffffff8020b9fc:	6a 00                	push   $0x0
ffffffff8020b9fe:	6a 23                	push   $0x23
ffffffff8020ba00:	e9 af 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba05 <__RME_X64_USER36_Handler>:
USER_HANDLER NAME=__RME_X64_USER36_Handler VECTNUM=36
ffffffff8020ba05:	0f 01 f8             	swapgs
ffffffff8020ba08:	6a 00                	push   $0x0
ffffffff8020ba0a:	6a 24                	push   $0x24
ffffffff8020ba0c:	e9 a3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba11 <__RME_X64_USER37_Handler>:
USER_HANDLER NAME=__RME_X64_USER37_Handler VECTNUM=37
ffffffff8020ba11:	0f 01 f8             	swapgs
ffffffff8020ba14:	6a 00                	push   $0x0
ffffffff8020ba16:	6a 25                	push   $0x25
ffffffff8020ba18:	e9 97 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba1d <__RME_X64_USER38_Handler>:
USER_HANDLER NAME=__RME_X64_USER38_Handler VECTNUM=38
ffffffff8020ba1d:	0f 01 f8             	swapgs
ffffffff8020ba20:	6a 00                	push   $0x0
ffffffff8020ba22:	6a 26                	push   $0x26
ffffffff8020ba24:	e9 8b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba29 <__RME_X64_USER39_Handler>:
USER_HANDLER NAME=__RME_X64_USER39_Handler VECTNUM=39
ffffffff8020ba29:	0f 01 f8             	swapgs
ffffffff8020ba2c:	6a 00                	push   $0x0
ffffffff8020ba2e:	6a 27                	push   $0x27
ffffffff8020ba30:	e9 7f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba35 <__RME_X64_USER40_Handler>:

USER_HANDLER NAME=__RME_X64_USER40_Handler VECTNUM=40
ffffffff8020ba35:	0f 01 f8             	swapgs
ffffffff8020ba38:	6a 00                	push   $0x0
ffffffff8020ba3a:	6a 28                	push   $0x28
ffffffff8020ba3c:	e9 73 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba41 <__RME_X64_USER41_Handler>:
USER_HANDLER NAME=__RME_X64_USER41_Handler VECTNUM=41
ffffffff8020ba41:	0f 01 f8             	swapgs
ffffffff8020ba44:	6a 00                	push   $0x0
ffffffff8020ba46:	6a 29                	push   $0x29
ffffffff8020ba48:	e9 67 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba4d <__RME_X64_USER42_Handler>:
USER_HANDLER NAME=__RME_X64_USER42_Handler VECTNUM=42
ffffffff8020ba4d:	0f 01 f8             	swapgs
ffffffff8020ba50:	6a 00                	push   $0x0
ffffffff8020ba52:	6a 2a                	push   $0x2a
ffffffff8020ba54:	e9 5b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba59 <__RME_X64_USER43_Handler>:
USER_HANDLER NAME=__RME_X64_USER43_Handler VECTNUM=43
ffffffff8020ba59:	0f 01 f8             	swapgs
ffffffff8020ba5c:	6a 00                	push   $0x0
ffffffff8020ba5e:	6a 2b                	push   $0x2b
ffffffff8020ba60:	e9 4f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba65 <__RME_X64_USER44_Handler>:
USER_HANDLER NAME=__RME_X64_USER44_Handler VECTNUM=44
ffffffff8020ba65:	0f 01 f8             	swapgs
ffffffff8020ba68:	6a 00                	push   $0x0
ffffffff8020ba6a:	6a 2c                	push   $0x2c
ffffffff8020ba6c:	e9 43 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba71 <__RME_X64_USER45_Handler>:
USER_HANDLER NAME=__RME_X64_USER45_Handler VECTNUM=45
ffffffff8020ba71:	0f 01 f8             	swapgs
ffffffff8020ba74:	6a 00                	push   $0x0
ffffffff8020ba76:	6a 2d                	push   $0x2d
ffffffff8020ba78:	e9 37 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba7d <__RME_X64_USER46_Handler>:
USER_HANDLER NAME=__RME_X64_USER46_Handler VECTNUM=46
ffffffff8020ba7d:	0f 01 f8             	swapgs
ffffffff8020ba80:	6a 00                	push   $0x0
ffffffff8020ba82:	6a 2e                	push   $0x2e
ffffffff8020ba84:	e9 2b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba89 <__RME_X64_USER47_Handler>:
USER_HANDLER NAME=__RME_X64_USER47_Handler VECTNUM=47
ffffffff8020ba89:	0f 01 f8             	swapgs
ffffffff8020ba8c:	6a 00                	push   $0x0
ffffffff8020ba8e:	6a 2f                	push   $0x2f
ffffffff8020ba90:	e9 1f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba95 <__RME_X64_USER48_Handler>:
USER_HANDLER NAME=__RME_X64_USER48_Handler VECTNUM=48
ffffffff8020ba95:	0f 01 f8             	swapgs
ffffffff8020ba98:	6a 00                	push   $0x0
ffffffff8020ba9a:	6a 30                	push   $0x30
ffffffff8020ba9c:	e9 13 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baa1 <__RME_X64_USER49_Handler>:
USER_HANDLER NAME=__RME_X64_USER49_Handler VECTNUM=49
ffffffff8020baa1:	0f 01 f8             	swapgs
ffffffff8020baa4:	6a 00                	push   $0x0
ffffffff8020baa6:	6a 31                	push   $0x31
ffffffff8020baa8:	e9 07 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baad <__RME_X64_USER50_Handler>:

USER_HANDLER NAME=__RME_X64_USER50_Handler VECTNUM=50
ffffffff8020baad:	0f 01 f8             	swapgs
ffffffff8020bab0:	6a 00                	push   $0x0
ffffffff8020bab2:	6a 32                	push   $0x32
ffffffff8020bab4:	e9 fb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bab9 <__RME_X64_USER51_Handler>:
USER_HANDLER NAME=__RME_X64_USER51_Handler VECTNUM=51
ffffffff8020bab9:	0f 01 f8             	swapgs
ffffffff8020babc:	6a 00                	push   $0x0
ffffffff8020babe:	6a 33                	push   $0x33
ffffffff8020bac0:	e9 ef 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bac5 <__RME_X64_USER52_Handler>:
USER_HANDLER NAME=__RME_X64_USER52_Handler VECTNUM=52
ffffffff8020bac5:	0f 01 f8             	swapgs
ffffffff8020bac8:	6a 00                	push   $0x0
ffffffff8020baca:	6a 34                	push   $0x34
ffffffff8020bacc:	e9 e3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bad1 <__RME_X64_USER53_Handler>:
USER_HANDLER NAME=__RME_X64_USER53_Handler VECTNUM=53
ffffffff8020bad1:	0f 01 f8             	swapgs
ffffffff8020bad4:	6a 00                	push   $0x0
ffffffff8020bad6:	6a 35                	push   $0x35
ffffffff8020bad8:	e9 d7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020badd <__RME_X64_USER54_Handler>:
USER_HANDLER NAME=__RME_X64_USER54_Handler VECTNUM=54
ffffffff8020badd:	0f 01 f8             	swapgs
ffffffff8020bae0:	6a 00                	push   $0x0
ffffffff8020bae2:	6a 36                	push   $0x36
ffffffff8020bae4:	e9 cb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bae9 <__RME_X64_USER55_Handler>:
USER_HANDLER NAME=__RME_X64_USER55_Handler VECTNUM=55
ffffffff8020bae9:	0f 01 f8             	swapgs
ffffffff8020baec:	6a 00                	push   $0x0
ffffffff8020baee:	6a 37                	push   $0x37
ffffffff8020baf0:	e9 bf 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baf5 <__RME_X64_USER56_Handler>:
USER_HANDLER NAME=__RME_X64_USER56_Handler VECTNUM=56
ffffffff8020baf5:	0f 01 f8             	swapgs
ffffffff8020baf8:	6a 00                	push   $0x0
ffffffff8020bafa:	6a 38                	push   $0x38
ffffffff8020bafc:	e9 b3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb01 <__RME_X64_USER57_Handler>:
USER_HANDLER NAME=__RME_X64_USER57_Handler VECTNUM=57
ffffffff8020bb01:	0f 01 f8             	swapgs
ffffffff8020bb04:	6a 00                	push   $0x0
ffffffff8020bb06:	6a 39                	push   $0x39
ffffffff8020bb08:	e9 a7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb0d <__RME_X64_USER58_Handler>:
USER_HANDLER NAME=__RME_X64_USER58_Handler VECTNUM=58
ffffffff8020bb0d:	0f 01 f8             	swapgs
ffffffff8020bb10:	6a 00                	push   $0x0
ffffffff8020bb12:	6a 3a                	push   $0x3a
ffffffff8020bb14:	e9 9b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb19 <__RME_X64_USER59_Handler>:
USER_HANDLER NAME=__RME_X64_USER59_Handler VECTNUM=59
ffffffff8020bb19:	0f 01 f8             	swapgs
ffffffff8020bb1c:	6a 00                	push   $0x0
ffffffff8020bb1e:	6a 3b                	push   $0x3b
ffffffff8020bb20:	e9 8f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb25 <__RME_X64_USER60_Handler>:

USER_HANDLER NAME=__RME_X64_USER60_Handler VECTNUM=60
ffffffff8020bb25:	0f 01 f8             	swapgs
ffffffff8020bb28:	6a 00                	push   $0x0
ffffffff8020bb2a:	6a 3c                	push   $0x3c
ffffffff8020bb2c:	e9 83 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb31 <__RME_X64_USER61_Handler>:
USER_HANDLER NAME=__RME_X64_USER61_Handler VECTNUM=61
ffffffff8020bb31:	0f 01 f8             	swapgs
ffffffff8020bb34:	6a 00                	push   $0x0
ffffffff8020bb36:	6a 3d                	push   $0x3d
ffffffff8020bb38:	e9 77 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb3d <__RME_X64_USER62_Handler>:
USER_HANDLER NAME=__RME_X64_USER62_Handler VECTNUM=62
ffffffff8020bb3d:	0f 01 f8             	swapgs
ffffffff8020bb40:	6a 00                	push   $0x0
ffffffff8020bb42:	6a 3e                	push   $0x3e
ffffffff8020bb44:	e9 6b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb49 <__RME_X64_USER63_Handler>:
USER_HANDLER NAME=__RME_X64_USER63_Handler VECTNUM=63
ffffffff8020bb49:	0f 01 f8             	swapgs
ffffffff8020bb4c:	6a 00                	push   $0x0
ffffffff8020bb4e:	6a 3f                	push   $0x3f
ffffffff8020bb50:	e9 5f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb55 <__RME_X64_USER64_Handler>:
USER_HANDLER NAME=__RME_X64_USER64_Handler VECTNUM=64
ffffffff8020bb55:	0f 01 f8             	swapgs
ffffffff8020bb58:	6a 00                	push   $0x0
ffffffff8020bb5a:	6a 40                	push   $0x40
ffffffff8020bb5c:	e9 53 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb61 <__RME_X64_USER65_Handler>:
USER_HANDLER NAME=__RME_X64_USER65_Handler VECTNUM=65
ffffffff8020bb61:	0f 01 f8             	swapgs
ffffffff8020bb64:	6a 00                	push   $0x0
ffffffff8020bb66:	6a 41                	push   $0x41
ffffffff8020bb68:	e9 47 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb6d <__RME_X64_USER66_Handler>:
USER_HANDLER NAME=__RME_X64_USER66_Handler VECTNUM=66
ffffffff8020bb6d:	0f 01 f8             	swapgs
ffffffff8020bb70:	6a 00                	push   $0x0
ffffffff8020bb72:	6a 42                	push   $0x42
ffffffff8020bb74:	e9 3b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb79 <__RME_X64_USER67_Handler>:
USER_HANDLER NAME=__RME_X64_USER67_Handler VECTNUM=67
ffffffff8020bb79:	0f 01 f8             	swapgs
ffffffff8020bb7c:	6a 00                	push   $0x0
ffffffff8020bb7e:	6a 43                	push   $0x43
ffffffff8020bb80:	e9 2f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb85 <__RME_X64_USER68_Handler>:
USER_HANDLER NAME=__RME_X64_USER68_Handler VECTNUM=68
ffffffff8020bb85:	0f 01 f8             	swapgs
ffffffff8020bb88:	6a 00                	push   $0x0
ffffffff8020bb8a:	6a 44                	push   $0x44
ffffffff8020bb8c:	e9 23 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb91 <__RME_X64_USER69_Handler>:
USER_HANDLER NAME=__RME_X64_USER69_Handler VECTNUM=69
ffffffff8020bb91:	0f 01 f8             	swapgs
ffffffff8020bb94:	6a 00                	push   $0x0
ffffffff8020bb96:	6a 45                	push   $0x45
ffffffff8020bb98:	e9 17 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb9d <__RME_X64_USER70_Handler>:

USER_HANDLER NAME=__RME_X64_USER70_Handler VECTNUM=70
ffffffff8020bb9d:	0f 01 f8             	swapgs
ffffffff8020bba0:	6a 00                	push   $0x0
ffffffff8020bba2:	6a 46                	push   $0x46
ffffffff8020bba4:	e9 0b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bba9 <__RME_X64_USER71_Handler>:
USER_HANDLER NAME=__RME_X64_USER71_Handler VECTNUM=71
ffffffff8020bba9:	0f 01 f8             	swapgs
ffffffff8020bbac:	6a 00                	push   $0x0
ffffffff8020bbae:	6a 47                	push   $0x47
ffffffff8020bbb0:	e9 ff 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbb5 <__RME_X64_USER72_Handler>:
USER_HANDLER NAME=__RME_X64_USER72_Handler VECTNUM=72
ffffffff8020bbb5:	0f 01 f8             	swapgs
ffffffff8020bbb8:	6a 00                	push   $0x0
ffffffff8020bbba:	6a 48                	push   $0x48
ffffffff8020bbbc:	e9 f3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbc1 <__RME_X64_USER73_Handler>:
USER_HANDLER NAME=__RME_X64_USER73_Handler VECTNUM=73
ffffffff8020bbc1:	0f 01 f8             	swapgs
ffffffff8020bbc4:	6a 00                	push   $0x0
ffffffff8020bbc6:	6a 49                	push   $0x49
ffffffff8020bbc8:	e9 e7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbcd <__RME_X64_USER74_Handler>:
USER_HANDLER NAME=__RME_X64_USER74_Handler VECTNUM=74
ffffffff8020bbcd:	0f 01 f8             	swapgs
ffffffff8020bbd0:	6a 00                	push   $0x0
ffffffff8020bbd2:	6a 4a                	push   $0x4a
ffffffff8020bbd4:	e9 db 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbd9 <__RME_X64_USER75_Handler>:
USER_HANDLER NAME=__RME_X64_USER75_Handler VECTNUM=75
ffffffff8020bbd9:	0f 01 f8             	swapgs
ffffffff8020bbdc:	6a 00                	push   $0x0
ffffffff8020bbde:	6a 4b                	push   $0x4b
ffffffff8020bbe0:	e9 cf 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbe5 <__RME_X64_USER76_Handler>:
USER_HANDLER NAME=__RME_X64_USER76_Handler VECTNUM=76
ffffffff8020bbe5:	0f 01 f8             	swapgs
ffffffff8020bbe8:	6a 00                	push   $0x0
ffffffff8020bbea:	6a 4c                	push   $0x4c
ffffffff8020bbec:	e9 c3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbf1 <__RME_X64_USER77_Handler>:
USER_HANDLER NAME=__RME_X64_USER77_Handler VECTNUM=77
ffffffff8020bbf1:	0f 01 f8             	swapgs
ffffffff8020bbf4:	6a 00                	push   $0x0
ffffffff8020bbf6:	6a 4d                	push   $0x4d
ffffffff8020bbf8:	e9 b7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbfd <__RME_X64_USER78_Handler>:
USER_HANDLER NAME=__RME_X64_USER78_Handler VECTNUM=78
ffffffff8020bbfd:	0f 01 f8             	swapgs
ffffffff8020bc00:	6a 00                	push   $0x0
ffffffff8020bc02:	6a 4e                	push   $0x4e
ffffffff8020bc04:	e9 ab 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc09 <__RME_X64_USER79_Handler>:
USER_HANDLER NAME=__RME_X64_USER79_Handler VECTNUM=79
ffffffff8020bc09:	0f 01 f8             	swapgs
ffffffff8020bc0c:	6a 00                	push   $0x0
ffffffff8020bc0e:	6a 4f                	push   $0x4f
ffffffff8020bc10:	e9 9f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc15 <__RME_X64_USER80_Handler>:

USER_HANDLER NAME=__RME_X64_USER80_Handler VECTNUM=80
ffffffff8020bc15:	0f 01 f8             	swapgs
ffffffff8020bc18:	6a 00                	push   $0x0
ffffffff8020bc1a:	6a 50                	push   $0x50
ffffffff8020bc1c:	e9 93 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc21 <__RME_X64_USER81_Handler>:
USER_HANDLER NAME=__RME_X64_USER81_Handler VECTNUM=81
ffffffff8020bc21:	0f 01 f8             	swapgs
ffffffff8020bc24:	6a 00                	push   $0x0
ffffffff8020bc26:	6a 51                	push   $0x51
ffffffff8020bc28:	e9 87 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc2d <__RME_X64_USER82_Handler>:
USER_HANDLER NAME=__RME_X64_USER82_Handler VECTNUM=82
ffffffff8020bc2d:	0f 01 f8             	swapgs
ffffffff8020bc30:	6a 00                	push   $0x0
ffffffff8020bc32:	6a 52                	push   $0x52
ffffffff8020bc34:	e9 7b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc39 <__RME_X64_USER83_Handler>:
USER_HANDLER NAME=__RME_X64_USER83_Handler VECTNUM=83
ffffffff8020bc39:	0f 01 f8             	swapgs
ffffffff8020bc3c:	6a 00                	push   $0x0
ffffffff8020bc3e:	6a 53                	push   $0x53
ffffffff8020bc40:	e9 6f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc45 <__RME_X64_USER84_Handler>:
USER_HANDLER NAME=__RME_X64_USER84_Handler VECTNUM=84
ffffffff8020bc45:	0f 01 f8             	swapgs
ffffffff8020bc48:	6a 00                	push   $0x0
ffffffff8020bc4a:	6a 54                	push   $0x54
ffffffff8020bc4c:	e9 63 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc51 <__RME_X64_USER85_Handler>:
USER_HANDLER NAME=__RME_X64_USER85_Handler VECTNUM=85
ffffffff8020bc51:	0f 01 f8             	swapgs
ffffffff8020bc54:	6a 00                	push   $0x0
ffffffff8020bc56:	6a 55                	push   $0x55
ffffffff8020bc58:	e9 57 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc5d <__RME_X64_USER86_Handler>:
USER_HANDLER NAME=__RME_X64_USER86_Handler VECTNUM=86
ffffffff8020bc5d:	0f 01 f8             	swapgs
ffffffff8020bc60:	6a 00                	push   $0x0
ffffffff8020bc62:	6a 56                	push   $0x56
ffffffff8020bc64:	e9 4b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc69 <__RME_X64_USER87_Handler>:
USER_HANDLER NAME=__RME_X64_USER87_Handler VECTNUM=87
ffffffff8020bc69:	0f 01 f8             	swapgs
ffffffff8020bc6c:	6a 00                	push   $0x0
ffffffff8020bc6e:	6a 57                	push   $0x57
ffffffff8020bc70:	e9 3f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc75 <__RME_X64_USER88_Handler>:
USER_HANDLER NAME=__RME_X64_USER88_Handler VECTNUM=88
ffffffff8020bc75:	0f 01 f8             	swapgs
ffffffff8020bc78:	6a 00                	push   $0x0
ffffffff8020bc7a:	6a 58                	push   $0x58
ffffffff8020bc7c:	e9 33 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc81 <__RME_X64_USER89_Handler>:
USER_HANDLER NAME=__RME_X64_USER89_Handler VECTNUM=89
ffffffff8020bc81:	0f 01 f8             	swapgs
ffffffff8020bc84:	6a 00                	push   $0x0
ffffffff8020bc86:	6a 59                	push   $0x59
ffffffff8020bc88:	e9 27 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc8d <__RME_X64_USER90_Handler>:

USER_HANDLER NAME=__RME_X64_USER90_Handler VECTNUM=90
ffffffff8020bc8d:	0f 01 f8             	swapgs
ffffffff8020bc90:	6a 00                	push   $0x0
ffffffff8020bc92:	6a 5a                	push   $0x5a
ffffffff8020bc94:	e9 1b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc99 <__RME_X64_USER91_Handler>:
USER_HANDLER NAME=__RME_X64_USER91_Handler VECTNUM=91
ffffffff8020bc99:	0f 01 f8             	swapgs
ffffffff8020bc9c:	6a 00                	push   $0x0
ffffffff8020bc9e:	6a 5b                	push   $0x5b
ffffffff8020bca0:	e9 0f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bca5 <__RME_X64_USER92_Handler>:
USER_HANDLER NAME=__RME_X64_USER92_Handler VECTNUM=92
ffffffff8020bca5:	0f 01 f8             	swapgs
ffffffff8020bca8:	6a 00                	push   $0x0
ffffffff8020bcaa:	6a 5c                	push   $0x5c
ffffffff8020bcac:	e9 03 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcb1 <__RME_X64_USER93_Handler>:
USER_HANDLER NAME=__RME_X64_USER93_Handler VECTNUM=93
ffffffff8020bcb1:	0f 01 f8             	swapgs
ffffffff8020bcb4:	6a 00                	push   $0x0
ffffffff8020bcb6:	6a 5d                	push   $0x5d
ffffffff8020bcb8:	e9 f7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcbd <__RME_X64_USER94_Handler>:
USER_HANDLER NAME=__RME_X64_USER94_Handler VECTNUM=94
ffffffff8020bcbd:	0f 01 f8             	swapgs
ffffffff8020bcc0:	6a 00                	push   $0x0
ffffffff8020bcc2:	6a 5e                	push   $0x5e
ffffffff8020bcc4:	e9 eb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcc9 <__RME_X64_USER95_Handler>:
USER_HANDLER NAME=__RME_X64_USER95_Handler VECTNUM=95
ffffffff8020bcc9:	0f 01 f8             	swapgs
ffffffff8020bccc:	6a 00                	push   $0x0
ffffffff8020bcce:	6a 5f                	push   $0x5f
ffffffff8020bcd0:	e9 df 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcd5 <__RME_X64_USER96_Handler>:
USER_HANDLER NAME=__RME_X64_USER96_Handler VECTNUM=96
ffffffff8020bcd5:	0f 01 f8             	swapgs
ffffffff8020bcd8:	6a 00                	push   $0x0
ffffffff8020bcda:	6a 60                	push   $0x60
ffffffff8020bcdc:	e9 d3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bce1 <__RME_X64_USER97_Handler>:
USER_HANDLER NAME=__RME_X64_USER97_Handler VECTNUM=97
ffffffff8020bce1:	0f 01 f8             	swapgs
ffffffff8020bce4:	6a 00                	push   $0x0
ffffffff8020bce6:	6a 61                	push   $0x61
ffffffff8020bce8:	e9 c7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bced <__RME_X64_USER98_Handler>:
USER_HANDLER NAME=__RME_X64_USER98_Handler VECTNUM=98
ffffffff8020bced:	0f 01 f8             	swapgs
ffffffff8020bcf0:	6a 00                	push   $0x0
ffffffff8020bcf2:	6a 62                	push   $0x62
ffffffff8020bcf4:	e9 bb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcf9 <__RME_X64_USER99_Handler>:
USER_HANDLER NAME=__RME_X64_USER99_Handler VECTNUM=99
ffffffff8020bcf9:	0f 01 f8             	swapgs
ffffffff8020bcfc:	6a 00                	push   $0x0
ffffffff8020bcfe:	6a 63                	push   $0x63
ffffffff8020bd00:	e9 af 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd05 <__RME_X64_USER100_Handler>:

USER_HANDLER NAME=__RME_X64_USER100_Handler VECTNUM=100
ffffffff8020bd05:	0f 01 f8             	swapgs
ffffffff8020bd08:	6a 00                	push   $0x0
ffffffff8020bd0a:	6a 64                	push   $0x64
ffffffff8020bd0c:	e9 a3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd11 <__RME_X64_USER101_Handler>:
USER_HANDLER NAME=__RME_X64_USER101_Handler VECTNUM=101
ffffffff8020bd11:	0f 01 f8             	swapgs
ffffffff8020bd14:	6a 00                	push   $0x0
ffffffff8020bd16:	6a 65                	push   $0x65
ffffffff8020bd18:	e9 97 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd1d <__RME_X64_USER102_Handler>:
USER_HANDLER NAME=__RME_X64_USER102_Handler VECTNUM=102
ffffffff8020bd1d:	0f 01 f8             	swapgs
ffffffff8020bd20:	6a 00                	push   $0x0
ffffffff8020bd22:	6a 66                	push   $0x66
ffffffff8020bd24:	e9 8b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd29 <__RME_X64_USER103_Handler>:
USER_HANDLER NAME=__RME_X64_USER103_Handler VECTNUM=103
ffffffff8020bd29:	0f 01 f8             	swapgs
ffffffff8020bd2c:	6a 00                	push   $0x0
ffffffff8020bd2e:	6a 67                	push   $0x67
ffffffff8020bd30:	e9 7f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd35 <__RME_X64_USER104_Handler>:
USER_HANDLER NAME=__RME_X64_USER104_Handler VECTNUM=104
ffffffff8020bd35:	0f 01 f8             	swapgs
ffffffff8020bd38:	6a 00                	push   $0x0
ffffffff8020bd3a:	6a 68                	push   $0x68
ffffffff8020bd3c:	e9 73 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd41 <__RME_X64_USER105_Handler>:
USER_HANDLER NAME=__RME_X64_USER105_Handler VECTNUM=105
ffffffff8020bd41:	0f 01 f8             	swapgs
ffffffff8020bd44:	6a 00                	push   $0x0
ffffffff8020bd46:	6a 69                	push   $0x69
ffffffff8020bd48:	e9 67 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd4d <__RME_X64_USER106_Handler>:
USER_HANDLER NAME=__RME_X64_USER106_Handler VECTNUM=106
ffffffff8020bd4d:	0f 01 f8             	swapgs
ffffffff8020bd50:	6a 00                	push   $0x0
ffffffff8020bd52:	6a 6a                	push   $0x6a
ffffffff8020bd54:	e9 5b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd59 <__RME_X64_USER107_Handler>:
USER_HANDLER NAME=__RME_X64_USER107_Handler VECTNUM=107
ffffffff8020bd59:	0f 01 f8             	swapgs
ffffffff8020bd5c:	6a 00                	push   $0x0
ffffffff8020bd5e:	6a 6b                	push   $0x6b
ffffffff8020bd60:	e9 4f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd65 <__RME_X64_USER108_Handler>:
USER_HANDLER NAME=__RME_X64_USER108_Handler VECTNUM=108
ffffffff8020bd65:	0f 01 f8             	swapgs
ffffffff8020bd68:	6a 00                	push   $0x0
ffffffff8020bd6a:	6a 6c                	push   $0x6c
ffffffff8020bd6c:	e9 43 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd71 <__RME_X64_USER109_Handler>:
USER_HANDLER NAME=__RME_X64_USER109_Handler VECTNUM=109
ffffffff8020bd71:	0f 01 f8             	swapgs
ffffffff8020bd74:	6a 00                	push   $0x0
ffffffff8020bd76:	6a 6d                	push   $0x6d
ffffffff8020bd78:	e9 37 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd7d <__RME_X64_USER110_Handler>:

USER_HANDLER NAME=__RME_X64_USER110_Handler VECTNUM=110
ffffffff8020bd7d:	0f 01 f8             	swapgs
ffffffff8020bd80:	6a 00                	push   $0x0
ffffffff8020bd82:	6a 6e                	push   $0x6e
ffffffff8020bd84:	e9 2b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd89 <__RME_X64_USER111_Handler>:
USER_HANDLER NAME=__RME_X64_USER111_Handler VECTNUM=111
ffffffff8020bd89:	0f 01 f8             	swapgs
ffffffff8020bd8c:	6a 00                	push   $0x0
ffffffff8020bd8e:	6a 6f                	push   $0x6f
ffffffff8020bd90:	e9 1f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd95 <__RME_X64_USER112_Handler>:
USER_HANDLER NAME=__RME_X64_USER112_Handler VECTNUM=112
ffffffff8020bd95:	0f 01 f8             	swapgs
ffffffff8020bd98:	6a 00                	push   $0x0
ffffffff8020bd9a:	6a 70                	push   $0x70
ffffffff8020bd9c:	e9 13 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bda1 <__RME_X64_USER113_Handler>:
USER_HANDLER NAME=__RME_X64_USER113_Handler VECTNUM=113
ffffffff8020bda1:	0f 01 f8             	swapgs
ffffffff8020bda4:	6a 00                	push   $0x0
ffffffff8020bda6:	6a 71                	push   $0x71
ffffffff8020bda8:	e9 07 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdad <__RME_X64_USER114_Handler>:
USER_HANDLER NAME=__RME_X64_USER114_Handler VECTNUM=114
ffffffff8020bdad:	0f 01 f8             	swapgs
ffffffff8020bdb0:	6a 00                	push   $0x0
ffffffff8020bdb2:	6a 72                	push   $0x72
ffffffff8020bdb4:	e9 fb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdb9 <__RME_X64_USER115_Handler>:
USER_HANDLER NAME=__RME_X64_USER115_Handler VECTNUM=115
ffffffff8020bdb9:	0f 01 f8             	swapgs
ffffffff8020bdbc:	6a 00                	push   $0x0
ffffffff8020bdbe:	6a 73                	push   $0x73
ffffffff8020bdc0:	e9 ef 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdc5 <__RME_X64_USER116_Handler>:
USER_HANDLER NAME=__RME_X64_USER116_Handler VECTNUM=116
ffffffff8020bdc5:	0f 01 f8             	swapgs
ffffffff8020bdc8:	6a 00                	push   $0x0
ffffffff8020bdca:	6a 74                	push   $0x74
ffffffff8020bdcc:	e9 e3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdd1 <__RME_X64_USER117_Handler>:
USER_HANDLER NAME=__RME_X64_USER117_Handler VECTNUM=117
ffffffff8020bdd1:	0f 01 f8             	swapgs
ffffffff8020bdd4:	6a 00                	push   $0x0
ffffffff8020bdd6:	6a 75                	push   $0x75
ffffffff8020bdd8:	e9 d7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bddd <__RME_X64_USER118_Handler>:
USER_HANDLER NAME=__RME_X64_USER118_Handler VECTNUM=118
ffffffff8020bddd:	0f 01 f8             	swapgs
ffffffff8020bde0:	6a 00                	push   $0x0
ffffffff8020bde2:	6a 76                	push   $0x76
ffffffff8020bde4:	e9 cb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bde9 <__RME_X64_USER119_Handler>:
USER_HANDLER NAME=__RME_X64_USER119_Handler VECTNUM=119
ffffffff8020bde9:	0f 01 f8             	swapgs
ffffffff8020bdec:	6a 00                	push   $0x0
ffffffff8020bdee:	6a 77                	push   $0x77
ffffffff8020bdf0:	e9 bf 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdf5 <__RME_X64_USER120_Handler>:

USER_HANDLER NAME=__RME_X64_USER120_Handler VECTNUM=120
ffffffff8020bdf5:	0f 01 f8             	swapgs
ffffffff8020bdf8:	6a 00                	push   $0x0
ffffffff8020bdfa:	6a 78                	push   $0x78
ffffffff8020bdfc:	e9 b3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be01 <__RME_X64_USER121_Handler>:
USER_HANDLER NAME=__RME_X64_USER121_Handler VECTNUM=121
ffffffff8020be01:	0f 01 f8             	swapgs
ffffffff8020be04:	6a 00                	push   $0x0
ffffffff8020be06:	6a 79                	push   $0x79
ffffffff8020be08:	e9 a7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be0d <__RME_X64_USER122_Handler>:
USER_HANDLER NAME=__RME_X64_USER122_Handler VECTNUM=122
ffffffff8020be0d:	0f 01 f8             	swapgs
ffffffff8020be10:	6a 00                	push   $0x0
ffffffff8020be12:	6a 7a                	push   $0x7a
ffffffff8020be14:	e9 9b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be19 <__RME_X64_USER123_Handler>:
USER_HANDLER NAME=__RME_X64_USER123_Handler VECTNUM=123
ffffffff8020be19:	0f 01 f8             	swapgs
ffffffff8020be1c:	6a 00                	push   $0x0
ffffffff8020be1e:	6a 7b                	push   $0x7b
ffffffff8020be20:	e9 8f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be25 <__RME_X64_USER124_Handler>:
USER_HANDLER NAME=__RME_X64_USER124_Handler VECTNUM=124
ffffffff8020be25:	0f 01 f8             	swapgs
ffffffff8020be28:	6a 00                	push   $0x0
ffffffff8020be2a:	6a 7c                	push   $0x7c
ffffffff8020be2c:	e9 83 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be31 <__RME_X64_USER125_Handler>:
USER_HANDLER NAME=__RME_X64_USER125_Handler VECTNUM=125
ffffffff8020be31:	0f 01 f8             	swapgs
ffffffff8020be34:	6a 00                	push   $0x0
ffffffff8020be36:	6a 7d                	push   $0x7d
ffffffff8020be38:	e9 77 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be3d <__RME_X64_USER126_Handler>:
USER_HANDLER NAME=__RME_X64_USER126_Handler VECTNUM=126
ffffffff8020be3d:	0f 01 f8             	swapgs
ffffffff8020be40:	6a 00                	push   $0x0
ffffffff8020be42:	6a 7e                	push   $0x7e
ffffffff8020be44:	e9 6b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be49 <__RME_X64_USER127_Handler>:
USER_HANDLER NAME=__RME_X64_USER127_Handler VECTNUM=127
ffffffff8020be49:	0f 01 f8             	swapgs
ffffffff8020be4c:	6a 00                	push   $0x0
ffffffff8020be4e:	6a 7f                	push   $0x7f
ffffffff8020be50:	e9 5f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be55 <__RME_X64_USER128_Handler>:
USER_HANDLER NAME=__RME_X64_USER128_Handler VECTNUM=128
ffffffff8020be55:	0f 01 f8             	swapgs
ffffffff8020be58:	6a 00                	push   $0x0
ffffffff8020be5a:	68 80 00 00 00       	push   $0x80
ffffffff8020be5f:	e9 50 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be64 <__RME_X64_USER129_Handler>:
USER_HANDLER NAME=__RME_X64_USER129_Handler VECTNUM=129
ffffffff8020be64:	0f 01 f8             	swapgs
ffffffff8020be67:	6a 00                	push   $0x0
ffffffff8020be69:	68 81 00 00 00       	push   $0x81
ffffffff8020be6e:	e9 41 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be73 <__RME_X64_USER130_Handler>:

USER_HANDLER NAME=__RME_X64_USER130_Handler VECTNUM=130
ffffffff8020be73:	0f 01 f8             	swapgs
ffffffff8020be76:	6a 00                	push   $0x0
ffffffff8020be78:	68 82 00 00 00       	push   $0x82
ffffffff8020be7d:	e9 32 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be82 <__RME_X64_USER131_Handler>:
USER_HANDLER NAME=__RME_X64_USER131_Handler VECTNUM=131
ffffffff8020be82:	0f 01 f8             	swapgs
ffffffff8020be85:	6a 00                	push   $0x0
ffffffff8020be87:	68 83 00 00 00       	push   $0x83
ffffffff8020be8c:	e9 23 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be91 <__RME_X64_USER132_Handler>:
USER_HANDLER NAME=__RME_X64_USER132_Handler VECTNUM=132
ffffffff8020be91:	0f 01 f8             	swapgs
ffffffff8020be94:	6a 00                	push   $0x0
ffffffff8020be96:	68 84 00 00 00       	push   $0x84
ffffffff8020be9b:	e9 14 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bea0 <__RME_X64_USER133_Handler>:
USER_HANDLER NAME=__RME_X64_USER133_Handler VECTNUM=133
ffffffff8020bea0:	0f 01 f8             	swapgs
ffffffff8020bea3:	6a 00                	push   $0x0
ffffffff8020bea5:	68 85 00 00 00       	push   $0x85
ffffffff8020beaa:	e9 05 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beaf <__RME_X64_USER134_Handler>:
USER_HANDLER NAME=__RME_X64_USER134_Handler VECTNUM=134
ffffffff8020beaf:	0f 01 f8             	swapgs
ffffffff8020beb2:	6a 00                	push   $0x0
ffffffff8020beb4:	68 86 00 00 00       	push   $0x86
ffffffff8020beb9:	e9 f6 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bebe <__RME_X64_USER135_Handler>:
USER_HANDLER NAME=__RME_X64_USER135_Handler VECTNUM=135
ffffffff8020bebe:	0f 01 f8             	swapgs
ffffffff8020bec1:	6a 00                	push   $0x0
ffffffff8020bec3:	68 87 00 00 00       	push   $0x87
ffffffff8020bec8:	e9 e7 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020becd <__RME_X64_USER136_Handler>:
USER_HANDLER NAME=__RME_X64_USER136_Handler VECTNUM=136
ffffffff8020becd:	0f 01 f8             	swapgs
ffffffff8020bed0:	6a 00                	push   $0x0
ffffffff8020bed2:	68 88 00 00 00       	push   $0x88
ffffffff8020bed7:	e9 d8 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bedc <__RME_X64_USER137_Handler>:
USER_HANDLER NAME=__RME_X64_USER137_Handler VECTNUM=137
ffffffff8020bedc:	0f 01 f8             	swapgs
ffffffff8020bedf:	6a 00                	push   $0x0
ffffffff8020bee1:	68 89 00 00 00       	push   $0x89
ffffffff8020bee6:	e9 c9 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beeb <__RME_X64_USER138_Handler>:
USER_HANDLER NAME=__RME_X64_USER138_Handler VECTNUM=138
ffffffff8020beeb:	0f 01 f8             	swapgs
ffffffff8020beee:	6a 00                	push   $0x0
ffffffff8020bef0:	68 8a 00 00 00       	push   $0x8a
ffffffff8020bef5:	e9 ba 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020befa <__RME_X64_USER139_Handler>:
USER_HANDLER NAME=__RME_X64_USER139_Handler VECTNUM=139
ffffffff8020befa:	0f 01 f8             	swapgs
ffffffff8020befd:	6a 00                	push   $0x0
ffffffff8020beff:	68 8b 00 00 00       	push   $0x8b
ffffffff8020bf04:	e9 ab 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf09 <__RME_X64_USER140_Handler>:

USER_HANDLER NAME=__RME_X64_USER140_Handler VECTNUM=140
ffffffff8020bf09:	0f 01 f8             	swapgs
ffffffff8020bf0c:	6a 00                	push   $0x0
ffffffff8020bf0e:	68 8c 00 00 00       	push   $0x8c
ffffffff8020bf13:	e9 9c 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf18 <__RME_X64_USER141_Handler>:
USER_HANDLER NAME=__RME_X64_USER141_Handler VECTNUM=141
ffffffff8020bf18:	0f 01 f8             	swapgs
ffffffff8020bf1b:	6a 00                	push   $0x0
ffffffff8020bf1d:	68 8d 00 00 00       	push   $0x8d
ffffffff8020bf22:	e9 8d 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf27 <__RME_X64_USER142_Handler>:
USER_HANDLER NAME=__RME_X64_USER142_Handler VECTNUM=142
ffffffff8020bf27:	0f 01 f8             	swapgs
ffffffff8020bf2a:	6a 00                	push   $0x0
ffffffff8020bf2c:	68 8e 00 00 00       	push   $0x8e
ffffffff8020bf31:	e9 7e 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf36 <__RME_X64_USER143_Handler>:
USER_HANDLER NAME=__RME_X64_USER143_Handler VECTNUM=143
ffffffff8020bf36:	0f 01 f8             	swapgs
ffffffff8020bf39:	6a 00                	push   $0x0
ffffffff8020bf3b:	68 8f 00 00 00       	push   $0x8f
ffffffff8020bf40:	e9 6f 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf45 <__RME_X64_USER144_Handler>:
USER_HANDLER NAME=__RME_X64_USER144_Handler VECTNUM=144
ffffffff8020bf45:	0f 01 f8             	swapgs
ffffffff8020bf48:	6a 00                	push   $0x0
ffffffff8020bf4a:	68 90 00 00 00       	push   $0x90
ffffffff8020bf4f:	e9 60 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf54 <__RME_X64_USER145_Handler>:
USER_HANDLER NAME=__RME_X64_USER145_Handler VECTNUM=145
ffffffff8020bf54:	0f 01 f8             	swapgs
ffffffff8020bf57:	6a 00                	push   $0x0
ffffffff8020bf59:	68 91 00 00 00       	push   $0x91
ffffffff8020bf5e:	e9 51 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf63 <__RME_X64_USER146_Handler>:
USER_HANDLER NAME=__RME_X64_USER146_Handler VECTNUM=146
ffffffff8020bf63:	0f 01 f8             	swapgs
ffffffff8020bf66:	6a 00                	push   $0x0
ffffffff8020bf68:	68 92 00 00 00       	push   $0x92
ffffffff8020bf6d:	e9 42 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf72 <__RME_X64_USER147_Handler>:
USER_HANDLER NAME=__RME_X64_USER147_Handler VECTNUM=147
ffffffff8020bf72:	0f 01 f8             	swapgs
ffffffff8020bf75:	6a 00                	push   $0x0
ffffffff8020bf77:	68 93 00 00 00       	push   $0x93
ffffffff8020bf7c:	e9 33 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf81 <__RME_X64_USER148_Handler>:
USER_HANDLER NAME=__RME_X64_USER148_Handler VECTNUM=148
ffffffff8020bf81:	0f 01 f8             	swapgs
ffffffff8020bf84:	6a 00                	push   $0x0
ffffffff8020bf86:	68 94 00 00 00       	push   $0x94
ffffffff8020bf8b:	e9 24 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf90 <__RME_X64_USER149_Handler>:
USER_HANDLER NAME=__RME_X64_USER149_Handler VECTNUM=149
ffffffff8020bf90:	0f 01 f8             	swapgs
ffffffff8020bf93:	6a 00                	push   $0x0
ffffffff8020bf95:	68 95 00 00 00       	push   $0x95
ffffffff8020bf9a:	e9 15 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf9f <__RME_X64_USER150_Handler>:

USER_HANDLER NAME=__RME_X64_USER150_Handler VECTNUM=150
ffffffff8020bf9f:	0f 01 f8             	swapgs
ffffffff8020bfa2:	6a 00                	push   $0x0
ffffffff8020bfa4:	68 96 00 00 00       	push   $0x96
ffffffff8020bfa9:	e9 06 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfae <__RME_X64_USER151_Handler>:
USER_HANDLER NAME=__RME_X64_USER151_Handler VECTNUM=151
ffffffff8020bfae:	0f 01 f8             	swapgs
ffffffff8020bfb1:	6a 00                	push   $0x0
ffffffff8020bfb3:	68 97 00 00 00       	push   $0x97
ffffffff8020bfb8:	e9 f7 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfbd <__RME_X64_USER152_Handler>:
USER_HANDLER NAME=__RME_X64_USER152_Handler VECTNUM=152
ffffffff8020bfbd:	0f 01 f8             	swapgs
ffffffff8020bfc0:	6a 00                	push   $0x0
ffffffff8020bfc2:	68 98 00 00 00       	push   $0x98
ffffffff8020bfc7:	e9 e8 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfcc <__RME_X64_USER153_Handler>:
USER_HANDLER NAME=__RME_X64_USER153_Handler VECTNUM=153
ffffffff8020bfcc:	0f 01 f8             	swapgs
ffffffff8020bfcf:	6a 00                	push   $0x0
ffffffff8020bfd1:	68 99 00 00 00       	push   $0x99
ffffffff8020bfd6:	e9 d9 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfdb <__RME_X64_USER154_Handler>:
USER_HANDLER NAME=__RME_X64_USER154_Handler VECTNUM=154
ffffffff8020bfdb:	0f 01 f8             	swapgs
ffffffff8020bfde:	6a 00                	push   $0x0
ffffffff8020bfe0:	68 9a 00 00 00       	push   $0x9a
ffffffff8020bfe5:	e9 ca 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfea <__RME_X64_USER155_Handler>:
USER_HANDLER NAME=__RME_X64_USER155_Handler VECTNUM=155
ffffffff8020bfea:	0f 01 f8             	swapgs
ffffffff8020bfed:	6a 00                	push   $0x0
ffffffff8020bfef:	68 9b 00 00 00       	push   $0x9b
ffffffff8020bff4:	e9 bb 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bff9 <__RME_X64_USER156_Handler>:
USER_HANDLER NAME=__RME_X64_USER156_Handler VECTNUM=156
ffffffff8020bff9:	0f 01 f8             	swapgs
ffffffff8020bffc:	6a 00                	push   $0x0
ffffffff8020bffe:	68 9c 00 00 00       	push   $0x9c
ffffffff8020c003:	e9 ac 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c008 <__RME_X64_USER157_Handler>:
USER_HANDLER NAME=__RME_X64_USER157_Handler VECTNUM=157
ffffffff8020c008:	0f 01 f8             	swapgs
ffffffff8020c00b:	6a 00                	push   $0x0
ffffffff8020c00d:	68 9d 00 00 00       	push   $0x9d
ffffffff8020c012:	e9 9d 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c017 <__RME_X64_USER158_Handler>:
USER_HANDLER NAME=__RME_X64_USER158_Handler VECTNUM=158
ffffffff8020c017:	0f 01 f8             	swapgs
ffffffff8020c01a:	6a 00                	push   $0x0
ffffffff8020c01c:	68 9e 00 00 00       	push   $0x9e
ffffffff8020c021:	e9 8e 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c026 <__RME_X64_USER159_Handler>:
USER_HANDLER NAME=__RME_X64_USER159_Handler VECTNUM=159
ffffffff8020c026:	0f 01 f8             	swapgs
ffffffff8020c029:	6a 00                	push   $0x0
ffffffff8020c02b:	68 9f 00 00 00       	push   $0x9f
ffffffff8020c030:	e9 7f 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c035 <__RME_X64_USER160_Handler>:

USER_HANDLER NAME=__RME_X64_USER160_Handler VECTNUM=160
ffffffff8020c035:	0f 01 f8             	swapgs
ffffffff8020c038:	6a 00                	push   $0x0
ffffffff8020c03a:	68 a0 00 00 00       	push   $0xa0
ffffffff8020c03f:	e9 70 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c044 <__RME_X64_USER161_Handler>:
USER_HANDLER NAME=__RME_X64_USER161_Handler VECTNUM=161
ffffffff8020c044:	0f 01 f8             	swapgs
ffffffff8020c047:	6a 00                	push   $0x0
ffffffff8020c049:	68 a1 00 00 00       	push   $0xa1
ffffffff8020c04e:	e9 61 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c053 <__RME_X64_USER162_Handler>:
USER_HANDLER NAME=__RME_X64_USER162_Handler VECTNUM=162
ffffffff8020c053:	0f 01 f8             	swapgs
ffffffff8020c056:	6a 00                	push   $0x0
ffffffff8020c058:	68 a2 00 00 00       	push   $0xa2
ffffffff8020c05d:	e9 52 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c062 <__RME_X64_USER163_Handler>:
USER_HANDLER NAME=__RME_X64_USER163_Handler VECTNUM=163
ffffffff8020c062:	0f 01 f8             	swapgs
ffffffff8020c065:	6a 00                	push   $0x0
ffffffff8020c067:	68 a3 00 00 00       	push   $0xa3
ffffffff8020c06c:	e9 43 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c071 <__RME_X64_USER164_Handler>:
USER_HANDLER NAME=__RME_X64_USER164_Handler VECTNUM=164
ffffffff8020c071:	0f 01 f8             	swapgs
ffffffff8020c074:	6a 00                	push   $0x0
ffffffff8020c076:	68 a4 00 00 00       	push   $0xa4
ffffffff8020c07b:	e9 34 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c080 <__RME_X64_USER165_Handler>:
USER_HANDLER NAME=__RME_X64_USER165_Handler VECTNUM=165
ffffffff8020c080:	0f 01 f8             	swapgs
ffffffff8020c083:	6a 00                	push   $0x0
ffffffff8020c085:	68 a5 00 00 00       	push   $0xa5
ffffffff8020c08a:	e9 25 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c08f <__RME_X64_USER166_Handler>:
USER_HANDLER NAME=__RME_X64_USER166_Handler VECTNUM=166
ffffffff8020c08f:	0f 01 f8             	swapgs
ffffffff8020c092:	6a 00                	push   $0x0
ffffffff8020c094:	68 a6 00 00 00       	push   $0xa6
ffffffff8020c099:	e9 16 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c09e <__RME_X64_USER167_Handler>:
USER_HANDLER NAME=__RME_X64_USER167_Handler VECTNUM=167
ffffffff8020c09e:	0f 01 f8             	swapgs
ffffffff8020c0a1:	6a 00                	push   $0x0
ffffffff8020c0a3:	68 a7 00 00 00       	push   $0xa7
ffffffff8020c0a8:	e9 07 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0ad <__RME_X64_USER168_Handler>:
USER_HANDLER NAME=__RME_X64_USER168_Handler VECTNUM=168
ffffffff8020c0ad:	0f 01 f8             	swapgs
ffffffff8020c0b0:	6a 00                	push   $0x0
ffffffff8020c0b2:	68 a8 00 00 00       	push   $0xa8
ffffffff8020c0b7:	e9 f8 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0bc <__RME_X64_USER169_Handler>:
USER_HANDLER NAME=__RME_X64_USER169_Handler VECTNUM=169
ffffffff8020c0bc:	0f 01 f8             	swapgs
ffffffff8020c0bf:	6a 00                	push   $0x0
ffffffff8020c0c1:	68 a9 00 00 00       	push   $0xa9
ffffffff8020c0c6:	e9 e9 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0cb <__RME_X64_USER170_Handler>:

USER_HANDLER NAME=__RME_X64_USER170_Handler VECTNUM=170
ffffffff8020c0cb:	0f 01 f8             	swapgs
ffffffff8020c0ce:	6a 00                	push   $0x0
ffffffff8020c0d0:	68 aa 00 00 00       	push   $0xaa
ffffffff8020c0d5:	e9 da 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0da <__RME_X64_USER171_Handler>:
USER_HANDLER NAME=__RME_X64_USER171_Handler VECTNUM=171
ffffffff8020c0da:	0f 01 f8             	swapgs
ffffffff8020c0dd:	6a 00                	push   $0x0
ffffffff8020c0df:	68 ab 00 00 00       	push   $0xab
ffffffff8020c0e4:	e9 cb 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0e9 <__RME_X64_USER172_Handler>:
USER_HANDLER NAME=__RME_X64_USER172_Handler VECTNUM=172
ffffffff8020c0e9:	0f 01 f8             	swapgs
ffffffff8020c0ec:	6a 00                	push   $0x0
ffffffff8020c0ee:	68 ac 00 00 00       	push   $0xac
ffffffff8020c0f3:	e9 bc 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0f8 <__RME_X64_USER173_Handler>:
USER_HANDLER NAME=__RME_X64_USER173_Handler VECTNUM=173
ffffffff8020c0f8:	0f 01 f8             	swapgs
ffffffff8020c0fb:	6a 00                	push   $0x0
ffffffff8020c0fd:	68 ad 00 00 00       	push   $0xad
ffffffff8020c102:	e9 ad 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c107 <__RME_X64_USER174_Handler>:
USER_HANDLER NAME=__RME_X64_USER174_Handler VECTNUM=174
ffffffff8020c107:	0f 01 f8             	swapgs
ffffffff8020c10a:	6a 00                	push   $0x0
ffffffff8020c10c:	68 ae 00 00 00       	push   $0xae
ffffffff8020c111:	e9 9e 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c116 <__RME_X64_USER175_Handler>:
USER_HANDLER NAME=__RME_X64_USER175_Handler VECTNUM=175
ffffffff8020c116:	0f 01 f8             	swapgs
ffffffff8020c119:	6a 00                	push   $0x0
ffffffff8020c11b:	68 af 00 00 00       	push   $0xaf
ffffffff8020c120:	e9 8f 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c125 <__RME_X64_USER176_Handler>:
USER_HANDLER NAME=__RME_X64_USER176_Handler VECTNUM=176
ffffffff8020c125:	0f 01 f8             	swapgs
ffffffff8020c128:	6a 00                	push   $0x0
ffffffff8020c12a:	68 b0 00 00 00       	push   $0xb0
ffffffff8020c12f:	e9 80 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c134 <__RME_X64_USER177_Handler>:
USER_HANDLER NAME=__RME_X64_USER177_Handler VECTNUM=177
ffffffff8020c134:	0f 01 f8             	swapgs
ffffffff8020c137:	6a 00                	push   $0x0
ffffffff8020c139:	68 b1 00 00 00       	push   $0xb1
ffffffff8020c13e:	e9 71 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c143 <__RME_X64_USER178_Handler>:
USER_HANDLER NAME=__RME_X64_USER178_Handler VECTNUM=178
ffffffff8020c143:	0f 01 f8             	swapgs
ffffffff8020c146:	6a 00                	push   $0x0
ffffffff8020c148:	68 b2 00 00 00       	push   $0xb2
ffffffff8020c14d:	e9 62 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c152 <__RME_X64_USER179_Handler>:
USER_HANDLER NAME=__RME_X64_USER179_Handler VECTNUM=179
ffffffff8020c152:	0f 01 f8             	swapgs
ffffffff8020c155:	6a 00                	push   $0x0
ffffffff8020c157:	68 b3 00 00 00       	push   $0xb3
ffffffff8020c15c:	e9 53 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c161 <__RME_X64_USER180_Handler>:

USER_HANDLER NAME=__RME_X64_USER180_Handler VECTNUM=180
ffffffff8020c161:	0f 01 f8             	swapgs
ffffffff8020c164:	6a 00                	push   $0x0
ffffffff8020c166:	68 b4 00 00 00       	push   $0xb4
ffffffff8020c16b:	e9 44 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c170 <__RME_X64_USER181_Handler>:
USER_HANDLER NAME=__RME_X64_USER181_Handler VECTNUM=181
ffffffff8020c170:	0f 01 f8             	swapgs
ffffffff8020c173:	6a 00                	push   $0x0
ffffffff8020c175:	68 b5 00 00 00       	push   $0xb5
ffffffff8020c17a:	e9 35 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c17f <__RME_X64_USER182_Handler>:
USER_HANDLER NAME=__RME_X64_USER182_Handler VECTNUM=182
ffffffff8020c17f:	0f 01 f8             	swapgs
ffffffff8020c182:	6a 00                	push   $0x0
ffffffff8020c184:	68 b6 00 00 00       	push   $0xb6
ffffffff8020c189:	e9 26 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c18e <__RME_X64_USER183_Handler>:
USER_HANDLER NAME=__RME_X64_USER183_Handler VECTNUM=183
ffffffff8020c18e:	0f 01 f8             	swapgs
ffffffff8020c191:	6a 00                	push   $0x0
ffffffff8020c193:	68 b7 00 00 00       	push   $0xb7
ffffffff8020c198:	e9 17 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c19d <__RME_X64_USER184_Handler>:
USER_HANDLER NAME=__RME_X64_USER184_Handler VECTNUM=184
ffffffff8020c19d:	0f 01 f8             	swapgs
ffffffff8020c1a0:	6a 00                	push   $0x0
ffffffff8020c1a2:	68 b8 00 00 00       	push   $0xb8
ffffffff8020c1a7:	e9 08 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ac <__RME_X64_USER185_Handler>:
USER_HANDLER NAME=__RME_X64_USER185_Handler VECTNUM=185
ffffffff8020c1ac:	0f 01 f8             	swapgs
ffffffff8020c1af:	6a 00                	push   $0x0
ffffffff8020c1b1:	68 b9 00 00 00       	push   $0xb9
ffffffff8020c1b6:	e9 f9 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1bb <__RME_X64_USER186_Handler>:
USER_HANDLER NAME=__RME_X64_USER186_Handler VECTNUM=186
ffffffff8020c1bb:	0f 01 f8             	swapgs
ffffffff8020c1be:	6a 00                	push   $0x0
ffffffff8020c1c0:	68 ba 00 00 00       	push   $0xba
ffffffff8020c1c5:	e9 ea 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ca <__RME_X64_USER187_Handler>:
USER_HANDLER NAME=__RME_X64_USER187_Handler VECTNUM=187
ffffffff8020c1ca:	0f 01 f8             	swapgs
ffffffff8020c1cd:	6a 00                	push   $0x0
ffffffff8020c1cf:	68 bb 00 00 00       	push   $0xbb
ffffffff8020c1d4:	e9 db 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1d9 <__RME_X64_USER188_Handler>:
USER_HANDLER NAME=__RME_X64_USER188_Handler VECTNUM=188
ffffffff8020c1d9:	0f 01 f8             	swapgs
ffffffff8020c1dc:	6a 00                	push   $0x0
ffffffff8020c1de:	68 bc 00 00 00       	push   $0xbc
ffffffff8020c1e3:	e9 cc 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1e8 <__RME_X64_USER189_Handler>:
USER_HANDLER NAME=__RME_X64_USER189_Handler VECTNUM=189
ffffffff8020c1e8:	0f 01 f8             	swapgs
ffffffff8020c1eb:	6a 00                	push   $0x0
ffffffff8020c1ed:	68 bd 00 00 00       	push   $0xbd
ffffffff8020c1f2:	e9 bd 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1f7 <__RME_X64_USER190_Handler>:

USER_HANDLER NAME=__RME_X64_USER190_Handler VECTNUM=190
ffffffff8020c1f7:	0f 01 f8             	swapgs
ffffffff8020c1fa:	6a 00                	push   $0x0
ffffffff8020c1fc:	68 be 00 00 00       	push   $0xbe
ffffffff8020c201:	e9 ae 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c206 <__RME_X64_USER191_Handler>:
USER_HANDLER NAME=__RME_X64_USER191_Handler VECTNUM=191
ffffffff8020c206:	0f 01 f8             	swapgs
ffffffff8020c209:	6a 00                	push   $0x0
ffffffff8020c20b:	68 bf 00 00 00       	push   $0xbf
ffffffff8020c210:	e9 9f 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c215 <__RME_X64_USER192_Handler>:
USER_HANDLER NAME=__RME_X64_USER192_Handler VECTNUM=192
ffffffff8020c215:	0f 01 f8             	swapgs
ffffffff8020c218:	6a 00                	push   $0x0
ffffffff8020c21a:	68 c0 00 00 00       	push   $0xc0
ffffffff8020c21f:	e9 90 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c224 <__RME_X64_USER193_Handler>:
USER_HANDLER NAME=__RME_X64_USER193_Handler VECTNUM=193
ffffffff8020c224:	0f 01 f8             	swapgs
ffffffff8020c227:	6a 00                	push   $0x0
ffffffff8020c229:	68 c1 00 00 00       	push   $0xc1
ffffffff8020c22e:	e9 81 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c233 <__RME_X64_USER194_Handler>:
USER_HANDLER NAME=__RME_X64_USER194_Handler VECTNUM=194
ffffffff8020c233:	0f 01 f8             	swapgs
ffffffff8020c236:	6a 00                	push   $0x0
ffffffff8020c238:	68 c2 00 00 00       	push   $0xc2
ffffffff8020c23d:	e9 72 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c242 <__RME_X64_USER195_Handler>:
USER_HANDLER NAME=__RME_X64_USER195_Handler VECTNUM=195
ffffffff8020c242:	0f 01 f8             	swapgs
ffffffff8020c245:	6a 00                	push   $0x0
ffffffff8020c247:	68 c3 00 00 00       	push   $0xc3
ffffffff8020c24c:	e9 63 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c251 <__RME_X64_USER196_Handler>:
USER_HANDLER NAME=__RME_X64_USER196_Handler VECTNUM=196
ffffffff8020c251:	0f 01 f8             	swapgs
ffffffff8020c254:	6a 00                	push   $0x0
ffffffff8020c256:	68 c4 00 00 00       	push   $0xc4
ffffffff8020c25b:	e9 54 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c260 <__RME_X64_USER197_Handler>:
USER_HANDLER NAME=__RME_X64_USER197_Handler VECTNUM=197
ffffffff8020c260:	0f 01 f8             	swapgs
ffffffff8020c263:	6a 00                	push   $0x0
ffffffff8020c265:	68 c5 00 00 00       	push   $0xc5
ffffffff8020c26a:	e9 45 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c26f <__RME_X64_USER198_Handler>:
USER_HANDLER NAME=__RME_X64_USER198_Handler VECTNUM=198
ffffffff8020c26f:	0f 01 f8             	swapgs
ffffffff8020c272:	6a 00                	push   $0x0
ffffffff8020c274:	68 c6 00 00 00       	push   $0xc6
ffffffff8020c279:	e9 36 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c27e <__RME_X64_USER199_Handler>:
USER_HANDLER NAME=__RME_X64_USER199_Handler VECTNUM=199
ffffffff8020c27e:	0f 01 f8             	swapgs
ffffffff8020c281:	6a 00                	push   $0x0
ffffffff8020c283:	68 c7 00 00 00       	push   $0xc7
ffffffff8020c288:	e9 27 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c28d <__RME_X64_USER200_Handler>:

USER_HANDLER NAME=__RME_X64_USER200_Handler VECTNUM=200
ffffffff8020c28d:	0f 01 f8             	swapgs
ffffffff8020c290:	6a 00                	push   $0x0
ffffffff8020c292:	68 c8 00 00 00       	push   $0xc8
ffffffff8020c297:	e9 18 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c29c <__RME_X64_USER201_Handler>:
USER_HANDLER NAME=__RME_X64_USER201_Handler VECTNUM=201
ffffffff8020c29c:	0f 01 f8             	swapgs
ffffffff8020c29f:	6a 00                	push   $0x0
ffffffff8020c2a1:	68 c9 00 00 00       	push   $0xc9
ffffffff8020c2a6:	e9 09 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ab <__RME_X64_USER202_Handler>:
USER_HANDLER NAME=__RME_X64_USER202_Handler VECTNUM=202
ffffffff8020c2ab:	0f 01 f8             	swapgs
ffffffff8020c2ae:	6a 00                	push   $0x0
ffffffff8020c2b0:	68 ca 00 00 00       	push   $0xca
ffffffff8020c2b5:	e9 fa 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ba <__RME_X64_USER203_Handler>:
USER_HANDLER NAME=__RME_X64_USER203_Handler VECTNUM=203
ffffffff8020c2ba:	0f 01 f8             	swapgs
ffffffff8020c2bd:	6a 00                	push   $0x0
ffffffff8020c2bf:	68 cb 00 00 00       	push   $0xcb
ffffffff8020c2c4:	e9 eb 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2c9 <__RME_X64_USER204_Handler>:
USER_HANDLER NAME=__RME_X64_USER204_Handler VECTNUM=204
ffffffff8020c2c9:	0f 01 f8             	swapgs
ffffffff8020c2cc:	6a 00                	push   $0x0
ffffffff8020c2ce:	68 cc 00 00 00       	push   $0xcc
ffffffff8020c2d3:	e9 dc 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2d8 <__RME_X64_USER205_Handler>:
USER_HANDLER NAME=__RME_X64_USER205_Handler VECTNUM=205
ffffffff8020c2d8:	0f 01 f8             	swapgs
ffffffff8020c2db:	6a 00                	push   $0x0
ffffffff8020c2dd:	68 cd 00 00 00       	push   $0xcd
ffffffff8020c2e2:	e9 cd 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2e7 <__RME_X64_USER206_Handler>:
USER_HANDLER NAME=__RME_X64_USER206_Handler VECTNUM=206
ffffffff8020c2e7:	0f 01 f8             	swapgs
ffffffff8020c2ea:	6a 00                	push   $0x0
ffffffff8020c2ec:	68 ce 00 00 00       	push   $0xce
ffffffff8020c2f1:	e9 be 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2f6 <__RME_X64_USER207_Handler>:
USER_HANDLER NAME=__RME_X64_USER207_Handler VECTNUM=207
ffffffff8020c2f6:	0f 01 f8             	swapgs
ffffffff8020c2f9:	6a 00                	push   $0x0
ffffffff8020c2fb:	68 cf 00 00 00       	push   $0xcf
ffffffff8020c300:	e9 af 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c305 <__RME_X64_USER208_Handler>:
USER_HANDLER NAME=__RME_X64_USER208_Handler VECTNUM=208
ffffffff8020c305:	0f 01 f8             	swapgs
ffffffff8020c308:	6a 00                	push   $0x0
ffffffff8020c30a:	68 d0 00 00 00       	push   $0xd0
ffffffff8020c30f:	e9 a0 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c314 <__RME_X64_USER209_Handler>:
USER_HANDLER NAME=__RME_X64_USER209_Handler VECTNUM=209
ffffffff8020c314:	0f 01 f8             	swapgs
ffffffff8020c317:	6a 00                	push   $0x0
ffffffff8020c319:	68 d1 00 00 00       	push   $0xd1
ffffffff8020c31e:	e9 91 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c323 <__RME_X64_USER210_Handler>:

USER_HANDLER NAME=__RME_X64_USER210_Handler VECTNUM=210
ffffffff8020c323:	0f 01 f8             	swapgs
ffffffff8020c326:	6a 00                	push   $0x0
ffffffff8020c328:	68 d2 00 00 00       	push   $0xd2
ffffffff8020c32d:	e9 82 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c332 <__RME_X64_USER211_Handler>:
USER_HANDLER NAME=__RME_X64_USER211_Handler VECTNUM=211
ffffffff8020c332:	0f 01 f8             	swapgs
ffffffff8020c335:	6a 00                	push   $0x0
ffffffff8020c337:	68 d3 00 00 00       	push   $0xd3
ffffffff8020c33c:	e9 73 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c341 <__RME_X64_USER212_Handler>:
USER_HANDLER NAME=__RME_X64_USER212_Handler VECTNUM=212
ffffffff8020c341:	0f 01 f8             	swapgs
ffffffff8020c344:	6a 00                	push   $0x0
ffffffff8020c346:	68 d4 00 00 00       	push   $0xd4
ffffffff8020c34b:	e9 64 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c350 <__RME_X64_USER213_Handler>:
USER_HANDLER NAME=__RME_X64_USER213_Handler VECTNUM=213
ffffffff8020c350:	0f 01 f8             	swapgs
ffffffff8020c353:	6a 00                	push   $0x0
ffffffff8020c355:	68 d5 00 00 00       	push   $0xd5
ffffffff8020c35a:	e9 55 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c35f <__RME_X64_USER214_Handler>:
USER_HANDLER NAME=__RME_X64_USER214_Handler VECTNUM=214
ffffffff8020c35f:	0f 01 f8             	swapgs
ffffffff8020c362:	6a 00                	push   $0x0
ffffffff8020c364:	68 d6 00 00 00       	push   $0xd6
ffffffff8020c369:	e9 46 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c36e <__RME_X64_USER215_Handler>:
USER_HANDLER NAME=__RME_X64_USER215_Handler VECTNUM=215
ffffffff8020c36e:	0f 01 f8             	swapgs
ffffffff8020c371:	6a 00                	push   $0x0
ffffffff8020c373:	68 d7 00 00 00       	push   $0xd7
ffffffff8020c378:	e9 37 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c37d <__RME_X64_USER216_Handler>:
USER_HANDLER NAME=__RME_X64_USER216_Handler VECTNUM=216
ffffffff8020c37d:	0f 01 f8             	swapgs
ffffffff8020c380:	6a 00                	push   $0x0
ffffffff8020c382:	68 d8 00 00 00       	push   $0xd8
ffffffff8020c387:	e9 28 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c38c <__RME_X64_USER217_Handler>:
USER_HANDLER NAME=__RME_X64_USER217_Handler VECTNUM=217
ffffffff8020c38c:	0f 01 f8             	swapgs
ffffffff8020c38f:	6a 00                	push   $0x0
ffffffff8020c391:	68 d9 00 00 00       	push   $0xd9
ffffffff8020c396:	e9 19 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c39b <__RME_X64_USER218_Handler>:
USER_HANDLER NAME=__RME_X64_USER218_Handler VECTNUM=218
ffffffff8020c39b:	0f 01 f8             	swapgs
ffffffff8020c39e:	6a 00                	push   $0x0
ffffffff8020c3a0:	68 da 00 00 00       	push   $0xda
ffffffff8020c3a5:	e9 0a 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3aa <__RME_X64_USER219_Handler>:
USER_HANDLER NAME=__RME_X64_USER219_Handler VECTNUM=219
ffffffff8020c3aa:	0f 01 f8             	swapgs
ffffffff8020c3ad:	6a 00                	push   $0x0
ffffffff8020c3af:	68 db 00 00 00       	push   $0xdb
ffffffff8020c3b4:	e9 fb 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3b9 <__RME_X64_USER220_Handler>:

USER_HANDLER NAME=__RME_X64_USER220_Handler VECTNUM=220
ffffffff8020c3b9:	0f 01 f8             	swapgs
ffffffff8020c3bc:	6a 00                	push   $0x0
ffffffff8020c3be:	68 dc 00 00 00       	push   $0xdc
ffffffff8020c3c3:	e9 ec 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3c8 <__RME_X64_USER221_Handler>:
USER_HANDLER NAME=__RME_X64_USER221_Handler VECTNUM=221
ffffffff8020c3c8:	0f 01 f8             	swapgs
ffffffff8020c3cb:	6a 00                	push   $0x0
ffffffff8020c3cd:	68 dd 00 00 00       	push   $0xdd
ffffffff8020c3d2:	e9 dd 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3d7 <__RME_X64_USER222_Handler>:
USER_HANDLER NAME=__RME_X64_USER222_Handler VECTNUM=222
ffffffff8020c3d7:	0f 01 f8             	swapgs
ffffffff8020c3da:	6a 00                	push   $0x0
ffffffff8020c3dc:	68 de 00 00 00       	push   $0xde
ffffffff8020c3e1:	e9 ce 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3e6 <__RME_X64_USER223_Handler>:
USER_HANDLER NAME=__RME_X64_USER223_Handler VECTNUM=223
ffffffff8020c3e6:	0f 01 f8             	swapgs
ffffffff8020c3e9:	6a 00                	push   $0x0
ffffffff8020c3eb:	68 df 00 00 00       	push   $0xdf
ffffffff8020c3f0:	e9 bf 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3f5 <__RME_X64_USER224_Handler>:
USER_HANDLER NAME=__RME_X64_USER224_Handler VECTNUM=224
ffffffff8020c3f5:	0f 01 f8             	swapgs
ffffffff8020c3f8:	6a 00                	push   $0x0
ffffffff8020c3fa:	68 e0 00 00 00       	push   $0xe0
ffffffff8020c3ff:	e9 b0 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c404 <__RME_X64_USER225_Handler>:
USER_HANDLER NAME=__RME_X64_USER225_Handler VECTNUM=225
ffffffff8020c404:	0f 01 f8             	swapgs
ffffffff8020c407:	6a 00                	push   $0x0
ffffffff8020c409:	68 e1 00 00 00       	push   $0xe1
ffffffff8020c40e:	e9 a1 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c413 <__RME_X64_USER226_Handler>:
USER_HANDLER NAME=__RME_X64_USER226_Handler VECTNUM=226
ffffffff8020c413:	0f 01 f8             	swapgs
ffffffff8020c416:	6a 00                	push   $0x0
ffffffff8020c418:	68 e2 00 00 00       	push   $0xe2
ffffffff8020c41d:	e9 92 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c422 <__RME_X64_USER227_Handler>:
USER_HANDLER NAME=__RME_X64_USER227_Handler VECTNUM=227
ffffffff8020c422:	0f 01 f8             	swapgs
ffffffff8020c425:	6a 00                	push   $0x0
ffffffff8020c427:	68 e3 00 00 00       	push   $0xe3
ffffffff8020c42c:	e9 83 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c431 <__RME_X64_USER228_Handler>:
USER_HANDLER NAME=__RME_X64_USER228_Handler VECTNUM=228
ffffffff8020c431:	0f 01 f8             	swapgs
ffffffff8020c434:	6a 00                	push   $0x0
ffffffff8020c436:	68 e4 00 00 00       	push   $0xe4
ffffffff8020c43b:	e9 74 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c440 <__RME_X64_USER229_Handler>:
USER_HANDLER NAME=__RME_X64_USER229_Handler VECTNUM=229
ffffffff8020c440:	0f 01 f8             	swapgs
ffffffff8020c443:	6a 00                	push   $0x0
ffffffff8020c445:	68 e5 00 00 00       	push   $0xe5
ffffffff8020c44a:	e9 65 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c44f <__RME_X64_USER230_Handler>:

USER_HANDLER NAME=__RME_X64_USER230_Handler VECTNUM=230
ffffffff8020c44f:	0f 01 f8             	swapgs
ffffffff8020c452:	6a 00                	push   $0x0
ffffffff8020c454:	68 e6 00 00 00       	push   $0xe6
ffffffff8020c459:	e9 56 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c45e <__RME_X64_USER231_Handler>:
USER_HANDLER NAME=__RME_X64_USER231_Handler VECTNUM=231
ffffffff8020c45e:	0f 01 f8             	swapgs
ffffffff8020c461:	6a 00                	push   $0x0
ffffffff8020c463:	68 e7 00 00 00       	push   $0xe7
ffffffff8020c468:	e9 47 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c46d <__RME_X64_USER232_Handler>:
USER_HANDLER NAME=__RME_X64_USER232_Handler VECTNUM=232
ffffffff8020c46d:	0f 01 f8             	swapgs
ffffffff8020c470:	6a 00                	push   $0x0
ffffffff8020c472:	68 e8 00 00 00       	push   $0xe8
ffffffff8020c477:	e9 38 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c47c <__RME_X64_USER233_Handler>:
USER_HANDLER NAME=__RME_X64_USER233_Handler VECTNUM=233
ffffffff8020c47c:	0f 01 f8             	swapgs
ffffffff8020c47f:	6a 00                	push   $0x0
ffffffff8020c481:	68 e9 00 00 00       	push   $0xe9
ffffffff8020c486:	e9 29 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c48b <__RME_X64_USER234_Handler>:
USER_HANDLER NAME=__RME_X64_USER234_Handler VECTNUM=234
ffffffff8020c48b:	0f 01 f8             	swapgs
ffffffff8020c48e:	6a 00                	push   $0x0
ffffffff8020c490:	68 ea 00 00 00       	push   $0xea
ffffffff8020c495:	e9 1a 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c49a <__RME_X64_USER235_Handler>:
USER_HANDLER NAME=__RME_X64_USER235_Handler VECTNUM=235
ffffffff8020c49a:	0f 01 f8             	swapgs
ffffffff8020c49d:	6a 00                	push   $0x0
ffffffff8020c49f:	68 eb 00 00 00       	push   $0xeb
ffffffff8020c4a4:	e9 0b 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4a9 <__RME_X64_USER236_Handler>:
USER_HANDLER NAME=__RME_X64_USER236_Handler VECTNUM=236
ffffffff8020c4a9:	0f 01 f8             	swapgs
ffffffff8020c4ac:	6a 00                	push   $0x0
ffffffff8020c4ae:	68 ec 00 00 00       	push   $0xec
ffffffff8020c4b3:	e9 fc 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4b8 <__RME_X64_USER237_Handler>:
USER_HANDLER NAME=__RME_X64_USER237_Handler VECTNUM=237
ffffffff8020c4b8:	0f 01 f8             	swapgs
ffffffff8020c4bb:	6a 00                	push   $0x0
ffffffff8020c4bd:	68 ed 00 00 00       	push   $0xed
ffffffff8020c4c2:	e9 ed 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4c7 <__RME_X64_USER238_Handler>:
USER_HANDLER NAME=__RME_X64_USER238_Handler VECTNUM=238
ffffffff8020c4c7:	0f 01 f8             	swapgs
ffffffff8020c4ca:	6a 00                	push   $0x0
ffffffff8020c4cc:	68 ee 00 00 00       	push   $0xee
ffffffff8020c4d1:	e9 de 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4d6 <__RME_X64_USER239_Handler>:
USER_HANDLER NAME=__RME_X64_USER239_Handler VECTNUM=239
ffffffff8020c4d6:	0f 01 f8             	swapgs
ffffffff8020c4d9:	6a 00                	push   $0x0
ffffffff8020c4db:	68 ef 00 00 00       	push   $0xef
ffffffff8020c4e0:	e9 cf 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4e5 <__RME_X64_USER240_Handler>:

USER_HANDLER NAME=__RME_X64_USER240_Handler VECTNUM=240
ffffffff8020c4e5:	0f 01 f8             	swapgs
ffffffff8020c4e8:	6a 00                	push   $0x0
ffffffff8020c4ea:	68 f0 00 00 00       	push   $0xf0
ffffffff8020c4ef:	e9 c0 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4f4 <__RME_X64_USER241_Handler>:
USER_HANDLER NAME=__RME_X64_USER241_Handler VECTNUM=241
ffffffff8020c4f4:	0f 01 f8             	swapgs
ffffffff8020c4f7:	6a 00                	push   $0x0
ffffffff8020c4f9:	68 f1 00 00 00       	push   $0xf1
ffffffff8020c4fe:	e9 b1 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c503 <__RME_X64_USER242_Handler>:
USER_HANDLER NAME=__RME_X64_USER242_Handler VECTNUM=242
ffffffff8020c503:	0f 01 f8             	swapgs
ffffffff8020c506:	6a 00                	push   $0x0
ffffffff8020c508:	68 f2 00 00 00       	push   $0xf2
ffffffff8020c50d:	e9 a2 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c512 <__RME_X64_USER243_Handler>:
USER_HANDLER NAME=__RME_X64_USER243_Handler VECTNUM=243
ffffffff8020c512:	0f 01 f8             	swapgs
ffffffff8020c515:	6a 00                	push   $0x0
ffffffff8020c517:	68 f3 00 00 00       	push   $0xf3
ffffffff8020c51c:	e9 93 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c521 <__RME_X64_USER244_Handler>:
USER_HANDLER NAME=__RME_X64_USER244_Handler VECTNUM=244
ffffffff8020c521:	0f 01 f8             	swapgs
ffffffff8020c524:	6a 00                	push   $0x0
ffffffff8020c526:	68 f4 00 00 00       	push   $0xf4
ffffffff8020c52b:	e9 84 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c530 <__RME_X64_USER245_Handler>:
USER_HANDLER NAME=__RME_X64_USER245_Handler VECTNUM=245
ffffffff8020c530:	0f 01 f8             	swapgs
ffffffff8020c533:	6a 00                	push   $0x0
ffffffff8020c535:	68 f5 00 00 00       	push   $0xf5
ffffffff8020c53a:	eb 78                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c53c <__RME_X64_USER246_Handler>:
USER_HANDLER NAME=__RME_X64_USER246_Handler VECTNUM=246
ffffffff8020c53c:	0f 01 f8             	swapgs
ffffffff8020c53f:	6a 00                	push   $0x0
ffffffff8020c541:	68 f6 00 00 00       	push   $0xf6
ffffffff8020c546:	eb 6c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c548 <__RME_X64_USER247_Handler>:
USER_HANDLER NAME=__RME_X64_USER247_Handler VECTNUM=247
ffffffff8020c548:	0f 01 f8             	swapgs
ffffffff8020c54b:	6a 00                	push   $0x0
ffffffff8020c54d:	68 f7 00 00 00       	push   $0xf7
ffffffff8020c552:	eb 60                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c554 <__RME_X64_USER248_Handler>:
USER_HANDLER NAME=__RME_X64_USER248_Handler VECTNUM=248
ffffffff8020c554:	0f 01 f8             	swapgs
ffffffff8020c557:	6a 00                	push   $0x0
ffffffff8020c559:	68 f8 00 00 00       	push   $0xf8
ffffffff8020c55e:	eb 54                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c560 <__RME_X64_USER249_Handler>:
USER_HANDLER NAME=__RME_X64_USER249_Handler VECTNUM=249
ffffffff8020c560:	0f 01 f8             	swapgs
ffffffff8020c563:	6a 00                	push   $0x0
ffffffff8020c565:	68 f9 00 00 00       	push   $0xf9
ffffffff8020c56a:	eb 48                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c56c <__RME_X64_USER250_Handler>:

USER_HANDLER NAME=__RME_X64_USER250_Handler VECTNUM=250
ffffffff8020c56c:	0f 01 f8             	swapgs
ffffffff8020c56f:	6a 00                	push   $0x0
ffffffff8020c571:	68 fa 00 00 00       	push   $0xfa
ffffffff8020c576:	eb 3c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c578 <__RME_X64_USER251_Handler>:
USER_HANDLER NAME=__RME_X64_USER251_Handler VECTNUM=251
ffffffff8020c578:	0f 01 f8             	swapgs
ffffffff8020c57b:	6a 00                	push   $0x0
ffffffff8020c57d:	68 fb 00 00 00       	push   $0xfb
ffffffff8020c582:	eb 30                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c584 <__RME_X64_USER252_Handler>:
USER_HANDLER NAME=__RME_X64_USER252_Handler VECTNUM=252
ffffffff8020c584:	0f 01 f8             	swapgs
ffffffff8020c587:	6a 00                	push   $0x0
ffffffff8020c589:	68 fc 00 00 00       	push   $0xfc
ffffffff8020c58e:	eb 24                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c590 <__RME_X64_USER253_Handler>:
USER_HANDLER NAME=__RME_X64_USER253_Handler VECTNUM=253
ffffffff8020c590:	0f 01 f8             	swapgs
ffffffff8020c593:	6a 00                	push   $0x0
ffffffff8020c595:	68 fd 00 00 00       	push   $0xfd
ffffffff8020c59a:	eb 18                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c59c <__RME_X64_USER254_Handler>:
USER_HANDLER NAME=__RME_X64_USER254_Handler VECTNUM=254
ffffffff8020c59c:	0f 01 f8             	swapgs
ffffffff8020c59f:	6a 00                	push   $0x0
ffffffff8020c5a1:	68 fe 00 00 00       	push   $0xfe
ffffffff8020c5a6:	eb 0c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5a8 <__RME_X64_USER255_Handler>:
USER_HANDLER NAME=__RME_X64_USER255_Handler VECTNUM=255
ffffffff8020c5a8:	0f 01 f8             	swapgs
ffffffff8020c5ab:	6a 00                	push   $0x0
ffffffff8020c5ad:	68 ff 00 00 00       	push   $0xff
ffffffff8020c5b2:	eb 00                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5b4 <User_Handler>:
/* Common function body for generic interrupt handlers - reduce I-Cache usage */
User_Handler:
    SAVE_GP_REGS
ffffffff8020c5b4:	41 57                	push   %r15
ffffffff8020c5b6:	41 56                	push   %r14
ffffffff8020c5b8:	41 55                	push   %r13
ffffffff8020c5ba:	41 54                	push   %r12
ffffffff8020c5bc:	41 53                	push   %r11
ffffffff8020c5be:	41 52                	push   %r10
ffffffff8020c5c0:	41 51                	push   %r9
ffffffff8020c5c2:	41 50                	push   %r8
ffffffff8020c5c4:	55                   	push   %rbp
ffffffff8020c5c5:	57                   	push   %rdi
ffffffff8020c5c6:	56                   	push   %rsi
ffffffff8020c5c7:	52                   	push   %rdx
ffffffff8020c5c8:	51                   	push   %rcx
ffffffff8020c5c9:	53                   	push   %rbx
ffffffff8020c5ca:	50                   	push   %rax
ffffffff8020c5cb:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c5cf:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c5d1:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020c5d4:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Generic_Handler
ffffffff8020c5d9:	e8 b2 e4 00 00       	call   ffffffff8021aa90 <__RME_X64_Generic_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c5de:	e8 fd c7 00 00       	call   ffffffff80218de0 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c5e3:	0f 01 f8             	swapgs
ffffffff8020c5e6:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c5ea:	8e d8                	mov    %eax,%ds
ffffffff8020c5ec:	58                   	pop    %rax
ffffffff8020c5ed:	5b                   	pop    %rbx
ffffffff8020c5ee:	59                   	pop    %rcx
ffffffff8020c5ef:	5a                   	pop    %rdx
ffffffff8020c5f0:	5e                   	pop    %rsi
ffffffff8020c5f1:	5f                   	pop    %rdi
ffffffff8020c5f2:	5d                   	pop    %rbp
ffffffff8020c5f3:	41 58                	pop    %r8
ffffffff8020c5f5:	41 59                	pop    %r9
ffffffff8020c5f7:	41 5a                	pop    %r10
ffffffff8020c5f9:	41 5b                	pop    %r11
ffffffff8020c5fb:	41 5c                	pop    %r12
ffffffff8020c5fd:	41 5d                	pop    %r13
ffffffff8020c5ff:	41 5e                	pop    %r14
ffffffff8020c601:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c603:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c607:	48 cf                	iretq

ffffffff8020c609 <SysTick_SMP_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_SMP_Handler:
    .global             SysTick_SMP_Handler
    SWAPGS
ffffffff8020c609:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c60c:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c60e:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c613:	41 57                	push   %r15
ffffffff8020c615:	41 56                	push   %r14
ffffffff8020c617:	41 55                	push   %r13
ffffffff8020c619:	41 54                	push   %r12
ffffffff8020c61b:	41 53                	push   %r11
ffffffff8020c61d:	41 52                	push   %r10
ffffffff8020c61f:	41 51                	push   %r9
ffffffff8020c621:	41 50                	push   %r8
ffffffff8020c623:	55                   	push   %rbp
ffffffff8020c624:	57                   	push   %rdi
ffffffff8020c625:	56                   	push   %rsi
ffffffff8020c626:	52                   	push   %rdx
ffffffff8020c627:	51                   	push   %rcx
ffffffff8020c628:	53                   	push   %rbx
ffffffff8020c629:	50                   	push   %rax
ffffffff8020c62a:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c62e:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c630:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_SMP_Handler
ffffffff8020c633:	e8 26 01 00 00       	call   ffffffff8020c75e <_RME_Tick_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c638:	e8 a3 c7 00 00       	call   ffffffff80218de0 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c63d:	0f 01 f8             	swapgs
ffffffff8020c640:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c644:	8e d8                	mov    %eax,%ds
ffffffff8020c646:	58                   	pop    %rax
ffffffff8020c647:	5b                   	pop    %rbx
ffffffff8020c648:	59                   	pop    %rcx
ffffffff8020c649:	5a                   	pop    %rdx
ffffffff8020c64a:	5e                   	pop    %rsi
ffffffff8020c64b:	5f                   	pop    %rdi
ffffffff8020c64c:	5d                   	pop    %rbp
ffffffff8020c64d:	41 58                	pop    %r8
ffffffff8020c64f:	41 59                	pop    %r9
ffffffff8020c651:	41 5a                	pop    %r10
ffffffff8020c653:	41 5b                	pop    %r11
ffffffff8020c655:	41 5c                	pop    %r12
ffffffff8020c657:	41 5d                	pop    %r13
ffffffff8020c659:	41 5e                	pop    %r14
ffffffff8020c65b:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c65d:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c661:	48 cf                	iretq

ffffffff8020c663 <SysTick_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_Handler:
    .global             SysTick_Handler
    SWAPGS
ffffffff8020c663:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c666:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c668:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c66d:	41 57                	push   %r15
ffffffff8020c66f:	41 56                	push   %r14
ffffffff8020c671:	41 55                	push   %r13
ffffffff8020c673:	41 54                	push   %r12
ffffffff8020c675:	41 53                	push   %r11
ffffffff8020c677:	41 52                	push   %r10
ffffffff8020c679:	41 51                	push   %r9
ffffffff8020c67b:	41 50                	push   %r8
ffffffff8020c67d:	55                   	push   %rbp
ffffffff8020c67e:	57                   	push   %rdi
ffffffff8020c67f:	56                   	push   %rsi
ffffffff8020c680:	52                   	push   %rdx
ffffffff8020c681:	51                   	push   %rcx
ffffffff8020c682:	53                   	push   %rbx
ffffffff8020c683:	50                   	push   %rax
ffffffff8020c684:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c688:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c68a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_Handler
ffffffff8020c68d:	e8 cc 00 00 00       	call   ffffffff8020c75e <_RME_Tick_Handler>
    CALLQ               __RME_X64_SMP_Tick
ffffffff8020c692:	e8 49 c9 00 00       	call   ffffffff80218fe0 <__RME_X64_SMP_Tick>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c697:	e8 44 c7 00 00       	call   ffffffff80218de0 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c69c:	0f 01 f8             	swapgs
ffffffff8020c69f:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c6a3:	8e d8                	mov    %eax,%ds
ffffffff8020c6a5:	58                   	pop    %rax
ffffffff8020c6a6:	5b                   	pop    %rbx
ffffffff8020c6a7:	59                   	pop    %rcx
ffffffff8020c6a8:	5a                   	pop    %rdx
ffffffff8020c6a9:	5e                   	pop    %rsi
ffffffff8020c6aa:	5f                   	pop    %rdi
ffffffff8020c6ab:	5d                   	pop    %rbp
ffffffff8020c6ac:	41 58                	pop    %r8
ffffffff8020c6ae:	41 59                	pop    %r9
ffffffff8020c6b0:	41 5a                	pop    %r10
ffffffff8020c6b2:	41 5b                	pop    %r11
ffffffff8020c6b4:	41 5c                	pop    %r12
ffffffff8020c6b6:	41 5d                	pop    %r13
ffffffff8020c6b8:	41 5e                	pop    %r14
ffffffff8020c6ba:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c6bc:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c6c0:	48 cf                	iretq

ffffffff8020c6c2 <SVC_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SVC_Handler:
    .global             SVC_Handler
    SWAPGS
ffffffff8020c6c2:	0f 01 f8             	swapgs
    /* Swap the pointers with the per-core kernel RSP */
    MOVQ                %RSP,%GS:(8192-8)
ffffffff8020c6c5:	65 48 89 24 25 f8 1f 	mov    %rsp,%gs:0x1ff8
ffffffff8020c6cc:	00 00 
    MOVQ                %GS:(8192-16),%RSP
ffffffff8020c6ce:	65 48 8b 24 25 f0 1f 	mov    %gs:0x1ff0,%rsp
ffffffff8020c6d5:	00 00 
    /* Simulate INT stack: High - [SS, RSP, RFLAGS, CS, RIP, ERRCODE] - Low */
    PUSHQ               $(USER_DATA)
ffffffff8020c6d7:	6a 23                	push   $0x23
    PUSHQ               %GS:(8192-8)
ffffffff8020c6d9:	65 ff 34 25 f8 1f 00 	push   %gs:0x1ff8
ffffffff8020c6e0:	00 
    PUSHQ               %R11
ffffffff8020c6e1:	41 53                	push   %r11
    PUSHQ               $(USER_CODE)
ffffffff8020c6e3:	6a 2b                	push   $0x2b
    PUSHQ               %RCX
ffffffff8020c6e5:	51                   	push   %rcx
    PUSHQ               $0
ffffffff8020c6e6:	6a 00                	push   $0x0
    /* We went into this from a SYSCALL - interrupt number 0x10000 */
    PUSHQ               $0x10000
ffffffff8020c6e8:	68 00 00 01 00       	push   $0x10000
    SAVE_GP_REGS
ffffffff8020c6ed:	41 57                	push   %r15
ffffffff8020c6ef:	41 56                	push   %r14
ffffffff8020c6f1:	41 55                	push   %r13
ffffffff8020c6f3:	41 54                	push   %r12
ffffffff8020c6f5:	41 53                	push   %r11
ffffffff8020c6f7:	41 52                	push   %r10
ffffffff8020c6f9:	41 51                	push   %r9
ffffffff8020c6fb:	41 50                	push   %r8
ffffffff8020c6fd:	55                   	push   %rbp
ffffffff8020c6fe:	57                   	push   %rdi
ffffffff8020c6ff:	56                   	push   %rsi
ffffffff8020c700:	52                   	push   %rdx
ffffffff8020c701:	51                   	push   %rcx
ffffffff8020c702:	53                   	push   %rbx
ffffffff8020c703:	50                   	push   %rax
ffffffff8020c704:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c708:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c70a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Svc_Handler
ffffffff8020c70d:	e8 5e 45 00 00       	call   ffffffff80210c70 <_RME_Svc_Handler>
    RESTORE_GP_REGS
ffffffff8020c712:	0f 01 f8             	swapgs
ffffffff8020c715:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c719:	8e d8                	mov    %eax,%ds
ffffffff8020c71b:	58                   	pop    %rax
ffffffff8020c71c:	5b                   	pop    %rbx
ffffffff8020c71d:	59                   	pop    %rcx
ffffffff8020c71e:	5a                   	pop    %rdx
ffffffff8020c71f:	5e                   	pop    %rsi
ffffffff8020c720:	5f                   	pop    %rdi
ffffffff8020c721:	5d                   	pop    %rbp
ffffffff8020c722:	41 58                	pop    %r8
ffffffff8020c724:	41 59                	pop    %r9
ffffffff8020c726:	41 5a                	pop    %r10
ffffffff8020c728:	41 5b                	pop    %r11
ffffffff8020c72a:	41 5c                	pop    %r12
ffffffff8020c72c:	41 5d                	pop    %r13
ffffffff8020c72e:	41 5e                	pop    %r14
ffffffff8020c730:	41 5f                	pop    %r15
    /* See if we are forced to use IRET */
    TESTQ               $0x10000,(%RSP)
ffffffff8020c732:	48 f7 04 24 00 00 01 	testq  $0x10000,(%rsp)
ffffffff8020c739:	00 
    JZ                  Use_IRET
ffffffff8020c73a:	74 1c                	je     ffffffff8020c758 <Use_IRET>
    /* Just move these into the registers desired */
    /* CVE-2012-0217, CVE-2014-4699: Force canonical address on RIP */
    MOVQ                $0x7FFFFFFFFFFF,%RCX
ffffffff8020c73c:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff8020c743:	7f 00 00 
    ANDQ                16(%RSP),%RCX
ffffffff8020c746:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
    MOVQ                32(%RSP),%R11
ffffffff8020c74b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    MOVQ                40(%RSP),%RSP
ffffffff8020c750:	48 8b 64 24 28       	mov    0x28(%rsp),%rsp
    /* Return to user-level */
    SYSRETQ
ffffffff8020c755:	48 0f 07             	sysretq

ffffffff8020c758 <Use_IRET>:
Use_IRET:
    /* Flag is zero, We are forced to use IRET, because this is from INT */
    ADDQ                $16,%RSP
ffffffff8020c758:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c75c:	48 cf                	iretq

ffffffff8020c75e <_RME_Tick_Handler>:
ffffffff8020c75e:	66 90                	xchg   %ax,%ax

ffffffff8020c760 <_RME_Run_Del>:
static void _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff8020c760:	48 8b 4f 40          	mov    0x40(%rdi),%rcx
    Local=Thd->Sched.Local;
    /* It can't be free or there must be an error */
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Delete this thread from the runqueue */
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8020c764:	48 8b 37             	mov    (%rdi),%rsi
ffffffff8020c767:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    Local=Thd->Sched.Local;
ffffffff8020c76b:	48 8b 47 28          	mov    0x28(%rdi),%rax
    Next->Prev=Prev;
ffffffff8020c76f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
    Prev->Next=Next;
ffffffff8020c773:	48 89 32             	mov    %rsi,(%rdx)
    
    /* See if there are any thread on this priority level */
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff8020c776:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020c779:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8020c77d:	48 8d 54 30 28       	lea    0x28(%rax,%rsi,1),%rdx
ffffffff8020c782:	48 39 54 06 28       	cmp    %rdx,0x28(%rsi,%rax,1)
ffffffff8020c787:	74 07                	je     ffffffff8020c790 <_RME_Run_Del+0x30>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff8020c789:	c3                   	ret
ffffffff8020c78a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff8020c790:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020c793:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020c798:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff8020c79c:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020c79f:	48 f7 d2             	not    %rdx
ffffffff8020c7a2:	48 21 54 f0 20       	and    %rdx,0x20(%rax,%rsi,8)
}
ffffffff8020c7a7:	c3                   	ret
ffffffff8020c7a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020c7af:	00 

ffffffff8020c7b0 <_RME_Inv_Ret>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Ret(struct RME_Reg_Struct* Reg,
                              rme_ptr_t Retval,
                              rme_ptr_t Is_Exc)
{
ffffffff8020c7b0:	41 57                	push   %r15
ffffffff8020c7b2:	41 56                	push   %r14
ffffffff8020c7b4:	49 89 f6             	mov    %rsi,%r14
ffffffff8020c7b7:	41 55                	push   %r13
ffffffff8020c7b9:	49 89 d5             	mov    %rdx,%r13
ffffffff8020c7bc:	41 54                	push   %r12
ffffffff8020c7be:	49 89 fc             	mov    %rdi,%r12
ffffffff8020c7c1:	55                   	push   %rbp
ffffffff8020c7c2:	53                   	push   %rbx
ffffffff8020c7c3:	48 83 ec 08          	sub    $0x8,%rsp
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;

    /* See if we can return; If we can, get the structure */
    Thread=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020c7c7:	e8 73 f0 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020c7cc:	48 8b 68 08          	mov    0x8(%rax),%rbp
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8020c7d0:	48 8b 9d 98 00 00 00 	mov    0x98(%rbp),%rbx
    if(RME_UNLIKELY(Invocation==(void*)RME_NULL))
ffffffff8020c7d7:	48 85 db             	test   %rbx,%rbx
ffffffff8020c7da:	0f 84 f4 00 00 00    	je     ffffffff8020c8d4 <_RME_Inv_Ret+0x124>
ffffffff8020c7e0:	4c 8d bd 98 00 00 00 	lea    0x98(%rbp),%r15
ffffffff8020c7e7:	4c 39 fb             	cmp    %r15,%rbx
ffffffff8020c7ea:	0f 84 e4 00 00 00    	je     ffffffff8020c8d4 <_RME_Inv_Ret+0x124>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if this port allows return-on-fault */
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8020c7f0:	4d 85 ed             	test   %r13,%r13
ffffffff8020c7f3:	0f 84 97 00 00 00    	je     ffffffff8020c890 <_RME_Inv_Ret+0xe0>
ffffffff8020c7f9:	48 83 7b 30 00       	cmpq   $0x0,0x30(%rbx)
ffffffff8020c7fe:	0f 84 d9 00 00 00    	je     ffffffff8020c8dd <_RME_Inv_Ret+0x12d>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Pop it from the stack */
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8020c804:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020c807:	48 8b 43 08          	mov    0x8(%rbx),%rax
    /* Decrease invocation depth - no atomic operation needed */
    Thread->Ctx.Invstk_Depth--;

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well. */
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c80b:	48 8d 73 38          	lea    0x38(%rbx),%rsi
ffffffff8020c80f:	4c 89 e7             	mov    %r12,%rdi
    Next->Prev=Prev;
ffffffff8020c812:	48 89 42 08          	mov    %rax,0x8(%rdx)
    Prev->Next=Next;
ffffffff8020c816:	48 89 10             	mov    %rdx,(%rax)
    Thread->Ctx.Invstk_Depth--;
ffffffff8020c819:	48 83 ad a8 00 00 00 	subq   $0x1,0xa8(%rbp)
ffffffff8020c820:	01 
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c821:	e8 ba df 00 00       	call   ffffffff8021a7e0 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8020c826:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020c829:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c82c:	e8 5f c5 00 00       	call   ffffffff80218d90 <__RME_Inv_Retval_Set>

    /* We have successfully returned, set the invocation as inactive. We need
     * a barrier here to avoid potential destruction of the return value. */
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8020c831:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff8020c838:	00 
    /* Decide the system call's return value */
    if(RME_UNLIKELY(Is_Exc!=0U))
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
ffffffff8020c839:	48 c7 c6 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rsi
ffffffff8020c840:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c843:	e8 f8 e7 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>

        __RME_Svc_Retval_Set(Reg,0);
    }

    /* Same assumptions as in invocation activation */
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8020c848:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Invocation!=(void*)RME_NULL)
ffffffff8020c84f:	48 85 c0             	test   %rax,%rax
ffffffff8020c852:	74 2c                	je     ffffffff8020c880 <_RME_Inv_Ret+0xd0>
ffffffff8020c854:	49 39 c7             	cmp    %rax,%r15
ffffffff8020c857:	74 27                	je     ffffffff8020c880 <_RME_Inv_Ret+0xd0>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8020c859:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020c85d:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020c861:	e8 3a e2 00 00       	call   ffffffff8021aaa0 <__RME_Pgt_Set>
        RME_ASSERT(RME_CAP_IS_ROOT(Thread->Sched.Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
    }
    
    return 0;
ffffffff8020c866:	31 c0                	xor    %eax,%eax
}
ffffffff8020c868:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020c86c:	5b                   	pop    %rbx
ffffffff8020c86d:	5d                   	pop    %rbp
ffffffff8020c86e:	41 5c                	pop    %r12
ffffffff8020c870:	41 5d                	pop    %r13
ffffffff8020c872:	41 5e                	pop    %r14
ffffffff8020c874:	41 5f                	pop    %r15
ffffffff8020c876:	c3                   	ret
ffffffff8020c877:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020c87e:	00 00 
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
ffffffff8020c880:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff8020c884:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020c888:	e8 13 e2 00 00       	call   ffffffff8021aaa0 <__RME_Pgt_Set>
ffffffff8020c88d:	eb d7                	jmp    ffffffff8020c866 <_RME_Inv_Ret+0xb6>
ffffffff8020c88f:	90                   	nop
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8020c890:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020c893:	48 8b 43 08          	mov    0x8(%rbx),%rax
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c897:	48 8d 73 38          	lea    0x38(%rbx),%rsi
ffffffff8020c89b:	4c 89 e7             	mov    %r12,%rdi
    Next->Prev=Prev;
ffffffff8020c89e:	48 89 42 08          	mov    %rax,0x8(%rdx)
    Prev->Next=Next;
ffffffff8020c8a2:	48 89 10             	mov    %rdx,(%rax)
    Thread->Ctx.Invstk_Depth--;
ffffffff8020c8a5:	48 83 ad a8 00 00 00 	subq   $0x1,0xa8(%rbp)
ffffffff8020c8ac:	01 
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c8ad:	e8 2e df 00 00       	call   ffffffff8021a7e0 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8020c8b2:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020c8b5:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c8b8:	e8 d3 c4 00 00       	call   ffffffff80218d90 <__RME_Inv_Retval_Set>
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8020c8bd:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff8020c8c4:	00 
        __RME_Svc_Retval_Set(Reg,0);
ffffffff8020c8c5:	31 f6                	xor    %esi,%esi
ffffffff8020c8c7:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c8ca:	e8 71 e7 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
ffffffff8020c8cf:	e9 74 ff ff ff       	jmp    ffffffff8020c848 <_RME_Inv_Ret+0x98>
        return RME_ERR_SIV_EMPTY;
ffffffff8020c8d4:	48 c7 c0 d0 fe ff ff 	mov    $0xfffffffffffffed0,%rax
ffffffff8020c8db:	eb 8b                	jmp    ffffffff8020c868 <_RME_Inv_Ret+0xb8>
        return RME_ERR_SIV_FAULT;
ffffffff8020c8dd:	48 c7 c0 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rax
ffffffff8020c8e4:	eb 82                	jmp    ffffffff8020c868 <_RME_Inv_Ret+0xb8>
ffffffff8020c8e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020c8ed:	00 00 00 

ffffffff8020c8f0 <_RME_Thd_Sched_Bind.isra.0>:
static rme_ret_t _RME_Thd_Sched_Bind(struct RME_Cap_Cpt* Cpt,
ffffffff8020c8f0:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c8f3:	41 56                	push   %r14
ffffffff8020c8f5:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020c8f8:	41 55                	push   %r13
ffffffff8020c8fa:	4d 89 cd             	mov    %r9,%r13
ffffffff8020c8fd:	41 54                	push   %r12
ffffffff8020c8ff:	55                   	push   %rbp
ffffffff8020c900:	53                   	push   %rbx
ffffffff8020c901:	4c 89 c3             	mov    %r8,%rbx
ffffffff8020c904:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020c909:	f6 c4 80             	test   $0x80,%ah
ffffffff8020c90c:	0f 85 de 01 00 00    	jne    ffffffff8020caf0 <_RME_Thd_Sched_Bind.isra.0+0x200>
ffffffff8020c912:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020c915:	0f 83 8d 03 00 00    	jae    ffffffff8020cca8 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020c91b:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8020c922:	ff 00 00 
ffffffff8020c925:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020c929:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020c930:	00 00 00 
ffffffff8020c933:	48 01 f8             	add    %rdi,%rax
ffffffff8020c936:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020c939:	49 21 c8             	and    %rcx,%r8
ffffffff8020c93c:	4d 39 c8             	cmp    %r9,%r8
ffffffff8020c93f:	0f 84 1b 02 00 00    	je     ffffffff8020cb60 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020c945:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020c949:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff8020c94d:	0f 85 35 03 00 00    	jne    ffffffff8020cc88 <_RME_Thd_Sched_Bind.isra.0+0x398>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff8020c953:	f6 c6 80             	test   $0x80,%dh
ffffffff8020c956:	0f 85 14 02 00 00    	jne    ffffffff8020cb70 <_RME_Thd_Sched_Bind.isra.0+0x280>
ffffffff8020c95c:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020c95f:	0f 83 43 03 00 00    	jae    ffffffff8020cca8 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020c965:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020c96c:	ff 00 00 
ffffffff8020c96f:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020c973:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020c97a:	00 00 00 
ffffffff8020c97d:	4c 8d 34 3a          	lea    (%rdx,%rdi,1),%r14
ffffffff8020c981:	49 8b 16             	mov    (%r14),%rdx
ffffffff8020c984:	48 21 d1             	and    %rdx,%rcx
ffffffff8020c987:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8020c98a:	0f 84 d0 01 00 00    	je     ffffffff8020cb60 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020c990:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020c994:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8020c998:	0f 85 ea 02 00 00    	jne    ffffffff8020cc88 <_RME_Thd_Sched_Bind.isra.0+0x398>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff8020c99e:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8020c9a2:	0f 84 10 03 00 00    	je     ffffffff8020ccb8 <_RME_Thd_Sched_Bind.isra.0+0x3c8>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
ffffffff8020c9a8:	41 f6 46 10 04       	testb  $0x4,0x10(%r14)
ffffffff8020c9ad:	0f 84 05 03 00 00    	je     ffffffff8020ccb8 <_RME_Thd_Sched_Bind.isra.0+0x3c8>
    if(Cap_Sig!=RME_CID_NULL)
ffffffff8020c9b3:	ba 00 00 00 80       	mov    $0x80000000,%edx
ffffffff8020c9b8:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8020c9bb:	0f 84 2f 02 00 00    	je     ffffffff8020cbf0 <_RME_Thd_Sched_Bind.isra.0+0x300>
        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8020c9c1:	f6 c7 80             	test   $0x80,%bh
ffffffff8020c9c4:	0f 85 36 02 00 00    	jne    ffffffff8020cc00 <_RME_Thd_Sched_Bind.isra.0+0x310>
ffffffff8020c9ca:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8020c9cd:	0f 83 d5 02 00 00    	jae    ffffffff8020cca8 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020c9d3:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020c9da:	ff 00 00 
ffffffff8020c9dd:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020c9e1:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8020c9e8:	00 00 00 
ffffffff8020c9eb:	48 01 fb             	add    %rdi,%rbx
ffffffff8020c9ee:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020c9f1:	48 21 d1             	and    %rdx,%rcx
ffffffff8020c9f4:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020c9f7:	0f 84 63 01 00 00    	je     ffffffff8020cb60 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020c9fd:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020ca01:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8020ca05:	0f 85 7d 02 00 00    	jne    ffffffff8020cc88 <_RME_Thd_Sched_Bind.isra.0+0x398>
        RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SCHED);
ffffffff8020ca0b:	f6 43 10 20          	testb  $0x20,0x10(%rbx)
ffffffff8020ca0f:	0f 84 a3 02 00 00    	je     ffffffff8020ccb8 <_RME_Thd_Sched_Bind.isra.0+0x3c8>
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff8020ca15:	48 8b 68 18          	mov    0x18(%rax),%rbp
    if(Local_Old!=RME_THD_FREE)
ffffffff8020ca19:	48 83 7d 28 ff       	cmpq   $0xffffffffffffffff,0x28(%rbp)
ffffffff8020ca1e:	0f 85 74 02 00 00    	jne    ffffffff8020cc98 <_RME_Thd_Sched_Bind.isra.0+0x3a8>
    Local_New=RME_CPU_LOCAL();
ffffffff8020ca24:	e8 16 ee ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Scheduler=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
ffffffff8020ca29:	49 8b 56 18          	mov    0x18(%r14),%rdx
    Local_New=RME_CPU_LOCAL();
ffffffff8020ca2d:	48 89 c1             	mov    %rax,%rcx
    if(Scheduler->Sched.Local!=Local_New)
ffffffff8020ca30:	48 3b 42 28          	cmp    0x28(%rdx),%rax
ffffffff8020ca34:	0f 85 5e 02 00 00    	jne    ffffffff8020cc98 <_RME_Thd_Sched_Bind.isra.0+0x3a8>
    if(Thread==Scheduler)
ffffffff8020ca3a:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020ca3d:	0f 84 a9 02 00 00    	je     ffffffff8020ccec <_RME_Thd_Sched_Bind.isra.0+0x3fc>
    if(Scheduler->Sched.Prio_Max<Prio)
ffffffff8020ca43:	4c 39 62 48          	cmp    %r12,0x48(%rdx)
ffffffff8020ca47:	0f 82 87 02 00 00    	jb     ffffffff8020ccd4 <_RME_Thd_Sched_Bind.isra.0+0x3e4>
    Hyp_Attr=Thread->Ctx.Hyp_Attr;
ffffffff8020ca4d:	48 8b 85 88 00 00 00 	mov    0x88(%rbp),%rax
    if(RME_THD_ATTR(Hyp_Attr)!=0U)
ffffffff8020ca54:	48 89 c6             	mov    %rax,%rsi
ffffffff8020ca57:	48 0f ba f6 3f       	btr    $0x3f,%rsi
ffffffff8020ca5c:	48 85 f6             	test   %rsi,%rsi
ffffffff8020ca5f:	0f 85 53 02 00 00    	jne    ffffffff8020ccb8 <_RME_Thd_Sched_Bind.isra.0+0x3c8>
    else if(((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)==0U))||
ffffffff8020ca65:	48 83 7c 24 38 00    	cmpq   $0x0,0x38(%rsp)
ffffffff8020ca6b:	0f 85 57 02 00 00    	jne    ffffffff8020ccc8 <_RME_Thd_Sched_Bind.isra.0+0x3d8>
ffffffff8020ca71:	48 85 c0             	test   %rax,%rax
ffffffff8020ca74:	0f 88 4e 02 00 00    	js     ffffffff8020ccc8 <_RME_Thd_Sched_Bind.isra.0+0x3d8>
/* Inline assembly implementation */
#else
static INLINE rme_ptr_t _RME_X64_Comp_Swap(volatile rme_ptr_t* Ptr, rme_ptr_t Old, rme_ptr_t New)
{
	rme_u8_t Zero;
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020ca7a:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020ca81:	f0 48 0f b1 4d 28    	lock cmpxchg %rcx,0x28(%rbp)
ffffffff8020ca87:	0f 94 c1             	sete   %cl
    if(RME_COMP_SWAP((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff8020ca8a:	84 c9                	test   %cl,%cl
ffffffff8020ca8c:	0f 84 4e 02 00 00    	je     ffffffff8020cce0 <_RME_Thd_Sched_Bind.isra.0+0x3f0>
    Scheduler->Sched.Sched_Ref++;
ffffffff8020ca92:	48 83 42 60 01       	addq   $0x1,0x60(%rdx)
    Thread->Sched.Sched_Thd=Scheduler;
ffffffff8020ca97:	48 89 55 68          	mov    %rdx,0x68(%rbp)
    Thread->Sched.Prio=Prio;
ffffffff8020ca9b:	4c 89 65 40          	mov    %r12,0x40(%rbp)
    Thread->Sched.TID=(rme_ptr_t)TID;
ffffffff8020ca9f:	4c 89 6d 20          	mov    %r13,0x20(%rbp)
    if(Sig_Op==(void*)0U)
ffffffff8020caa3:	48 85 db             	test   %rbx,%rbx
ffffffff8020caa6:	0f 84 cc 01 00 00    	je     ffffffff8020cc78 <_RME_Thd_Sched_Bind.isra.0+0x388>
        Thread->Sched.Sched_Sig=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff8020caac:	8b 03                	mov    (%rbx),%eax
ffffffff8020caae:	85 c0                	test   %eax,%eax
ffffffff8020cab0:	74 04                	je     ffffffff8020cab6 <_RME_Thd_Sched_Bind.isra.0+0x1c6>
ffffffff8020cab2:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff8020cab6:	48 89 5d 70          	mov    %rbx,0x70(%rbp)
	                     :"memory", "cc");
	return (rme_ptr_t)Zero;
}
static INLINE rme_ptr_t _RME_X64_Fetch_Add(volatile rme_ptr_t* Ptr, rme_cnt_t Addend)
{
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020caba:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020cabf:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)!=0U)
ffffffff8020cac5:	48 83 bd 88 00 00 00 	cmpq   $0x0,0x88(%rbp)
ffffffff8020cacc:	00 
ffffffff8020cacd:	78 11                	js     ffffffff8020cae0 <_RME_Thd_Sched_Bind.isra.0+0x1f0>
    return 0;
ffffffff8020cacf:	31 c0                	xor    %eax,%eax
}
ffffffff8020cad1:	5b                   	pop    %rbx
ffffffff8020cad2:	5d                   	pop    %rbp
ffffffff8020cad3:	41 5c                	pop    %r12
ffffffff8020cad5:	41 5d                	pop    %r13
ffffffff8020cad7:	41 5e                	pop    %r14
ffffffff8020cad9:	c3                   	ret
ffffffff8020cada:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)Haddr;
ffffffff8020cae0:	48 c7 85 90 00 00 00 	movq   $0x0,0x90(%rbp)
ffffffff8020cae7:	00 00 00 00 
ffffffff8020caeb:	eb e2                	jmp    ffffffff8020cacf <_RME_Thd_Sched_Bind.isra.0+0x1df>
ffffffff8020caed:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020caf0:	48 89 c1             	mov    %rax,%rcx
ffffffff8020caf3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020caf7:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020cafa:	0f 83 a8 01 00 00    	jae    ffffffff8020cca8 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020cb00:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020cb07:	ff 00 00 
ffffffff8020cb0a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020cb0e:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020cb15:	00 00 00 
ffffffff8020cb18:	48 01 f9             	add    %rdi,%rcx
ffffffff8020cb1b:	4c 8b 01             	mov    (%rcx),%r8
ffffffff8020cb1e:	4d 89 c3             	mov    %r8,%r11
ffffffff8020cb21:	4d 21 cb             	and    %r9,%r11
ffffffff8020cb24:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020cb27:	74 37                	je     ffffffff8020cb60 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020cb29:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8020cb2d:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff8020cb31:	0f 85 51 01 00 00    	jne    ffffffff8020cc88 <_RME_Thd_Sched_Bind.isra.0+0x398>
ffffffff8020cb37:	4c 8b 41 28          	mov    0x28(%rcx),%r8
ffffffff8020cb3b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020cb40:	4c 39 c0             	cmp    %r8,%rax
ffffffff8020cb43:	0f 83 5f 01 00 00    	jae    ffffffff8020cca8 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020cb49:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cb4d:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020cb51:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020cb54:	49 21 c9             	and    %rcx,%r9
ffffffff8020cb57:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020cb5a:	0f 85 e5 fd ff ff    	jne    ffffffff8020c945 <_RME_Thd_Sched_Bind.isra.0+0x55>
ffffffff8020cb60:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020cb67:	e9 65 ff ff ff       	jmp    ffffffff8020cad1 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020cb6c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff8020cb70:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020cb73:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020cb77:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020cb7a:	0f 83 28 01 00 00    	jae    ffffffff8020cca8 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020cb80:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020cb87:	ff 00 00 
ffffffff8020cb8a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020cb8e:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020cb95:	00 00 00 
ffffffff8020cb98:	48 01 f9             	add    %rdi,%rcx
ffffffff8020cb9b:	4c 8b 01             	mov    (%rcx),%r8
ffffffff8020cb9e:	4d 89 c3             	mov    %r8,%r11
ffffffff8020cba1:	4d 21 cb             	and    %r9,%r11
ffffffff8020cba4:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020cba7:	74 b7                	je     ffffffff8020cb60 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020cba9:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8020cbad:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff8020cbb1:	0f 85 d1 00 00 00    	jne    ffffffff8020cc88 <_RME_Thd_Sched_Bind.isra.0+0x398>
ffffffff8020cbb7:	4c 8b 41 28          	mov    0x28(%rcx),%r8
ffffffff8020cbbb:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020cbc1:	4c 39 c2             	cmp    %r8,%rdx
ffffffff8020cbc4:	0f 83 de 00 00 00    	jae    ffffffff8020cca8 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020cbca:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cbce:	48 03 51 18          	add    0x18(%rcx),%rdx
ffffffff8020cbd2:	49 89 d6             	mov    %rdx,%r14
ffffffff8020cbd5:	48 8b 12             	mov    (%rdx),%rdx
ffffffff8020cbd8:	49 21 d1             	and    %rdx,%r9
ffffffff8020cbdb:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020cbde:	0f 85 ac fd ff ff    	jne    ffffffff8020c990 <_RME_Thd_Sched_Bind.isra.0+0xa0>
ffffffff8020cbe4:	e9 77 ff ff ff       	jmp    ffffffff8020cb60 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020cbe9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        Sig_Op=RME_NULL;
ffffffff8020cbf0:	31 db                	xor    %ebx,%ebx
ffffffff8020cbf2:	e9 1e fe ff ff       	jmp    ffffffff8020ca15 <_RME_Thd_Sched_Bind.isra.0+0x125>
ffffffff8020cbf7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020cbfe:	00 00 
        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8020cc00:	48 89 da             	mov    %rbx,%rdx
ffffffff8020cc03:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cc07:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020cc0a:	0f 83 98 00 00 00    	jae    ffffffff8020cca8 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020cc10:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020cc17:	ff 00 00 
ffffffff8020cc1a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cc1e:	48 01 fa             	add    %rdi,%rdx
ffffffff8020cc21:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020cc28:	00 00 00 
ffffffff8020cc2b:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020cc2e:	49 89 c8             	mov    %rcx,%r8
ffffffff8020cc31:	49 21 f0             	and    %rsi,%r8
ffffffff8020cc34:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020cc37:	0f 84 23 ff ff ff    	je     ffffffff8020cb60 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020cc3d:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020cc41:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020cc45:	75 41                	jne    ffffffff8020cc88 <_RME_Thd_Sched_Bind.isra.0+0x398>
ffffffff8020cc47:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020cc4b:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020cc51:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020cc54:	73 52                	jae    ffffffff8020cca8 <_RME_Thd_Sched_Bind.isra.0+0x3b8>
ffffffff8020cc56:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020cc5a:	48 03 5a 18          	add    0x18(%rdx),%rbx
ffffffff8020cc5e:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020cc61:	48 21 d6             	and    %rdx,%rsi
ffffffff8020cc64:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020cc67:	0f 85 90 fd ff ff    	jne    ffffffff8020c9fd <_RME_Thd_Sched_Bind.isra.0+0x10d>
ffffffff8020cc6d:	e9 ee fe ff ff       	jmp    ffffffff8020cb60 <_RME_Thd_Sched_Bind.isra.0+0x270>
ffffffff8020cc72:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Thread->Sched.Sched_Sig=0U;
ffffffff8020cc78:	48 c7 45 70 00 00 00 	movq   $0x0,0x70(%rbp)
ffffffff8020cc7f:	00 
ffffffff8020cc80:	e9 40 fe ff ff       	jmp    ffffffff8020cac5 <_RME_Thd_Sched_Bind.isra.0+0x1d5>
ffffffff8020cc85:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cc88:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020cc8f:	e9 3d fe ff ff       	jmp    ffffffff8020cad1 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020cc94:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_INVSTATE;
ffffffff8020cc98:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8020cc9f:	e9 2d fe ff ff       	jmp    ffffffff8020cad1 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020cca4:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cca8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ccaf:	e9 1d fe ff ff       	jmp    ffffffff8020cad1 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020ccb4:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff8020ccb8:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ccbf:	e9 0d fe ff ff       	jmp    ffffffff8020cad1 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020ccc4:	0f 1f 40 00          	nopl   0x0(%rax)
                    return RME_ERR_PTH_HADDR;
ffffffff8020ccc8:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8020cccf:	e9 fd fd ff ff       	jmp    ffffffff8020cad1 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
        return RME_ERR_PTH_PRIO;
ffffffff8020ccd4:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8020ccdb:	e9 f1 fd ff ff       	jmp    ffffffff8020cad1 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
        return RME_ERR_PTH_CONFLICT;
ffffffff8020cce0:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff8020cce7:	e9 e5 fd ff ff       	jmp    ffffffff8020cad1 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
        return RME_ERR_PTH_NOTIF;
ffffffff8020ccec:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff8020ccf3:	e9 d9 fd ff ff       	jmp    ffffffff8020cad1 <_RME_Thd_Sched_Bind.isra.0+0x1e1>
ffffffff8020ccf8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020ccff:	00 

ffffffff8020cd00 <_RME_Prc_Crt.isra.0>:
static rme_ret_t _RME_Prc_Crt(struct RME_Cap_Cpt* Cpt,
ffffffff8020cd00:	48 89 d0             	mov    %rdx,%rax
ffffffff8020cd03:	55                   	push   %rbp
ffffffff8020cd04:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020cd07:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020cd08:	f6 c4 80             	test   $0x80,%ah
ffffffff8020cd0b:	0f 85 8f 01 00 00    	jne    ffffffff8020cea0 <_RME_Prc_Crt.isra.0+0x1a0>
ffffffff8020cd11:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020cd14:	0f 83 f6 02 00 00    	jae    ffffffff8020d010 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020cd1a:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020cd21:	ff 00 00 
ffffffff8020cd24:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cd28:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020cd2f:	00 00 00 
ffffffff8020cd32:	48 01 f8             	add    %rdi,%rax
ffffffff8020cd35:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020cd38:	49 21 ca             	and    %rcx,%r10
ffffffff8020cd3b:	4d 39 da             	cmp    %r11,%r10
ffffffff8020cd3e:	0f 84 cc 01 00 00    	je     ffffffff8020cf10 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020cd44:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020cd48:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020cd4c:	0f 85 ce 02 00 00    	jne    ffffffff8020d020 <_RME_Prc_Crt.isra.0+0x320>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020cd52:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020cd59:	0f 85 c1 01 00 00    	jne    ffffffff8020cf20 <_RME_Prc_Crt.isra.0+0x220>
ffffffff8020cd5f:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020cd62:	0f 83 a8 02 00 00    	jae    ffffffff8020d010 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020cd68:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020cd6f:	ff 00 00 
ffffffff8020cd72:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020cd76:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020cd7d:	00 00 00 
ffffffff8020cd80:	49 01 f8             	add    %rdi,%r8
ffffffff8020cd83:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020cd86:	49 21 ca             	and    %rcx,%r10
ffffffff8020cd89:	4d 39 da             	cmp    %r11,%r10
ffffffff8020cd8c:	0f 84 7e 01 00 00    	je     ffffffff8020cf10 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020cd92:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020cd96:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020cd9a:	0f 85 80 02 00 00    	jne    ffffffff8020d020 <_RME_Prc_Crt.isra.0+0x320>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020cda0:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8020cda7:	0f 85 f3 01 00 00    	jne    ffffffff8020cfa0 <_RME_Prc_Crt.isra.0+0x2a0>
ffffffff8020cdad:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020cdb0:	0f 83 5a 02 00 00    	jae    ffffffff8020d010 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020cdb6:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020cdbd:	ff 00 00 
ffffffff8020cdc0:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020cdc4:	49 01 f9             	add    %rdi,%r9
ffffffff8020cdc7:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020cdce:	00 00 00 
ffffffff8020cdd1:	49 8b 09             	mov    (%r9),%rcx
ffffffff8020cdd4:	48 21 ce             	and    %rcx,%rsi
ffffffff8020cdd7:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020cdda:	0f 84 30 01 00 00    	je     ffffffff8020cf10 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020cde0:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020cde4:	48 83 f9 04          	cmp    $0x4,%rcx
ffffffff8020cde8:	0f 85 32 02 00 00    	jne    ffffffff8020d020 <_RME_Prc_Crt.isra.0+0x320>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020cdee:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8020cdf2:	0f 84 38 02 00 00    	je     ffffffff8020d030 <_RME_Prc_Crt.isra.0+0x330>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff8020cdf8:	41 f6 40 10 40       	testb  $0x40,0x10(%r8)
ffffffff8020cdfd:	0f 84 2d 02 00 00    	je     ffffffff8020d030 <_RME_Prc_Crt.isra.0+0x330>
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff8020ce03:	41 f6 41 10 40       	testb  $0x40,0x10(%r9)
ffffffff8020ce08:	0f 84 22 02 00 00    	je     ffffffff8020d030 <_RME_Prc_Crt.isra.0+0x330>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff8020ce0e:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8020ce12:	0f 83 f8 01 00 00    	jae    ffffffff8020d010 <_RME_Prc_Crt.isra.0+0x310>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020ce18:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff8020ce1f:	00 00 00 
ffffffff8020ce22:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020ce26:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff8020ce2a:	31 c0                	xor    %eax,%eax
ffffffff8020ce2c:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020ce31:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020ce34:	84 c9                	test   %cl,%cl
ffffffff8020ce36:	0f 84 00 02 00 00    	je     ffffffff8020d03c <_RME_Prc_Crt.isra.0+0x33c>
    Prc_Crt->Head.Root_Ref=0U;
ffffffff8020ce3c:	66 0f 6f 05 3c fc 00 	movdqa 0xfc3c(%rip),%xmm0        # ffffffff8021ca80 <Table.1+0x100>
ffffffff8020ce43:	00 
ffffffff8020ce44:	0f 11 42 08          	movups %xmm0,0x8(%rdx)
ffffffff8020ce48:	66 0f 6f 05 40 fc 00 	movdqa 0xfc40(%rip),%xmm0        # ffffffff8021ca90 <Table.1+0x110>
ffffffff8020ce4f:	00 
ffffffff8020ce50:	0f 11 42 18          	movups %xmm0,0x18(%rdx)
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff8020ce54:	41 8b 08             	mov    (%r8),%ecx
ffffffff8020ce57:	85 c9                	test   %ecx,%ecx
ffffffff8020ce59:	74 04                	je     ffffffff8020ce5f <_RME_Prc_Crt.isra.0+0x15f>
ffffffff8020ce5b:	4d 8b 40 08          	mov    0x8(%r8),%r8
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff8020ce5f:	41 8b 01             	mov    (%r9),%eax
ffffffff8020ce62:	85 c0                	test   %eax,%eax
ffffffff8020ce64:	74 04                	je     ffffffff8020ce6a <_RME_Prc_Crt.isra.0+0x16a>
ffffffff8020ce66:	4d 8b 49 08          	mov    0x8(%r9),%r9
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020ce6a:	b8 01 00 00 00       	mov    $0x1,%eax
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff8020ce6f:	4c 89 42 28          	mov    %r8,0x28(%rdx)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff8020ce73:	4c 89 4a 30          	mov    %r9,0x30(%rdx)
ffffffff8020ce77:	48 89 c1             	mov    %rax,%rcx
ffffffff8020ce7a:	f0 49 0f c1 48 08    	lock xadd %rcx,0x8(%r8)
ffffffff8020ce80:	f0 49 0f c1 41 08    	lock xadd %rax,0x8(%r9)
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff8020ce86:	48 b8 00 00 00 00 00 	movabs $0x5000000000000,%rax
ffffffff8020ce8d:	00 05 00 
ffffffff8020ce90:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff8020ce93:	31 c0                	xor    %eax,%eax
}
ffffffff8020ce95:	5b                   	pop    %rbx
ffffffff8020ce96:	5d                   	pop    %rbp
ffffffff8020ce97:	c3                   	ret
ffffffff8020ce98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020ce9f:	00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020cea0:	48 89 c1             	mov    %rax,%rcx
ffffffff8020cea3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020cea7:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020ceaa:	0f 83 60 01 00 00    	jae    ffffffff8020d010 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020ceb0:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020ceb7:	ff 00 00 
ffffffff8020ceba:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020cebe:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020cec5:	00 00 00 
ffffffff8020cec8:	48 01 f9             	add    %rdi,%rcx
ffffffff8020cecb:	4c 8b 11             	mov    (%rcx),%r10
ffffffff8020cece:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020ced1:	4c 21 dd             	and    %r11,%rbp
ffffffff8020ced4:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020ced7:	74 37                	je     ffffffff8020cf10 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020ced9:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020cedd:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020cee1:	0f 85 39 01 00 00    	jne    ffffffff8020d020 <_RME_Prc_Crt.isra.0+0x320>
ffffffff8020cee7:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff8020ceeb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020cef0:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020cef3:	0f 83 17 01 00 00    	jae    ffffffff8020d010 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020cef9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cefd:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020cf01:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020cf04:	49 21 cb             	and    %rcx,%r11
ffffffff8020cf07:	49 39 db             	cmp    %rbx,%r11
ffffffff8020cf0a:	0f 85 34 fe ff ff    	jne    ffffffff8020cd44 <_RME_Prc_Crt.isra.0+0x44>
ffffffff8020cf10:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020cf17:	e9 79 ff ff ff       	jmp    ffffffff8020ce95 <_RME_Prc_Crt.isra.0+0x195>
ffffffff8020cf1c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020cf20:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020cf23:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020cf27:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020cf2a:	0f 83 e0 00 00 00    	jae    ffffffff8020d010 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020cf30:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020cf37:	ff 00 00 
ffffffff8020cf3a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020cf3e:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020cf45:	00 00 00 
ffffffff8020cf48:	48 01 f9             	add    %rdi,%rcx
ffffffff8020cf4b:	4c 8b 11             	mov    (%rcx),%r10
ffffffff8020cf4e:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020cf51:	4c 21 dd             	and    %r11,%rbp
ffffffff8020cf54:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020cf57:	74 b7                	je     ffffffff8020cf10 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020cf59:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020cf5d:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020cf61:	0f 85 b9 00 00 00    	jne    ffffffff8020d020 <_RME_Prc_Crt.isra.0+0x320>
ffffffff8020cf67:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff8020cf6b:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020cf72:	4d 39 d0             	cmp    %r10,%r8
ffffffff8020cf75:	0f 83 95 00 00 00    	jae    ffffffff8020d010 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020cf7b:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020cf7f:	4c 03 41 18          	add    0x18(%rcx),%r8
ffffffff8020cf83:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020cf86:	49 21 cb             	and    %rcx,%r11
ffffffff8020cf89:	49 39 db             	cmp    %rbx,%r11
ffffffff8020cf8c:	0f 85 00 fe ff ff    	jne    ffffffff8020cd92 <_RME_Prc_Crt.isra.0+0x92>
ffffffff8020cf92:	e9 79 ff ff ff       	jmp    ffffffff8020cf10 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020cf97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020cf9e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020cfa0:	4c 89 c9             	mov    %r9,%rcx
ffffffff8020cfa3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020cfa7:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020cfaa:	73 64                	jae    ffffffff8020d010 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020cfac:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020cfb3:	00 00 00 
ffffffff8020cfb6:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020cfba:	48 01 f9             	add    %rdi,%rcx
ffffffff8020cfbd:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020cfc4:	ff 00 00 
ffffffff8020cfc7:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8020cfca:	49 89 f3             	mov    %rsi,%r11
ffffffff8020cfcd:	49 21 fb             	and    %rdi,%r11
ffffffff8020cfd0:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020cfd3:	0f 84 37 ff ff ff    	je     ffffffff8020cf10 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020cfd9:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020cfdd:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020cfe1:	75 3d                	jne    ffffffff8020d020 <_RME_Prc_Crt.isra.0+0x320>
ffffffff8020cfe3:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020cfe7:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff8020cfee:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020cff1:	73 1d                	jae    ffffffff8020d010 <_RME_Prc_Crt.isra.0+0x310>
ffffffff8020cff3:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020cff7:	4c 03 49 18          	add    0x18(%rcx),%r9
ffffffff8020cffb:	49 8b 09             	mov    (%r9),%rcx
ffffffff8020cffe:	48 21 cf             	and    %rcx,%rdi
ffffffff8020d001:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8020d004:	0f 85 d6 fd ff ff    	jne    ffffffff8020cde0 <_RME_Prc_Crt.isra.0+0xe0>
ffffffff8020d00a:	e9 01 ff ff ff       	jmp    ffffffff8020cf10 <_RME_Prc_Crt.isra.0+0x210>
ffffffff8020d00f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020d010:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020d017:	e9 79 fe ff ff       	jmp    ffffffff8020ce95 <_RME_Prc_Crt.isra.0+0x195>
ffffffff8020d01c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020d020:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020d027:	e9 69 fe ff ff       	jmp    ffffffff8020ce95 <_RME_Prc_Crt.isra.0+0x195>
ffffffff8020d02c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020d030:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020d037:	e9 59 fe ff ff       	jmp    ffffffff8020ce95 <_RME_Prc_Crt.isra.0+0x195>
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020d03c:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020d043:	e9 4d fe ff ff       	jmp    ffffffff8020ce95 <_RME_Prc_Crt.isra.0+0x195>
ffffffff8020d048:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020d04f:	00 

ffffffff8020d050 <_RME_Run_Swt.isra.0>:
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
ffffffff8020d050:	41 55                	push   %r13
ffffffff8020d052:	41 54                	push   %r12
ffffffff8020d054:	49 89 fc             	mov    %rdi,%r12
ffffffff8020d057:	55                   	push   %rbp
ffffffff8020d058:	48 89 f5             	mov    %rsi,%rbp
ffffffff8020d05b:	53                   	push   %rbx
ffffffff8020d05c:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020d05f:	48 83 ec 08          	sub    $0x8,%rsp
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff8020d063:	4c 8b aa 90 00 00 00 	mov    0x90(%rdx),%r13
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff8020d06a:	48 8b be 90 00 00 00 	mov    0x90(%rsi),%rdi
ffffffff8020d071:	4c 89 e6             	mov    %r12,%rsi
ffffffff8020d074:	e8 37 d6 00 00       	call   ffffffff8021a6b0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff8020d079:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020d07c:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020d07f:	e8 2c d6 00 00       	call   ffffffff8021a6b0 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d084:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d08b:	48 85 c0             	test   %rax,%rax
ffffffff8020d08e:	74 70                	je     ffffffff8020d100 <_RME_Run_Swt.isra.0+0xb0>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d090:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d097:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020d09a:	74 64                	je     ffffffff8020d100 <_RME_Run_Swt.isra.0+0xb0>
        return Inv_Top->Prc->Pgt;
ffffffff8020d09c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d0a0:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d0a4:	48 8b 83 98 00 00 00 	mov    0x98(%rbx),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d0ab:	48 85 c0             	test   %rax,%rax
ffffffff8020d0ae:	74 40                	je     ffffffff8020d0f0 <_RME_Run_Swt.isra.0+0xa0>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d0b0:	48 8d 8b 98 00 00 00 	lea    0x98(%rbx),%rcx
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d0b7:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020d0ba:	74 34                	je     ffffffff8020d0f0 <_RME_Run_Swt.isra.0+0xa0>
        return Inv_Top->Prc->Pgt;
ffffffff8020d0bc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d0c0:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff8020d0c4:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8020d0c8:	48 39 42 18          	cmp    %rax,0x18(%rdx)
ffffffff8020d0cc:	75 12                	jne    ffffffff8020d0e0 <_RME_Run_Swt.isra.0+0x90>
}
ffffffff8020d0ce:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d0d2:	5b                   	pop    %rbx
ffffffff8020d0d3:	5d                   	pop    %rbp
ffffffff8020d0d4:	41 5c                	pop    %r12
ffffffff8020d0d6:	41 5d                	pop    %r13
ffffffff8020d0d8:	c3                   	ret
ffffffff8020d0d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020d0e0:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d0e4:	5b                   	pop    %rbx
ffffffff8020d0e5:	5d                   	pop    %rbp
ffffffff8020d0e6:	41 5c                	pop    %r12
ffffffff8020d0e8:	41 5d                	pop    %r13
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff8020d0ea:	e9 b1 d9 00 00       	jmp    ffffffff8021aaa0 <__RME_Pgt_Set>
ffffffff8020d0ef:	90                   	nop
        return Thd->Sched.Prc->Pgt;
ffffffff8020d0f0:	48 8b 43 58          	mov    0x58(%rbx),%rax
ffffffff8020d0f4:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020d0f8:	eb ca                	jmp    ffffffff8020d0c4 <_RME_Run_Swt.isra.0+0x74>
ffffffff8020d0fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020d100:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff8020d104:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020d108:	eb 9a                	jmp    ffffffff8020d0a4 <_RME_Run_Swt.isra.0+0x54>
ffffffff8020d10a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020d110 <_RME_Pgt_Con.isra.0>:
static rme_ret_t _RME_Pgt_Con(struct RME_Cap_Cpt* Cpt,
ffffffff8020d110:	55                   	push   %rbp
ffffffff8020d111:	48 89 f0             	mov    %rsi,%rax
ffffffff8020d114:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d117:	53                   	push   %rbx
ffffffff8020d118:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020d11b:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d11f:	80 e6 80             	and    $0x80,%dh
ffffffff8020d122:	75 4c                	jne    ffffffff8020d170 <_RME_Pgt_Con.isra.0+0x60>
ffffffff8020d124:	48 39 c3             	cmp    %rax,%rbx
ffffffff8020d127:	0f 83 53 02 00 00    	jae    ffffffff8020d380 <_RME_Pgt_Con.isra.0+0x270>
ffffffff8020d12d:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d134:	ff 00 00 
ffffffff8020d137:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020d13b:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020d142:	00 00 00 
ffffffff8020d145:	48 01 fb             	add    %rdi,%rbx
ffffffff8020d148:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020d14b:	48 21 d1             	and    %rdx,%rcx
ffffffff8020d14e:	4c 39 d1             	cmp    %r10,%rcx
ffffffff8020d151:	0f 85 86 00 00 00    	jne    ffffffff8020d1dd <_RME_Pgt_Con.isra.0+0xcd>
ffffffff8020d157:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020d15e:	00 00 
ffffffff8020d160:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020d167:	e9 6f 01 00 00       	jmp    ffffffff8020d2db <_RME_Pgt_Con.isra.0+0x1cb>
ffffffff8020d16c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020d170:	48 89 da             	mov    %rbx,%rdx
ffffffff8020d173:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d177:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d17a:	0f 83 00 02 00 00    	jae    ffffffff8020d380 <_RME_Pgt_Con.isra.0+0x270>
ffffffff8020d180:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020d187:	ff 00 00 
ffffffff8020d18a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d18e:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020d195:	00 00 00 
ffffffff8020d198:	48 01 fa             	add    %rdi,%rdx
ffffffff8020d19b:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020d19e:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020d1a1:	4c 21 d5             	and    %r10,%rbp
ffffffff8020d1a4:	4c 39 dd             	cmp    %r11,%rbp
ffffffff8020d1a7:	74 b7                	je     ffffffff8020d160 <_RME_Pgt_Con.isra.0+0x50>
ffffffff8020d1a9:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d1ad:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d1b1:	0f 85 a9 01 00 00    	jne    ffffffff8020d360 <_RME_Pgt_Con.isra.0+0x250>
ffffffff8020d1b7:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020d1bb:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020d1c1:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020d1c4:	0f 83 b6 01 00 00    	jae    ffffffff8020d380 <_RME_Pgt_Con.isra.0+0x270>
ffffffff8020d1ca:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020d1ce:	48 03 5a 18          	add    0x18(%rdx),%rbx
ffffffff8020d1d2:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020d1d5:	49 21 d2             	and    %rdx,%r10
ffffffff8020d1d8:	4d 39 da             	cmp    %r11,%r10
ffffffff8020d1db:	74 83                	je     ffffffff8020d160 <_RME_Pgt_Con.isra.0+0x50>
ffffffff8020d1dd:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d1e1:	48 83 fa 04          	cmp    $0x4,%rdx
ffffffff8020d1e5:	0f 85 75 01 00 00    	jne    ffffffff8020d360 <_RME_Pgt_Con.isra.0+0x250>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020d1eb:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020d1f2:	0f 85 f0 00 00 00    	jne    ffffffff8020d2e8 <_RME_Pgt_Con.isra.0+0x1d8>
ffffffff8020d1f8:	49 39 c0             	cmp    %rax,%r8
ffffffff8020d1fb:	0f 83 7f 01 00 00    	jae    ffffffff8020d380 <_RME_Pgt_Con.isra.0+0x270>
ffffffff8020d201:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020d208:	ff 00 00 
ffffffff8020d20b:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d20f:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020d216:	00 00 00 
ffffffff8020d219:	49 8d 2c 38          	lea    (%r8,%rdi,1),%rbp
ffffffff8020d21d:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020d221:	48 21 c2             	and    %rax,%rdx
ffffffff8020d224:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020d227:	0f 84 33 ff ff ff    	je     ffffffff8020d160 <_RME_Pgt_Con.isra.0+0x50>
ffffffff8020d22d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d231:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020d235:	0f 85 25 01 00 00    	jne    ffffffff8020d360 <_RME_Pgt_Con.isra.0+0x250>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff8020d23b:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8020d23f:	a8 10                	test   $0x10,%al
ffffffff8020d241:	0f 84 49 01 00 00    	je     ffffffff8020d390 <_RME_Pgt_Con.isra.0+0x280>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff8020d247:	f6 45 10 08          	testb  $0x8,0x10(%rbp)
ffffffff8020d24b:	0f 84 3f 01 00 00    	je     ffffffff8020d390 <_RME_Pgt_Con.isra.0+0x280>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff8020d251:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d254:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff8020d258:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020d25b:	0f 82 2f 01 00 00    	jb     ffffffff8020d390 <_RME_Pgt_Con.isra.0+0x280>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff8020d261:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020d265:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff8020d26a:	48 39 c6             	cmp    %rax,%rsi
ffffffff8020d26d:	0f 82 1d 01 00 00    	jb     ffffffff8020d390 <_RME_Pgt_Con.isra.0+0x280>
    if((Pos>>RME_PGT_NMORD(Pgt_Parent->Order))!=0U)
ffffffff8020d273:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff8020d277:	48 89 f0             	mov    %rsi,%rax
ffffffff8020d27a:	48 d3 e8             	shr    %cl,%rax
ffffffff8020d27d:	48 85 c0             	test   %rax,%rax
ffffffff8020d280:	0f 85 ea 00 00 00    	jne    ffffffff8020d370 <_RME_Pgt_Con.isra.0+0x260>
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff8020d286:	48 8b 45 28          	mov    0x28(%rbp),%rax
    Szord_Parent=RME_PGT_SZORD(Pgt_Parent->Order);
ffffffff8020d28a:	48 c1 e9 20          	shr    $0x20,%rcx
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff8020d28e:	89 c2                	mov    %eax,%edx
ffffffff8020d290:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d294:	48 01 d0             	add    %rdx,%rax
    if(Szord_Parent!=Order_Child)
ffffffff8020d297:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020d29a:	0f 85 d0 00 00 00    	jne    ffffffff8020d370 <_RME_Pgt_Con.isra.0+0x260>
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff8020d2a0:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020d2a3:	4c 89 c9             	mov    %r9,%rcx
ffffffff8020d2a6:	48 89 df             	mov    %rbx,%rdi
ffffffff8020d2a9:	e8 12 da 00 00       	call   ffffffff8021acc0 <__RME_Pgt_Pgdir_Map>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff8020d2ae:	8b 13                	mov    (%rbx),%edx
ffffffff8020d2b0:	85 d2                	test   %edx,%edx
ffffffff8020d2b2:	74 04                	je     ffffffff8020d2b8 <_RME_Pgt_Con.isra.0+0x1a8>
ffffffff8020d2b4:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff8020d2b8:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020d2bd:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020d2c3:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020d2c6:	85 c0                	test   %eax,%eax
ffffffff8020d2c8:	74 04                	je     ffffffff8020d2ce <_RME_Pgt_Con.isra.0+0x1be>
ffffffff8020d2ca:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
ffffffff8020d2ce:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020d2d3:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    return 0;
ffffffff8020d2d9:	31 c0                	xor    %eax,%eax
}
ffffffff8020d2db:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d2df:	5b                   	pop    %rbx
ffffffff8020d2e0:	5d                   	pop    %rbp
ffffffff8020d2e1:	c3                   	ret
ffffffff8020d2e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020d2e8:	4c 89 c2             	mov    %r8,%rdx
ffffffff8020d2eb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d2ef:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d2f2:	0f 83 88 00 00 00    	jae    ffffffff8020d380 <_RME_Pgt_Con.isra.0+0x270>
ffffffff8020d2f8:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d2ff:	ff 00 00 
ffffffff8020d302:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d306:	48 8d 04 3a          	lea    (%rdx,%rdi,1),%rax
ffffffff8020d30a:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020d311:	00 00 00 
ffffffff8020d314:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020d317:	49 89 d2             	mov    %rdx,%r10
ffffffff8020d31a:	49 21 ca             	and    %rcx,%r10
ffffffff8020d31d:	49 39 fa             	cmp    %rdi,%r10
ffffffff8020d320:	0f 84 3a fe ff ff    	je     ffffffff8020d160 <_RME_Pgt_Con.isra.0+0x50>
ffffffff8020d326:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d32a:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020d32e:	75 30                	jne    ffffffff8020d360 <_RME_Pgt_Con.isra.0+0x250>
ffffffff8020d330:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020d334:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020d33b:	49 39 d0             	cmp    %rdx,%r8
ffffffff8020d33e:	73 40                	jae    ffffffff8020d380 <_RME_Pgt_Con.isra.0+0x270>
ffffffff8020d340:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d344:	4c 03 40 18          	add    0x18(%rax),%r8
ffffffff8020d348:	49 8b 00             	mov    (%r8),%rax
ffffffff8020d34b:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020d34e:	48 21 c1             	and    %rax,%rcx
ffffffff8020d351:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020d354:	0f 85 d3 fe ff ff    	jne    ffffffff8020d22d <_RME_Pgt_Con.isra.0+0x11d>
ffffffff8020d35a:	e9 01 fe ff ff       	jmp    ffffffff8020d160 <_RME_Pgt_Con.isra.0+0x50>
ffffffff8020d35f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d360:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020d367:	e9 6f ff ff ff       	jmp    ffffffff8020d2db <_RME_Pgt_Con.isra.0+0x1cb>
ffffffff8020d36c:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PGT_ADDR;
ffffffff8020d370:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020d377:	e9 5f ff ff ff       	jmp    ffffffff8020d2db <_RME_Pgt_Con.isra.0+0x1cb>
ffffffff8020d37c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d380:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020d387:	e9 4f ff ff ff       	jmp    ffffffff8020d2db <_RME_Pgt_Con.isra.0+0x1cb>
ffffffff8020d38c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff8020d390:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020d397:	e9 3f ff ff ff       	jmp    ffffffff8020d2db <_RME_Pgt_Con.isra.0+0x1cb>
ffffffff8020d39c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020d3a0 <_RME_Pgt_Add.isra.0>:
static rme_ret_t _RME_Pgt_Add(struct RME_Cap_Cpt* Cpt, 
ffffffff8020d3a0:	41 55                	push   %r13
ffffffff8020d3a2:	49 89 f2             	mov    %rsi,%r10
ffffffff8020d3a5:	48 89 f8             	mov    %rdi,%rax
ffffffff8020d3a8:	41 54                	push   %r12
ffffffff8020d3aa:	4d 89 c4             	mov    %r8,%r12
ffffffff8020d3ad:	55                   	push   %rbp
ffffffff8020d3ae:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020d3b1:	53                   	push   %rbx
ffffffff8020d3b2:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020d3b5:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020d3b9:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d3be:	80 e6 80             	and    $0x80,%dh
ffffffff8020d3c1:	75 4d                	jne    ffffffff8020d410 <_RME_Pgt_Add.isra.0+0x70>
ffffffff8020d3c3:	4c 39 d3             	cmp    %r10,%rbx
ffffffff8020d3c6:	0f 83 c4 02 00 00    	jae    ffffffff8020d690 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020d3cc:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d3d3:	ff 00 00 
ffffffff8020d3d6:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020d3da:	48 01 fb             	add    %rdi,%rbx
ffffffff8020d3dd:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020d3e4:	00 00 00 
ffffffff8020d3e7:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020d3ea:	48 21 d1             	and    %rdx,%rcx
ffffffff8020d3ed:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020d3f0:	0f 85 87 00 00 00    	jne    ffffffff8020d47d <_RME_Pgt_Add.isra.0+0xdd>
ffffffff8020d3f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020d3fd:	00 00 00 
ffffffff8020d400:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020d407:	e9 d0 01 00 00       	jmp    ffffffff8020d5dc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020d40c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020d410:	48 89 da             	mov    %rbx,%rdx
ffffffff8020d413:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d417:	4c 39 d2             	cmp    %r10,%rdx
ffffffff8020d41a:	0f 83 70 02 00 00    	jae    ffffffff8020d690 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020d420:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020d427:	00 00 00 
ffffffff8020d42a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d42e:	48 01 fa             	add    %rdi,%rdx
ffffffff8020d431:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020d438:	ff 00 00 
ffffffff8020d43b:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020d43e:	49 89 cb             	mov    %rcx,%r11
ffffffff8020d441:	49 21 fb             	and    %rdi,%r11
ffffffff8020d444:	4d 39 c3             	cmp    %r8,%r11
ffffffff8020d447:	74 b7                	je     ffffffff8020d400 <_RME_Pgt_Add.isra.0+0x60>
ffffffff8020d449:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d44d:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d451:	0f 85 19 02 00 00    	jne    ffffffff8020d670 <_RME_Pgt_Add.isra.0+0x2d0>
ffffffff8020d457:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020d45b:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020d461:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020d464:	0f 83 26 02 00 00    	jae    ffffffff8020d690 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020d46a:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020d46e:	48 03 5a 18          	add    0x18(%rdx),%rbx
ffffffff8020d472:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020d475:	48 21 d7             	and    %rdx,%rdi
ffffffff8020d478:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020d47b:	74 83                	je     ffffffff8020d400 <_RME_Pgt_Add.isra.0+0x60>
ffffffff8020d47d:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d481:	48 83 fa 04          	cmp    $0x4,%rdx
ffffffff8020d485:	0f 85 e5 01 00 00    	jne    ffffffff8020d670 <_RME_Pgt_Add.isra.0+0x2d0>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff8020d48b:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8020d492:	0f 85 58 01 00 00    	jne    ffffffff8020d5f0 <_RME_Pgt_Add.isra.0+0x250>
ffffffff8020d498:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020d49b:	0f 83 ef 01 00 00    	jae    ffffffff8020d690 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020d4a1:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020d4a8:	ff 00 00 
ffffffff8020d4ab:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020d4af:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020d4b6:	00 00 00 
ffffffff8020d4b9:	49 8d 3c 01          	lea    (%r9,%rax,1),%rdi
ffffffff8020d4bd:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020d4c0:	48 21 c2             	and    %rax,%rdx
ffffffff8020d4c3:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020d4c6:	0f 84 34 ff ff ff    	je     ffffffff8020d400 <_RME_Pgt_Add.isra.0+0x60>
ffffffff8020d4cc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d4d0:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020d4d4:	0f 85 96 01 00 00    	jne    ffffffff8020d670 <_RME_Pgt_Add.isra.0+0x2d0>
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff8020d4da:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8020d4de:	a8 02                	test   $0x2,%al
ffffffff8020d4e0:	0f 84 9a 01 00 00    	je     ffffffff8020d680 <_RME_Pgt_Add.isra.0+0x2e0>
    RME_CAP_CHECK(Pgt_Src,RME_PGT_FLAG_ADD_SRC);
ffffffff8020d4e6:	48 8b 57 10          	mov    0x10(%rdi),%rdx
ffffffff8020d4ea:	f6 c2 01             	test   $0x1,%dl
ffffffff8020d4ed:	0f 84 8d 01 00 00    	je     ffffffff8020d680 <_RME_Pgt_Add.isra.0+0x2e0>
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff8020d4f3:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d4f6:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff8020d4fa:	48 39 e9             	cmp    %rbp,%rcx
ffffffff8020d4fd:	0f 82 7d 01 00 00    	jb     ffffffff8020d680 <_RME_Pgt_Add.isra.0+0x2e0>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff8020d503:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020d507:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff8020d50c:	48 39 c5             	cmp    %rax,%rbp
ffffffff8020d50f:	0f 82 6b 01 00 00    	jb     ffffffff8020d680 <_RME_Pgt_Add.isra.0+0x2e0>
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff8020d515:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d518:	48 c1 e8 24          	shr    $0x24,%rax
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff8020d51c:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020d51f:	0f 82 5b 01 00 00    	jb     ffffffff8020d680 <_RME_Pgt_Add.isra.0+0x2e0>
       (Pos_Src<RME_PGT_FLAG_LOW(Pgt_Src->Head.Flag)))
ffffffff8020d525:	48 c1 ea 08          	shr    $0x8,%rdx
ffffffff8020d529:	81 e2 ff ff ff 0f    	and    $0xfffffff,%edx
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff8020d52f:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8020d532:	0f 82 48 01 00 00    	jb     ffffffff8020d680 <_RME_Pgt_Add.isra.0+0x2e0>
    Szord_Dst=RME_PGT_SZORD(Pgt_Dst->Order);
ffffffff8020d538:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
    Szord_Src=RME_PGT_SZORD(Pgt_Src->Order);
ffffffff8020d53c:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    Szord_Dst=RME_PGT_SZORD(Pgt_Dst->Order);
ffffffff8020d540:	49 89 cd             	mov    %rcx,%r13
    Szord_Src=RME_PGT_SZORD(Pgt_Src->Order);
ffffffff8020d543:	48 89 d0             	mov    %rdx,%rax
    Szord_Dst=RME_PGT_SZORD(Pgt_Dst->Order);
ffffffff8020d546:	49 c1 ed 20          	shr    $0x20,%r13
    Szord_Src=RME_PGT_SZORD(Pgt_Src->Order);
ffffffff8020d54a:	48 c1 e8 20          	shr    $0x20,%rax
    if(Szord_Dst>Szord_Src)
ffffffff8020d54e:	4c 39 e8             	cmp    %r13,%rax
ffffffff8020d551:	0f 82 49 01 00 00    	jb     ffffffff8020d6a0 <_RME_Pgt_Add.isra.0+0x300>
    if(((Pos_Dst>>RME_PGT_NMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020d557:	49 89 e8             	mov    %rbp,%r8
       ((Pos_Src>>RME_PGT_NMORD(Pgt_Src->Order))!=0U))
ffffffff8020d55a:	49 89 f3             	mov    %rsi,%r11
    if(((Pos_Dst>>RME_PGT_NMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020d55d:	49 d3 e8             	shr    %cl,%r8
       ((Pos_Src>>RME_PGT_NMORD(Pgt_Src->Order))!=0U))
ffffffff8020d560:	89 d1                	mov    %edx,%ecx
ffffffff8020d562:	49 d3 eb             	shr    %cl,%r11
    if(((Pos_Dst>>RME_PGT_NMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020d565:	4d 09 d8             	or     %r11,%r8
ffffffff8020d568:	0f 85 32 01 00 00    	jne    ffffffff8020d6a0 <_RME_Pgt_Add.isra.0+0x300>
    if(Szord_Src<RME_WORD_BIT)
ffffffff8020d56e:	48 83 f8 3f          	cmp    $0x3f,%rax
ffffffff8020d572:	77 21                	ja     ffffffff8020d595 <_RME_Pgt_Add.isra.0+0x1f5>
        if(RME_POW2(Szord_Src)<=(Index<<Szord_Dst))
ffffffff8020d574:	89 c1                	mov    %eax,%ecx
ffffffff8020d576:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020d57b:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020d57e:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020d581:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d584:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
ffffffff8020d589:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020d58c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d58f:	0f 83 0b 01 00 00    	jae    ffffffff8020d6a0 <_RME_Pgt_Add.isra.0+0x300>
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
ffffffff8020d595:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
ffffffff8020d59a:	48 89 e2             	mov    %rsp,%rdx
ffffffff8020d59d:	e8 ee d7 00 00       	call   ffffffff8021ad90 <__RME_Pgt_Lookup>
        Paddr_Dst=Paddr_Src;
ffffffff8020d5a2:	48 8b 34 24          	mov    (%rsp),%rsi
    if(Szord_Dst<RME_WORD_BIT)
ffffffff8020d5a6:	49 83 fd 3f          	cmp    $0x3f,%r13
ffffffff8020d5aa:	77 0f                	ja     ffffffff8020d5bb <_RME_Pgt_Add.isra.0+0x21b>
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
ffffffff8020d5ac:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff8020d5b1:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020d5b4:	48 d3 e6             	shl    %cl,%rsi
ffffffff8020d5b7:	48 03 34 24          	add    (%rsp),%rsi
    if(((Flag_Dst)&(~Flag_Src))!=0U)
ffffffff8020d5bb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8020d5c0:	48 f7 d0             	not    %rax
ffffffff8020d5c3:	4c 85 e0             	test   %r12,%rax
ffffffff8020d5c6:	0f 85 e4 00 00 00    	jne    ffffffff8020d6b0 <_RME_Pgt_Add.isra.0+0x310>
    if(__RME_Pgt_Page_Map(Pgt_Dst,Paddr_Dst,Pos_Dst,Flag_Dst)<0)
ffffffff8020d5cc:	4c 89 e1             	mov    %r12,%rcx
ffffffff8020d5cf:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020d5d2:	48 89 df             	mov    %rbx,%rdi
ffffffff8020d5d5:	e8 36 d6 00 00       	call   ffffffff8021ac10 <__RME_Pgt_Page_Map>
    return 0;
ffffffff8020d5da:	31 c0                	xor    %eax,%eax
}
ffffffff8020d5dc:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020d5e0:	5b                   	pop    %rbx
ffffffff8020d5e1:	5d                   	pop    %rbp
ffffffff8020d5e2:	41 5c                	pop    %r12
ffffffff8020d5e4:	41 5d                	pop    %r13
ffffffff8020d5e6:	c3                   	ret
ffffffff8020d5e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020d5ee:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff8020d5f0:	4c 89 ca             	mov    %r9,%rdx
ffffffff8020d5f3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d5f7:	4c 39 d2             	cmp    %r10,%rdx
ffffffff8020d5fa:	0f 83 90 00 00 00    	jae    ffffffff8020d690 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020d600:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d607:	ff 00 00 
ffffffff8020d60a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d60e:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020d615:	00 00 00 
ffffffff8020d618:	48 01 d0             	add    %rdx,%rax
ffffffff8020d61b:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020d61e:	48 89 d7             	mov    %rdx,%rdi
ffffffff8020d621:	48 21 cf             	and    %rcx,%rdi
ffffffff8020d624:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020d627:	0f 84 d3 fd ff ff    	je     ffffffff8020d400 <_RME_Pgt_Add.isra.0+0x60>
ffffffff8020d62d:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d631:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020d635:	75 39                	jne    ffffffff8020d670 <_RME_Pgt_Add.isra.0+0x2d0>
ffffffff8020d637:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020d63b:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff8020d642:	49 39 d1             	cmp    %rdx,%r9
ffffffff8020d645:	73 49                	jae    ffffffff8020d690 <_RME_Pgt_Add.isra.0+0x2f0>
ffffffff8020d647:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8020d64b:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020d64f:	4c 01 cf             	add    %r9,%rdi
ffffffff8020d652:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020d655:	48 21 c1             	and    %rax,%rcx
ffffffff8020d658:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8020d65b:	0f 85 6b fe ff ff    	jne    ffffffff8020d4cc <_RME_Pgt_Add.isra.0+0x12c>
ffffffff8020d661:	e9 9a fd ff ff       	jmp    ffffffff8020d400 <_RME_Pgt_Add.isra.0+0x60>
ffffffff8020d666:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020d66d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d670:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020d677:	e9 60 ff ff ff       	jmp    ffffffff8020d5dc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020d67c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff8020d680:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020d687:	e9 50 ff ff ff       	jmp    ffffffff8020d5dc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020d68c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d690:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020d697:	e9 40 ff ff ff       	jmp    ffffffff8020d5dc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020d69c:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PGT_ADDR;
ffffffff8020d6a0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020d6a7:	e9 30 ff ff ff       	jmp    ffffffff8020d5dc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020d6ac:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PGT_PERM;
ffffffff8020d6b0:	48 c7 c0 98 ff ff ff 	mov    $0xffffffffffffff98,%rax
ffffffff8020d6b7:	e9 20 ff ff ff       	jmp    ffffffff8020d5dc <_RME_Pgt_Add.isra.0+0x23c>
ffffffff8020d6bc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020d6c0 <_RME_Cpt_Add.isra.0>:
static rme_ret_t _RME_Cpt_Add(struct RME_Cap_Cpt* Cpt,
ffffffff8020d6c0:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d6c3:	41 54                	push   %r12
ffffffff8020d6c5:	49 89 f2             	mov    %rsi,%r10
ffffffff8020d6c8:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020d6cb:	55                   	push   %rbp
ffffffff8020d6cc:	53                   	push   %rbx
ffffffff8020d6cd:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020d6d2:	f6 c4 80             	test   $0x80,%ah
ffffffff8020d6d5:	0f 85 d5 01 00 00    	jne    ffffffff8020d8b0 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d6db:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020d6de:	0f 83 fc 03 00 00    	jae    ffffffff8020dae0 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020d6e4:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020d6eb:	ff 00 00 
ffffffff8020d6ee:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d6f2:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020d6f9:	00 00 00 
ffffffff8020d6fc:	48 01 f8             	add    %rdi,%rax
ffffffff8020d6ff:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020d702:	49 21 cb             	and    %rcx,%r11
ffffffff8020d705:	49 39 db             	cmp    %rbx,%r11
ffffffff8020d708:	0f 84 12 02 00 00    	je     ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x260>
ffffffff8020d70e:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d712:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d716:	0f 85 b4 03 00 00    	jne    ffffffff8020dad0 <_RME_Cpt_Add.isra.0+0x410>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020d71c:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020d723:	0f 85 07 02 00 00    	jne    ffffffff8020d930 <_RME_Cpt_Add.isra.0+0x270>
ffffffff8020d729:	4d 39 d0             	cmp    %r10,%r8
ffffffff8020d72c:	0f 83 ae 03 00 00    	jae    ffffffff8020dae0 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020d732:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020d739:	00 00 00 
ffffffff8020d73c:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d740:	49 01 f8             	add    %rdi,%r8
ffffffff8020d743:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020d74a:	ff 00 00 
ffffffff8020d74d:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020d750:	48 21 cf             	and    %rcx,%rdi
ffffffff8020d753:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8020d756:	0f 84 c4 01 00 00    	je     ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x260>
ffffffff8020d75c:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d760:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d764:	0f 85 66 03 00 00    	jne    ffffffff8020dad0 <_RME_Cpt_Add.isra.0+0x410>
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020d76a:	f6 40 10 10          	testb  $0x10,0x10(%rax)
ffffffff8020d76e:	0f 84 94 02 00 00    	je     ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
    RME_CAP_CHECK(Cpt_Src,RME_CPT_FLAG_ADD_SRC);
ffffffff8020d774:	41 f6 40 10 08       	testb  $0x8,0x10(%r8)
ffffffff8020d779:	0f 84 89 02 00 00    	je     ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020d77f:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8020d783:	0f 83 57 03 00 00    	jae    ffffffff8020dae0 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020d789:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d78d:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff8020d791:	48 89 d7             	mov    %rdx,%rdi
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020d794:	4d 3b 48 28          	cmp    0x28(%r8),%r9
ffffffff8020d798:	0f 83 42 03 00 00    	jae    ffffffff8020dae0 <_RME_Cpt_Add.isra.0+0x420>
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020d79e:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff8020d7a5:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020d7a8:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020d7ac:	4d 03 48 18          	add    0x18(%r8),%r9
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020d7b0:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020d7b7:	00 00 00 
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Src->Head.Type_Stat));
ffffffff8020d7ba:	49 8b 11             	mov    (%r9),%rdx
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020d7bd:	48 21 d0             	and    %rdx,%rax
ffffffff8020d7c0:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020d7c3:	0f 84 57 01 00 00    	je     ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x260>
    if(Type_Stat==0U)
ffffffff8020d7c9:	48 85 d2             	test   %rdx,%rdx
ffffffff8020d7cc:	0f 84 2a 03 00 00    	je     ffffffff8020dafc <_RME_Cpt_Add.isra.0+0x43c>
    Src_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020d7d2:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d7d5:	48 c1 e9 30          	shr    $0x30,%rcx
    if(Src_Type==RME_CAP_TYPE_PGT)
ffffffff8020d7d9:	48 83 f9 04          	cmp    $0x4,%rcx
ffffffff8020d7dd:	0f 84 cd 01 00 00    	je     ffffffff8020d9b0 <_RME_Cpt_Add.isra.0+0x2f0>
    else if(Src_Type==RME_CAP_TYPE_KFN)
ffffffff8020d7e3:	48 83 f9 01          	cmp    $0x1,%rcx
ffffffff8020d7e7:	0f 84 3b 02 00 00    	je     ffffffff8020da28 <_RME_Cpt_Add.isra.0+0x368>
    else if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020d7ed:	48 83 f9 02          	cmp    $0x2,%rcx
ffffffff8020d7f1:	0f 84 61 02 00 00    	je     ffffffff8020da58 <_RME_Cpt_Add.isra.0+0x398>
        if(Flag==0U)
ffffffff8020d7f7:	48 85 f6             	test   %rsi,%rsi
ffffffff8020d7fa:	0f 84 08 02 00 00    	je     ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
        if((Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020d800:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020d804:	48 f7 d0             	not    %rax
ffffffff8020d807:	48 85 f0             	test   %rsi,%rax
ffffffff8020d80a:	0f 85 f8 01 00 00    	jne    ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff8020d810:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020d813:	48 85 c0             	test   %rax,%rax
ffffffff8020d816:	0f 85 d4 02 00 00    	jne    ffffffff8020daf0 <_RME_Cpt_Add.isra.0+0x430>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020d81c:	49 b8 00 00 00 00 01 	movabs $0x100000000,%r8
ffffffff8020d823:	00 00 00 
ffffffff8020d826:	f0 4c 0f b1 07       	lock cmpxchg %r8,(%rdi)
ffffffff8020d82b:	41 0f 94 c0          	sete   %r8b
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff8020d82f:	45 84 c0             	test   %r8b,%r8b
ffffffff8020d832:	0f 84 b8 02 00 00    	je     ffffffff8020daf0 <_RME_Cpt_Add.isra.0+0x430>
ffffffff8020d838:	48 c7 47 20 01 00 00 	movq   $0x1,0x20(%rdi)
ffffffff8020d83f:	00 
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020d840:	48 83 e9 01          	sub    $0x1,%rcx
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
ffffffff8020d844:	48 89 77 10          	mov    %rsi,0x10(%rdi)
ffffffff8020d848:	49 8b 41 18          	mov    0x18(%r9),%rax
ffffffff8020d84c:	48 89 47 18          	mov    %rax,0x18(%rdi)
ffffffff8020d850:	49 8b 41 28          	mov    0x28(%r9),%rax
ffffffff8020d854:	48 89 47 28          	mov    %rax,0x28(%rdi)
ffffffff8020d858:	49 8b 41 30          	mov    0x30(%r9),%rax
ffffffff8020d85c:	48 89 47 30          	mov    %rax,0x30(%rdi)
ffffffff8020d860:	49 8b 41 38          	mov    0x38(%r9),%rax
ffffffff8020d864:	48 89 47 38          	mov    %rax,0x38(%rdi)
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020d868:	48 83 f9 01          	cmp    $0x1,%rcx
ffffffff8020d86c:	0f 86 a6 01 00 00    	jbe    ffffffff8020da18 <_RME_Cpt_Add.isra.0+0x358>
        Capobj_Dst->Head.Root_Ref=RME_CAP_CONV_ROOT(Capobj_Src,rme_ptr_t);
ffffffff8020d872:	49 8b 01             	mov    (%r9),%rax
ffffffff8020d875:	85 c0                	test   %eax,%eax
ffffffff8020d877:	74 04                	je     ffffffff8020d87d <_RME_Cpt_Add.isra.0+0x1bd>
ffffffff8020d879:	4d 8b 49 08          	mov    0x8(%r9),%r9
ffffffff8020d87d:	4c 89 4f 08          	mov    %r9,0x8(%rdi)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020d881:	b9 01 00 00 00       	mov    $0x1,%ecx
        RME_FETCH_ADD(&(((volatile struct RME_Cap_Struct*)
ffffffff8020d886:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffffff8020d88a:	f0 48 0f c1 48 08    	lock xadd %rcx,0x8(%rax)
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff8020d890:	48 b8 00 00 00 00 00 	movabs $0xffff000000000000,%rax
ffffffff8020d897:	00 ff ff 
ffffffff8020d89a:	48 21 c2             	and    %rax,%rdx
    return 0;
ffffffff8020d89d:	31 c0                	xor    %eax,%eax
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff8020d89f:	48 83 ca 01          	or     $0x1,%rdx
ffffffff8020d8a3:	48 89 17             	mov    %rdx,(%rdi)
}
ffffffff8020d8a6:	5b                   	pop    %rbx
ffffffff8020d8a7:	5d                   	pop    %rbp
ffffffff8020d8a8:	41 5c                	pop    %r12
ffffffff8020d8aa:	c3                   	ret
ffffffff8020d8ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020d8b0:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d8b3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020d8b7:	4c 39 d1             	cmp    %r10,%rcx
ffffffff8020d8ba:	0f 83 20 02 00 00    	jae    ffffffff8020dae0 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020d8c0:	48 bb 00 00 00 00 ff 	movabs $0xffff00000000,%rbx
ffffffff8020d8c7:	ff 00 00 
ffffffff8020d8ca:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020d8ce:	48 bd 00 00 00 00 02 	movabs $0x200000000,%rbp
ffffffff8020d8d5:	00 00 00 
ffffffff8020d8d8:	48 01 f9             	add    %rdi,%rcx
ffffffff8020d8db:	4c 8b 19             	mov    (%rcx),%r11
ffffffff8020d8de:	4d 89 dc             	mov    %r11,%r12
ffffffff8020d8e1:	49 21 dc             	and    %rbx,%r12
ffffffff8020d8e4:	49 39 ec             	cmp    %rbp,%r12
ffffffff8020d8e7:	74 37                	je     ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x260>
ffffffff8020d8e9:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff8020d8ed:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff8020d8f1:	0f 85 d9 01 00 00    	jne    ffffffff8020dad0 <_RME_Cpt_Add.isra.0+0x410>
ffffffff8020d8f7:	4c 8b 59 28          	mov    0x28(%rcx),%r11
ffffffff8020d8fb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020d900:	4c 39 d8             	cmp    %r11,%rax
ffffffff8020d903:	0f 83 d7 01 00 00    	jae    ffffffff8020dae0 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020d909:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d90d:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020d911:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020d914:	48 21 cb             	and    %rcx,%rbx
ffffffff8020d917:	48 39 eb             	cmp    %rbp,%rbx
ffffffff8020d91a:	0f 85 ee fd ff ff    	jne    ffffffff8020d70e <_RME_Cpt_Add.isra.0+0x4e>
ffffffff8020d920:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020d927:	e9 7a ff ff ff       	jmp    ffffffff8020d8a6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020d92c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020d930:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020d933:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020d937:	4c 39 d1             	cmp    %r10,%rcx
ffffffff8020d93a:	0f 83 a0 01 00 00    	jae    ffffffff8020dae0 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020d940:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020d947:	ff 00 00 
ffffffff8020d94a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020d94e:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020d955:	00 00 00 
ffffffff8020d958:	48 01 f9             	add    %rdi,%rcx
ffffffff8020d95b:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8020d95e:	48 89 fb             	mov    %rdi,%rbx
ffffffff8020d961:	4c 21 d3             	and    %r10,%rbx
ffffffff8020d964:	4c 39 db             	cmp    %r11,%rbx
ffffffff8020d967:	74 b7                	je     ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x260>
ffffffff8020d969:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020d96d:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020d971:	0f 85 59 01 00 00    	jne    ffffffff8020dad0 <_RME_Cpt_Add.isra.0+0x410>
ffffffff8020d977:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8020d97b:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020d982:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020d985:	0f 83 55 01 00 00    	jae    ffffffff8020dae0 <_RME_Cpt_Add.isra.0+0x420>
ffffffff8020d98b:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d98f:	4c 03 41 18          	add    0x18(%rcx),%r8
ffffffff8020d993:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020d996:	49 21 ca             	and    %rcx,%r10
ffffffff8020d999:	4d 39 da             	cmp    %r11,%r10
ffffffff8020d99c:	0f 85 ba fd ff ff    	jne    ffffffff8020d75c <_RME_Cpt_Add.isra.0+0x9c>
ffffffff8020d9a2:	e9 79 ff ff ff       	jmp    ffffffff8020d920 <_RME_Cpt_Add.isra.0+0x260>
ffffffff8020d9a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020d9ae:	00 00 
        if(RME_PGT_FLAG_HIGH(Flag)>RME_PGT_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020d9b0:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020d9b4:	49 89 f2             	mov    %rsi,%r10
ffffffff8020d9b7:	49 c1 ea 24          	shr    $0x24,%r10
ffffffff8020d9bb:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020d9bf:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020d9c2:	72 44                	jb     ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
        if(RME_PGT_FLAG_LOW(Flag)<RME_PGT_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020d9c4:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020d9c8:	49 89 f0             	mov    %rsi,%r8
ffffffff8020d9cb:	49 c1 e8 08          	shr    $0x8,%r8
ffffffff8020d9cf:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020d9d3:	41 81 e0 ff ff ff 0f 	and    $0xfffffff,%r8d
ffffffff8020d9da:	25 ff ff ff 0f       	and    $0xfffffff,%eax
        if(RME_PGT_FLAG_HIGH(Flag)<RME_PGT_FLAG_LOW(Flag))
ffffffff8020d9df:	49 39 c0             	cmp    %rax,%r8
ffffffff8020d9e2:	72 24                	jb     ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
ffffffff8020d9e4:	4d 39 c2             	cmp    %r8,%r10
ffffffff8020d9e7:	72 1f                	jb     ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
        if(RME_PGT_FLAG_FLAG(Flag)==0U)
ffffffff8020d9e9:	40 84 f6             	test   %sil,%sil
ffffffff8020d9ec:	74 1a                	je     ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
        if((RME_PGT_FLAG_FLAG(Flag)&(~RME_PGT_FLAG_FLAG(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020d9ee:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020d9f2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d9f5:	48 f7 d0             	not    %rax
ffffffff8020d9f8:	48 21 f0             	and    %rsi,%rax
ffffffff8020d9fb:	84 c0                	test   %al,%al
ffffffff8020d9fd:	0f 84 0d fe ff ff    	je     ffffffff8020d810 <_RME_Cpt_Add.isra.0+0x150>
ffffffff8020da03:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020da08:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020da0f:	e9 92 fe ff ff       	jmp    ffffffff8020d8a6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020da14:	0f 1f 40 00          	nopl   0x0(%rax)
        Capobj_Dst->Head.Root_Ref=0U;
ffffffff8020da18:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
ffffffff8020da1f:	00 
ffffffff8020da20:	e9 6b fe ff ff       	jmp    ffffffff8020d890 <_RME_Cpt_Add.isra.0+0x1d0>
ffffffff8020da25:	0f 1f 00             	nopl   (%rax)
        if(RME_KFN_FLAG_HIGH(Flag)>RME_KFN_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020da28:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020da2c:	49 89 f0             	mov    %rsi,%r8
ffffffff8020da2f:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff8020da33:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020da37:	4c 39 c0             	cmp    %r8,%rax
ffffffff8020da3a:	72 cc                	jb     ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
        if(RME_KFN_FLAG_LOW(Flag)<RME_KFN_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020da3c:	49 8b 41 10          	mov    0x10(%r9),%rax
ffffffff8020da40:	41 89 f2             	mov    %esi,%r10d
        if(RME_KFN_FLAG_HIGH(Flag)<RME_KFN_FLAG_LOW(Flag))
ffffffff8020da43:	39 f0                	cmp    %esi,%eax
ffffffff8020da45:	77 c1                	ja     ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
ffffffff8020da47:	4d 39 d0             	cmp    %r10,%r8
ffffffff8020da4a:	0f 83 c0 fd ff ff    	jae    ffffffff8020d810 <_RME_Cpt_Add.isra.0+0x150>
ffffffff8020da50:	eb b6                	jmp    ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
ffffffff8020da52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020da58:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020da5d:	48 89 f2             	mov    %rsi,%rdx
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020da60:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
ffffffff8020da67:	ff ff ff 
ffffffff8020da6a:	48 21 f1             	and    %rsi,%rcx
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020da6d:	48 c1 e2 20          	shl    $0x20,%rdx
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020da71:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020da75:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff8020da79:	48 09 c8             	or     %rcx,%rax
        if(Kom_End<=Kom_Begin)
ffffffff8020da7c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020da7f:	73 87                	jae    ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020da81:	49 8b 49 28          	mov    0x28(%r9),%rcx
ffffffff8020da85:	48 01 ca             	add    %rcx,%rdx
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020da88:	49 8b 49 28          	mov    0x28(%r9),%rcx
ffffffff8020da8c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020da8f:	0f 82 73 ff ff ff    	jb     ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020da95:	49 8b 71 28          	mov    0x28(%r9),%rsi
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020da99:	49 8b 49 28          	mov    0x28(%r9),%rcx
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020da9d:	48 01 f0             	add    %rsi,%rax
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020daa0:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020daa3:	0f 82 5f ff ff ff    	jb     ffffffff8020da08 <_RME_Cpt_Add.isra.0+0x348>
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020daa9:	49 8b 49 28          	mov    0x28(%r9),%rcx
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020daad:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020dab4:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020dab7:	0f 82 e9 fd ff ff    	jb     ffffffff8020d8a6 <_RME_Cpt_Add.isra.0+0x1e6>
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->End<(Kom_End-1U))
ffffffff8020dabd:	49 8b 51 30          	mov    0x30(%r9),%rdx
            return RME_ERR_CPT_FLAG;
ffffffff8020dac1:	e9 e0 fd ff ff       	jmp    ffffffff8020d8a6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020dac6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020dacd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020dad0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dad7:	e9 ca fd ff ff       	jmp    ffffffff8020d8a6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020dadc:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020dae0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dae7:	e9 ba fd ff ff       	jmp    ffffffff8020d8a6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020daec:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_CPT_EXIST;
ffffffff8020daf0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020daf7:	e9 aa fd ff ff       	jmp    ffffffff8020d8a6 <_RME_Cpt_Add.isra.0+0x1e6>
        return RME_ERR_CPT_NULL;
ffffffff8020dafc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020db03:	e9 9e fd ff ff       	jmp    ffffffff8020d8a6 <_RME_Cpt_Add.isra.0+0x1e6>
ffffffff8020db08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020db0f:	00 

ffffffff8020db10 <_RME_Run_Notif>:
{
ffffffff8020db10:	41 54                	push   %r12
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8020db12:	48 8d 47 10          	lea    0x10(%rdi),%rax
{
ffffffff8020db16:	55                   	push   %rbp
ffffffff8020db17:	53                   	push   %rbx
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8020db18:	48 39 47 10          	cmp    %rax,0x10(%rdi)
ffffffff8020db1c:	74 42                	je     ffffffff8020db60 <_RME_Run_Notif+0x50>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff8020db1e:	48 8b 5f 70          	mov    0x70(%rdi),%rbx
ffffffff8020db22:	48 85 db             	test   %rbx,%rbx
ffffffff8020db25:	74 31                	je     ffffffff8020db58 <_RME_Run_Notif+0x48>
    Thd_Sig=Cap_Sig->Thd;
ffffffff8020db27:	48 8b 6b 30          	mov    0x30(%rbx),%rbp
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff8020db2b:	48 85 ed             	test   %rbp,%rbp
ffffffff8020db2e:	74 0e                	je     ffffffff8020db3e <_RME_Run_Notif+0x2e>
        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff8020db30:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff8020db34:	e8 06 dd ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020db39:	49 39 c4             	cmp    %rax,%r12
ffffffff8020db3c:	74 62                	je     ffffffff8020dba0 <_RME_Run_Notif+0x90>
ffffffff8020db3e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020db43:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff8020db49:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff8020db50:	ff ff 7f 
ffffffff8020db53:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020db56:	72 35                	jb     ffffffff8020db8d <_RME_Run_Notif+0x7d>
}
ffffffff8020db58:	5b                   	pop    %rbx
ffffffff8020db59:	5d                   	pop    %rbp
ffffffff8020db5a:	41 5c                	pop    %r12
ffffffff8020db5c:	c3                   	ret
ffffffff8020db5d:	0f 1f 00             	nopl   (%rax)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff8020db60:	48 8b 57 68          	mov    0x68(%rdi),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff8020db64:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
ffffffff8020db6b:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff8020db6f:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff8020db76:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    New->Next=Next;
ffffffff8020db7b:	66 48 0f 6e c9       	movq   %rcx,%xmm1
ffffffff8020db80:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff8020db84:	0f 11 47 10          	movups %xmm0,0x10(%rdi)
    Prev->Next=New;
ffffffff8020db88:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff8020db8b:	eb 91                	jmp    ffffffff8020db1e <_RME_Run_Notif+0xe>
ffffffff8020db8d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020db94:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
}
ffffffff8020db9a:	eb bc                	jmp    ffffffff8020db58 <_RME_Run_Notif+0x48>
ffffffff8020db9c:	0f 1f 40 00          	nopl   0x0(%rax)
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff8020dba0:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff8020dba7:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8020dbac:	e8 8f d4 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff8020dbb1:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff8020dbb6:	74 68                	je     ffffffff8020dc20 <_RME_Run_Notif+0x110>
    Prio=Thd->Sched.Prio;
ffffffff8020dbb8:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff8020dbbc:	48 8b 45 28          	mov    0x28(%rbp),%rax
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff8020dbc0:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff8020dbc7:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8020dbc8:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020dbcb:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8020dbcf:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff8020dbd3:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff8020dbd8:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff8020dbdc:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020dbe1:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff8020dbe4:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020dbe8:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff8020dbec:	66 48 0f 6e d2       	movq   %rdx,%xmm2
ffffffff8020dbf1:	66 0f 6c c2          	punpcklqdq %xmm2,%xmm0
ffffffff8020dbf5:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff8020dbf9:	48 89 2a             	mov    %rbp,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020dbfc:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020dc01:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020dc04:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        Cap_Sig->Thd=RME_NULL;
ffffffff8020dc09:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff8020dc10:	00 
ffffffff8020dc11:	e9 42 ff ff ff       	jmp    ffffffff8020db58 <_RME_Run_Notif+0x48>
ffffffff8020dc16:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020dc1d:	00 00 00 
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff8020dc20:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff8020dc27:	00 
            _RME_Run_Notif(Thd_Sig);
ffffffff8020dc28:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020dc2b:	e8 e0 fe ff ff       	call   ffffffff8020db10 <_RME_Run_Notif>
ffffffff8020dc30:	eb d7                	jmp    ffffffff8020dc09 <_RME_Run_Notif+0xf9>
ffffffff8020dc32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020dc39:	00 00 00 00 
ffffffff8020dc3d:	0f 1f 00             	nopl   (%rax)

ffffffff8020dc40 <RME_Int_Print>:
{
ffffffff8020dc40:	f3 0f 1e fa          	endbr64
ffffffff8020dc44:	41 57                	push   %r15
ffffffff8020dc46:	41 56                	push   %r14
ffffffff8020dc48:	41 55                	push   %r13
ffffffff8020dc4a:	41 54                	push   %r12
ffffffff8020dc4c:	53                   	push   %rbx
    if(Int==0)
ffffffff8020dc4d:	48 85 ff             	test   %rdi,%rdi
ffffffff8020dc50:	0f 84 ea 00 00 00    	je     ffffffff8020dd40 <RME_Int_Print+0x100>
ffffffff8020dc56:	49 89 fe             	mov    %rdi,%r14
    if(Int<0)
ffffffff8020dc59:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        Num=0;
ffffffff8020dc5f:	bf 00 00 00 00       	mov    $0x0,%edi
    if(Int<0)
ffffffff8020dc64:	0f 88 b6 00 00 00    	js     ffffffff8020dd20 <RME_Int_Print+0xe0>
        Iter/=10;
ffffffff8020dc6a:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
ffffffff8020dc71:	cc cc cc 
ffffffff8020dc74:	49 f7 e6             	mul    %r14
        if(Iter!=0)
ffffffff8020dc77:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020dc7a:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff8020dc7e:	0f 84 dc 00 00 00    	je     ffffffff8020dd60 <RME_Int_Print+0x120>
        Count++;
ffffffff8020dc84:	41 bf 01 00 00 00    	mov    $0x1,%r15d
    Div=1;
ffffffff8020dc8a:	bb 01 00 00 00       	mov    $0x1,%ebx
        Iter/=10;
ffffffff8020dc8f:	48 be 67 66 66 66 66 	movabs $0x6666666666666667,%rsi
ffffffff8020dc96:	66 66 66 
ffffffff8020dc99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020dca0:	48 89 c8             	mov    %rcx,%rax
            Div*=10;
ffffffff8020dca3:	48 8d 1c 9b          	lea    (%rbx,%rbx,4),%rbx
        Count++;
ffffffff8020dca7:	49 83 c7 01          	add    $0x1,%r15
        Iter/=10;
ffffffff8020dcab:	48 f7 ee             	imul   %rsi
ffffffff8020dcae:	48 89 c8             	mov    %rcx,%rax
            Div*=10;
ffffffff8020dcb1:	48 01 db             	add    %rbx,%rbx
        Iter/=10;
ffffffff8020dcb4:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020dcb8:	48 c1 fa 02          	sar    $0x2,%rdx
        if(Iter!=0)
ffffffff8020dcbc:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020dcbf:	48 29 c1             	sub    %rax,%rcx
ffffffff8020dcc2:	75 dc                	jne    ffffffff8020dca0 <RME_Int_Print+0x60>
        Div/=10;
ffffffff8020dcc4:	49 bc 67 66 66 66 66 	movabs $0x6666666666666667,%r12
ffffffff8020dccb:	66 66 66 
    Num+=Count;
ffffffff8020dcce:	4e 8d 2c 3f          	lea    (%rdi,%r15,1),%r13
    while(Count>0)
ffffffff8020dcd2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Count--;
ffffffff8020dcd8:	4c 89 f0             	mov    %r14,%rax
ffffffff8020dcdb:	49 83 ef 01          	sub    $0x1,%r15
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020dcdf:	48 99                	cqto
ffffffff8020dce1:	48 f7 fb             	idiv   %rbx
ffffffff8020dce4:	83 c0 30             	add    $0x30,%eax
ffffffff8020dce7:	49 89 d6             	mov    %rdx,%r14
ffffffff8020dcea:	0f be f8             	movsbl %al,%edi
ffffffff8020dced:	e8 be b0 00 00       	call   ffffffff80218db0 <__RME_Putchar>
        Div/=10;
ffffffff8020dcf2:	48 89 d8             	mov    %rbx,%rax
ffffffff8020dcf5:	49 f7 ec             	imul   %r12
ffffffff8020dcf8:	48 89 d8             	mov    %rbx,%rax
ffffffff8020dcfb:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020dcff:	48 c1 fa 02          	sar    $0x2,%rdx
ffffffff8020dd03:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020dd06:	48 29 c3             	sub    %rax,%rbx
    while(Count>0)
ffffffff8020dd09:	4d 85 ff             	test   %r15,%r15
ffffffff8020dd0c:	75 ca                	jne    ffffffff8020dcd8 <RME_Int_Print+0x98>
}
ffffffff8020dd0e:	5b                   	pop    %rbx
ffffffff8020dd0f:	4c 89 e8             	mov    %r13,%rax
ffffffff8020dd12:	41 5c                	pop    %r12
ffffffff8020dd14:	41 5d                	pop    %r13
ffffffff8020dd16:	41 5e                	pop    %r14
ffffffff8020dd18:	41 5f                	pop    %r15
ffffffff8020dd1a:	c3                   	ret
ffffffff8020dd1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar('-');
ffffffff8020dd20:	bf 2d 00 00 00       	mov    $0x2d,%edi
        Abs=-Int;
ffffffff8020dd25:	49 f7 de             	neg    %r14
ffffffff8020dd28:	41 bd 02 00 00 00    	mov    $0x2,%r13d
        __RME_Putchar('-');
ffffffff8020dd2e:	e8 7d b0 00 00       	call   ffffffff80218db0 <__RME_Putchar>
        Num=1;
ffffffff8020dd33:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff8020dd38:	e9 2d ff ff ff       	jmp    ffffffff8020dc6a <RME_Int_Print+0x2a>
ffffffff8020dd3d:	0f 1f 00             	nopl   (%rax)
        return 1;
ffffffff8020dd40:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        __RME_Putchar('0');
ffffffff8020dd46:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020dd4b:	e8 60 b0 00 00       	call   ffffffff80218db0 <__RME_Putchar>
}
ffffffff8020dd50:	5b                   	pop    %rbx
ffffffff8020dd51:	4c 89 e8             	mov    %r13,%rax
ffffffff8020dd54:	41 5c                	pop    %r12
ffffffff8020dd56:	41 5d                	pop    %r13
ffffffff8020dd58:	41 5e                	pop    %r14
ffffffff8020dd5a:	41 5f                	pop    %r15
ffffffff8020dd5c:	c3                   	ret
ffffffff8020dd5d:	0f 1f 00             	nopl   (%rax)
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020dd60:	41 8d 7e 30          	lea    0x30(%r14),%edi
ffffffff8020dd64:	40 0f be ff          	movsbl %dil,%edi
ffffffff8020dd68:	e8 43 b0 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    while(Count>0)
ffffffff8020dd6d:	eb 9f                	jmp    ffffffff8020dd0e <RME_Int_Print+0xce>
ffffffff8020dd6f:	90                   	nop

ffffffff8020dd70 <RME_Hex_Print>:
{
ffffffff8020dd70:	f3 0f 1e fa          	endbr64
ffffffff8020dd74:	41 54                	push   %r12
ffffffff8020dd76:	55                   	push   %rbp
ffffffff8020dd77:	53                   	push   %rbx
    if(Uint==0U)
ffffffff8020dd78:	48 85 ff             	test   %rdi,%rdi
ffffffff8020dd7b:	0f 84 7f 00 00 00    	je     ffffffff8020de00 <RME_Hex_Print+0x90>
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020dd81:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020dd84:	48 89 fd             	mov    %rdi,%rbp
    Iter=Uint;
ffffffff8020dd87:	48 89 f8             	mov    %rdi,%rax
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020dd8a:	41 bc 10 00 00 00    	mov    $0x10,%r12d
ffffffff8020dd90:	48 c1 ea 3c          	shr    $0x3c,%rdx
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020dd94:	bb 10 00 00 00       	mov    $0x10,%ebx
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020dd99:	75 32                	jne    ffffffff8020ddcd <RME_Hex_Print+0x5d>
ffffffff8020dd9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        Iter<<=4;
ffffffff8020dda0:	48 c1 e0 04          	shl    $0x4,%rax
        Count++;
ffffffff8020dda4:	48 83 c2 01          	add    $0x1,%rdx
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020dda8:	48 89 c6             	mov    %rax,%rsi
ffffffff8020ddab:	48 c1 ee 3c          	shr    $0x3c,%rsi
ffffffff8020ddaf:	74 ef                	je     ffffffff8020dda0 <RME_Hex_Print+0x30>
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020ddb1:	bb 10 00 00 00       	mov    $0x10,%ebx
    while(Count>0U)
ffffffff8020ddb6:	48 29 d3             	sub    %rdx,%rbx
ffffffff8020ddb9:	74 65                	je     ffffffff8020de20 <RME_Hex_Print+0xb0>
    return (rme_cnt_t)Num;
ffffffff8020ddbb:	49 89 dc             	mov    %rbx,%r12
ffffffff8020ddbe:	eb 0d                	jmp    ffffffff8020ddcd <RME_Hex_Print+0x5d>
            __RME_Putchar((rme_s8_t)Iter+'0');
ffffffff8020ddc0:	8d 78 30             	lea    0x30(%rax),%edi
ffffffff8020ddc3:	e8 e8 af 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    while(Count>0U)
ffffffff8020ddc8:	48 85 db             	test   %rbx,%rbx
ffffffff8020ddcb:	74 27                	je     ffffffff8020ddf4 <RME_Hex_Print+0x84>
        Count--;
ffffffff8020ddcd:	48 83 eb 01          	sub    $0x1,%rbx
        Iter=(Uint>>(Count<<2U))&0x0FU;
ffffffff8020ddd1:	48 89 e8             	mov    %rbp,%rax
ffffffff8020ddd4:	8d 0c 9d 00 00 00 00 	lea    0x0(,%rbx,4),%ecx
ffffffff8020dddb:	48 d3 e8             	shr    %cl,%rax
ffffffff8020ddde:	83 e0 0f             	and    $0xf,%eax
        if(Iter<10U)
ffffffff8020dde1:	48 83 f8 09          	cmp    $0x9,%rax
ffffffff8020dde5:	76 d9                	jbe    ffffffff8020ddc0 <RME_Hex_Print+0x50>
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
ffffffff8020dde7:	8d 78 37             	lea    0x37(%rax),%edi
ffffffff8020ddea:	e8 c1 af 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    while(Count>0U)
ffffffff8020ddef:	48 85 db             	test   %rbx,%rbx
ffffffff8020ddf2:	75 d9                	jne    ffffffff8020ddcd <RME_Hex_Print+0x5d>
}
ffffffff8020ddf4:	4c 89 e0             	mov    %r12,%rax
ffffffff8020ddf7:	5b                   	pop    %rbx
ffffffff8020ddf8:	5d                   	pop    %rbp
ffffffff8020ddf9:	41 5c                	pop    %r12
ffffffff8020ddfb:	c3                   	ret
ffffffff8020ddfc:	0f 1f 40 00          	nopl   0x0(%rax)
        return 1;
ffffffff8020de00:	41 bc 01 00 00 00    	mov    $0x1,%r12d
        __RME_Putchar('0');
ffffffff8020de06:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020de0b:	e8 a0 af 00 00       	call   ffffffff80218db0 <__RME_Putchar>
}
ffffffff8020de10:	4c 89 e0             	mov    %r12,%rax
ffffffff8020de13:	5b                   	pop    %rbx
ffffffff8020de14:	5d                   	pop    %rbp
ffffffff8020de15:	41 5c                	pop    %r12
ffffffff8020de17:	c3                   	ret
ffffffff8020de18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020de1f:	00 
    while(Count>0U)
ffffffff8020de20:	45 31 e4             	xor    %r12d,%r12d
    return (rme_cnt_t)Num;
ffffffff8020de23:	eb cf                	jmp    ffffffff8020ddf4 <RME_Hex_Print+0x84>
ffffffff8020de25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020de2c:	00 00 00 00 

ffffffff8020de30 <RME_Str_Print>:
{
ffffffff8020de30:	f3 0f 1e fa          	endbr64
ffffffff8020de34:	55                   	push   %rbp
ffffffff8020de35:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020de38:	53                   	push   %rbx
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020de39:	31 db                	xor    %ebx,%ebx
{
ffffffff8020de3b:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020de3f:	eb 19                	jmp    ffffffff8020de5a <RME_Str_Print+0x2a>
ffffffff8020de41:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count++]);
ffffffff8020de48:	e8 63 af 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020de4d:	48 83 c3 02          	add    $0x2,%rbx
ffffffff8020de51:	48 81 fb 00 01 00 00 	cmp    $0x100,%rbx
ffffffff8020de58:	74 0a                	je     ffffffff8020de64 <RME_Str_Print+0x34>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020de5a:	0f be 7c 1d 00       	movsbl 0x0(%rbp,%rbx,1),%edi
ffffffff8020de5f:	40 84 ff             	test   %dil,%dil
ffffffff8020de62:	75 e4                	jne    ffffffff8020de48 <RME_Str_Print+0x18>
}
ffffffff8020de64:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020de68:	48 89 d8             	mov    %rbx,%rax
ffffffff8020de6b:	5b                   	pop    %rbx
ffffffff8020de6c:	5d                   	pop    %rbp
ffffffff8020de6d:	c3                   	ret
ffffffff8020de6e:	66 90                	xchg   %ax,%ax

ffffffff8020de70 <RME_Log>:
{
ffffffff8020de70:	f3 0f 1e fa          	endbr64
ffffffff8020de74:	41 57                	push   %r15
ffffffff8020de76:	49 c7 c7 f0 c6 21 80 	mov    $0xffffffff8021c6f0,%r15
ffffffff8020de7d:	41 56                	push   %r14
ffffffff8020de7f:	49 c7 c6 f0 c7 21 80 	mov    $0xffffffff8021c7f0,%r14
ffffffff8020de86:	41 55                	push   %r13
ffffffff8020de88:	49 89 d5             	mov    %rdx,%r13
ffffffff8020de8b:	41 54                	push   %r12
ffffffff8020de8d:	55                   	push   %rbp
ffffffff8020de8e:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020de91:	53                   	push   %rbx
ffffffff8020de92:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020de95:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020de99:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff8020de9e:	eb 0e                	jmp    ffffffff8020deae <RME_Log+0x3e>
        __RME_Putchar(String[Count++]);
ffffffff8020dea0:	e8 0b af 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020dea5:	49 83 c7 02          	add    $0x2,%r15
ffffffff8020dea9:	4d 39 fe             	cmp    %r15,%r14
ffffffff8020deac:	74 09                	je     ffffffff8020deb7 <RME_Log+0x47>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020deae:	41 0f be 3f          	movsbl (%r15),%edi
ffffffff8020deb2:	40 84 ff             	test   %dil,%dil
ffffffff8020deb5:	75 e9                	jne    ffffffff8020dea0 <RME_Log+0x30>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020deb7:	4c 8d b5 00 01 00 00 	lea    0x100(%rbp),%r14
ffffffff8020debe:	eb 0e                	jmp    ffffffff8020dece <RME_Log+0x5e>
        __RME_Putchar(String[Count++]);
ffffffff8020dec0:	e8 eb ae 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020dec5:	48 83 c5 02          	add    $0x2,%rbp
ffffffff8020dec9:	49 39 ee             	cmp    %rbp,%r14
ffffffff8020decc:	74 09                	je     ffffffff8020ded7 <RME_Log+0x67>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020dece:	0f be 7d 00          	movsbl 0x0(%rbp),%edi
ffffffff8020ded2:	40 84 ff             	test   %dil,%dil
ffffffff8020ded5:	75 e9                	jne    ffffffff8020dec0 <RME_Log+0x50>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ded7:	49 c7 c6 37 c7 21 80 	mov    $0xffffffff8021c737,%r14
ffffffff8020dede:	48 c7 c5 37 c8 21 80 	mov    $0xffffffff8021c837,%rbp
ffffffff8020dee5:	eb 17                	jmp    ffffffff8020defe <RME_Log+0x8e>
ffffffff8020dee7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020deee:	00 00 
        __RME_Putchar(String[Count++]);
ffffffff8020def0:	e8 bb ae 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020def5:	49 83 c6 02          	add    $0x2,%r14
ffffffff8020def9:	4c 39 f5             	cmp    %r14,%rbp
ffffffff8020defc:	74 09                	je     ffffffff8020df07 <RME_Log+0x97>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020defe:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020df02:	40 84 ff             	test   %dil,%dil
ffffffff8020df05:	75 e9                	jne    ffffffff8020def0 <RME_Log+0x80>
    if(Int==0)
ffffffff8020df07:	48 85 db             	test   %rbx,%rbx
ffffffff8020df0a:	0f 84 a0 01 00 00    	je     ffffffff8020e0b0 <RME_Log+0x240>
    if(Int<0)
ffffffff8020df10:	0f 88 82 01 00 00    	js     ffffffff8020e098 <RME_Log+0x228>
        Iter/=10;
ffffffff8020df16:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
ffffffff8020df1d:	cc cc cc 
ffffffff8020df20:	48 f7 e3             	mul    %rbx
        if(Iter!=0)
ffffffff8020df23:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020df26:	48 c1 ee 03          	shr    $0x3,%rsi
ffffffff8020df2a:	0f 84 8f 01 00 00    	je     ffffffff8020e0bf <RME_Log+0x24f>
    Div=1;
ffffffff8020df30:	bd 01 00 00 00       	mov    $0x1,%ebp
        Count++;
ffffffff8020df35:	41 bc 01 00 00 00    	mov    $0x1,%r12d
        Iter/=10;
ffffffff8020df3b:	48 bf 67 66 66 66 66 	movabs $0x6666666666666667,%rdi
ffffffff8020df42:	66 66 66 
ffffffff8020df45:	0f 1f 00             	nopl   (%rax)
ffffffff8020df48:	48 89 f0             	mov    %rsi,%rax
            Div*=10;
ffffffff8020df4b:	48 8d 6c ad 00       	lea    0x0(%rbp,%rbp,4),%rbp
        Count++;
ffffffff8020df50:	49 83 c4 01          	add    $0x1,%r12
        Iter/=10;
ffffffff8020df54:	48 f7 ef             	imul   %rdi
ffffffff8020df57:	48 89 f0             	mov    %rsi,%rax
            Div*=10;
ffffffff8020df5a:	48 01 ed             	add    %rbp,%rbp
        Iter/=10;
ffffffff8020df5d:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020df61:	48 c1 fa 02          	sar    $0x2,%rdx
        if(Iter!=0)
ffffffff8020df65:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020df68:	48 29 c6             	sub    %rax,%rsi
ffffffff8020df6b:	75 db                	jne    ffffffff8020df48 <RME_Log+0xd8>
        Div/=10;
ffffffff8020df6d:	49 be 67 66 66 66 66 	movabs $0x6666666666666667,%r14
ffffffff8020df74:	66 66 66 
ffffffff8020df77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020df7e:	00 00 
        Count--;
ffffffff8020df80:	48 89 d8             	mov    %rbx,%rax
ffffffff8020df83:	49 83 ec 01          	sub    $0x1,%r12
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020df87:	48 99                	cqto
ffffffff8020df89:	48 f7 fd             	idiv   %rbp
ffffffff8020df8c:	83 c0 30             	add    $0x30,%eax
ffffffff8020df8f:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020df92:	0f be f8             	movsbl %al,%edi
ffffffff8020df95:	e8 16 ae 00 00       	call   ffffffff80218db0 <__RME_Putchar>
        Div/=10;
ffffffff8020df9a:	48 89 e8             	mov    %rbp,%rax
ffffffff8020df9d:	49 f7 ee             	imul   %r14
ffffffff8020dfa0:	48 89 e8             	mov    %rbp,%rax
ffffffff8020dfa3:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020dfa7:	48 c1 fa 02          	sar    $0x2,%rdx
ffffffff8020dfab:	48 29 c2             	sub    %rax,%rdx
ffffffff8020dfae:	48 89 d5             	mov    %rdx,%rbp
    while(Count>0)
ffffffff8020dfb1:	4d 85 e4             	test   %r12,%r12
ffffffff8020dfb4:	75 ca                	jne    ffffffff8020df80 <RME_Log+0x110>
ffffffff8020dfb6:	48 c7 c3 40 c7 21 80 	mov    $0xffffffff8021c740,%rbx
ffffffff8020dfbd:	48 c7 c5 40 c8 21 80 	mov    $0xffffffff8021c840,%rbp
        Count++;
ffffffff8020dfc4:	49 89 de             	mov    %rbx,%r14
ffffffff8020dfc7:	eb 15                	jmp    ffffffff8020dfde <RME_Log+0x16e>
ffffffff8020dfc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count++]);
ffffffff8020dfd0:	e8 db ad 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020dfd5:	49 83 c6 02          	add    $0x2,%r14
ffffffff8020dfd9:	4c 39 f5             	cmp    %r14,%rbp
ffffffff8020dfdc:	74 09                	je     ffffffff8020dfe7 <RME_Log+0x177>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020dfde:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020dfe2:	40 84 ff             	test   %dil,%dil
ffffffff8020dfe5:	75 e9                	jne    ffffffff8020dfd0 <RME_Log+0x160>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020dfe7:	4d 8d b5 00 01 00 00 	lea    0x100(%r13),%r14
ffffffff8020dfee:	eb 0e                	jmp    ffffffff8020dffe <RME_Log+0x18e>
        __RME_Putchar(String[Count++]);
ffffffff8020dff0:	e8 bb ad 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020dff5:	49 83 c5 02          	add    $0x2,%r13
ffffffff8020dff9:	4d 39 ee             	cmp    %r13,%r14
ffffffff8020dffc:	74 0a                	je     ffffffff8020e008 <RME_Log+0x198>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020dffe:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
ffffffff8020e003:	40 84 ff             	test   %dil,%dil
ffffffff8020e006:	75 e8                	jne    ffffffff8020dff0 <RME_Log+0x180>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e008:	49 c7 c6 43 c7 21 80 	mov    $0xffffffff8021c743,%r14
ffffffff8020e00f:	49 c7 c5 43 c8 21 80 	mov    $0xffffffff8021c843,%r13
ffffffff8020e016:	eb 16                	jmp    ffffffff8020e02e <RME_Log+0x1be>
ffffffff8020e018:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e01f:	00 
        __RME_Putchar(String[Count++]);
ffffffff8020e020:	e8 8b ad 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e025:	49 83 c6 02          	add    $0x2,%r14
ffffffff8020e029:	4d 39 f5             	cmp    %r14,%r13
ffffffff8020e02c:	74 09                	je     ffffffff8020e037 <RME_Log+0x1c7>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e02e:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020e032:	40 84 ff             	test   %dil,%dil
ffffffff8020e035:	75 e9                	jne    ffffffff8020e020 <RME_Log+0x1b0>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e037:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
ffffffff8020e03c:	4d 8d ac 24 00 01 00 	lea    0x100(%r12),%r13
ffffffff8020e043:	00 
ffffffff8020e044:	eb 18                	jmp    ffffffff8020e05e <RME_Log+0x1ee>
ffffffff8020e046:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e04d:	00 00 00 
        __RME_Putchar(String[Count++]);
ffffffff8020e050:	e8 5b ad 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e055:	49 83 c4 02          	add    $0x2,%r12
ffffffff8020e059:	4d 39 e5             	cmp    %r12,%r13
ffffffff8020e05c:	74 20                	je     ffffffff8020e07e <RME_Log+0x20e>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e05e:	41 0f be 3c 24       	movsbl (%r12),%edi
ffffffff8020e063:	40 84 ff             	test   %dil,%dil
ffffffff8020e066:	75 e8                	jne    ffffffff8020e050 <RME_Log+0x1e0>
ffffffff8020e068:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e06b:	40 84 ff             	test   %dil,%dil
ffffffff8020e06e:	74 16                	je     ffffffff8020e086 <RME_Log+0x216>
        __RME_Putchar(String[Count++]);
ffffffff8020e070:	e8 3b ad 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e075:	48 83 c3 02          	add    $0x2,%rbx
ffffffff8020e079:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020e07c:	74 08                	je     ffffffff8020e086 <RME_Log+0x216>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e07e:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e081:	40 84 ff             	test   %dil,%dil
ffffffff8020e084:	75 ea                	jne    ffffffff8020e070 <RME_Log+0x200>
}
ffffffff8020e086:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020e08a:	5b                   	pop    %rbx
ffffffff8020e08b:	5d                   	pop    %rbp
ffffffff8020e08c:	41 5c                	pop    %r12
ffffffff8020e08e:	41 5d                	pop    %r13
ffffffff8020e090:	41 5e                	pop    %r14
ffffffff8020e092:	41 5f                	pop    %r15
ffffffff8020e094:	c3                   	ret
ffffffff8020e095:	0f 1f 00             	nopl   (%rax)
        __RME_Putchar('-');
ffffffff8020e098:	bf 2d 00 00 00       	mov    $0x2d,%edi
        Abs=-Int;
ffffffff8020e09d:	48 f7 db             	neg    %rbx
        __RME_Putchar('-');
ffffffff8020e0a0:	e8 0b ad 00 00       	call   ffffffff80218db0 <__RME_Putchar>
        Num=1;
ffffffff8020e0a5:	e9 6c fe ff ff       	jmp    ffffffff8020df16 <RME_Log+0xa6>
ffffffff8020e0aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        __RME_Putchar('0');
ffffffff8020e0b0:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020e0b5:	e8 f6 ac 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e0ba:	e9 f7 fe ff ff       	jmp    ffffffff8020dfb6 <RME_Log+0x146>
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020e0bf:	8d 7b 30             	lea    0x30(%rbx),%edi
ffffffff8020e0c2:	40 0f be ff          	movsbl %dil,%edi
ffffffff8020e0c6:	e8 e5 ac 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    while(Count>0)
ffffffff8020e0cb:	e9 e6 fe ff ff       	jmp    ffffffff8020dfb6 <RME_Log+0x146>

ffffffff8020e0d0 <_RME_MSB_Generic>:
{
ffffffff8020e0d0:	f3 0f 1e fa          	endbr64
    if(Value>=RME_POW2(32U))
ffffffff8020e0d4:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e0d7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e0db:	74 43                	je     ffffffff8020e120 <_RME_MSB_Generic+0x50>
        if(Value>=RME_POW2(48U))
ffffffff8020e0dd:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e0e0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e0e4:	0f 84 96 00 00 00    	je     ffffffff8020e180 <_RME_MSB_Generic+0xb0>
            if(Value>=RME_POW2(56U))
ffffffff8020e0ea:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffffff,%rax
ffffffff8020e0f1:	ff ff 00 
ffffffff8020e0f4:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e0f7:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e0f9:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e0fc:	83 c1 30             	add    $0x30,%ecx
ffffffff8020e0ff:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e102:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e105:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e108:	0f b6 87 80 c9 21 80 	movzbl -0x7fde3680(%rdi),%eax
            if(Value>=RME_POW2(56U))
ffffffff8020e10f:	83 e2 08             	and    $0x8,%edx
ffffffff8020e112:	48 83 c2 30          	add    $0x30,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e116:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e119:	c3                   	ret
ffffffff8020e11a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if(Value>=RME_POW2(16U))
ffffffff8020e120:	48 81 ff ff ff 00 00 	cmp    $0xffff,%rdi
ffffffff8020e127:	77 27                	ja     ffffffff8020e150 <_RME_MSB_Generic+0x80>
            if(Value>=RME_POW2(8U))
ffffffff8020e129:	31 d2                	xor    %edx,%edx
ffffffff8020e12b:	48 81 ff ff 00 00 00 	cmp    $0xff,%rdi
ffffffff8020e132:	0f 97 c2             	seta   %dl
ffffffff8020e135:	48 c1 e2 03          	shl    $0x3,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e139:	89 d1                	mov    %edx,%ecx
ffffffff8020e13b:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e13e:	0f b6 87 80 c9 21 80 	movzbl -0x7fde3680(%rdi),%eax
ffffffff8020e145:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e148:	c3                   	ret
ffffffff8020e149:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            if(Value>=RME_POW2(24U))
ffffffff8020e150:	48 81 ff 00 00 00 01 	cmp    $0x1000000,%rdi
ffffffff8020e157:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e159:	83 e1 f8             	and    $0xfffffff8,%ecx
ffffffff8020e15c:	83 c1 18             	add    $0x18,%ecx
ffffffff8020e15f:	48 81 ff 00 00 00 01 	cmp    $0x1000000,%rdi
ffffffff8020e166:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e169:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e16c:	0f b6 87 80 c9 21 80 	movzbl -0x7fde3680(%rdi),%eax
            if(Value>=RME_POW2(24U))
ffffffff8020e173:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
ffffffff8020e177:	48 83 c2 18          	add    $0x18,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e17b:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e17e:	c3                   	ret
ffffffff8020e17f:	90                   	nop
            if(Value>=RME_POW2(40U))
ffffffff8020e180:	48 b8 ff ff ff ff ff 	movabs $0xffffffffff,%rax
ffffffff8020e187:	00 00 00 
ffffffff8020e18a:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e18d:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e18f:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e192:	83 c1 20             	add    $0x20,%ecx
ffffffff8020e195:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e198:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e19b:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e19e:	0f b6 87 80 c9 21 80 	movzbl -0x7fde3680(%rdi),%eax
            if(Value>=RME_POW2(40U))
ffffffff8020e1a5:	83 e2 08             	and    $0x8,%edx
ffffffff8020e1a8:	48 83 c2 20          	add    $0x20,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e1ac:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e1af:	c3                   	ret

ffffffff8020e1b0 <_RME_LSB_Generic>:
{
ffffffff8020e1b0:	f3 0f 1e fa          	endbr64
    if((Value<<32U)==0U)
ffffffff8020e1b4:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e1b7:	48 c1 e0 20          	shl    $0x20,%rax
        if((Value<<16U)==0U)
ffffffff8020e1bb:	48 89 f8             	mov    %rdi,%rax
    if((Value<<32U)==0U)
ffffffff8020e1be:	75 30                	jne    ffffffff8020e1f0 <_RME_LSB_Generic+0x40>
        if((Value<<16U)==0U)
ffffffff8020e1c0:	48 c1 e0 10          	shl    $0x10,%rax
            if((Value<<8U)==0U)
ffffffff8020e1c4:	48 89 f8             	mov    %rdi,%rax
        if((Value<<16U)==0U)
ffffffff8020e1c7:	75 77                	jne    ffffffff8020e240 <_RME_LSB_Generic+0x90>
            if((Value<<8U)==0U)
ffffffff8020e1c9:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8020e1cd:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e1d1:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e1d3:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e1d6:	83 c1 30             	add    $0x30,%ecx
ffffffff8020e1d9:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e1dd:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e1e0:	83 e2 08             	and    $0x8,%edx
ffffffff8020e1e3:	48 83 c2 30          	add    $0x30,%rdx
ffffffff8020e1e7:	eb 1f                	jmp    ffffffff8020e208 <_RME_LSB_Generic+0x58>
ffffffff8020e1e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if((Value<<48U)==0U)
ffffffff8020e1f0:	48 c1 e0 30          	shl    $0x30,%rax
            if((Value<<40U)==0U)
ffffffff8020e1f4:	48 89 f8             	mov    %rdi,%rax
        if((Value<<48U)==0U)
ffffffff8020e1f7:	74 27                	je     ffffffff8020e220 <_RME_LSB_Generic+0x70>
            if((Value<<56U)==0U)
ffffffff8020e1f9:	31 d2                	xor    %edx,%edx
ffffffff8020e1fb:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff8020e1ff:	0f 94 c2             	sete   %dl
ffffffff8020e202:	48 c1 e2 03          	shl    $0x3,%rdx
    return Table[(rme_u8_t)(Value>>Bit)]+Bit;
ffffffff8020e206:	89 d1                	mov    %edx,%ecx
ffffffff8020e208:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e20b:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff8020e20f:	0f b6 87 80 c8 21 80 	movzbl -0x7fde3780(%rdi),%eax
ffffffff8020e216:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e219:	c3                   	ret
ffffffff8020e21a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            if((Value<<40U)==0U)
ffffffff8020e220:	48 c1 e0 28          	shl    $0x28,%rax
ffffffff8020e224:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e228:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e22a:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e22d:	83 c1 10             	add    $0x10,%ecx
ffffffff8020e230:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e234:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e237:	83 e2 08             	and    $0x8,%edx
ffffffff8020e23a:	48 83 c2 10          	add    $0x10,%rdx
ffffffff8020e23e:	eb c8                	jmp    ffffffff8020e208 <_RME_LSB_Generic+0x58>
            if((Value<<24U)==0U)
ffffffff8020e240:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff8020e244:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e248:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e24a:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e24d:	83 c1 20             	add    $0x20,%ecx
ffffffff8020e250:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e254:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e257:	83 e2 08             	and    $0x8,%edx
ffffffff8020e25a:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8020e25e:	eb a8                	jmp    ffffffff8020e208 <_RME_LSB_Generic+0x58>

ffffffff8020e260 <_RME_Comp_Swap_Single>:
{
ffffffff8020e260:	f3 0f 1e fa          	endbr64
    if(*Ptr==Old)
ffffffff8020e264:	48 8b 0f             	mov    (%rdi),%rcx
    return 0U;
ffffffff8020e267:	31 c0                	xor    %eax,%eax
    if(*Ptr==Old)
ffffffff8020e269:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020e26c:	74 02                	je     ffffffff8020e270 <_RME_Comp_Swap_Single+0x10>
}
ffffffff8020e26e:	c3                   	ret
ffffffff8020e26f:	90                   	nop
        *Ptr=New;
ffffffff8020e270:	48 89 17             	mov    %rdx,(%rdi)
        return 1U;
ffffffff8020e273:	b8 01 00 00 00       	mov    $0x1,%eax
}
ffffffff8020e278:	c3                   	ret
ffffffff8020e279:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8020e280 <_RME_Fetch_Add_Single>:
{
ffffffff8020e280:	f3 0f 1e fa          	endbr64
    Old=(rme_cnt_t)(*Ptr);
ffffffff8020e284:	48 8b 07             	mov    (%rdi),%rax
    *Ptr=(rme_ptr_t)(Old+Addend);
ffffffff8020e287:	48 01 c6             	add    %rax,%rsi
ffffffff8020e28a:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020e28d:	c3                   	ret
ffffffff8020e28e:	66 90                	xchg   %ax,%ax

ffffffff8020e290 <_RME_Fetch_And_Single>:
{
ffffffff8020e290:	f3 0f 1e fa          	endbr64
    Old=*Ptr;
ffffffff8020e294:	48 8b 07             	mov    (%rdi),%rax
    *Ptr=Old&Operand;
ffffffff8020e297:	48 21 c6             	and    %rax,%rsi
ffffffff8020e29a:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020e29d:	c3                   	ret
ffffffff8020e29e:	66 90                	xchg   %ax,%ax

ffffffff8020e2a0 <_RME_List_Crt>:
{
ffffffff8020e2a0:	f3 0f 1e fa          	endbr64
    Head->Next=Head;
ffffffff8020e2a4:	66 48 0f 6e c7       	movq   %rdi,%xmm0
ffffffff8020e2a9:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
ffffffff8020e2ad:	0f 11 07             	movups %xmm0,(%rdi)
}
ffffffff8020e2b0:	c3                   	ret
ffffffff8020e2b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e2b8:	00 00 00 00 
ffffffff8020e2bc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e2c0 <_RME_List_Del>:
{
ffffffff8020e2c0:	f3 0f 1e fa          	endbr64
    Next->Prev=Prev;
ffffffff8020e2c4:	48 89 7e 08          	mov    %rdi,0x8(%rsi)
    Prev->Next=Next;
ffffffff8020e2c8:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020e2cb:	c3                   	ret
ffffffff8020e2cc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e2d0 <_RME_List_Ins>:
{
ffffffff8020e2d0:	f3 0f 1e fa          	endbr64
    Next->Prev=New;
ffffffff8020e2d4:	48 89 7a 08          	mov    %rdi,0x8(%rdx)
    New->Next=Next;
ffffffff8020e2d8:	48 89 17             	mov    %rdx,(%rdi)
    New->Prev=Prev;
ffffffff8020e2db:	48 89 77 08          	mov    %rsi,0x8(%rdi)
    Prev->Next=New;
ffffffff8020e2df:	48 89 3e             	mov    %rdi,(%rsi)
}
ffffffff8020e2e2:	c3                   	ret
ffffffff8020e2e3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e2ea:	00 00 00 00 
ffffffff8020e2ee:	66 90                	xchg   %ax,%ax

ffffffff8020e2f0 <_RME_Clear>:
{
ffffffff8020e2f0:	f3 0f 1e fa          	endbr64
ffffffff8020e2f4:	48 89 f9             	mov    %rdi,%rcx
    for(Count=0U;Count<Size;Count++)
ffffffff8020e2f7:	48 85 f6             	test   %rsi,%rsi
ffffffff8020e2fa:	0f 84 c8 00 00 00    	je     ffffffff8020e3c8 <_RME_Clear+0xd8>
ffffffff8020e300:	48 8d 46 ff          	lea    -0x1(%rsi),%rax
ffffffff8020e304:	48 83 f8 0e          	cmp    $0xe,%rax
ffffffff8020e308:	0f 86 bb 00 00 00    	jbe    ffffffff8020e3c9 <_RME_Clear+0xd9>
ffffffff8020e30e:	48 89 f0             	mov    %rsi,%rax
ffffffff8020e311:	48 89 fa             	mov    %rdi,%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e314:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8020e318:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
ffffffff8020e31c:	48 8d 3c 38          	lea    (%rax,%rdi,1),%rdi
ffffffff8020e320:	a8 10                	test   $0x10,%al
ffffffff8020e322:	74 0c                	je     ffffffff8020e330 <_RME_Clear+0x40>
ffffffff8020e324:	48 8d 51 10          	lea    0x10(%rcx),%rdx
ffffffff8020e328:	0f 11 01             	movups %xmm0,(%rcx)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e32b:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020e32e:	74 10                	je     ffffffff8020e340 <_RME_Clear+0x50>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e330:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8020e333:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8020e337:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e33b:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020e33e:	75 f0                	jne    ffffffff8020e330 <_RME_Clear+0x40>
ffffffff8020e340:	48 39 c6             	cmp    %rax,%rsi
ffffffff8020e343:	0f 84 87 00 00 00    	je     ffffffff8020e3d0 <_RME_Clear+0xe0>
ffffffff8020e349:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020e34c:	48 29 c2             	sub    %rax,%rdx
ffffffff8020e34f:	48 8d 7a ff          	lea    -0x1(%rdx),%rdi
ffffffff8020e353:	48 83 ff 06          	cmp    $0x6,%rdi
ffffffff8020e357:	76 17                	jbe    ffffffff8020e370 <_RME_Clear+0x80>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e359:	48 89 d7             	mov    %rdx,%rdi
ffffffff8020e35c:	48 c7 04 01 00 00 00 	movq   $0x0,(%rcx,%rax,1)
ffffffff8020e363:	00 
    for(Count=0U;Count<Size;Count++)
ffffffff8020e364:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
ffffffff8020e368:	48 01 f8             	add    %rdi,%rax
ffffffff8020e36b:	83 e2 07             	and    $0x7,%edx
ffffffff8020e36e:	74 58                	je     ffffffff8020e3c8 <_RME_Clear+0xd8>
ffffffff8020e370:	48 8d 50 01          	lea    0x1(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e374:	c6 04 01 00          	movb   $0x0,(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e378:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e37b:	73 4b                	jae    ffffffff8020e3c8 <_RME_Clear+0xd8>
ffffffff8020e37d:	48 8d 50 02          	lea    0x2(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e381:	c6 44 01 01 00       	movb   $0x0,0x1(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e386:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e389:	73 3d                	jae    ffffffff8020e3c8 <_RME_Clear+0xd8>
ffffffff8020e38b:	48 8d 50 03          	lea    0x3(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e38f:	c6 44 01 02 00       	movb   $0x0,0x2(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e394:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e397:	73 2f                	jae    ffffffff8020e3c8 <_RME_Clear+0xd8>
ffffffff8020e399:	48 8d 50 04          	lea    0x4(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e39d:	c6 44 01 03 00       	movb   $0x0,0x3(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3a2:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e3a5:	73 21                	jae    ffffffff8020e3c8 <_RME_Clear+0xd8>
ffffffff8020e3a7:	48 8d 50 05          	lea    0x5(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3ab:	c6 44 01 04 00       	movb   $0x0,0x4(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3b0:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e3b3:	73 13                	jae    ffffffff8020e3c8 <_RME_Clear+0xd8>
ffffffff8020e3b5:	48 8d 50 06          	lea    0x6(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3b9:	c6 44 01 05 00       	movb   $0x0,0x5(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3be:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e3c1:	73 05                	jae    ffffffff8020e3c8 <_RME_Clear+0xd8>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3c3:	c6 44 01 06 00       	movb   $0x0,0x6(%rcx,%rax,1)
}
ffffffff8020e3c8:	c3                   	ret
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3c9:	31 c0                	xor    %eax,%eax
ffffffff8020e3cb:	e9 79 ff ff ff       	jmp    ffffffff8020e349 <_RME_Clear+0x59>
ffffffff8020e3d0:	c3                   	ret
ffffffff8020e3d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e3d8:	00 00 00 00 
ffffffff8020e3dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e3e0 <_RME_Memcmp>:
{
ffffffff8020e3e0:	f3 0f 1e fa          	endbr64
    for(Count=0U;Count<Num;Count++)
ffffffff8020e3e4:	31 c0                	xor    %eax,%eax
ffffffff8020e3e6:	48 85 d2             	test   %rdx,%rdx
ffffffff8020e3e9:	75 0e                	jne    ffffffff8020e3f9 <_RME_Memcmp+0x19>
ffffffff8020e3eb:	c3                   	ret
ffffffff8020e3ec:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020e3f0:	48 83 c0 01          	add    $0x1,%rax
ffffffff8020e3f4:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e3f7:	74 17                	je     ffffffff8020e410 <_RME_Memcmp+0x30>
        if(Dst[Count]!=Src[Count])
ffffffff8020e3f9:	0f b6 0c 07          	movzbl (%rdi,%rax,1),%ecx
ffffffff8020e3fd:	44 0f be 04 06       	movsbl (%rsi,%rax,1),%r8d
ffffffff8020e402:	44 38 c1             	cmp    %r8b,%cl
ffffffff8020e405:	74 e9                	je     ffffffff8020e3f0 <_RME_Memcmp+0x10>
            return Dst[Count]-Src[Count];
ffffffff8020e407:	0f be c1             	movsbl %cl,%eax
ffffffff8020e40a:	44 29 c0             	sub    %r8d,%eax
ffffffff8020e40d:	48 98                	cltq
ffffffff8020e40f:	c3                   	ret
    return 0;
ffffffff8020e410:	31 c0                	xor    %eax,%eax
ffffffff8020e412:	c3                   	ret
ffffffff8020e413:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e41a:	00 00 00 00 
ffffffff8020e41e:	66 90                	xchg   %ax,%ax

ffffffff8020e420 <_RME_Memcpy>:
{
ffffffff8020e420:	f3 0f 1e fa          	endbr64
    for(Count=0U;Count<Num;Count++)
ffffffff8020e424:	48 85 d2             	test   %rdx,%rdx
ffffffff8020e427:	74 1a                	je     ffffffff8020e443 <_RME_Memcpy+0x23>
ffffffff8020e429:	48 01 f2             	add    %rsi,%rdx
ffffffff8020e42c:	0f 1f 40 00          	nopl   0x0(%rax)
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020e430:	0f b6 06             	movzbl (%rsi),%eax
    for(Count=0U;Count<Num;Count++)
ffffffff8020e433:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8020e437:	48 83 c7 01          	add    $0x1,%rdi
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020e43b:	88 47 ff             	mov    %al,-0x1(%rdi)
    for(Count=0U;Count<Num;Count++)
ffffffff8020e43e:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8020e441:	75 ed                	jne    ffffffff8020e430 <_RME_Memcpy+0x10>
}
ffffffff8020e443:	c3                   	ret
ffffffff8020e444:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e44b:	00 00 00 00 
ffffffff8020e44f:	90                   	nop

ffffffff8020e450 <_RME_Diff>:
{
ffffffff8020e450:	f3 0f 1e fa          	endbr64
    Diff1=Num1-Num2;
ffffffff8020e454:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e457:	48 29 f0             	sub    %rsi,%rax
    Diff2=Num2-Num1;
ffffffff8020e45a:	48 29 fe             	sub    %rdi,%rsi
    if(Diff1>Diff2)
ffffffff8020e45d:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020e460:	48 0f 47 c6          	cmova  %rsi,%rax
}
ffffffff8020e464:	c3                   	ret
ffffffff8020e465:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e46c:	00 00 00 00 

ffffffff8020e470 <RME_Kmain>:
{
ffffffff8020e470:	f3 0f 1e fa          	endbr64
ffffffff8020e474:	41 55                	push   %r13
        Count++;
ffffffff8020e476:	41 bd 04 00 00 00    	mov    $0x4,%r13d
{
ffffffff8020e47c:	41 54                	push   %r12
    Iter=Abs;
ffffffff8020e47e:	41 bc 57 04 00 00    	mov    $0x457,%r12d
{
ffffffff8020e484:	55                   	push   %rbp
        Div/=10;
ffffffff8020e485:	48 bd 67 66 66 66 66 	movabs $0x6666666666666667,%rbp
ffffffff8020e48c:	66 66 66 
{
ffffffff8020e48f:	53                   	push   %rbx
ffffffff8020e490:	bb e8 03 00 00       	mov    $0x3e8,%ebx
ffffffff8020e495:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020e499:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        Count--;
ffffffff8020e4a0:	4c 89 e0             	mov    %r12,%rax
ffffffff8020e4a3:	49 83 ed 01          	sub    $0x1,%r13
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020e4a7:	48 99                	cqto
ffffffff8020e4a9:	48 f7 fb             	idiv   %rbx
ffffffff8020e4ac:	8d 78 30             	lea    0x30(%rax),%edi
ffffffff8020e4af:	49 89 d4             	mov    %rdx,%r12
ffffffff8020e4b2:	40 0f be ff          	movsbl %dil,%edi
ffffffff8020e4b6:	e8 f5 a8 00 00       	call   ffffffff80218db0 <__RME_Putchar>
        Div/=10;
ffffffff8020e4bb:	48 89 d8             	mov    %rbx,%rax
ffffffff8020e4be:	48 f7 ed             	imul   %rbp
ffffffff8020e4c1:	48 89 d8             	mov    %rbx,%rax
ffffffff8020e4c4:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020e4c8:	48 c1 fa 02          	sar    $0x2,%rdx
ffffffff8020e4cc:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020e4cf:	48 29 c3             	sub    %rax,%rbx
    while(Count>0)
ffffffff8020e4d2:	4d 85 ed             	test   %r13,%r13
ffffffff8020e4d5:	75 c9                	jne    ffffffff8020e4a0 <RME_Kmain+0x30>
}

static INLINE rme_ptr_t __RME_Int_Disable()
{
	rme_u64_t Ret;
	__asm__ __volatile__ (
ffffffff8020e4d7:	fa                   	cli
ffffffff8020e4d8:	c3                   	ret
    __RME_Lowlvl_Init();
ffffffff8020e4d9:	e8 42 ab 00 00       	call   ffffffff80219020 <__RME_Lowlvl_Init>
    __RME_Pgt_Kom_Init();
ffffffff8020e4de:	e8 5d b3 00 00       	call   ffffffff80219840 <__RME_Pgt_Kom_Init>
ffffffff8020e4e3:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020e4ea:	80 ff ff 
    for(Count=0U;Count<Word;Count++)
ffffffff8020e4ed:	48 ba 00 00 60 01 00 	movabs $0xffff800001600000,%rdx
ffffffff8020e4f4:	80 ff ff 
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e4f7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8020e4fe:	48 83 c0 10          	add    $0x10,%rax
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e502:	48 c7 40 f8 00 00 00 	movq   $0x0,-0x8(%rax)
ffffffff8020e509:	00 
    for(Count=0U;Count<Word;Count++)
ffffffff8020e50a:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e50d:	75 e8                	jne    ffffffff8020e4f7 <RME_Kmain+0x87>
    __RME_Boot();
ffffffff8020e50f:	e8 fc b9 00 00       	call   ffffffff80219f10 <__RME_Boot>
}
ffffffff8020e514:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020e518:	31 c0                	xor    %eax,%eax
ffffffff8020e51a:	5b                   	pop    %rbx
ffffffff8020e51b:	5d                   	pop    %rbp
ffffffff8020e51c:	41 5c                	pop    %r12
ffffffff8020e51e:	41 5d                	pop    %r13
ffffffff8020e520:	c3                   	ret
ffffffff8020e521:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e528:	00 00 00 00 
ffffffff8020e52c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e530 <_RME_Tim_Elapse>:
{
ffffffff8020e530:	f3 0f 1e fa          	endbr64
ffffffff8020e534:	53                   	push   %rbx
ffffffff8020e535:	48 89 fb             	mov    %rdi,%rbx
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020e538:	e8 02 d3 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020e53d:	48 b9 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rcx
ffffffff8020e544:	ff ff 7f 
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020e547:	48 8b 50 08          	mov    0x8(%rax),%rdx
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020e54b:	48 8b 42 30          	mov    0x30(%rdx),%rax
ffffffff8020e54f:	48 39 c1             	cmp    %rax,%rcx
ffffffff8020e552:	72 16                	jb     ffffffff8020e56a <_RME_Tim_Elapse+0x3a>
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020e554:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e557:	48 29 d9             	sub    %rbx,%rcx
ffffffff8020e55a:	48 39 c3             	cmp    %rax,%rbx
ffffffff8020e55d:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020e562:	48 0f 42 c1          	cmovb  %rcx,%rax
ffffffff8020e566:	48 89 42 30          	mov    %rax,0x30(%rdx)
}
ffffffff8020e56a:	5b                   	pop    %rbx
ffffffff8020e56b:	c3                   	ret
ffffffff8020e56c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e570 <_RME_Tim_Future>:
{
ffffffff8020e570:	f3 0f 1e fa          	endbr64
ffffffff8020e574:	48 83 ec 08          	sub    $0x8,%rsp
    return RME_CPU_LOCAL()->Thd_Cur->Sched.Slice;
ffffffff8020e578:	e8 c2 d2 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020e57d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020e581:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff8020e585:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020e589:	c3                   	ret
ffffffff8020e58a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020e590 <_RME_Pgt_Boot_Add>:
{
ffffffff8020e590:	f3 0f 1e fa          	endbr64
ffffffff8020e594:	48 89 f0             	mov    %rsi,%rax
ffffffff8020e597:	49 89 f9             	mov    %rdi,%r9
ffffffff8020e59a:	48 89 d6             	mov    %rdx,%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020e59d:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
{
ffffffff8020e5a1:	48 89 ca             	mov    %rcx,%rdx
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020e5a4:	f6 c4 80             	test   $0x80,%ah
ffffffff8020e5a7:	75 3f                	jne    ffffffff8020e5e8 <_RME_Pgt_Boot_Add+0x58>
ffffffff8020e5a9:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e5ac:	0f 83 fe 00 00 00    	jae    ffffffff8020e6b0 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020e5b2:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020e5b9:	ff 00 00 
ffffffff8020e5bc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e5c0:	49 03 41 18          	add    0x18(%r9),%rax
ffffffff8020e5c4:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020e5cb:	00 00 00 
ffffffff8020e5ce:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e5d1:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e5d4:	48 21 c1             	and    %rax,%rcx
ffffffff8020e5d7:	4c 39 c9             	cmp    %r9,%rcx
ffffffff8020e5da:	75 78                	jne    ffffffff8020e654 <_RME_Pgt_Boot_Add+0xc4>
ffffffff8020e5dc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e5e3:	c3                   	ret
ffffffff8020e5e4:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020e5e8:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e5eb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020e5ef:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020e5f2:	0f 83 b8 00 00 00    	jae    ffffffff8020e6b0 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020e5f8:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020e5ff:	00 00 00 
ffffffff8020e602:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020e606:	49 03 49 18          	add    0x18(%r9),%rcx
ffffffff8020e60a:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020e611:	ff 00 00 
ffffffff8020e614:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8020e617:	49 89 fb             	mov    %rdi,%r11
ffffffff8020e61a:	4d 21 cb             	and    %r9,%r11
ffffffff8020e61d:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020e620:	74 ba                	je     ffffffff8020e5dc <_RME_Pgt_Boot_Add+0x4c>
ffffffff8020e622:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020e626:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020e62a:	0f 85 90 00 00 00    	jne    ffffffff8020e6c0 <_RME_Pgt_Boot_Add+0x130>
ffffffff8020e630:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8020e634:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e639:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e63c:	73 72                	jae    ffffffff8020e6b0 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020e63e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e642:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020e646:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e649:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e64c:	49 21 c1             	and    %rax,%r9
ffffffff8020e64f:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020e652:	74 88                	je     ffffffff8020e5dc <_RME_Pgt_Boot_Add+0x4c>
ffffffff8020e654:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e658:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020e65c:	75 62                	jne    ffffffff8020e6c0 <_RME_Pgt_Boot_Add+0x130>
    Szord=RME_PGT_SZORD(Pgt_Op->Order);
ffffffff8020e65e:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020e662:	b9 40 00 00 00       	mov    $0x40,%ecx
    if(((Pos>>RME_PGT_NMORD(Pgt_Op->Order))!=0U)||
ffffffff8020e667:	49 89 d3             	mov    %rdx,%r11
    Szord=RME_PGT_SZORD(Pgt_Op->Order);
ffffffff8020e66a:	4c 89 c8             	mov    %r9,%rax
ffffffff8020e66d:	48 c1 e8 20          	shr    $0x20,%rax
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020e671:	29 c1                	sub    %eax,%ecx
ffffffff8020e673:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020e67a:	48 d3 e8             	shr    %cl,%rax
    if(((Pos>>RME_PGT_NMORD(Pgt_Op->Order))!=0U)||
ffffffff8020e67d:	44 89 c9             	mov    %r9d,%ecx
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020e680:	48 21 f0             	and    %rsi,%rax
    if(((Pos>>RME_PGT_NMORD(Pgt_Op->Order))!=0U)||
ffffffff8020e683:	49 d3 eb             	shr    %cl,%r11
ffffffff8020e686:	4c 09 d8             	or     %r11,%rax
ffffffff8020e689:	75 45                	jne    ffffffff8020e6d0 <_RME_Pgt_Boot_Add+0x140>
{
ffffffff8020e68b:	48 83 ec 08          	sub    $0x8,%rsp
    if(__RME_Pgt_Page_Map(Pgt_Op,Paddr,Pos,Flag)!=0)
ffffffff8020e68f:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020e692:	e8 79 c5 00 00       	call   ffffffff8021ac10 <__RME_Pgt_Page_Map>
    return 0;
ffffffff8020e697:	48 f7 d8             	neg    %rax
ffffffff8020e69a:	48 19 c0             	sbb    %rax,%rax
}
ffffffff8020e69d:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff8020e6a1:	48 83 e0 9a          	and    $0xffffffffffffff9a,%rax
}
ffffffff8020e6a5:	c3                   	ret
ffffffff8020e6a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e6ad:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020e6b0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e6b7:	c3                   	ret
ffffffff8020e6b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e6bf:	00 
ffffffff8020e6c0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e6c7:	c3                   	ret
ffffffff8020e6c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e6cf:	00 
        return RME_ERR_PGT_ADDR;
ffffffff8020e6d0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
}
ffffffff8020e6d7:	c3                   	ret
ffffffff8020e6d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e6df:	00 

ffffffff8020e6e0 <_RME_Pgt_Boot_Con>:
{
ffffffff8020e6e0:	f3 0f 1e fa          	endbr64
ffffffff8020e6e4:	55                   	push   %rbp
ffffffff8020e6e5:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020e6e8:	53                   	push   %rbx
ffffffff8020e6e9:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020e6ec:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e6ef:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e6f3:	48 8b 57 28          	mov    0x28(%rdi),%rdx
ffffffff8020e6f7:	f6 c7 80             	test   $0x80,%bh
ffffffff8020e6fa:	75 4c                	jne    ffffffff8020e748 <_RME_Pgt_Boot_Con+0x68>
ffffffff8020e6fc:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8020e6ff:	0f 83 23 02 00 00    	jae    ffffffff8020e928 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020e705:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff8020e709:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020e70d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020e714:	ff 00 00 
ffffffff8020e717:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020e71e:	00 00 00 
ffffffff8020e721:	48 01 cb             	add    %rcx,%rbx
ffffffff8020e724:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020e727:	48 21 c7             	and    %rax,%rdi
ffffffff8020e72a:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020e72d:	0f 85 8a 00 00 00    	jne    ffffffff8020e7bd <_RME_Pgt_Boot_Con+0xdd>
ffffffff8020e733:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff8020e738:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e73f:	e9 3d 01 00 00       	jmp    ffffffff8020e881 <_RME_Pgt_Boot_Con+0x1a1>
ffffffff8020e744:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020e748:	48 89 d8             	mov    %rbx,%rax
ffffffff8020e74b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e74f:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e752:	0f 83 d0 01 00 00    	jae    ffffffff8020e928 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020e758:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff8020e75c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e760:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020e767:	ff 00 00 
ffffffff8020e76a:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020e771:	00 00 00 
ffffffff8020e774:	48 01 c8             	add    %rcx,%rax
ffffffff8020e777:	48 8b 38             	mov    (%rax),%rdi
ffffffff8020e77a:	49 89 fb             	mov    %rdi,%r11
ffffffff8020e77d:	4d 21 cb             	and    %r9,%r11
ffffffff8020e780:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020e783:	74 b3                	je     ffffffff8020e738 <_RME_Pgt_Boot_Con+0x58>
ffffffff8020e785:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020e789:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020e78d:	0f 85 75 01 00 00    	jne    ffffffff8020e908 <_RME_Pgt_Boot_Con+0x228>
ffffffff8020e793:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff8020e797:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020e79d:	48 39 fb             	cmp    %rdi,%rbx
ffffffff8020e7a0:	0f 83 82 01 00 00    	jae    ffffffff8020e928 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020e7a6:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020e7aa:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8020e7ae:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020e7b1:	49 21 c1             	and    %rax,%r9
ffffffff8020e7b4:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020e7b7:	0f 84 7b ff ff ff    	je     ffffffff8020e738 <_RME_Pgt_Boot_Con+0x58>
ffffffff8020e7bd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e7c1:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020e7c5:	0f 85 3d 01 00 00    	jne    ffffffff8020e908 <_RME_Pgt_Boot_Con+0x228>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020e7cb:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020e7d1:	0f 85 b9 00 00 00    	jne    ffffffff8020e890 <_RME_Pgt_Boot_Con+0x1b0>
ffffffff8020e7d7:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020e7da:	0f 83 48 01 00 00    	jae    ffffffff8020e928 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020e7e0:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020e7e7:	ff 00 00 
ffffffff8020e7ea:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020e7ee:	48 01 cd             	add    %rcx,%rbp
ffffffff8020e7f1:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020e7f8:	00 00 00 
ffffffff8020e7fb:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020e7ff:	48 21 c2             	and    %rax,%rdx
ffffffff8020e802:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020e805:	0f 84 2d ff ff ff    	je     ffffffff8020e738 <_RME_Pgt_Boot_Con+0x58>
ffffffff8020e80b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e80f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020e813:	0f 85 ef 00 00 00    	jne    ffffffff8020e908 <_RME_Pgt_Boot_Con+0x228>
    if((Pos>>RME_PGT_NMORD(Pgt_Parent->Order))!=0U)
ffffffff8020e819:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff8020e81d:	48 89 f0             	mov    %rsi,%rax
ffffffff8020e820:	48 d3 e8             	shr    %cl,%rax
ffffffff8020e823:	48 85 c0             	test   %rax,%rax
ffffffff8020e826:	0f 85 ec 00 00 00    	jne    ffffffff8020e918 <_RME_Pgt_Boot_Con+0x238>
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff8020e82c:	48 8b 45 28          	mov    0x28(%rbp),%rax
    Szord_Parent=RME_PGT_SZORD(Pgt_Parent->Order);
ffffffff8020e830:	48 c1 e9 20          	shr    $0x20,%rcx
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff8020e834:	89 c2                	mov    %eax,%edx
ffffffff8020e836:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e83a:	48 01 d0             	add    %rdx,%rax
    if(Szord_Parent!=Order_Child)
ffffffff8020e83d:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020e840:	0f 85 d2 00 00 00    	jne    ffffffff8020e918 <_RME_Pgt_Boot_Con+0x238>
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff8020e846:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020e849:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020e84c:	48 89 df             	mov    %rbx,%rdi
ffffffff8020e84f:	e8 6c c4 00 00       	call   ffffffff8021acc0 <__RME_Pgt_Pgdir_Map>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff8020e854:	8b 13                	mov    (%rbx),%edx
ffffffff8020e856:	85 d2                	test   %edx,%edx
ffffffff8020e858:	74 04                	je     ffffffff8020e85e <_RME_Pgt_Boot_Con+0x17e>
ffffffff8020e85a:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020e85e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020e863:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020e869:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020e86c:	85 c0                	test   %eax,%eax
ffffffff8020e86e:	74 04                	je     ffffffff8020e874 <_RME_Pgt_Boot_Con+0x194>
ffffffff8020e870:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
ffffffff8020e874:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020e879:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    return 0;
ffffffff8020e87f:	31 c0                	xor    %eax,%eax
}
ffffffff8020e881:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020e885:	5b                   	pop    %rbx
ffffffff8020e886:	5d                   	pop    %rbp
ffffffff8020e887:	c3                   	ret
ffffffff8020e888:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e88f:	00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020e890:	48 89 e8             	mov    %rbp,%rax
ffffffff8020e893:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e897:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e89a:	0f 83 88 00 00 00    	jae    ffffffff8020e928 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020e8a0:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020e8a7:	00 00 00 
ffffffff8020e8aa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e8ae:	48 01 c8             	add    %rcx,%rax
ffffffff8020e8b1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020e8b8:	ff 00 00 
ffffffff8020e8bb:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020e8be:	49 89 d1             	mov    %rdx,%r9
ffffffff8020e8c1:	49 21 c9             	and    %rcx,%r9
ffffffff8020e8c4:	49 39 f9             	cmp    %rdi,%r9
ffffffff8020e8c7:	0f 84 6b fe ff ff    	je     ffffffff8020e738 <_RME_Pgt_Boot_Con+0x58>
ffffffff8020e8cd:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020e8d1:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020e8d5:	75 31                	jne    ffffffff8020e908 <_RME_Pgt_Boot_Con+0x228>
ffffffff8020e8d7:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e8db:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8020e8e1:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020e8e4:	73 42                	jae    ffffffff8020e928 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020e8e6:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020e8ea:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff8020e8ee:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020e8f2:	48 21 c1             	and    %rax,%rcx
ffffffff8020e8f5:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020e8f8:	0f 85 0d ff ff ff    	jne    ffffffff8020e80b <_RME_Pgt_Boot_Con+0x12b>
ffffffff8020e8fe:	e9 35 fe ff ff       	jmp    ffffffff8020e738 <_RME_Pgt_Boot_Con+0x58>
ffffffff8020e903:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e908:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e90f:	e9 6d ff ff ff       	jmp    ffffffff8020e881 <_RME_Pgt_Boot_Con+0x1a1>
ffffffff8020e914:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PGT_ADDR;
ffffffff8020e918:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020e91f:	e9 5d ff ff ff       	jmp    ffffffff8020e881 <_RME_Pgt_Boot_Con+0x1a1>
ffffffff8020e924:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e928:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e92f:	e9 4d ff ff ff       	jmp    ffffffff8020e881 <_RME_Pgt_Boot_Con+0x1a1>
ffffffff8020e934:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e93b:	00 00 00 00 
ffffffff8020e93f:	90                   	nop

ffffffff8020e940 <_RME_Kot_Init>:
{
ffffffff8020e940:	f3 0f 1e fa          	endbr64
    if(Word<RME_KOT_WORD_NUM)
ffffffff8020e944:	48 81 ff ff ff 0b 00 	cmp    $0xbffff,%rdi
ffffffff8020e94b:	76 4e                	jbe    ffffffff8020e99b <_RME_Kot_Init+0x5b>
ffffffff8020e94d:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020e954:	80 ff ff 
ffffffff8020e957:	48 8d 14 f8          	lea    (%rax,%rdi,8),%rdx
ffffffff8020e95b:	83 e7 01             	and    $0x1,%edi
ffffffff8020e95e:	74 20                	je     ffffffff8020e980 <_RME_Kot_Init+0x40>
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e960:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020e967:	80 ff ff 
ffffffff8020e96a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8020e971:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020e975:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e978:	74 1e                	je     ffffffff8020e998 <_RME_Kot_Init+0x58>
ffffffff8020e97a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e980:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8020e987:	48 83 c0 10          	add    $0x10,%rax
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e98b:	48 c7 40 f8 00 00 00 	movq   $0x0,-0x8(%rax)
ffffffff8020e992:	00 
    for(Count=0U;Count<Word;Count++)
ffffffff8020e993:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e996:	75 e8                	jne    ffffffff8020e980 <_RME_Kot_Init+0x40>
ffffffff8020e998:	31 c0                	xor    %eax,%eax
ffffffff8020e99a:	c3                   	ret
        return -1;
ffffffff8020e99b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020e9a2:	c3                   	ret
ffffffff8020e9a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e9aa:	00 00 00 00 
ffffffff8020e9ae:	66 90                	xchg   %ax,%ax

ffffffff8020e9b0 <_RME_Kot_Mark>:
{
ffffffff8020e9b0:	f3 0f 1e fa          	endbr64
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff8020e9b4:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff8020e9b8:	0f 85 a7 01 00 00    	jne    ffffffff8020eb65 <_RME_Kot_Mark+0x1b5>
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e9be:	4c 8d 97 00 00 00 7f 	lea    0x7f000000(%rdi),%r10
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020e9c5:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e9cc:	48 8d bc 37 ff ff ff 	lea    0x7effffff(%rdi,%rsi,1),%rdi
ffffffff8020e9d3:	7e 
{
ffffffff8020e9d4:	53                   	push   %rbx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020e9d5:	48 be 00 00 00 01 00 	movabs $0xffff800001000000,%rsi
ffffffff8020e9dc:	80 ff ff 
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e9df:	4c 89 d1             	mov    %r10,%rcx
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020e9e2:	4d 89 c3             	mov    %r8,%r11
    Start=Start>>RME_WORD_ORDER;
ffffffff8020e9e5:	49 c1 ea 0a          	shr    $0xa,%r10
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e9e9:	48 c1 e9 04          	shr    $0x4,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020e9ed:	4e 8d 0c d5 00 00 00 	lea    0x0(,%r10,8),%r9
ffffffff8020e9f4:	00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020e9f5:	49 d3 e3             	shl    %cl,%r11
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e9f8:	48 89 f9             	mov    %rdi,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020e9fb:	49 8d 1c 31          	lea    (%r9,%rsi,1),%rbx
    End=End>>RME_WORD_ORDER;
ffffffff8020e9ff:	48 c1 ef 0a          	shr    $0xa,%rdi
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ea03:	48 c1 e9 04          	shr    $0x4,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020ea07:	48 8b 03             	mov    (%rbx),%rax
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ea0a:	f7 d1                	not    %ecx
ffffffff8020ea0c:	49 d3 e8             	shr    %cl,%r8
    if(Start==End)
ffffffff8020ea0f:	49 39 fa             	cmp    %rdi,%r10
ffffffff8020ea12:	0f 84 30 01 00 00    	je     ffffffff8020eb48 <_RME_Kot_Mark+0x198>
        if((Old_Val&Mask_Begin)!=0U)
ffffffff8020ea18:	49 85 c3             	test   %rax,%r11
ffffffff8020ea1b:	0f 85 e1 00 00 00    	jne    ffffffff8020eb02 <_RME_Kot_Mark+0x152>
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020ea21:	4c 89 da             	mov    %r11,%rdx
ffffffff8020ea24:	48 09 c2             	or     %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020ea27:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff8020ea2c:	0f 94 c2             	sete   %dl
ffffffff8020ea2f:	84 d2                	test   %dl,%dl
ffffffff8020ea31:	0f 84 cb 00 00 00    	je     ffffffff8020eb02 <_RME_Kot_Mark+0x152>
        for(Count=Start+1U;Count<End;Count++)
ffffffff8020ea37:	49 8d 4a 01          	lea    0x1(%r10),%rcx
ffffffff8020ea3b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020ea3e:	0f 83 cc 00 00 00    	jae    ffffffff8020eb10 <_RME_Kot_Mark+0x160>
ffffffff8020ea44:	49 8d 54 31 08       	lea    0x8(%r9,%rsi,1),%rdx
ffffffff8020ea49:	31 c0                	xor    %eax,%eax
ffffffff8020ea4b:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8020ea52:	eb 23                	jmp    ffffffff8020ea77 <_RME_Kot_Mark+0xc7>
ffffffff8020ea54:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020ea58:	f0 48 0f b1 32       	lock cmpxchg %rsi,(%rdx)
ffffffff8020ea5d:	41 0f 94 c1          	sete   %r9b
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Count],
ffffffff8020ea61:	45 84 c9             	test   %r9b,%r9b
ffffffff8020ea64:	74 17                	je     ffffffff8020ea7d <_RME_Kot_Mark+0xcd>
        for(Count=Start+1U;Count<End;Count++)
ffffffff8020ea66:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8020ea6a:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8020ea6e:	48 39 cf             	cmp    %rcx,%rdi
ffffffff8020ea71:	0f 84 99 00 00 00    	je     ffffffff8020eb10 <_RME_Kot_Mark+0x160>
            if(Old_Val!=0U)
ffffffff8020ea77:	48 83 3a 00          	cmpq   $0x0,(%rdx)
ffffffff8020ea7b:	74 db                	je     ffffffff8020ea58 <_RME_Kot_Mark+0xa8>
            for(Count--;Count>Start;Count--)
ffffffff8020ea7d:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
ffffffff8020ea81:	49 39 d2             	cmp    %rdx,%r10
ffffffff8020ea84:	73 72                	jae    ffffffff8020eaf8 <_RME_Kot_Mark+0x148>
ffffffff8020ea86:	48 89 c8             	mov    %rcx,%rax
ffffffff8020ea89:	4c 29 d0             	sub    %r10,%rax
ffffffff8020ea8c:	48 8d 78 ff          	lea    -0x1(%rax),%rdi
ffffffff8020ea90:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ea94:	74 50                	je     ffffffff8020eae6 <_RME_Kot_Mark+0x136>
ffffffff8020ea96:	48 89 fe             	mov    %rdi,%rsi
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020ea99:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8020ea9d:	49 b8 f0 ff ff 00 00 	movabs $0xffff800000fffff0,%r8
ffffffff8020eaa4:	80 ff ff 
ffffffff8020eaa7:	48 83 e6 fe          	and    $0xfffffffffffffffe,%rsi
ffffffff8020eaab:	49 8d 04 c8          	lea    (%r8,%rcx,8),%rax
ffffffff8020eaaf:	48 29 f1             	sub    %rsi,%rcx
ffffffff8020eab2:	49 8d 0c c8          	lea    (%r8,%rcx,8),%rcx
ffffffff8020eab6:	49 89 c0             	mov    %rax,%r8
ffffffff8020eab9:	49 29 c8             	sub    %rcx,%r8
ffffffff8020eabc:	41 83 e0 10          	and    $0x10,%r8d
ffffffff8020eac0:	74 0c                	je     ffffffff8020eace <_RME_Kot_Mark+0x11e>
ffffffff8020eac2:	0f 11 00             	movups %xmm0,(%rax)
            for(Count--;Count>Start;Count--)
ffffffff8020eac5:	48 83 e8 10          	sub    $0x10,%rax
ffffffff8020eac9:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020eacc:	74 10                	je     ffffffff8020eade <_RME_Kot_Mark+0x12e>
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020eace:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8020ead1:	48 83 e8 20          	sub    $0x20,%rax
ffffffff8020ead5:	0f 11 40 10          	movups %xmm0,0x10(%rax)
            for(Count--;Count>Start;Count--)
ffffffff8020ead9:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020eadc:	75 f0                	jne    ffffffff8020eace <_RME_Kot_Mark+0x11e>
ffffffff8020eade:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020eae1:	74 15                	je     ffffffff8020eaf8 <_RME_Kot_Mark+0x148>
ffffffff8020eae3:	48 29 f2             	sub    %rsi,%rdx
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020eae6:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020eaed:	80 ff ff 
ffffffff8020eaf0:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
ffffffff8020eaf7:	00 
            RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff8020eaf8:	49 f7 d3             	not    %r11
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff8020eafb:	4c 8b 1b             	mov    (%rbx),%r11
ffffffff8020eafe:	f0 4c 21 1b          	lock and %r11,(%rbx)
        return RME_ERR_KOT_BMP;
ffffffff8020eb02:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020eb09:	5b                   	pop    %rbx
ffffffff8020eb0a:	c3                   	ret
ffffffff8020eb0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Old_Val=RME_KOT_VA_BASE[End];
ffffffff8020eb10:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020eb17:	80 ff ff 
ffffffff8020eb1a:	48 8d 14 f8          	lea    (%rax,%rdi,8),%rdx
ffffffff8020eb1e:	48 8b 02             	mov    (%rdx),%rax
            if((Old_Val&Mask_End)!=0U)
ffffffff8020eb21:	49 85 c0             	test   %rax,%r8
ffffffff8020eb24:	0f 85 53 ff ff ff    	jne    ffffffff8020ea7d <_RME_Kot_Mark+0xcd>
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[End],
ffffffff8020eb2a:	49 09 c0             	or     %rax,%r8
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020eb2d:	f0 4c 0f b1 02       	lock cmpxchg %r8,(%rdx)
ffffffff8020eb32:	41 0f 94 c0          	sete   %r8b
ffffffff8020eb36:	45 84 c0             	test   %r8b,%r8b
ffffffff8020eb39:	0f 84 3e ff ff ff    	je     ffffffff8020ea7d <_RME_Kot_Mark+0xcd>
    return 0;
ffffffff8020eb3f:	31 c0                	xor    %eax,%eax
}
ffffffff8020eb41:	5b                   	pop    %rbx
ffffffff8020eb42:	c3                   	ret
ffffffff8020eb43:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
ffffffff8020eb48:	4d 21 d8             	and    %r11,%r8
ffffffff8020eb4b:	49 85 c0             	test   %rax,%r8
ffffffff8020eb4e:	75 b2                	jne    ffffffff8020eb02 <_RME_Kot_Mark+0x152>
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020eb50:	49 09 c0             	or     %rax,%r8
ffffffff8020eb53:	f0 4c 0f b1 03       	lock cmpxchg %r8,(%rbx)
ffffffff8020eb58:	41 0f 94 c0          	sete   %r8b
ffffffff8020eb5c:	41 80 f8 01          	cmp    $0x1,%r8b
}
ffffffff8020eb60:	5b                   	pop    %rbx
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020eb61:	48 19 c0             	sbb    %rax,%rax
}
ffffffff8020eb64:	c3                   	ret
        return RME_ERR_KOT_BMP;
ffffffff8020eb65:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
}
ffffffff8020eb69:	c3                   	ret
ffffffff8020eb6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020eb70 <_RME_Cpt_Crt>:
{
ffffffff8020eb70:	41 55                	push   %r13
ffffffff8020eb72:	41 54                	push   %r12
ffffffff8020eb74:	55                   	push   %rbp
ffffffff8020eb75:	48 89 cd             	mov    %rcx,%rbp
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020eb78:	49 8d 49 ff          	lea    -0x1(%r9),%rcx
{
ffffffff8020eb7c:	53                   	push   %rbx
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020eb7d:	48 81 f9 ff 7f 00 00 	cmp    $0x7fff,%rcx
ffffffff8020eb84:	0f 87 9e 02 00 00    	ja     ffffffff8020ee28 <_RME_Cpt_Crt+0x2b8>
ffffffff8020eb8a:	48 89 f0             	mov    %rsi,%rax
ffffffff8020eb8d:	4d 89 cc             	mov    %r9,%r12
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020eb90:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff8020eb94:	f6 c4 80             	test   $0x80,%ah
ffffffff8020eb97:	0f 84 bb 01 00 00    	je     ffffffff8020ed58 <_RME_Cpt_Crt+0x1e8>
ffffffff8020eb9d:	48 89 c1             	mov    %rax,%rcx
ffffffff8020eba0:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020eba4:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020eba7:	0f 83 7b 02 00 00    	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x2b8>
ffffffff8020ebad:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020ebb1:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020ebb5:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020ebbc:	ff 00 00 
ffffffff8020ebbf:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020ebc6:	00 00 00 
ffffffff8020ebc9:	48 01 f9             	add    %rdi,%rcx
ffffffff8020ebcc:	4c 8b 09             	mov    (%rcx),%r9
ffffffff8020ebcf:	4c 89 cb             	mov    %r9,%rbx
ffffffff8020ebd2:	4c 21 d3             	and    %r10,%rbx
ffffffff8020ebd5:	4c 39 db             	cmp    %r11,%rbx
ffffffff8020ebd8:	0f 84 b1 01 00 00    	je     ffffffff8020ed8f <_RME_Cpt_Crt+0x21f>
ffffffff8020ebde:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8020ebe2:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8020ebe6:	0f 85 24 02 00 00    	jne    ffffffff8020ee10 <_RME_Cpt_Crt+0x2a0>
ffffffff8020ebec:	4c 8b 49 28          	mov    0x28(%rcx),%r9
ffffffff8020ebf0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ebf5:	4c 39 c8             	cmp    %r9,%rax
ffffffff8020ebf8:	0f 83 2a 02 00 00    	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x2b8>
ffffffff8020ebfe:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ec02:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020ec06:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020ec09:	49 21 ca             	and    %rcx,%r10
ffffffff8020ec0c:	4d 39 da             	cmp    %r11,%r10
ffffffff8020ec0f:	0f 84 7a 01 00 00    	je     ffffffff8020ed8f <_RME_Cpt_Crt+0x21f>
ffffffff8020ec15:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020ec19:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020ec1d:	0f 85 ed 01 00 00    	jne    ffffffff8020ee10 <_RME_Cpt_Crt+0x2a0>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020ec23:	f6 c6 80             	test   $0x80,%dh
ffffffff8020ec26:	0f 85 74 01 00 00    	jne    ffffffff8020eda0 <_RME_Cpt_Crt+0x230>
ffffffff8020ec2c:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020ec2f:	0f 83 f3 01 00 00    	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x2b8>
ffffffff8020ec35:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020ec3c:	ff 00 00 
ffffffff8020ec3f:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020ec43:	48 01 fa             	add    %rdi,%rdx
ffffffff8020ec46:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020ec4d:	00 00 00 
ffffffff8020ec50:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020ec53:	48 21 ce             	and    %rcx,%rsi
ffffffff8020ec56:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020ec59:	0f 84 30 01 00 00    	je     ffffffff8020ed8f <_RME_Cpt_Crt+0x21f>
ffffffff8020ec5f:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020ec63:	48 83 f9 02          	cmp    $0x2,%rcx
ffffffff8020ec67:	0f 85 a3 01 00 00    	jne    ffffffff8020ee10 <_RME_Cpt_Crt+0x2a0>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020ec6d:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8020ec71:	0f 84 a5 01 00 00    	je     ffffffff8020ee1c <_RME_Cpt_Crt+0x2ac>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020ec77:	f6 42 10 01          	testb  $0x1,0x10(%rdx)
ffffffff8020ec7b:	0f 84 9b 01 00 00    	je     ffffffff8020ee1c <_RME_Cpt_Crt+0x2ac>
ffffffff8020ec81:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020ec85:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8020ec88:	4e 8d 2c 01          	lea    (%rcx,%r8,1),%r13
ffffffff8020ec8c:	49 0f 42 c8          	cmovb  %r8,%rcx
ffffffff8020ec90:	49 39 cd             	cmp    %rcx,%r13
ffffffff8020ec93:	0f 82 83 01 00 00    	jb     ffffffff8020ee1c <_RME_Cpt_Crt+0x2ac>
ffffffff8020ec99:	4c 89 e6             	mov    %r12,%rsi
ffffffff8020ec9c:	31 db                	xor    %ebx,%ebx
ffffffff8020ec9e:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020eca2:	48 89 f1             	mov    %rsi,%rcx
ffffffff8020eca5:	4c 01 e9             	add    %r13,%rcx
ffffffff8020eca8:	0f 92 c3             	setb   %bl
ffffffff8020ecab:	0f 82 6b 01 00 00    	jb     ffffffff8020ee1c <_RME_Cpt_Crt+0x2ac>
ffffffff8020ecb1:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8020ecb5:	48 39 4a 30          	cmp    %rcx,0x30(%rdx)
ffffffff8020ecb9:	0f 82 5d 01 00 00    	jb     ffffffff8020ee1c <_RME_Cpt_Crt+0x2ac>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020ecbf:	48 3b 68 28          	cmp    0x28(%rax),%rbp
ffffffff8020ecc3:	0f 83 5f 01 00 00    	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x2b8>
ffffffff8020ecc9:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020ecd0:	00 00 00 
ffffffff8020ecd3:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020ecd7:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff8020ecdb:	48 89 d8             	mov    %rbx,%rax
ffffffff8020ecde:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff8020ece4:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020ece7:	84 d2                	test   %dl,%dl
ffffffff8020ece9:	0f 84 45 01 00 00    	je     ffffffff8020ee34 <_RME_Cpt_Crt+0x2c4>
ffffffff8020ecef:	48 c7 45 20 01 00 00 	movq   $0x1,0x20(%rbp)
ffffffff8020ecf6:	00 
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020ecf7:	4c 89 ef             	mov    %r13,%rdi
ffffffff8020ecfa:	e8 b1 fc ff ff       	call   ffffffff8020e9b0 <_RME_Kot_Mark>
ffffffff8020ecff:	48 85 c0             	test   %rax,%rax
ffffffff8020ed02:	0f 88 38 01 00 00    	js     ffffffff8020ee40 <_RME_Cpt_Crt+0x2d0>
ffffffff8020ed08:	4c 89 e8             	mov    %r13,%rax
ffffffff8020ed0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020ed10:	48 83 c3 01          	add    $0x1,%rbx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020ed14:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020ed1b:	48 83 c0 40          	add    $0x40,%rax
ffffffff8020ed1f:	4c 39 e3             	cmp    %r12,%rbx
ffffffff8020ed22:	72 ec                	jb     ffffffff8020ed10 <_RME_Cpt_Crt+0x1a0>
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020ed24:	48 b8 00 00 00 00 00 	movabs $0x3000000000000,%rax
ffffffff8020ed2b:	00 03 00 
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020ed2e:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff8020ed35:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020ed36:	4c 89 6d 18          	mov    %r13,0x18(%rbp)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020ed3a:	48 c7 45 10 ff 00 00 	movq   $0xff,0x10(%rbp)
ffffffff8020ed41:	00 
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020ed42:	4c 89 65 28          	mov    %r12,0x28(%rbp)
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020ed46:	48 89 45 00          	mov    %rax,0x0(%rbp)
    return 0;
ffffffff8020ed4a:	31 c0                	xor    %eax,%eax
}
ffffffff8020ed4c:	5b                   	pop    %rbx
ffffffff8020ed4d:	5d                   	pop    %rbp
ffffffff8020ed4e:	41 5c                	pop    %r12
ffffffff8020ed50:	41 5d                	pop    %r13
ffffffff8020ed52:	c3                   	ret
ffffffff8020ed53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020ed58:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020ed5b:	0f 83 c7 00 00 00    	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x2b8>
ffffffff8020ed61:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020ed65:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ed69:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020ed70:	ff 00 00 
ffffffff8020ed73:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020ed7a:	00 00 00 
ffffffff8020ed7d:	48 01 f8             	add    %rdi,%rax
ffffffff8020ed80:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020ed83:	49 21 c9             	and    %rcx,%r9
ffffffff8020ed86:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020ed89:	0f 85 86 fe ff ff    	jne    ffffffff8020ec15 <_RME_Cpt_Crt+0xa5>
ffffffff8020ed8f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ed96:	eb b4                	jmp    ffffffff8020ed4c <_RME_Cpt_Crt+0x1dc>
ffffffff8020ed98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020ed9f:	00 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020eda0:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020eda3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020eda7:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020edaa:	73 7c                	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x2b8>
ffffffff8020edac:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020edb3:	00 00 00 
ffffffff8020edb6:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020edba:	48 01 f9             	add    %rdi,%rcx
ffffffff8020edbd:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020edc4:	ff 00 00 
ffffffff8020edc7:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8020edca:	49 89 f2             	mov    %rsi,%r10
ffffffff8020edcd:	49 21 fa             	and    %rdi,%r10
ffffffff8020edd0:	4d 39 ca             	cmp    %r9,%r10
ffffffff8020edd3:	74 ba                	je     ffffffff8020ed8f <_RME_Cpt_Crt+0x21f>
ffffffff8020edd5:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020edd9:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020eddd:	75 31                	jne    ffffffff8020ee10 <_RME_Cpt_Crt+0x2a0>
ffffffff8020eddf:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020ede3:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020ede9:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020edec:	73 3a                	jae    ffffffff8020ee28 <_RME_Cpt_Crt+0x2b8>
ffffffff8020edee:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020edf2:	48 03 51 18          	add    0x18(%rcx),%rdx
ffffffff8020edf6:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020edf9:	48 21 cf             	and    %rcx,%rdi
ffffffff8020edfc:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020edff:	0f 85 5a fe ff ff    	jne    ffffffff8020ec5f <_RME_Cpt_Crt+0xef>
ffffffff8020ee05:	eb 88                	jmp    ffffffff8020ed8f <_RME_Cpt_Crt+0x21f>
ffffffff8020ee07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020ee0e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020ee10:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ee17:	e9 30 ff ff ff       	jmp    ffffffff8020ed4c <_RME_Cpt_Crt+0x1dc>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020ee1c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ee23:	e9 24 ff ff ff       	jmp    ffffffff8020ed4c <_RME_Cpt_Crt+0x1dc>
        return RME_ERR_CPT_RANGE;
ffffffff8020ee28:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ee2f:	e9 18 ff ff ff       	jmp    ffffffff8020ed4c <_RME_Cpt_Crt+0x1dc>
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020ee34:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020ee3b:	e9 0c ff ff ff       	jmp    ffffffff8020ed4c <_RME_Cpt_Crt+0x1dc>
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020ee40:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8020ee47:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020ee48:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020ee4f:	e9 f8 fe ff ff       	jmp    ffffffff8020ed4c <_RME_Cpt_Crt+0x1dc>
ffffffff8020ee54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020ee5b:	00 00 00 00 
ffffffff8020ee5f:	90                   	nop

ffffffff8020ee60 <_RME_Pgt_Crt>:
{
ffffffff8020ee60:	41 57                	push   %r15
ffffffff8020ee62:	49 89 cf             	mov    %rcx,%r15
ffffffff8020ee65:	41 56                	push   %r14
ffffffff8020ee67:	41 55                	push   %r13
ffffffff8020ee69:	41 54                	push   %r12
ffffffff8020ee6b:	55                   	push   %rbp
ffffffff8020ee6c:	53                   	push   %rbx
ffffffff8020ee6d:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020ee71:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
ffffffff8020ee76:	4c 8b 6c 24 60       	mov    0x60(%rsp),%r13
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020ee7b:	4a 8d 4c 2d 00       	lea    0x0(%rbp,%r13,1),%rcx
ffffffff8020ee80:	48 83 f9 40          	cmp    $0x40,%rcx
ffffffff8020ee84:	0f 87 3e 03 00 00    	ja     ffffffff8020f1c8 <_RME_Pgt_Crt+0x368>
ffffffff8020ee8a:	48 89 d0             	mov    %rdx,%rax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ee8d:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020ee91:	4c 89 c2             	mov    %r8,%rdx
ffffffff8020ee94:	4d 89 cc             	mov    %r9,%r12
ffffffff8020ee97:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8020ee9d:	0f 84 15 02 00 00    	je     ffffffff8020f0b8 <_RME_Pgt_Crt+0x258>
ffffffff8020eea3:	49 89 f2             	mov    %rsi,%r10
ffffffff8020eea6:	49 c1 ea 10          	shr    $0x10,%r10
ffffffff8020eeaa:	49 39 ca             	cmp    %rcx,%r10
ffffffff8020eead:	0f 83 dd 02 00 00    	jae    ffffffff8020f190 <_RME_Pgt_Crt+0x330>
ffffffff8020eeb3:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020eeb7:	49 c1 e2 06          	shl    $0x6,%r10
ffffffff8020eebb:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8020eec2:	ff 00 00 
ffffffff8020eec5:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020eecc:	00 00 00 
ffffffff8020eecf:	49 01 fa             	add    %rdi,%r10
ffffffff8020eed2:	4d 8b 1a             	mov    (%r10),%r11
ffffffff8020eed5:	4c 89 db             	mov    %r11,%rbx
ffffffff8020eed8:	4c 21 c3             	and    %r8,%rbx
ffffffff8020eedb:	4c 39 cb             	cmp    %r9,%rbx
ffffffff8020eede:	0f 84 0c 02 00 00    	je     ffffffff8020f0f0 <_RME_Pgt_Crt+0x290>
ffffffff8020eee4:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff8020eee8:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff8020eeec:	0f 85 7e 02 00 00    	jne    ffffffff8020f170 <_RME_Pgt_Crt+0x310>
ffffffff8020eef2:	4d 8b 5a 28          	mov    0x28(%r10),%r11
ffffffff8020eef6:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8020eefc:	4c 39 de             	cmp    %r11,%rsi
ffffffff8020eeff:	0f 83 8b 02 00 00    	jae    ffffffff8020f190 <_RME_Pgt_Crt+0x330>
ffffffff8020ef05:	49 8b 5a 18          	mov    0x18(%r10),%rbx
ffffffff8020ef09:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020ef0d:	48 01 f3             	add    %rsi,%rbx
ffffffff8020ef10:	48 8b 33             	mov    (%rbx),%rsi
ffffffff8020ef13:	49 21 f0             	and    %rsi,%r8
ffffffff8020ef16:	4d 39 c8             	cmp    %r9,%r8
ffffffff8020ef19:	0f 84 d1 01 00 00    	je     ffffffff8020f0f0 <_RME_Pgt_Crt+0x290>
ffffffff8020ef1f:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020ef23:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020ef27:	0f 85 43 02 00 00    	jne    ffffffff8020f170 <_RME_Pgt_Crt+0x310>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020ef2d:	f6 c4 80             	test   $0x80,%ah
ffffffff8020ef30:	0f 85 ca 01 00 00    	jne    ffffffff8020f100 <_RME_Pgt_Crt+0x2a0>
ffffffff8020ef36:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020ef39:	0f 83 51 02 00 00    	jae    ffffffff8020f190 <_RME_Pgt_Crt+0x330>
ffffffff8020ef3f:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020ef46:	ff 00 00 
ffffffff8020ef49:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ef4d:	48 01 f8             	add    %rdi,%rax
ffffffff8020ef50:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020ef57:	00 00 00 
ffffffff8020ef5a:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020ef5d:	48 21 ce             	and    %rcx,%rsi
ffffffff8020ef60:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020ef63:	0f 84 87 01 00 00    	je     ffffffff8020f0f0 <_RME_Pgt_Crt+0x290>
ffffffff8020ef69:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020ef6d:	48 83 f9 02          	cmp    $0x2,%rcx
ffffffff8020ef71:	0f 85 f9 01 00 00    	jne    ffffffff8020f170 <_RME_Pgt_Crt+0x310>
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff8020ef77:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020ef7b:	0f 84 ff 01 00 00    	je     ffffffff8020f180 <_RME_Pgt_Crt+0x320>
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020ef81:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff8020ef87:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020ef8a:	41 d3 e1             	shl    %cl,%r9d
ffffffff8020ef8d:	4d 63 c9             	movslq %r9d,%r9
ffffffff8020ef90:	49 c1 e1 03          	shl    $0x3,%r9
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff8020ef94:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8020ef98:	0f 84 e2 01 00 00    	je     ffffffff8020f180 <_RME_Pgt_Crt+0x320>
ffffffff8020ef9e:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8020efa2:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8020efa5:	4c 8d 34 11          	lea    (%rcx,%rdx,1),%r14
ffffffff8020efa9:	48 0f 42 ca          	cmovb  %rdx,%rcx
ffffffff8020efad:	49 39 ce             	cmp    %rcx,%r14
ffffffff8020efb0:	0f 82 ca 01 00 00    	jb     ffffffff8020f180 <_RME_Pgt_Crt+0x320>
ffffffff8020efb6:	4c 89 f2             	mov    %r14,%rdx
ffffffff8020efb9:	4c 01 ca             	add    %r9,%rdx
ffffffff8020efbc:	0f 82 be 01 00 00    	jb     ffffffff8020f180 <_RME_Pgt_Crt+0x320>
ffffffff8020efc2:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8020efc6:	48 39 50 30          	cmp    %rdx,0x30(%rax)
ffffffff8020efca:	0f 82 b0 01 00 00    	jb     ffffffff8020f180 <_RME_Pgt_Crt+0x320>
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
ffffffff8020efd0:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
ffffffff8020efd5:	4c 89 e9             	mov    %r13,%rcx
ffffffff8020efd8:	4d 89 f0             	mov    %r14,%r8
ffffffff8020efdb:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020efde:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020efe1:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff8020efe6:	e8 d5 ba 00 00       	call   ffffffff8021aac0 <__RME_Pgt_Check>
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020efeb:	b9 40 00 00 00       	mov    $0x40,%ecx
ffffffff8020eff0:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
ffffffff8020eff5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020effc:	44 29 e9             	sub    %r13d,%ecx
ffffffff8020efff:	29 e9                	sub    %ebp,%ecx
ffffffff8020f001:	48 d3 e8             	shr    %cl,%rax
ffffffff8020f004:	4c 21 e0             	and    %r12,%rax
ffffffff8020f007:	0f 85 bb 01 00 00    	jne    ffffffff8020f1c8 <_RME_Pgt_Crt+0x368>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020f00d:	4c 3b 7b 28          	cmp    0x28(%rbx),%r15
ffffffff8020f011:	0f 83 79 01 00 00    	jae    ffffffff8020f190 <_RME_Pgt_Crt+0x330>
ffffffff8020f017:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f01e:	00 00 00 
ffffffff8020f021:	49 c1 e7 06          	shl    $0x6,%r15
ffffffff8020f025:	4c 03 7b 18          	add    0x18(%rbx),%r15
ffffffff8020f029:	4c 89 fb             	mov    %r15,%rbx
ffffffff8020f02c:	f0 49 0f b1 17       	lock cmpxchg %rdx,(%r15)
ffffffff8020f031:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020f034:	84 d2                	test   %dl,%dl
ffffffff8020f036:	0f 84 64 01 00 00    	je     ffffffff8020f1a0 <_RME_Pgt_Crt+0x340>
ffffffff8020f03c:	49 c7 47 20 01 00 00 	movq   $0x1,0x20(%r15)
ffffffff8020f043:	00 
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff8020f044:	4c 89 ce             	mov    %r9,%rsi
ffffffff8020f047:	4c 89 f7             	mov    %r14,%rdi
ffffffff8020f04a:	e8 61 f9 ff ff       	call   ffffffff8020e9b0 <_RME_Kot_Mark>
ffffffff8020f04f:	49 89 c7             	mov    %rax,%r15
ffffffff8020f052:	48 85 c0             	test   %rax,%rax
ffffffff8020f055:	0f 85 55 01 00 00    	jne    ffffffff8020f1b0 <_RME_Pgt_Crt+0x350>
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020f05b:	4c 89 73 18          	mov    %r14,0x18(%rbx)
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f05f:	4c 8b 74 24 50       	mov    0x50(%rsp),%r14
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f064:	48 c1 e5 20          	shl    $0x20,%rbp
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020f068:	48 89 df             	mov    %rbx,%rdi
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f06b:	4c 09 ed             	or     %r13,%rbp
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020f06e:	66 0f 6f 05 2a da 00 	movdqa 0xda2a(%rip),%xmm0        # ffffffff8021caa0 <Table.1+0x120>
ffffffff8020f075:	00 
    Pgt_Crt->ASID=0U;
ffffffff8020f076:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
ffffffff8020f07d:	00 
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f07e:	4d 09 e6             	or     %r12,%r14
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f081:	48 89 6b 28          	mov    %rbp,0x28(%rbx)
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f085:	4c 89 73 30          	mov    %r14,0x30(%rbx)
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020f089:	0f 11 43 08          	movups %xmm0,0x8(%rbx)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020f08d:	e8 7e ba 00 00       	call   ffffffff8021ab10 <__RME_Pgt_Init>
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020f092:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff8020f099:	00 04 00 
ffffffff8020f09c:	48 89 03             	mov    %rax,(%rbx)
}
ffffffff8020f09f:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020f0a3:	4c 89 f8             	mov    %r15,%rax
ffffffff8020f0a6:	5b                   	pop    %rbx
ffffffff8020f0a7:	5d                   	pop    %rbp
ffffffff8020f0a8:	41 5c                	pop    %r12
ffffffff8020f0aa:	41 5d                	pop    %r13
ffffffff8020f0ac:	41 5e                	pop    %r14
ffffffff8020f0ae:	41 5f                	pop    %r15
ffffffff8020f0b0:	c3                   	ret
ffffffff8020f0b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f0b8:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020f0bb:	0f 83 cf 00 00 00    	jae    ffffffff8020f190 <_RME_Pgt_Crt+0x330>
ffffffff8020f0c1:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020f0c5:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020f0c9:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8020f0d0:	ff 00 00 
ffffffff8020f0d3:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020f0da:	00 00 00 
ffffffff8020f0dd:	48 8d 1c 3e          	lea    (%rsi,%rdi,1),%rbx
ffffffff8020f0e1:	48 8b 33             	mov    (%rbx),%rsi
ffffffff8020f0e4:	49 21 f0             	and    %rsi,%r8
ffffffff8020f0e7:	4d 39 c8             	cmp    %r9,%r8
ffffffff8020f0ea:	0f 85 2f fe ff ff    	jne    ffffffff8020ef1f <_RME_Pgt_Crt+0xbf>
ffffffff8020f0f0:	49 c7 c7 f7 ff ff ff 	mov    $0xfffffffffffffff7,%r15
ffffffff8020f0f7:	eb a6                	jmp    ffffffff8020f09f <_RME_Pgt_Crt+0x23f>
ffffffff8020f0f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f100:	48 89 c6             	mov    %rax,%rsi
ffffffff8020f103:	48 c1 ee 10          	shr    $0x10,%rsi
ffffffff8020f107:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020f10a:	0f 83 80 00 00 00    	jae    ffffffff8020f190 <_RME_Pgt_Crt+0x330>
ffffffff8020f110:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020f114:	48 8d 0c 3e          	lea    (%rsi,%rdi,1),%rcx
ffffffff8020f118:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f11f:	ff 00 00 
ffffffff8020f122:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f129:	00 00 00 
ffffffff8020f12c:	4c 8b 01             	mov    (%rcx),%r8
ffffffff8020f12f:	4d 89 c1             	mov    %r8,%r9
ffffffff8020f132:	49 21 f1             	and    %rsi,%r9
ffffffff8020f135:	49 39 f9             	cmp    %rdi,%r9
ffffffff8020f138:	74 b6                	je     ffffffff8020f0f0 <_RME_Pgt_Crt+0x290>
ffffffff8020f13a:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8020f13e:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff8020f142:	75 2c                	jne    ffffffff8020f170 <_RME_Pgt_Crt+0x310>
ffffffff8020f144:	4c 8b 41 28          	mov    0x28(%rcx),%r8
ffffffff8020f148:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f14d:	4c 39 c0             	cmp    %r8,%rax
ffffffff8020f150:	73 3e                	jae    ffffffff8020f190 <_RME_Pgt_Crt+0x330>
ffffffff8020f152:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f156:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020f15a:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020f15d:	48 21 ce             	and    %rcx,%rsi
ffffffff8020f160:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f163:	0f 85 00 fe ff ff    	jne    ffffffff8020ef69 <_RME_Pgt_Crt+0x109>
ffffffff8020f169:	eb 85                	jmp    ffffffff8020f0f0 <_RME_Pgt_Crt+0x290>
ffffffff8020f16b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f170:	49 c7 c7 fe ff ff ff 	mov    $0xfffffffffffffffe,%r15
ffffffff8020f177:	e9 23 ff ff ff       	jmp    ffffffff8020f09f <_RME_Pgt_Crt+0x23f>
ffffffff8020f17c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff8020f180:	49 c7 c7 f9 ff ff ff 	mov    $0xfffffffffffffff9,%r15
ffffffff8020f187:	e9 13 ff ff ff       	jmp    ffffffff8020f09f <_RME_Pgt_Crt+0x23f>
ffffffff8020f18c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f190:	49 c7 c7 fd ff ff ff 	mov    $0xfffffffffffffffd,%r15
ffffffff8020f197:	e9 03 ff ff ff       	jmp    ffffffff8020f09f <_RME_Pgt_Crt+0x23f>
ffffffff8020f19c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020f1a0:	49 c7 c7 fb ff ff ff 	mov    $0xfffffffffffffffb,%r15
ffffffff8020f1a7:	e9 f3 fe ff ff       	jmp    ffffffff8020f09f <_RME_Pgt_Crt+0x23f>
ffffffff8020f1ac:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020f1b0:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CPT_KOT;
ffffffff8020f1b7:	49 c7 c7 fc ff ff ff 	mov    $0xfffffffffffffffc,%r15
ffffffff8020f1be:	e9 dc fe ff ff       	jmp    ffffffff8020f09f <_RME_Pgt_Crt+0x23f>
ffffffff8020f1c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return RME_ERR_PGT_HW;
ffffffff8020f1c8:	49 c7 c7 99 ff ff ff 	mov    $0xffffffffffffff99,%r15
ffffffff8020f1cf:	e9 cb fe ff ff       	jmp    ffffffff8020f09f <_RME_Pgt_Crt+0x23f>
ffffffff8020f1d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020f1db:	00 00 00 00 
ffffffff8020f1df:	90                   	nop

ffffffff8020f1e0 <_RME_Thd_Crt>:
{
ffffffff8020f1e0:	41 57                	push   %r15
ffffffff8020f1e2:	49 89 cf             	mov    %rcx,%r15
ffffffff8020f1e5:	41 56                	push   %r14
ffffffff8020f1e7:	49 89 f6             	mov    %rsi,%r14
ffffffff8020f1ea:	41 55                	push   %r13
ffffffff8020f1ec:	49 89 fd             	mov    %rdi,%r13
ffffffff8020f1ef:	41 54                	push   %r12
ffffffff8020f1f1:	4d 89 cc             	mov    %r9,%r12
ffffffff8020f1f4:	55                   	push   %rbp
ffffffff8020f1f5:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020f1f8:	53                   	push   %rbx
ffffffff8020f1f9:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020f1fc:	48 83 ec 08          	sub    $0x8,%rsp
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
ffffffff8020f200:	e8 3a c6 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020f205:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f209:	4c 39 60 48          	cmp    %r12,0x48(%rax)
ffffffff8020f20d:	0f 82 6d 04 00 00    	jb     ffffffff8020f680 <_RME_Thd_Crt+0x4a0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f213:	49 8b 4d 28          	mov    0x28(%r13),%rcx
ffffffff8020f217:	41 f7 c6 00 80 00 00 	test   $0x8000,%r14d
ffffffff8020f21e:	0f 84 bc 02 00 00    	je     ffffffff8020f4e0 <_RME_Thd_Crt+0x300>
ffffffff8020f224:	4d 89 f1             	mov    %r14,%r9
ffffffff8020f227:	49 c1 e9 10          	shr    $0x10,%r9
ffffffff8020f22b:	49 39 c9             	cmp    %rcx,%r9
ffffffff8020f22e:	0f 83 2c 04 00 00    	jae    ffffffff8020f660 <_RME_Thd_Crt+0x480>
ffffffff8020f234:	49 8b 75 18          	mov    0x18(%r13),%rsi
ffffffff8020f238:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020f23c:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff8020f243:	ff 00 00 
ffffffff8020f246:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020f24d:	00 00 00 
ffffffff8020f250:	49 01 f1             	add    %rsi,%r9
ffffffff8020f253:	49 8b 11             	mov    (%r9),%rdx
ffffffff8020f256:	49 89 d2             	mov    %rdx,%r10
ffffffff8020f259:	49 21 c2             	and    %rax,%r10
ffffffff8020f25c:	4d 39 c2             	cmp    %r8,%r10
ffffffff8020f25f:	0f 84 db 03 00 00    	je     ffffffff8020f640 <_RME_Thd_Crt+0x460>
ffffffff8020f265:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020f269:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020f26d:	0f 85 bd 02 00 00    	jne    ffffffff8020f530 <_RME_Thd_Crt+0x350>
ffffffff8020f273:	4c 89 f2             	mov    %r14,%rdx
ffffffff8020f276:	49 8b 79 28          	mov    0x28(%r9),%rdi
ffffffff8020f27a:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020f280:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020f283:	0f 83 d7 03 00 00    	jae    ffffffff8020f660 <_RME_Thd_Crt+0x480>
ffffffff8020f289:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f28d:	49 03 51 18          	add    0x18(%r9),%rdx
ffffffff8020f291:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff8020f294:	48 21 f8             	and    %rdi,%rax
ffffffff8020f297:	4c 39 c0             	cmp    %r8,%rax
ffffffff8020f29a:	0f 84 a0 03 00 00    	je     ffffffff8020f640 <_RME_Thd_Crt+0x460>
ffffffff8020f2a0:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020f2a4:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020f2a8:	0f 85 82 02 00 00    	jne    ffffffff8020f530 <_RME_Thd_Crt+0x350>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f2ae:	f6 c7 80             	test   $0x80,%bh
ffffffff8020f2b1:	0f 85 89 02 00 00    	jne    ffffffff8020f540 <_RME_Thd_Crt+0x360>
ffffffff8020f2b7:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020f2ba:	0f 83 a0 03 00 00    	jae    ffffffff8020f660 <_RME_Thd_Crt+0x480>
ffffffff8020f2c0:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8020f2c7:	ff 00 00 
ffffffff8020f2ca:	48 89 d8             	mov    %rbx,%rax
ffffffff8020f2cd:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020f2d4:	00 00 00 
ffffffff8020f2d7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f2db:	48 01 f0             	add    %rsi,%rax
ffffffff8020f2de:	48 8b 38             	mov    (%rax),%rdi
ffffffff8020f2e1:	49 21 f8             	and    %rdi,%r8
ffffffff8020f2e4:	4d 39 c8             	cmp    %r9,%r8
ffffffff8020f2e7:	0f 84 53 03 00 00    	je     ffffffff8020f640 <_RME_Thd_Crt+0x460>
ffffffff8020f2ed:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020f2f1:	48 83 ff 02          	cmp    $0x2,%rdi
ffffffff8020f2f5:	0f 85 35 02 00 00    	jne    ffffffff8020f530 <_RME_Thd_Crt+0x350>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020f2fb:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020f301:	0f 85 c6 02 00 00    	jne    ffffffff8020f5cd <_RME_Thd_Crt+0x3ed>
ffffffff8020f307:	48 39 cd             	cmp    %rcx,%rbp
ffffffff8020f30a:	0f 83 50 03 00 00    	jae    ffffffff8020f660 <_RME_Thd_Crt+0x480>
ffffffff8020f310:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f317:	00 00 00 
ffffffff8020f31a:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020f31e:	48 01 f5             	add    %rsi,%rbp
ffffffff8020f321:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f328:	ff 00 00 
ffffffff8020f32b:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
ffffffff8020f32f:	48 21 ce             	and    %rcx,%rsi
ffffffff8020f332:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f335:	0f 84 05 03 00 00    	je     ffffffff8020f640 <_RME_Thd_Crt+0x460>
ffffffff8020f33b:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f33f:	48 83 f9 05          	cmp    $0x5,%rcx
ffffffff8020f343:	0f 85 e7 01 00 00    	jne    ffffffff8020f530 <_RME_Thd_Crt+0x350>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f349:	f6 42 10 01          	testb  $0x1,0x10(%rdx)
ffffffff8020f34d:	0f 84 fd 02 00 00    	je     ffffffff8020f650 <_RME_Thd_Crt+0x470>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff8020f353:	f6 45 10 02          	testb  $0x2,0x10(%rbp)
ffffffff8020f357:	0f 84 f3 02 00 00    	je     ffffffff8020f650 <_RME_Thd_Crt+0x470>
    if(Is_Hyp==0U)
ffffffff8020f35d:	48 83 7c 24 50 00    	cmpq   $0x0,0x50(%rsp)
ffffffff8020f363:	0f 85 23 03 00 00    	jne    ffffffff8020f68c <_RME_Thd_Crt+0x4ac>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff8020f369:	f6 40 10 04          	testb  $0x4,0x10(%rax)
ffffffff8020f36d:	0f 84 dd 02 00 00    	je     ffffffff8020f650 <_RME_Thd_Crt+0x470>
ffffffff8020f373:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8020f377:	48 8b 5c 24 40       	mov    0x40(%rsp),%rbx
ffffffff8020f37c:	48 01 cb             	add    %rcx,%rbx
ffffffff8020f37f:	48 3b 4c 24 40       	cmp    0x40(%rsp),%rcx
ffffffff8020f384:	48 0f 42 4c 24 40    	cmovb  0x40(%rsp),%rcx
ffffffff8020f38a:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020f38d:	0f 82 bd 02 00 00    	jb     ffffffff8020f650 <_RME_Thd_Crt+0x470>
ffffffff8020f393:	48 81 fb 9f fe ff ff 	cmp    $0xfffffffffffffe9f,%rbx
ffffffff8020f39a:	0f 87 b0 02 00 00    	ja     ffffffff8020f650 <_RME_Thd_Crt+0x470>
ffffffff8020f3a0:	48 8d 8b 5f 01 00 00 	lea    0x15f(%rbx),%rcx
ffffffff8020f3a7:	48 39 48 30          	cmp    %rcx,0x30(%rax)
ffffffff8020f3ab:	0f 82 9f 02 00 00    	jb     ffffffff8020f650 <_RME_Thd_Crt+0x470>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8020f3b1:	4c 3b 7a 28          	cmp    0x28(%rdx),%r15
ffffffff8020f3b5:	0f 83 a5 02 00 00    	jae    ffffffff8020f660 <_RME_Thd_Crt+0x480>
ffffffff8020f3bb:	4c 8b 6a 18          	mov    0x18(%rdx),%r13
ffffffff8020f3bf:	49 c1 e7 06          	shl    $0x6,%r15
ffffffff8020f3c3:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
ffffffff8020f3c8:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f3cf:	00 00 00 
ffffffff8020f3d2:	4d 01 fd             	add    %r15,%r13
ffffffff8020f3d5:	f0 49 0f b1 55 00    	lock cmpxchg %rdx,0x0(%r13)
ffffffff8020f3db:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020f3de:	84 d2                	test   %dl,%dl
ffffffff8020f3e0:	0f 84 8a 02 00 00    	je     ffffffff8020f670 <_RME_Thd_Crt+0x490>
ffffffff8020f3e6:	49 c7 45 20 01 00 00 	movq   $0x1,0x20(%r13)
ffffffff8020f3ed:	00 
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff8020f3ee:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8020f3f3:	48 89 df             	mov    %rbx,%rdi
ffffffff8020f3f6:	e8 b5 f5 ff ff       	call   ffffffff8020e9b0 <_RME_Kot_Mark>
ffffffff8020f3fb:	48 85 c0             	test   %rax,%rax
ffffffff8020f3fe:	0f 88 94 02 00 00    	js     ffffffff8020f698 <_RME_Thd_Crt+0x4b8>
    Thread->Sched.Slice=0U;
ffffffff8020f404:	66 0f 6f 05 a4 d6 00 	movdqa 0xd6a4(%rip),%xmm0        # ffffffff8021cab0 <Table.1+0x130>
ffffffff8020f40b:	00 
    Thread->Sched.TID=0U;
ffffffff8020f40c:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
ffffffff8020f413:	00 
    Thread->Sched.Slice=0U;
ffffffff8020f414:	0f 11 43 30          	movups %xmm0,0x30(%rbx)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8020f418:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020f41b:	85 c0                	test   %eax,%eax
ffffffff8020f41d:	74 04                	je     ffffffff8020f423 <_RME_Thd_Crt+0x243>
ffffffff8020f41f:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8020f423:	48 8d 43 10          	lea    0x10(%rbx),%rax
    Thread->Sched.Prc=Prc_Root;
ffffffff8020f427:	48 89 6b 58          	mov    %rbp,0x58(%rbx)
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8020f42b:	66 48 0f 6e c0       	movq   %rax,%xmm0
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff8020f430:	48 8d 43 78          	lea    0x78(%rbx),%rax
    Thread->Sched.Signal=0U;
ffffffff8020f434:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
ffffffff8020f43b:	00 
    Head->Prev=Head;
ffffffff8020f43c:	48 89 83 80 00 00 00 	mov    %rax,0x80(%rbx)
    Head->Next=Head;
ffffffff8020f443:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
ffffffff8020f447:	48 89 43 78          	mov    %rax,0x78(%rbx)
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff8020f44b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    Head->Next=Head;
ffffffff8020f450:	0f 11 43 10          	movups %xmm0,0x10(%rbx)
    Thd_Crt->Head.Root_Ref=0U;
ffffffff8020f454:	66 0f 6f 05 64 d6 00 	movdqa 0xd664(%rip),%xmm0        # ffffffff8021cac0 <Table.1+0x140>
ffffffff8020f45b:	00 
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff8020f45c:	48 89 83 88 00 00 00 	mov    %rax,0x88(%rbx)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff8020f463:	48 8d 83 b0 00 00 00 	lea    0xb0(%rbx),%rax
ffffffff8020f46a:	48 89 83 90 00 00 00 	mov    %rax,0x90(%rbx)
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff8020f471:	48 8d 83 98 00 00 00 	lea    0x98(%rbx),%rax
    Head->Prev=Head;
ffffffff8020f478:	48 89 83 a0 00 00 00 	mov    %rax,0xa0(%rbx)
    Head->Next=Head;
ffffffff8020f47f:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020f486:	b8 01 00 00 00       	mov    $0x1,%eax
    Thread->Sched.Prio_Max=Prio_Max;
ffffffff8020f48b:	4c 89 63 48          	mov    %r12,0x48(%rbx)
    Thread->Sched.Sched_Ref=0U;
ffffffff8020f48f:	48 c7 43 60 00 00 00 	movq   $0x0,0x60(%rbx)
ffffffff8020f496:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff8020f497:	48 c7 43 70 00 00 00 	movq   $0x0,0x70(%rbx)
ffffffff8020f49e:	00 
    Thread->Sched.Local=RME_THD_FREE;
ffffffff8020f49f:	48 c7 43 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rbx)
ffffffff8020f4a6:	ff 
    Thread->Ctx.Invstk_Depth=0U;
ffffffff8020f4a7:	48 c7 83 a8 00 00 00 	movq   $0x0,0xa8(%rbx)
ffffffff8020f4ae:	00 00 00 00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff8020f4b2:	49 89 5d 18          	mov    %rbx,0x18(%r13)
    Thd_Crt->Head.Root_Ref=0U;
ffffffff8020f4b6:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
ffffffff8020f4bb:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff8020f4c1:	48 b8 00 00 00 00 00 	movabs $0x6000000000000,%rax
ffffffff8020f4c8:	00 06 00 
ffffffff8020f4cb:	49 89 45 00          	mov    %rax,0x0(%r13)
    return 0;
ffffffff8020f4cf:	31 c0                	xor    %eax,%eax
}
ffffffff8020f4d1:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020f4d5:	5b                   	pop    %rbx
ffffffff8020f4d6:	5d                   	pop    %rbp
ffffffff8020f4d7:	41 5c                	pop    %r12
ffffffff8020f4d9:	41 5d                	pop    %r13
ffffffff8020f4db:	41 5e                	pop    %r14
ffffffff8020f4dd:	41 5f                	pop    %r15
ffffffff8020f4df:	c3                   	ret
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f4e0:	49 39 ce             	cmp    %rcx,%r14
ffffffff8020f4e3:	0f 83 77 01 00 00    	jae    ffffffff8020f660 <_RME_Thd_Crt+0x480>
ffffffff8020f4e9:	49 8b 75 18          	mov    0x18(%r13),%rsi
ffffffff8020f4ed:	4c 89 f2             	mov    %r14,%rdx
ffffffff8020f4f0:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f4f7:	ff 00 00 
ffffffff8020f4fa:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020f501:	00 00 00 
ffffffff8020f504:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f508:	48 01 f2             	add    %rsi,%rdx
ffffffff8020f50b:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020f50e:	48 21 c7             	and    %rax,%rdi
ffffffff8020f511:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020f514:	0f 84 26 01 00 00    	je     ffffffff8020f640 <_RME_Thd_Crt+0x460>
ffffffff8020f51a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f51e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f522:	0f 84 86 fd ff ff    	je     ffffffff8020f2ae <_RME_Thd_Crt+0xce>
ffffffff8020f528:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f52f:	00 
ffffffff8020f530:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f537:	eb 98                	jmp    ffffffff8020f4d1 <_RME_Thd_Crt+0x2f1>
ffffffff8020f539:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f540:	49 89 d9             	mov    %rbx,%r9
ffffffff8020f543:	49 c1 e9 10          	shr    $0x10,%r9
ffffffff8020f547:	49 39 c9             	cmp    %rcx,%r9
ffffffff8020f54a:	0f 83 10 01 00 00    	jae    ffffffff8020f660 <_RME_Thd_Crt+0x480>
ffffffff8020f550:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f557:	ff 00 00 
ffffffff8020f55a:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020f55e:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020f565:	00 00 00 
ffffffff8020f568:	49 01 f1             	add    %rsi,%r9
ffffffff8020f56b:	49 8b 01             	mov    (%r9),%rax
ffffffff8020f56e:	49 89 c2             	mov    %rax,%r10
ffffffff8020f571:	49 21 fa             	and    %rdi,%r10
ffffffff8020f574:	4d 39 c2             	cmp    %r8,%r10
ffffffff8020f577:	0f 84 c3 00 00 00    	je     ffffffff8020f640 <_RME_Thd_Crt+0x460>
ffffffff8020f57d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f581:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f585:	75 a9                	jne    ffffffff8020f530 <_RME_Thd_Crt+0x350>
ffffffff8020f587:	48 89 d8             	mov    %rbx,%rax
ffffffff8020f58a:	4d 8b 51 28          	mov    0x28(%r9),%r10
ffffffff8020f58e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f593:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020f596:	0f 83 c4 00 00 00    	jae    ffffffff8020f660 <_RME_Thd_Crt+0x480>
ffffffff8020f59c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f5a0:	49 03 41 18          	add    0x18(%r9),%rax
ffffffff8020f5a4:	4c 8b 08             	mov    (%rax),%r9
ffffffff8020f5a7:	4c 21 cf             	and    %r9,%rdi
ffffffff8020f5aa:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020f5ad:	0f 84 8d 00 00 00    	je     ffffffff8020f640 <_RME_Thd_Crt+0x460>
ffffffff8020f5b3:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8020f5b7:	49 83 f9 02          	cmp    $0x2,%r9
ffffffff8020f5bb:	0f 85 6f ff ff ff    	jne    ffffffff8020f530 <_RME_Thd_Crt+0x350>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020f5c1:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020f5c7:	0f 84 3a fd ff ff    	je     ffffffff8020f307 <_RME_Thd_Crt+0x127>
ffffffff8020f5cd:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020f5d0:	48 c1 ef 10          	shr    $0x10,%rdi
ffffffff8020f5d4:	48 39 cf             	cmp    %rcx,%rdi
ffffffff8020f5d7:	0f 83 83 00 00 00    	jae    ffffffff8020f660 <_RME_Thd_Crt+0x480>
ffffffff8020f5dd:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020f5e4:	00 00 00 
ffffffff8020f5e7:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff8020f5eb:	48 8d 0c 37          	lea    (%rdi,%rsi,1),%rcx
ffffffff8020f5ef:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f5f6:	ff 00 00 
ffffffff8020f5f9:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8020f5fc:	49 89 f1             	mov    %rsi,%r9
ffffffff8020f5ff:	49 21 f9             	and    %rdi,%r9
ffffffff8020f602:	4d 39 c1             	cmp    %r8,%r9
ffffffff8020f605:	74 39                	je     ffffffff8020f640 <_RME_Thd_Crt+0x460>
ffffffff8020f607:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020f60b:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020f60f:	0f 85 1b ff ff ff    	jne    ffffffff8020f530 <_RME_Thd_Crt+0x350>
ffffffff8020f615:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020f619:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8020f61f:	48 39 f5             	cmp    %rsi,%rbp
ffffffff8020f622:	73 3c                	jae    ffffffff8020f660 <_RME_Thd_Crt+0x480>
ffffffff8020f624:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020f628:	48 03 69 18          	add    0x18(%rcx),%rbp
ffffffff8020f62c:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
ffffffff8020f630:	48 21 cf             	and    %rcx,%rdi
ffffffff8020f633:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020f636:	0f 85 ff fc ff ff    	jne    ffffffff8020f33b <_RME_Thd_Crt+0x15b>
ffffffff8020f63c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f640:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f647:	e9 85 fe ff ff       	jmp    ffffffff8020f4d1 <_RME_Thd_Crt+0x2f1>
ffffffff8020f64c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f650:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f657:	e9 75 fe ff ff       	jmp    ffffffff8020f4d1 <_RME_Thd_Crt+0x2f1>
ffffffff8020f65c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f660:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f667:	e9 65 fe ff ff       	jmp    ffffffff8020f4d1 <_RME_Thd_Crt+0x2f1>
ffffffff8020f66c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020f670:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f677:	e9 55 fe ff ff       	jmp    ffffffff8020f4d1 <_RME_Thd_Crt+0x2f1>
ffffffff8020f67c:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_PRIO;
ffffffff8020f680:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8020f687:	e9 45 fe ff ff       	jmp    ffffffff8020f4d1 <_RME_Thd_Crt+0x2f1>
        return RME_ERR_PTH_HADDR;
ffffffff8020f68c:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8020f693:	e9 39 fe ff ff       	jmp    ffffffff8020f4d1 <_RME_Thd_Crt+0x2f1>
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff8020f698:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
ffffffff8020f69f:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020f6a0:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020f6a7:	e9 25 fe ff ff       	jmp    ffffffff8020f4d1 <_RME_Thd_Crt+0x2f1>
ffffffff8020f6ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020f6b0 <_RME_Cpt_Boot_Init>:
{
ffffffff8020f6b0:	f3 0f 1e fa          	endbr64
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020f6b4:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
ffffffff8020f6b8:	48 3d ff 7f 00 00    	cmp    $0x7fff,%rax
ffffffff8020f6be:	0f 87 93 00 00 00    	ja     ffffffff8020f757 <_RME_Cpt_Boot_Init+0xa7>
{
ffffffff8020f6c4:	41 55                	push   %r13
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f6c6:	49 89 d5             	mov    %rdx,%r13
{
ffffffff8020f6c9:	41 54                	push   %r12
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f6cb:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8020f6cf:	49 89 d4             	mov    %rdx,%r12
{
ffffffff8020f6d2:	55                   	push   %rbp
ffffffff8020f6d3:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020f6d6:	53                   	push   %rbx
ffffffff8020f6d7:	48 89 f3             	mov    %rsi,%rbx
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f6da:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020f6dd:	48 89 df             	mov    %rbx,%rdi
ffffffff8020f6e0:	e8 cb f2 ff ff       	call   ffffffff8020e9b0 <_RME_Kot_Mark>
ffffffff8020f6e5:	48 85 c0             	test   %rax,%rax
ffffffff8020f6e8:	75 75                	jne    ffffffff8020f75f <_RME_Cpt_Boot_Init+0xaf>
ffffffff8020f6ea:	49 8d 54 1d 00       	lea    0x0(%r13,%rbx,1),%rdx
ffffffff8020f6ef:	41 83 e5 40          	and    $0x40,%r13d
ffffffff8020f6f3:	48 89 d8             	mov    %rbx,%rax
ffffffff8020f6f6:	74 18                	je     ffffffff8020f710 <_RME_Cpt_Boot_Init+0x60>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f6f8:	48 8d 43 40          	lea    0x40(%rbx),%rax
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f6fc:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f703:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f706:	74 20                	je     ffffffff8020f728 <_RME_Cpt_Boot_Init+0x78>
ffffffff8020f708:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f70f:	00 
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f710:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f717:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f71b:	48 c7 40 c0 00 00 00 	movq   $0x0,-0x40(%rax)
ffffffff8020f722:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f723:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f726:	75 e8                	jne    ffffffff8020f710 <_RME_Cpt_Boot_Init+0x60>
    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020f728:	48 89 e8             	mov    %rbp,%rax
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020f72b:	66 0f 6f 05 9d d3 00 	movdqa 0xd39d(%rip),%xmm0        # ffffffff8021cad0 <Table.1+0x150>
ffffffff8020f732:	00 
    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020f733:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f737:	48 01 d8             	add    %rbx,%rax
    Cpt->Head.Object=Vaddr;
ffffffff8020f73a:	48 89 58 18          	mov    %rbx,0x18(%rax)
    Cpt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020f73e:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020f745:	00 
    Cpt->Entry_Num=Entry_Num;
ffffffff8020f746:	4c 89 60 28          	mov    %r12,0x28(%rax)
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020f74a:	0f 11 00             	movups %xmm0,(%rax)
    return Cap_Cpt;
ffffffff8020f74d:	48 89 e8             	mov    %rbp,%rax
}
ffffffff8020f750:	5b                   	pop    %rbx
ffffffff8020f751:	5d                   	pop    %rbp
ffffffff8020f752:	41 5c                	pop    %r12
ffffffff8020f754:	41 5d                	pop    %r13
ffffffff8020f756:	c3                   	ret
        return RME_ERR_CPT_RANGE;
ffffffff8020f757:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020f75e:	c3                   	ret
        return RME_ERR_CPT_KOT;
ffffffff8020f75f:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020f766:	eb e8                	jmp    ffffffff8020f750 <_RME_Cpt_Boot_Init+0xa0>
ffffffff8020f768:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f76f:	00 

ffffffff8020f770 <_RME_Cpt_Boot_Crt>:
{
ffffffff8020f770:	f3 0f 1e fa          	endbr64
ffffffff8020f774:	41 55                	push   %r13
ffffffff8020f776:	41 54                	push   %r12
ffffffff8020f778:	55                   	push   %rbp
ffffffff8020f779:	53                   	push   %rbx
ffffffff8020f77a:	48 89 d3             	mov    %rdx,%rbx
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020f77d:	49 8d 50 ff          	lea    -0x1(%r8),%rdx
ffffffff8020f781:	48 81 fa ff 7f 00 00 	cmp    $0x7fff,%rdx
ffffffff8020f788:	0f 87 9b 01 00 00    	ja     ffffffff8020f929 <_RME_Cpt_Boot_Crt+0x1b9>
ffffffff8020f78e:	48 89 f0             	mov    %rsi,%rax
ffffffff8020f791:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020f794:	4d 89 c4             	mov    %r8,%r12
    RME_CPT_GETCAP(Cpt,
ffffffff8020f797:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020f79b:	f6 c4 80             	test   $0x80,%ah
ffffffff8020f79e:	0f 84 4c 01 00 00    	je     ffffffff8020f8f0 <_RME_Cpt_Boot_Crt+0x180>
ffffffff8020f7a4:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020f7a7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f7ab:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020f7ae:	0f 83 75 01 00 00    	jae    ffffffff8020f929 <_RME_Cpt_Boot_Crt+0x1b9>
ffffffff8020f7b4:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f7bb:	ff 00 00 
ffffffff8020f7be:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f7c2:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020f7c6:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f7cd:	00 00 00 
ffffffff8020f7d0:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020f7d3:	49 89 c8             	mov    %rcx,%r8
ffffffff8020f7d6:	49 21 f0             	and    %rsi,%r8
ffffffff8020f7d9:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020f7dc:	0f 84 3e 01 00 00    	je     ffffffff8020f920 <_RME_Cpt_Boot_Crt+0x1b0>
ffffffff8020f7e2:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f7e6:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f7ea:	0f 85 42 01 00 00    	jne    ffffffff8020f932 <_RME_Cpt_Boot_Crt+0x1c2>
ffffffff8020f7f0:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020f7f4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f7f9:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020f7fc:	0f 83 27 01 00 00    	jae    ffffffff8020f929 <_RME_Cpt_Boot_Crt+0x1b9>
ffffffff8020f802:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f806:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020f80a:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020f80d:	48 21 d6             	and    %rdx,%rsi
ffffffff8020f810:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f813:	0f 84 07 01 00 00    	je     ffffffff8020f920 <_RME_Cpt_Boot_Crt+0x1b0>
ffffffff8020f819:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020f81d:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020f821:	0f 85 0b 01 00 00    	jne    ffffffff8020f932 <_RME_Cpt_Boot_Crt+0x1c2>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f827:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8020f82b:	0f 84 23 01 00 00    	je     ffffffff8020f954 <_RME_Cpt_Boot_Crt+0x1e4>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020f831:	48 3b 58 28          	cmp    0x28(%rax),%rbx
ffffffff8020f835:	0f 83 ee 00 00 00    	jae    ffffffff8020f929 <_RME_Cpt_Boot_Crt+0x1b9>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020f83b:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f842:	00 00 00 
ffffffff8020f845:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020f849:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8020f84d:	31 c0                	xor    %eax,%eax
ffffffff8020f84f:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff8020f854:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020f857:	84 d2                	test   %dl,%dl
ffffffff8020f859:	0f 84 dc 00 00 00    	je     ffffffff8020f93b <_RME_Cpt_Boot_Crt+0x1cb>
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f85f:	4d 89 e5             	mov    %r12,%r13
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020f862:	48 c7 43 20 01 00 00 	movq   $0x1,0x20(%rbx)
ffffffff8020f869:	00 
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f86a:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020f86d:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8020f871:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020f874:	e8 37 f1 ff ff       	call   ffffffff8020e9b0 <_RME_Kot_Mark>
ffffffff8020f879:	48 85 c0             	test   %rax,%rax
ffffffff8020f87c:	0f 85 c2 00 00 00    	jne    ffffffff8020f944 <_RME_Cpt_Boot_Crt+0x1d4>
ffffffff8020f882:	49 8d 4c 2d 00       	lea    0x0(%r13,%rbp,1),%rcx
ffffffff8020f887:	41 83 e5 40          	and    $0x40,%r13d
ffffffff8020f88b:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020f88e:	74 18                	je     ffffffff8020f8a8 <_RME_Cpt_Boot_Crt+0x138>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f890:	48 8d 55 40          	lea    0x40(%rbp),%rdx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f894:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8020f89b:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f89c:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8020f89f:	74 1f                	je     ffffffff8020f8c0 <_RME_Cpt_Boot_Crt+0x150>
ffffffff8020f8a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f8a8:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f8af:	48 83 ea 80          	sub    $0xffffffffffffff80,%rdx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f8b3:	48 c7 42 c0 00 00 00 	movq   $0x0,-0x40(%rdx)
ffffffff8020f8ba:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f8bb:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8020f8be:	75 e8                	jne    ffffffff8020f8a8 <_RME_Cpt_Boot_Crt+0x138>
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020f8c0:	48 be 00 00 00 00 00 	movabs $0x3000000000000,%rsi
ffffffff8020f8c7:	00 03 00 
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020f8ca:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff8020f8d1:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020f8d2:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020f8d6:	48 c7 43 10 ff 00 00 	movq   $0xff,0x10(%rbx)
ffffffff8020f8dd:	00 
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020f8de:	4c 89 63 28          	mov    %r12,0x28(%rbx)
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020f8e2:	48 89 33             	mov    %rsi,(%rbx)
}
ffffffff8020f8e5:	5b                   	pop    %rbx
ffffffff8020f8e6:	5d                   	pop    %rbp
ffffffff8020f8e7:	41 5c                	pop    %r12
ffffffff8020f8e9:	41 5d                	pop    %r13
ffffffff8020f8eb:	c3                   	ret
ffffffff8020f8ec:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,
ffffffff8020f8f0:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020f8f3:	73 34                	jae    ffffffff8020f929 <_RME_Cpt_Boot_Crt+0x1b9>
ffffffff8020f8f5:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020f8fc:	ff 00 00 
ffffffff8020f8ff:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f903:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8020f907:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8020f90e:	00 00 00 
ffffffff8020f911:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020f914:	48 21 d1             	and    %rdx,%rcx
ffffffff8020f917:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020f91a:	0f 85 f9 fe ff ff    	jne    ffffffff8020f819 <_RME_Cpt_Boot_Crt+0xa9>
ffffffff8020f920:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f927:	eb bc                	jmp    ffffffff8020f8e5 <_RME_Cpt_Boot_Crt+0x175>
        return RME_ERR_CPT_RANGE;
ffffffff8020f929:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f930:	eb b3                	jmp    ffffffff8020f8e5 <_RME_Cpt_Boot_Crt+0x175>
    RME_CPT_GETCAP(Cpt,
ffffffff8020f932:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f939:	eb aa                	jmp    ffffffff8020f8e5 <_RME_Cpt_Boot_Crt+0x175>
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020f93b:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f942:	eb a1                	jmp    ffffffff8020f8e5 <_RME_Cpt_Boot_Crt+0x175>
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020f944:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CPT_KOT;
ffffffff8020f94b:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020f952:	eb 91                	jmp    ffffffff8020f8e5 <_RME_Cpt_Boot_Crt+0x175>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f954:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f95b:	eb 88                	jmp    ffffffff8020f8e5 <_RME_Cpt_Boot_Crt+0x175>
ffffffff8020f95d:	0f 1f 00             	nopl   (%rax)

ffffffff8020f960 <_RME_Pgt_Boot_Crt>:
{
ffffffff8020f960:	f3 0f 1e fa          	endbr64
ffffffff8020f964:	41 57                	push   %r15
ffffffff8020f966:	41 56                	push   %r14
ffffffff8020f968:	41 55                	push   %r13
ffffffff8020f96a:	41 54                	push   %r12
ffffffff8020f96c:	55                   	push   %rbp
ffffffff8020f96d:	53                   	push   %rbx
ffffffff8020f96e:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020f971:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020f975:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
ffffffff8020f97a:	4c 8b 74 24 58       	mov    0x58(%rsp),%r14
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020f97f:	4b 8d 14 34          	lea    (%r12,%r14,1),%rdx
ffffffff8020f983:	48 83 fa 40          	cmp    $0x40,%rdx
ffffffff8020f987:	0f 87 2b 02 00 00    	ja     ffffffff8020fbb8 <_RME_Pgt_Boot_Crt+0x258>
ffffffff8020f98d:	48 89 f0             	mov    %rsi,%rax
ffffffff8020f990:	49 89 cd             	mov    %rcx,%r13
ffffffff8020f993:	4c 89 c5             	mov    %r8,%rbp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f996:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020f99a:	4d 89 cf             	mov    %r9,%r15
ffffffff8020f99d:	f6 c4 80             	test   $0x80,%ah
ffffffff8020f9a0:	0f 84 8a 01 00 00    	je     ffffffff8020fb30 <_RME_Pgt_Boot_Crt+0x1d0>
ffffffff8020f9a6:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020f9a9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f9ad:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020f9b0:	0f 83 ca 01 00 00    	jae    ffffffff8020fb80 <_RME_Pgt_Boot_Crt+0x220>
ffffffff8020f9b6:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f9bd:	ff 00 00 
ffffffff8020f9c0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f9c4:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020f9c8:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f9cf:	00 00 00 
ffffffff8020f9d2:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020f9d5:	49 89 c8             	mov    %rcx,%r8
ffffffff8020f9d8:	49 21 f0             	and    %rsi,%r8
ffffffff8020f9db:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020f9de:	0f 84 7f 01 00 00    	je     ffffffff8020fb63 <_RME_Pgt_Boot_Crt+0x203>
ffffffff8020f9e4:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f9e8:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f9ec:	0f 85 7e 01 00 00    	jne    ffffffff8020fb70 <_RME_Pgt_Boot_Crt+0x210>
ffffffff8020f9f2:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020f9f6:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f9fb:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020f9fe:	0f 83 7c 01 00 00    	jae    ffffffff8020fb80 <_RME_Pgt_Boot_Crt+0x220>
ffffffff8020fa04:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fa08:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020fa0c:	49 89 c1             	mov    %rax,%r9
ffffffff8020fa0f:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fa12:	48 21 c6             	and    %rax,%rsi
ffffffff8020fa15:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020fa18:	0f 84 45 01 00 00    	je     ffffffff8020fb63 <_RME_Pgt_Boot_Crt+0x203>
ffffffff8020fa1e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fa22:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fa26:	0f 85 44 01 00 00    	jne    ffffffff8020fb70 <_RME_Pgt_Boot_Crt+0x210>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fa2c:	41 f6 41 10 01       	testb  $0x1,0x10(%r9)
ffffffff8020fa31:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff8020fa36:	0f 84 54 01 00 00    	je     ffffffff8020fb90 <_RME_Pgt_Boot_Crt+0x230>
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)!=0)
ffffffff8020fa3c:	4d 89 e8             	mov    %r13,%r8
ffffffff8020fa3f:	4c 89 f1             	mov    %r14,%rcx
ffffffff8020fa42:	4c 89 e2             	mov    %r12,%rdx
ffffffff8020fa45:	4c 89 fe             	mov    %r15,%rsi
ffffffff8020fa48:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020fa4b:	e8 70 b0 00 00       	call   ffffffff8021aac0 <__RME_Pgt_Check>
ffffffff8020fa50:	48 85 c0             	test   %rax,%rax
ffffffff8020fa53:	0f 85 5f 01 00 00    	jne    ffffffff8020fbb8 <_RME_Pgt_Boot_Crt+0x258>
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020fa59:	b9 40 00 00 00       	mov    $0x40,%ecx
ffffffff8020fa5e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020fa65:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
ffffffff8020fa6a:	44 29 f1             	sub    %r14d,%ecx
ffffffff8020fa6d:	44 29 e1             	sub    %r12d,%ecx
ffffffff8020fa70:	48 d3 e8             	shr    %cl,%rax
ffffffff8020fa73:	48 21 e8             	and    %rbp,%rax
ffffffff8020fa76:	0f 85 3c 01 00 00    	jne    ffffffff8020fbb8 <_RME_Pgt_Boot_Crt+0x258>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020fa7c:	49 3b 59 28          	cmp    0x28(%r9),%rbx
ffffffff8020fa80:	0f 83 fa 00 00 00    	jae    ffffffff8020fb80 <_RME_Pgt_Boot_Crt+0x220>
ffffffff8020fa86:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fa8d:	00 00 00 
ffffffff8020fa90:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020fa94:	49 03 59 18          	add    0x18(%r9),%rbx
ffffffff8020fa98:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff8020fa9d:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020faa0:	84 d2                	test   %dl,%dl
ffffffff8020faa2:	0f 84 1c 01 00 00    	je     ffffffff8020fbc4 <_RME_Pgt_Boot_Crt+0x264>
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020faa8:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8020faad:	44 89 f1             	mov    %r14d,%ecx
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fab0:	48 c7 43 20 01 00 00 	movq   $0x1,0x20(%rbx)
ffffffff8020fab7:	00 
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020fab8:	4c 89 ef             	mov    %r13,%rdi
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020fabb:	d3 e6                	shl    %cl,%esi
ffffffff8020fabd:	48 63 f6             	movslq %esi,%rsi
ffffffff8020fac0:	48 c1 e6 03          	shl    $0x3,%rsi
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020fac4:	e8 e7 ee ff ff       	call   ffffffff8020e9b0 <_RME_Kot_Mark>
ffffffff8020fac9:	48 85 c0             	test   %rax,%rax
ffffffff8020facc:	0f 85 ce 00 00 00    	jne    ffffffff8020fba0 <_RME_Pgt_Boot_Crt+0x240>
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fad2:	49 c1 e4 20          	shl    $0x20,%r12
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020fad6:	4c 09 fd             	or     %r15,%rbp
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020fad9:	4c 89 6b 18          	mov    %r13,0x18(%rbx)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020fadd:	48 89 df             	mov    %rbx,%rdi
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fae0:	4d 09 f4             	or     %r14,%r12
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020fae3:	66 0f 6f 05 f5 cf 00 	movdqa 0xcff5(%rip),%xmm0        # ffffffff8021cae0 <Table.1+0x160>
ffffffff8020faea:	00 
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020faeb:	48 89 6b 30          	mov    %rbp,0x30(%rbx)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020faef:	4c 89 63 28          	mov    %r12,0x28(%rbx)
    Pgt_Crt->ASID=0U;
ffffffff8020faf3:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
ffffffff8020fafa:	00 
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020fafb:	0f 11 43 08          	movups %xmm0,0x8(%rbx)
ffffffff8020faff:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020fb04:	e8 07 b0 00 00       	call   ffffffff8021ab10 <__RME_Pgt_Init>
    return 0;
ffffffff8020fb09:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020fb0e:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff8020fb15:	00 04 00 
ffffffff8020fb18:	48 89 03             	mov    %rax,(%rbx)
}
ffffffff8020fb1b:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020fb1f:	48 89 d0             	mov    %rdx,%rax
ffffffff8020fb22:	5b                   	pop    %rbx
ffffffff8020fb23:	5d                   	pop    %rbp
ffffffff8020fb24:	41 5c                	pop    %r12
ffffffff8020fb26:	41 5d                	pop    %r13
ffffffff8020fb28:	41 5e                	pop    %r14
ffffffff8020fb2a:	41 5f                	pop    %r15
ffffffff8020fb2c:	c3                   	ret
ffffffff8020fb2d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fb30:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020fb33:	73 4b                	jae    ffffffff8020fb80 <_RME_Pgt_Boot_Crt+0x220>
ffffffff8020fb35:	4c 8b 4f 18          	mov    0x18(%rdi),%r9
ffffffff8020fb39:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fb3d:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020fb44:	ff 00 00 
ffffffff8020fb47:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020fb4e:	00 00 00 
ffffffff8020fb51:	49 01 c1             	add    %rax,%r9
ffffffff8020fb54:	49 8b 01             	mov    (%r9),%rax
ffffffff8020fb57:	48 21 c2             	and    %rax,%rdx
ffffffff8020fb5a:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020fb5d:	0f 85 bb fe ff ff    	jne    ffffffff8020fa1e <_RME_Pgt_Boot_Crt+0xbe>
ffffffff8020fb63:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
ffffffff8020fb6a:	eb af                	jmp    ffffffff8020fb1b <_RME_Pgt_Boot_Crt+0x1bb>
ffffffff8020fb6c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020fb70:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
ffffffff8020fb77:	eb a2                	jmp    ffffffff8020fb1b <_RME_Pgt_Boot_Crt+0x1bb>
ffffffff8020fb79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020fb80:	48 c7 c2 fd ff ff ff 	mov    $0xfffffffffffffffd,%rdx
ffffffff8020fb87:	eb 92                	jmp    ffffffff8020fb1b <_RME_Pgt_Boot_Crt+0x1bb>
ffffffff8020fb89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fb90:	48 c7 c2 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rdx
ffffffff8020fb97:	e9 7f ff ff ff       	jmp    ffffffff8020fb1b <_RME_Pgt_Boot_Crt+0x1bb>
ffffffff8020fb9c:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020fba0:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CPT_KOT;
ffffffff8020fba7:	48 c7 c2 fc ff ff ff 	mov    $0xfffffffffffffffc,%rdx
ffffffff8020fbae:	e9 68 ff ff ff       	jmp    ffffffff8020fb1b <_RME_Pgt_Boot_Crt+0x1bb>
ffffffff8020fbb3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return RME_ERR_PGT_HW;
ffffffff8020fbb8:	48 c7 c2 99 ff ff ff 	mov    $0xffffffffffffff99,%rdx
ffffffff8020fbbf:	e9 57 ff ff ff       	jmp    ffffffff8020fb1b <_RME_Pgt_Boot_Crt+0x1bb>
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fbc4:	48 c7 c2 fb ff ff ff 	mov    $0xfffffffffffffffb,%rdx
ffffffff8020fbcb:	e9 4b ff ff ff       	jmp    ffffffff8020fb1b <_RME_Pgt_Boot_Crt+0x1bb>

ffffffff8020fbd0 <_RME_Inv_Crt.isra.0>:
static rme_ret_t _RME_Inv_Crt(struct RME_Cap_Cpt* Cpt,
ffffffff8020fbd0:	48 89 d0             	mov    %rdx,%rax
ffffffff8020fbd3:	41 54                	push   %r12
ffffffff8020fbd5:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020fbd8:	55                   	push   %rbp
ffffffff8020fbd9:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020fbdc:	53                   	push   %rbx
ffffffff8020fbdd:	4c 89 cb             	mov    %r9,%rbx
ffffffff8020fbe0:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fbe5:	f6 c4 80             	test   $0x80,%ah
ffffffff8020fbe8:	0f 85 ca 01 00 00    	jne    ffffffff8020fdb8 <_RME_Inv_Crt.isra.0+0x1e8>
ffffffff8020fbee:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020fbf1:	0f 83 39 03 00 00    	jae    ffffffff8020ff30 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8020fbf7:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020fbfe:	ff 00 00 
ffffffff8020fc01:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fc05:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020fc0c:	00 00 00 
ffffffff8020fc0f:	48 01 f8             	add    %rdi,%rax
ffffffff8020fc12:	4c 8b 00             	mov    (%rax),%r8
ffffffff8020fc15:	4d 21 c1             	and    %r8,%r9
ffffffff8020fc18:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020fc1b:	0f 84 0f 02 00 00    	je     ffffffff8020fe30 <_RME_Inv_Crt.isra.0+0x260>
ffffffff8020fc21:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8020fc25:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff8020fc29:	0f 85 11 03 00 00    	jne    ffffffff8020ff40 <_RME_Inv_Crt.isra.0+0x370>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020fc2f:	f6 c7 80             	test   $0x80,%bh
ffffffff8020fc32:	0f 85 08 02 00 00    	jne    ffffffff8020fe40 <_RME_Inv_Crt.isra.0+0x270>
ffffffff8020fc38:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8020fc3b:	0f 83 ef 02 00 00    	jae    ffffffff8020ff30 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8020fc41:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020fc48:	ff 00 00 
ffffffff8020fc4b:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020fc4f:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020fc56:	00 00 00 
ffffffff8020fc59:	48 01 fb             	add    %rdi,%rbx
ffffffff8020fc5c:	4c 8b 03             	mov    (%rbx),%r8
ffffffff8020fc5f:	4d 21 c1             	and    %r8,%r9
ffffffff8020fc62:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020fc65:	0f 84 c5 01 00 00    	je     ffffffff8020fe30 <_RME_Inv_Crt.isra.0+0x260>
ffffffff8020fc6b:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8020fc6f:	49 83 f8 05          	cmp    $0x5,%r8
ffffffff8020fc73:	0f 85 c7 02 00 00    	jne    ffffffff8020ff40 <_RME_Inv_Crt.isra.0+0x370>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020fc79:	f6 c6 80             	test   $0x80,%dh
ffffffff8020fc7c:	0f 85 3e 02 00 00    	jne    ffffffff8020fec0 <_RME_Inv_Crt.isra.0+0x2f0>
ffffffff8020fc82:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020fc85:	0f 83 a5 02 00 00    	jae    ffffffff8020ff30 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8020fc8b:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020fc92:	00 00 00 
ffffffff8020fc95:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020fc99:	48 01 fa             	add    %rdi,%rdx
ffffffff8020fc9c:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020fca3:	ff 00 00 
ffffffff8020fca6:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8020fca9:	48 21 f7             	and    %rsi,%rdi
ffffffff8020fcac:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020fcaf:	0f 84 7b 01 00 00    	je     ffffffff8020fe30 <_RME_Inv_Crt.isra.0+0x260>
ffffffff8020fcb5:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020fcb9:	48 83 fe 02          	cmp    $0x2,%rsi
ffffffff8020fcbd:	0f 85 7d 02 00 00    	jne    ffffffff8020ff40 <_RME_Inv_Crt.isra.0+0x370>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fcc3:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8020fcc7:	0f 84 83 02 00 00    	je     ffffffff8020ff50 <_RME_Inv_Crt.isra.0+0x380>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_INV);
ffffffff8020fccd:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020fcd1:	0f 84 79 02 00 00    	je     ffffffff8020ff50 <_RME_Inv_Crt.isra.0+0x380>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff8020fcd7:	f6 42 10 08          	testb  $0x8,0x10(%rdx)
ffffffff8020fcdb:	0f 84 6f 02 00 00    	je     ffffffff8020ff50 <_RME_Inv_Crt.isra.0+0x380>
ffffffff8020fce1:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8020fce5:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020fce8:	4c 8d 24 0e          	lea    (%rsi,%rcx,1),%r12
ffffffff8020fcec:	48 0f 42 f1          	cmovb  %rcx,%rsi
ffffffff8020fcf0:	49 39 f4             	cmp    %rsi,%r12
ffffffff8020fcf3:	0f 82 57 02 00 00    	jb     ffffffff8020ff50 <_RME_Inv_Crt.isra.0+0x380>
ffffffff8020fcf9:	49 83 fc b7          	cmp    $0xffffffffffffffb7,%r12
ffffffff8020fcfd:	0f 87 4d 02 00 00    	ja     ffffffff8020ff50 <_RME_Inv_Crt.isra.0+0x380>
ffffffff8020fd03:	49 8d 4c 24 47       	lea    0x47(%r12),%rcx
ffffffff8020fd08:	48 39 4a 30          	cmp    %rcx,0x30(%rdx)
ffffffff8020fd0c:	0f 82 3e 02 00 00    	jb     ffffffff8020ff50 <_RME_Inv_Crt.isra.0+0x380>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff8020fd12:	48 3b 68 28          	cmp    0x28(%rax),%rbp
ffffffff8020fd16:	0f 83 14 02 00 00    	jae    ffffffff8020ff30 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8020fd1c:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fd23:	00 00 00 
ffffffff8020fd26:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020fd2a:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff8020fd2e:	31 c0                	xor    %eax,%eax
ffffffff8020fd30:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff8020fd36:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff8020fd39:	84 d2                	test   %dl,%dl
ffffffff8020fd3b:	0f 84 1f 02 00 00    	je     ffffffff8020ff60 <_RME_Inv_Crt.isra.0+0x390>
ffffffff8020fd41:	48 c7 45 20 01 00 00 	movq   $0x1,0x20(%rbp)
ffffffff8020fd48:	00 
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff8020fd49:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8020fd4e:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020fd51:	e8 5a ec ff ff       	call   ffffffff8020e9b0 <_RME_Kot_Mark>
ffffffff8020fd56:	48 85 c0             	test   %rax,%rax
ffffffff8020fd59:	0f 85 0d 02 00 00    	jne    ffffffff8020ff6c <_RME_Inv_Crt.isra.0+0x39c>
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8020fd5f:	8b 13                	mov    (%rbx),%edx
ffffffff8020fd61:	85 d2                	test   %edx,%edx
ffffffff8020fd63:	74 04                	je     ffffffff8020fd69 <_RME_Inv_Crt.isra.0+0x199>
ffffffff8020fd65:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    Invocation->Prc=Prc_Root;
ffffffff8020fd69:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020fd6e:	ba 01 00 00 00       	mov    $0x1,%edx
    Invocation->Thd_Act=RME_NULL;
ffffffff8020fd73:	49 c7 44 24 18 00 00 	movq   $0x0,0x18(%r12)
ffffffff8020fd7a:	00 00 
    Invocation->Is_Exc_Ret=0U;
ffffffff8020fd7c:	49 c7 44 24 30 00 00 	movq   $0x0,0x30(%r12)
ffffffff8020fd83:	00 00 
    Inv_Crt->Head.Root_Ref=0U;
ffffffff8020fd85:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff8020fd8c:	00 
    Inv_Crt->Head.Object=Vaddr;
ffffffff8020fd8d:	4c 89 65 18          	mov    %r12,0x18(%rbp)
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
ffffffff8020fd91:	48 c7 45 10 03 00 00 	movq   $0x3,0x10(%rbp)
ffffffff8020fd98:	00 
ffffffff8020fd99:	f0 48 0f c1 53 08    	lock xadd %rdx,0x8(%rbx)
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
ffffffff8020fd9f:	48 b9 00 00 00 00 00 	movabs $0x7000000000000,%rcx
ffffffff8020fda6:	00 07 00 
ffffffff8020fda9:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
}
ffffffff8020fdad:	5b                   	pop    %rbx
ffffffff8020fdae:	5d                   	pop    %rbp
ffffffff8020fdaf:	41 5c                	pop    %r12
ffffffff8020fdb1:	c3                   	ret
ffffffff8020fdb2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fdb8:	49 89 c0             	mov    %rax,%r8
ffffffff8020fdbb:	49 c1 e8 10          	shr    $0x10,%r8
ffffffff8020fdbf:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020fdc2:	0f 83 68 01 00 00    	jae    ffffffff8020ff30 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8020fdc8:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020fdcf:	ff 00 00 
ffffffff8020fdd2:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020fdd6:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020fddd:	00 00 00 
ffffffff8020fde0:	49 01 f8             	add    %rdi,%r8
ffffffff8020fde3:	4d 8b 08             	mov    (%r8),%r9
ffffffff8020fde6:	4d 89 cc             	mov    %r9,%r12
ffffffff8020fde9:	4d 21 d4             	and    %r10,%r12
ffffffff8020fdec:	4d 39 dc             	cmp    %r11,%r12
ffffffff8020fdef:	74 3f                	je     ffffffff8020fe30 <_RME_Inv_Crt.isra.0+0x260>
ffffffff8020fdf1:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8020fdf5:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8020fdf9:	0f 85 41 01 00 00    	jne    ffffffff8020ff40 <_RME_Inv_Crt.isra.0+0x370>
ffffffff8020fdff:	4d 8b 48 28          	mov    0x28(%r8),%r9
ffffffff8020fe03:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fe08:	4c 39 c8             	cmp    %r9,%rax
ffffffff8020fe0b:	0f 83 1f 01 00 00    	jae    ffffffff8020ff30 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8020fe11:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fe15:	49 03 40 18          	add    0x18(%r8),%rax
ffffffff8020fe19:	4c 8b 00             	mov    (%rax),%r8
ffffffff8020fe1c:	4d 21 c2             	and    %r8,%r10
ffffffff8020fe1f:	4d 39 da             	cmp    %r11,%r10
ffffffff8020fe22:	0f 85 f9 fd ff ff    	jne    ffffffff8020fc21 <_RME_Inv_Crt.isra.0+0x51>
ffffffff8020fe28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020fe2f:	00 
ffffffff8020fe30:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fe37:	e9 71 ff ff ff       	jmp    ffffffff8020fdad <_RME_Inv_Crt.isra.0+0x1dd>
ffffffff8020fe3c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020fe40:	49 89 d8             	mov    %rbx,%r8
ffffffff8020fe43:	49 c1 e8 10          	shr    $0x10,%r8
ffffffff8020fe47:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020fe4a:	0f 83 e0 00 00 00    	jae    ffffffff8020ff30 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8020fe50:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020fe57:	ff 00 00 
ffffffff8020fe5a:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020fe5e:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020fe65:	00 00 00 
ffffffff8020fe68:	49 01 f8             	add    %rdi,%r8
ffffffff8020fe6b:	4d 8b 08             	mov    (%r8),%r9
ffffffff8020fe6e:	4d 89 cc             	mov    %r9,%r12
ffffffff8020fe71:	4d 21 d4             	and    %r10,%r12
ffffffff8020fe74:	4d 39 dc             	cmp    %r11,%r12
ffffffff8020fe77:	74 b7                	je     ffffffff8020fe30 <_RME_Inv_Crt.isra.0+0x260>
ffffffff8020fe79:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8020fe7d:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8020fe81:	0f 85 b9 00 00 00    	jne    ffffffff8020ff40 <_RME_Inv_Crt.isra.0+0x370>
ffffffff8020fe87:	4d 8b 48 28          	mov    0x28(%r8),%r9
ffffffff8020fe8b:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020fe91:	4c 39 cb             	cmp    %r9,%rbx
ffffffff8020fe94:	0f 83 96 00 00 00    	jae    ffffffff8020ff30 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8020fe9a:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020fe9e:	49 03 58 18          	add    0x18(%r8),%rbx
ffffffff8020fea2:	4c 8b 03             	mov    (%rbx),%r8
ffffffff8020fea5:	4d 21 c2             	and    %r8,%r10
ffffffff8020fea8:	4d 39 da             	cmp    %r11,%r10
ffffffff8020feab:	0f 85 ba fd ff ff    	jne    ffffffff8020fc6b <_RME_Inv_Crt.isra.0+0x9b>
ffffffff8020feb1:	e9 7a ff ff ff       	jmp    ffffffff8020fe30 <_RME_Inv_Crt.isra.0+0x260>
ffffffff8020feb6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020febd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020fec0:	49 89 d0             	mov    %rdx,%r8
ffffffff8020fec3:	49 c1 e8 10          	shr    $0x10,%r8
ffffffff8020fec7:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020feca:	73 64                	jae    ffffffff8020ff30 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8020fecc:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020fed3:	00 00 00 
ffffffff8020fed6:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020feda:	49 8d 34 38          	lea    (%r8,%rdi,1),%rsi
ffffffff8020fede:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff8020fee5:	ff 00 00 
ffffffff8020fee8:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8020feeb:	49 89 fa             	mov    %rdi,%r10
ffffffff8020feee:	4d 21 c2             	and    %r8,%r10
ffffffff8020fef1:	4d 39 ca             	cmp    %r9,%r10
ffffffff8020fef4:	0f 84 36 ff ff ff    	je     ffffffff8020fe30 <_RME_Inv_Crt.isra.0+0x260>
ffffffff8020fefa:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020fefe:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020ff02:	75 3c                	jne    ffffffff8020ff40 <_RME_Inv_Crt.isra.0+0x370>
ffffffff8020ff04:	48 8b 7e 28          	mov    0x28(%rsi),%rdi
ffffffff8020ff08:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020ff0e:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020ff11:	73 1d                	jae    ffffffff8020ff30 <_RME_Inv_Crt.isra.0+0x360>
ffffffff8020ff13:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020ff17:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff8020ff1b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8020ff1e:	49 21 f0             	and    %rsi,%r8
ffffffff8020ff21:	4d 39 c8             	cmp    %r9,%r8
ffffffff8020ff24:	0f 85 8b fd ff ff    	jne    ffffffff8020fcb5 <_RME_Inv_Crt.isra.0+0xe5>
ffffffff8020ff2a:	e9 01 ff ff ff       	jmp    ffffffff8020fe30 <_RME_Inv_Crt.isra.0+0x260>
ffffffff8020ff2f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ff30:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ff37:	e9 71 fe ff ff       	jmp    ffffffff8020fdad <_RME_Inv_Crt.isra.0+0x1dd>
ffffffff8020ff3c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020ff40:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ff47:	e9 61 fe ff ff       	jmp    ffffffff8020fdad <_RME_Inv_Crt.isra.0+0x1dd>
ffffffff8020ff4c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020ff50:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ff57:	e9 51 fe ff ff       	jmp    ffffffff8020fdad <_RME_Inv_Crt.isra.0+0x1dd>
ffffffff8020ff5c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff8020ff60:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020ff67:	e9 41 fe ff ff       	jmp    ffffffff8020fdad <_RME_Inv_Crt.isra.0+0x1dd>
        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
ffffffff8020ff6c:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8020ff73:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020ff74:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020ff7b:	e9 2d fe ff ff       	jmp    ffffffff8020fdad <_RME_Inv_Crt.isra.0+0x1dd>

ffffffff8020ff80 <_RME_Kot_Erase>:
{
ffffffff8020ff80:	f3 0f 1e fa          	endbr64
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff8020ff84:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff8020ff88:	0f 85 65 01 00 00    	jne    ffffffff802100f3 <_RME_Kot_Erase+0x173>
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ff8e:	4c 8d 87 00 00 00 7f 	lea    0x7f000000(%rdi),%r8
{
ffffffff8020ff95:	53                   	push   %rbx
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ff96:	49 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%r9
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ff9d:	48 8d b4 37 ff ff ff 	lea    0x7effffff(%rdi,%rsi,1),%rsi
ffffffff8020ffa4:	7e 
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff8020ffa5:	48 ba 00 00 00 01 00 	movabs $0xffff800001000000,%rdx
ffffffff8020ffac:	80 ff ff 
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ffaf:	4c 89 c1             	mov    %r8,%rcx
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ffb2:	4d 89 ca             	mov    %r9,%r10
    Start=Start>>RME_WORD_ORDER;
ffffffff8020ffb5:	49 c1 e8 0a          	shr    $0xa,%r8
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ffb9:	48 c1 e9 04          	shr    $0x4,%rcx
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ffbd:	49 d3 e2             	shl    %cl,%r10
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ffc0:	48 89 f1             	mov    %rsi,%rcx
    End=End>>RME_WORD_ORDER;
ffffffff8020ffc3:	48 c1 ee 0a          	shr    $0xa,%rsi
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ffc7:	48 c1 e9 04          	shr    $0x4,%rcx
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ffcb:	f7 d1                	not    %ecx
ffffffff8020ffcd:	49 d3 e9             	shr    %cl,%r9
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff8020ffd0:	4a 8d 0c c5 00 00 00 	lea    0x0(,%r8,8),%rcx
ffffffff8020ffd7:	00 
ffffffff8020ffd8:	48 8d 1c 11          	lea    (%rcx,%rdx,1),%rbx
ffffffff8020ffdc:	48 8b 03             	mov    (%rbx),%rax
    if(Start==End)
ffffffff8020ffdf:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020ffe2:	74 44                	je     ffffffff80210028 <_RME_Kot_Erase+0xa8>
        if((RME_KOT_VA_BASE[Start]&Mask_Begin)!=Mask_Begin)
ffffffff8020ffe4:	48 f7 d0             	not    %rax
ffffffff8020ffe7:	4c 85 d0             	test   %r10,%rax
ffffffff8020ffea:	75 2f                	jne    ffffffff8021001b <_RME_Kot_Erase+0x9b>
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff8020ffec:	4d 8d 58 01          	lea    0x1(%r8),%r11
ffffffff8020fff0:	48 8d 7e ff          	lea    -0x1(%rsi),%rdi
ffffffff8020fff4:	49 39 fb             	cmp    %rdi,%r11
ffffffff8020fff7:	73 4f                	jae    ffffffff80210048 <_RME_Kot_Erase+0xc8>
ffffffff8020fff9:	48 8d 44 11 08       	lea    0x8(%rcx,%rdx,1),%rax
ffffffff8020fffe:	4c 89 da             	mov    %r11,%rdx
ffffffff80210001:	eb 12                	jmp    ffffffff80210015 <_RME_Kot_Erase+0x95>
ffffffff80210003:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80210008:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8021000c:	48 83 c0 08          	add    $0x8,%rax
ffffffff80210010:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80210013:	74 33                	je     ffffffff80210048 <_RME_Kot_Erase+0xc8>
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
ffffffff80210015:	48 83 38 ff          	cmpq   $0xffffffffffffffff,(%rax)
ffffffff80210019:	74 ed                	je     ffffffff80210008 <_RME_Kot_Erase+0x88>
        return RME_ERR_KOT_BMP;
ffffffff8021001b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff80210022:	5b                   	pop    %rbx
ffffffff80210023:	c3                   	ret
ffffffff80210024:	0f 1f 40 00          	nopl   0x0(%rax)
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff80210028:	4d 21 ca             	and    %r9,%r10
ffffffff8021002b:	48 f7 d0             	not    %rax
ffffffff8021002e:	4c 85 d0             	test   %r10,%rax
ffffffff80210031:	75 e8                	jne    ffffffff8021001b <_RME_Kot_Erase+0x9b>
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~(Mask_Begin&Mask_End));
ffffffff80210033:	49 f7 d2             	not    %r10
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff80210036:	4c 8b 13             	mov    (%rbx),%r10
ffffffff80210039:	f0 4c 21 13          	lock and %r10,(%rbx)
    return 0;
ffffffff8021003d:	31 c0                	xor    %eax,%eax
}
ffffffff8021003f:	5b                   	pop    %rbx
ffffffff80210040:	c3                   	ret
ffffffff80210041:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
ffffffff80210048:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021004f:	80 ff ff 
ffffffff80210052:	48 8d 14 f0          	lea    (%rax,%rsi,8),%rdx
ffffffff80210056:	48 8b 02             	mov    (%rdx),%rax
ffffffff80210059:	4c 21 c8             	and    %r9,%rax
ffffffff8021005c:	4c 39 c8             	cmp    %r9,%rax
ffffffff8021005f:	75 ba                	jne    ffffffff8021001b <_RME_Kot_Erase+0x9b>
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff80210061:	49 f7 d2             	not    %r10
ffffffff80210064:	4c 8b 13             	mov    (%rbx),%r10
ffffffff80210067:	f0 4c 21 13          	lock and %r10,(%rbx)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff8021006b:	49 39 fb             	cmp    %rdi,%r11
ffffffff8021006e:	73 72                	jae    ffffffff802100e2 <_RME_Kot_Erase+0x162>
ffffffff80210070:	4c 29 c6             	sub    %r8,%rsi
ffffffff80210073:	48 8d 7e fe          	lea    -0x2(%rsi),%rdi
ffffffff80210077:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021007b:	74 53                	je     ffffffff802100d0 <_RME_Kot_Erase+0x150>
ffffffff8021007d:	48 89 fe             	mov    %rdi,%rsi
            RME_KOT_VA_BASE[Count]=0U;
ffffffff80210080:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff80210084:	49 ba 08 00 00 01 00 	movabs $0xffff800001000008,%r10
ffffffff8021008b:	80 ff ff 
ffffffff8021008e:	48 83 e6 fe          	and    $0xfffffffffffffffe,%rsi
ffffffff80210092:	4a 8d 04 11          	lea    (%rcx,%r10,1),%rax
ffffffff80210096:	49 01 f0             	add    %rsi,%r8
ffffffff80210099:	4b 8d 0c c2          	lea    (%r10,%r8,8),%rcx
ffffffff8021009d:	49 89 c8             	mov    %rcx,%r8
ffffffff802100a0:	49 29 c0             	sub    %rax,%r8
ffffffff802100a3:	41 83 e0 10          	and    $0x10,%r8d
ffffffff802100a7:	74 0f                	je     ffffffff802100b8 <_RME_Kot_Erase+0x138>
ffffffff802100a9:	0f 11 00             	movups %xmm0,(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802100ac:	48 83 c0 10          	add    $0x10,%rax
ffffffff802100b0:	48 39 c1             	cmp    %rax,%rcx
ffffffff802100b3:	74 13                	je     ffffffff802100c8 <_RME_Kot_Erase+0x148>
ffffffff802100b5:	0f 1f 00             	nopl   (%rax)
            RME_KOT_VA_BASE[Count]=0U;
ffffffff802100b8:	0f 11 00             	movups %xmm0,(%rax)
ffffffff802100bb:	48 83 c0 20          	add    $0x20,%rax
ffffffff802100bf:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802100c3:	48 39 c1             	cmp    %rax,%rcx
ffffffff802100c6:	75 f0                	jne    ffffffff802100b8 <_RME_Kot_Erase+0x138>
ffffffff802100c8:	48 39 fe             	cmp    %rdi,%rsi
ffffffff802100cb:	74 15                	je     ffffffff802100e2 <_RME_Kot_Erase+0x162>
ffffffff802100cd:	49 01 f3             	add    %rsi,%r11
            RME_KOT_VA_BASE[Count]=0U;
ffffffff802100d0:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802100d7:	80 ff ff 
ffffffff802100da:	4a c7 04 d8 00 00 00 	movq   $0x0,(%rax,%r11,8)
ffffffff802100e1:	00 
        RME_FETCH_AND(&(RME_KOT_VA_BASE[End]),~Mask_End);
ffffffff802100e2:	49 f7 d1             	not    %r9
ffffffff802100e5:	4c 8b 0a             	mov    (%rdx),%r9
ffffffff802100e8:	f0 4c 21 0a          	lock and %r9,(%rdx)
    return 0;
ffffffff802100ec:	31 c0                	xor    %eax,%eax
ffffffff802100ee:	e9 4c ff ff ff       	jmp    ffffffff8021003f <_RME_Kot_Erase+0xbf>
        return RME_ERR_KOT_BMP;
ffffffff802100f3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff802100fa:	c3                   	ret
ffffffff802100fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80210100 <_RME_Kom_Boot_Crt>:
{
ffffffff80210100:	f3 0f 1e fa          	endbr64
ffffffff80210104:	48 89 f0             	mov    %rsi,%rax
ffffffff80210107:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210108:	4c 8b 57 28          	mov    0x28(%rdi),%r10
ffffffff8021010c:	f6 c4 80             	test   $0x80,%ah
ffffffff8021010f:	75 3f                	jne    ffffffff80210150 <_RME_Kom_Boot_Crt+0x50>
ffffffff80210111:	4c 39 d6             	cmp    %r10,%rsi
ffffffff80210114:	0f 83 2e 01 00 00    	jae    ffffffff80210248 <_RME_Kom_Boot_Crt+0x148>
ffffffff8021011a:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80210121:	00 00 00 
ffffffff80210124:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210128:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021012c:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80210133:	ff 00 00 
ffffffff80210136:	48 8b 30             	mov    (%rax),%rsi
ffffffff80210139:	48 21 f7             	and    %rsi,%rdi
ffffffff8021013c:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8021013f:	75 79                	jne    ffffffff802101ba <_RME_Kom_Boot_Crt+0xba>
ffffffff80210141:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff80210148:	5b                   	pop    %rbx
ffffffff80210149:	c3                   	ret
ffffffff8021014a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210150:	48 c1 ee 10          	shr    $0x10,%rsi
ffffffff80210154:	4c 39 d6             	cmp    %r10,%rsi
ffffffff80210157:	0f 83 eb 00 00 00    	jae    ffffffff80210248 <_RME_Kom_Boot_Crt+0x148>
ffffffff8021015d:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff80210164:	ff 00 00 
ffffffff80210167:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021016b:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021016f:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff80210176:	00 00 00 
ffffffff80210179:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8021017c:	48 89 fb             	mov    %rdi,%rbx
ffffffff8021017f:	4c 21 d3             	and    %r10,%rbx
ffffffff80210182:	4c 39 db             	cmp    %r11,%rbx
ffffffff80210185:	74 ba                	je     ffffffff80210141 <_RME_Kom_Boot_Crt+0x41>
ffffffff80210187:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021018b:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021018f:	0f 85 c3 00 00 00    	jne    ffffffff80210258 <_RME_Kom_Boot_Crt+0x158>
ffffffff80210195:	48 8b 7e 28          	mov    0x28(%rsi),%rdi
ffffffff80210199:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021019e:	48 39 f8             	cmp    %rdi,%rax
ffffffff802101a1:	0f 83 a1 00 00 00    	jae    ffffffff80210248 <_RME_Kom_Boot_Crt+0x148>
ffffffff802101a7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802101ab:	48 03 46 18          	add    0x18(%rsi),%rax
ffffffff802101af:	48 8b 30             	mov    (%rax),%rsi
ffffffff802101b2:	49 21 f2             	and    %rsi,%r10
ffffffff802101b5:	4d 39 da             	cmp    %r11,%r10
ffffffff802101b8:	74 87                	je     ffffffff80210141 <_RME_Kom_Boot_Crt+0x41>
ffffffff802101ba:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802101be:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802101c2:	0f 85 90 00 00 00    	jne    ffffffff80210258 <_RME_Kom_Boot_Crt+0x158>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802101c8:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff802101cc:	0f 84 8f 00 00 00    	je     ffffffff80210261 <_RME_Kom_Boot_Crt+0x161>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kom,struct RME_Cap_Kom*,Kom_Crt);
ffffffff802101d2:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff802101d6:	73 70                	jae    ffffffff80210248 <_RME_Kom_Boot_Crt+0x148>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802101d8:	48 be 00 00 00 00 01 	movabs $0x100000000,%rsi
ffffffff802101df:	00 00 00 
ffffffff802101e2:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802101e6:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff802101ea:	31 c0                	xor    %eax,%eax
ffffffff802101ec:	f0 48 0f b1 32       	lock cmpxchg %rsi,(%rdx)
ffffffff802101f1:	40 0f 94 c6          	sete   %sil
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff802101f5:	40 84 f6             	test   %sil,%sil
ffffffff802101f8:	74 70                	je     ffffffff8021026a <_RME_Kom_Boot_Crt+0x16a>
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff802101fa:	49 83 c0 01          	add    $0x1,%r8
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff802101fe:	48 83 c1 3f          	add    $0x3f,%rcx
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff80210202:	48 b8 00 00 00 00 00 	movabs $0x2000000000000,%rax
ffffffff80210209:	00 02 00 
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff8021020c:	48 c7 42 20 01 00 00 	movq   $0x1,0x20(%rdx)
ffffffff80210213:	00 
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff80210214:	49 83 e0 c0          	and    $0xffffffffffffffc0,%r8
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff80210218:	48 83 e1 c0          	and    $0xffffffffffffffc0,%rcx
    Kom_Crt->Head.Root_Ref=1U;
ffffffff8021021c:	48 c7 42 08 01 00 00 	movq   $0x1,0x8(%rdx)
ffffffff80210223:	00 
    Kom_Crt->End=Kom_End-1U;
ffffffff80210224:	49 83 e8 01          	sub    $0x1,%r8
    Kom_Crt->Head.Object=0U;
ffffffff80210228:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff8021022f:	00 
    Kom_Crt->Head.Flag=Flag;
ffffffff80210230:	4c 89 4a 10          	mov    %r9,0x10(%rdx)
    Kom_Crt->Begin=Kom_Begin;
ffffffff80210234:	48 89 4a 28          	mov    %rcx,0x28(%rdx)
    Kom_Crt->End=Kom_End-1U;
ffffffff80210238:	4c 89 42 30          	mov    %r8,0x30(%rdx)
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff8021023c:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff8021023f:	31 c0                	xor    %eax,%eax
}
ffffffff80210241:	5b                   	pop    %rbx
ffffffff80210242:	c3                   	ret
ffffffff80210243:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210248:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8021024f:	5b                   	pop    %rbx
ffffffff80210250:	c3                   	ret
ffffffff80210251:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210258:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8021025f:	5b                   	pop    %rbx
ffffffff80210260:	c3                   	ret
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80210261:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff80210268:	5b                   	pop    %rbx
ffffffff80210269:	c3                   	ret
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff8021026a:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80210271:	5b                   	pop    %rbx
ffffffff80210272:	c3                   	ret
ffffffff80210273:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021027a:	00 00 00 00 
ffffffff8021027e:	66 90                	xchg   %ax,%ax

ffffffff80210280 <_RME_CPU_Local_Init>:
{
ffffffff80210280:	f3 0f 1e fa          	endbr64
    Local->CPUID=CPUID;
ffffffff80210284:	48 89 37             	mov    %rsi,(%rdi)
    Local->Thd_Cur=RME_NULL;
ffffffff80210287:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021028b:	48 8d 47 28          	lea    0x28(%rdi),%rax
ffffffff8021028f:	48 8d 97 28 04 00 00 	lea    0x428(%rdi),%rdx
    Local->Sig_Vct=RME_NULL;
ffffffff80210296:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
ffffffff8021029d:	00 
    Local->Thd_Cur=RME_NULL;
ffffffff8021029e:	0f 11 47 08          	movups %xmm0,0x8(%rdi)
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff802102a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    Head->Next=Head;
ffffffff802102a8:	66 48 0f 6e c0       	movq   %rax,%xmm0
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff802102ad:	48 83 c0 10          	add    $0x10,%rax
    Head->Next=Head;
ffffffff802102b1:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
ffffffff802102b5:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff802102b9:	48 39 d0             	cmp    %rdx,%rax
ffffffff802102bc:	75 ea                	jne    ffffffff802102a8 <_RME_CPU_Local_Init+0x28>
ffffffff802102be:	48 c7 47 20 00 00 00 	movq   $0x0,0x20(%rdi)
ffffffff802102c5:	00 
}
ffffffff802102c6:	c3                   	ret
ffffffff802102c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff802102ce:	00 00 

ffffffff802102d0 <_RME_Thd_Pgt>:
{
ffffffff802102d0:	f3 0f 1e fa          	endbr64
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff802102d4:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff802102db:	48 85 c0             	test   %rax,%rax
ffffffff802102de:	74 18                	je     ffffffff802102f8 <_RME_Thd_Pgt+0x28>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff802102e0:	48 8d 97 98 00 00 00 	lea    0x98(%rdi),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff802102e7:	48 39 d0             	cmp    %rdx,%rax
ffffffff802102ea:	74 0c                	je     ffffffff802102f8 <_RME_Thd_Pgt+0x28>
        return Inv_Top->Prc->Pgt;
ffffffff802102ec:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802102f0:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff802102f4:	c3                   	ret
ffffffff802102f5:	0f 1f 00             	nopl   (%rax)
        return Thd->Sched.Prc->Pgt;
ffffffff802102f8:	48 8b 47 58          	mov    0x58(%rdi),%rax
ffffffff802102fc:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80210300:	c3                   	ret
ffffffff80210301:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80210308:	00 00 00 00 
ffffffff8021030c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80210310 <_RME_Prc_Boot_Crt>:
{
ffffffff80210310:	f3 0f 1e fa          	endbr64
ffffffff80210314:	48 89 f0             	mov    %rsi,%rax
ffffffff80210317:	55                   	push   %rbp
ffffffff80210318:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021031b:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021031e:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8021031f:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
ffffffff80210323:	f6 c4 80             	test   $0x80,%ah
ffffffff80210326:	0f 85 94 01 00 00    	jne    ffffffff802104c0 <_RME_Prc_Boot_Crt+0x1b0>
ffffffff8021032c:	4c 39 c8             	cmp    %r9,%rax
ffffffff8021032f:	0f 83 fb 02 00 00    	jae    ffffffff80210630 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210335:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80210339:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021033d:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff80210344:	ff 00 00 
ffffffff80210347:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8021034e:	00 00 00 
ffffffff80210351:	48 01 f8             	add    %rdi,%rax
ffffffff80210354:	48 8b 08             	mov    (%rax),%rcx
ffffffff80210357:	49 21 ca             	and    %rcx,%r10
ffffffff8021035a:	4d 39 da             	cmp    %r11,%r10
ffffffff8021035d:	0f 84 d5 01 00 00    	je     ffffffff80210538 <_RME_Prc_Boot_Crt+0x228>
ffffffff80210363:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210367:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021036b:	0f 85 cf 02 00 00    	jne    ffffffff80210640 <_RME_Prc_Boot_Crt+0x330>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210371:	f6 c6 80             	test   $0x80,%dh
ffffffff80210374:	0f 85 ce 01 00 00    	jne    ffffffff80210548 <_RME_Prc_Boot_Crt+0x238>
ffffffff8021037a:	4c 39 ca             	cmp    %r9,%rdx
ffffffff8021037d:	0f 83 ad 02 00 00    	jae    ffffffff80210630 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210383:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8021038a:	ff 00 00 
ffffffff8021038d:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210391:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff80210398:	00 00 00 
ffffffff8021039b:	48 01 fa             	add    %rdi,%rdx
ffffffff8021039e:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff802103a1:	49 21 ca             	and    %rcx,%r10
ffffffff802103a4:	4d 39 da             	cmp    %r11,%r10
ffffffff802103a7:	0f 84 8b 01 00 00    	je     ffffffff80210538 <_RME_Prc_Boot_Crt+0x228>
ffffffff802103ad:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802103b1:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802103b5:	0f 85 85 02 00 00    	jne    ffffffff80210640 <_RME_Prc_Boot_Crt+0x330>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff802103bb:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff802103c2:	0f 85 f8 01 00 00    	jne    ffffffff802105c0 <_RME_Prc_Boot_Crt+0x2b0>
ffffffff802103c8:	4d 39 c8             	cmp    %r9,%r8
ffffffff802103cb:	0f 83 5f 02 00 00    	jae    ffffffff80210630 <_RME_Prc_Boot_Crt+0x320>
ffffffff802103d1:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff802103d8:	00 00 00 
ffffffff802103db:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff802103df:	49 01 f8             	add    %rdi,%r8
ffffffff802103e2:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff802103e9:	ff 00 00 
ffffffff802103ec:	49 8b 08             	mov    (%r8),%rcx
ffffffff802103ef:	48 21 cf             	and    %rcx,%rdi
ffffffff802103f2:	4c 39 cf             	cmp    %r9,%rdi
ffffffff802103f5:	0f 84 3d 01 00 00    	je     ffffffff80210538 <_RME_Prc_Boot_Crt+0x228>
ffffffff802103fb:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802103ff:	48 83 f9 04          	cmp    $0x4,%rcx
ffffffff80210403:	0f 85 37 02 00 00    	jne    ffffffff80210640 <_RME_Prc_Boot_Crt+0x330>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80210409:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8021040d:	0f 84 3d 02 00 00    	je     ffffffff80210650 <_RME_Prc_Boot_Crt+0x340>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff80210413:	f6 42 10 40          	testb  $0x40,0x10(%rdx)
ffffffff80210417:	0f 84 33 02 00 00    	je     ffffffff80210650 <_RME_Prc_Boot_Crt+0x340>
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff8021041d:	41 f6 40 10 40       	testb  $0x40,0x10(%r8)
ffffffff80210422:	0f 84 28 02 00 00    	je     ffffffff80210650 <_RME_Prc_Boot_Crt+0x340>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff80210428:	48 3b 70 28          	cmp    0x28(%rax),%rsi
ffffffff8021042c:	0f 83 fe 01 00 00    	jae    ffffffff80210630 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210432:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80210436:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021043a:	31 c0                	xor    %eax,%eax
ffffffff8021043c:	48 01 f1             	add    %rsi,%rcx
ffffffff8021043f:	48 be 00 00 00 00 01 	movabs $0x100000000,%rsi
ffffffff80210446:	00 00 00 
ffffffff80210449:	f0 48 0f b1 31       	lock cmpxchg %rsi,(%rcx)
ffffffff8021044e:	40 0f 94 c6          	sete   %sil
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80210452:	40 84 f6             	test   %sil,%sil
ffffffff80210455:	0f 84 01 02 00 00    	je     ffffffff8021065c <_RME_Prc_Boot_Crt+0x34c>
    Prc_Crt->Head.Root_Ref=1U;
ffffffff8021045b:	66 0f 6f 05 8d c6 00 	movdqa 0xc68d(%rip),%xmm0        # ffffffff8021caf0 <Table.1+0x170>
ffffffff80210462:	00 
ffffffff80210463:	0f 11 41 08          	movups %xmm0,0x8(%rcx)
ffffffff80210467:	66 0f 6f 05 21 c6 00 	movdqa 0xc621(%rip),%xmm0        # ffffffff8021ca90 <Table.1+0x110>
ffffffff8021046e:	00 
ffffffff8021046f:	0f 11 41 18          	movups %xmm0,0x18(%rcx)
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff80210473:	8b 32                	mov    (%rdx),%esi
ffffffff80210475:	85 f6                	test   %esi,%esi
ffffffff80210477:	74 04                	je     ffffffff8021047d <_RME_Prc_Boot_Crt+0x16d>
ffffffff80210479:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff8021047d:	41 8b 00             	mov    (%r8),%eax
ffffffff80210480:	85 c0                	test   %eax,%eax
ffffffff80210482:	74 04                	je     ffffffff80210488 <_RME_Prc_Boot_Crt+0x178>
ffffffff80210484:	4d 8b 40 08          	mov    0x8(%r8),%r8
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80210488:	b8 01 00 00 00       	mov    $0x1,%eax
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff8021048d:	48 89 51 28          	mov    %rdx,0x28(%rcx)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff80210491:	4c 89 41 30          	mov    %r8,0x30(%rcx)
ffffffff80210495:	48 89 c6             	mov    %rax,%rsi
ffffffff80210498:	f0 48 0f c1 72 08    	lock xadd %rsi,0x8(%rdx)
ffffffff8021049e:	f0 49 0f c1 40 08    	lock xadd %rax,0x8(%r8)
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff802104a4:	48 b8 00 00 00 00 00 	movabs $0x5000000000000,%rax
ffffffff802104ab:	00 05 00 
ffffffff802104ae:	48 89 01             	mov    %rax,(%rcx)
    return 0;
ffffffff802104b1:	31 c0                	xor    %eax,%eax
}
ffffffff802104b3:	5b                   	pop    %rbx
ffffffff802104b4:	5d                   	pop    %rbp
ffffffff802104b5:	c3                   	ret
ffffffff802104b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff802104bd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff802104c0:	48 89 c1             	mov    %rax,%rcx
ffffffff802104c3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802104c7:	4c 39 c9             	cmp    %r9,%rcx
ffffffff802104ca:	0f 83 60 01 00 00    	jae    ffffffff80210630 <_RME_Prc_Boot_Crt+0x320>
ffffffff802104d0:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff802104d4:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802104d8:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff802104df:	ff 00 00 
ffffffff802104e2:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff802104e9:	00 00 00 
ffffffff802104ec:	48 01 f9             	add    %rdi,%rcx
ffffffff802104ef:	4c 8b 11             	mov    (%rcx),%r10
ffffffff802104f2:	4c 89 d5             	mov    %r10,%rbp
ffffffff802104f5:	4c 21 dd             	and    %r11,%rbp
ffffffff802104f8:	48 39 dd             	cmp    %rbx,%rbp
ffffffff802104fb:	74 3b                	je     ffffffff80210538 <_RME_Prc_Boot_Crt+0x228>
ffffffff802104fd:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80210501:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80210505:	0f 85 35 01 00 00    	jne    ffffffff80210640 <_RME_Prc_Boot_Crt+0x330>
ffffffff8021050b:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff8021050f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210514:	4c 39 d0             	cmp    %r10,%rax
ffffffff80210517:	0f 83 13 01 00 00    	jae    ffffffff80210630 <_RME_Prc_Boot_Crt+0x320>
ffffffff8021051d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210521:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80210525:	48 8b 08             	mov    (%rax),%rcx
ffffffff80210528:	49 21 cb             	and    %rcx,%r11
ffffffff8021052b:	49 39 db             	cmp    %rbx,%r11
ffffffff8021052e:	0f 85 2f fe ff ff    	jne    ffffffff80210363 <_RME_Prc_Boot_Crt+0x53>
ffffffff80210534:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80210538:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021053f:	e9 6f ff ff ff       	jmp    ffffffff802104b3 <_RME_Prc_Boot_Crt+0x1a3>
ffffffff80210544:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210548:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021054b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021054f:	4c 39 c9             	cmp    %r9,%rcx
ffffffff80210552:	0f 83 d8 00 00 00    	jae    ffffffff80210630 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210558:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8021055f:	ff 00 00 
ffffffff80210562:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80210566:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8021056d:	00 00 00 
ffffffff80210570:	48 01 f9             	add    %rdi,%rcx
ffffffff80210573:	4c 8b 11             	mov    (%rcx),%r10
ffffffff80210576:	4c 89 d5             	mov    %r10,%rbp
ffffffff80210579:	4c 21 dd             	and    %r11,%rbp
ffffffff8021057c:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8021057f:	74 b7                	je     ffffffff80210538 <_RME_Prc_Boot_Crt+0x228>
ffffffff80210581:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80210585:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80210589:	0f 85 b1 00 00 00    	jne    ffffffff80210640 <_RME_Prc_Boot_Crt+0x330>
ffffffff8021058f:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff80210593:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff80210599:	4c 39 d2             	cmp    %r10,%rdx
ffffffff8021059c:	0f 83 8e 00 00 00    	jae    ffffffff80210630 <_RME_Prc_Boot_Crt+0x320>
ffffffff802105a2:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802105a6:	48 03 51 18          	add    0x18(%rcx),%rdx
ffffffff802105aa:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff802105ad:	49 21 cb             	and    %rcx,%r11
ffffffff802105b0:	49 39 db             	cmp    %rbx,%r11
ffffffff802105b3:	0f 85 f4 fd ff ff    	jne    ffffffff802103ad <_RME_Prc_Boot_Crt+0x9d>
ffffffff802105b9:	e9 7a ff ff ff       	jmp    ffffffff80210538 <_RME_Prc_Boot_Crt+0x228>
ffffffff802105be:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff802105c0:	4c 89 c1             	mov    %r8,%rcx
ffffffff802105c3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802105c7:	4c 39 c9             	cmp    %r9,%rcx
ffffffff802105ca:	73 64                	jae    ffffffff80210630 <_RME_Prc_Boot_Crt+0x320>
ffffffff802105cc:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff802105d3:	ff 00 00 
ffffffff802105d6:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802105da:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff802105e1:	00 00 00 
ffffffff802105e4:	48 01 f9             	add    %rdi,%rcx
ffffffff802105e7:	48 8b 39             	mov    (%rcx),%rdi
ffffffff802105ea:	49 89 fb             	mov    %rdi,%r11
ffffffff802105ed:	4d 21 cb             	and    %r9,%r11
ffffffff802105f0:	4d 39 d3             	cmp    %r10,%r11
ffffffff802105f3:	0f 84 3f ff ff ff    	je     ffffffff80210538 <_RME_Prc_Boot_Crt+0x228>
ffffffff802105f9:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff802105fd:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80210601:	75 3d                	jne    ffffffff80210640 <_RME_Prc_Boot_Crt+0x330>
ffffffff80210603:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff80210607:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8021060e:	49 39 f8             	cmp    %rdi,%r8
ffffffff80210611:	73 1d                	jae    ffffffff80210630 <_RME_Prc_Boot_Crt+0x320>
ffffffff80210613:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff80210617:	4c 03 41 18          	add    0x18(%rcx),%r8
ffffffff8021061b:	49 8b 08             	mov    (%r8),%rcx
ffffffff8021061e:	49 21 c9             	and    %rcx,%r9
ffffffff80210621:	4d 39 d1             	cmp    %r10,%r9
ffffffff80210624:	0f 85 d1 fd ff ff    	jne    ffffffff802103fb <_RME_Prc_Boot_Crt+0xeb>
ffffffff8021062a:	e9 09 ff ff ff       	jmp    ffffffff80210538 <_RME_Prc_Boot_Crt+0x228>
ffffffff8021062f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80210630:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210637:	e9 77 fe ff ff       	jmp    ffffffff802104b3 <_RME_Prc_Boot_Crt+0x1a3>
ffffffff8021063c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80210640:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210647:	e9 67 fe ff ff       	jmp    ffffffff802104b3 <_RME_Prc_Boot_Crt+0x1a3>
ffffffff8021064c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80210650:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210657:	e9 57 fe ff ff       	jmp    ffffffff802104b3 <_RME_Prc_Boot_Crt+0x1a3>
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8021065c:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80210663:	e9 4b fe ff ff       	jmp    ffffffff802104b3 <_RME_Prc_Boot_Crt+0x1a3>
ffffffff80210668:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021066f:	00 

ffffffff80210670 <_RME_Thd_Boot_Crt>:
{
ffffffff80210670:	f3 0f 1e fa          	endbr64
ffffffff80210674:	41 56                	push   %r14
ffffffff80210676:	41 55                	push   %r13
ffffffff80210678:	41 54                	push   %r12
ffffffff8021067a:	55                   	push   %rbp
ffffffff8021067b:	53                   	push   %rbx
ffffffff8021067c:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
    if(Prio>=RME_PREEMPT_PRIO_NUM)
ffffffff80210681:	49 83 f9 3f          	cmp    $0x3f,%r9
ffffffff80210685:	0f 87 75 03 00 00    	ja     ffffffff80210a00 <_RME_Thd_Boot_Crt+0x390>
ffffffff8021068b:	48 89 f0             	mov    %rsi,%rax
ffffffff8021068e:	48 89 cd             	mov    %rcx,%rbp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210691:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff80210695:	4c 89 c3             	mov    %r8,%rbx
ffffffff80210698:	4d 89 cd             	mov    %r9,%r13
ffffffff8021069b:	f6 c4 80             	test   $0x80,%ah
ffffffff8021069e:	0f 84 5c 02 00 00    	je     ffffffff80210900 <_RME_Thd_Boot_Crt+0x290>
ffffffff802106a4:	48 89 c1             	mov    %rax,%rcx
ffffffff802106a7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802106ab:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802106ae:	0f 83 1c 03 00 00    	jae    ffffffff802109d0 <_RME_Thd_Boot_Crt+0x360>
ffffffff802106b4:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff802106b8:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802106bc:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff802106c3:	ff 00 00 
ffffffff802106c6:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff802106cd:	00 00 00 
ffffffff802106d0:	48 01 f9             	add    %rdi,%rcx
ffffffff802106d3:	4c 8b 11             	mov    (%rcx),%r10
ffffffff802106d6:	4d 89 d3             	mov    %r10,%r11
ffffffff802106d9:	4d 21 c3             	and    %r8,%r11
ffffffff802106dc:	4d 39 cb             	cmp    %r9,%r11
ffffffff802106df:	0f 84 5b 02 00 00    	je     ffffffff80210940 <_RME_Thd_Boot_Crt+0x2d0>
ffffffff802106e5:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff802106e9:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff802106ed:	0f 85 cd 02 00 00    	jne    ffffffff802109c0 <_RME_Thd_Boot_Crt+0x350>
ffffffff802106f3:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff802106f7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802106fc:	4c 39 d0             	cmp    %r10,%rax
ffffffff802106ff:	0f 83 cb 02 00 00    	jae    ffffffff802109d0 <_RME_Thd_Boot_Crt+0x360>
ffffffff80210705:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210709:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8021070d:	48 8b 08             	mov    (%rax),%rcx
ffffffff80210710:	49 21 c8             	and    %rcx,%r8
ffffffff80210713:	4d 39 c8             	cmp    %r9,%r8
ffffffff80210716:	0f 84 24 02 00 00    	je     ffffffff80210940 <_RME_Thd_Boot_Crt+0x2d0>
ffffffff8021071c:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210720:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80210724:	0f 85 96 02 00 00    	jne    ffffffff802109c0 <_RME_Thd_Boot_Crt+0x350>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8021072a:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff80210730:	0f 85 1a 02 00 00    	jne    ffffffff80210950 <_RME_Thd_Boot_Crt+0x2e0>
ffffffff80210736:	48 39 f5             	cmp    %rsi,%rbp
ffffffff80210739:	0f 83 91 02 00 00    	jae    ffffffff802109d0 <_RME_Thd_Boot_Crt+0x360>
ffffffff8021073f:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80210746:	ff 00 00 
ffffffff80210749:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8021074d:	48 01 fd             	add    %rdi,%rbp
ffffffff80210750:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80210757:	00 00 00 
ffffffff8021075a:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
ffffffff8021075e:	48 21 ce             	and    %rcx,%rsi
ffffffff80210761:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80210764:	0f 84 d6 01 00 00    	je     ffffffff80210940 <_RME_Thd_Boot_Crt+0x2d0>
ffffffff8021076a:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021076e:	48 83 f9 05          	cmp    $0x5,%rcx
ffffffff80210772:	0f 85 48 02 00 00    	jne    ffffffff802109c0 <_RME_Thd_Boot_Crt+0x350>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80210778:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8021077c:	0f 84 5e 02 00 00    	je     ffffffff802109e0 <_RME_Thd_Boot_Crt+0x370>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff80210782:	f6 45 10 02          	testb  $0x2,0x10(%rbp)
ffffffff80210786:	0f 84 54 02 00 00    	je     ffffffff802109e0 <_RME_Thd_Boot_Crt+0x370>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8021078c:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80210790:	0f 83 3a 02 00 00    	jae    ffffffff802109d0 <_RME_Thd_Boot_Crt+0x360>
ffffffff80210796:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021079a:	48 03 50 18          	add    0x18(%rax),%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021079e:	31 c0                	xor    %eax,%eax
ffffffff802107a0:	49 89 d6             	mov    %rdx,%r14
ffffffff802107a3:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802107aa:	00 00 00 
ffffffff802107ad:	f0 49 0f b1 16       	lock cmpxchg %rdx,(%r14)
ffffffff802107b2:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff802107b5:	84 d2                	test   %dl,%dl
ffffffff802107b7:	0f 84 33 02 00 00    	je     ffffffff802109f0 <_RME_Thd_Boot_Crt+0x380>
ffffffff802107bd:	49 c7 46 20 01 00 00 	movq   $0x1,0x20(%r14)
ffffffff802107c4:	00 
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff802107c5:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff802107ca:	48 89 df             	mov    %rbx,%rdi
ffffffff802107cd:	e8 de e1 ff ff       	call   ffffffff8020e9b0 <_RME_Kot_Mark>
ffffffff802107d2:	48 85 c0             	test   %rax,%rax
ffffffff802107d5:	0f 85 31 02 00 00    	jne    ffffffff80210a0c <_RME_Thd_Boot_Crt+0x39c>
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff802107db:	66 0f 6f 05 1d c3 00 	movdqa 0xc31d(%rip),%xmm0        # ffffffff8021cb00 <Table.1+0x180>
ffffffff802107e2:	00 
    Thread->Sched.TID=0U;
ffffffff802107e3:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
ffffffff802107ea:	00 
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff802107eb:	0f 11 43 30          	movups %xmm0,0x30(%rbx)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff802107ef:	8b 55 00             	mov    0x0(%rbp),%edx
ffffffff802107f2:	85 d2                	test   %edx,%edx
ffffffff802107f4:	74 04                	je     ffffffff802107fa <_RME_Thd_Boot_Crt+0x18a>
ffffffff802107f6:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff802107fa:	48 8d 73 10          	lea    0x10(%rbx),%rsi
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff802107fe:	48 8d 53 78          	lea    0x78(%rbx),%rdx
    Thread->Sched.Prc=Prc_Root;
ffffffff80210802:	48 89 6b 58          	mov    %rbp,0x58(%rbx)
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80210806:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    Head->Prev=Head;
ffffffff8021080b:	48 89 93 80 00 00 00 	mov    %rdx,0x80(%rbx)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80210812:	be 01 00 00 00       	mov    $0x1,%esi
    Head->Next=Head;
ffffffff80210817:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
ffffffff8021081b:	48 89 53 78          	mov    %rdx,0x78(%rbx)
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff8021081f:	48 8d 93 b0 00 00 00 	lea    0xb0(%rbx),%rdx
    Head->Next=Head;
ffffffff80210826:	0f 11 43 10          	movups %xmm0,0x10(%rbx)
    Thd_Crt->Head.Root_Ref=1U;
ffffffff8021082a:	66 0f 6f 05 de c2 00 	movdqa 0xc2de(%rip),%xmm0        # ffffffff8021cb10 <Table.1+0x190>
ffffffff80210831:	00 
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80210832:	48 89 93 90 00 00 00 	mov    %rdx,0x90(%rbx)
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff80210839:	48 8d 93 98 00 00 00 	lea    0x98(%rbx),%rdx
    Head->Prev=Head;
ffffffff80210840:	48 89 93 a0 00 00 00 	mov    %rdx,0xa0(%rbx)
    Head->Next=Head;
ffffffff80210847:	48 89 93 98 00 00 00 	mov    %rdx,0x98(%rbx)
ffffffff8021084e:	48 89 f2             	mov    %rsi,%rdx
    Thread->Sched.Signal=0U;
ffffffff80210851:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
ffffffff80210858:	00 
    Thread->Sched.Prio=Prio;
ffffffff80210859:	4c 89 6b 40          	mov    %r13,0x40(%rbx)
    Thread->Sched.Prio_Max=RME_PREEMPT_PRIO_NUM-1U;
ffffffff8021085d:	48 c7 43 48 3f 00 00 	movq   $0x3f,0x48(%rbx)
ffffffff80210864:	00 
    Thread->Sched.Sched_Ref=1U;
ffffffff80210865:	48 c7 43 60 01 00 00 	movq   $0x1,0x60(%rbx)
ffffffff8021086c:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff8021086d:	48 c7 43 70 00 00 00 	movq   $0x0,0x70(%rbx)
ffffffff80210874:	00 
    Thread->Sched.Local=Local;
ffffffff80210875:	4c 89 63 28          	mov    %r12,0x28(%rbx)
    Thread->Ctx.Hyp_Attr=0U;
ffffffff80210879:	48 c7 83 88 00 00 00 	movq   $0x0,0x88(%rbx)
ffffffff80210880:	00 00 00 00 
    Thread->Ctx.Invstk_Depth=0U;
ffffffff80210884:	48 c7 83 a8 00 00 00 	movq   $0x0,0xa8(%rbx)
ffffffff8021088b:	00 00 00 00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff8021088f:	49 89 5e 18          	mov    %rbx,0x18(%r14)
    Thd_Crt->Head.Root_Ref=1U;
ffffffff80210893:	41 0f 11 46 08       	movups %xmm0,0x8(%r14)
ffffffff80210898:	f0 48 0f c1 55 08    	lock xadd %rdx,0x8(%rbp)
    Prio=Thd->Sched.Prio;
ffffffff8021089e:	48 8b 4b 40          	mov    0x40(%rbx),%rcx
    Local=Thd->Sched.Local;
ffffffff802108a2:	48 8b 53 28          	mov    0x28(%rbx),%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802108a6:	49 89 c8             	mov    %rcx,%r8
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802108a9:	48 d3 e6             	shl    %cl,%rsi
ffffffff802108ac:	49 c1 e0 04          	shl    $0x4,%r8
ffffffff802108b0:	4e 8d 0c 02          	lea    (%rdx,%r8,1),%r9
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802108b4:	4e 8d 5c 02 28       	lea    0x28(%rdx,%r8,1),%r11
ffffffff802108b9:	49 8b 79 30          	mov    0x30(%r9),%rdi
ffffffff802108bd:	66 49 0f 6e c3       	movq   %r11,%xmm0
    Next->Prev=New;
ffffffff802108c2:	49 89 59 30          	mov    %rbx,0x30(%r9)
    New->Next=Next;
ffffffff802108c6:	66 48 0f 6e cf       	movq   %rdi,%xmm1
ffffffff802108cb:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff802108cf:	0f 11 03             	movups %xmm0,(%rbx)
    Prev->Next=New;
ffffffff802108d2:	48 89 1f             	mov    %rbx,(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802108d5:	48 89 cf             	mov    %rcx,%rdi
ffffffff802108d8:	48 c1 ef 06          	shr    $0x6,%rdi
ffffffff802108dc:	48 09 74 fa 20       	or     %rsi,0x20(%rdx,%rdi,8)
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff802108e1:	48 be 00 00 00 00 00 	movabs $0x6000000000000,%rsi
ffffffff802108e8:	00 06 00 
    Local->Thd_Cur=Thread;
ffffffff802108eb:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff802108f0:	49 89 36             	mov    %rsi,(%r14)
}
ffffffff802108f3:	5b                   	pop    %rbx
ffffffff802108f4:	5d                   	pop    %rbp
ffffffff802108f5:	41 5c                	pop    %r12
ffffffff802108f7:	41 5d                	pop    %r13
ffffffff802108f9:	41 5e                	pop    %r14
ffffffff802108fb:	c3                   	ret
ffffffff802108fc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210900:	48 39 f0             	cmp    %rsi,%rax
ffffffff80210903:	0f 83 c7 00 00 00    	jae    ffffffff802109d0 <_RME_Thd_Boot_Crt+0x360>
ffffffff80210909:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8021090d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210911:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80210918:	ff 00 00 
ffffffff8021091b:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80210922:	00 00 00 
ffffffff80210925:	48 01 f8             	add    %rdi,%rax
ffffffff80210928:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021092b:	49 21 c8             	and    %rcx,%r8
ffffffff8021092e:	4d 39 c8             	cmp    %r9,%r8
ffffffff80210931:	0f 85 e5 fd ff ff    	jne    ffffffff8021071c <_RME_Thd_Boot_Crt+0xac>
ffffffff80210937:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021093e:	00 00 
ffffffff80210940:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210947:	eb aa                	jmp    ffffffff802108f3 <_RME_Thd_Boot_Crt+0x283>
ffffffff80210949:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80210950:	48 89 e9             	mov    %rbp,%rcx
ffffffff80210953:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80210957:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021095a:	73 74                	jae    ffffffff802109d0 <_RME_Thd_Boot_Crt+0x360>
ffffffff8021095c:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80210963:	00 00 00 
ffffffff80210966:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021096a:	48 01 f9             	add    %rdi,%rcx
ffffffff8021096d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80210974:	ff 00 00 
ffffffff80210977:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8021097a:	49 89 f1             	mov    %rsi,%r9
ffffffff8021097d:	49 21 f9             	and    %rdi,%r9
ffffffff80210980:	4d 39 c1             	cmp    %r8,%r9
ffffffff80210983:	74 bb                	je     ffffffff80210940 <_RME_Thd_Boot_Crt+0x2d0>
ffffffff80210985:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80210989:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021098d:	75 31                	jne    ffffffff802109c0 <_RME_Thd_Boot_Crt+0x350>
ffffffff8021098f:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff80210993:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff80210999:	48 39 f5             	cmp    %rsi,%rbp
ffffffff8021099c:	73 32                	jae    ffffffff802109d0 <_RME_Thd_Boot_Crt+0x360>
ffffffff8021099e:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff802109a2:	48 03 69 18          	add    0x18(%rcx),%rbp
ffffffff802109a6:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
ffffffff802109aa:	48 21 cf             	and    %rcx,%rdi
ffffffff802109ad:	4c 39 c7             	cmp    %r8,%rdi
ffffffff802109b0:	0f 85 b4 fd ff ff    	jne    ffffffff8021076a <_RME_Thd_Boot_Crt+0xfa>
ffffffff802109b6:	eb 88                	jmp    ffffffff80210940 <_RME_Thd_Boot_Crt+0x2d0>
ffffffff802109b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff802109bf:	00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802109c0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802109c7:	e9 27 ff ff ff       	jmp    ffffffff802108f3 <_RME_Thd_Boot_Crt+0x283>
ffffffff802109cc:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff802109d0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802109d7:	e9 17 ff ff ff       	jmp    ffffffff802108f3 <_RME_Thd_Boot_Crt+0x283>
ffffffff802109dc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802109e0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802109e7:	e9 07 ff ff ff       	jmp    ffffffff802108f3 <_RME_Thd_Boot_Crt+0x283>
ffffffff802109ec:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff802109f0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802109f7:	e9 f7 fe ff ff       	jmp    ffffffff802108f3 <_RME_Thd_Boot_Crt+0x283>
ffffffff802109fc:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_PRIO;
ffffffff80210a00:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80210a07:	e9 e7 fe ff ff       	jmp    ffffffff802108f3 <_RME_Thd_Boot_Crt+0x283>
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff80210a0c:	49 c7 06 00 00 00 00 	movq   $0x0,(%r14)
        return RME_ERR_CPT_KOT;
ffffffff80210a13:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80210a1a:	e9 d4 fe ff ff       	jmp    ffffffff802108f3 <_RME_Thd_Boot_Crt+0x283>
ffffffff80210a1f:	90                   	nop

ffffffff80210a20 <_RME_Sig_Boot_Crt>:
{
ffffffff80210a20:	f3 0f 1e fa          	endbr64
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210a24:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff80210a28:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80210a2e:	75 40                	jne    ffffffff80210a70 <_RME_Sig_Boot_Crt+0x50>
ffffffff80210a30:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80210a33:	0f 83 07 01 00 00    	jae    ffffffff80210b40 <_RME_Sig_Boot_Crt+0x120>
ffffffff80210a39:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80210a40:	ff 00 00 
ffffffff80210a43:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80210a47:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80210a4b:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80210a52:	00 00 00 
ffffffff80210a55:	48 8b 06             	mov    (%rsi),%rax
ffffffff80210a58:	48 21 c1             	and    %rax,%rcx
ffffffff80210a5b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80210a5e:	75 7a                	jne    ffffffff80210ada <_RME_Sig_Boot_Crt+0xba>
ffffffff80210a60:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210a67:	c3                   	ret
ffffffff80210a68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210a6f:	00 
ffffffff80210a70:	48 89 f0             	mov    %rsi,%rax
ffffffff80210a73:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210a77:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210a7a:	0f 83 c0 00 00 00    	jae    ffffffff80210b40 <_RME_Sig_Boot_Crt+0x120>
ffffffff80210a80:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80210a87:	00 00 00 
ffffffff80210a8a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210a8e:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80210a92:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80210a99:	ff 00 00 
ffffffff80210a9c:	48 8b 08             	mov    (%rax),%rcx
ffffffff80210a9f:	49 89 c9             	mov    %rcx,%r9
ffffffff80210aa2:	49 21 f9             	and    %rdi,%r9
ffffffff80210aa5:	4d 39 c1             	cmp    %r8,%r9
ffffffff80210aa8:	74 b6                	je     ffffffff80210a60 <_RME_Sig_Boot_Crt+0x40>
ffffffff80210aaa:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210aae:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80210ab2:	0f 85 98 00 00 00    	jne    ffffffff80210b50 <_RME_Sig_Boot_Crt+0x130>
ffffffff80210ab8:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80210abc:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80210ac2:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80210ac5:	73 79                	jae    ffffffff80210b40 <_RME_Sig_Boot_Crt+0x120>
ffffffff80210ac7:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80210acb:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff80210acf:	48 8b 06             	mov    (%rsi),%rax
ffffffff80210ad2:	48 21 c7             	and    %rax,%rdi
ffffffff80210ad5:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80210ad8:	74 86                	je     ffffffff80210a60 <_RME_Sig_Boot_Crt+0x40>
ffffffff80210ada:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210ade:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210ae2:	75 6c                	jne    ffffffff80210b50 <_RME_Sig_Boot_Crt+0x130>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80210ae4:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff80210ae8:	74 6e                	je     ffffffff80210b58 <_RME_Sig_Boot_Crt+0x138>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80210aea:	48 3b 56 28          	cmp    0x28(%rsi),%rdx
ffffffff80210aee:	73 50                	jae    ffffffff80210b40 <_RME_Sig_Boot_Crt+0x120>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80210af0:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff80210af7:	00 00 00 
ffffffff80210afa:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210afe:	31 c0                	xor    %eax,%eax
ffffffff80210b00:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff80210b04:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80210b09:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80210b0c:	84 c9                	test   %cl,%cl
ffffffff80210b0e:	74 50                	je     ffffffff80210b60 <_RME_Sig_Boot_Crt+0x140>
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80210b10:	66 0f 6f 05 08 c0 00 	movdqa 0xc008(%rip),%xmm0        # ffffffff8021cb20 <Table.1+0x1a0>
ffffffff80210b17:	00 
    Sig_Crt->Thd=RME_NULL;
ffffffff80210b18:	48 c7 42 30 00 00 00 	movq   $0x0,0x30(%rdx)
ffffffff80210b1f:	00 
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80210b20:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff80210b23:	66 0f 6f 05 05 c0 00 	movdqa 0xc005(%rip),%xmm0        # ffffffff8021cb30 <Table.1+0x1b0>
ffffffff80210b2a:	00 
ffffffff80210b2b:	0f 11 42 10          	movups %xmm0,0x10(%rdx)
ffffffff80210b2f:	66 0f 6f 05 09 c0 00 	movdqa 0xc009(%rip),%xmm0        # ffffffff8021cb40 <Table.1+0x1c0>
ffffffff80210b36:	00 
ffffffff80210b37:	0f 11 42 20          	movups %xmm0,0x20(%rdx)
    return 0;
ffffffff80210b3b:	c3                   	ret
ffffffff80210b3c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210b40:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210b47:	c3                   	ret
ffffffff80210b48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210b4f:	00 
ffffffff80210b50:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210b57:	c3                   	ret
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80210b58:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210b5f:	c3                   	ret
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80210b60:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80210b67:	c3                   	ret
ffffffff80210b68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210b6f:	00 

ffffffff80210b70 <_RME_Kern_High>:
{
ffffffff80210b70:	f3 0f 1e fa          	endbr64
ffffffff80210b74:	41 56                	push   %r14
ffffffff80210b76:	41 55                	push   %r13
ffffffff80210b78:	41 54                	push   %r12
ffffffff80210b7a:	55                   	push   %rbp
ffffffff80210b7b:	53                   	push   %rbx
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210b7c:	48 8b 46 20          	mov    0x20(%rsi),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80210b80:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80210b84:	48 83 f8 01          	cmp    $0x1,%rax
    Thd_Cur=Local->Thd_Cur;
ffffffff80210b88:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210b8c:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80210b8f:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80210b93:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80210b98:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80210b9c:	4c 8b 64 06 08       	mov    0x8(%rsi,%rax,1),%r12
    if(Thd_New==Thd_Cur)
ffffffff80210ba1:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80210ba4:	0f 84 8f 00 00 00    	je     ffffffff80210c39 <_RME_Kern_High+0xc9>
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80210baa:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
ffffffff80210baf:	49 89 fd             	mov    %rdi,%r13
ffffffff80210bb2:	48 89 f3             	mov    %rsi,%rbx
ffffffff80210bb5:	75 0b                	jne    ffffffff80210bc2 <_RME_Kern_High+0x52>
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff80210bb7:	49 8b 44 24 40       	mov    0x40(%r12),%rax
ffffffff80210bbc:	48 39 45 40          	cmp    %rax,0x40(%rbp)
ffffffff80210bc0:	73 77                	jae    ffffffff80210c39 <_RME_Kern_High+0xc9>
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff80210bc2:	4d 8b b4 24 90 00 00 	mov    0x90(%r12),%r14
ffffffff80210bc9:	00 
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff80210bca:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80210bd1:	4c 89 ee             	mov    %r13,%rsi
ffffffff80210bd4:	e8 d7 9a 00 00       	call   ffffffff8021a6b0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80210bd9:	4c 89 f6             	mov    %r14,%rsi
ffffffff80210bdc:	4c 89 ef             	mov    %r13,%rdi
ffffffff80210bdf:	e8 cc 9a 00 00       	call   ffffffff8021a6b0 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210be4:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210beb:	48 85 c0             	test   %rax,%rax
ffffffff80210bee:	74 58                	je     ffffffff80210c48 <_RME_Kern_High+0xd8>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210bf0:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210bf7:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210bfa:	74 4c                	je     ffffffff80210c48 <_RME_Kern_High+0xd8>
        return Inv_Top->Prc->Pgt;
ffffffff80210bfc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210c00:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210c04:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff80210c0b:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210c0c:	48 85 c0             	test   %rax,%rax
ffffffff80210c0f:	74 4c                	je     ffffffff80210c5d <_RME_Kern_High+0xed>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210c11:	49 8d 8c 24 98 00 00 	lea    0x98(%r12),%rcx
ffffffff80210c18:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210c19:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210c1c:	74 3f                	je     ffffffff80210c5d <_RME_Kern_High+0xed>
        return Inv_Top->Prc->Pgt;
ffffffff80210c1e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210c22:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff80210c26:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff80210c2a:	48 39 42 18          	cmp    %rax,0x18(%rdx)
ffffffff80210c2e:	74 05                	je     ffffffff80210c35 <_RME_Kern_High+0xc5>
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff80210c30:	e8 6b 9e 00 00       	call   ffffffff8021aaa0 <__RME_Pgt_Set>
    Local->Thd_Cur=Thd_New;
ffffffff80210c35:	4c 89 63 08          	mov    %r12,0x8(%rbx)
}
ffffffff80210c39:	5b                   	pop    %rbx
ffffffff80210c3a:	5d                   	pop    %rbp
ffffffff80210c3b:	41 5c                	pop    %r12
ffffffff80210c3d:	41 5d                	pop    %r13
ffffffff80210c3f:	41 5e                	pop    %r14
ffffffff80210c41:	c3                   	ret
ffffffff80210c42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return Thd->Sched.Prc->Pgt;
ffffffff80210c48:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff80210c4c:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210c50:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff80210c57:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210c58:	48 85 c0             	test   %rax,%rax
ffffffff80210c5b:	75 b4                	jne    ffffffff80210c11 <_RME_Kern_High+0xa1>
        return Thd->Sched.Prc->Pgt;
ffffffff80210c5d:	49 8b 44 24 58       	mov    0x58(%r12),%rax
ffffffff80210c62:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff80210c66:	eb be                	jmp    ffffffff80210c26 <_RME_Kern_High+0xb6>
ffffffff80210c68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210c6f:	00 

ffffffff80210c70 <_RME_Svc_Handler>:
{
ffffffff80210c70:	f3 0f 1e fa          	endbr64
ffffffff80210c74:	41 57                	push   %r15
ffffffff80210c76:	41 56                	push   %r14
ffffffff80210c78:	41 55                	push   %r13
ffffffff80210c7a:	41 54                	push   %r12
ffffffff80210c7c:	55                   	push   %rbp
ffffffff80210c7d:	53                   	push   %rbx
ffffffff80210c7e:	48 89 fb             	mov    %rdi,%rbx
ffffffff80210c81:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
ffffffff80210c88:	48 8d 4c 24 40       	lea    0x40(%rsp),%rcx
ffffffff80210c8d:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
ffffffff80210c92:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
ffffffff80210c97:	e8 94 a3 00 00       	call   ffffffff8021b030 <__RME_Svc_Param_Get>
    if(Svc_Num==RME_SVC_INV_RET)
ffffffff80210c9c:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
ffffffff80210ca1:	41 83 e4 3f          	and    $0x3f,%r12d
ffffffff80210ca5:	74 59                	je     ffffffff80210d00 <_RME_Svc_Handler+0x90>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff80210ca7:	e8 93 ab ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80210cac:	48 8b 40 08          	mov    0x8(%rax),%rax
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff80210cb0:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210cb7:	48 85 d2             	test   %rdx,%rdx
ffffffff80210cba:	74 34                	je     ffffffff80210cf0 <_RME_Svc_Handler+0x80>
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff80210cbc:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210cc3:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80210cc6:	74 28                	je     ffffffff80210cf0 <_RME_Svc_Handler+0x80>
        Cpt=Inv_Top->Prc->Cpt;
ffffffff80210cc8:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff80210ccc:	48 8b 68 28          	mov    0x28(%rax),%rbp
    if(Svc_Num==RME_SVC_INV_ACT)
ffffffff80210cd0:	49 83 fc 01          	cmp    $0x1,%r12
ffffffff80210cd4:	0f 84 b6 0b 00 00    	je     ffffffff80211890 <_RME_Svc_Handler+0xc20>
    switch(Svc_Num)
ffffffff80210cda:	49 83 fc 09          	cmp    $0x9,%r12
ffffffff80210cde:	0f 87 f4 0c 00 00    	ja     ffffffff802119d8 <_RME_Svc_Handler+0xd68>
ffffffff80210ce4:	3e 42 ff 24 e5 60 c7 	notrack jmp *-0x7fde38a0(,%r12,8)
ffffffff80210ceb:	21 80 
ffffffff80210ced:	0f 1f 00             	nopl   (%rax)
        Cpt=Thd_Cur->Sched.Prc->Cpt;
ffffffff80210cf0:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80210cf4:	48 8b 68 28          	mov    0x28(%rax),%rbp
ffffffff80210cf8:	eb d6                	jmp    ffffffff80210cd0 <_RME_Svc_Handler+0x60>
ffffffff80210cfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Retval=_RME_Inv_Ret(Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
ffffffff80210d00:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
ffffffff80210d05:	31 d2                	xor    %edx,%edx
ffffffff80210d07:	48 89 df             	mov    %rbx,%rdi
ffffffff80210d0a:	e8 a1 ba ff ff       	call   ffffffff8020c7b0 <_RME_Inv_Ret>
        RME_SWITCH_RETURN(Reg, Retval);
ffffffff80210d0f:	48 85 c0             	test   %rax,%rax
ffffffff80210d12:	0f 88 60 09 00 00    	js     ffffffff80211678 <_RME_Svc_Handler+0xa08>
}
ffffffff80210d18:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
ffffffff80210d1f:	5b                   	pop    %rbx
ffffffff80210d20:	5d                   	pop    %rbp
ffffffff80210d21:	41 5c                	pop    %r12
ffffffff80210d23:	41 5d                	pop    %r13
ffffffff80210d25:	41 5e                	pop    %r14
ffffffff80210d27:	41 5f                	pop    %r15
ffffffff80210d29:	c3                   	ret
ffffffff80210d2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Thd */
ffffffff80210d30:	4c 8b 74 24 40       	mov    0x40(%rsp),%r14
            Retval=_RME_Thd_Swt(Cpt,
ffffffff80210d35:	4c 8b 6c 24 48       	mov    0x48(%rsp),%r13
    Local=RME_CPU_LOCAL();
ffffffff80210d3a:	e8 00 ab ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Cur=Local->Thd_Cur;
ffffffff80210d3f:	4c 8b 78 08          	mov    0x8(%rax),%r15
    Local=RME_CPU_LOCAL();
ffffffff80210d43:	49 89 c4             	mov    %rax,%r12
    if(Cap_Thd<RME_CID_NULL)
ffffffff80210d46:	49 81 fe ff ff ff 7f 	cmp    $0x7fffffff,%r14
ffffffff80210d4d:	0f 8e 7d 0d 00 00    	jle    ffffffff80211ad0 <_RME_Svc_Handler+0xe60>
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80210d53:	4d 85 ed             	test   %r13,%r13
ffffffff80210d56:	74 14                	je     ffffffff80210d6c <_RME_Svc_Handler+0xfc>
ffffffff80210d58:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80210d5f:	ff ff 7f 
ffffffff80210d62:	49 3b 47 30          	cmp    0x30(%r15),%rax
ffffffff80210d66:	0f 83 77 26 00 00    	jae    ffffffff802133e3 <_RME_Svc_Handler+0x2773>
            _RME_Run_Del(Thd_Cur);
ffffffff80210d6c:	4c 89 ff             	mov    %r15,%rdi
ffffffff80210d6f:	e8 ec b9 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
    Prio=Thd->Sched.Prio;
ffffffff80210d74:	49 8b 4f 40          	mov    0x40(%r15),%rcx
    Local=Thd->Sched.Local;
ffffffff80210d78:	49 8b 47 28          	mov    0x28(%r15),%rax
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80210d7c:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210d7f:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80210d83:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff80210d87:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff80210d8c:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff80210d90:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210d95:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff80210d98:	4c 89 7f 30          	mov    %r15,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210d9c:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff80210da0:	66 48 0f 6e d2       	movq   %rdx,%xmm2
ffffffff80210da5:	66 0f 6c c2          	punpcklqdq %xmm2,%xmm0
ffffffff80210da9:	41 0f 11 07          	movups %xmm0,(%r15)
    Prev->Next=New;
ffffffff80210dad:	4c 89 3a             	mov    %r15,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210db0:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80210db5:	48 d3 e2             	shl    %cl,%rdx
ffffffff80210db8:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210dbd:	49 8b 44 24 20       	mov    0x20(%r12),%rax
ffffffff80210dc2:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80210dc6:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80210dca:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80210dcd:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80210dd1:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80210dd6:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80210dda:	49 8b 6c 04 08       	mov    0x8(%r12,%rax,1),%rbp
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80210ddf:	31 f6                	xor    %esi,%esi
ffffffff80210de1:	48 89 df             	mov    %rbx,%rdi
ffffffff80210de4:	e8 57 a2 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
    if(Thd_Cur==Thd_New)
ffffffff80210de9:	49 39 ef             	cmp    %rbp,%r15
ffffffff80210dec:	0f 84 26 ff ff ff    	je     ffffffff80210d18 <_RME_Svc_Handler+0xa8>
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff80210df2:	4c 8b ad 90 00 00 00 	mov    0x90(%rbp),%r13
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff80210df9:	49 8b bf 90 00 00 00 	mov    0x90(%r15),%rdi
ffffffff80210e00:	48 89 de             	mov    %rbx,%rsi
ffffffff80210e03:	e8 a8 98 00 00       	call   ffffffff8021a6b0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80210e08:	4c 89 ee             	mov    %r13,%rsi
ffffffff80210e0b:	48 89 df             	mov    %rbx,%rdi
ffffffff80210e0e:	e8 9d 98 00 00       	call   ffffffff8021a6b0 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210e13:	49 8b 87 98 00 00 00 	mov    0x98(%r15),%rax
ffffffff80210e1a:	49 8d 97 98 00 00 00 	lea    0x98(%r15),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210e21:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210e24:	0f 84 06 23 00 00    	je     ffffffff80213130 <_RME_Svc_Handler+0x24c0>
ffffffff80210e2a:	48 85 c0             	test   %rax,%rax
ffffffff80210e2d:	0f 84 fd 22 00 00    	je     ffffffff80213130 <_RME_Svc_Handler+0x24c0>
        return Inv_Top->Prc->Pgt;
ffffffff80210e33:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210e37:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210e3b:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210e42:	48 85 c0             	test   %rax,%rax
ffffffff80210e45:	0f 84 d5 22 00 00    	je     ffffffff80213120 <_RME_Svc_Handler+0x24b0>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210e4b:	48 8d 8d 98 00 00 00 	lea    0x98(%rbp),%rcx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210e52:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210e55:	0f 84 c5 22 00 00    	je     ffffffff80213120 <_RME_Svc_Handler+0x24b0>
        return Inv_Top->Prc->Pgt;
ffffffff80210e5b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210e5f:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff80210e63:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff80210e67:	48 39 42 18          	cmp    %rax,0x18(%rdx)
ffffffff80210e6b:	74 05                	je     ffffffff80210e72 <_RME_Svc_Handler+0x202>
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff80210e6d:	e8 2e 9c 00 00       	call   ffffffff8021aaa0 <__RME_Pgt_Set>
    Local->Thd_Cur=Thd_New;
ffffffff80210e72:	49 89 6c 24 08       	mov    %rbp,0x8(%r12)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80210e77:	e9 9c fe ff ff       	jmp    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
ffffffff80210e7c:	0f 1f 40 00          	nopl   0x0(%rax)
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff80210e80:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
                                      (rme_cid_t)Param[1],                  /* rme_cid_t Cap_Thd_Src */
ffffffff80210e85:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
ffffffff80210e8a:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    if(Time==0U)
ffffffff80210e8f:	4d 85 ed             	test   %r13,%r13
ffffffff80210e92:	0f 84 63 33 00 00    	je     ffffffff802141fb <_RME_Svc_Handler+0x358b>
{
    struct RME_Cap_Kfn* Kfn_Op;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80210e98:	48 8b 75 28          	mov    0x28(%rbp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80210e9c:	f6 c4 80             	test   $0x80,%ah
ffffffff80210e9f:	0f 84 bb 0e 00 00    	je     ffffffff80211d60 <_RME_Svc_Handler+0x10f0>
ffffffff80210ea5:	48 89 c1             	mov    %rax,%rcx
ffffffff80210ea8:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80210eac:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80210eaf:	0f 83 5f 26 00 00    	jae    ffffffff80213514 <_RME_Svc_Handler+0x28a4>
ffffffff80210eb5:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
ffffffff80210eb9:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80210ebd:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff80210ec4:	ff 00 00 
ffffffff80210ec7:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80210ece:	00 00 00 
ffffffff80210ed1:	48 01 f9             	add    %rdi,%rcx
ffffffff80210ed4:	4c 8b 01             	mov    (%rcx),%r8
ffffffff80210ed7:	4d 89 c3             	mov    %r8,%r11
ffffffff80210eda:	4d 21 cb             	and    %r9,%r11
ffffffff80210edd:	4d 39 d3             	cmp    %r10,%r11
ffffffff80210ee0:	0f 84 b3 0e 00 00    	je     ffffffff80211d99 <_RME_Svc_Handler+0x1129>
ffffffff80210ee6:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff80210eea:	49 83 f8 03          	cmp    $0x3,%r8
ffffffff80210eee:	0f 85 71 20 00 00    	jne    ffffffff80212f65 <_RME_Svc_Handler+0x22f5>
ffffffff80210ef4:	4c 8b 41 28          	mov    0x28(%rcx),%r8
ffffffff80210ef8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210efd:	4c 39 c0             	cmp    %r8,%rax
ffffffff80210f00:	0f 83 0e 26 00 00    	jae    ffffffff80213514 <_RME_Svc_Handler+0x28a4>
ffffffff80210f06:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210f0a:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80210f0e:	49 89 c4             	mov    %rax,%r12
ffffffff80210f11:	48 8b 00             	mov    (%rax),%rax
ffffffff80210f14:	49 21 c1             	and    %rax,%r9
ffffffff80210f17:	4d 39 d1             	cmp    %r10,%r9
ffffffff80210f1a:	0f 84 79 0e 00 00    	je     ffffffff80211d99 <_RME_Svc_Handler+0x1129>
ffffffff80210f20:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210f24:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80210f28:	0f 85 37 20 00 00    	jne    ffffffff80212f65 <_RME_Svc_Handler+0x22f5>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff80210f2e:	f6 c6 80             	test   $0x80,%dh
ffffffff80210f31:	0f 85 a9 1f 00 00    	jne    ffffffff80212ee0 <_RME_Svc_Handler+0x2270>
ffffffff80210f37:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80210f3a:	0f 83 d4 25 00 00    	jae    ffffffff80213514 <_RME_Svc_Handler+0x28a4>
ffffffff80210f40:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80210f47:	00 00 00 
ffffffff80210f4a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210f4e:	48 8d 2c 3a          	lea    (%rdx,%rdi,1),%rbp
ffffffff80210f52:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80210f59:	ff 00 00 
ffffffff80210f5c:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80210f60:	48 21 c2             	and    %rax,%rdx
ffffffff80210f63:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80210f66:	0f 84 2d 0e 00 00    	je     ffffffff80211d99 <_RME_Svc_Handler+0x1129>
ffffffff80210f6c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210f70:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80210f74:	0f 85 eb 1f 00 00    	jne    ffffffff80212f65 <_RME_Svc_Handler+0x22f5>
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80210f7a:	41 f6 44 24 10 80    	testb  $0x80,0x10(%r12)
ffffffff80210f80:	0f 84 be 25 00 00    	je     ffffffff80213544 <_RME_Svc_Handler+0x28d4>
    RME_CAP_CHECK(Thd_Src_Op,RME_THD_FLAG_XFER_SRC);
ffffffff80210f86:	f6 45 10 40          	testb  $0x40,0x10(%rbp)
ffffffff80210f8a:	0f 84 b4 25 00 00    	je     ffffffff80213544 <_RME_Svc_Handler+0x28d4>
    Local=RME_CPU_LOCAL();
ffffffff80210f90:	e8 aa a8 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Src=RME_CAP_GETOBJ(Thd_Src_Op,struct RME_Thd_Struct*);
ffffffff80210f95:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
    Local=RME_CPU_LOCAL();
ffffffff80210f99:	49 89 c6             	mov    %rax,%r14
    if(Thd_Src->Sched.Local!=Local)
ffffffff80210f9c:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff80210fa0:	0f 85 55 32 00 00    	jne    ffffffff802141fb <_RME_Svc_Handler+0x358b>
    if(Thd_Src->Sched.Slice==0U)
ffffffff80210fa6:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff80210faa:	48 85 c0             	test   %rax,%rax
ffffffff80210fad:	0f 84 48 32 00 00    	je     ffffffff802141fb <_RME_Svc_Handler+0x358b>
    Thd_Dst=RME_CAP_GETOBJ(Thd_Dst_Op,struct RME_Thd_Struct*);
ffffffff80210fb3:	49 8b 6c 24 18       	mov    0x18(%r12),%rbp
    if(Thd_Dst->Sched.Local!=Local)
ffffffff80210fb8:	4c 3b 75 28          	cmp    0x28(%rbp),%r14
ffffffff80210fbc:	0f 85 39 32 00 00    	jne    ffffffff802141fb <_RME_Svc_Handler+0x358b>
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80210fc2:	48 8b 75 48          	mov    0x48(%rbp),%rsi
ffffffff80210fc6:	48 39 77 48          	cmp    %rsi,0x48(%rdi)
ffffffff80210fca:	73 14                	jae    ffffffff80210fe0 <_RME_Svc_Handler+0x370>
ffffffff80210fcc:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff80210fd3:	ff ff 7f 
ffffffff80210fd6:	48 39 55 30          	cmp    %rdx,0x30(%rbp)
ffffffff80210fda:	0f 85 3f 32 00 00    	jne    ffffffff8021421f <_RME_Svc_Handler+0x35af>
    if(Thd_Src->Sched.Slice<RME_THD_INF_TIME)
ffffffff80210fe0:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80210fe7:	ff ff 7f 
ffffffff80210fea:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210fed:	0f 82 cd 1f 00 00    	jb     ffffffff80212fc0 <_RME_Svc_Handler+0x2350>
        if(Time>=RME_THD_INF_TIME)
ffffffff80210ff3:	4c 39 ea             	cmp    %r13,%rdx
ffffffff80210ff6:	0f 83 74 22 00 00    	jae    ffffffff80213270 <_RME_Svc_Handler+0x2600>
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80210ffc:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
ffffffff80211000:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211003:	0f 83 11 24 00 00    	jae    ffffffff8021341a <_RME_Svc_Handler+0x27aa>
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff80211009:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
ffffffff80211010:	00 
        if(Thd_Src->Sched.State==RME_THD_READY)
ffffffff80211011:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff80211016:	0f 84 df 22 00 00    	je     ffffffff802132fb <_RME_Svc_Handler+0x268b>
    __RME_Svc_Retval_Set(Reg,(rme_ret_t)(Thd_Dst->Sched.Slice));
ffffffff8021101c:	48 8b 75 30          	mov    0x30(%rbp),%rsi
ffffffff80211020:	48 89 df             	mov    %rbx,%rdi
ffffffff80211023:	e8 18 a0 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
    if(Thd_Dst->Sched.State==RME_THD_TIMEOUT)
ffffffff80211028:	48 83 7d 38 02       	cmpq   $0x2,0x38(%rbp)
ffffffff8021102d:	75 51                	jne    ffffffff80211080 <_RME_Svc_Handler+0x410>
    Prio=Thd->Sched.Prio;
ffffffff8021102f:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff80211033:	48 8b 45 28          	mov    0x28(%rbp),%rax
        Thd_Dst->Sched.State=RME_THD_READY;
ffffffff80211037:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff8021103e:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021103f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80211042:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80211046:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff8021104a:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff8021104f:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff80211053:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211058:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff8021105b:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021105f:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff80211063:	66 48 0f 6e e2       	movq   %rdx,%xmm4
ffffffff80211068:	66 0f 6c c4          	punpcklqdq %xmm4,%xmm0
ffffffff8021106c:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff80211070:	48 89 2a             	mov    %rbp,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211073:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80211078:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021107b:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
    _RME_Kern_High(Reg,Local);
ffffffff80211080:	4c 89 f6             	mov    %r14,%rsi
ffffffff80211083:	48 89 df             	mov    %rbx,%rdi
ffffffff80211086:	e8 e5 fa ff ff       	call   ffffffff80210b70 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021108b:	e9 88 fc ff ff       	jmp    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff80211090:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
ffffffff80211095:	4c 8b 7c 24 48       	mov    0x48(%rsp),%r15
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
ffffffff8021109a:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8021109f:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
ffffffff802110a4:	4c 89 e8             	mov    %r13,%rax
ffffffff802110a7:	45 89 fc             	mov    %r15d,%r12d
ffffffff802110aa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802110ae:	89 ca                	mov    %ecx,%edx
ffffffff802110b0:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
ffffffff802110b5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
ffffffff802110ba:	4c 89 f8             	mov    %r15,%rax
ffffffff802110bd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802110c1:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff802110c6:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff802110cb:	48 89 c8             	mov    %rcx,%rax
ffffffff802110ce:	48 c1 e8 20          	shr    $0x20,%rax
    if((Number==0U)||(Number>3U))
ffffffff802110d2:	4c 89 0c 24          	mov    %r9,(%rsp)
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff802110d6:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if((Number==0U)||(Number>3U))
ffffffff802110db:	49 8d 41 ff          	lea    -0x1(%r9),%rax
ffffffff802110df:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802110e3:	0f 87 07 24 00 00    	ja     ffffffff802134f0 <_RME_Svc_Handler+0x2880>
    Local=RME_CPU_LOCAL();
ffffffff802110e9:	e8 51 a7 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff802110ee:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
ffffffff802110f3:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
ffffffff802110f7:	4c 8b 0c 24          	mov    (%rsp),%r9
ffffffff802110fb:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    Local=RME_CPU_LOCAL();
ffffffff80211100:	49 89 c6             	mov    %rax,%r14
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80211103:	f6 c5 80             	test   $0x80,%ch
ffffffff80211106:	0f 85 9c 0c 00 00    	jne    ffffffff80211da8 <_RME_Svc_Handler+0x1138>
ffffffff8021110c:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8021110f:	0f 83 fe 30 00 00    	jae    ffffffff80214213 <_RME_Svc_Handler+0x35a3>
ffffffff80211115:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8021111c:	ff 00 00 
ffffffff8021111f:	48 89 d0             	mov    %rdx,%rax
ffffffff80211122:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80211126:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8021112d:	00 00 00 
ffffffff80211130:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211134:	48 01 d0             	add    %rdx,%rax
ffffffff80211137:	48 8b 30             	mov    (%rax),%rsi
ffffffff8021113a:	49 21 f2             	and    %rsi,%r10
ffffffff8021113d:	4d 39 da             	cmp    %r11,%r10
ffffffff80211140:	0f 84 66 1e 00 00    	je     ffffffff80212fac <_RME_Svc_Handler+0x233c>
ffffffff80211146:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021114a:	48 83 fe 06          	cmp    $0x6,%rsi
ffffffff8021114e:	0f 85 da 0c 00 00    	jne    ffffffff80211e2e <_RME_Svc_Handler+0x11be>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80211154:	f6 40 10 08          	testb  $0x8,0x10(%rax)
ffffffff80211158:	0f 84 63 30 00 00    	je     ffffffff802141c1 <_RME_Svc_Handler+0x3551>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff8021115e:	48 8b 68 18          	mov    0x18(%rax),%rbp
        if(Thread[Count]->Sched.Local!=Local)
ffffffff80211162:	4c 39 75 28          	cmp    %r14,0x28(%rbp)
ffffffff80211166:	0f 85 84 23 00 00    	jne    ffffffff802134f0 <_RME_Svc_Handler+0x2880>
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff8021116c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80211171:	48 39 45 48          	cmp    %rax,0x48(%rbp)
ffffffff80211175:	0f 82 3a 30 00 00    	jb     ffffffff802141b5 <_RME_Svc_Handler+0x3545>
    for(Count=0U;Count<Number;Count++)
ffffffff8021117b:	49 83 f9 01          	cmp    $0x1,%r9
ffffffff8021117f:	0f 84 75 2f 00 00    	je     ffffffff802140fa <_RME_Svc_Handler+0x348a>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80211185:	41 f7 c7 00 80 00 00 	test   $0x8000,%r15d
ffffffff8021118c:	0f 84 e6 1d 00 00    	je     ffffffff80212f78 <_RME_Svc_Handler+0x2308>
ffffffff80211192:	4c 89 e6             	mov    %r12,%rsi
ffffffff80211195:	48 c1 ee 10          	shr    $0x10,%rsi
ffffffff80211199:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8021119c:	0f 83 71 30 00 00    	jae    ffffffff80214213 <_RME_Svc_Handler+0x35a3>
ffffffff802111a2:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff802111a9:	ff 00 00 
ffffffff802111ac:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802111b0:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff802111b7:	00 00 00 
ffffffff802111ba:	48 01 d6             	add    %rdx,%rsi
ffffffff802111bd:	48 8b 06             	mov    (%rsi),%rax
ffffffff802111c0:	49 89 c4             	mov    %rax,%r12
ffffffff802111c3:	4d 21 d4             	and    %r10,%r12
ffffffff802111c6:	4d 39 dc             	cmp    %r11,%r12
ffffffff802111c9:	0f 84 dd 1d 00 00    	je     ffffffff80212fac <_RME_Svc_Handler+0x233c>
ffffffff802111cf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802111d3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802111d7:	0f 85 51 0c 00 00    	jne    ffffffff80211e2e <_RME_Svc_Handler+0x11be>
ffffffff802111dd:	4c 89 f8             	mov    %r15,%rax
ffffffff802111e0:	4c 8b 66 28          	mov    0x28(%rsi),%r12
ffffffff802111e4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802111e9:	4c 39 e0             	cmp    %r12,%rax
ffffffff802111ec:	0f 83 21 30 00 00    	jae    ffffffff80214213 <_RME_Svc_Handler+0x35a3>
ffffffff802111f2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802111f6:	48 03 46 18          	add    0x18(%rsi),%rax
ffffffff802111fa:	48 8b 30             	mov    (%rax),%rsi
ffffffff802111fd:	49 21 f2             	and    %rsi,%r10
ffffffff80211200:	4d 39 da             	cmp    %r11,%r10
ffffffff80211203:	0f 84 a3 1d 00 00    	je     ffffffff80212fac <_RME_Svc_Handler+0x233c>
ffffffff80211209:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021120d:	48 83 fe 06          	cmp    $0x6,%rsi
ffffffff80211211:	0f 85 17 0c 00 00    	jne    ffffffff80211e2e <_RME_Svc_Handler+0x11be>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80211217:	f6 40 10 08          	testb  $0x8,0x10(%rax)
ffffffff8021121b:	0f 84 a0 2f 00 00    	je     ffffffff802141c1 <_RME_Svc_Handler+0x3551>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff80211221:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211225:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
        if(Thread[Count]->Sched.Local!=Local)
ffffffff8021122a:	4c 3b 70 28          	cmp    0x28(%rax),%r14
ffffffff8021122e:	0f 85 bc 22 00 00    	jne    ffffffff802134f0 <_RME_Svc_Handler+0x2880>
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff80211234:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff80211239:	48 39 70 48          	cmp    %rsi,0x48(%rax)
ffffffff8021123d:	0f 82 72 2f 00 00    	jb     ffffffff802141b5 <_RME_Svc_Handler+0x3545>
    for(Count=0U;Count<Number;Count++)
ffffffff80211243:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff80211247:	75 7d                	jne    ffffffff802112c6 <_RME_Svc_Handler+0x656>
ffffffff80211249:	44 89 e8             	mov    %r13d,%eax
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8021124c:	41 f7 c5 00 80 00 00 	test   $0x8000,%r13d
ffffffff80211253:	0f 85 07 1e 00 00    	jne    ffffffff80213060 <_RME_Svc_Handler+0x23f0>
ffffffff80211259:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021125c:	0f 83 b1 2f 00 00    	jae    ffffffff80214213 <_RME_Svc_Handler+0x35a3>
ffffffff80211262:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80211269:	ff 00 00 
ffffffff8021126c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211270:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211277:	00 00 00 
ffffffff8021127a:	48 01 c2             	add    %rax,%rdx
ffffffff8021127d:	48 8b 02             	mov    (%rdx),%rax
ffffffff80211280:	48 21 c6             	and    %rax,%rsi
ffffffff80211283:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80211286:	0f 84 20 1d 00 00    	je     ffffffff80212fac <_RME_Svc_Handler+0x233c>
ffffffff8021128c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211290:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80211294:	0f 85 94 0b 00 00    	jne    ffffffff80211e2e <_RME_Svc_Handler+0x11be>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff8021129a:	f6 42 10 08          	testb  $0x8,0x10(%rdx)
ffffffff8021129e:	0f 84 1d 2f 00 00    	je     ffffffff802141c1 <_RME_Svc_Handler+0x3551>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff802112a4:	48 8b 42 18          	mov    0x18(%rdx),%rax
ffffffff802112a8:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
        if(Thread[Count]->Sched.Local!=Local)
ffffffff802112ad:	4c 3b 70 28          	cmp    0x28(%rax),%r14
ffffffff802112b1:	0f 85 39 22 00 00    	jne    ffffffff802134f0 <_RME_Svc_Handler+0x2880>
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff802112b7:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
ffffffff802112bc:	48 39 70 48          	cmp    %rsi,0x48(%rax)
ffffffff802112c0:	0f 82 ef 2e 00 00    	jb     ffffffff802141b5 <_RME_Svc_Handler+0x3545>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff802112c6:	31 f6                	xor    %esi,%esi
ffffffff802112c8:	48 89 df             	mov    %rbx,%rdi
ffffffff802112cb:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff802112d0:	48 89 0c 24          	mov    %rcx,(%rsp)
ffffffff802112d4:	e8 67 9d 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff802112d9:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
ffffffff802112de:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff802112e2:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
ffffffff802112e7:	0f 84 96 21 00 00    	je     ffffffff80213483 <_RME_Svc_Handler+0x2813>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff802112ed:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff802112f2:	48 89 45 40          	mov    %rax,0x40(%rbp)
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff802112f6:	48 8b 7c 24 68       	mov    0x68(%rsp),%rdi
ffffffff802112fb:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff80211300:	0f 84 4a 22 00 00    	je     ffffffff80213550 <_RME_Svc_Handler+0x28e0>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80211306:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffffff8021130b:	48 89 47 40          	mov    %rax,0x40(%rdi)
    for(Count=0U;Count<Number;Count++)
ffffffff8021130f:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff80211313:	0f 85 67 fd ff ff    	jne    ffffffff80211080 <_RME_Svc_Handler+0x410>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff80211319:	48 8b 7c 24 70       	mov    0x70(%rsp),%rdi
ffffffff8021131e:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff80211323:	0f 84 77 28 00 00    	je     ffffffff80213ba0 <_RME_Svc_Handler+0x2f30>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80211329:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff8021132e:	48 89 47 40          	mov    %rax,0x40(%rdi)
    _RME_Kern_High(Reg,Local);
ffffffff80211332:	e9 49 fd ff ff       	jmp    ffffffff80211080 <_RME_Svc_Handler+0x410>
ffffffff80211337:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021133e:	00 00 
            Retval=_RME_Thd_Exec_Set(Cpt,
ffffffff80211340:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
ffffffff80211345:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
ffffffff8021134a:	4c 8b 6c 24 48       	mov    0x48(%rsp),%r13
ffffffff8021134f:	4c 8b 74 24 40       	mov    0x40(%rsp),%r14
ffffffff80211354:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
ffffffff80211358:	48 8b 75 28          	mov    0x28(%rbp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8021135c:	f6 c4 80             	test   $0x80,%ah
ffffffff8021135f:	0f 84 1b 07 00 00    	je     ffffffff80211a80 <_RME_Svc_Handler+0xe10>
ffffffff80211365:	48 89 c2             	mov    %rax,%rdx
ffffffff80211368:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021136c:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021136f:	0f 83 f6 2d 00 00    	jae    ffffffff8021416b <_RME_Svc_Handler+0x34fb>
ffffffff80211375:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8021137c:	ff 00 00 
ffffffff8021137f:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80211383:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021138a:	00 00 00 
ffffffff8021138d:	48 01 ca             	add    %rcx,%rdx
ffffffff80211390:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80211393:	49 89 c8             	mov    %rcx,%r8
ffffffff80211396:	49 21 f8             	and    %rdi,%r8
ffffffff80211399:	49 39 f0             	cmp    %rsi,%r8
ffffffff8021139c:	0f 84 89 2e 00 00    	je     ffffffff8021422b <_RME_Svc_Handler+0x35bb>
ffffffff802113a2:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802113a6:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802113aa:	0f 85 11 07 00 00    	jne    ffffffff80211ac1 <_RME_Svc_Handler+0xe51>
ffffffff802113b0:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff802113b4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802113b9:	48 39 c8             	cmp    %rcx,%rax
ffffffff802113bc:	0f 83 a9 2d 00 00    	jae    ffffffff8021416b <_RME_Svc_Handler+0x34fb>
ffffffff802113c2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802113c6:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802113ca:	48 8b 08             	mov    (%rax),%rcx
ffffffff802113cd:	48 21 cf             	and    %rcx,%rdi
ffffffff802113d0:	48 39 f7             	cmp    %rsi,%rdi
ffffffff802113d3:	0f 84 52 2e 00 00    	je     ffffffff8021422b <_RME_Svc_Handler+0x35bb>
ffffffff802113d9:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802113dd:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff802113e1:	0f 85 da 06 00 00    	jne    ffffffff80211ac1 <_RME_Svc_Handler+0xe51>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff802113e7:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff802113eb:	0f 84 bf 24 00 00    	je     ffffffff802138b0 <_RME_Svc_Handler+0x2c40>
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff802113f1:	48 8b 68 18          	mov    0x18(%rax),%rbp
    Local=RME_CPU_LOCAL();
ffffffff802113f5:	e8 45 a4 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802113fa:	49 89 c7             	mov    %rax,%r15
    if(Thread->Sched.Local!=Local)
ffffffff802113fd:	48 3b 45 28          	cmp    0x28(%rbp),%rax
ffffffff80211401:	0f 85 a0 21 00 00    	jne    ffffffff802135a7 <_RME_Svc_Handler+0x2937>
    if((Entry!=RME_NULL)&&(Stack!=RME_NULL))
ffffffff80211407:	4d 85 f6             	test   %r14,%r14
ffffffff8021140a:	74 2b                	je     ffffffff80211437 <_RME_Svc_Handler+0x7c7>
ffffffff8021140c:	4d 85 ed             	test   %r13,%r13
ffffffff8021140f:	74 26                	je     ffffffff80211437 <_RME_Svc_Handler+0x7c7>
        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
ffffffff80211411:	4c 8b 85 90 00 00 00 	mov    0x90(%rbp),%r8
ffffffff80211418:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021141b:	4c 89 ea             	mov    %r13,%rdx
ffffffff8021141e:	4c 89 f6             	mov    %r14,%rsi
ffffffff80211421:	48 bf ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdi
ffffffff80211428:	ff ff 7f 
ffffffff8021142b:	48 23 bd 88 00 00 00 	and    0x88(%rbp),%rdi
ffffffff80211432:	e8 29 92 00 00       	call   ffffffff8021a660 <__RME_Thd_Reg_Init>
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80211437:	31 f6                	xor    %esi,%esi
ffffffff80211439:	48 89 df             	mov    %rbx,%rdi
ffffffff8021143c:	e8 ff 9b 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80211441:	48 83 7d 38 03       	cmpq   $0x3,0x38(%rbp)
ffffffff80211446:	0f 85 cc f8 ff ff    	jne    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
        if(Thread->Sched.Slice!=0U)
ffffffff8021144c:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff80211451:	0f 84 ae 1f 00 00    	je     ffffffff80213405 <_RME_Svc_Handler+0x2795>
    Prio=Thd->Sched.Prio;
ffffffff80211457:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff8021145b:	48 8b 45 28          	mov    0x28(%rbp),%rax
            Thread->Sched.State=RME_THD_READY;
ffffffff8021145f:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff80211466:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80211467:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021146a:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8021146e:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff80211472:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff80211477:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff8021147b:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211480:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff80211483:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211487:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff8021148b:	66 48 0f 6e ea       	movq   %rdx,%xmm5
ffffffff80211490:	66 0f 6c c5          	punpcklqdq %xmm5,%xmm0
ffffffff80211494:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff80211498:	48 89 2a             	mov    %rbp,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021149b:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802114a0:	48 d3 e2             	shl    %cl,%rdx
ffffffff802114a3:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        _RME_Kern_High(Reg,Local);
ffffffff802114a8:	4c 89 fe             	mov    %r15,%rsi
ffffffff802114ab:	48 89 df             	mov    %rbx,%rdi
ffffffff802114ae:	e8 bd f6 ff ff       	call   ffffffff80210b70 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802114b3:	e9 60 f8 ff ff       	jmp    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
ffffffff802114b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff802114bf:	00 
                                       (rme_cid_t)Param[0]);                /* rme_cid_t Cap_Thd */
ffffffff802114c0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
ffffffff802114c5:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
ffffffff802114c9:	48 8b 75 28          	mov    0x28(%rbp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802114cd:	f6 c4 80             	test   $0x80,%ah
ffffffff802114d0:	0f 85 8a 07 00 00    	jne    ffffffff80211c60 <_RME_Svc_Handler+0xff0>
ffffffff802114d6:	48 39 f0             	cmp    %rsi,%rax
ffffffff802114d9:	0f 83 80 2c 00 00    	jae    ffffffff8021415f <_RME_Svc_Handler+0x34ef>
ffffffff802114df:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802114e6:	ff 00 00 
ffffffff802114e9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802114ed:	48 8d 2c 08          	lea    (%rax,%rcx,1),%rbp
ffffffff802114f1:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff802114f8:	00 00 00 
ffffffff802114fb:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff802114ff:	48 21 c2             	and    %rax,%rdx
ffffffff80211502:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211505:	0f 84 c8 07 00 00    	je     ffffffff80211cd3 <_RME_Svc_Handler+0x1063>
ffffffff8021150b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021150f:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80211513:	0f 85 ef 1f 00 00    	jne    ffffffff80213508 <_RME_Svc_Handler+0x2898>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff80211519:	f6 45 10 10          	testb  $0x10,0x10(%rbp)
ffffffff8021151d:	0f 84 2d 21 00 00    	je     ffffffff80213650 <_RME_Svc_Handler+0x29e0>
    Local=RME_CPU_LOCAL();
ffffffff80211523:	e8 17 a3 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thread=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff80211528:	48 8b 6d 18          	mov    0x18(%rbp),%rbp
    Local=RME_CPU_LOCAL();
ffffffff8021152c:	49 89 c4             	mov    %rax,%r12
    if(Thread->Sched.Local!=Local)
ffffffff8021152f:	48 3b 45 28          	cmp    0x28(%rbp),%rax
ffffffff80211533:	0f 85 7a 20 00 00    	jne    ffffffff802135b3 <_RME_Svc_Handler+0x2943>
    if(Thread->Sched.Sched_Ref!=0U)
ffffffff80211539:	48 83 7d 60 00       	cmpq   $0x0,0x60(%rbp)
ffffffff8021153e:	0f 85 c3 2c 00 00    	jne    ffffffff80214207 <_RME_Svc_Handler+0x3597>
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
ffffffff80211544:	48 8b 45 68          	mov    0x68(%rbp),%rax
ffffffff80211548:	48 83 68 60 01       	subq   $0x1,0x60(%rax)
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
ffffffff8021154d:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff80211551:	48 8d 45 10          	lea    0x10(%rbp),%rax
ffffffff80211555:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211558:	74 18                	je     ffffffff80211572 <_RME_Svc_Handler+0x902>
        _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff8021155a:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    Head->Next=Head;
ffffffff8021155e:	66 48 0f 6e c0       	movq   %rax,%xmm0
ffffffff80211563:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    Next->Prev=Prev;
ffffffff80211567:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
    Prev->Next=Next;
ffffffff8021156b:	48 89 11             	mov    %rdx,(%rcx)
    Head->Next=Head;
ffffffff8021156e:	0f 11 45 10          	movups %xmm0,0x10(%rbp)
    if(Thread->Sched.Sched_Sig!=(void*)RME_NULL)
ffffffff80211572:	48 8b 45 70          	mov    0x70(%rbp),%rax
ffffffff80211576:	48 85 c0             	test   %rax,%rax
ffffffff80211579:	74 0d                	je     ffffffff80211588 <_RME_Svc_Handler+0x918>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021157b:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80211582:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80211588:	31 f6                	xor    %esi,%esi
ffffffff8021158a:	48 89 df             	mov    %rbx,%rdi
ffffffff8021158d:	e8 ae 9a 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_READY)
ffffffff80211592:	48 8b 45 38          	mov    0x38(%rbp),%rax
ffffffff80211596:	48 85 c0             	test   %rax,%rax
ffffffff80211599:	0f 84 41 1b 00 00    	je     ffffffff802130e0 <_RME_Svc_Handler+0x2470>
    else if(Thread->Sched.State==RME_THD_BLOCKED)
ffffffff8021159f:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802115a3:	0f 84 69 1d 00 00    	je     ffffffff80213312 <_RME_Svc_Handler+0x26a2>
    Thread->Sched.Slice=0U;
ffffffff802115a9:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff802115b0:	00 
    if(Local->Thd_Cur==Thread)
ffffffff802115b1:	49 3b 6c 24 08       	cmp    0x8(%r12),%rbp
ffffffff802115b6:	0f 84 84 1b 00 00    	je     ffffffff80213140 <_RME_Svc_Handler+0x24d0>
    RME_WRITE_RELEASE((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff802115bc:	48 c7 45 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rbp)
ffffffff802115c3:	ff 
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802115c4:	e9 4f f7 ff ff       	jmp    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
ffffffff802115c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                                RME_PARAM_D1(Param[0]),                     /* rme_ptr_t Sub_ID */
ffffffff802115d0:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
            Retval=_RME_Kfn_Act(Cpt,
ffffffff802115d5:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
ffffffff802115da:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
ffffffff802115df:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
ffffffff802115e4:	48 89 d6             	mov    %rdx,%rsi
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff802115e7:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
            Retval=_RME_Kfn_Act(Cpt,
ffffffff802115eb:	89 d2                	mov    %edx,%edx
ffffffff802115ed:	48 c1 ee 20          	shr    $0x20,%rsi
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff802115f1:	f6 c4 80             	test   $0x80,%ah
ffffffff802115f4:	0f 85 e6 06 00 00    	jne    ffffffff80211ce0 <_RME_Svc_Handler+0x1070>
ffffffff802115fa:	48 39 f8             	cmp    %rdi,%rax
ffffffff802115fd:	0f 83 2c 2b 00 00    	jae    ffffffff8021412f <_RME_Svc_Handler+0x34bf>
ffffffff80211603:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8021160a:	ff 00 00 
ffffffff8021160d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211611:	48 03 45 18          	add    0x18(%rbp),%rax
ffffffff80211615:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8021161c:	00 00 00 
ffffffff8021161f:	48 8b 08             	mov    (%rax),%rcx
ffffffff80211622:	48 21 cf             	and    %rcx,%rdi
ffffffff80211625:	4c 39 d7             	cmp    %r10,%rdi
ffffffff80211628:	0f 84 23 07 00 00    	je     ffffffff80211d51 <_RME_Svc_Handler+0x10e1>
ffffffff8021162e:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80211632:	48 83 f9 01          	cmp    $0x1,%rcx
ffffffff80211636:	0f 85 f0 1e 00 00    	jne    ffffffff8021352c <_RME_Svc_Handler+0x28bc>
                   struct RME_Cap_Kfn*,Kfn_Op,Type_Stat);    

    /* Check if the range of calling is allowed - kernel function specific */
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021163c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211640:	48 89 c1             	mov    %rax,%rcx
ffffffff80211643:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80211647:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8021164a:	0f 82 d0 1e 00 00    	jb     ffffffff80213520 <_RME_Svc_Handler+0x28b0>
       (Func_ID<RME_KFN_FLAG_LOW(Kfn_Op->Head.Flag)))
ffffffff80211650:	89 c0                	mov    %eax,%eax
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff80211652:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211655:	0f 82 c5 1e 00 00    	jb     ffffffff80213520 <_RME_Svc_Handler+0x28b0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Return whatever the function returns */
    return __RME_Kfn_Handler(Cpt,Reg,Func_ID,Sub_ID,Param1,Param2);
ffffffff8021165b:	48 89 f1             	mov    %rsi,%rcx
ffffffff8021165e:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211661:	48 89 de             	mov    %rbx,%rsi
ffffffff80211664:	e8 37 77 00 00       	call   ffffffff80218da0 <__RME_Kfn_Handler>
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff80211669:	48 85 c0             	test   %rax,%rax
ffffffff8021166c:	0f 89 a6 f6 ff ff    	jns    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
ffffffff80211672:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80211678:	48 89 c6             	mov    %rax,%rsi
ffffffff8021167b:	48 89 df             	mov    %rbx,%rdi
ffffffff8021167e:	e8 bd 99 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
ffffffff80211683:	e9 90 f6 ff ff       	jmp    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
ffffffff80211688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021168f:	00 
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Sig */
ffffffff80211690:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff80211695:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
ffffffff8021169a:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
ffffffff8021169e:	48 8b 75 28          	mov    0x28(%rbp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802116a2:	f6 c4 80             	test   $0x80,%ah
ffffffff802116a5:	0f 84 95 03 00 00    	je     ffffffff80211a40 <_RME_Svc_Handler+0xdd0>
ffffffff802116ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802116ae:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802116b2:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802116b5:	0f 83 80 2a 00 00    	jae    ffffffff8021413b <_RME_Svc_Handler+0x34cb>
ffffffff802116bb:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802116c2:	00 00 00 
ffffffff802116c5:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802116c9:	48 01 ca             	add    %rcx,%rdx
ffffffff802116cc:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802116d3:	ff 00 00 
ffffffff802116d6:	48 8b 32             	mov    (%rdx),%rsi
ffffffff802116d9:	49 89 f0             	mov    %rsi,%r8
ffffffff802116dc:	49 21 c8             	and    %rcx,%r8
ffffffff802116df:	49 39 f8             	cmp    %rdi,%r8
ffffffff802116e2:	0f 84 8d 03 00 00    	je     ffffffff80211a75 <_RME_Svc_Handler+0xe05>
ffffffff802116e8:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802116ec:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802116f0:	0f 85 42 1e 00 00    	jne    ffffffff80213538 <_RME_Svc_Handler+0x28c8>
ffffffff802116f6:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff802116fa:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802116ff:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211702:	0f 83 33 2a 00 00    	jae    ffffffff8021413b <_RME_Svc_Handler+0x34cb>
ffffffff80211708:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021170c:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211710:	48 89 c5             	mov    %rax,%rbp
ffffffff80211713:	48 8b 00             	mov    (%rax),%rax
ffffffff80211716:	48 21 c1             	and    %rax,%rcx
ffffffff80211719:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021171c:	0f 84 53 03 00 00    	je     ffffffff80211a75 <_RME_Svc_Handler+0xe05>
ffffffff80211722:	48 89 c2             	mov    %rax,%rdx
ffffffff80211725:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211729:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8021172d:	0f 85 05 1e 00 00    	jne    ffffffff80213538 <_RME_Svc_Handler+0x28c8>
    switch(Option)
ffffffff80211733:	49 83 fc 02          	cmp    $0x2,%r12
ffffffff80211737:	0f 84 73 1b 00 00    	je     ffffffff802132b0 <_RME_Svc_Handler+0x2640>
ffffffff8021173d:	0f 87 b5 19 00 00    	ja     ffffffff802130f8 <_RME_Svc_Handler+0x2488>
ffffffff80211743:	4d 85 e4             	test   %r12,%r12
ffffffff80211746:	0f 84 74 1b 00 00    	je     ffffffff802132c0 <_RME_Svc_Handler+0x2650>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BM);
ffffffff8021174c:	f6 45 10 04          	testb  $0x4,0x10(%rbp)
ffffffff80211750:	0f 84 b6 19 00 00    	je     ffffffff8021310c <_RME_Svc_Handler+0x249c>
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff80211756:	85 c0                	test   %eax,%eax
ffffffff80211758:	74 04                	je     ffffffff8021175e <_RME_Svc_Handler+0xaee>
ffffffff8021175a:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    if(Sig_Root->Thd!=(void*)RME_NULL)
ffffffff8021175e:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff80211763:	0f 85 86 1b 00 00    	jne    ffffffff802132ef <_RME_Svc_Handler+0x267f>
    Local=RME_CPU_LOCAL();
ffffffff80211769:	e8 d1 a0 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Cur=Local->Thd_Cur;
ffffffff8021176e:	48 8b 78 08          	mov    0x8(%rax),%rdi
    Local=RME_CPU_LOCAL();
ffffffff80211772:	49 89 c0             	mov    %rax,%r8
    if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80211775:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff8021177c:	ff ff 7f 
ffffffff8021177f:	48 39 47 30          	cmp    %rax,0x30(%rdi)
ffffffff80211783:	0f 84 d2 2a 00 00    	je     ffffffff8021425b <_RME_Svc_Handler+0x35eb>
    Old_Value=Sig_Root->Sig_Num;
ffffffff80211789:	48 8b 45 28          	mov    0x28(%rbp),%rax
    if(Old_Value>0U)
ffffffff8021178d:	48 85 c0             	test   %rax,%rax
ffffffff80211790:	0f 84 8a 18 00 00    	je     ffffffff80213020 <_RME_Svc_Handler+0x23b0>
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
ffffffff80211796:	49 f7 c4 fd ff ff ff 	test   $0xfffffffffffffffd,%r12
ffffffff8021179d:	0f 85 2d 1b 00 00    	jne    ffffffff802132d0 <_RME_Svc_Handler+0x2660>
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff802117a3:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802117a7:	f0 48 0f b1 55 28    	lock cmpxchg %rdx,0x28(%rbp)
ffffffff802117ad:	0f 94 c2             	sete   %dl
ffffffff802117b0:	84 d2                	test   %dl,%dl
ffffffff802117b2:	0f 84 2b 1b 00 00    	je     ffffffff802132e3 <_RME_Svc_Handler+0x2673>
            __RME_Svc_Retval_Set(Reg,1);
ffffffff802117b8:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802117bd:	48 89 df             	mov    %rbx,%rdi
ffffffff802117c0:	e8 7b 98 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802117c5:	e9 4e f5 ff ff       	jmp    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
ffffffff802117ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff802117d0:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
ffffffff802117d5:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
ffffffff802117d9:	48 8b 75 28          	mov    0x28(%rbp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802117dd:	f6 c4 80             	test   $0x80,%ah
ffffffff802117e0:	0f 85 fa 03 00 00    	jne    ffffffff80211be0 <_RME_Svc_Handler+0xf70>
ffffffff802117e6:	48 39 f0             	cmp    %rsi,%rax
ffffffff802117e9:	0f 83 58 29 00 00    	jae    ffffffff80214147 <_RME_Svc_Handler+0x34d7>
ffffffff802117ef:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802117f6:	ff 00 00 
ffffffff802117f9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802117fd:	48 8d 2c 08          	lea    (%rax,%rcx,1),%rbp
ffffffff80211801:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80211808:	00 00 00 
ffffffff8021180b:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8021180f:	48 21 c2             	and    %rax,%rdx
ffffffff80211812:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211815:	0f 84 38 04 00 00    	je     ffffffff80211c53 <_RME_Svc_Handler+0xfe3>
ffffffff8021181b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021181f:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80211823:	0f 85 d3 1c 00 00    	jne    ffffffff802134fc <_RME_Svc_Handler+0x288c>
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff80211829:	f6 45 10 01          	testb  $0x1,0x10(%rbp)
ffffffff8021182d:	0f 84 5d 24 00 00    	je     ffffffff80213c90 <_RME_Svc_Handler+0x3020>
    Local=RME_CPU_LOCAL();
ffffffff80211833:	e8 07 a0 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff80211838:	44 8b 6d 00          	mov    0x0(%rbp),%r13d
ffffffff8021183c:	45 85 ed             	test   %r13d,%r13d
ffffffff8021183f:	74 04                	je     ffffffff80211845 <_RME_Svc_Handler+0xbd5>
ffffffff80211841:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    Thd_Rcv=Sig_Root->Thd;
ffffffff80211845:	4c 8b 65 30          	mov    0x30(%rbp),%r12
    if(Thd_Rcv!=(void*)RME_NULL)
ffffffff80211849:	4d 85 e4             	test   %r12,%r12
ffffffff8021184c:	74 0b                	je     ffffffff80211859 <_RME_Svc_Handler+0xbe9>
        if(Thd_Rcv->Sched.Local==Local)
ffffffff8021184e:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
ffffffff80211853:	0f 84 ed 1a 00 00    	je     ffffffff80213346 <_RME_Svc_Handler+0x26d6>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80211859:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021185e:	f0 48 0f c1 45 28    	lock xadd %rax,0x28(%rbp)
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80211864:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff8021186b:	ff ff 7f 
ffffffff8021186e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211871:	0f 82 6a 28 00 00    	jb     ffffffff802140e1 <_RME_Svc_Handler+0x3471>
        __RME_Svc_Retval_Set(Reg,0);
ffffffff80211877:	31 f6                	xor    %esi,%esi
ffffffff80211879:	48 89 df             	mov    %rbx,%rdi
ffffffff8021187c:	e8 bf 97 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211881:	e9 92 f4 ff ff       	jmp    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
ffffffff80211886:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021188d:	00 00 00 
                            (rme_cid_t)Param[0],                            /* rme_cid_t Cap_Inv */
ffffffff80211890:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
        Retval=_RME_Inv_Act(Cpt,
ffffffff80211895:	4c 8b 64 24 48       	mov    0x48(%rsp),%r12
ffffffff8021189a:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff8021189e:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff802118a2:	f6 c4 80             	test   $0x80,%ah
ffffffff802118a5:	0f 84 45 01 00 00    	je     ffffffff802119f0 <_RME_Svc_Handler+0xd80>
ffffffff802118ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802118ae:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802118b2:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802118b5:	0f 83 1a 28 00 00    	jae    ffffffff802140d5 <_RME_Svc_Handler+0x3465>
ffffffff802118bb:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802118c2:	00 00 00 
ffffffff802118c5:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802118c9:	48 01 f2             	add    %rsi,%rdx
ffffffff802118cc:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802118d3:	ff 00 00 
ffffffff802118d6:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff802118d9:	49 89 c8             	mov    %rcx,%r8
ffffffff802118dc:	49 21 f0             	and    %rsi,%r8
ffffffff802118df:	49 39 f8             	cmp    %rdi,%r8
ffffffff802118e2:	0f 84 3b 01 00 00    	je     ffffffff80211a23 <_RME_Svc_Handler+0xdb3>
ffffffff802118e8:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802118ec:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802118f0:	0f 85 81 1b 00 00    	jne    ffffffff80213477 <_RME_Svc_Handler+0x2807>
ffffffff802118f6:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff802118fa:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802118ff:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211902:	0f 83 cd 27 00 00    	jae    ffffffff802140d5 <_RME_Svc_Handler+0x3465>
ffffffff80211908:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021190c:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211910:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211913:	48 21 d6             	and    %rdx,%rsi
ffffffff80211916:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80211919:	0f 84 04 01 00 00    	je     ffffffff80211a23 <_RME_Svc_Handler+0xdb3>
ffffffff8021191f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211923:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff80211927:	0f 85 4a 1b 00 00    	jne    ffffffff80213477 <_RME_Svc_Handler+0x2807>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8021192d:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80211931:	0f 84 72 28 00 00    	je     ffffffff802141a9 <_RME_Svc_Handler+0x3539>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff80211937:	4c 8b 68 18          	mov    0x18(%rax),%r13
    if(RME_UNLIKELY(Thd_Act!=(void*)0U))
ffffffff8021193b:	49 83 7d 18 00       	cmpq   $0x0,0x18(%r13)
ffffffff80211940:	0f 85 dc 1a 00 00    	jne    ffffffff80213422 <_RME_Svc_Handler+0x27b2>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff80211946:	e8 f4 9e ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021194b:	48 8b 68 08          	mov    0x8(%rax),%rbp
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021194f:	31 c0                	xor    %eax,%eax
ffffffff80211951:	f0 49 0f b1 6d 18    	lock cmpxchg %rbp,0x18(%r13)
ffffffff80211957:	0f 94 c0             	sete   %al
    if(RME_UNLIKELY(RME_COMP_SWAP((volatile rme_ptr_t*)&(Invocation->Thd_Act),
ffffffff8021195a:	84 c0                	test   %al,%al
ffffffff8021195c:	0f 84 c0 1a 00 00    	je     ffffffff80213422 <_RME_Svc_Handler+0x27b2>
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
ffffffff80211962:	49 8d 7d 38          	lea    0x38(%r13),%rdi
ffffffff80211966:	48 89 de             	mov    %rbx,%rsi
ffffffff80211969:	e8 52 8e 00 00       	call   ffffffff8021a7c0 <__RME_Inv_Reg_Save>
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021196e:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff80211975:	49 89 d8             	mov    %rbx,%r8
ffffffff80211978:	4c 89 e1             	mov    %r12,%rcx
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021197b:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff80211982:	48 bf ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdi
ffffffff80211989:	ff ff 7f 
    New->Next=Next;
ffffffff8021198c:	66 48 0f 6e ca       	movq   %rdx,%xmm1
ffffffff80211991:	66 48 0f 6e c0       	movq   %rax,%xmm0
    Next->Prev=New;
ffffffff80211996:	4c 89 68 08          	mov    %r13,0x8(%rax)
    New->Next=Next;
ffffffff8021199a:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff8021199e:	41 0f 11 45 00       	movups %xmm0,0x0(%r13)
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff802119a3:	48 23 bd 88 00 00 00 	and    0x88(%rbp),%rdi
    Thd_Cur->Ctx.Invstk_Depth++;
ffffffff802119aa:	48 83 85 a8 00 00 00 	addq   $0x1,0xa8(%rbp)
ffffffff802119b1:	01 
    Prev->Next=New;
ffffffff802119b2:	4c 89 ad 98 00 00 00 	mov    %r13,0x98(%rbp)
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff802119b9:	49 8b 55 28          	mov    0x28(%r13),%rdx
ffffffff802119bd:	49 8b 75 20          	mov    0x20(%r13),%rsi
ffffffff802119c1:	e8 9a 8c 00 00       	call   ffffffff8021a660 <__RME_Thd_Reg_Init>
    __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff802119c6:	49 8b 45 10          	mov    0x10(%r13),%rax
ffffffff802119ca:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff802119ce:	e8 cd 90 00 00       	call   ffffffff8021aaa0 <__RME_Pgt_Set>
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff802119d3:	e9 40 f3 ff ff       	jmp    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
    switch(Svc_Num)
ffffffff802119d8:	49 83 ec 0a          	sub    $0xa,%r12
ffffffff802119dc:	49 83 fc 17          	cmp    $0x17,%r12
ffffffff802119e0:	0f 87 67 1a 00 00    	ja     ffffffff8021344d <_RME_Svc_Handler+0x27dd>
ffffffff802119e6:	3e 42 ff 24 e5 b0 c7 	notrack jmp *-0x7fde3850(,%r12,8)
ffffffff802119ed:	21 80 
ffffffff802119ef:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff802119f0:	48 39 c8             	cmp    %rcx,%rax
ffffffff802119f3:	0f 83 dc 26 00 00    	jae    ffffffff802140d5 <_RME_Svc_Handler+0x3465>
ffffffff802119f9:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211a00:	ff 00 00 
ffffffff80211a03:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211a07:	48 01 f0             	add    %rsi,%rax
ffffffff80211a0a:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211a11:	00 00 00 
ffffffff80211a14:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211a17:	48 21 d1             	and    %rdx,%rcx
ffffffff80211a1a:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211a1d:	0f 85 fc fe ff ff    	jne    ffffffff8021191f <_RME_Svc_Handler+0xcaf>
ffffffff80211a23:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211a2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    __RME_Svc_Retval_Set(Reg,Retval);
ffffffff80211a30:	48 89 df             	mov    %rbx,%rdi
ffffffff80211a33:	e8 08 96 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
ffffffff80211a38:	e9 db f2 ff ff       	jmp    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
ffffffff80211a3d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80211a40:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211a43:	0f 83 f2 26 00 00    	jae    ffffffff8021413b <_RME_Svc_Handler+0x34cb>
ffffffff80211a49:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211a50:	ff 00 00 
ffffffff80211a53:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211a57:	48 8d 2c 08          	lea    (%rax,%rcx,1),%rbp
ffffffff80211a5b:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80211a62:	00 00 00 
ffffffff80211a65:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211a69:	48 21 c2             	and    %rax,%rdx
ffffffff80211a6c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211a6f:	0f 85 ad fc ff ff    	jne    ffffffff80211722 <_RME_Svc_Handler+0xab2>
ffffffff80211a75:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211a7c:	eb b2                	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80211a7e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211a80:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211a83:	0f 83 e2 26 00 00    	jae    ffffffff8021416b <_RME_Svc_Handler+0x34fb>
ffffffff80211a89:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211a90:	00 00 00 
ffffffff80211a93:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211a97:	48 01 c8             	add    %rcx,%rax
ffffffff80211a9a:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211aa1:	ff 00 00 
ffffffff80211aa4:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211aa7:	48 21 d1             	and    %rdx,%rcx
ffffffff80211aaa:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211aad:	0f 84 78 27 00 00    	je     ffffffff8021422b <_RME_Svc_Handler+0x35bb>
ffffffff80211ab3:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211ab7:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80211abb:	0f 84 26 f9 ff ff    	je     ffffffff802113e7 <_RME_Svc_Handler+0x777>
ffffffff80211ac1:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80211ac8:	e9 63 ff ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80211acd:	0f 1f 00             	nopl   (%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211ad0:	48 8b 45 28          	mov    0x28(%rbp),%rax
ffffffff80211ad4:	41 f7 c6 00 80 00 00 	test   $0x8000,%r14d
ffffffff80211adb:	0f 85 e7 16 00 00    	jne    ffffffff802131c8 <_RME_Svc_Handler+0x2558>
ffffffff80211ae1:	49 39 c6             	cmp    %rax,%r14
ffffffff80211ae4:	0f 83 4d 27 00 00    	jae    ffffffff80214237 <_RME_Svc_Handler+0x35c7>
ffffffff80211aea:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211af1:	ff 00 00 
ffffffff80211af4:	4c 89 f0             	mov    %r14,%rax
ffffffff80211af7:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211afe:	00 00 00 
ffffffff80211b01:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211b05:	48 03 45 18          	add    0x18(%rbp),%rax
ffffffff80211b09:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211b0c:	48 21 d1             	and    %rdx,%rcx
ffffffff80211b0f:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211b12:	0f 84 24 17 00 00    	je     ffffffff8021323c <_RME_Svc_Handler+0x25cc>
ffffffff80211b18:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211b1c:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80211b20:	0f 85 51 26 00 00    	jne    ffffffff80214177 <_RME_Svc_Handler+0x3507>
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff80211b26:	f6 40 11 01          	testb  $0x1,0x11(%rax)
ffffffff80211b2a:	0f 84 1f 27 00 00    	je     ffffffff8021424f <_RME_Svc_Handler+0x35df>
        Thd_New=RME_CAP_GETOBJ(Thd_Cap_New,struct RME_Thd_Struct*);
ffffffff80211b30:	48 8b 68 18          	mov    0x18(%rax),%rbp
        if(Thd_New->Sched.Local!=Local)
ffffffff80211b34:	4c 3b 65 28          	cmp    0x28(%rbp),%r12
ffffffff80211b38:	0f 85 15 26 00 00    	jne    ffffffff80214153 <_RME_Svc_Handler+0x34e3>
        if(Thd_Cur->Sched.Prio!=Thd_New->Sched.Prio)
ffffffff80211b3e:	48 8b 45 40          	mov    0x40(%rbp),%rax
ffffffff80211b42:	49 39 47 40          	cmp    %rax,0x40(%r15)
ffffffff80211b46:	0f 85 a3 26 00 00    	jne    ffffffff802141ef <_RME_Svc_Handler+0x357f>
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff80211b4c:	48 8b 45 38          	mov    0x38(%rbp),%rax
ffffffff80211b50:	48 83 e8 01          	sub    $0x1,%rax
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff80211b54:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211b58:	0f 86 f5 25 00 00    	jbe    ffffffff80214153 <_RME_Svc_Handler+0x34e3>
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80211b5e:	4d 85 ed             	test   %r13,%r13
ffffffff80211b61:	0f 84 78 f2 ff ff    	je     ffffffff80210ddf <_RME_Svc_Handler+0x16f>
ffffffff80211b67:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80211b6e:	ff ff 7f 
ffffffff80211b71:	49 3b 47 30          	cmp    0x30(%r15),%rax
ffffffff80211b75:	0f 82 64 f2 ff ff    	jb     ffffffff80210ddf <_RME_Svc_Handler+0x16f>
            Thd_Cur->Sched.Slice=0U;
ffffffff80211b7b:	49 c7 47 30 00 00 00 	movq   $0x0,0x30(%r15)
ffffffff80211b82:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80211b83:	4c 89 ff             	mov    %r15,%rdi
ffffffff80211b86:	e8 d5 ab ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80211b8b:	49 c7 47 38 02 00 00 	movq   $0x2,0x38(%r15)
ffffffff80211b92:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff80211b93:	e8 78 bf ff ff       	call   ffffffff8020db10 <_RME_Run_Notif>
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80211b98:	49 8b 44 24 20       	mov    0x20(%r12),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80211b9d:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80211ba1:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80211ba5:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80211ba8:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80211bac:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80211bb1:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80211bb5:	49 8b 44 04 08       	mov    0x8(%r12,%rax,1),%rax
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
ffffffff80211bba:	48 8b 70 40          	mov    0x40(%rax),%rsi
ffffffff80211bbe:	48 39 75 40          	cmp    %rsi,0x40(%rbp)
ffffffff80211bc2:	0f 82 66 18 00 00    	jb     ffffffff8021342e <_RME_Svc_Handler+0x27be>
ffffffff80211bc8:	49 39 ef             	cmp    %rbp,%r15
ffffffff80211bcb:	0f 84 5d 18 00 00    	je     ffffffff8021342e <_RME_Svc_Handler+0x27be>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80211bd1:	31 f6                	xor    %esi,%esi
ffffffff80211bd3:	48 89 df             	mov    %rbx,%rdi
ffffffff80211bd6:	e8 65 94 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
    if(Thd_Cur==Thd_New)
ffffffff80211bdb:	e9 12 f2 ff ff       	jmp    ffffffff80210df2 <_RME_Svc_Handler+0x182>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80211be0:	48 89 c2             	mov    %rax,%rdx
ffffffff80211be3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211be7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80211bea:	0f 83 57 25 00 00    	jae    ffffffff80214147 <_RME_Svc_Handler+0x34d7>
ffffffff80211bf0:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211bf7:	00 00 00 
ffffffff80211bfa:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80211bfe:	48 01 ca             	add    %rcx,%rdx
ffffffff80211c01:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211c08:	ff 00 00 
ffffffff80211c0b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80211c0e:	49 89 f0             	mov    %rsi,%r8
ffffffff80211c11:	49 21 c8             	and    %rcx,%r8
ffffffff80211c14:	49 39 f8             	cmp    %rdi,%r8
ffffffff80211c17:	74 3a                	je     ffffffff80211c53 <_RME_Svc_Handler+0xfe3>
ffffffff80211c19:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80211c1d:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80211c21:	0f 85 d5 18 00 00    	jne    ffffffff802134fc <_RME_Svc_Handler+0x288c>
ffffffff80211c27:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80211c2b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211c30:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211c33:	0f 83 0e 25 00 00    	jae    ffffffff80214147 <_RME_Svc_Handler+0x34d7>
ffffffff80211c39:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211c3d:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211c41:	48 89 c5             	mov    %rax,%rbp
ffffffff80211c44:	48 8b 00             	mov    (%rax),%rax
ffffffff80211c47:	48 21 c1             	and    %rax,%rcx
ffffffff80211c4a:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80211c4d:	0f 85 c8 fb ff ff    	jne    ffffffff8021181b <_RME_Svc_Handler+0xbab>
ffffffff80211c53:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211c5a:	e9 d1 fd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80211c5f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211c60:	48 89 c2             	mov    %rax,%rdx
ffffffff80211c63:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211c67:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80211c6a:	0f 83 ef 24 00 00    	jae    ffffffff8021415f <_RME_Svc_Handler+0x34ef>
ffffffff80211c70:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211c77:	00 00 00 
ffffffff80211c7a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80211c7e:	48 01 ca             	add    %rcx,%rdx
ffffffff80211c81:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211c88:	ff 00 00 
ffffffff80211c8b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80211c8e:	49 89 f0             	mov    %rsi,%r8
ffffffff80211c91:	49 21 c8             	and    %rcx,%r8
ffffffff80211c94:	49 39 f8             	cmp    %rdi,%r8
ffffffff80211c97:	74 3a                	je     ffffffff80211cd3 <_RME_Svc_Handler+0x1063>
ffffffff80211c99:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80211c9d:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80211ca1:	0f 85 61 18 00 00    	jne    ffffffff80213508 <_RME_Svc_Handler+0x2898>
ffffffff80211ca7:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80211cab:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211cb0:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211cb3:	0f 83 a6 24 00 00    	jae    ffffffff8021415f <_RME_Svc_Handler+0x34ef>
ffffffff80211cb9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211cbd:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211cc1:	48 89 c5             	mov    %rax,%rbp
ffffffff80211cc4:	48 8b 00             	mov    (%rax),%rax
ffffffff80211cc7:	48 21 c1             	and    %rax,%rcx
ffffffff80211cca:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80211ccd:	0f 85 38 f8 ff ff    	jne    ffffffff8021150b <_RME_Svc_Handler+0x89b>
ffffffff80211cd3:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211cda:	e9 51 fd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80211cdf:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80211ce0:	48 89 c1             	mov    %rax,%rcx
ffffffff80211ce3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80211ce7:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80211cea:	0f 83 3f 24 00 00    	jae    ffffffff8021412f <_RME_Svc_Handler+0x34bf>
ffffffff80211cf0:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80211cf7:	ff 00 00 
ffffffff80211cfa:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80211cfe:	48 03 4d 18          	add    0x18(%rbp),%rcx
ffffffff80211d02:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80211d09:	00 00 00 
ffffffff80211d0c:	4c 8b 19             	mov    (%rcx),%r11
ffffffff80211d0f:	4d 89 dc             	mov    %r11,%r12
ffffffff80211d12:	49 21 fc             	and    %rdi,%r12
ffffffff80211d15:	4d 39 d4             	cmp    %r10,%r12
ffffffff80211d18:	74 37                	je     ffffffff80211d51 <_RME_Svc_Handler+0x10e1>
ffffffff80211d1a:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff80211d1e:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff80211d22:	0f 85 04 18 00 00    	jne    ffffffff8021352c <_RME_Svc_Handler+0x28bc>
ffffffff80211d28:	4c 8b 59 28          	mov    0x28(%rcx),%r11
ffffffff80211d2c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211d31:	4c 39 d8             	cmp    %r11,%rax
ffffffff80211d34:	0f 83 f5 23 00 00    	jae    ffffffff8021412f <_RME_Svc_Handler+0x34bf>
ffffffff80211d3a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211d3e:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80211d42:	48 8b 08             	mov    (%rax),%rcx
ffffffff80211d45:	48 21 cf             	and    %rcx,%rdi
ffffffff80211d48:	4c 39 d7             	cmp    %r10,%rdi
ffffffff80211d4b:	0f 85 dd f8 ff ff    	jne    ffffffff8021162e <_RME_Svc_Handler+0x9be>
ffffffff80211d51:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211d58:	e9 1b f9 ff ff       	jmp    ffffffff80211678 <_RME_Svc_Handler+0xa08>
ffffffff80211d5d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80211d60:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211d63:	0f 83 ab 17 00 00    	jae    ffffffff80213514 <_RME_Svc_Handler+0x28a4>
ffffffff80211d69:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
ffffffff80211d6d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211d71:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211d78:	ff 00 00 
ffffffff80211d7b:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80211d82:	00 00 00 
ffffffff80211d85:	4c 8d 24 38          	lea    (%rax,%rdi,1),%r12
ffffffff80211d89:	49 8b 04 24          	mov    (%r12),%rax
ffffffff80211d8d:	48 21 c1             	and    %rax,%rcx
ffffffff80211d90:	4c 39 c1             	cmp    %r8,%rcx
ffffffff80211d93:	0f 85 87 f1 ff ff    	jne    ffffffff80210f20 <_RME_Svc_Handler+0x2b0>
ffffffff80211d99:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211da0:	e9 8b fc ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80211da5:	0f 1f 00             	nopl   (%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80211da8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211dac:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80211daf:	0f 83 5e 24 00 00    	jae    ffffffff80214213 <_RME_Svc_Handler+0x35a3>
ffffffff80211db5:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80211dbc:	ff 00 00 
ffffffff80211dbf:	48 89 d0             	mov    %rdx,%rax
ffffffff80211dc2:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80211dc6:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff80211dcd:	00 00 00 
ffffffff80211dd0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211dd4:	4c 8d 14 10          	lea    (%rax,%rdx,1),%r10
ffffffff80211dd8:	49 8b 02             	mov    (%r10),%rax
ffffffff80211ddb:	48 89 c5             	mov    %rax,%rbp
ffffffff80211dde:	48 21 f5             	and    %rsi,%rbp
ffffffff80211de1:	4c 39 dd             	cmp    %r11,%rbp
ffffffff80211de4:	0f 84 c2 11 00 00    	je     ffffffff80212fac <_RME_Svc_Handler+0x233c>
ffffffff80211dea:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211dee:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211df2:	75 3a                	jne    ffffffff80211e2e <_RME_Svc_Handler+0x11be>
ffffffff80211df4:	48 89 c8             	mov    %rcx,%rax
ffffffff80211df7:	49 8b 6a 28          	mov    0x28(%r10),%rbp
ffffffff80211dfb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211e00:	48 39 e8             	cmp    %rbp,%rax
ffffffff80211e03:	0f 83 0a 24 00 00    	jae    ffffffff80214213 <_RME_Svc_Handler+0x35a3>
ffffffff80211e09:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211e0d:	49 03 42 18          	add    0x18(%r10),%rax
ffffffff80211e11:	4c 8b 10             	mov    (%rax),%r10
ffffffff80211e14:	4c 21 d6             	and    %r10,%rsi
ffffffff80211e17:	4c 39 de             	cmp    %r11,%rsi
ffffffff80211e1a:	0f 84 8c 11 00 00    	je     ffffffff80212fac <_RME_Svc_Handler+0x233c>
ffffffff80211e20:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80211e24:	49 83 fa 06          	cmp    $0x6,%r10
ffffffff80211e28:	0f 84 26 f3 ff ff    	je     ffffffff80211154 <_RME_Svc_Handler+0x4e4>
ffffffff80211e2e:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80211e35:	e9 f6 fb ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            Retval=_RME_Inv_Del(Cpt,
ffffffff80211e3a:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Inv */
ffffffff80211e3f:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff80211e44:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff80211e48:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80211e4c:	f6 c4 80             	test   $0x80,%ah
ffffffff80211e4f:	0f 85 67 1a 00 00    	jne    ffffffff802138bc <_RME_Svc_Handler+0x2c4c>
ffffffff80211e55:	48 39 f8             	cmp    %rdi,%rax
ffffffff80211e58:	0f 83 a0 26 00 00    	jae    ffffffff802144fe <_RME_Svc_Handler+0x388e>
ffffffff80211e5e:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211e65:	00 00 00 
ffffffff80211e68:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211e6c:	48 01 f0             	add    %rsi,%rax
ffffffff80211e6f:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80211e76:	ff 00 00 
ffffffff80211e79:	48 8b 08             	mov    (%rax),%rcx
ffffffff80211e7c:	48 21 ce             	and    %rcx,%rsi
ffffffff80211e7f:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80211e82:	0f 84 e0 29 00 00    	je     ffffffff80214868 <_RME_Svc_Handler+0x3bf8>
ffffffff80211e88:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80211e8c:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80211e90:	0f 85 c6 29 00 00    	jne    ffffffff8021485c <_RME_Svc_Handler+0x3bec>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80211e96:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80211e9a:	0f 84 f8 29 00 00    	je     ffffffff80214898 <_RME_Svc_Handler+0x3c28>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff80211ea0:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80211ea4:	0f 83 e2 29 00 00    	jae    ffffffff8021488c <_RME_Svc_Handler+0x3c1c>
ffffffff80211eaa:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80211eae:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff80211eb2:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211eb9:	00 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff80211ebc:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff80211ebf:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211ec6:	ff 00 00 
ffffffff80211ec9:	48 8b 01             	mov    (%rcx),%rax
ffffffff80211ecc:	48 21 c2             	and    %rax,%rdx
ffffffff80211ecf:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80211ed2:	0f 85 a8 29 00 00    	jne    ffffffff80214880 <_RME_Svc_Handler+0x3c10>
ffffffff80211ed8:	48 89 c2             	mov    %rax,%rdx
ffffffff80211edb:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211edf:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff80211ee3:	0f 85 8b 29 00 00    	jne    ffffffff80214874 <_RME_Svc_Handler+0x3c04>
ffffffff80211ee9:	48 8b 71 20          	mov    0x20(%rcx),%rsi
ffffffff80211eed:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80211ef2:	48 29 f2             	sub    %rsi,%rdx
ffffffff80211ef5:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80211ef9:	0f 86 d3 24 00 00    	jbe    ffffffff802143d2 <_RME_Svc_Handler+0x3762>
ffffffff80211eff:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff80211f03:	48 85 d2             	test   %rdx,%rdx
ffffffff80211f06:	0f 85 a4 24 00 00    	jne    ffffffff802143b0 <_RME_Svc_Handler+0x3740>
    Invocation=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
ffffffff80211f0c:	48 8b 79 18          	mov    0x18(%rcx),%rdi
    if(Invocation->Thd_Act!=(void*)RME_NULL)
ffffffff80211f10:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
ffffffff80211f15:	0f 85 6d 23 00 00    	jne    ffffffff80214288 <_RME_Svc_Handler+0x3618>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80211f1b:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80211f20:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Inv_Del,Type_Stat);
ffffffff80211f23:	84 d2                	test   %dl,%dl
ffffffff80211f25:	0f 84 22 15 00 00    	je     ffffffff8021344d <_RME_Svc_Handler+0x27dd>
    RME_FETCH_ADD(&(Invocation->Prc->Head.Root_Ref), -1);
ffffffff80211f2b:	48 8b 47 10          	mov    0x10(%rdi),%rax
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80211f2f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80211f36:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
ffffffff80211f3c:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff80211f41:	e8 3a e0 ff ff       	call   ffffffff8020ff80 <_RME_Kot_Erase>
    return 0;
ffffffff80211f46:	31 f6                	xor    %esi,%esi
ffffffff80211f48:	e9 e3 fa ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff80211f4d:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
            Retval=_RME_Inv_Crt(Cpt,
ffffffff80211f52:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80211f56:	48 8b 75 28          	mov    0x28(%rbp),%rsi
ffffffff80211f5a:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
ffffffff80211f5e:	ff 74 24 58          	push   0x58(%rsp)
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80211f62:	4c 89 c1             	mov    %r8,%rcx
            Retval=_RME_Inv_Crt(Cpt,
ffffffff80211f65:	4c 8b 4c 24 58       	mov    0x58(%rsp),%r9
ffffffff80211f6a:	45 89 c0             	mov    %r8d,%r8d
ffffffff80211f6d:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80211f72:	48 c1 e9 20          	shr    $0x20,%rcx
            Retval=_RME_Inv_Crt(Cpt,
ffffffff80211f76:	e8 55 dc ff ff       	call   ffffffff8020fbd0 <_RME_Inv_Crt.isra.0>
ffffffff80211f7b:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80211f7e:	58                   	pop    %rax
ffffffff80211f7f:	5a                   	pop    %rdx
ffffffff80211f80:	e9 ab fa ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            Retval=_RME_Sig_Del(Cpt,
ffffffff80211f85:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff80211f8a:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff80211f8f:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff80211f93:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80211f97:	f6 c4 80             	test   $0x80,%ah
ffffffff80211f9a:	0f 85 1f 16 00 00    	jne    ffffffff802135bf <_RME_Svc_Handler+0x294f>
ffffffff80211fa0:	48 39 f8             	cmp    %rdi,%rax
ffffffff80211fa3:	0f 83 bf 23 00 00    	jae    ffffffff80214368 <_RME_Svc_Handler+0x36f8>
ffffffff80211fa9:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211fb0:	00 00 00 
ffffffff80211fb3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211fb7:	48 01 f0             	add    %rsi,%rax
ffffffff80211fba:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80211fc1:	ff 00 00 
ffffffff80211fc4:	48 8b 08             	mov    (%rax),%rcx
ffffffff80211fc7:	48 21 ce             	and    %rcx,%rsi
ffffffff80211fca:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80211fcd:	0f 84 7d 28 00 00    	je     ffffffff80214850 <_RME_Svc_Handler+0x3be0>
ffffffff80211fd3:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80211fd7:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80211fdb:	0f 85 63 28 00 00    	jne    ffffffff80214844 <_RME_Svc_Handler+0x3bd4>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80211fe1:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80211fe5:	0f 84 27 26 00 00    	je     ffffffff80214612 <_RME_Svc_Handler+0x39a2>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff80211feb:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80211fef:	0f 83 11 26 00 00    	jae    ffffffff80214606 <_RME_Svc_Handler+0x3996>
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80211ff5:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211ffc:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff80211fff:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212003:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80212007:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021200e:	00 00 00 
ffffffff80212011:	48 8b 02             	mov    (%rdx),%rax
ffffffff80212014:	48 21 c1             	and    %rax,%rcx
ffffffff80212017:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021201a:	0f 85 da 25 00 00    	jne    ffffffff802145fa <_RME_Svc_Handler+0x398a>
ffffffff80212020:	48 89 c1             	mov    %rax,%rcx
ffffffff80212023:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212027:	48 83 f9 08          	cmp    $0x8,%rcx
ffffffff8021202b:	0f 85 bd 25 00 00    	jne    ffffffff802145ee <_RME_Svc_Handler+0x397e>
ffffffff80212031:	48 8b 72 20          	mov    0x20(%rdx),%rsi
ffffffff80212035:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff8021203a:	48 29 f1             	sub    %rsi,%rcx
ffffffff8021203d:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff80212041:	0f 86 be 22 00 00    	jbe    ffffffff80214305 <_RME_Svc_Handler+0x3695>
ffffffff80212047:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff8021204b:	48 85 c9             	test   %rcx,%rcx
ffffffff8021204e:	0f 85 90 22 00 00    	jne    ffffffff802142e4 <_RME_Svc_Handler+0x3674>
    if(Sig_Del->Thd!=(void*)0U)
ffffffff80212054:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
ffffffff80212058:	48 85 c9             	test   %rcx,%rcx
ffffffff8021205b:	0f 85 06 22 00 00    	jne    ffffffff80214267 <_RME_Svc_Handler+0x35f7>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212061:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80212066:	0f 94 c1             	sete   %cl
    RME_CAP_DELETE(Sig_Del,Type_Stat);
ffffffff80212069:	80 f9 01             	cmp    $0x1,%cl
ffffffff8021206c:	48 19 f6             	sbb    %rsi,%rsi
ffffffff8021206f:	e9 bc f9 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            Retval=_RME_Sig_Crt(Cpt,
ffffffff80212074:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff80212079:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff8021207e:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff80212082:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212086:	f6 c4 80             	test   $0x80,%ah
ffffffff80212089:	0f 85 81 1a 00 00    	jne    ffffffff80213b10 <_RME_Svc_Handler+0x2ea0>
ffffffff8021208f:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212092:	0f 83 0e 25 00 00    	jae    ffffffff802145a6 <_RME_Svc_Handler+0x3936>
ffffffff80212098:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021209f:	00 00 00 
ffffffff802120a2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802120a6:	48 01 f0             	add    %rsi,%rax
ffffffff802120a9:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802120b0:	ff 00 00 
ffffffff802120b3:	48 8b 08             	mov    (%rax),%rcx
ffffffff802120b6:	48 21 ce             	and    %rcx,%rsi
ffffffff802120b9:	48 39 fe             	cmp    %rdi,%rsi
ffffffff802120bc:	0f 84 d8 24 00 00    	je     ffffffff8021459a <_RME_Svc_Handler+0x392a>
ffffffff802120c2:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802120c6:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802120ca:	0f 85 be 24 00 00    	jne    ffffffff8021458e <_RME_Svc_Handler+0x391e>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802120d0:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff802120d4:	0f 84 a9 29 00 00    	je     ffffffff80214a83 <_RME_Svc_Handler+0x3e13>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff802120da:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff802120de:	0f 83 93 29 00 00    	jae    ffffffff80214a77 <_RME_Svc_Handler+0x3e07>
ffffffff802120e4:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff802120eb:	00 00 00 
ffffffff802120ee:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802120f2:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff802120f6:	31 c0                	xor    %eax,%eax
ffffffff802120f8:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802120fd:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80212100:	84 c9                	test   %cl,%cl
ffffffff80212102:	0f 84 ec 0a 00 00    	je     ffffffff80212bf4 <_RME_Svc_Handler+0x1f84>
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80212108:	48 b8 00 00 00 00 00 	movabs $0x8000000000000,%rax
ffffffff8021210f:	00 08 00 
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80212112:	48 c7 42 20 01 00 00 	movq   $0x1,0x20(%rdx)
ffffffff80212119:	00 
    return 0;
ffffffff8021211a:	31 f6                	xor    %esi,%esi
    Sig_Crt->Head.Root_Ref=0U;
ffffffff8021211c:	48 c7 42 08 00 00 00 	movq   $0x0,0x8(%rdx)
ffffffff80212123:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80212124:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff8021212b:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff8021212c:	48 c7 42 10 3f 00 00 	movq   $0x3f,0x10(%rdx)
ffffffff80212133:	00 
    Sig_Crt->Sig_Num=0U;
ffffffff80212134:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
ffffffff8021213b:	00 
    Sig_Crt->Thd=0U;
ffffffff8021213c:	48 c7 42 30 00 00 00 	movq   $0x0,0x30(%rdx)
ffffffff80212143:	00 
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80212144:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff80212147:	e9 e4 f8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                      (rme_cid_t)Param[0]);                 /* rme_cid_t Cap_Thd */
ffffffff8021214c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
ffffffff80212151:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
ffffffff80212155:	48 8b 75 28          	mov    0x28(%rbp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80212159:	f6 c4 80             	test   $0x80,%ah
ffffffff8021215c:	0f 85 ee 17 00 00    	jne    ffffffff80213950 <_RME_Svc_Handler+0x2ce0>
ffffffff80212162:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212165:	0f 83 a5 27 00 00    	jae    ffffffff80214910 <_RME_Svc_Handler+0x3ca0>
ffffffff8021216b:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212172:	00 00 00 
ffffffff80212175:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212179:	48 01 c8             	add    %rcx,%rax
ffffffff8021217c:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212183:	ff 00 00 
ffffffff80212186:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212189:	48 21 d1             	and    %rdx,%rcx
ffffffff8021218c:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021218f:	0f 84 6f 27 00 00    	je     ffffffff80214904 <_RME_Svc_Handler+0x3c94>
ffffffff80212195:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212199:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8021219d:	0f 85 55 27 00 00    	jne    ffffffff802148f8 <_RME_Svc_Handler+0x3c88>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff802121a3:	f6 40 10 20          	testb  $0x20,0x10(%rax)
ffffffff802121a7:	0f 84 13 21 00 00    	je     ffffffff802142c0 <_RME_Svc_Handler+0x3650>
    Scheduler=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff802121ad:	48 8b 68 18          	mov    0x18(%rax),%rbp
    if(Scheduler->Sched.Local!=RME_CPU_LOCAL())
ffffffff802121b1:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff802121b5:	e8 85 96 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802121ba:	49 39 c4             	cmp    %rax,%r12
ffffffff802121bd:	0f 85 f1 20 00 00    	jne    ffffffff802142b4 <_RME_Svc_Handler+0x3644>
    if(Scheduler->Sched.Event.Next==&(Scheduler->Sched.Event))
ffffffff802121c3:	48 8b 55 78          	mov    0x78(%rbp),%rdx
ffffffff802121c7:	48 83 c5 78          	add    $0x78,%rbp
ffffffff802121cb:	48 39 ea             	cmp    %rbp,%rdx
ffffffff802121ce:	0f 84 04 21 00 00    	je     ffffffff802142d8 <_RME_Svc_Handler+0x3668>
    _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff802121d4:	48 8b 42 08          	mov    0x8(%rdx),%rax
ffffffff802121d8:	48 8b 0a             	mov    (%rdx),%rcx
    Head->Next=Head;
ffffffff802121db:	66 48 0f 6e c2       	movq   %rdx,%xmm0
ffffffff802121e0:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    Next->Prev=Prev;
ffffffff802121e4:	48 89 41 08          	mov    %rax,0x8(%rcx)
    Prev->Next=Next;
ffffffff802121e8:	48 89 08             	mov    %rcx,(%rax)
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff802121eb:	48 8b 42 28          	mov    0x28(%rdx),%rax
    Head->Next=Head;
ffffffff802121ef:	0f 11 02             	movups %xmm0,(%rdx)
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff802121f2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802121f6:	0f 84 d1 1f 00 00    	je     ffffffff802141cd <_RME_Svc_Handler+0x355d>
    else if(Thread->Sched.State==RME_THD_TIMEOUT)
ffffffff802121fc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212200:	0f 94 c0             	sete   %al
ffffffff80212203:	0f b6 c0             	movzbl %al,%eax
ffffffff80212206:	48 c1 e0 3d          	shl    $0x3d,%rax
    return (rme_ret_t)(Thread->Sched.TID|Flag);
ffffffff8021220a:	48 0b 42 10          	or     0x10(%rdx),%rax
ffffffff8021220e:	48 89 c6             	mov    %rax,%rsi
ffffffff80212211:	e9 1a f8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff80212216:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Cpt */
ffffffff8021221b:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
ffffffff80212220:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff80212224:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80212228:	f6 c4 80             	test   $0x80,%ah
ffffffff8021222b:	0f 85 47 18 00 00    	jne    ffffffff80213a78 <_RME_Svc_Handler+0x2e08>
ffffffff80212231:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212234:	0f 83 e8 22 00 00    	jae    ffffffff80214522 <_RME_Svc_Handler+0x38b2>
ffffffff8021223a:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80212241:	ff 00 00 
ffffffff80212244:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212248:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8021224f:	00 00 00 
ffffffff80212252:	48 8d 0c 30          	lea    (%rax,%rsi,1),%rcx
ffffffff80212256:	48 8b 01             	mov    (%rcx),%rax
ffffffff80212259:	49 21 c0             	and    %rax,%r8
ffffffff8021225c:	4d 39 c8             	cmp    %r9,%r8
ffffffff8021225f:	0f 84 b1 22 00 00    	je     ffffffff80214516 <_RME_Svc_Handler+0x38a6>
ffffffff80212265:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212269:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021226d:	0f 85 f3 23 00 00    	jne    ffffffff80214666 <_RME_Svc_Handler+0x39f6>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212273:	f6 c6 80             	test   $0x80,%dh
ffffffff80212276:	0f 85 fc 1c 00 00    	jne    ffffffff80213f78 <_RME_Svc_Handler+0x3308>
ffffffff8021227c:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8021227f:	0f 83 d5 23 00 00    	jae    ffffffff8021465a <_RME_Svc_Handler+0x39ea>
ffffffff80212285:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021228c:	00 00 00 
ffffffff8021228f:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212293:	48 01 f2             	add    %rsi,%rdx
ffffffff80212296:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8021229d:	ff 00 00 
ffffffff802122a0:	48 8b 02             	mov    (%rdx),%rax
ffffffff802122a3:	48 21 c6             	and    %rax,%rsi
ffffffff802122a6:	48 39 fe             	cmp    %rdi,%rsi
ffffffff802122a9:	0f 84 9f 23 00 00    	je     ffffffff8021464e <_RME_Svc_Handler+0x39de>
ffffffff802122af:	48 89 c6             	mov    %rax,%rsi
ffffffff802122b2:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802122b6:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802122ba:	0f 85 7a 22 00 00    	jne    ffffffff8021453a <_RME_Svc_Handler+0x38ca>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
ffffffff802122c0:	f6 41 10 04          	testb  $0x4,0x10(%rcx)
ffffffff802122c4:	0f 84 64 22 00 00    	je     ffffffff8021452e <_RME_Svc_Handler+0x38be>
    RME_CAP_CHECK(Cpt_New,RME_CPT_FLAG_PRC_CPT);
ffffffff802122ca:	f6 42 10 80          	testb  $0x80,0x10(%rdx)
ffffffff802122ce:	0f 84 da 23 00 00    	je     ffffffff802146ae <_RME_Svc_Handler+0x3a3e>
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
ffffffff802122d4:	85 c0                	test   %eax,%eax
ffffffff802122d6:	74 04                	je     ffffffff802122dc <_RME_Svc_Handler+0x166c>
ffffffff802122d8:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    Cpt_Old=Prc_Op->Cpt;
ffffffff802122dc:	48 8b 41 28          	mov    0x28(%rcx),%rax
ffffffff802122e0:	f0 48 0f b1 51 28    	lock cmpxchg %rdx,0x28(%rcx)
ffffffff802122e6:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Cpt)),
ffffffff802122ea:	40 84 f6             	test   %sil,%sil
ffffffff802122ed:	0f 84 d9 07 00 00    	je     ffffffff80212acc <_RME_Svc_Handler+0x1e5c>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802122f3:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff802122f8:	f0 48 0f c1 4a 08    	lock xadd %rcx,0x8(%rdx)
ffffffff802122fe:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212305:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    return 0;
ffffffff8021230b:	31 f6                	xor    %esi,%esi
ffffffff8021230d:	e9 1e f7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            Retval=_RME_Prc_Del(Cpt,
ffffffff80212312:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Prc */
ffffffff80212317:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff8021231c:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff80212320:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212324:	f6 c4 80             	test   $0x80,%ah
ffffffff80212327:	0f 85 eb 14 00 00    	jne    ffffffff80213818 <_RME_Svc_Handler+0x2ba8>
ffffffff8021232d:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212330:	0f 83 51 29 00 00    	jae    ffffffff80214c87 <_RME_Svc_Handler+0x4017>
ffffffff80212336:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021233d:	00 00 00 
ffffffff80212340:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212344:	48 01 f0             	add    %rsi,%rax
ffffffff80212347:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8021234e:	ff 00 00 
ffffffff80212351:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212354:	48 21 ce             	and    %rcx,%rsi
ffffffff80212357:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8021235a:	0f 84 1b 29 00 00    	je     ffffffff80214c7b <_RME_Svc_Handler+0x400b>
ffffffff80212360:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212364:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212368:	0f 85 01 29 00 00    	jne    ffffffff80214c6f <_RME_Svc_Handler+0x3fff>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021236e:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212372:	0f 84 8a 20 00 00    	je     ffffffff80214402 <_RME_Svc_Handler+0x3792>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff80212378:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021237c:	0f 83 74 20 00 00    	jae    ffffffff802143f6 <_RME_Svc_Handler+0x3786>
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff80212382:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212389:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff8021238c:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212390:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff80212394:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021239b:	00 00 00 
ffffffff8021239e:	48 8b 02             	mov    (%rdx),%rax
ffffffff802123a1:	48 21 c1             	and    %rax,%rcx
ffffffff802123a4:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802123a7:	0f 85 3d 20 00 00    	jne    ffffffff802143ea <_RME_Svc_Handler+0x377a>
ffffffff802123ad:	48 89 c1             	mov    %rax,%rcx
ffffffff802123b0:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802123b4:	48 83 f9 05          	cmp    $0x5,%rcx
ffffffff802123b8:	0f 85 20 20 00 00    	jne    ffffffff802143de <_RME_Svc_Handler+0x376e>
ffffffff802123be:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff802123c3:	48 2b 4a 20          	sub    0x20(%rdx),%rcx
ffffffff802123c7:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff802123cb:	0f 86 5b 1f 00 00    	jbe    ffffffff8021432c <_RME_Svc_Handler+0x36bc>
ffffffff802123d1:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
ffffffff802123d6:	0f 85 35 1f 00 00    	jne    ffffffff80214311 <_RME_Svc_Handler+0x36a1>
    Prc_Cpt=Prc_Del->Cpt;
ffffffff802123dc:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
    Prc_Pgt=Prc_Del->Pgt;
ffffffff802123e0:	48 8b 72 30          	mov    0x30(%rdx),%rsi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802123e4:	31 c9                	xor    %ecx,%ecx
ffffffff802123e6:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802123eb:	0f 94 c1             	sete   %cl
    RME_CAP_DELETE(Prc_Del,Type_Stat);
ffffffff802123ee:	84 c9                	test   %cl,%cl
ffffffff802123f0:	0f 84 57 10 00 00    	je     ffffffff8021344d <_RME_Svc_Handler+0x27dd>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802123f6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802123fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80212400:	f0 48 0f c1 57 08    	lock xadd %rdx,0x8(%rdi)
ffffffff80212406:	f0 48 0f c1 46 08    	lock xadd %rax,0x8(%rsi)
    return 0;
ffffffff8021240c:	31 f6                	xor    %esi,%esi
ffffffff8021240e:	e9 1d f6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            Retval=_RME_Prc_Crt(Cpt,
ffffffff80212413:	48 8b 75 28          	mov    0x28(%rbp),%rsi
ffffffff80212417:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
ffffffff8021241b:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
ffffffff80212420:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
ffffffff80212425:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
ffffffff8021242a:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
ffffffff8021242f:	e8 cc a8 ff ff       	call   ffffffff8020cd00 <_RME_Prc_Crt.isra.0>
ffffffff80212434:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212437:	e9 f4 f5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
ffffffff8021243c:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt_Child */
ffffffff80212441:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
            Retval=_RME_Pgt_Des(Cpt,
ffffffff80212446:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff8021244b:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
ffffffff8021244f:	4c 8b 45 28          	mov    0x28(%rbp),%r8
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff80212453:	f6 c6 80             	test   $0x80,%dh
ffffffff80212456:	0f 85 84 15 00 00    	jne    ffffffff802139e0 <_RME_Svc_Handler+0x2d70>
ffffffff8021245c:	4c 39 c2             	cmp    %r8,%rdx
ffffffff8021245f:	0f 83 e1 20 00 00    	jae    ffffffff80214546 <_RME_Svc_Handler+0x38d6>
ffffffff80212465:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8021246c:	ff 00 00 
ffffffff8021246f:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212473:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8021247a:	00 00 00 
ffffffff8021247d:	48 8d 2c 3a          	lea    (%rdx,%rdi,1),%rbp
ffffffff80212481:	48 8b 55 00          	mov    0x0(%rbp),%rdx
ffffffff80212485:	48 21 d1             	and    %rdx,%rcx
ffffffff80212488:	4c 39 c9             	cmp    %r9,%rcx
ffffffff8021248b:	0f 84 89 1f 00 00    	je     ffffffff8021441a <_RME_Svc_Handler+0x37aa>
ffffffff80212491:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212495:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212499:	0f 85 6f 1f 00 00    	jne    ffffffff8021440e <_RME_Svc_Handler+0x379e>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff8021249f:	f6 c4 80             	test   $0x80,%ah
ffffffff802124a2:	0f 85 38 1a 00 00    	jne    ffffffff80213ee0 <_RME_Svc_Handler+0x3270>
ffffffff802124a8:	4c 39 c0             	cmp    %r8,%rax
ffffffff802124ab:	0f 83 75 1f 00 00    	jae    ffffffff80214426 <_RME_Svc_Handler+0x37b6>
ffffffff802124b1:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802124b8:	ff 00 00 
ffffffff802124bb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802124bf:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff802124c6:	00 00 00 
ffffffff802124c9:	4c 8d 24 38          	lea    (%rax,%rdi,1),%r12
ffffffff802124cd:	49 8b 04 24          	mov    (%r12),%rax
ffffffff802124d1:	48 21 c2             	and    %rax,%rdx
ffffffff802124d4:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802124d7:	0f 84 25 22 00 00    	je     ffffffff80214702 <_RME_Svc_Handler+0x3a92>
ffffffff802124dd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802124e1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802124e5:	0f 85 0b 22 00 00    	jne    ffffffff802146f6 <_RME_Svc_Handler+0x3a86>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff802124eb:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802124ef:	a8 20                	test   $0x20,%al
ffffffff802124f1:	0f 84 f3 21 00 00    	je     ffffffff802146ea <_RME_Svc_Handler+0x3a7a>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff802124f7:	41 f6 44 24 10 08    	testb  $0x8,0x10(%r12)
ffffffff802124fd:	0f 84 db 21 00 00    	je     ffffffff802146de <_RME_Svc_Handler+0x3a6e>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80212503:	48 89 c2             	mov    %rax,%rdx
ffffffff80212506:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff8021250a:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021250d:	0f 82 91 1e 00 00    	jb     ffffffff802143a4 <_RME_Svc_Handler+0x3734>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80212513:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80212517:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff8021251c:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021251f:	0f 82 73 1e 00 00    	jb     ffffffff80214398 <_RME_Svc_Handler+0x3728>
    if((Pos>>RME_PGT_NMORD(Pgt_Parent->Order))!=0U)
ffffffff80212525:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
ffffffff80212529:	48 89 f0             	mov    %rsi,%rax
ffffffff8021252c:	48 d3 e8             	shr    %cl,%rax
ffffffff8021252f:	48 85 c0             	test   %rax,%rax
ffffffff80212532:	0f 85 6c 23 00 00    	jne    ffffffff802148a4 <_RME_Svc_Handler+0x3c34>
    if(__RME_Pgt_Pgdir_Unmap(Pgt_Parent,Pos,Pgt_Child)<0)
ffffffff80212538:	4c 89 e2             	mov    %r12,%rdx
ffffffff8021253b:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021253e:	e8 fd 87 00 00       	call   ffffffff8021ad40 <__RME_Pgt_Pgdir_Unmap>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80212543:	44 8b 4d 00          	mov    0x0(%rbp),%r9d
ffffffff80212547:	45 85 c9             	test   %r9d,%r9d
ffffffff8021254a:	74 04                	je     ffffffff80212550 <_RME_Svc_Handler+0x18e0>
ffffffff8021254c:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
ffffffff80212550:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212557:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8021255d:	45 8b 04 24          	mov    (%r12),%r8d
ffffffff80212561:	45 85 c0             	test   %r8d,%r8d
ffffffff80212564:	74 05                	je     ffffffff8021256b <_RME_Svc_Handler+0x18fb>
ffffffff80212566:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
ffffffff8021256b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212572:	f0 49 0f c1 44 24 08 	lock xadd %rax,0x8(%r12)
    return 0;
ffffffff80212579:	31 f6                	xor    %esi,%esi
ffffffff8021257b:	e9 b0 f4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                       RME_PARAM_D0(Param[1]),              /* rme_ptr_t Prio */
ffffffff80212580:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
ffffffff80212585:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8021258a:	48 8b 75 28          	mov    0x28(%rbp),%rsi
ffffffff8021258e:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
ffffffff80212592:	ff 74 24 50          	push   0x50(%rsp)
ffffffff80212596:	44 89 c8             	mov    %r9d,%eax
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff80212599:	4c 89 c1             	mov    %r8,%rcx
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8021259c:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff802125a0:	45 89 c0             	mov    %r8d,%r8d
ffffffff802125a3:	50                   	push   %rax
ffffffff802125a4:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff802125a9:	48 c1 e9 20          	shr    $0x20,%rcx
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff802125ad:	e8 3e a3 ff ff       	call   ffffffff8020c8f0 <_RME_Thd_Sched_Bind.isra.0>
            break;
ffffffff802125b2:	59                   	pop    %rcx
ffffffff802125b3:	5f                   	pop    %rdi
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff802125b4:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff802125b7:	e9 74 f4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            Retval=_RME_Thd_Del(Cpt,
ffffffff802125bc:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Thd */
ffffffff802125c1:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff802125c6:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff802125ca:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802125ce:	f6 c4 80             	test   $0x80,%ah
ffffffff802125d1:	0f 85 c5 16 00 00    	jne    ffffffff80213c9c <_RME_Svc_Handler+0x302c>
ffffffff802125d7:	48 39 f8             	cmp    %rdi,%rax
ffffffff802125da:	0f 83 3a 21 00 00    	jae    ffffffff8021471a <_RME_Svc_Handler+0x3aaa>
ffffffff802125e0:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802125e7:	00 00 00 
ffffffff802125ea:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802125ee:	48 01 f0             	add    %rsi,%rax
ffffffff802125f1:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802125f8:	ff 00 00 
ffffffff802125fb:	48 8b 08             	mov    (%rax),%rcx
ffffffff802125fe:	48 21 ce             	and    %rcx,%rsi
ffffffff80212601:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80212604:	0f 84 28 21 00 00    	je     ffffffff80214732 <_RME_Svc_Handler+0x3ac2>
ffffffff8021260a:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021260e:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212612:	0f 85 0e 21 00 00    	jne    ffffffff80214726 <_RME_Svc_Handler+0x3ab6>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212618:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8021261c:	0f 84 40 21 00 00    	je     ffffffff80214762 <_RME_Svc_Handler+0x3af2>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff80212622:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212626:	0f 83 2a 21 00 00    	jae    ffffffff80214756 <_RME_Svc_Handler+0x3ae6>
ffffffff8021262c:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80212630:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80212634:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021263b:	00 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff8021263e:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80212641:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80212648:	ff 00 00 
ffffffff8021264b:	48 8b 01             	mov    (%rcx),%rax
ffffffff8021264e:	48 21 c2             	and    %rax,%rdx
ffffffff80212651:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80212654:	0f 85 f0 20 00 00    	jne    ffffffff8021474a <_RME_Svc_Handler+0x3ada>
ffffffff8021265a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021265d:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212661:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80212665:	0f 85 d3 20 00 00    	jne    ffffffff8021473e <_RME_Svc_Handler+0x3ace>
ffffffff8021266b:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212670:	48 2b 51 20          	sub    0x20(%rcx),%rdx
ffffffff80212674:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80212678:	0f 86 3c 20 00 00    	jbe    ffffffff802146ba <_RME_Svc_Handler+0x3a4a>
ffffffff8021267e:	48 83 79 08 00       	cmpq   $0x0,0x8(%rcx)
ffffffff80212683:	0f 85 27 1d 00 00    	jne    ffffffff802143b0 <_RME_Svc_Handler+0x3740>
    Thread=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
ffffffff80212689:	48 8b 79 18          	mov    0x18(%rcx),%rdi
    if(Thread->Sched.Local!=RME_THD_FREE)
ffffffff8021268d:	48 83 7f 28 ff       	cmpq   $0xffffffffffffffff,0x28(%rdi)
ffffffff80212692:	0f 85 07 1c 00 00    	jne    ffffffff8021429f <_RME_Svc_Handler+0x362f>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212698:	31 d2                	xor    %edx,%edx
ffffffff8021269a:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021269f:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Thd_Del,Type_Stat);
ffffffff802126a2:	84 d2                	test   %dl,%dl
ffffffff802126a4:	0f 84 a3 0d 00 00    	je     ffffffff8021344d <_RME_Svc_Handler+0x27dd>
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff802126aa:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
ffffffff802126b1:	48 8d b7 98 00 00 00 	lea    0x98(%rdi),%rsi
ffffffff802126b8:	48 39 f0             	cmp    %rsi,%rax
ffffffff802126bb:	74 2d                	je     ffffffff802126ea <_RME_Svc_Handler+0x1a7a>
ffffffff802126bd:	0f 1f 00             	nopl   (%rax)
        _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff802126c0:	48 8b 08             	mov    (%rax),%rcx
ffffffff802126c3:	48 8b 50 08          	mov    0x8(%rax),%rdx
    Next->Prev=Prev;
ffffffff802126c7:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    Prev->Next=Next;
ffffffff802126cb:	48 89 0a             	mov    %rcx,(%rdx)
        Invocation->Thd_Act=0U;
ffffffff802126ce:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff802126d5:	00 
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff802126d6:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
        Thread->Ctx.Invstk_Depth--;
ffffffff802126dd:	48 83 af a8 00 00 00 	subq   $0x1,0xa8(%rdi)
ffffffff802126e4:	01 
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff802126e5:	48 39 c6             	cmp    %rax,%rsi
ffffffff802126e8:	75 d6                	jne    ffffffff802126c0 <_RME_Svc_Handler+0x1a50>
    RME_FETCH_ADD(&(Thread->Sched.Prc->Head.Root_Ref), -1);
ffffffff802126ea:	48 8b 47 58          	mov    0x58(%rdi),%rax
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802126ee:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802126f5:	48 83 c0 08          	add    $0x8,%rax
ffffffff802126f9:	f0 48 0f c1 10       	lock xadd %rdx,(%rax)
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)==0U)
ffffffff802126fe:	48 83 bf 88 00 00 00 	cmpq   $0x0,0x88(%rdi)
ffffffff80212705:	00 
ffffffff80212706:	0f 88 8c 1a 00 00    	js     ffffffff80214198 <_RME_Svc_Handler+0x3528>
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff8021270c:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff80212711:	e8 6a d8 ff ff       	call   ffffffff8020ff80 <_RME_Kot_Erase>
    return 0;
ffffffff80212716:	31 f6                	xor    %esi,%esi
ffffffff80212718:	e9 13 f3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8021271d:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Prio_Max */
ffffffff80212722:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212727:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8021272b:	48 89 ef             	mov    %rbp,%rdi
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
ffffffff8021272e:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212733:	48 89 c6             	mov    %rax,%rsi
ffffffff80212736:	48 c1 e8 07          	shr    $0x7,%rax
ffffffff8021273a:	45 89 c1             	mov    %r8d,%r9d
ffffffff8021273d:	83 e6 40             	and    $0x40,%esi
ffffffff80212740:	89 d1                	mov    %edx,%ecx
ffffffff80212742:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80212746:	56                   	push   %rsi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80212747:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8021274b:	50                   	push   %rax
ffffffff8021274c:	ff 74 24 68          	push   0x68(%rsp)
ffffffff80212750:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
ffffffff80212755:	e8 86 ca ff ff       	call   ffffffff8020f1e0 <_RME_Thd_Crt>
            break;
ffffffff8021275a:	48 83 c4 20          	add    $0x20,%rsp
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8021275e:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212761:	e9 ca f2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                RME_PARAM_Q0(Param[0]),                     /* rme_ptr_t Size_Order */
ffffffff80212766:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
ffffffff8021276b:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff80212770:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80212774:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212777:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff8021277c:	48 89 c1             	mov    %rax,%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8021277f:	48 89 c6             	mov    %rax,%rsi
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff80212782:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212785:	48 c1 ea 10          	shr    $0x10,%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80212789:	48 c1 ee 20          	shr    $0x20,%rsi
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8021278d:	52                   	push   %rdx
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff8021278e:	48 c1 e9 10          	shr    $0x10,%rcx
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff80212792:	48 89 f2             	mov    %rsi,%rdx
ffffffff80212795:	50                   	push   %rax
ffffffff80212796:	4c 89 c8             	mov    %r9,%rax
ffffffff80212799:	0f b7 c9             	movzwl %cx,%ecx
ffffffff8021279c:	49 83 e1 fe          	and    $0xfffffffffffffffe,%r9
ffffffff802127a0:	83 e0 01             	and    $0x1,%eax
ffffffff802127a3:	50                   	push   %rax
ffffffff802127a4:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
ffffffff802127a9:	4c 8b 44 24 68       	mov    0x68(%rsp),%r8
ffffffff802127ae:	e8 ad c6 ff ff       	call   ffffffff8020ee60 <_RME_Pgt_Crt>
            break;
ffffffff802127b3:	48 83 c4 20          	add    $0x20,%rsp
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff802127b7:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff802127ba:	e9 71 f2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            Retval=_RME_Cpt_Rem(Cpt,
ffffffff802127bf:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Rem */
ffffffff802127c4:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff802127c9:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff802127cd:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802127d1:	f6 c4 80             	test   $0x80,%ah
ffffffff802127d4:	0f 85 20 14 00 00    	jne    ffffffff80213bfa <_RME_Svc_Handler+0x2f8a>
ffffffff802127da:	48 39 f8             	cmp    %rdi,%rax
ffffffff802127dd:	0f 83 2b 1f 00 00    	jae    ffffffff8021470e <_RME_Svc_Handler+0x3a9e>
ffffffff802127e3:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802127ea:	00 00 00 
ffffffff802127ed:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802127f1:	48 01 f0             	add    %rsi,%rax
ffffffff802127f4:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802127fb:	ff 00 00 
ffffffff802127fe:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212801:	48 21 ce             	and    %rcx,%rsi
ffffffff80212804:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80212807:	0f 84 5e 22 00 00    	je     ffffffff80214a6b <_RME_Svc_Handler+0x3dfb>
ffffffff8021280d:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212811:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212815:	0f 85 44 22 00 00    	jne    ffffffff80214a5f <_RME_Svc_Handler+0x3def>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
ffffffff8021281b:	f6 40 10 20          	testb  $0x20,0x10(%rax)
ffffffff8021281f:	0f 84 2e 22 00 00    	je     ffffffff80214a53 <_RME_Svc_Handler+0x3de3>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff80212825:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212829:	0f 83 18 22 00 00    	jae    ffffffff80214a47 <_RME_Svc_Handler+0x3dd7>
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff8021282f:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212836:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff80212839:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021283d:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff80212841:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212848:	00 00 00 
ffffffff8021284b:	48 8b 02             	mov    (%rdx),%rax
ffffffff8021284e:	48 21 c1             	and    %rax,%rcx
ffffffff80212851:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212854:	0f 85 e1 21 00 00    	jne    ffffffff80214a3b <_RME_Svc_Handler+0x3dcb>
ffffffff8021285a:	48 8b 72 20          	mov    0x20(%rdx),%rsi
ffffffff8021285e:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80212863:	48 29 f1             	sub    %rsi,%rcx
ffffffff80212866:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff8021286a:	0f 86 bf 21 00 00    	jbe    ffffffff80214a2f <_RME_Svc_Handler+0x3dbf>
ffffffff80212870:	85 c0                	test   %eax,%eax
ffffffff80212872:	0f 84 f6 1e 00 00    	je     ffffffff8021476e <_RME_Svc_Handler+0x3afe>
    Rem_Type=RME_CAP_TYPE(Type_Stat);
ffffffff80212878:	48 89 c1             	mov    %rax,%rcx
ffffffff8021287b:	48 c1 e9 30          	shr    $0x30,%rcx
    if((Rem_Type!=RME_CAP_TYPE_KOM)&&(Rem_Type!=RME_CAP_TYPE_KFN))
ffffffff8021287f:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff80212883:	48 83 f9 01          	cmp    $0x1,%rcx
ffffffff80212887:	0f 86 f6 18 00 00    	jbe    ffffffff80214183 <_RME_Svc_Handler+0x3513>
        Capobj_Root=(struct RME_Cap_Struct*)(Capobj_Rem->Head.Root_Ref);
ffffffff8021288d:	48 8b 72 08          	mov    0x8(%rdx),%rsi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212891:	31 c9                	xor    %ecx,%ecx
ffffffff80212893:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80212898:	0f 94 c1             	sete   %cl
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8021289b:	84 c9                	test   %cl,%cl
ffffffff8021289d:	0f 84 aa 0b 00 00    	je     ffffffff8021344d <_RME_Svc_Handler+0x27dd>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802128a3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802128aa:	f0 48 0f c1 46 08    	lock xadd %rax,0x8(%rsi)
    return 0;
ffffffff802128b0:	31 f6                	xor    %esi,%esi
ffffffff802128b2:	e9 79 f1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff802128b7:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
ffffffff802128bc:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
ffffffff802128c1:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff802128c6:	48 8b 75 28          	mov    0x28(%rbp),%rsi
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff802128ca:	48 c1 e0 20          	shl    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff802128ce:	48 0b 44 24 38       	or     0x38(%rsp),%rax
ffffffff802128d3:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
ffffffff802128d7:	45 89 c1             	mov    %r8d,%r9d
ffffffff802128da:	50                   	push   %rax
ffffffff802128db:	89 d1                	mov    %edx,%ecx
ffffffff802128dd:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff802128e1:	ff 74 24 58          	push   0x58(%rsp)
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
ffffffff802128e5:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff802128e9:	e8 d2 ad ff ff       	call   ffffffff8020d6c0 <_RME_Cpt_Add.isra.0>
            break;
ffffffff802128ee:	5d                   	pop    %rbp
ffffffff802128ef:	41 5c                	pop    %r12
            Retval=_RME_Cpt_Add(Cpt,
ffffffff802128f1:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff802128f4:	e9 37 f1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            Retval=_RME_Cpt_Frz(Cpt,
ffffffff802128f9:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Frz */
ffffffff802128fe:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff80212903:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff80212907:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff8021290b:	f6 c4 80             	test   $0x80,%ah
ffffffff8021290e:	0f 85 ac 14 00 00    	jne    ffffffff80213dc0 <_RME_Svc_Handler+0x3150>
ffffffff80212914:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212917:	0f 83 93 1f 00 00    	jae    ffffffff802148b0 <_RME_Svc_Handler+0x3c40>
ffffffff8021291d:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212924:	00 00 00 
ffffffff80212927:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021292b:	48 01 f0             	add    %rsi,%rax
ffffffff8021292e:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212935:	ff 00 00 
ffffffff80212938:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021293b:	48 21 ce             	and    %rcx,%rsi
ffffffff8021293e:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80212941:	0f 84 7b 1b 00 00    	je     ffffffff802144c2 <_RME_Svc_Handler+0x3852>
ffffffff80212947:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021294b:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021294f:	0f 85 61 1b 00 00    	jne    ffffffff802144b6 <_RME_Svc_Handler+0x3846>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
ffffffff80212955:	f6 40 10 04          	testb  $0x4,0x10(%rax)
ffffffff80212959:	0f 84 4b 1b 00 00    	je     ffffffff802144aa <_RME_Svc_Handler+0x383a>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Frz,struct RME_Cap_Struct*,Capobj_Frz);
ffffffff8021295f:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212963:	0f 83 35 1b 00 00    	jae    ffffffff8021449e <_RME_Svc_Handler+0x382e>
ffffffff80212969:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021296d:	48 03 50 18          	add    0x18(%rax),%rdx
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
ffffffff80212971:	48 8b 02             	mov    (%rdx),%rax
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
ffffffff80212974:	48 89 c6             	mov    %rax,%rsi
ffffffff80212977:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021297b:	0f 84 cc 0a 00 00    	je     ffffffff8021344d <_RME_Svc_Handler+0x27dd>
    if(RME_CAP_ATTR(Type_Stat)==RME_CAP_ATTR_ROOT)
ffffffff80212981:	85 c0                	test   %eax,%eax
ffffffff80212983:	75 0d                	jne    ffffffff80212992 <_RME_Svc_Handler+0x1d22>
        if(Capobj_Frz->Head.Root_Ref!=0U)
ffffffff80212985:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80212989:	48 85 c9             	test   %rcx,%rcx
ffffffff8021298c:	0f 85 67 19 00 00    	jne    ffffffff802142f9 <_RME_Svc_Handler+0x3689>
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff80212992:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212999:	ff 00 00 
ffffffff8021299c:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802129a3:	00 00 00 
ffffffff802129a6:	48 21 c1             	and    %rax,%rcx
ffffffff802129a9:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802129ac:	0f 84 20 1d 00 00    	je     ffffffff802146d2 <_RME_Svc_Handler+0x3a62>
    if(RME_UNLIKELY(RME_CAP_QUIE(Capobj_Frz->Head.Timestamp)==0U))
ffffffff802129b2:	48 8b 7a 20          	mov    0x20(%rdx),%rdi
ffffffff802129b6:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff802129bb:	48 29 f9             	sub    %rdi,%rcx
ffffffff802129be:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff802129c2:	0f 86 fe 1c 00 00    	jbe    ffffffff802146c6 <_RME_Svc_Handler+0x3a56>
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff802129c8:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff802129cf:	00 ff ff 
    Capobj_Frz->Head.Timestamp=RME_TIMESTAMP;
ffffffff802129d2:	48 c7 42 20 01 00 00 	movq   $0x1,0x20(%rdx)
ffffffff802129d9:	00 
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff802129da:	48 21 c1             	and    %rax,%rcx
ffffffff802129dd:	48 09 f1             	or     %rsi,%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802129e0:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802129e5:	0f 94 c1             	sete   %cl
    return 0;
ffffffff802129e8:	31 f6                	xor    %esi,%esi
ffffffff802129ea:	e9 41 f0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff802129ef:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Pgt */
ffffffff802129f4:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
ffffffff802129f9:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff802129fd:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80212a01:	f6 c4 80             	test   $0x80,%ah
ffffffff80212a04:	0f 85 76 0d 00 00    	jne    ffffffff80213780 <_RME_Svc_Handler+0x2b10>
ffffffff80212a0a:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212a0d:	0f 83 a8 21 00 00    	jae    ffffffff80214bbb <_RME_Svc_Handler+0x3f4b>
ffffffff80212a13:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80212a1a:	ff 00 00 
ffffffff80212a1d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212a21:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80212a28:	00 00 00 
ffffffff80212a2b:	48 8d 0c 30          	lea    (%rax,%rsi,1),%rcx
ffffffff80212a2f:	48 8b 01             	mov    (%rcx),%rax
ffffffff80212a32:	49 21 c0             	and    %rax,%r8
ffffffff80212a35:	4d 39 c8             	cmp    %r9,%r8
ffffffff80212a38:	0f 84 71 21 00 00    	je     ffffffff80214baf <_RME_Svc_Handler+0x3f3f>
ffffffff80212a3e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212a42:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80212a46:	0f 85 bb 20 00 00    	jne    ffffffff80214b07 <_RME_Svc_Handler+0x3e97>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80212a4c:	f6 c6 80             	test   $0x80,%dh
ffffffff80212a4f:	0f 85 bb 15 00 00    	jne    ffffffff80214010 <_RME_Svc_Handler+0x33a0>
ffffffff80212a55:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80212a58:	0f 83 9d 20 00 00    	jae    ffffffff80214afb <_RME_Svc_Handler+0x3e8b>
ffffffff80212a5e:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80212a65:	ff 00 00 
ffffffff80212a68:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212a6c:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212a73:	00 00 00 
ffffffff80212a76:	48 01 f2             	add    %rsi,%rdx
ffffffff80212a79:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80212a7c:	48 21 f0             	and    %rsi,%rax
ffffffff80212a7f:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212a82:	0f 84 67 20 00 00    	je     ffffffff80214aef <_RME_Svc_Handler+0x3e7f>
ffffffff80212a88:	48 89 f0             	mov    %rsi,%rax
ffffffff80212a8b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212a8f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80212a93:	0f 85 5a 1f 00 00    	jne    ffffffff802149f3 <_RME_Svc_Handler+0x3d83>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff80212a99:	f6 41 10 08          	testb  $0x8,0x10(%rcx)
ffffffff80212a9d:	0f 84 44 1f 00 00    	je     ffffffff802149e7 <_RME_Svc_Handler+0x3d77>
    RME_CAP_CHECK(Pgt_New,RME_PGT_FLAG_PRC_PGT);
ffffffff80212aa3:	f6 42 10 80          	testb  $0x80,0x10(%rdx)
ffffffff80212aa7:	0f 84 ee 1f 00 00    	je     ffffffff80214a9b <_RME_Svc_Handler+0x3e2b>
    Pgt_Old=Prc_Op->Pgt;
ffffffff80212aad:	48 8b 41 30          	mov    0x30(%rcx),%rax
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff80212ab1:	85 f6                	test   %esi,%esi
ffffffff80212ab3:	74 04                	je     ffffffff80212ab9 <_RME_Svc_Handler+0x1e49>
ffffffff80212ab5:	48 8b 52 08          	mov    0x8(%rdx),%rdx
ffffffff80212ab9:	f0 48 0f b1 51 30    	lock cmpxchg %rdx,0x30(%rcx)
ffffffff80212abf:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Pgt)),
ffffffff80212ac3:	40 84 f6             	test   %sil,%sil
ffffffff80212ac6:	0f 85 27 f8 ff ff    	jne    ffffffff802122f3 <_RME_Svc_Handler+0x1683>
        return RME_ERR_PTH_CONFLICT;
ffffffff80212acc:	48 c7 c6 36 ff ff ff 	mov    $0xffffffffffffff36,%rsi
ffffffff80212ad3:	e9 58 ef ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80212ad8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80212adf:	00 
            Retval=_RME_Cpt_Del(Cpt,
ffffffff80212ae0:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Cpt */
ffffffff80212ae5:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
ffffffff80212aea:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
ffffffff80212aee:	48 8b 75 28          	mov    0x28(%rbp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80212af2:	f6 c4 80             	test   $0x80,%ah
ffffffff80212af5:	0f 85 35 12 00 00    	jne    ffffffff80213d30 <_RME_Svc_Handler+0x30c0>
ffffffff80212afb:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212afe:	0f 83 f8 1c 00 00    	jae    ffffffff802147fc <_RME_Svc_Handler+0x3b8c>
ffffffff80212b04:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212b0b:	00 00 00 
ffffffff80212b0e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212b12:	48 01 c8             	add    %rcx,%rax
ffffffff80212b15:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212b1c:	ff 00 00 
ffffffff80212b1f:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212b22:	48 21 d1             	and    %rdx,%rcx
ffffffff80212b25:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212b28:	0f 84 c2 1c 00 00    	je     ffffffff802147f0 <_RME_Svc_Handler+0x3b80>
ffffffff80212b2e:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212b32:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212b36:	0f 85 a8 1c 00 00    	jne    ffffffff802147e4 <_RME_Svc_Handler+0x3b74>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212b3c:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212b40:	0f 84 4c 19 00 00    	je     ffffffff80214492 <_RME_Svc_Handler+0x3822>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff80212b46:	48 3b 78 28          	cmp    0x28(%rax),%rdi
ffffffff80212b4a:	0f 83 36 19 00 00    	jae    ffffffff80214486 <_RME_Svc_Handler+0x3816>
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff80212b50:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80212b57:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff80212b5a:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff80212b5e:	48 03 78 18          	add    0x18(%rax),%rdi
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff80212b62:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80212b69:	00 00 00 
ffffffff80212b6c:	48 8b 07             	mov    (%rdi),%rax
ffffffff80212b6f:	48 21 c2             	and    %rax,%rdx
ffffffff80212b72:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80212b75:	0f 85 ff 18 00 00    	jne    ffffffff8021447a <_RME_Svc_Handler+0x380a>
ffffffff80212b7b:	48 89 c2             	mov    %rax,%rdx
ffffffff80212b7e:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212b82:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212b86:	0f 85 e2 18 00 00    	jne    ffffffff8021446e <_RME_Svc_Handler+0x37fe>
ffffffff80212b8c:	48 8b 4f 20          	mov    0x20(%rdi),%rcx
ffffffff80212b90:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212b95:	48 29 ca             	sub    %rcx,%rdx
ffffffff80212b98:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80212b9c:	0f 86 06 1c 00 00    	jbe    ffffffff802147a8 <_RME_Svc_Handler+0x3b38>
ffffffff80212ba2:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
ffffffff80212ba6:	48 85 c9             	test   %rcx,%rcx
ffffffff80212ba9:	0f 85 d7 1b 00 00    	jne    ffffffff80214786 <_RME_Svc_Handler+0x3b16>
    Table=RME_CAP_GETOBJ(Cpt_Del,struct RME_Cap_Struct*);
ffffffff80212baf:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    Entry_Num=Cpt_Del->Entry_Num;
ffffffff80212bb3:	48 8b 77 28          	mov    0x28(%rdi),%rsi
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff80212bb7:	48 85 f6             	test   %rsi,%rsi
ffffffff80212bba:	75 1d                	jne    ffffffff80212bd9 <_RME_Svc_Handler+0x1f69>
ffffffff80212bbc:	e9 e7 14 00 00       	jmp    ffffffff802140a8 <_RME_Svc_Handler+0x3438>
ffffffff80212bc1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80212bc8:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80212bcc:	48 83 c2 40          	add    $0x40,%rdx
ffffffff80212bd0:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80212bd3:	0f 84 cf 14 00 00    	je     ffffffff802140a8 <_RME_Svc_Handler+0x3438>
        if(Table[Count].Head.Type_Stat!=0U)
ffffffff80212bd9:	48 83 3a 00          	cmpq   $0x0,(%rdx)
ffffffff80212bdd:	74 e9                	je     ffffffff80212bc8 <_RME_Svc_Handler+0x1f58>
            RME_CAP_DEFROST(Cpt_Del,Type_Stat);
ffffffff80212bdf:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff80212be6:	00 ff ff 
ffffffff80212be9:	48 21 c2             	and    %rax,%rdx
ffffffff80212bec:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
ffffffff80212bf1:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80212bf4:	48 c7 c6 fb ff ff ff 	mov    $0xfffffffffffffffb,%rsi
ffffffff80212bfb:	e9 30 ee ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Crt */
ffffffff80212c00:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff80212c05:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
ffffffff80212c0a:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212c0d:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
ffffffff80212c12:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
ffffffff80212c17:	89 d1                	mov    %edx,%ecx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80212c19:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff80212c1d:	e8 4e bf ff ff       	call   ffffffff8020eb70 <_RME_Cpt_Crt>
ffffffff80212c22:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212c25:	e9 06 ee ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                RME_PARAM_D1(Param[0]));                    /* rme_ptr_t Is_Exc_Ret */
ffffffff80212c2a:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff80212c2f:	48 8b 74 24 50       	mov    0x50(%rsp),%rsi
ffffffff80212c34:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
ffffffff80212c39:	4c 8b 45 18          	mov    0x18(%rbp),%r8
ffffffff80212c3d:	48 89 c1             	mov    %rax,%rcx
ffffffff80212c40:	4c 8b 4d 28          	mov    0x28(%rbp),%r9
ffffffff80212c44:	89 c2                	mov    %eax,%edx
ffffffff80212c46:	48 c1 e9 20          	shr    $0x20,%rcx
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80212c4a:	f6 c4 80             	test   $0x80,%ah
ffffffff80212c4d:	0f 85 9d 0a 00 00    	jne    ffffffff802136f0 <_RME_Svc_Handler+0x2a80>
ffffffff80212c53:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80212c56:	0f 83 cb 1f 00 00    	jae    ffffffff80214c27 <_RME_Svc_Handler+0x3fb7>
ffffffff80212c5c:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80212c63:	00 00 00 
ffffffff80212c66:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212c6a:	4a 8d 04 02          	lea    (%rdx,%r8,1),%rax
ffffffff80212c6e:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80212c75:	ff 00 00 
ffffffff80212c78:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212c7b:	49 21 d0             	and    %rdx,%r8
ffffffff80212c7e:	4d 39 c8             	cmp    %r9,%r8
ffffffff80212c81:	0f 84 94 1f 00 00    	je     ffffffff80214c1b <_RME_Svc_Handler+0x3fab>
ffffffff80212c87:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212c8b:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff80212c8f:	0f 85 7a 1f 00 00    	jne    ffffffff80214c0f <_RME_Svc_Handler+0x3f9f>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff80212c95:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff80212c99:	0f 84 28 1f 00 00    	je     ffffffff80214bc7 <_RME_Svc_Handler+0x3f57>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff80212c9f:	48 8b 40 18          	mov    0x18(%rax),%rax
    Invocation->Entry=Entry;
ffffffff80212ca3:	48 89 78 20          	mov    %rdi,0x20(%rax)
    Invocation->Stack=Stack;
ffffffff80212ca7:	48 89 70 28          	mov    %rsi,0x28(%rax)
    return 0;
ffffffff80212cab:	31 f6                	xor    %esi,%esi
    Invocation->Is_Exc_Ret=Is_Exc_Ret;
ffffffff80212cad:	48 89 48 30          	mov    %rcx,0x30(%rax)
    return 0;
ffffffff80212cb1:	e9 7a ed ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Pgt_Child */
ffffffff80212cb6:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
            Retval=_RME_Pgt_Con(Cpt,
ffffffff80212cbb:	48 8b 75 28          	mov    0x28(%rbp),%rsi
ffffffff80212cbf:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
ffffffff80212cc3:	4c 8b 4c 24 50       	mov    0x50(%rsp),%r9
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff80212cc8:	4c 89 c2             	mov    %r8,%rdx
            Retval=_RME_Pgt_Con(Cpt,
ffffffff80212ccb:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
ffffffff80212cd0:	45 89 c0             	mov    %r8d,%r8d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff80212cd3:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Pgt_Con(Cpt,
ffffffff80212cd7:	e8 34 a4 ff ff       	call   ffffffff8020d110 <_RME_Pgt_Con.isra.0>
ffffffff80212cdc:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212cdf:	e9 4c ed ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Pos_Src */
ffffffff80212ce4:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
ffffffff80212ce9:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80212cee:	48 8b 75 28          	mov    0x28(%rbp),%rsi
ffffffff80212cf2:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
ffffffff80212cf6:	ff 74 24 50          	push   0x50(%rsp)
ffffffff80212cfa:	44 89 c8             	mov    %r9d,%eax
ffffffff80212cfd:	89 d1                	mov    %edx,%ecx
ffffffff80212cff:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff80212d03:	50                   	push   %rax
ffffffff80212d04:	4c 8b 44 24 48       	mov    0x48(%rsp),%r8
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
ffffffff80212d09:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80212d0d:	e8 8e a6 ff ff       	call   ffffffff8020d3a0 <_RME_Pgt_Add.isra.0>
            break;
ffffffff80212d12:	41 5a                	pop    %r10
ffffffff80212d14:	41 5b                	pop    %r11
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80212d16:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212d19:	e9 12 ed ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            Retval=_RME_Pgt_Del(Cpt,
ffffffff80212d1e:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Pgt */
ffffffff80212d23:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff80212d28:	48 8b 75 18          	mov    0x18(%rbp),%rsi
ffffffff80212d2c:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212d30:	f6 c4 80             	test   $0x80,%ah
ffffffff80212d33:	0f 85 23 09 00 00    	jne    ffffffff8021365c <_RME_Svc_Handler+0x29ec>
ffffffff80212d39:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212d3c:	0f 83 32 16 00 00    	jae    ffffffff80214374 <_RME_Svc_Handler+0x3704>
ffffffff80212d42:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212d49:	00 00 00 
ffffffff80212d4c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212d50:	48 01 f0             	add    %rsi,%rax
ffffffff80212d53:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212d5a:	ff 00 00 
ffffffff80212d5d:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212d60:	48 21 ce             	and    %rcx,%rsi
ffffffff80212d63:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80212d66:	0f 84 20 16 00 00    	je     ffffffff8021438c <_RME_Svc_Handler+0x371c>
ffffffff80212d6c:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212d70:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212d74:	0f 85 06 16 00 00    	jne    ffffffff80214380 <_RME_Svc_Handler+0x3710>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212d7a:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212d7e:	0f 84 d8 15 00 00    	je     ffffffff8021435c <_RME_Svc_Handler+0x36ec>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80212d84:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212d88:	0f 83 c2 15 00 00    	jae    ffffffff80214350 <_RME_Svc_Handler+0x36e0>
ffffffff80212d8e:	48 8b 68 18          	mov    0x18(%rax),%rbp
ffffffff80212d92:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80212d96:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80212d9d:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80212da0:	48 01 d5             	add    %rdx,%rbp
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80212da3:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff80212daa:	00 00 00 
ffffffff80212dad:	4c 8b 65 00          	mov    0x0(%rbp),%r12
ffffffff80212db1:	4c 21 e0             	and    %r12,%rax
ffffffff80212db4:	48 39 d0             	cmp    %rdx,%rax
ffffffff80212db7:	0f 85 87 15 00 00    	jne    ffffffff80214344 <_RME_Svc_Handler+0x36d4>
ffffffff80212dbd:	4c 89 e0             	mov    %r12,%rax
ffffffff80212dc0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212dc4:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80212dc8:	0f 85 6a 15 00 00    	jne    ffffffff80214338 <_RME_Svc_Handler+0x36c8>
ffffffff80212dce:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80212dd3:	48 2b 45 20          	sub    0x20(%rbp),%rax
ffffffff80212dd7:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80212ddb:	0f 86 fa 1b 00 00    	jbe    ffffffff802149db <_RME_Svc_Handler+0x3d6b>
ffffffff80212de1:	48 83 7d 08 00       	cmpq   $0x0,0x8(%rbp)
ffffffff80212de6:	0f 85 cc 1b 00 00    	jne    ffffffff802149b8 <_RME_Svc_Handler+0x3d48>
    if(__RME_Pgt_Del_Check(Pgt_Del)<0)
ffffffff80212dec:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212def:	e8 0c 7e 00 00       	call   ffffffff8021ac00 <__RME_Pgt_Del_Check>
        Table_Size=RME_PGT_SIZE_TOP(RME_PGT_NMORD(Pgt_Del->Order));
ffffffff80212df4:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
ffffffff80212df8:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80212dfd:	31 d2                	xor    %edx,%edx
    Object=RME_CAP_GETOBJ(Pgt_Del,rme_ptr_t);
ffffffff80212dff:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
        Table_Size=RME_PGT_SIZE_NOM(RME_PGT_NMORD(Pgt_Del->Order));
ffffffff80212e03:	d3 e0                	shl    %cl,%eax
ffffffff80212e05:	48 63 f0             	movslq %eax,%rsi
ffffffff80212e08:	4c 89 e0             	mov    %r12,%rax
ffffffff80212e0b:	48 c1 e6 03          	shl    $0x3,%rsi
ffffffff80212e0f:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff80212e15:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Pgt_Del,Type_Stat);
ffffffff80212e18:	84 d2                	test   %dl,%dl
ffffffff80212e1a:	0f 84 2d 06 00 00    	je     ffffffff8021344d <_RME_Svc_Handler+0x27dd>
    RME_ASSERT(_RME_Kot_Erase(Object,Table_Size)==0);
ffffffff80212e20:	e8 5b d1 ff ff       	call   ffffffff8020ff80 <_RME_Kot_Erase>
    return 0;
ffffffff80212e25:	31 f6                	xor    %esi,%esi
ffffffff80212e27:	e9 04 ec ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt */
ffffffff80212e2c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff80212e31:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff80212e36:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
ffffffff80212e3a:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff80212e3e:	f6 c4 80             	test   $0x80,%ah
ffffffff80212e41:	0f 85 09 10 00 00    	jne    ffffffff80213e50 <_RME_Svc_Handler+0x31e0>
ffffffff80212e47:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212e4a:	0f 83 20 1b 00 00    	jae    ffffffff80214970 <_RME_Svc_Handler+0x3d00>
ffffffff80212e50:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212e57:	00 00 00 
ffffffff80212e5a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212e5e:	48 01 c8             	add    %rcx,%rax
ffffffff80212e61:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212e68:	ff 00 00 
ffffffff80212e6b:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212e6e:	48 21 d1             	and    %rdx,%rcx
ffffffff80212e71:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80212e74:	0f 84 ea 1a 00 00    	je     ffffffff80214964 <_RME_Svc_Handler+0x3cf4>
ffffffff80212e7a:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212e7e:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212e82:	0f 85 d0 1a 00 00    	jne    ffffffff80214958 <_RME_Svc_Handler+0x3ce8>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80212e88:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80212e8c:	f6 c2 04             	test   $0x4,%dl
ffffffff80212e8f:	0f 84 5d 16 00 00    	je     ffffffff802144f2 <_RME_Svc_Handler+0x3882>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80212e95:	48 89 d1             	mov    %rdx,%rcx
ffffffff80212e98:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff80212e9c:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212e9f:	0f 82 41 16 00 00    	jb     ffffffff802144e6 <_RME_Svc_Handler+0x3876>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Rem->Head.Flag)))
ffffffff80212ea5:	48 c1 ea 08          	shr    $0x8,%rdx
ffffffff80212ea9:	81 e2 ff ff ff 0f    	and    $0xfffffff,%edx
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80212eaf:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80212eb2:	0f 82 22 16 00 00    	jb     ffffffff802144da <_RME_Svc_Handler+0x386a>
    if((Pos>>RME_PGT_NMORD(Pgt_Rem->Order))!=0U)
ffffffff80212eb8:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80212ebc:	48 89 f2             	mov    %rsi,%rdx
ffffffff80212ebf:	48 d3 ea             	shr    %cl,%rdx
ffffffff80212ec2:	48 85 d2             	test   %rdx,%rdx
ffffffff80212ec5:	0f 85 03 16 00 00    	jne    ffffffff802144ce <_RME_Svc_Handler+0x385e>
    if(__RME_Pgt_Page_Unmap(Pgt_Rem,Pos)<0)
ffffffff80212ecb:	48 89 c7             	mov    %rax,%rdi
ffffffff80212ece:	e8 9d 7d 00 00       	call   ffffffff8021ac70 <__RME_Pgt_Page_Unmap>
    return 0;
ffffffff80212ed3:	31 f6                	xor    %esi,%esi
ffffffff80212ed5:	e9 56 eb ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80212eda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff80212ee0:	48 89 d0             	mov    %rdx,%rax
ffffffff80212ee3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212ee7:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212eea:	0f 83 24 06 00 00    	jae    ffffffff80213514 <_RME_Svc_Handler+0x28a4>
ffffffff80212ef0:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212ef7:	ff 00 00 
ffffffff80212efa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212efe:	48 01 f8             	add    %rdi,%rax
ffffffff80212f01:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212f08:	00 00 00 
ffffffff80212f0b:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212f0e:	49 89 c8             	mov    %rcx,%r8
ffffffff80212f11:	49 21 f0             	and    %rsi,%r8
ffffffff80212f14:	49 39 f8             	cmp    %rdi,%r8
ffffffff80212f17:	0f 84 7c ee ff ff    	je     ffffffff80211d99 <_RME_Svc_Handler+0x1129>
ffffffff80212f1d:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212f21:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80212f25:	75 3e                	jne    ffffffff80212f65 <_RME_Svc_Handler+0x22f5>
ffffffff80212f27:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80212f2b:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff80212f31:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80212f34:	0f 83 da 05 00 00    	jae    ffffffff80213514 <_RME_Svc_Handler+0x28a4>
ffffffff80212f3a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212f3e:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff80212f42:	48 89 f0             	mov    %rsi,%rax
ffffffff80212f45:	48 89 d5             	mov    %rdx,%rbp
ffffffff80212f48:	48 8b 12             	mov    (%rdx),%rdx
ffffffff80212f4b:	48 21 d0             	and    %rdx,%rax
ffffffff80212f4e:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212f51:	0f 84 42 ee ff ff    	je     ffffffff80211d99 <_RME_Svc_Handler+0x1129>
ffffffff80212f57:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212f5b:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80212f5f:	0f 84 15 e0 ff ff    	je     ffffffff80210f7a <_RME_Svc_Handler+0x30a>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80212f65:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80212f6c:	e9 bf ea ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80212f71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80212f78:	49 39 fc             	cmp    %rdi,%r12
ffffffff80212f7b:	0f 83 92 12 00 00    	jae    ffffffff80214213 <_RME_Svc_Handler+0x35a3>
ffffffff80212f81:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff80212f88:	ff 00 00 
ffffffff80212f8b:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff80212f8f:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff80212f96:	00 00 00 
ffffffff80212f99:	49 8d 04 14          	lea    (%r12,%rdx,1),%rax
ffffffff80212f9d:	48 8b 30             	mov    (%rax),%rsi
ffffffff80212fa0:	49 21 f2             	and    %rsi,%r10
ffffffff80212fa3:	4d 39 da             	cmp    %r11,%r10
ffffffff80212fa6:	0f 85 5d e2 ff ff    	jne    ffffffff80211209 <_RME_Svc_Handler+0x599>
ffffffff80212fac:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80212fb3:	e9 78 ea ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80212fb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80212fbf:	00 
        if(Time>=RME_THD_INF_TIME)
ffffffff80212fc0:	4c 39 ea             	cmp    %r13,%rdx
ffffffff80212fc3:	0f 83 87 02 00 00    	jae    ffffffff80213250 <_RME_Svc_Handler+0x25e0>
                if(Thd_Src->Sched.Slice!=RME_THD_INIT_TIME)
ffffffff80212fc9:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff80212fd0:	ff ff 7f 
ffffffff80212fd3:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212fd6:	74 09                	je     ffffffff80212fe1 <_RME_Svc_Handler+0x2371>
ffffffff80212fd8:	49 39 cd             	cmp    %rcx,%r13
ffffffff80212fdb:	0f 84 55 04 00 00    	je     ffffffff80213436 <_RME_Svc_Handler+0x27c6>
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80212fe1:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80212fe8:	ff ff 7f 
ffffffff80212feb:	48 8b 75 30          	mov    0x30(%rbp),%rsi
ffffffff80212fef:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212ff2:	0f 82 28 e0 ff ff    	jb     ffffffff80211020 <_RME_Svc_Handler+0x3b0>
                Thd_Dst->Sched.Slice=RME_THD_INF_TIME;
ffffffff80212ff8:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
ffffffff80212fff:	ff ff 7f 
ffffffff80213002:	48 89 45 30          	mov    %rax,0x30(%rbp)
    if(Thd_Src->Sched.Slice==0U)
ffffffff80213006:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff8021300a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80213010:	48 85 c0             	test   %rax,%rax
ffffffff80213013:	0f 85 03 e0 ff ff    	jne    ffffffff8021101c <_RME_Svc_Handler+0x3ac>
ffffffff80213019:	e9 f3 df ff ff       	jmp    ffffffff80211011 <_RME_Svc_Handler+0x3a1>
ffffffff8021301e:	66 90                	xchg   %ax,%ax
        if((Option==RME_RCV_BS)||(Option==RME_RCV_BM))
ffffffff80213020:	49 83 fc 01          	cmp    $0x1,%r12
ffffffff80213024:	0f 87 4d e8 ff ff    	ja     ffffffff80211877 <_RME_Svc_Handler+0xc07>
ffffffff8021302a:	f0 48 0f b1 7d 30    	lock cmpxchg %rdi,0x30(%rbp)
ffffffff80213030:	0f 94 c0             	sete   %al
            if(RME_COMP_SWAP((rme_ptr_t*)&(Sig_Root->Thd),
ffffffff80213033:	84 c0                	test   %al,%al
ffffffff80213035:	0f 84 a8 02 00 00    	je     ffffffff802132e3 <_RME_Svc_Handler+0x2673>
            Thd_Cur->Sched.Signal=Sig_Root;
ffffffff8021303b:	48 89 6f 50          	mov    %rbp,0x50(%rdi)
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
ffffffff8021303f:	48 c7 47 38 01 00 00 	movq   $0x1,0x38(%rdi)
ffffffff80213046:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80213047:	e8 14 97 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            _RME_Kern_High(Reg,Local);
ffffffff8021304c:	4c 89 c6             	mov    %r8,%rsi
ffffffff8021304f:	48 89 df             	mov    %rbx,%rdi
ffffffff80213052:	e8 19 db ff ff       	call   ffffffff80210b70 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213057:	e9 bc dc ff ff       	jmp    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
ffffffff8021305c:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80213060:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213064:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213067:	0f 83 a6 11 00 00    	jae    ffffffff80214213 <_RME_Svc_Handler+0x35a3>
ffffffff8021306d:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80213074:	ff 00 00 
ffffffff80213077:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021307b:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213082:	00 00 00 
ffffffff80213085:	48 01 d0             	add    %rdx,%rax
ffffffff80213088:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021308b:	49 89 d2             	mov    %rdx,%r10
ffffffff8021308e:	49 21 f2             	and    %rsi,%r10
ffffffff80213091:	49 39 fa             	cmp    %rdi,%r10
ffffffff80213094:	0f 84 12 ff ff ff    	je     ffffffff80212fac <_RME_Svc_Handler+0x233c>
ffffffff8021309a:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021309e:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802130a2:	0f 85 86 ed ff ff    	jne    ffffffff80211e2e <_RME_Svc_Handler+0x11be>
ffffffff802130a8:	4c 89 ea             	mov    %r13,%rdx
ffffffff802130ab:	4c 8b 50 28          	mov    0x28(%rax),%r10
ffffffff802130af:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff802130b5:	4c 39 d2             	cmp    %r10,%rdx
ffffffff802130b8:	0f 83 55 11 00 00    	jae    ffffffff80214213 <_RME_Svc_Handler+0x35a3>
ffffffff802130be:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802130c2:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff802130c6:	48 8b 02             	mov    (%rdx),%rax
ffffffff802130c9:	48 21 c6             	and    %rax,%rsi
ffffffff802130cc:	48 39 fe             	cmp    %rdi,%rsi
ffffffff802130cf:	0f 85 b7 e1 ff ff    	jne    ffffffff8021128c <_RME_Svc_Handler+0x61c>
ffffffff802130d5:	e9 d2 fe ff ff       	jmp    ffffffff80212fac <_RME_Svc_Handler+0x233c>
ffffffff802130da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        _RME_Run_Del(Thread);
ffffffff802130e0:	48 89 ef             	mov    %rbp,%rdi
ffffffff802130e3:	e8 78 96 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff802130e8:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff802130ef:	00 
ffffffff802130f0:	e9 b4 e4 ff ff       	jmp    ffffffff802115a9 <_RME_Svc_Handler+0x939>
ffffffff802130f5:	0f 1f 00             	nopl   (%rax)
    switch(Option)
ffffffff802130f8:	49 83 fc 03          	cmp    $0x3,%r12
ffffffff802130fc:	0f 85 ed 01 00 00    	jne    ffffffff802132ef <_RME_Svc_Handler+0x267f>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NM);
ffffffff80213102:	f6 45 10 10          	testb  $0x10,0x10(%rbp)
ffffffff80213106:	0f 85 4a e6 ff ff    	jne    ffffffff80211756 <_RME_Svc_Handler+0xae6>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff8021310c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213113:	e9 18 e9 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213118:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021311f:	00 
        return Thd->Sched.Prc->Pgt;
ffffffff80213120:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff80213124:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff80213128:	e9 36 dd ff ff       	jmp    ffffffff80210e63 <_RME_Svc_Handler+0x1f3>
ffffffff8021312d:	0f 1f 00             	nopl   (%rax)
ffffffff80213130:	49 8b 47 58          	mov    0x58(%r15),%rax
ffffffff80213134:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80213138:	e9 fe dc ff ff       	jmp    ffffffff80210e3b <_RME_Svc_Handler+0x1cb>
ffffffff8021313d:	0f 1f 00             	nopl   (%rax)
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80213140:	49 8b 44 24 20       	mov    0x20(%r12),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80213145:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80213149:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021314d:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80213150:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80213154:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80213159:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021315d:	49 8b 44 04 08       	mov    0x8(%r12,%rax,1),%rax
        Local->Thd_Cur=_RME_Run_High(Local);
ffffffff80213162:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    Prio=Thd->Sched.Prio;
ffffffff80213167:	48 8b 48 40          	mov    0x40(%rax),%rcx
    Local=Thd->Sched.Local;
ffffffff8021316b:	48 8b 50 28          	mov    0x28(%rax),%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021316f:	48 89 cf             	mov    %rcx,%rdi
ffffffff80213172:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff80213176:	4c 8d 04 3a          	lea    (%rdx,%rdi,1),%r8
ffffffff8021317a:	48 8d 7c 3a 28       	lea    0x28(%rdx,%rdi,1),%rdi
ffffffff8021317f:	49 8b 70 30          	mov    0x30(%r8),%rsi
ffffffff80213183:	66 48 0f 6e c7       	movq   %rdi,%xmm0
    Next->Prev=New;
ffffffff80213188:	49 89 40 30          	mov    %rax,0x30(%r8)
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff8021318c:	48 89 df             	mov    %rbx,%rdi
    New->Next=Next;
ffffffff8021318f:	66 48 0f 6e de       	movq   %rsi,%xmm3
ffffffff80213194:	66 0f 6c c3          	punpcklqdq %xmm3,%xmm0
ffffffff80213198:	0f 11 00             	movups %xmm0,(%rax)
    Prev->Next=New;
ffffffff8021319b:	48 89 06             	mov    %rax,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021319e:	48 89 ce             	mov    %rcx,%rsi
ffffffff802131a1:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff802131a6:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff802131aa:	48 d3 e0             	shl    %cl,%rax
ffffffff802131ad:	48 09 44 f2 20       	or     %rax,0x20(%rdx,%rsi,8)
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff802131b2:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
ffffffff802131b7:	48 89 ee             	mov    %rbp,%rsi
ffffffff802131ba:	e8 91 9e ff ff       	call   ffffffff8020d050 <_RME_Run_Swt.isra.0>
ffffffff802131bf:	e9 f8 e3 ff ff       	jmp    ffffffff802115bc <_RME_Svc_Handler+0x94c>
ffffffff802131c4:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802131c8:	4c 89 f2             	mov    %r14,%rdx
ffffffff802131cb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802131cf:	48 39 c2             	cmp    %rax,%rdx
ffffffff802131d2:	0f 83 5f 10 00 00    	jae    ffffffff80214237 <_RME_Svc_Handler+0x35c7>
ffffffff802131d8:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802131df:	ff 00 00 
ffffffff802131e2:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802131e6:	48 03 55 18          	add    0x18(%rbp),%rdx
ffffffff802131ea:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802131f1:	00 00 00 
ffffffff802131f4:	48 8b 02             	mov    (%rdx),%rax
ffffffff802131f7:	48 89 c7             	mov    %rax,%rdi
ffffffff802131fa:	48 21 cf             	and    %rcx,%rdi
ffffffff802131fd:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80213200:	74 3a                	je     ffffffff8021323c <_RME_Svc_Handler+0x25cc>
ffffffff80213202:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213206:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021320a:	0f 85 67 0f 00 00    	jne    ffffffff80214177 <_RME_Svc_Handler+0x3507>
ffffffff80213210:	4c 89 f0             	mov    %r14,%rax
ffffffff80213213:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80213217:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021321c:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021321f:	0f 83 12 10 00 00    	jae    ffffffff80214237 <_RME_Svc_Handler+0x35c7>
ffffffff80213225:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213229:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021322d:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213230:	48 21 d1             	and    %rdx,%rcx
ffffffff80213233:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80213236:	0f 85 dc e8 ff ff    	jne    ffffffff80211b18 <_RME_Svc_Handler+0xea8>
ffffffff8021323c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213243:	e9 e8 e7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213248:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021324f:	00 
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time);
ffffffff80213250:	4c 03 6d 30          	add    0x30(%rbp),%r13
ffffffff80213254:	0f 82 e9 0f 00 00    	jb     ffffffff80214243 <_RME_Svc_Handler+0x35d3>
ffffffff8021325a:	4c 39 ea             	cmp    %r13,%rdx
ffffffff8021325d:	0f 82 e0 0f 00 00    	jb     ffffffff80214243 <_RME_Svc_Handler+0x35d3>
            Thd_Dst->Sched.Slice+=Time;
ffffffff80213263:	4c 89 6d 30          	mov    %r13,0x30(%rbp)
    if(Thd_Src->Sched.Slice==0U)
ffffffff80213267:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff8021326b:	e9 a0 fd ff ff       	jmp    ffffffff80213010 <_RME_Svc_Handler+0x23a0>
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80213270:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
            if(Thd_Src->Sched.Slice>Time)
ffffffff80213274:	49 39 c5             	cmp    %rax,%r13
ffffffff80213277:	4c 0f 47 e8          	cmova  %rax,%r13
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff8021327b:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021327e:	72 1e                	jb     ffffffff8021329e <_RME_Svc_Handler+0x262e>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80213280:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80213287:	ff ff 7f 
ffffffff8021328a:	4c 01 e9             	add    %r13,%rcx
ffffffff8021328d:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213290:	0f 82 ad 0f 00 00    	jb     ffffffff80214243 <_RME_Svc_Handler+0x35d3>
            Thd_Dst->Sched.Slice+=Time_Xfer;
ffffffff80213296:	48 89 4d 30          	mov    %rcx,0x30(%rbp)
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff8021329a:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff8021329e:	4c 29 e8             	sub    %r13,%rax
ffffffff802132a1:	48 89 47 30          	mov    %rax,0x30(%rdi)
ffffffff802132a5:	e9 66 fd ff ff       	jmp    ffffffff80213010 <_RME_Svc_Handler+0x23a0>
ffffffff802132aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NS);
ffffffff802132b0:	f6 45 10 08          	testb  $0x8,0x10(%rbp)
ffffffff802132b4:	0f 85 9c e4 ff ff    	jne    ffffffff80211756 <_RME_Svc_Handler+0xae6>
ffffffff802132ba:	e9 4d fe ff ff       	jmp    ffffffff8021310c <_RME_Svc_Handler+0x249c>
ffffffff802132bf:	90                   	nop
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff802132c0:	f6 45 10 02          	testb  $0x2,0x10(%rbp)
ffffffff802132c4:	0f 85 8c e4 ff ff    	jne    ffffffff80211756 <_RME_Svc_Handler+0xae6>
ffffffff802132ca:	e9 3d fe ff ff       	jmp    ffffffff8021310c <_RME_Svc_Handler+0x249c>
ffffffff802132cf:	90                   	nop
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802132d0:	31 d2                	xor    %edx,%edx
ffffffff802132d2:	f0 48 0f b1 55 28    	lock cmpxchg %rdx,0x28(%rbp)
ffffffff802132d8:	0f 94 c2             	sete   %dl
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff802132db:	84 d2                	test   %dl,%dl
ffffffff802132dd:	0f 85 95 e3 ff ff    	jne    ffffffff80211678 <_RME_Svc_Handler+0xa08>
                return RME_ERR_SIV_CONFLICT;
ffffffff802132e3:	48 c7 c6 cf fe ff ff 	mov    $0xfffffffffffffecf,%rsi
ffffffff802132ea:	e9 41 e7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            return RME_ERR_SIV_ACT;
ffffffff802132ef:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff802132f6:	e9 35 e7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            _RME_Run_Del(Thd_Src);
ffffffff802132fb:	e8 60 94 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
ffffffff80213300:	48 c7 47 38 02 00 00 	movq   $0x2,0x38(%rdi)
ffffffff80213307:	00 
            _RME_Run_Notif(Thd_Src);
ffffffff80213308:	e8 03 a8 ff ff       	call   ffffffff8020db10 <_RME_Run_Notif>
ffffffff8021330d:	e9 0a dd ff ff       	jmp    ffffffff8021101c <_RME_Svc_Handler+0x3ac>
        __RME_Svc_Retval_Set(&(Thread->Ctx.Reg->Reg),RME_ERR_SIV_FREE);
ffffffff80213312:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80213319:	48 c7 c6 ce fe ff ff 	mov    $0xfffffffffffffece,%rsi
ffffffff80213320:	e8 1b 7d 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
        Thread->Sched.Signal->Thd=RME_NULL;
ffffffff80213325:	48 8b 45 50          	mov    0x50(%rbp),%rax
ffffffff80213329:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80213330:	00 
        Thread->Sched.Signal=RME_NULL;
ffffffff80213331:	48 c7 45 50 00 00 00 	movq   $0x0,0x50(%rbp)
ffffffff80213338:	00 
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80213339:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff80213340:	00 
ffffffff80213341:	e9 63 e2 ff ff       	jmp    ffffffff802115a9 <_RME_Svc_Handler+0x939>
        __RME_Svc_Retval_Set(Reg,0);
ffffffff80213346:	31 f6                	xor    %esi,%esi
ffffffff80213348:	48 89 df             	mov    %rbx,%rdi
ffffffff8021334b:	48 89 04 24          	mov    %rax,(%rsp)
ffffffff8021334f:	e8 ec 7c 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
        __RME_Svc_Retval_Set(&(Thd_Rcv->Ctx.Reg->Reg),1);
ffffffff80213354:	49 8b bc 24 90 00 00 	mov    0x90(%r12),%rdi
ffffffff8021335b:	00 
ffffffff8021335c:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213361:	e8 da 7c 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
        if(Thd_Rcv->Sched.Slice!=0U)
ffffffff80213366:	49 83 7c 24 30 00    	cmpq   $0x0,0x30(%r12)
ffffffff8021336c:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80213370:	0f 84 e3 00 00 00    	je     ffffffff80213459 <_RME_Svc_Handler+0x27e9>
    Prio=Thd->Sched.Prio;
ffffffff80213376:	49 8b 4c 24 40       	mov    0x40(%r12),%rcx
    Local=Thd->Sched.Local;
ffffffff8021337b:	49 8b 54 24 28       	mov    0x28(%r12),%rdx
            Thd_Rcv->Sched.State=RME_THD_READY;
ffffffff80213380:	49 c7 44 24 38 00 00 	movq   $0x0,0x38(%r12)
ffffffff80213387:	00 00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80213389:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021338c:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff80213390:	4c 8d 04 3a          	lea    (%rdx,%rdi,1),%r8
ffffffff80213394:	48 8d 7c 3a 28       	lea    0x28(%rdx,%rdi,1),%rdi
ffffffff80213399:	49 8b 70 30          	mov    0x30(%r8),%rsi
ffffffff8021339d:	66 48 0f 6e c7       	movq   %rdi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802133a2:	48 89 cf             	mov    %rcx,%rdi
    Next->Prev=New;
ffffffff802133a5:	4d 89 60 30          	mov    %r12,0x30(%r8)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802133a9:	48 c1 ef 06          	shr    $0x6,%rdi
    New->Next=Next;
ffffffff802133ad:	66 48 0f 6e f6       	movq   %rsi,%xmm6
ffffffff802133b2:	66 0f 6c c6          	punpcklqdq %xmm6,%xmm0
ffffffff802133b6:	41 0f 11 04 24       	movups %xmm0,(%r12)
    Prev->Next=New;
ffffffff802133bb:	4c 89 26             	mov    %r12,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802133be:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802133c3:	48 d3 e6             	shl    %cl,%rsi
ffffffff802133c6:	48 09 74 fa 20       	or     %rsi,0x20(%rdx,%rdi,8)
        _RME_Kern_High(Reg,Local);
ffffffff802133cb:	48 89 c6             	mov    %rax,%rsi
ffffffff802133ce:	48 89 df             	mov    %rbx,%rdi
ffffffff802133d1:	e8 9a d7 ff ff       	call   ffffffff80210b70 <_RME_Kern_High>
        Sig_Root->Thd=RME_NULL;
ffffffff802133d6:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff802133dd:	00 
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802133de:	e9 35 d9 ff ff       	jmp    ffffffff80210d18 <_RME_Svc_Handler+0xa8>
            Thd_Cur->Sched.Slice=0U;
ffffffff802133e3:	49 c7 47 30 00 00 00 	movq   $0x0,0x30(%r15)
ffffffff802133ea:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff802133eb:	4c 89 ff             	mov    %r15,%rdi
ffffffff802133ee:	e8 6d 93 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff802133f3:	49 c7 47 38 02 00 00 	movq   $0x2,0x38(%r15)
ffffffff802133fa:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff802133fb:	e8 10 a7 ff ff       	call   ffffffff8020db10 <_RME_Run_Notif>
ffffffff80213400:	e9 b8 d9 ff ff       	jmp    ffffffff80210dbd <_RME_Svc_Handler+0x14d>
            Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80213405:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff8021340c:	00 
            _RME_Run_Notif(Thread);
ffffffff8021340d:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213410:	e8 fb a6 ff ff       	call   ffffffff8020db10 <_RME_Run_Notif>
ffffffff80213415:	e9 8e e0 ff ff       	jmp    ffffffff802114a8 <_RME_Svc_Handler+0x838>
            Time_Xfer=Thd_Src->Sched.Slice;
ffffffff8021341a:	49 89 c5             	mov    %rax,%r13
ffffffff8021341d:	e9 5e fe ff ff       	jmp    ffffffff80213280 <_RME_Svc_Handler+0x2610>
        return RME_ERR_SIV_ACT;
ffffffff80213422:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff80213429:	e9 02 e6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
                Thd_New=Thd_High;
ffffffff8021342e:	48 89 c5             	mov    %rax,%rbp
ffffffff80213431:	e9 a9 d9 ff ff       	jmp    ffffffff80210ddf <_RME_Svc_Handler+0x16f>
                    Thd_Src->Sched.Slice=0U;
ffffffff80213436:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
ffffffff8021343d:	00 
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff8021343e:	48 3b 55 30          	cmp    0x30(%rbp),%rdx
ffffffff80213442:	0f 83 b0 fb ff ff    	jae    ffffffff80212ff8 <_RME_Svc_Handler+0x2388>
ffffffff80213448:	e9 c4 db ff ff       	jmp    ffffffff80211011 <_RME_Svc_Handler+0x3a1>
            Retval=RME_ERR_CPT_NULL;
ffffffff8021344d:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80213454:	e9 d7 e5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
ffffffff80213459:	49 c7 44 24 38 02 00 	movq   $0x2,0x38(%r12)
ffffffff80213460:	00 00 
            _RME_Run_Notif(Thd_Rcv);
ffffffff80213462:	4c 89 e7             	mov    %r12,%rdi
ffffffff80213465:	48 89 04 24          	mov    %rax,(%rsp)
ffffffff80213469:	e8 a2 a6 ff ff       	call   ffffffff8020db10 <_RME_Run_Notif>
ffffffff8021346e:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80213472:	e9 54 ff ff ff       	jmp    ffffffff802133cb <_RME_Svc_Handler+0x275b>
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80213477:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021347e:	e9 ad e5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            _RME_Run_Del(Thread[Count]);
ffffffff80213483:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213486:	48 89 0c 24          	mov    %rcx,(%rsp)
ffffffff8021348a:	e8 d1 92 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff8021348f:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
    Local=Thd->Sched.Local;
ffffffff80213494:	48 8b 55 28          	mov    0x28(%rbp),%rdx
ffffffff80213498:	4c 89 de             	mov    %r11,%rsi
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff8021349b:	4c 89 5d 40          	mov    %r11,0x40(%rbp)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021349f:	44 89 d9             	mov    %r11d,%ecx
ffffffff802134a2:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff802134a6:	48 8d 3c 32          	lea    (%rdx,%rsi,1),%rdi
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802134aa:	48 8d 74 32 28       	lea    0x28(%rdx,%rsi,1),%rsi
ffffffff802134af:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff802134b3:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    Next->Prev=New;
ffffffff802134b8:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802134bc:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802134c1:	48 d3 e6             	shl    %cl,%rsi
    New->Next=Next;
ffffffff802134c4:	66 48 0f 6e f8       	movq   %rax,%xmm7
ffffffff802134c9:	66 0f 6c c7          	punpcklqdq %xmm7,%xmm0
ffffffff802134cd:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff802134d1:	48 89 28             	mov    %rbp,(%rax)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802134d4:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff802134d8:	48 c1 e8 26          	shr    $0x26,%rax
ffffffff802134dc:	48 09 74 c2 20       	or     %rsi,0x20(%rdx,%rax,8)
    for(Count=0U;Count<Number;Count++)
ffffffff802134e1:	49 83 f9 01          	cmp    $0x1,%r9
ffffffff802134e5:	0f 85 0b de ff ff    	jne    ffffffff802112f6 <_RME_Svc_Handler+0x686>
ffffffff802134eb:	e9 90 db ff ff       	jmp    ffffffff80211080 <_RME_Svc_Handler+0x410>
        return RME_ERR_PTH_INVSTATE;
ffffffff802134f0:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802134f7:	e9 34 e5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802134fc:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213503:	e9 28 e5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213508:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021350f:	e9 1c e5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80213514:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021351b:	e9 10 e5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        return RME_ERR_CPT_FLAG;
ffffffff80213520:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213527:	e9 4c e1 ff ff       	jmp    ffffffff80211678 <_RME_Svc_Handler+0xa08>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff8021352c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213533:	e9 40 e1 ff ff       	jmp    ffffffff80211678 <_RME_Svc_Handler+0xa08>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80213538:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021353f:	e9 ec e4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80213544:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021354b:	e9 e0 e4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            _RME_Run_Del(Thread[Count]);
ffffffff80213550:	e8 0b 92 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80213555:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    Local=Thd->Sched.Local;
ffffffff8021355a:	48 8b 47 28          	mov    0x28(%rdi),%rax
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021355e:	49 c1 ef 26          	shr    $0x26,%r15
ffffffff80213562:	4c 89 d9             	mov    %r11,%rcx
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80213565:	4c 89 5f 40          	mov    %r11,0x40(%rdi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80213569:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff8021356d:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
ffffffff80213571:	48 8b 56 30          	mov    0x30(%rsi),%rdx
    Next->Prev=New;
ffffffff80213575:	48 89 7e 30          	mov    %rdi,0x30(%rsi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80213579:	48 8d 74 08 28       	lea    0x28(%rax,%rcx,1),%rsi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021357e:	44 89 d9             	mov    %r11d,%ecx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80213581:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    New->Next=Next;
ffffffff80213586:	66 48 0f 6e fa       	movq   %rdx,%xmm7
ffffffff8021358b:	66 0f 6c c7          	punpcklqdq %xmm7,%xmm0
ffffffff8021358f:	0f 11 07             	movups %xmm0,(%rdi)
    Prev->Next=New;
ffffffff80213592:	48 89 3a             	mov    %rdi,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80213595:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021359a:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021359d:	4a 09 54 f8 20       	or     %rdx,0x20(%rax,%r15,8)
ffffffff802135a2:	e9 68 dd ff ff       	jmp    ffffffff8021130f <_RME_Svc_Handler+0x69f>
        return RME_ERR_PTH_INVSTATE;
ffffffff802135a7:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802135ae:	e9 7d e4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        return RME_ERR_PTH_INVSTATE;
ffffffff802135b3:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff802135ba:	e9 71 e4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802135bf:	48 89 c1             	mov    %rax,%rcx
ffffffff802135c2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802135c6:	48 39 f9             	cmp    %rdi,%rcx
ffffffff802135c9:	0f 83 d4 15 00 00    	jae    ffffffff80214ba3 <_RME_Svc_Handler+0x3f33>
ffffffff802135cf:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802135d6:	00 00 00 
ffffffff802135d9:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802135dd:	48 01 f1             	add    %rsi,%rcx
ffffffff802135e0:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802135e7:	ff 00 00 
ffffffff802135ea:	48 8b 39             	mov    (%rcx),%rdi
ffffffff802135ed:	49 89 f9             	mov    %rdi,%r9
ffffffff802135f0:	49 21 f1             	and    %rsi,%r9
ffffffff802135f3:	4d 39 c1             	cmp    %r8,%r9
ffffffff802135f6:	0f 84 9b 15 00 00    	je     ffffffff80214b97 <_RME_Svc_Handler+0x3f27>
ffffffff802135fc:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213600:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213604:	0f 85 81 15 00 00    	jne    ffffffff80214b8b <_RME_Svc_Handler+0x3f1b>
ffffffff8021360a:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8021360e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213613:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213616:	0f 83 63 15 00 00    	jae    ffffffff80214b7f <_RME_Svc_Handler+0x3f0f>
ffffffff8021361c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213620:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80213624:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213627:	48 21 ce             	and    %rcx,%rsi
ffffffff8021362a:	4c 39 c6             	cmp    %r8,%rsi
ffffffff8021362d:	0f 84 5c 14 00 00    	je     ffffffff80214a8f <_RME_Svc_Handler+0x3e1f>
ffffffff80213633:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213637:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021363b:	0f 84 a0 e9 ff ff    	je     ffffffff80211fe1 <_RME_Svc_Handler+0x1371>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213641:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213648:	e9 e3 e3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021364d:	0f 1f 00             	nopl   (%rax)
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff80213650:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213657:	e9 d4 e3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021365c:	48 89 c1             	mov    %rax,%rcx
ffffffff8021365f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80213663:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213666:	0f 83 f7 15 00 00    	jae    ffffffff80214c63 <_RME_Svc_Handler+0x3ff3>
ffffffff8021366c:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213673:	00 00 00 
ffffffff80213676:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021367a:	48 01 f1             	add    %rsi,%rcx
ffffffff8021367d:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80213684:	ff 00 00 
ffffffff80213687:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8021368a:	49 89 f9             	mov    %rdi,%r9
ffffffff8021368d:	49 21 f1             	and    %rsi,%r9
ffffffff80213690:	4d 39 c1             	cmp    %r8,%r9
ffffffff80213693:	0f 84 be 15 00 00    	je     ffffffff80214c57 <_RME_Svc_Handler+0x3fe7>
ffffffff80213699:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021369d:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff802136a1:	0f 85 a4 15 00 00    	jne    ffffffff80214c4b <_RME_Svc_Handler+0x3fdb>
ffffffff802136a7:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff802136ab:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802136b0:	48 39 f8             	cmp    %rdi,%rax
ffffffff802136b3:	0f 83 86 15 00 00    	jae    ffffffff80214c3f <_RME_Svc_Handler+0x3fcf>
ffffffff802136b9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802136bd:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff802136c1:	48 8b 08             	mov    (%rax),%rcx
ffffffff802136c4:	48 21 ce             	and    %rcx,%rsi
ffffffff802136c7:	4c 39 c6             	cmp    %r8,%rsi
ffffffff802136ca:	0f 84 63 15 00 00    	je     ffffffff80214c33 <_RME_Svc_Handler+0x3fc3>
ffffffff802136d0:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802136d4:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802136d8:	0f 84 9c f6 ff ff    	je     ffffffff80212d7a <_RME_Svc_Handler+0x210a>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802136de:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802136e5:	e9 46 e3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802136ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff802136f0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802136f4:	4c 39 ca             	cmp    %r9,%rdx
ffffffff802136f7:	0f 83 06 15 00 00    	jae    ffffffff80214c03 <_RME_Svc_Handler+0x3f93>
ffffffff802136fd:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80213704:	00 00 00 
ffffffff80213707:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021370b:	4c 01 c2             	add    %r8,%rdx
ffffffff8021370e:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80213715:	ff 00 00 
ffffffff80213718:	4c 8b 0a             	mov    (%rdx),%r9
ffffffff8021371b:	4d 89 cb             	mov    %r9,%r11
ffffffff8021371e:	4d 21 c3             	and    %r8,%r11
ffffffff80213721:	4d 39 d3             	cmp    %r10,%r11
ffffffff80213724:	0f 84 cd 14 00 00    	je     ffffffff80214bf7 <_RME_Svc_Handler+0x3f87>
ffffffff8021372a:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8021372e:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff80213732:	0f 85 b3 14 00 00    	jne    ffffffff80214beb <_RME_Svc_Handler+0x3f7b>
ffffffff80213738:	4c 8b 4a 28          	mov    0x28(%rdx),%r9
ffffffff8021373c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213741:	4c 39 c8             	cmp    %r9,%rax
ffffffff80213744:	0f 83 95 14 00 00    	jae    ffffffff80214bdf <_RME_Svc_Handler+0x3f6f>
ffffffff8021374a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021374e:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213752:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213755:	49 21 d0             	and    %rdx,%r8
ffffffff80213758:	4d 39 d0             	cmp    %r10,%r8
ffffffff8021375b:	0f 84 72 14 00 00    	je     ffffffff80214bd3 <_RME_Svc_Handler+0x3f63>
ffffffff80213761:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213765:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff80213769:	0f 84 26 f5 ff ff    	je     ffffffff80212c95 <_RME_Svc_Handler+0x2025>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021376f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213776:	e9 b5 e2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021377b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80213780:	48 89 c1             	mov    %rax,%rcx
ffffffff80213783:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80213787:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021378a:	0f 83 33 15 00 00    	jae    ffffffff80214cc3 <_RME_Svc_Handler+0x4053>
ffffffff80213790:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80213797:	ff 00 00 
ffffffff8021379a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021379e:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff802137a5:	00 00 00 
ffffffff802137a8:	48 01 f1             	add    %rsi,%rcx
ffffffff802137ab:	4c 8b 09             	mov    (%rcx),%r9
ffffffff802137ae:	4d 89 cb             	mov    %r9,%r11
ffffffff802137b1:	4d 21 c3             	and    %r8,%r11
ffffffff802137b4:	4d 39 d3             	cmp    %r10,%r11
ffffffff802137b7:	0f 84 fa 14 00 00    	je     ffffffff80214cb7 <_RME_Svc_Handler+0x4047>
ffffffff802137bd:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff802137c1:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff802137c5:	0f 85 e0 14 00 00    	jne    ffffffff80214cab <_RME_Svc_Handler+0x403b>
ffffffff802137cb:	4c 8b 49 28          	mov    0x28(%rcx),%r9
ffffffff802137cf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802137d4:	4c 39 c8             	cmp    %r9,%rax
ffffffff802137d7:	0f 83 c2 14 00 00    	jae    ffffffff80214c9f <_RME_Svc_Handler+0x402f>
ffffffff802137dd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802137e1:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff802137e5:	48 89 c1             	mov    %rax,%rcx
ffffffff802137e8:	48 8b 00             	mov    (%rax),%rax
ffffffff802137eb:	49 21 c0             	and    %rax,%r8
ffffffff802137ee:	4d 39 d0             	cmp    %r10,%r8
ffffffff802137f1:	0f 84 9c 14 00 00    	je     ffffffff80214c93 <_RME_Svc_Handler+0x4023>
ffffffff802137f7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802137fb:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802137ff:	0f 84 47 f2 ff ff    	je     ffffffff80212a4c <_RME_Svc_Handler+0x1ddc>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213805:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021380c:	e9 1f e2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213811:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213818:	48 89 c1             	mov    %rax,%rcx
ffffffff8021381b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021381f:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213822:	0f 83 4b 13 00 00    	jae    ffffffff80214b73 <_RME_Svc_Handler+0x3f03>
ffffffff80213828:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8021382f:	00 00 00 
ffffffff80213832:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80213836:	48 01 f1             	add    %rsi,%rcx
ffffffff80213839:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80213840:	ff 00 00 
ffffffff80213843:	48 8b 39             	mov    (%rcx),%rdi
ffffffff80213846:	49 89 f9             	mov    %rdi,%r9
ffffffff80213849:	49 21 f1             	and    %rsi,%r9
ffffffff8021384c:	4d 39 c1             	cmp    %r8,%r9
ffffffff8021384f:	0f 84 12 13 00 00    	je     ffffffff80214b67 <_RME_Svc_Handler+0x3ef7>
ffffffff80213855:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213859:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021385d:	0f 85 f8 12 00 00    	jne    ffffffff80214b5b <_RME_Svc_Handler+0x3eeb>
ffffffff80213863:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff80213867:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021386c:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021386f:	0f 83 da 12 00 00    	jae    ffffffff80214b4f <_RME_Svc_Handler+0x3edf>
ffffffff80213875:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213879:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8021387d:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213880:	48 21 ce             	and    %rcx,%rsi
ffffffff80213883:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80213886:	0f 84 1b 12 00 00    	je     ffffffff80214aa7 <_RME_Svc_Handler+0x3e37>
ffffffff8021388c:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213890:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213894:	0f 84 d4 ea ff ff    	je     ffffffff8021236e <_RME_Svc_Handler+0x16fe>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021389a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802138a1:	e9 8a e1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802138a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff802138ad:	00 00 00 
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff802138b0:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802138b7:	e9 74 e1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802138bc:	48 89 c1             	mov    %rax,%rcx
ffffffff802138bf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802138c3:	48 39 f9             	cmp    %rdi,%rcx
ffffffff802138c6:	0f 83 80 10 00 00    	jae    ffffffff8021494c <_RME_Svc_Handler+0x3cdc>
ffffffff802138cc:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802138d3:	00 00 00 
ffffffff802138d6:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802138da:	48 01 f1             	add    %rsi,%rcx
ffffffff802138dd:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802138e4:	ff 00 00 
ffffffff802138e7:	48 8b 39             	mov    (%rcx),%rdi
ffffffff802138ea:	49 89 f9             	mov    %rdi,%r9
ffffffff802138ed:	49 21 f1             	and    %rsi,%r9
ffffffff802138f0:	4d 39 c1             	cmp    %r8,%r9
ffffffff802138f3:	0f 84 47 10 00 00    	je     ffffffff80214940 <_RME_Svc_Handler+0x3cd0>
ffffffff802138f9:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff802138fd:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213901:	0f 85 2d 10 00 00    	jne    ffffffff80214934 <_RME_Svc_Handler+0x3cc4>
ffffffff80213907:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8021390b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213910:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213913:	0f 83 0f 10 00 00    	jae    ffffffff80214928 <_RME_Svc_Handler+0x3cb8>
ffffffff80213919:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021391d:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80213921:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213924:	48 21 ce             	and    %rcx,%rsi
ffffffff80213927:	4c 39 c6             	cmp    %r8,%rsi
ffffffff8021392a:	0f 84 ec 0f 00 00    	je     ffffffff8021491c <_RME_Svc_Handler+0x3cac>
ffffffff80213930:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213934:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213938:	0f 84 58 e5 ff ff    	je     ffffffff80211e96 <_RME_Svc_Handler+0x1226>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021393e:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213945:	e9 e6 e0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021394a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213950:	48 89 c2             	mov    %rax,%rdx
ffffffff80213953:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213957:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021395a:	0f 83 22 0c 00 00    	jae    ffffffff80214582 <_RME_Svc_Handler+0x3912>
ffffffff80213960:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213967:	00 00 00 
ffffffff8021396a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021396e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213971:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213978:	ff 00 00 
ffffffff8021397b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8021397e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213981:	49 21 c8             	and    %rcx,%r8
ffffffff80213984:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213987:	0f 84 e9 0b 00 00    	je     ffffffff80214576 <_RME_Svc_Handler+0x3906>
ffffffff8021398d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213991:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213995:	0f 85 cf 0b 00 00    	jne    ffffffff8021456a <_RME_Svc_Handler+0x38fa>
ffffffff8021399b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8021399f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802139a4:	48 39 f0             	cmp    %rsi,%rax
ffffffff802139a7:	0f 83 b1 0b 00 00    	jae    ffffffff8021455e <_RME_Svc_Handler+0x38ee>
ffffffff802139ad:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802139b1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802139b5:	48 8b 10             	mov    (%rax),%rdx
ffffffff802139b8:	48 21 d1             	and    %rdx,%rcx
ffffffff802139bb:	48 39 f9             	cmp    %rdi,%rcx
ffffffff802139be:	0f 84 8e 0b 00 00    	je     ffffffff80214552 <_RME_Svc_Handler+0x38e2>
ffffffff802139c4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802139c8:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff802139cc:	0f 84 d1 e7 ff ff    	je     ffffffff802121a3 <_RME_Svc_Handler+0x1533>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802139d2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802139d9:	e9 52 e0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802139de:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff802139e0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802139e3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802139e7:	4c 39 c1             	cmp    %r8,%rcx
ffffffff802139ea:	0f 83 52 0c 00 00    	jae    ffffffff80214642 <_RME_Svc_Handler+0x39d2>
ffffffff802139f0:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff802139f7:	ff 00 00 
ffffffff802139fa:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802139fe:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80213a05:	00 00 00 
ffffffff80213a08:	48 01 f9             	add    %rdi,%rcx
ffffffff80213a0b:	4c 8b 19             	mov    (%rcx),%r11
ffffffff80213a0e:	4c 89 dd             	mov    %r11,%rbp
ffffffff80213a11:	4c 21 cd             	and    %r9,%rbp
ffffffff80213a14:	4c 39 d5             	cmp    %r10,%rbp
ffffffff80213a17:	0f 84 19 0c 00 00    	je     ffffffff80214636 <_RME_Svc_Handler+0x39c6>
ffffffff80213a1d:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff80213a21:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff80213a25:	0f 85 ff 0b 00 00    	jne    ffffffff8021462a <_RME_Svc_Handler+0x39ba>
ffffffff80213a2b:	4c 8b 59 28          	mov    0x28(%rcx),%r11
ffffffff80213a2f:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff80213a35:	4c 39 da             	cmp    %r11,%rdx
ffffffff80213a38:	0f 83 e0 0b 00 00    	jae    ffffffff8021461e <_RME_Svc_Handler+0x39ae>
ffffffff80213a3e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213a42:	48 03 51 18          	add    0x18(%rcx),%rdx
ffffffff80213a46:	48 89 d5             	mov    %rdx,%rbp
ffffffff80213a49:	48 8b 12             	mov    (%rdx),%rdx
ffffffff80213a4c:	49 21 d1             	and    %rdx,%r9
ffffffff80213a4f:	4d 39 d1             	cmp    %r10,%r9
ffffffff80213a52:	0f 84 b2 0a 00 00    	je     ffffffff8021450a <_RME_Svc_Handler+0x389a>
ffffffff80213a58:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213a5c:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213a60:	0f 84 39 ea ff ff    	je     ffffffff8021249f <_RME_Svc_Handler+0x182f>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213a66:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213a6d:	e9 be df ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213a72:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80213a78:	48 89 c1             	mov    %rax,%rcx
ffffffff80213a7b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80213a7f:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213a82:	0f 83 5a 0b 00 00    	jae    ffffffff802145e2 <_RME_Svc_Handler+0x3972>
ffffffff80213a88:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80213a8f:	ff 00 00 
ffffffff80213a92:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80213a96:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80213a9d:	00 00 00 
ffffffff80213aa0:	48 01 f1             	add    %rsi,%rcx
ffffffff80213aa3:	4c 8b 09             	mov    (%rcx),%r9
ffffffff80213aa6:	4d 89 cb             	mov    %r9,%r11
ffffffff80213aa9:	4d 21 c3             	and    %r8,%r11
ffffffff80213aac:	4d 39 d3             	cmp    %r10,%r11
ffffffff80213aaf:	0f 84 21 0b 00 00    	je     ffffffff802145d6 <_RME_Svc_Handler+0x3966>
ffffffff80213ab5:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff80213ab9:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff80213abd:	0f 85 07 0b 00 00    	jne    ffffffff802145ca <_RME_Svc_Handler+0x395a>
ffffffff80213ac3:	4c 8b 49 28          	mov    0x28(%rcx),%r9
ffffffff80213ac7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213acc:	4c 39 c8             	cmp    %r9,%rax
ffffffff80213acf:	0f 83 e9 0a 00 00    	jae    ffffffff802145be <_RME_Svc_Handler+0x394e>
ffffffff80213ad5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213ad9:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80213add:	48 89 c1             	mov    %rax,%rcx
ffffffff80213ae0:	48 8b 00             	mov    (%rax),%rax
ffffffff80213ae3:	49 21 c0             	and    %rax,%r8
ffffffff80213ae6:	4d 39 d0             	cmp    %r10,%r8
ffffffff80213ae9:	0f 84 c3 0a 00 00    	je     ffffffff802145b2 <_RME_Svc_Handler+0x3942>
ffffffff80213aef:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213af3:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80213af7:	0f 84 76 e7 ff ff    	je     ffffffff80212273 <_RME_Svc_Handler+0x1603>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213afd:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213b04:	e9 27 df ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213b09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213b10:	48 89 c1             	mov    %rax,%rcx
ffffffff80213b13:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80213b17:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213b1a:	0f 83 c3 0f 00 00    	jae    ffffffff80214ae3 <_RME_Svc_Handler+0x3e73>
ffffffff80213b20:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213b27:	00 00 00 
ffffffff80213b2a:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80213b2e:	48 01 f1             	add    %rsi,%rcx
ffffffff80213b31:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80213b38:	ff 00 00 
ffffffff80213b3b:	48 8b 39             	mov    (%rcx),%rdi
ffffffff80213b3e:	49 89 f9             	mov    %rdi,%r9
ffffffff80213b41:	49 21 f1             	and    %rsi,%r9
ffffffff80213b44:	4d 39 c1             	cmp    %r8,%r9
ffffffff80213b47:	0f 84 8a 0f 00 00    	je     ffffffff80214ad7 <_RME_Svc_Handler+0x3e67>
ffffffff80213b4d:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213b51:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213b55:	0f 85 70 0f 00 00    	jne    ffffffff80214acb <_RME_Svc_Handler+0x3e5b>
ffffffff80213b5b:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff80213b5f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213b64:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213b67:	0f 83 52 0f 00 00    	jae    ffffffff80214abf <_RME_Svc_Handler+0x3e4f>
ffffffff80213b6d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213b71:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80213b75:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213b78:	48 21 ce             	and    %rcx,%rsi
ffffffff80213b7b:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80213b7e:	0f 84 2f 0f 00 00    	je     ffffffff80214ab3 <_RME_Svc_Handler+0x3e43>
ffffffff80213b84:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213b88:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213b8c:	0f 84 3e e5 ff ff    	je     ffffffff802120d0 <_RME_Svc_Handler+0x1460>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213b92:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213b99:	e9 92 de ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213b9e:	66 90                	xchg   %ax,%ax
            _RME_Run_Del(Thread[Count]);
ffffffff80213ba0:	e8 bb 8b ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80213ba5:	4c 8b 5c 24 28       	mov    0x28(%rsp),%r11
    Local=Thd->Sched.Local;
ffffffff80213baa:	48 8b 47 28          	mov    0x28(%rdi),%rax
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80213bae:	4d 89 e8             	mov    %r13,%r8
ffffffff80213bb1:	49 c1 e8 26          	shr    $0x26,%r8
ffffffff80213bb5:	4c 89 d9             	mov    %r11,%rcx
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80213bb8:	4c 89 5f 40          	mov    %r11,0x40(%rdi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80213bbc:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80213bc0:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
ffffffff80213bc4:	48 8b 56 30          	mov    0x30(%rsi),%rdx
    Next->Prev=New;
ffffffff80213bc8:	48 89 7e 30          	mov    %rdi,0x30(%rsi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80213bcc:	48 8d 74 08 28       	lea    0x28(%rax,%rcx,1),%rsi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80213bd1:	44 89 d9             	mov    %r11d,%ecx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80213bd4:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    New->Next=Next;
ffffffff80213bd9:	66 48 0f 6e fa       	movq   %rdx,%xmm7
ffffffff80213bde:	66 0f 6c c7          	punpcklqdq %xmm7,%xmm0
ffffffff80213be2:	0f 11 07             	movups %xmm0,(%rdi)
    Prev->Next=New;
ffffffff80213be5:	48 89 3a             	mov    %rdi,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80213be8:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80213bed:	48 d3 e2             	shl    %cl,%rdx
ffffffff80213bf0:	4a 09 54 c0 20       	or     %rdx,0x20(%rax,%r8,8)
}
ffffffff80213bf5:	e9 86 d4 ff ff       	jmp    ffffffff80211080 <_RME_Svc_Handler+0x410>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213bfa:	48 89 c1             	mov    %rax,%rcx
ffffffff80213bfd:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80213c01:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213c04:	0f 83 19 0e 00 00    	jae    ffffffff80214a23 <_RME_Svc_Handler+0x3db3>
ffffffff80213c0a:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213c11:	00 00 00 
ffffffff80213c14:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80213c18:	48 01 f1             	add    %rsi,%rcx
ffffffff80213c1b:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80213c22:	ff 00 00 
ffffffff80213c25:	48 8b 39             	mov    (%rcx),%rdi
ffffffff80213c28:	49 89 f9             	mov    %rdi,%r9
ffffffff80213c2b:	49 21 f1             	and    %rsi,%r9
ffffffff80213c2e:	4d 39 c1             	cmp    %r8,%r9
ffffffff80213c31:	0f 84 e0 0d 00 00    	je     ffffffff80214a17 <_RME_Svc_Handler+0x3da7>
ffffffff80213c37:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213c3b:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213c3f:	0f 85 c6 0d 00 00    	jne    ffffffff80214a0b <_RME_Svc_Handler+0x3d9b>
ffffffff80213c45:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff80213c49:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213c4e:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213c51:	0f 83 a8 0d 00 00    	jae    ffffffff802149ff <_RME_Svc_Handler+0x3d8f>
ffffffff80213c57:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213c5b:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80213c5f:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213c62:	48 21 ce             	and    %rcx,%rsi
ffffffff80213c65:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80213c68:	0f 84 5e 06 00 00    	je     ffffffff802142cc <_RME_Svc_Handler+0x365c>
ffffffff80213c6e:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213c72:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213c76:	0f 84 9f eb ff ff    	je     ffffffff8021281b <_RME_Svc_Handler+0x1bab>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213c7c:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213c83:	e9 a8 dd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213c88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80213c8f:	00 
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff80213c90:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213c97:	e9 94 dd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213c9c:	48 89 c1             	mov    %rax,%rcx
ffffffff80213c9f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80213ca3:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213ca6:	0f 83 8c 0b 00 00    	jae    ffffffff80214838 <_RME_Svc_Handler+0x3bc8>
ffffffff80213cac:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213cb3:	00 00 00 
ffffffff80213cb6:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80213cba:	48 01 f1             	add    %rsi,%rcx
ffffffff80213cbd:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80213cc4:	ff 00 00 
ffffffff80213cc7:	48 8b 39             	mov    (%rcx),%rdi
ffffffff80213cca:	49 89 f9             	mov    %rdi,%r9
ffffffff80213ccd:	49 21 f1             	and    %rsi,%r9
ffffffff80213cd0:	4d 39 c1             	cmp    %r8,%r9
ffffffff80213cd3:	0f 84 53 0b 00 00    	je     ffffffff8021482c <_RME_Svc_Handler+0x3bbc>
ffffffff80213cd9:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213cdd:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213ce1:	0f 85 39 0b 00 00    	jne    ffffffff80214820 <_RME_Svc_Handler+0x3bb0>
ffffffff80213ce7:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff80213ceb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213cf0:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213cf3:	0f 83 1b 0b 00 00    	jae    ffffffff80214814 <_RME_Svc_Handler+0x3ba4>
ffffffff80213cf9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213cfd:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80213d01:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213d04:	48 21 ce             	and    %rcx,%rsi
ffffffff80213d07:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80213d0a:	0f 84 f8 0a 00 00    	je     ffffffff80214808 <_RME_Svc_Handler+0x3b98>
ffffffff80213d10:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213d14:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213d18:	0f 84 fa e8 ff ff    	je     ffffffff80212618 <_RME_Svc_Handler+0x19a8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213d1e:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213d25:	e9 06 dd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213d2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80213d30:	48 89 c2             	mov    %rax,%rdx
ffffffff80213d33:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213d37:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213d3a:	0f 83 ac 0b 00 00    	jae    ffffffff802148ec <_RME_Svc_Handler+0x3c7c>
ffffffff80213d40:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213d47:	00 00 00 
ffffffff80213d4a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213d4e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213d51:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213d58:	ff 00 00 
ffffffff80213d5b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213d5e:	49 89 f1             	mov    %rsi,%r9
ffffffff80213d61:	49 21 c9             	and    %rcx,%r9
ffffffff80213d64:	4d 39 c1             	cmp    %r8,%r9
ffffffff80213d67:	0f 84 73 0b 00 00    	je     ffffffff802148e0 <_RME_Svc_Handler+0x3c70>
ffffffff80213d6d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213d71:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213d75:	0f 85 59 0b 00 00    	jne    ffffffff802148d4 <_RME_Svc_Handler+0x3c64>
ffffffff80213d7b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213d7f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213d84:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213d87:	0f 83 3b 0b 00 00    	jae    ffffffff802148c8 <_RME_Svc_Handler+0x3c58>
ffffffff80213d8d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213d91:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213d95:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213d98:	48 21 d1             	and    %rdx,%rcx
ffffffff80213d9b:	4c 39 c1             	cmp    %r8,%rcx
ffffffff80213d9e:	0f 84 18 0b 00 00    	je     ffffffff802148bc <_RME_Svc_Handler+0x3c4c>
ffffffff80213da4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213da8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213dac:	0f 84 8a ed ff ff    	je     ffffffff80212b3c <_RME_Svc_Handler+0x1ecc>
ffffffff80213db2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213db9:	e9 72 dc ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213dbe:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff80213dc0:	48 89 c1             	mov    %rax,%rcx
ffffffff80213dc3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80213dc7:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213dca:	0f 83 dc 0b 00 00    	jae    ffffffff802149ac <_RME_Svc_Handler+0x3d3c>
ffffffff80213dd0:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213dd7:	00 00 00 
ffffffff80213dda:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80213dde:	48 01 f1             	add    %rsi,%rcx
ffffffff80213de1:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80213de8:	ff 00 00 
ffffffff80213deb:	48 8b 39             	mov    (%rcx),%rdi
ffffffff80213dee:	49 89 f9             	mov    %rdi,%r9
ffffffff80213df1:	49 21 f1             	and    %rsi,%r9
ffffffff80213df4:	4d 39 c1             	cmp    %r8,%r9
ffffffff80213df7:	0f 84 a3 0b 00 00    	je     ffffffff802149a0 <_RME_Svc_Handler+0x3d30>
ffffffff80213dfd:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213e01:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213e05:	0f 85 89 0b 00 00    	jne    ffffffff80214994 <_RME_Svc_Handler+0x3d24>
ffffffff80213e0b:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff80213e0f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213e14:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213e17:	0f 83 6b 0b 00 00    	jae    ffffffff80214988 <_RME_Svc_Handler+0x3d18>
ffffffff80213e1d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213e21:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80213e25:	48 8b 08             	mov    (%rax),%rcx
ffffffff80213e28:	48 21 ce             	and    %rcx,%rsi
ffffffff80213e2b:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80213e2e:	0f 84 48 0b 00 00    	je     ffffffff8021497c <_RME_Svc_Handler+0x3d0c>
ffffffff80213e34:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213e38:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213e3c:	0f 84 13 eb ff ff    	je     ffffffff80212955 <_RME_Svc_Handler+0x1ce5>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213e42:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213e49:	e9 e2 db ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213e4e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff80213e50:	48 89 c2             	mov    %rax,%rdx
ffffffff80213e53:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213e57:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80213e5a:	0f 83 02 06 00 00    	jae    ffffffff80214462 <_RME_Svc_Handler+0x37f2>
ffffffff80213e60:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213e67:	00 00 00 
ffffffff80213e6a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213e6e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213e71:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213e78:	ff 00 00 
ffffffff80213e7b:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80213e7e:	49 89 f9             	mov    %rdi,%r9
ffffffff80213e81:	49 21 c9             	and    %rcx,%r9
ffffffff80213e84:	4d 39 c1             	cmp    %r8,%r9
ffffffff80213e87:	0f 84 c9 05 00 00    	je     ffffffff80214456 <_RME_Svc_Handler+0x37e6>
ffffffff80213e8d:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213e91:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213e95:	0f 85 af 05 00 00    	jne    ffffffff8021444a <_RME_Svc_Handler+0x37da>
ffffffff80213e9b:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80213e9f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213ea4:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213ea7:	0f 83 91 05 00 00    	jae    ffffffff8021443e <_RME_Svc_Handler+0x37ce>
ffffffff80213ead:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213eb1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213eb5:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213eb8:	48 21 d1             	and    %rdx,%rcx
ffffffff80213ebb:	4c 39 c1             	cmp    %r8,%rcx
ffffffff80213ebe:	0f 84 6e 05 00 00    	je     ffffffff80214432 <_RME_Svc_Handler+0x37c2>
ffffffff80213ec4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213ec8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213ecc:	0f 84 b6 ef ff ff    	je     ffffffff80212e88 <_RME_Svc_Handler+0x2218>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213ed2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213ed9:	e9 52 db ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213ede:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff80213ee0:	48 89 c2             	mov    %rax,%rdx
ffffffff80213ee3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213ee7:	4c 39 c2             	cmp    %r8,%rdx
ffffffff80213eea:	0f 83 b2 07 00 00    	jae    ffffffff802146a2 <_RME_Svc_Handler+0x3a32>
ffffffff80213ef0:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213ef7:	ff 00 00 
ffffffff80213efa:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213efe:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213f05:	00 00 00 
ffffffff80213f08:	48 01 fa             	add    %rdi,%rdx
ffffffff80213f0b:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80213f0e:	49 89 f9             	mov    %rdi,%r9
ffffffff80213f11:	49 21 c9             	and    %rcx,%r9
ffffffff80213f14:	4d 39 c1             	cmp    %r8,%r9
ffffffff80213f17:	0f 84 79 07 00 00    	je     ffffffff80214696 <_RME_Svc_Handler+0x3a26>
ffffffff80213f1d:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213f21:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213f25:	0f 85 5f 07 00 00    	jne    ffffffff8021468a <_RME_Svc_Handler+0x3a1a>
ffffffff80213f2b:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80213f2f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213f34:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213f37:	0f 83 41 07 00 00    	jae    ffffffff8021467e <_RME_Svc_Handler+0x3a0e>
ffffffff80213f3d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213f41:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213f45:	49 89 c4             	mov    %rax,%r12
ffffffff80213f48:	48 8b 00             	mov    (%rax),%rax
ffffffff80213f4b:	48 21 c1             	and    %rax,%rcx
ffffffff80213f4e:	4c 39 c1             	cmp    %r8,%rcx
ffffffff80213f51:	0f 84 1b 07 00 00    	je     ffffffff80214672 <_RME_Svc_Handler+0x3a02>
ffffffff80213f57:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213f5b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213f5f:	0f 84 86 e5 ff ff    	je     ffffffff802124eb <_RME_Svc_Handler+0x187b>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213f65:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213f6c:	e9 bf da ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80213f71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213f78:	48 89 d0             	mov    %rdx,%rax
ffffffff80213f7b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213f7f:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213f82:	0f 83 bb 0b 00 00    	jae    ffffffff80214b43 <_RME_Svc_Handler+0x3ed3>
ffffffff80213f88:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213f8f:	00 00 00 
ffffffff80213f92:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213f96:	48 01 f0             	add    %rsi,%rax
ffffffff80213f99:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80213fa0:	ff 00 00 
ffffffff80213fa3:	48 8b 38             	mov    (%rax),%rdi
ffffffff80213fa6:	49 89 f9             	mov    %rdi,%r9
ffffffff80213fa9:	49 21 f1             	and    %rsi,%r9
ffffffff80213fac:	4d 39 c1             	cmp    %r8,%r9
ffffffff80213faf:	0f 84 82 0b 00 00    	je     ffffffff80214b37 <_RME_Svc_Handler+0x3ec7>
ffffffff80213fb5:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213fb9:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213fbd:	0f 85 68 0b 00 00    	jne    ffffffff80214b2b <_RME_Svc_Handler+0x3ebb>
ffffffff80213fc3:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff80213fc7:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff80213fcd:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80213fd0:	0f 83 49 0b 00 00    	jae    ffffffff80214b1f <_RME_Svc_Handler+0x3eaf>
ffffffff80213fd6:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213fda:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff80213fde:	48 8b 02             	mov    (%rdx),%rax
ffffffff80213fe1:	48 21 c6             	and    %rax,%rsi
ffffffff80213fe4:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80213fe7:	0f 84 26 0b 00 00    	je     ffffffff80214b13 <_RME_Svc_Handler+0x3ea3>
ffffffff80213fed:	48 89 c6             	mov    %rax,%rsi
ffffffff80213ff0:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213ff4:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213ff8:	0f 84 c2 e2 ff ff    	je     ffffffff802122c0 <_RME_Svc_Handler+0x1650>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213ffe:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214005:	e9 26 da ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021400a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80214010:	48 89 d0             	mov    %rdx,%rax
ffffffff80214013:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214017:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021401a:	0f 83 b8 07 00 00    	jae    ffffffff802147d8 <_RME_Svc_Handler+0x3b68>
ffffffff80214020:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80214027:	ff 00 00 
ffffffff8021402a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021402e:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80214035:	00 00 00 
ffffffff80214038:	48 01 f0             	add    %rsi,%rax
ffffffff8021403b:	48 8b 30             	mov    (%rax),%rsi
ffffffff8021403e:	49 89 f1             	mov    %rsi,%r9
ffffffff80214041:	49 21 f9             	and    %rdi,%r9
ffffffff80214044:	4d 39 c1             	cmp    %r8,%r9
ffffffff80214047:	0f 84 7f 07 00 00    	je     ffffffff802147cc <_RME_Svc_Handler+0x3b5c>
ffffffff8021404d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80214051:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80214055:	0f 85 65 07 00 00    	jne    ffffffff802147c0 <_RME_Svc_Handler+0x3b50>
ffffffff8021405b:	48 8b 70 28          	mov    0x28(%rax),%rsi
ffffffff8021405f:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff80214065:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80214068:	0f 83 46 07 00 00    	jae    ffffffff802147b4 <_RME_Svc_Handler+0x3b44>
ffffffff8021406e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80214072:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff80214076:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80214079:	48 21 f7             	and    %rsi,%rdi
ffffffff8021407c:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8021407f:	0f 84 f5 06 00 00    	je     ffffffff8021477a <_RME_Svc_Handler+0x3b0a>
ffffffff80214085:	48 89 f0             	mov    %rsi,%rax
ffffffff80214088:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021408c:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214090:	0f 84 03 ea ff ff    	je     ffffffff80212a99 <_RME_Svc_Handler+0x1e29>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214096:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021409d:	e9 8e d9 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802140a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    Object=RME_CAP_GETOBJ(Cpt_Del,rme_ptr_t);
ffffffff802140a8:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
    Size=RME_CPT_SIZE(Cpt_Del->Entry_Num);
ffffffff802140ac:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff802140b0:	31 d2                	xor    %edx,%edx
ffffffff802140b2:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802140b6:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
ffffffff802140bb:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Cpt_Del,Type_Stat);
ffffffff802140be:	84 d2                	test   %dl,%dl
ffffffff802140c0:	0f 84 87 f3 ff ff    	je     ffffffff8021344d <_RME_Svc_Handler+0x27dd>
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
ffffffff802140c6:	48 89 cf             	mov    %rcx,%rdi
ffffffff802140c9:	e8 b2 be ff ff       	call   ffffffff8020ff80 <_RME_Kot_Erase>
    return 0;
ffffffff802140ce:	31 f6                	xor    %esi,%esi
ffffffff802140d0:	e9 5b d9 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff802140d5:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802140dc:	e9 4f d9 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802140e1:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802140e8:	f0 48 0f c1 45 28    	lock xadd %rax,0x28(%rbp)
            return RME_ERR_SIV_FULL;
ffffffff802140ee:	48 c7 c6 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rsi
ffffffff802140f5:	e9 36 d9 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff802140fa:	31 f6                	xor    %esi,%esi
ffffffff802140fc:	48 89 df             	mov    %rbx,%rdi
ffffffff802140ff:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff80214104:	48 89 0c 24          	mov    %rcx,(%rsp)
ffffffff80214108:	e8 33 6f 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff8021410d:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
ffffffff80214112:	48 8b 0c 24          	mov    (%rsp),%rcx
ffffffff80214116:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
ffffffff8021411b:	0f 84 62 f3 ff ff    	je     ffffffff80213483 <_RME_Svc_Handler+0x2813>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80214121:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80214126:	48 89 45 40          	mov    %rax,0x40(%rbp)
    for(Count=0U;Count<Number;Count++)
ffffffff8021412a:	e9 51 cf ff ff       	jmp    ffffffff80211080 <_RME_Svc_Handler+0x410>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff8021412f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214136:	e9 3d d5 ff ff       	jmp    ffffffff80211678 <_RME_Svc_Handler+0xa08>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8021413b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214142:	e9 e9 d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80214147:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021414e:	e9 dd d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            return RME_ERR_PTH_INVSTATE;
ffffffff80214153:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021415a:	e9 d1 d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8021415f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214166:	e9 c5 d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8021416b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214172:	e9 b9 d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80214177:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021417e:	e9 ad d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80214183:	31 c9                	xor    %ecx,%ecx
ffffffff80214185:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021418a:	0f 94 c1             	sete   %cl
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8021418d:	80 f9 01             	cmp    $0x1,%cl
ffffffff80214190:	48 19 f6             	sbb    %rsi,%rsi
ffffffff80214193:	e9 98 d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff80214198:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff8021419d:	e8 de bd ff ff       	call   ffffffff8020ff80 <_RME_Kot_Erase>
    return 0;
ffffffff802141a2:	31 f6                	xor    %esi,%esi
ffffffff802141a4:	e9 87 d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff802141a9:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff802141b0:	e9 7b d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            return RME_ERR_PTH_PRIO;
ffffffff802141b5:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff802141bc:	e9 6f d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff802141c1:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802141c8:	e9 63 d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        Flag=RME_THD_EXCPEND_FLAG;
ffffffff802141cd:	48 b8 00 00 00 00 00 	movabs $0x6000000000000000,%rax
ffffffff802141d4:	00 00 60 
ffffffff802141d7:	48 83 7a 20 00       	cmpq   $0x0,0x20(%rdx)
ffffffff802141dc:	48 b9 00 00 00 00 00 	movabs $0x4000000000000000,%rcx
ffffffff802141e3:	00 00 40 
ffffffff802141e6:	48 0f 45 c1          	cmovne %rcx,%rax
ffffffff802141ea:	e9 1b e0 ff ff       	jmp    ffffffff8021220a <_RME_Svc_Handler+0x159a>
            return RME_ERR_PTH_PRIO;
ffffffff802141ef:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff802141f6:	e9 35 d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        return RME_ERR_PTH_INVSTATE;
ffffffff802141fb:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff80214202:	e9 29 d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        return RME_ERR_PTH_REFCNT;
ffffffff80214207:	48 c7 c6 32 ff ff ff 	mov    $0xffffffffffffff32,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021420e:	e9 1d d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80214213:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021421a:	e9 11 d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        return RME_ERR_PTH_PRIO;
ffffffff8021421f:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff80214226:	e9 05 d8 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8021422b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214232:	e9 f9 d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80214237:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021423e:	e9 ed d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80214243:	48 c7 c6 30 ff ff ff 	mov    $0xffffffffffffff30,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021424a:	e9 e1 d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff8021424f:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214256:	e9 d5 d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        return RME_ERR_SIV_BOOT;
ffffffff8021425b:	48 c7 c6 cd fe ff ff 	mov    $0xfffffffffffffecd,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80214262:	e9 c9 d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        RME_CAP_DEFROST(Sig_Del,Type_Stat);
ffffffff80214267:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff8021426e:	00 ff ff 
ffffffff80214271:	48 21 c1             	and    %rax,%rcx
ffffffff80214274:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80214279:	0f 94 c1             	sete   %cl
        return RME_ERR_SIV_ACT;
ffffffff8021427c:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff80214283:	e9 a8 d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        RME_CAP_DEFROST(Inv_Del,Type_Stat);
ffffffff80214288:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff8021428f:	00 ff ff 
ffffffff80214292:	48 21 c2             	and    %rax,%rdx
ffffffff80214295:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021429a:	0f 94 c2             	sete   %dl
        return RME_ERR_SIV_ACT;
ffffffff8021429d:	eb dd                	jmp    ffffffff8021427c <_RME_Svc_Handler+0x360c>
        RME_CAP_DEFROST(Thd_Del,Type_Stat);
ffffffff8021429f:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff802142a6:	00 ff ff 
ffffffff802142a9:	48 21 c2             	and    %rax,%rdx
ffffffff802142ac:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff802142b1:	0f 94 c2             	sete   %dl
        return RME_ERR_PTH_INVSTATE;
ffffffff802142b4:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff802142bb:	e9 70 d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802142c0:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802142c7:	e9 64 d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802142cc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802142d3:	e9 58 d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        return RME_ERR_PTH_NOTIF;
ffffffff802142d8:	48 c7 c6 31 ff ff ff 	mov    $0xffffffffffffff31,%rsi
ffffffff802142df:	e9 4c d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff802142e4:	85 c0                	test   %eax,%eax
ffffffff802142e6:	75 11                	jne    ffffffff802142f9 <_RME_Svc_Handler+0x3689>
ffffffff802142e8:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff802142ed:	48 c1 e1 33          	shl    $0x33,%rcx
ffffffff802142f1:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802142f6:	0f 94 c1             	sete   %cl
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff802142f9:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
ffffffff80214300:	e9 2b d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80214305:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff8021430c:	e9 1f d7 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff80214311:	85 c0                	test   %eax,%eax
ffffffff80214313:	75 e4                	jne    ffffffff802142f9 <_RME_Svc_Handler+0x3689>
ffffffff80214315:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff8021431c:	00 ff ff 
ffffffff8021431f:	48 21 c1             	and    %rax,%rcx
ffffffff80214322:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80214327:	0f 94 c1             	sete   %cl
	return (rme_ptr_t)Zero;
ffffffff8021432a:	eb cd                	jmp    ffffffff802142f9 <_RME_Svc_Handler+0x3689>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff8021432c:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff80214333:	e9 f8 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214338:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021433f:	e9 ec d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214344:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021434b:	e9 e0 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214350:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214357:	e9 d4 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff8021435c:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214363:	e9 c8 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214368:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021436f:	e9 bc d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214374:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021437b:	e9 b0 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214380:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214387:	e9 a4 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021438c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214393:	e9 98 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214398:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021439f:	e9 8c d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802143a4:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802143ab:	e9 80 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff802143b0:	85 c0                	test   %eax,%eax
ffffffff802143b2:	0f 85 41 ff ff ff    	jne    ffffffff802142f9 <_RME_Svc_Handler+0x3689>
ffffffff802143b8:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff802143bf:	00 ff ff 
ffffffff802143c2:	48 21 c2             	and    %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802143c5:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff802143ca:	0f 94 c2             	sete   %dl
	return (rme_ptr_t)Zero;
ffffffff802143cd:	e9 27 ff ff ff       	jmp    ffffffff802142f9 <_RME_Svc_Handler+0x3689>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff802143d2:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802143d9:	e9 52 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802143de:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802143e5:	e9 46 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802143ea:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802143f1:	e9 3a d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802143f6:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802143fd:	e9 2e d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214402:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214409:	e9 22 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021440e:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214415:	e9 16 d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021441a:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214421:	e9 0a d6 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214426:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021442d:	e9 fe d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214432:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214439:	e9 f2 d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021443e:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214445:	e9 e6 d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021444a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214451:	e9 da d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214456:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021445d:	e9 ce d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214462:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214469:	e9 c2 d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021446e:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214475:	e9 b6 d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021447a:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214481:	e9 aa d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214486:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021448d:	e9 9e d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214492:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214499:	e9 92 d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021449e:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802144a5:	e9 86 d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802144aa:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802144b1:	e9 7a d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802144b6:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802144bd:	e9 6e d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802144c2:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802144c9:	e9 62 d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        return RME_ERR_PGT_ADDR;
ffffffff802144ce:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff802144d5:	e9 56 d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802144da:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802144e1:	e9 4a d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802144e6:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802144ed:	e9 3e d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802144f2:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802144f9:	e9 32 d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802144fe:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214505:	e9 26 d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021450a:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214511:	e9 1a d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214516:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021451d:	e9 0e d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214522:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214529:	e9 02 d5 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff8021452e:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214535:	e9 f6 d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021453a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214541:	e9 ea d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214546:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021454d:	e9 de d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214552:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214559:	e9 d2 d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021455e:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214565:	e9 c6 d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021456a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214571:	e9 ba d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214576:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021457d:	e9 ae d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214582:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214589:	e9 a2 d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021458e:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214595:	e9 96 d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021459a:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802145a1:	e9 8a d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802145a6:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145ad:	e9 7e d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802145b2:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802145b9:	e9 72 d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802145be:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145c5:	e9 66 d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802145ca:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802145d1:	e9 5a d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802145d6:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802145dd:	e9 4e d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802145e2:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145e9:	e9 42 d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802145ee:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802145f5:	e9 36 d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802145fa:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214601:	e9 2a d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214606:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021460d:	e9 1e d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214612:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214619:	e9 12 d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021461e:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214625:	e9 06 d4 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021462a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214631:	e9 fa d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214636:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021463d:	e9 ee d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214642:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214649:	e9 e2 d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021464e:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214655:	e9 d6 d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021465a:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214661:	e9 ca d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214666:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021466d:	e9 be d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214672:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214679:	e9 b2 d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021467e:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214685:	e9 a6 d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021468a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214691:	e9 9a d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214696:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021469d:	e9 8e d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802146a2:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802146a9:	e9 82 d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802146ae:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802146b5:	e9 76 d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff802146ba:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802146c1:	e9 6a d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802146c6:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802146cd:	e9 5e d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802146d2:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802146d9:	e9 52 d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802146de:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802146e5:	e9 46 d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802146ea:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802146f1:	e9 3a d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802146f6:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802146fd:	e9 2e d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214702:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214709:	e9 22 d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021470e:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214715:	e9 16 d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021471a:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214721:	e9 0a d3 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214726:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021472d:	e9 fe d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214732:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214739:	e9 f2 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021473e:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214745:	e9 e6 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021474a:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214751:	e9 da d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214756:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021475d:	e9 ce d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214762:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214769:	e9 c2 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff8021476e:	48 c7 c6 f6 ff ff ff 	mov    $0xfffffffffffffff6,%rsi
ffffffff80214775:	e9 b6 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021477a:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214781:	e9 aa d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff80214786:	85 c0                	test   %eax,%eax
ffffffff80214788:	0f 85 6b fb ff ff    	jne    ffffffff802142f9 <_RME_Svc_Handler+0x3689>
ffffffff8021478e:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff80214795:	00 ff ff 
ffffffff80214798:	48 21 c2             	and    %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8021479b:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
ffffffff802147a0:	0f 94 c2             	sete   %dl
	return (rme_ptr_t)Zero;
ffffffff802147a3:	e9 51 fb ff ff       	jmp    ffffffff802142f9 <_RME_Svc_Handler+0x3689>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff802147a8:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802147af:	e9 7c d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802147b4:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802147bb:	e9 70 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802147c0:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802147c7:	e9 64 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802147cc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802147d3:	e9 58 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802147d8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802147df:	e9 4c d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802147e4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802147eb:	e9 40 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802147f0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802147f7:	e9 34 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802147fc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214803:	e9 28 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214808:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021480f:	e9 1c d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214814:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021481b:	e9 10 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214820:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214827:	e9 04 d2 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021482c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214833:	e9 f8 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214838:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021483f:	e9 ec d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214844:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021484b:	e9 e0 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214850:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214857:	e9 d4 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021485c:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214863:	e9 c8 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214868:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021486f:	e9 bc d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214874:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021487b:	e9 b0 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214880:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214887:	e9 a4 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021488c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214893:	e9 98 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214898:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021489f:	e9 8c d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
        return RME_ERR_PGT_ADDR;
ffffffff802148a4:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff802148ab:	e9 80 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802148b0:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802148b7:	e9 74 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802148bc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802148c3:	e9 68 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802148c8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802148cf:	e9 5c d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802148d4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802148db:	e9 50 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802148e0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802148e7:	e9 44 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802148ec:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802148f3:	e9 38 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802148f8:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802148ff:	e9 2c d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214904:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021490b:	e9 20 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214910:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214917:	e9 14 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021491c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214923:	e9 08 d1 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214928:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021492f:	e9 fc d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214934:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021493b:	e9 f0 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214940:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214947:	e9 e4 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021494c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214953:	e9 d8 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214958:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021495f:	e9 cc d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214964:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021496b:	e9 c0 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214970:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214977:	e9 b4 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff8021497c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214983:	e9 a8 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214988:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021498f:	e9 9c d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214994:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021499b:	e9 90 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802149a0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802149a7:	e9 84 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802149ac:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802149b3:	e9 78 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff802149b8:	45 85 e4             	test   %r12d,%r12d
ffffffff802149bb:	0f 85 38 f9 ff ff    	jne    ffffffff802142f9 <_RME_Svc_Handler+0x3689>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802149c1:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802149c6:	4c 89 e0             	mov    %r12,%rax
ffffffff802149c9:	48 c1 e2 32          	shl    $0x32,%rdx
ffffffff802149cd:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff802149d3:	0f 94 c2             	sete   %dl
	return (rme_ptr_t)Zero;
ffffffff802149d6:	e9 1e f9 ff ff       	jmp    ffffffff802142f9 <_RME_Svc_Handler+0x3689>
ffffffff802149db:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802149e2:	e9 49 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802149e7:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802149ee:	e9 3d d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802149f3:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802149fa:	e9 31 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff802149ff:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a06:	e9 25 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214a0b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214a12:	e9 19 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214a17:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a1e:	e9 0d d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214a23:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a2a:	e9 01 d0 ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80214a2f:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff80214a36:	e9 f5 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214a3b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a42:	e9 e9 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214a47:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a4e:	e9 dd cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214a53:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214a5a:	e9 d1 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214a5f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214a66:	e9 c5 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214a6b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a72:	e9 b9 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214a77:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a7e:	e9 ad cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214a83:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214a8a:	e9 a1 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214a8f:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a96:	e9 95 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214a9b:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214aa2:	e9 89 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214aa7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214aae:	e9 7d cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214ab3:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214aba:	e9 71 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214abf:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214ac6:	e9 65 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214acb:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214ad2:	e9 59 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214ad7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ade:	e9 4d cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214ae3:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214aea:	e9 41 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214aef:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214af6:	e9 35 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214afb:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b02:	e9 29 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b07:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214b0e:	e9 1d cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b13:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b1a:	e9 11 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b1f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b26:	e9 05 cf ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b2b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214b32:	e9 f9 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b37:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b3e:	e9 ed ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b43:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b4a:	e9 e1 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b4f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b56:	e9 d5 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b5b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214b62:	e9 c9 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b67:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b6e:	e9 bd ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b73:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b7a:	e9 b1 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b7f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b86:	e9 a5 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b8b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214b92:	e9 99 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214b97:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b9e:	e9 8d ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214ba3:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214baa:	e9 81 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214baf:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214bb6:	e9 75 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214bbb:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214bc2:	e9 69 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214bc7:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214bce:	e9 5d ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214bd3:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214bda:	e9 51 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214bdf:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214be6:	e9 45 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214beb:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214bf2:	e9 39 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214bf7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214bfe:	e9 2d ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c03:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c0a:	e9 21 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c0f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c16:	e9 15 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c1b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c22:	e9 09 ce ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c27:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c2e:	e9 fd cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c33:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c3a:	e9 f1 cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c3f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c46:	e9 e5 cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c4b:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c52:	e9 d9 cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c57:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c5e:	e9 cd cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c63:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c6a:	e9 c1 cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c6f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c76:	e9 b5 cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c7b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c82:	e9 a9 cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c87:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c8e:	e9 9d cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c93:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c9a:	e9 91 cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214c9f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214ca6:	e9 85 cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214cab:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214cb2:	e9 79 cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214cb7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214cbe:	e9 6d cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214cc3:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214cca:	e9 61 cd ff ff       	jmp    ffffffff80211a30 <_RME_Svc_Handler+0xdc0>
ffffffff80214ccf:	90                   	nop

ffffffff80214cd0 <_RME_Kern_Snd>:
{
ffffffff80214cd0:	f3 0f 1e fa          	endbr64
ffffffff80214cd4:	41 54                	push   %r12
ffffffff80214cd6:	55                   	push   %rbp
ffffffff80214cd7:	53                   	push   %rbx
    Thd_Sig=Cap_Sig->Thd;
ffffffff80214cd8:	48 8b 6f 30          	mov    0x30(%rdi),%rbp
{
ffffffff80214cdc:	48 89 fb             	mov    %rdi,%rbx
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff80214cdf:	48 85 ed             	test   %rbp,%rbp
ffffffff80214ce2:	74 0e                	je     ffffffff80214cf2 <_RME_Kern_Snd+0x22>
        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff80214ce4:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff80214ce8:	e8 52 6b ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80214ced:	49 39 c4             	cmp    %rax,%r12
ffffffff80214cf0:	74 26                	je     ffffffff80214d18 <_RME_Kern_Snd+0x48>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80214cf2:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80214cf7:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80214cfd:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80214d04:	ff ff 7f 
ffffffff80214d07:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214d0a:	72 7f                	jb     ffffffff80214d8b <_RME_Kern_Snd+0xbb>
    return 0;
ffffffff80214d0c:	31 c0                	xor    %eax,%eax
}
ffffffff80214d0e:	5b                   	pop    %rbx
ffffffff80214d0f:	5d                   	pop    %rbp
ffffffff80214d10:	41 5c                	pop    %r12
ffffffff80214d12:	c3                   	ret
ffffffff80214d13:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff80214d18:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80214d1f:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214d24:	e8 17 63 00 00       	call   ffffffff8021b040 <__RME_Svc_Retval_Set>
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff80214d29:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff80214d2e:	74 78                	je     ffffffff80214da8 <_RME_Kern_Snd+0xd8>
    Prio=Thd->Sched.Prio;
ffffffff80214d30:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff80214d34:	48 8b 45 28          	mov    0x28(%rbp),%rax
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff80214d38:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff80214d3f:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214d40:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214d43:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80214d47:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff80214d4b:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff80214d50:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff80214d54:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214d59:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff80214d5c:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214d60:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff80214d64:	66 48 0f 6e ca       	movq   %rdx,%xmm1
ffffffff80214d69:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff80214d6d:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff80214d71:	48 89 2a             	mov    %rbp,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214d74:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80214d79:	48 d3 e2             	shl    %cl,%rdx
ffffffff80214d7c:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        Cap_Sig->Thd=RME_NULL;
ffffffff80214d81:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff80214d88:	00 
ffffffff80214d89:	eb 81                	jmp    ffffffff80214d0c <_RME_Kern_Snd+0x3c>
ffffffff80214d8b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80214d92:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
            return RME_ERR_SIV_FULL;
ffffffff80214d98:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff80214d9f:	e9 6a ff ff ff       	jmp    ffffffff80214d0e <_RME_Kern_Snd+0x3e>
ffffffff80214da4:	0f 1f 40 00          	nopl   0x0(%rax)
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff80214da8:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff80214daf:	00 
            _RME_Run_Notif(Thd_Sig);
ffffffff80214db0:	48 89 ef             	mov    %rbp,%rdi
ffffffff80214db3:	e8 58 8d ff ff       	call   ffffffff8020db10 <_RME_Run_Notif>
ffffffff80214db8:	eb c7                	jmp    ffffffff80214d81 <_RME_Kern_Snd+0xb1>
ffffffff80214dba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80214dc0 <_RME_Thd_Fatal>:
{
ffffffff80214dc0:	f3 0f 1e fa          	endbr64
ffffffff80214dc4:	41 55                	push   %r13
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80214dc6:	31 f6                	xor    %esi,%esi
ffffffff80214dc8:	ba 01 00 00 00       	mov    $0x1,%edx
{
ffffffff80214dcd:	41 54                	push   %r12
ffffffff80214dcf:	55                   	push   %rbp
ffffffff80214dd0:	48 89 fd             	mov    %rdi,%rbp
ffffffff80214dd3:	53                   	push   %rbx
ffffffff80214dd4:	48 83 ec 08          	sub    $0x8,%rsp
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80214dd8:	e8 d3 79 ff ff       	call   ffffffff8020c7b0 <_RME_Inv_Ret>
ffffffff80214ddd:	48 85 c0             	test   %rax,%rax
ffffffff80214de0:	75 0e                	jne    ffffffff80214df0 <_RME_Thd_Fatal+0x30>
}
ffffffff80214de2:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80214de6:	5b                   	pop    %rbx
ffffffff80214de7:	5d                   	pop    %rbp
ffffffff80214de8:	41 5c                	pop    %r12
ffffffff80214dea:	41 5d                	pop    %r13
ffffffff80214dec:	c3                   	ret
ffffffff80214ded:	0f 1f 00             	nopl   (%rax)
        Local=RME_CPU_LOCAL();
ffffffff80214df0:	e8 4a 6a ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
        Thd_Cur=Local->Thd_Cur;
ffffffff80214df5:	4c 8b 60 08          	mov    0x8(%rax),%r12
        Local=RME_CPU_LOCAL();
ffffffff80214df9:	49 89 c5             	mov    %rax,%r13
        if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80214dfc:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80214e03:	ff ff 7f 
ffffffff80214e06:	49 39 44 24 30       	cmp    %rax,0x30(%r12)
ffffffff80214e0b:	74 73                	je     ffffffff80214e80 <_RME_Thd_Fatal+0xc0>
    Prio=Thd->Sched.Prio;
ffffffff80214e0d:	49 8b 4c 24 40       	mov    0x40(%r12),%rcx
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80214e12:	49 8b 34 24          	mov    (%r12),%rsi
ffffffff80214e16:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
    Local=Thd->Sched.Local;
ffffffff80214e1b:	49 8b 44 24 28       	mov    0x28(%r12),%rax
    Next->Prev=Prev;
ffffffff80214e20:	48 89 56 08          	mov    %rdx,0x8(%rsi)
    Prev->Next=Next;
ffffffff80214e24:	48 89 32             	mov    %rsi,(%rdx)
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff80214e27:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214e2a:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80214e2e:	48 8d 54 30 28       	lea    0x28(%rax,%rsi,1),%rdx
ffffffff80214e33:	48 39 54 06 28       	cmp    %rdx,0x28(%rsi,%rax,1)
ffffffff80214e38:	0f 84 b2 00 00 00    	je     ffffffff80214ef0 <_RME_Thd_Fatal+0x130>
        Thd_Cur->Sched.State=RME_THD_EXCPEND;
ffffffff80214e3e:	49 c7 44 24 38 03 00 	movq   $0x3,0x38(%r12)
ffffffff80214e45:	00 00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80214e47:	49 8d 44 24 10       	lea    0x10(%r12),%rax
ffffffff80214e4c:	49 39 44 24 10       	cmp    %rax,0x10(%r12)
ffffffff80214e51:	74 65                	je     ffffffff80214eb8 <_RME_Thd_Fatal+0xf8>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80214e53:	49 8b 7c 24 70       	mov    0x70(%r12),%rdi
ffffffff80214e58:	48 85 ff             	test   %rdi,%rdi
ffffffff80214e5b:	74 05                	je     ffffffff80214e62 <_RME_Thd_Fatal+0xa2>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80214e5d:	e8 6e fe ff ff       	call   ffffffff80214cd0 <_RME_Kern_Snd>
}
ffffffff80214e62:	48 83 c4 08          	add    $0x8,%rsp
        _RME_Kern_High(Reg,Local);
ffffffff80214e66:	4c 89 ee             	mov    %r13,%rsi
ffffffff80214e69:	48 89 ef             	mov    %rbp,%rdi
}
ffffffff80214e6c:	5b                   	pop    %rbx
ffffffff80214e6d:	5d                   	pop    %rbp
ffffffff80214e6e:	41 5c                	pop    %r12
ffffffff80214e70:	41 5d                	pop    %r13
        _RME_Kern_High(Reg,Local);
ffffffff80214e72:	e9 f9 bc ff ff       	jmp    ffffffff80210b70 <_RME_Kern_High>
ffffffff80214e77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80214e7e:	00 00 
ffffffff80214e80:	48 c7 c3 18 c7 21 80 	mov    $0xffffffff8021c718,%rbx
ffffffff80214e87:	eb 1d                	jmp    ffffffff80214ea6 <_RME_Thd_Fatal+0xe6>
ffffffff80214e89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count++]);
ffffffff80214e90:	e8 1b 3f 00 00       	call   ffffffff80218db0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff80214e95:	48 83 c3 02          	add    $0x2,%rbx
ffffffff80214e99:	48 81 fb 18 c8 21 80 	cmp    $0xffffffff8021c818,%rbx
ffffffff80214ea0:	0f 84 67 ff ff ff    	je     ffffffff80214e0d <_RME_Thd_Fatal+0x4d>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff80214ea6:	0f be 3b             	movsbl (%rbx),%edi
ffffffff80214ea9:	40 84 ff             	test   %dil,%dil
ffffffff80214eac:	75 e2                	jne    ffffffff80214e90 <_RME_Thd_Fatal+0xd0>
ffffffff80214eae:	e9 5a ff ff ff       	jmp    ffffffff80214e0d <_RME_Thd_Fatal+0x4d>
ffffffff80214eb3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80214eb8:	49 8b 54 24 68       	mov    0x68(%r12),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80214ebd:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
ffffffff80214ec4:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff80214ec8:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80214ecf:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    New->Next=Next;
ffffffff80214ed4:	66 48 0f 6e c9       	movq   %rcx,%xmm1
ffffffff80214ed9:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff80214edd:	41 0f 11 44 24 10    	movups %xmm0,0x10(%r12)
    Prev->Next=New;
ffffffff80214ee3:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff80214ee6:	e9 68 ff ff ff       	jmp    ffffffff80214e53 <_RME_Thd_Fatal+0x93>
ffffffff80214eeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff80214ef0:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214ef3:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80214ef8:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff80214efc:	48 d3 e2             	shl    %cl,%rdx
ffffffff80214eff:	48 f7 d2             	not    %rdx
ffffffff80214f02:	48 21 54 f0 20       	and    %rdx,0x20(%rax,%rsi,8)
ffffffff80214f07:	e9 32 ff ff ff       	jmp    ffffffff80214e3e <_RME_Thd_Fatal+0x7e>
ffffffff80214f0c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80214f10 <_RME_Tim_Handler>:
{
ffffffff80214f10:	f3 0f 1e fa          	endbr64
ffffffff80214f14:	41 56                	push   %r14
ffffffff80214f16:	41 55                	push   %r13
ffffffff80214f18:	49 89 fd             	mov    %rdi,%r13
ffffffff80214f1b:	41 54                	push   %r12
ffffffff80214f1d:	55                   	push   %rbp
ffffffff80214f1e:	48 89 f5             	mov    %rsi,%rbp
ffffffff80214f21:	53                   	push   %rbx
    Local=RME_CPU_LOCAL();
ffffffff80214f22:	e8 18 69 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff80214f27:	48 b9 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rcx
ffffffff80214f2e:	ff ff 7f 
    Local=RME_CPU_LOCAL();
ffffffff80214f31:	48 89 c3             	mov    %rax,%rbx
    Thd_Cur=Local->Thd_Cur;
ffffffff80214f34:	48 8b 40 08          	mov    0x8(%rax),%rax
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff80214f38:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80214f3c:	48 39 d1             	cmp    %rdx,%rcx
ffffffff80214f3f:	72 10                	jb     ffffffff80214f51 <_RME_Tim_Handler+0x41>
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff80214f41:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80214f44:	0f 83 f6 00 00 00    	jae    ffffffff80215040 <_RME_Tim_Handler+0x130>
            Thd_Cur->Sched.Slice-=Slice;
ffffffff80214f4a:	48 29 ea             	sub    %rbp,%rdx
ffffffff80214f4d:	48 89 50 30          	mov    %rdx,0x30(%rax)
    _RME_Kern_Snd(Local->Sig_Tim);
ffffffff80214f51:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff80214f55:	e8 76 fd ff ff       	call   ffffffff80214cd0 <_RME_Kern_Snd>
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80214f5a:	48 8b 43 20          	mov    0x20(%rbx),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80214f5e:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80214f62:	48 83 f8 01          	cmp    $0x1,%rax
    Thd_Cur=Local->Thd_Cur;
ffffffff80214f66:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80214f6a:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80214f6d:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80214f71:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80214f76:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80214f7a:	4c 8b 64 03 08       	mov    0x8(%rbx,%rax,1),%r12
    if(Thd_New==Thd_Cur)
ffffffff80214f7f:	49 39 ec             	cmp    %rbp,%r12
ffffffff80214f82:	0f 84 89 00 00 00    	je     ffffffff80215011 <_RME_Tim_Handler+0x101>
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80214f88:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
ffffffff80214f8d:	75 0b                	jne    ffffffff80214f9a <_RME_Tim_Handler+0x8a>
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff80214f8f:	49 8b 44 24 40       	mov    0x40(%r12),%rax
ffffffff80214f94:	48 39 45 40          	cmp    %rax,0x40(%rbp)
ffffffff80214f98:	73 77                	jae    ffffffff80215011 <_RME_Tim_Handler+0x101>
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff80214f9a:	4d 8b b4 24 90 00 00 	mov    0x90(%r12),%r14
ffffffff80214fa1:	00 
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff80214fa2:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80214fa9:	4c 89 ee             	mov    %r13,%rsi
ffffffff80214fac:	e8 ff 56 00 00       	call   ffffffff8021a6b0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80214fb1:	4c 89 f6             	mov    %r14,%rsi
ffffffff80214fb4:	4c 89 ef             	mov    %r13,%rdi
ffffffff80214fb7:	e8 f4 56 00 00       	call   ffffffff8021a6b0 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80214fbc:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
ffffffff80214fc3:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80214fca:	48 39 d0             	cmp    %rdx,%rax
ffffffff80214fcd:	74 51                	je     ffffffff80215020 <_RME_Tim_Handler+0x110>
ffffffff80214fcf:	48 85 c0             	test   %rax,%rax
ffffffff80214fd2:	74 4c                	je     ffffffff80215020 <_RME_Tim_Handler+0x110>
        return Inv_Top->Prc->Pgt;
ffffffff80214fd4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214fd8:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80214fdc:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff80214fe3:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80214fe4:	48 85 c0             	test   %rax,%rax
ffffffff80214fe7:	74 4c                	je     ffffffff80215035 <_RME_Tim_Handler+0x125>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80214fe9:	49 8d 8c 24 98 00 00 	lea    0x98(%r12),%rcx
ffffffff80214ff0:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80214ff1:	48 39 c8             	cmp    %rcx,%rax
ffffffff80214ff4:	74 3f                	je     ffffffff80215035 <_RME_Tim_Handler+0x125>
        return Inv_Top->Prc->Pgt;
ffffffff80214ff6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214ffa:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff80214ffe:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff80215002:	48 39 42 18          	cmp    %rax,0x18(%rdx)
ffffffff80215006:	74 05                	je     ffffffff8021500d <_RME_Tim_Handler+0xfd>
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff80215008:	e8 93 5a 00 00       	call   ffffffff8021aaa0 <__RME_Pgt_Set>
    Local->Thd_Cur=Thd_New;
ffffffff8021500d:	4c 89 63 08          	mov    %r12,0x8(%rbx)
}
ffffffff80215011:	5b                   	pop    %rbx
ffffffff80215012:	5d                   	pop    %rbp
ffffffff80215013:	41 5c                	pop    %r12
ffffffff80215015:	41 5d                	pop    %r13
ffffffff80215017:	41 5e                	pop    %r14
ffffffff80215019:	c3                   	ret
ffffffff8021501a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return Thd->Sched.Prc->Pgt;
ffffffff80215020:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff80215024:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80215028:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff8021502f:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80215030:	48 85 c0             	test   %rax,%rax
ffffffff80215033:	75 b4                	jne    ffffffff80214fe9 <_RME_Tim_Handler+0xd9>
        return Thd->Sched.Prc->Pgt;
ffffffff80215035:	49 8b 44 24 58       	mov    0x58(%r12),%rax
ffffffff8021503a:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8021503e:	eb be                	jmp    ffffffff80214ffe <_RME_Tim_Handler+0xee>
    Prio=Thd->Sched.Prio;
ffffffff80215040:	48 8b 48 40          	mov    0x40(%rax),%rcx
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80215044:	48 8b 38             	mov    (%rax),%rdi
            Thd_Cur->Sched.Slice=0U;
ffffffff80215047:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021504e:	00 
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021504f:	48 8b 70 08          	mov    0x8(%rax),%rsi
    Local=Thd->Sched.Local;
ffffffff80215053:	48 8b 50 28          	mov    0x28(%rax),%rdx
    Next->Prev=Prev;
ffffffff80215057:	48 89 77 08          	mov    %rsi,0x8(%rdi)
    Prev->Next=Next;
ffffffff8021505b:	48 89 3e             	mov    %rdi,(%rsi)
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff8021505e:	48 89 cf             	mov    %rcx,%rdi
ffffffff80215061:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff80215065:	48 8d 74 3a 28       	lea    0x28(%rdx,%rdi,1),%rsi
ffffffff8021506a:	48 39 74 17 28       	cmp    %rsi,0x28(%rdi,%rdx,1)
ffffffff8021506f:	74 2f                	je     ffffffff802150a0 <_RME_Tim_Handler+0x190>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80215071:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80215078:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80215079:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff8021507d:	48 39 50 10          	cmp    %rdx,0x10(%rax)
ffffffff80215081:	74 3d                	je     ffffffff802150c0 <_RME_Tim_Handler+0x1b0>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80215083:	48 8b 78 70          	mov    0x70(%rax),%rdi
ffffffff80215087:	48 85 ff             	test   %rdi,%rdi
ffffffff8021508a:	0f 84 c1 fe ff ff    	je     ffffffff80214f51 <_RME_Tim_Handler+0x41>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80215090:	e8 3b fc ff ff       	call   ffffffff80214cd0 <_RME_Kern_Snd>
ffffffff80215095:	e9 b7 fe ff ff       	jmp    ffffffff80214f51 <_RME_Tim_Handler+0x41>
ffffffff8021509a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff802150a0:	48 89 cf             	mov    %rcx,%rdi
ffffffff802150a3:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802150a8:	48 c1 ef 06          	shr    $0x6,%rdi
ffffffff802150ac:	48 d3 e6             	shl    %cl,%rsi
ffffffff802150af:	48 f7 d6             	not    %rsi
ffffffff802150b2:	48 21 74 fa 20       	and    %rsi,0x20(%rdx,%rdi,8)
ffffffff802150b7:	eb b8                	jmp    ffffffff80215071 <_RME_Tim_Handler+0x161>
ffffffff802150b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff802150c0:	48 8b 48 68          	mov    0x68(%rax),%rcx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff802150c4:	48 8b b1 80 00 00 00 	mov    0x80(%rcx),%rsi
    Next->Prev=New;
ffffffff802150cb:	48 89 91 80 00 00 00 	mov    %rdx,0x80(%rcx)
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff802150d2:	48 83 c1 78          	add    $0x78,%rcx
ffffffff802150d6:	66 48 0f 6e c1       	movq   %rcx,%xmm0
    New->Next=Next;
ffffffff802150db:	66 48 0f 6e ce       	movq   %rsi,%xmm1
ffffffff802150e0:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff802150e4:	0f 11 40 10          	movups %xmm0,0x10(%rax)
    Prev->Next=New;
ffffffff802150e8:	48 89 16             	mov    %rdx,(%rsi)
}
ffffffff802150eb:	eb 96                	jmp    ffffffff80215083 <_RME_Tim_Handler+0x173>
ffffffff802150ed:	0f 1f 00             	nopl   (%rax)

ffffffff802150f0 <_RME_Kfn_Boot_Crt>:
{
ffffffff802150f0:	f3 0f 1e fa          	endbr64
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802150f4:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff802150f8:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff802150fe:	75 40                	jne    ffffffff80215140 <_RME_Kfn_Boot_Crt+0x50>
ffffffff80215100:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80215103:	0f 83 17 01 00 00    	jae    ffffffff80215220 <_RME_Kfn_Boot_Crt+0x130>
ffffffff80215109:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80215110:	ff 00 00 
ffffffff80215113:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80215117:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021511b:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80215122:	00 00 00 
ffffffff80215125:	48 8b 06             	mov    (%rsi),%rax
ffffffff80215128:	48 21 c1             	and    %rax,%rcx
ffffffff8021512b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021512e:	75 7e                	jne    ffffffff802151ae <_RME_Kfn_Boot_Crt+0xbe>
ffffffff80215130:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215137:	c3                   	ret
ffffffff80215138:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021513f:	00 
ffffffff80215140:	48 89 f0             	mov    %rsi,%rax
ffffffff80215143:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215147:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021514a:	0f 83 d0 00 00 00    	jae    ffffffff80215220 <_RME_Kfn_Boot_Crt+0x130>
ffffffff80215150:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80215157:	00 00 00 
ffffffff8021515a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021515e:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80215162:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80215169:	ff 00 00 
ffffffff8021516c:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021516f:	49 89 c9             	mov    %rcx,%r9
ffffffff80215172:	49 21 f9             	and    %rdi,%r9
ffffffff80215175:	4d 39 c1             	cmp    %r8,%r9
ffffffff80215178:	74 b6                	je     ffffffff80215130 <_RME_Kfn_Boot_Crt+0x40>
ffffffff8021517a:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021517e:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80215182:	0f 85 a8 00 00 00    	jne    ffffffff80215230 <_RME_Kfn_Boot_Crt+0x140>
ffffffff80215188:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8021518c:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80215192:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80215195:	0f 83 85 00 00 00    	jae    ffffffff80215220 <_RME_Kfn_Boot_Crt+0x130>
ffffffff8021519b:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021519f:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff802151a3:	48 8b 06             	mov    (%rsi),%rax
ffffffff802151a6:	48 21 c7             	and    %rax,%rdi
ffffffff802151a9:	4c 39 c7             	cmp    %r8,%rdi
ffffffff802151ac:	74 82                	je     ffffffff80215130 <_RME_Kfn_Boot_Crt+0x40>
ffffffff802151ae:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802151b2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802151b6:	75 78                	jne    ffffffff80215230 <_RME_Kfn_Boot_Crt+0x140>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802151b8:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff802151bc:	74 7a                	je     ffffffff80215238 <_RME_Kfn_Boot_Crt+0x148>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kfn,struct RME_Cap_Kfn*,Kfn_Crt);
ffffffff802151be:	48 3b 56 28          	cmp    0x28(%rsi),%rdx
ffffffff802151c2:	73 5c                	jae    ffffffff80215220 <_RME_Kfn_Boot_Crt+0x130>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802151c4:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff802151cb:	00 00 00 
ffffffff802151ce:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802151d2:	31 c0                	xor    %eax,%eax
ffffffff802151d4:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff802151d8:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802151dd:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff802151e0:	84 c9                	test   %cl,%cl
ffffffff802151e2:	74 5c                	je     ffffffff80215240 <_RME_Kfn_Boot_Crt+0x150>
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff802151e4:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
ffffffff802151eb:	ff ff ff 
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff802151ee:	48 c7 42 20 01 00 00 	movq   $0x1,0x20(%rdx)
ffffffff802151f5:	00 
    Kfn_Crt->Head.Root_Ref=1U;
ffffffff802151f6:	48 c7 42 08 01 00 00 	movq   $0x1,0x8(%rdx)
ffffffff802151fd:	00 
    Kfn_Crt->Head.Object=0U;
ffffffff802151fe:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff80215205:	00 
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff80215206:	48 89 42 10          	mov    %rax,0x10(%rdx)
    RME_WRITE_RELEASE(&(Kfn_Crt->Head.Type_Stat),
ffffffff8021520a:	48 b8 00 00 00 00 00 	movabs $0x1000000000000,%rax
ffffffff80215211:	00 01 00 
ffffffff80215214:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff80215217:	31 c0                	xor    %eax,%eax
ffffffff80215219:	c3                   	ret
ffffffff8021521a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80215220:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215227:	c3                   	ret
ffffffff80215228:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021522f:	00 
ffffffff80215230:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215237:	c3                   	ret
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80215238:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021523f:	c3                   	ret
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff80215240:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80215247:	c3                   	ret
ffffffff80215248:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021524f:	00 

ffffffff80215250 <__RME_X64_LAPIC_Init>:
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff80215250:	48 8b 05 d9 01 01 00 	mov    0x101d9(%rip),%rax        # ffffffff80225430 <RME_X64_LAPIC_Addr>

    /* Enable local APIC; set spurious interrupt vector to 32 */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_SVR, RME_X64_LAPIC_SVR_ENABLE|RME_X64_INT_SPUR);
ffffffff80215257:	48 8b 15 d2 01 01 00 	mov    0x101d2(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff8021525e:	48 b8 f0 00 00 00 00 	movabs $0xffff8000000000f0,%rax
ffffffff80215265:	80 ff ff 
ffffffff80215268:	c7 04 02 80 01 00 00 	movl   $0x180,(%rdx,%rax,1)

    /* Disable local interrupt lines */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff8021526f:	48 8b 15 ba 01 01 00 	mov    0x101ba(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);

    /* Disable performance counter overflow interrupts when there is one */
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff80215276:	48 8d 80 40 ff ff ff 	lea    -0xc0(%rax),%rax
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff8021527d:	c7 84 10 20 03 00 00 	movl   $0x10000,0x320(%rax,%rdx,1)
ffffffff80215284:	00 00 01 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);
ffffffff80215288:	48 8b 15 a1 01 01 00 	mov    0x101a1(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff8021528f:	c7 84 10 30 03 00 00 	movl   $0x10000,0x330(%rax,%rdx,1)
ffffffff80215296:	00 00 01 00 
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff8021529a:	48 8b 15 8f 01 01 00 	mov    0x1018f(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff802152a1:	f7 04 10 00 00 fc 00 	testl  $0xfc0000,(%rax,%rdx,1)
ffffffff802152a8:	74 12                	je     ffffffff802152bc <__RME_X64_LAPIC_Init+0x6c>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_PCINT, RME_X64_LAPIC_MASKED);
ffffffff802152aa:	48 8b 15 7f 01 01 00 	mov    0x1017f(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff802152b1:	c7 84 10 10 03 00 00 	movl   $0x10000,0x310(%rax,%rdx,1)
ffffffff802152b8:	00 00 01 00 

    /* Map error interrupt to IRQ_ERROR */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ERROR, RME_X64_INT_ERROR);
ffffffff802152bc:	48 8b 15 6d 01 01 00 	mov    0x1016d(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff802152c3:	48 b8 70 03 00 00 00 	movabs $0xffff800000000370,%rax
ffffffff802152ca:	80 ff ff 
ffffffff802152cd:	c7 04 02 81 00 00 00 	movl   $0x81,(%rdx,%rax,1)

    /* Clear error status register (requires back-to-back writes) */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff802152d4:	48 8b 15 55 01 01 00 	mov    0x10155(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff802152db:	c7 84 10 10 ff ff ff 	movl   $0x0,-0xf0(%rax,%rdx,1)
ffffffff802152e2:	00 00 00 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff802152e6:	48 8b 15 43 01 01 00 	mov    0x10143(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff802152ed:	c7 84 10 10 ff ff ff 	movl   $0x0,-0xf0(%rax,%rdx,1)
ffffffff802152f4:	00 00 00 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff802152f8:	48 8b 15 31 01 01 00 	mov    0x10131(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff802152ff:	c7 84 10 40 fd ff ff 	movl   $0x0,-0x2c0(%rax,%rdx,1)
ffffffff80215306:	00 00 00 00 

    /* Acknowledge any outstanding interrupts */
    __RME_X64_LAPIC_Ack();

    /* Send an Init Level De-Assert to synchronise arbitration IDs */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0);
ffffffff8021530a:	48 8b 15 1f 01 01 00 	mov    0x1011f(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80215311:	c7 44 10 a0 00 00 00 	movl   $0x0,-0x60(%rax,%rdx,1)
ffffffff80215318:	00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_BCAST|
ffffffff80215319:	48 8b 05 10 01 01 00 	mov    0x10110(%rip),%rax        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80215320:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80215327:	80 ff ff 
ffffffff8021532a:	c7 04 10 00 85 08 00 	movl   $0x88500,(%rax,%rdx,1)
                                             RME_X64_LAPIC_ICRLO_INIT|
                                             RME_X64_LAPIC_ICRLO_LEVEL);
    while(RME_X64_LAPIC_READ(RME_X64_LAPIC_ICRLO)&RME_X64_LAPIC_ICRLO_DELIVS);
ffffffff80215331:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80215338:	48 8b 05 f1 00 01 00 	mov    0x100f1(%rip),%rax        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff8021533f:	8b 04 10             	mov    (%rax,%rdx,1),%eax
ffffffff80215342:	f6 c4 10             	test   $0x10,%ah
ffffffff80215345:	75 f1                	jne    ffffffff80215338 <__RME_X64_LAPIC_Init+0xe8>

    /* Enable interrupts on the APIC */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_TPR, 0);
ffffffff80215347:	48 8b 15 e2 00 01 00 	mov    0x100e2(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff8021534e:	48 b8 80 00 00 00 00 	movabs $0xffff800000000080,%rax
ffffffff80215355:	80 ff ff 
ffffffff80215358:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
}
ffffffff8021535f:	c3                   	ret

ffffffff80215360 <__RME_X64_CPU_Local_Init>:
{
ffffffff80215360:	55                   	push   %rbp
ffffffff80215361:	53                   	push   %rbx
ffffffff80215362:	48 83 ec 18          	sub    $0x18,%rsp
    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff80215366:	48 8b 05 63 11 01 00 	mov    0x11163(%rip),%rax        # ffffffff802264d0 <RME_X64_Layout+0x10>
ffffffff8021536d:	48 8b 1d 2c 11 01 00 	mov    0x1112c(%rip),%rbx        # ffffffff802264a0 <RME_X64_CPU_Cnt>
ffffffff80215374:	48 c1 e3 0d          	shl    $0xd,%rbx
ffffffff80215378:	48 01 c3             	add    %rax,%rbx
    for(Count=0;Count<256;Count++)
ffffffff8021537b:	48 8d 93 00 10 00 00 	lea    0x1000(%rbx),%rdx
    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff80215382:	48 89 d8             	mov    %rbx,%rax
ffffffff80215385:	0f 1f 00             	nopl   (%rax)
        IDT_Table[Count].Type_Attr=0;
ffffffff80215388:	c6 40 05 00          	movb   $0x0,0x5(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021538c:	48 83 c0 20          	add    $0x20,%rax
        IDT_Table[Count].Type_Attr=0;
ffffffff80215390:	c6 40 f5 00          	movb   $0x0,-0xb(%rax)
    for(Count=0;Count<256;Count++)
ffffffff80215394:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215397:	75 ef                	jne    ffffffff80215388 <__RME_X64_CPU_Local_Init+0x28>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215399:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff802153a0:	c7 43 02 08 00 00 8e 	movl   $0x8e000008,0x2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff802153a7:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff802153ac:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff802153b1:	66 89 03             	mov    %ax,(%rbx)
ffffffff802153b4:	48 89 c2             	mov    %rax,%rdx
ffffffff802153b7:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff802153bb:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff802153c0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802153c4:	89 43 08             	mov    %eax,0x8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff802153c7:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff802153ce:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff802153d4:	66 89 53 06          	mov    %dx,0x6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff802153d8:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff802153db:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff802153e1:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff802153e7:	66 89 43 10          	mov    %ax,0x10(%rbx)
ffffffff802153eb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802153ef:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff802153f3:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff802153f9:	89 43 18             	mov    %eax,0x18(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff802153fc:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215403:	66 89 53 16          	mov    %dx,0x16(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80215407:	48 89 c2             	mov    %rax,%rdx
ffffffff8021540a:	66 89 43 20          	mov    %ax,0x20(%rbx)
ffffffff8021540e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215412:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215416:	89 43 28             	mov    %eax,0x28(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80215419:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80215420:	66 89 53 26          	mov    %dx,0x26(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80215424:	48 89 c2             	mov    %rax,%rdx
ffffffff80215427:	66 89 43 30          	mov    %ax,0x30(%rbx)
ffffffff8021542b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021542f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215433:	89 43 38             	mov    %eax,0x38(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80215436:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8021543d:	66 89 53 36          	mov    %dx,0x36(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80215441:	48 89 c2             	mov    %rax,%rdx
ffffffff80215444:	66 89 43 40          	mov    %ax,0x40(%rbx)
ffffffff80215448:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021544c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215450:	89 43 48             	mov    %eax,0x48(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80215453:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8021545a:	66 89 53 46          	mov    %dx,0x46(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8021545e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215461:	66 89 43 50          	mov    %ax,0x50(%rbx)
ffffffff80215465:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215469:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021546d:	89 43 58             	mov    %eax,0x58(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff80215470:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80215477:	66 89 53 56          	mov    %dx,0x56(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8021547b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021547e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215482:	66 89 43 60          	mov    %ax,0x60(%rbx)
ffffffff80215486:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8021548a:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215491:	c7 43 12 08 00 00 8e 	movl   $0x8e000008,0x12(%rbx)
ffffffff80215498:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8021549f:	c7 43 22 08 00 00 8e 	movl   $0x8e000008,0x22(%rbx)
ffffffff802154a6:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff802154ad:	c7 43 32 08 00 00 ee 	movl   $0xee000008,0x32(%rbx)
ffffffff802154b4:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff802154bb:	c7 43 42 08 00 00 8e 	movl   $0x8e000008,0x42(%rbx)
ffffffff802154c2:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff802154c9:	c7 43 52 08 00 00 8e 	movl   $0x8e000008,0x52(%rbx)
ffffffff802154d0:	c7 43 5c 00 00 00 00 	movl   $0x0,0x5c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff802154d7:	c7 43 62 08 00 00 8e 	movl   $0x8e000008,0x62(%rbx)
ffffffff802154de:	66 89 53 66          	mov    %dx,0x66(%rbx)
ffffffff802154e2:	89 43 68             	mov    %eax,0x68(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff802154e5:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff802154ec:	66 89 43 70          	mov    %ax,0x70(%rbx)
ffffffff802154f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802154f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802154f7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802154fb:	89 43 78             	mov    %eax,0x78(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff802154fe:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80215505:	66 89 53 76          	mov    %dx,0x76(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215509:	48 89 c2             	mov    %rax,%rdx
ffffffff8021550c:	66 89 83 80 00 00 00 	mov    %ax,0x80(%rbx)
ffffffff80215513:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215517:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021551b:	89 83 88 00 00 00    	mov    %eax,0x88(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80215521:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215528:	66 89 93 86 00 00 00 	mov    %dx,0x86(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8021552f:	48 89 c2             	mov    %rax,%rdx
ffffffff80215532:	66 89 83 90 00 00 00 	mov    %ax,0x90(%rbx)
ffffffff80215539:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021553d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215541:	89 83 98 00 00 00    	mov    %eax,0x98(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80215547:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8021554e:	66 89 93 96 00 00 00 	mov    %dx,0x96(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80215555:	48 89 c2             	mov    %rax,%rdx
ffffffff80215558:	66 89 83 a0 00 00 00 	mov    %ax,0xa0(%rbx)
ffffffff8021555f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215563:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215567:	89 83 a8 00 00 00    	mov    %eax,0xa8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021556d:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80215574:	66 89 93 a6 00 00 00 	mov    %dx,0xa6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021557b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021557e:	66 89 83 b0 00 00 00 	mov    %ax,0xb0(%rbx)
ffffffff80215585:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215589:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021558d:	89 83 b8 00 00 00    	mov    %eax,0xb8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215593:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021559a:	66 89 93 b6 00 00 00 	mov    %dx,0xb6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff802155a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802155a4:	66 89 83 c0 00 00 00 	mov    %ax,0xc0(%rbx)
ffffffff802155ab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802155af:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802155b3:	89 83 c8 00 00 00    	mov    %eax,0xc8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff802155b9:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff802155c0:	66 89 93 c6 00 00 00 	mov    %dx,0xc6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff802155c7:	48 89 c2             	mov    %rax,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff802155ca:	c7 43 6c 00 00 00 00 	movl   $0x0,0x6c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff802155d1:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff802155d5:	c7 43 72 08 00 00 8e 	movl   $0x8e000008,0x72(%rbx)
ffffffff802155dc:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff802155e3:	c7 83 82 00 00 00 08 	movl   $0x8e000008,0x82(%rbx)
ffffffff802155ea:	00 00 8e 
ffffffff802155ed:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%rbx)
ffffffff802155f4:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff802155f7:	c7 83 92 00 00 00 08 	movl   $0x8e000008,0x92(%rbx)
ffffffff802155fe:	00 00 8e 
ffffffff80215601:	c7 83 9c 00 00 00 00 	movl   $0x0,0x9c(%rbx)
ffffffff80215608:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8021560b:	c7 83 a2 00 00 00 08 	movl   $0x8e000008,0xa2(%rbx)
ffffffff80215612:	00 00 8e 
ffffffff80215615:	c7 83 ac 00 00 00 00 	movl   $0x0,0xac(%rbx)
ffffffff8021561c:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021561f:	c7 83 b2 00 00 00 08 	movl   $0x8e000008,0xb2(%rbx)
ffffffff80215626:	00 00 8e 
ffffffff80215629:	c7 83 bc 00 00 00 00 	movl   $0x0,0xbc(%rbx)
ffffffff80215630:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215633:	c7 83 c2 00 00 00 08 	movl   $0x8e000008,0xc2(%rbx)
ffffffff8021563a:	00 00 8e 
ffffffff8021563d:	c7 83 cc 00 00 00 00 	movl   $0x0,0xcc(%rbx)
ffffffff80215644:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215647:	66 89 83 d0 00 00 00 	mov    %ax,0xd0(%rbx)
ffffffff8021564e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215652:	89 83 d8 00 00 00    	mov    %eax,0xd8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215658:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8021565f:	66 89 93 d6 00 00 00 	mov    %dx,0xd6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215666:	48 89 c2             	mov    %rax,%rdx
ffffffff80215669:	66 89 83 e0 00 00 00 	mov    %ax,0xe0(%rbx)
ffffffff80215670:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215674:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215678:	89 83 e8 00 00 00    	mov    %eax,0xe8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021567e:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215685:	66 89 93 e6 00 00 00 	mov    %dx,0xe6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021568c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021568f:	66 89 83 00 01 00 00 	mov    %ax,0x100(%rbx)
ffffffff80215696:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021569a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021569e:	89 83 08 01 00 00    	mov    %eax,0x108(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff802156a4:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff802156ab:	66 89 93 06 01 00 00 	mov    %dx,0x106(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff802156b2:	48 89 c2             	mov    %rax,%rdx
ffffffff802156b5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802156b9:	66 89 83 10 01 00 00 	mov    %ax,0x110(%rbx)
ffffffff802156c0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802156c4:	89 83 18 01 00 00    	mov    %eax,0x118(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff802156ca:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff802156d1:	66 89 93 16 01 00 00 	mov    %dx,0x116(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff802156d8:	48 89 c2             	mov    %rax,%rdx
ffffffff802156db:	66 89 83 20 01 00 00 	mov    %ax,0x120(%rbx)
ffffffff802156e2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802156e6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802156ea:	89 83 28 01 00 00    	mov    %eax,0x128(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff802156f0:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff802156f7:	66 89 93 26 01 00 00 	mov    %dx,0x126(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff802156fe:	48 89 c2             	mov    %rax,%rdx
ffffffff80215701:	66 89 83 30 01 00 00 	mov    %ax,0x130(%rbx)
ffffffff80215708:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021570c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215710:	89 83 38 01 00 00    	mov    %eax,0x138(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80215716:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021571d:	66 89 93 36 01 00 00 	mov    %dx,0x136(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80215724:	48 89 c2             	mov    %rax,%rdx
ffffffff80215727:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021572b:	66 89 83 40 01 00 00 	mov    %ax,0x140(%rbx)
ffffffff80215732:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215736:	66 89 93 46 01 00 00 	mov    %dx,0x146(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8021573d:	c7 83 d2 00 00 00 08 	movl   $0x8e000008,0xd2(%rbx)
ffffffff80215744:	00 00 8e 
ffffffff80215747:	c7 83 dc 00 00 00 00 	movl   $0x0,0xdc(%rbx)
ffffffff8021574e:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215751:	c7 83 e2 00 00 00 08 	movl   $0x8e000008,0xe2(%rbx)
ffffffff80215758:	00 00 8e 
ffffffff8021575b:	c7 83 ec 00 00 00 00 	movl   $0x0,0xec(%rbx)
ffffffff80215762:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff80215765:	c7 83 02 01 00 00 08 	movl   $0x8e000008,0x102(%rbx)
ffffffff8021576c:	00 00 8e 
ffffffff8021576f:	c7 83 0c 01 00 00 00 	movl   $0x0,0x10c(%rbx)
ffffffff80215776:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80215779:	c7 83 12 01 00 00 08 	movl   $0x8e000008,0x112(%rbx)
ffffffff80215780:	00 00 8e 
ffffffff80215783:	c7 83 1c 01 00 00 00 	movl   $0x0,0x11c(%rbx)
ffffffff8021578a:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8021578d:	c7 83 22 01 00 00 08 	movl   $0x8e000008,0x122(%rbx)
ffffffff80215794:	00 00 8e 
ffffffff80215797:	c7 83 2c 01 00 00 00 	movl   $0x0,0x12c(%rbx)
ffffffff8021579e:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff802157a1:	c7 83 32 01 00 00 08 	movl   $0x8e000008,0x132(%rbx)
ffffffff802157a8:	00 00 8e 
ffffffff802157ab:	c7 83 3c 01 00 00 00 	movl   $0x0,0x13c(%rbx)
ffffffff802157b2:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff802157b5:	c7 83 42 01 00 00 08 	movl   $0x8e000008,0x142(%rbx)
ffffffff802157bc:	00 00 8e 
ffffffff802157bf:	89 83 48 01 00 00    	mov    %eax,0x148(%rbx)
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff802157c5:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff802157cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802157cf:	66 89 8b 12 02 00 00 	mov    %cx,0x212(%rbx)
ffffffff802157d6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802157da:	66 89 83 00 02 00 00 	mov    %ax,0x200(%rbx)
ffffffff802157e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802157e5:	66 89 93 06 02 00 00 	mov    %dx,0x206(%rbx)
ffffffff802157ec:	48 c7 c2 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rdx
ffffffff802157f3:	66 89 93 10 02 00 00 	mov    %dx,0x210(%rbx)
ffffffff802157fa:	48 89 d1             	mov    %rdx,%rcx
ffffffff802157fd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215801:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215805:	89 93 18 02 00 00    	mov    %edx,0x218(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021580b:	48 c7 c2 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215812:	66 89 8b 16 02 00 00 	mov    %cx,0x216(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff80215819:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021581c:	66 89 93 20 02 00 00 	mov    %dx,0x220(%rbx)
ffffffff80215823:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215827:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021582b:	89 93 28 02 00 00    	mov    %edx,0x228(%rbx)
ffffffff80215831:	48 c7 c2 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rdx
ffffffff80215838:	66 89 8b 26 02 00 00 	mov    %cx,0x226(%rbx)
ffffffff8021583f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215842:	66 89 93 30 02 00 00 	mov    %dx,0x230(%rbx)
ffffffff80215849:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021584d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215851:	89 93 38 02 00 00    	mov    %edx,0x238(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215857:	48 c7 c2 05 ba 20 80 	mov    $0xffffffff8020ba05,%rdx
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021585e:	66 89 8b 36 02 00 00 	mov    %cx,0x236(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215865:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215868:	66 89 93 40 02 00 00 	mov    %dx,0x240(%rbx)
ffffffff8021586f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215873:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215877:	89 93 48 02 00 00    	mov    %edx,0x248(%rbx)
ffffffff8021587d:	48 c7 c2 11 ba 20 80 	mov    $0xffffffff8020ba11,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215884:	89 83 08 02 00 00    	mov    %eax,0x208(%rbx)
ffffffff8021588a:	0f b7 05 0f 75 00 00 	movzwl 0x750f(%rip),%eax        # ffffffff8021cda0 <RME_X64_Pgflg_RME2NAT+0x100>
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215891:	66 89 8b 46 02 00 00 	mov    %cx,0x246(%rbx)
ffffffff80215898:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021589b:	66 89 93 50 02 00 00 	mov    %dx,0x250(%rbx)
ffffffff802158a2:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802158a6:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802158aa:	89 93 58 02 00 00    	mov    %edx,0x258(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff802158b0:	48 c7 c2 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff802158b7:	66 89 83 14 02 00 00 	mov    %ax,0x214(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff802158be:	66 89 8b 56 02 00 00 	mov    %cx,0x256(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff802158c5:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff802158c8:	c7 83 4c 01 00 00 00 	movl   $0x0,0x14c(%rbx)
ffffffff802158cf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff802158d2:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff802158d6:	c7 83 02 02 00 00 08 	movl   $0x8e000008,0x202(%rbx)
ffffffff802158dd:	00 00 8e 
ffffffff802158e0:	c7 83 0c 02 00 00 00 	movl   $0x0,0x20c(%rbx)
ffffffff802158e7:	00 00 00 
ffffffff802158ea:	c7 83 1c 02 00 00 00 	movl   $0x0,0x21c(%rbx)
ffffffff802158f1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff802158f4:	c7 83 22 02 00 00 08 	movl   $0x8e000008,0x222(%rbx)
ffffffff802158fb:	00 00 8e 
ffffffff802158fe:	c7 83 2c 02 00 00 00 	movl   $0x0,0x22c(%rbx)
ffffffff80215905:	00 00 00 
ffffffff80215908:	c7 83 32 02 00 00 08 	movl   $0x8e000008,0x232(%rbx)
ffffffff8021590f:	00 00 8e 
ffffffff80215912:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%rbx)
ffffffff80215919:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8021591c:	c7 83 42 02 00 00 08 	movl   $0x8e000008,0x242(%rbx)
ffffffff80215923:	00 00 8e 
ffffffff80215926:	c7 83 4c 02 00 00 00 	movl   $0x0,0x24c(%rbx)
ffffffff8021592d:	00 00 00 
ffffffff80215930:	c7 83 52 02 00 00 08 	movl   $0x8e000008,0x252(%rbx)
ffffffff80215937:	00 00 8e 
ffffffff8021593a:	c7 83 5c 02 00 00 00 	movl   $0x0,0x25c(%rbx)
ffffffff80215941:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215944:	66 89 93 60 02 00 00 	mov    %dx,0x260(%rbx)
ffffffff8021594b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021594f:	89 93 68 02 00 00    	mov    %edx,0x268(%rbx)
ffffffff80215955:	48 c7 c2 29 ba 20 80 	mov    $0xffffffff8020ba29,%rdx
ffffffff8021595c:	66 89 8b 66 02 00 00 	mov    %cx,0x266(%rbx)
ffffffff80215963:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215966:	66 89 93 70 02 00 00 	mov    %dx,0x270(%rbx)
ffffffff8021596d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215971:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215975:	89 93 78 02 00 00    	mov    %edx,0x278(%rbx)
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8021597b:	48 c7 c2 35 ba 20 80 	mov    $0xffffffff8020ba35,%rdx
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215982:	66 89 8b 76 02 00 00 	mov    %cx,0x276(%rbx)
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215989:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021598c:	66 89 93 80 02 00 00 	mov    %dx,0x280(%rbx)
ffffffff80215993:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215997:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021599b:	89 93 88 02 00 00    	mov    %edx,0x288(%rbx)
ffffffff802159a1:	48 c7 c2 41 ba 20 80 	mov    $0xffffffff8020ba41,%rdx
ffffffff802159a8:	66 89 8b 86 02 00 00 	mov    %cx,0x286(%rbx)
ffffffff802159af:	48 89 d1             	mov    %rdx,%rcx
ffffffff802159b2:	66 89 93 90 02 00 00 	mov    %dx,0x290(%rbx)
ffffffff802159b9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802159bd:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802159c1:	89 93 98 02 00 00    	mov    %edx,0x298(%rbx)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff802159c7:	48 c7 c2 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rdx
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff802159ce:	66 89 8b 96 02 00 00 	mov    %cx,0x296(%rbx)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff802159d5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802159d8:	66 89 93 a0 02 00 00 	mov    %dx,0x2a0(%rbx)
ffffffff802159df:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802159e3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802159e7:	89 93 a8 02 00 00    	mov    %edx,0x2a8(%rbx)
ffffffff802159ed:	48 c7 c2 59 ba 20 80 	mov    $0xffffffff8020ba59,%rdx
ffffffff802159f4:	66 89 8b a6 02 00 00 	mov    %cx,0x2a6(%rbx)
ffffffff802159fb:	48 89 d1             	mov    %rdx,%rcx
ffffffff802159fe:	66 89 93 b0 02 00 00 	mov    %dx,0x2b0(%rbx)
ffffffff80215a05:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215a09:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215a0d:	89 93 b8 02 00 00    	mov    %edx,0x2b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215a13:	48 c7 c2 65 ba 20 80 	mov    $0xffffffff8020ba65,%rdx
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80215a1a:	66 89 8b b6 02 00 00 	mov    %cx,0x2b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215a21:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215a24:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215a28:	66 89 93 c0 02 00 00 	mov    %dx,0x2c0(%rbx)
ffffffff80215a2f:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215a33:	c7 83 62 02 00 00 08 	movl   $0x8e000008,0x262(%rbx)
ffffffff80215a3a:	00 00 8e 
ffffffff80215a3d:	c7 83 6c 02 00 00 00 	movl   $0x0,0x26c(%rbx)
ffffffff80215a44:	00 00 00 
ffffffff80215a47:	c7 83 72 02 00 00 08 	movl   $0x8e000008,0x272(%rbx)
ffffffff80215a4e:	00 00 8e 
ffffffff80215a51:	c7 83 7c 02 00 00 00 	movl   $0x0,0x27c(%rbx)
ffffffff80215a58:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215a5b:	c7 83 82 02 00 00 08 	movl   $0x8e000008,0x282(%rbx)
ffffffff80215a62:	00 00 8e 
ffffffff80215a65:	c7 83 8c 02 00 00 00 	movl   $0x0,0x28c(%rbx)
ffffffff80215a6c:	00 00 00 
ffffffff80215a6f:	c7 83 92 02 00 00 08 	movl   $0x8e000008,0x292(%rbx)
ffffffff80215a76:	00 00 8e 
ffffffff80215a79:	c7 83 9c 02 00 00 00 	movl   $0x0,0x29c(%rbx)
ffffffff80215a80:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80215a83:	c7 83 a2 02 00 00 08 	movl   $0x8e000008,0x2a2(%rbx)
ffffffff80215a8a:	00 00 8e 
ffffffff80215a8d:	c7 83 ac 02 00 00 00 	movl   $0x0,0x2ac(%rbx)
ffffffff80215a94:	00 00 00 
ffffffff80215a97:	c7 83 b2 02 00 00 08 	movl   $0x8e000008,0x2b2(%rbx)
ffffffff80215a9e:	00 00 8e 
ffffffff80215aa1:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%rbx)
ffffffff80215aa8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215aab:	c7 83 c2 02 00 00 08 	movl   $0x8e000008,0x2c2(%rbx)
ffffffff80215ab2:	00 00 8e 
ffffffff80215ab5:	66 89 8b c6 02 00 00 	mov    %cx,0x2c6(%rbx)
ffffffff80215abc:	89 93 c8 02 00 00    	mov    %edx,0x2c8(%rbx)
ffffffff80215ac2:	48 c7 c2 71 ba 20 80 	mov    $0xffffffff8020ba71,%rdx
ffffffff80215ac9:	66 89 93 d0 02 00 00 	mov    %dx,0x2d0(%rbx)
ffffffff80215ad0:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215ad3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215ad7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215adb:	89 93 d8 02 00 00    	mov    %edx,0x2d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215ae1:	48 c7 c2 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rdx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215ae8:	66 89 8b d6 02 00 00 	mov    %cx,0x2d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215aef:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215af2:	66 89 93 e0 02 00 00 	mov    %dx,0x2e0(%rbx)
ffffffff80215af9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215afd:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215b01:	89 93 e8 02 00 00    	mov    %edx,0x2e8(%rbx)
ffffffff80215b07:	48 c7 c2 89 ba 20 80 	mov    $0xffffffff8020ba89,%rdx
ffffffff80215b0e:	66 89 8b e6 02 00 00 	mov    %cx,0x2e6(%rbx)
ffffffff80215b15:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215b18:	66 89 93 f0 02 00 00 	mov    %dx,0x2f0(%rbx)
ffffffff80215b1f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215b23:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215b27:	89 93 f8 02 00 00    	mov    %edx,0x2f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215b2d:	48 c7 c2 95 ba 20 80 	mov    $0xffffffff8020ba95,%rdx
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215b34:	66 89 8b f6 02 00 00 	mov    %cx,0x2f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215b3b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215b3e:	66 89 93 00 03 00 00 	mov    %dx,0x300(%rbx)
ffffffff80215b45:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215b49:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215b4d:	89 93 08 03 00 00    	mov    %edx,0x308(%rbx)
ffffffff80215b53:	48 c7 c2 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rdx
ffffffff80215b5a:	66 89 8b 06 03 00 00 	mov    %cx,0x306(%rbx)
ffffffff80215b61:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215b64:	66 89 93 10 03 00 00 	mov    %dx,0x310(%rbx)
ffffffff80215b6b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215b6f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215b73:	89 93 18 03 00 00    	mov    %edx,0x318(%rbx)
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215b79:	48 c7 c2 ad ba 20 80 	mov    $0xffffffff8020baad,%rdx
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215b80:	66 89 8b 16 03 00 00 	mov    %cx,0x316(%rbx)
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215b87:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215b8a:	66 89 93 20 03 00 00 	mov    %dx,0x320(%rbx)
ffffffff80215b91:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215b95:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215b99:	89 93 28 03 00 00    	mov    %edx,0x328(%rbx)
ffffffff80215b9f:	48 c7 c2 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rdx
ffffffff80215ba6:	66 89 8b 26 03 00 00 	mov    %cx,0x326(%rbx)
ffffffff80215bad:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215bb0:	c7 83 cc 02 00 00 00 	movl   $0x0,0x2cc(%rbx)
ffffffff80215bb7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215bba:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215bbe:	c7 83 d2 02 00 00 08 	movl   $0x8e000008,0x2d2(%rbx)
ffffffff80215bc5:	00 00 8e 
ffffffff80215bc8:	c7 83 dc 02 00 00 00 	movl   $0x0,0x2dc(%rbx)
ffffffff80215bcf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215bd2:	c7 83 e2 02 00 00 08 	movl   $0x8e000008,0x2e2(%rbx)
ffffffff80215bd9:	00 00 8e 
ffffffff80215bdc:	c7 83 ec 02 00 00 00 	movl   $0x0,0x2ec(%rbx)
ffffffff80215be3:	00 00 00 
ffffffff80215be6:	c7 83 f2 02 00 00 08 	movl   $0x8e000008,0x2f2(%rbx)
ffffffff80215bed:	00 00 8e 
ffffffff80215bf0:	c7 83 fc 02 00 00 00 	movl   $0x0,0x2fc(%rbx)
ffffffff80215bf7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215bfa:	c7 83 02 03 00 00 08 	movl   $0x8e000008,0x302(%rbx)
ffffffff80215c01:	00 00 8e 
ffffffff80215c04:	c7 83 0c 03 00 00 00 	movl   $0x0,0x30c(%rbx)
ffffffff80215c0b:	00 00 00 
ffffffff80215c0e:	c7 83 12 03 00 00 08 	movl   $0x8e000008,0x312(%rbx)
ffffffff80215c15:	00 00 8e 
ffffffff80215c18:	c7 83 1c 03 00 00 00 	movl   $0x0,0x31c(%rbx)
ffffffff80215c1f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215c22:	c7 83 22 03 00 00 08 	movl   $0x8e000008,0x322(%rbx)
ffffffff80215c29:	00 00 8e 
ffffffff80215c2c:	c7 83 2c 03 00 00 00 	movl   $0x0,0x32c(%rbx)
ffffffff80215c33:	00 00 00 
ffffffff80215c36:	66 89 93 30 03 00 00 	mov    %dx,0x330(%rbx)
ffffffff80215c3d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215c41:	89 93 38 03 00 00    	mov    %edx,0x338(%rbx)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215c47:	48 c7 c2 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rdx
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215c4e:	66 89 8b 36 03 00 00 	mov    %cx,0x336(%rbx)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215c55:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215c58:	66 89 93 40 03 00 00 	mov    %dx,0x340(%rbx)
ffffffff80215c5f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215c63:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c67:	89 93 48 03 00 00    	mov    %edx,0x348(%rbx)
ffffffff80215c6d:	48 c7 c2 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rdx
ffffffff80215c74:	66 89 8b 46 03 00 00 	mov    %cx,0x346(%rbx)
ffffffff80215c7b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215c7e:	66 89 93 50 03 00 00 	mov    %dx,0x350(%rbx)
ffffffff80215c85:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215c89:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c8d:	89 93 58 03 00 00    	mov    %edx,0x358(%rbx)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215c93:	48 c7 c2 dd ba 20 80 	mov    $0xffffffff8020badd,%rdx
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215c9a:	66 89 8b 56 03 00 00 	mov    %cx,0x356(%rbx)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215ca1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215ca4:	66 89 93 60 03 00 00 	mov    %dx,0x360(%rbx)
ffffffff80215cab:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215caf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215cb3:	89 93 68 03 00 00    	mov    %edx,0x368(%rbx)
ffffffff80215cb9:	48 c7 c2 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rdx
ffffffff80215cc0:	66 89 8b 66 03 00 00 	mov    %cx,0x366(%rbx)
ffffffff80215cc7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215cca:	66 89 93 70 03 00 00 	mov    %dx,0x370(%rbx)
ffffffff80215cd1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215cd5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215cd9:	89 93 78 03 00 00    	mov    %edx,0x378(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215cdf:	48 c7 c2 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rdx
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215ce6:	66 89 8b 76 03 00 00 	mov    %cx,0x376(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215ced:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215cf0:	66 89 93 80 03 00 00 	mov    %dx,0x380(%rbx)
ffffffff80215cf7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215cfb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215cff:	89 93 88 03 00 00    	mov    %edx,0x388(%rbx)
ffffffff80215d05:	48 c7 c2 01 bb 20 80 	mov    $0xffffffff8020bb01,%rdx
ffffffff80215d0c:	66 89 8b 86 03 00 00 	mov    %cx,0x386(%rbx)
ffffffff80215d13:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215d16:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215d1a:	66 89 93 90 03 00 00 	mov    %dx,0x390(%rbx)
ffffffff80215d21:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215d25:	66 89 8b 96 03 00 00 	mov    %cx,0x396(%rbx)
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215d2c:	c7 83 32 03 00 00 08 	movl   $0x8e000008,0x332(%rbx)
ffffffff80215d33:	00 00 8e 
ffffffff80215d36:	c7 83 3c 03 00 00 00 	movl   $0x0,0x33c(%rbx)
ffffffff80215d3d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215d40:	c7 83 42 03 00 00 08 	movl   $0x8e000008,0x342(%rbx)
ffffffff80215d47:	00 00 8e 
ffffffff80215d4a:	c7 83 4c 03 00 00 00 	movl   $0x0,0x34c(%rbx)
ffffffff80215d51:	00 00 00 
ffffffff80215d54:	c7 83 52 03 00 00 08 	movl   $0x8e000008,0x352(%rbx)
ffffffff80215d5b:	00 00 8e 
ffffffff80215d5e:	c7 83 5c 03 00 00 00 	movl   $0x0,0x35c(%rbx)
ffffffff80215d65:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215d68:	c7 83 62 03 00 00 08 	movl   $0x8e000008,0x362(%rbx)
ffffffff80215d6f:	00 00 8e 
ffffffff80215d72:	c7 83 6c 03 00 00 00 	movl   $0x0,0x36c(%rbx)
ffffffff80215d79:	00 00 00 
ffffffff80215d7c:	c7 83 72 03 00 00 08 	movl   $0x8e000008,0x372(%rbx)
ffffffff80215d83:	00 00 8e 
ffffffff80215d86:	c7 83 7c 03 00 00 00 	movl   $0x0,0x37c(%rbx)
ffffffff80215d8d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215d90:	c7 83 82 03 00 00 08 	movl   $0x8e000008,0x382(%rbx)
ffffffff80215d97:	00 00 8e 
ffffffff80215d9a:	c7 83 8c 03 00 00 00 	movl   $0x0,0x38c(%rbx)
ffffffff80215da1:	00 00 00 
ffffffff80215da4:	c7 83 92 03 00 00 08 	movl   $0x8e000008,0x392(%rbx)
ffffffff80215dab:	00 00 8e 
ffffffff80215dae:	89 93 98 03 00 00    	mov    %edx,0x398(%rbx)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff80215db4:	48 c7 c2 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rdx
ffffffff80215dbb:	66 89 93 a0 03 00 00 	mov    %dx,0x3a0(%rbx)
ffffffff80215dc2:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215dc5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215dc9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215dcd:	89 93 a8 03 00 00    	mov    %edx,0x3a8(%rbx)
ffffffff80215dd3:	48 c7 c2 19 bb 20 80 	mov    $0xffffffff8020bb19,%rdx
ffffffff80215dda:	66 89 8b a6 03 00 00 	mov    %cx,0x3a6(%rbx)
ffffffff80215de1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215de4:	66 89 93 b0 03 00 00 	mov    %dx,0x3b0(%rbx)
ffffffff80215deb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215def:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215df3:	89 93 b8 03 00 00    	mov    %edx,0x3b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80215df9:	48 c7 c2 25 bb 20 80 	mov    $0xffffffff8020bb25,%rdx
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff80215e00:	66 89 8b b6 03 00 00 	mov    %cx,0x3b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80215e07:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215e0a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215e0e:	66 89 93 c0 03 00 00 	mov    %dx,0x3c0(%rbx)
ffffffff80215e15:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215e19:	89 93 c8 03 00 00    	mov    %edx,0x3c8(%rbx)
ffffffff80215e1f:	48 c7 c2 31 bb 20 80 	mov    $0xffffffff8020bb31,%rdx
ffffffff80215e26:	66 89 8b c6 03 00 00 	mov    %cx,0x3c6(%rbx)
ffffffff80215e2d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215e30:	66 89 93 d0 03 00 00 	mov    %dx,0x3d0(%rbx)
ffffffff80215e37:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215e3b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215e3f:	89 93 d8 03 00 00    	mov    %edx,0x3d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff80215e45:	48 c7 c2 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rdx
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80215e4c:	66 89 8b d6 03 00 00 	mov    %cx,0x3d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff80215e53:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215e56:	66 89 93 e0 03 00 00 	mov    %dx,0x3e0(%rbx)
ffffffff80215e5d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215e61:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215e65:	89 93 e8 03 00 00    	mov    %edx,0x3e8(%rbx)
ffffffff80215e6b:	48 c7 c2 49 bb 20 80 	mov    $0xffffffff8020bb49,%rdx
ffffffff80215e72:	66 89 8b e6 03 00 00 	mov    %cx,0x3e6(%rbx)
ffffffff80215e79:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215e7c:	66 89 93 f0 03 00 00 	mov    %dx,0x3f0(%rbx)
ffffffff80215e83:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215e87:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215e8b:	89 93 f8 03 00 00    	mov    %edx,0x3f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215e91:	48 c7 c2 55 bb 20 80 	mov    $0xffffffff8020bb55,%rdx
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff80215e98:	66 89 8b f6 03 00 00 	mov    %cx,0x3f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215e9f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215ea2:	66 89 93 00 04 00 00 	mov    %dx,0x400(%rbx)
ffffffff80215ea9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215ead:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215eb1:	c7 83 9c 03 00 00 00 	movl   $0x0,0x39c(%rbx)
ffffffff80215eb8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff80215ebb:	c7 83 a2 03 00 00 08 	movl   $0x8e000008,0x3a2(%rbx)
ffffffff80215ec2:	00 00 8e 
ffffffff80215ec5:	c7 83 ac 03 00 00 00 	movl   $0x0,0x3ac(%rbx)
ffffffff80215ecc:	00 00 00 
ffffffff80215ecf:	c7 83 b2 03 00 00 08 	movl   $0x8e000008,0x3b2(%rbx)
ffffffff80215ed6:	00 00 8e 
ffffffff80215ed9:	c7 83 bc 03 00 00 00 	movl   $0x0,0x3bc(%rbx)
ffffffff80215ee0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80215ee3:	c7 83 c2 03 00 00 08 	movl   $0x8e000008,0x3c2(%rbx)
ffffffff80215eea:	00 00 8e 
ffffffff80215eed:	c7 83 cc 03 00 00 00 	movl   $0x0,0x3cc(%rbx)
ffffffff80215ef4:	00 00 00 
ffffffff80215ef7:	c7 83 d2 03 00 00 08 	movl   $0x8e000008,0x3d2(%rbx)
ffffffff80215efe:	00 00 8e 
ffffffff80215f01:	c7 83 dc 03 00 00 00 	movl   $0x0,0x3dc(%rbx)
ffffffff80215f08:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff80215f0b:	c7 83 e2 03 00 00 08 	movl   $0x8e000008,0x3e2(%rbx)
ffffffff80215f12:	00 00 8e 
ffffffff80215f15:	c7 83 ec 03 00 00 00 	movl   $0x0,0x3ec(%rbx)
ffffffff80215f1c:	00 00 00 
ffffffff80215f1f:	c7 83 f2 03 00 00 08 	movl   $0x8e000008,0x3f2(%rbx)
ffffffff80215f26:	00 00 8e 
ffffffff80215f29:	c7 83 fc 03 00 00 00 	movl   $0x0,0x3fc(%rbx)
ffffffff80215f30:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215f33:	c7 83 02 04 00 00 08 	movl   $0x8e000008,0x402(%rbx)
ffffffff80215f3a:	00 00 8e 
ffffffff80215f3d:	89 93 08 04 00 00    	mov    %edx,0x408(%rbx)
ffffffff80215f43:	48 c7 c2 61 bb 20 80 	mov    $0xffffffff8020bb61,%rdx
ffffffff80215f4a:	66 89 8b 06 04 00 00 	mov    %cx,0x406(%rbx)
ffffffff80215f51:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215f54:	66 89 93 10 04 00 00 	mov    %dx,0x410(%rbx)
ffffffff80215f5b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215f5f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215f63:	89 93 18 04 00 00    	mov    %edx,0x418(%rbx)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80215f69:	48 c7 c2 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rdx
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215f70:	66 89 8b 16 04 00 00 	mov    %cx,0x416(%rbx)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80215f77:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215f7a:	66 89 93 20 04 00 00 	mov    %dx,0x420(%rbx)
ffffffff80215f81:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215f85:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215f89:	89 93 28 04 00 00    	mov    %edx,0x428(%rbx)
ffffffff80215f8f:	48 c7 c2 79 bb 20 80 	mov    $0xffffffff8020bb79,%rdx
ffffffff80215f96:	66 89 8b 26 04 00 00 	mov    %cx,0x426(%rbx)
ffffffff80215f9d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215fa0:	66 89 93 30 04 00 00 	mov    %dx,0x430(%rbx)
ffffffff80215fa7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215fab:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215faf:	89 93 38 04 00 00    	mov    %edx,0x438(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80215fb5:	48 c7 c2 85 bb 20 80 	mov    $0xffffffff8020bb85,%rdx
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80215fbc:	66 89 8b 36 04 00 00 	mov    %cx,0x436(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80215fc3:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215fc6:	66 89 93 40 04 00 00 	mov    %dx,0x440(%rbx)
ffffffff80215fcd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215fd1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215fd5:	89 93 48 04 00 00    	mov    %edx,0x448(%rbx)
ffffffff80215fdb:	48 c7 c2 91 bb 20 80 	mov    $0xffffffff8020bb91,%rdx
ffffffff80215fe2:	66 89 8b 46 04 00 00 	mov    %cx,0x446(%rbx)
ffffffff80215fe9:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215fec:	66 89 93 50 04 00 00 	mov    %dx,0x450(%rbx)
ffffffff80215ff3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215ff7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215ffb:	89 93 58 04 00 00    	mov    %edx,0x458(%rbx)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80216001:	48 c7 c2 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rdx
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80216008:	66 89 8b 56 04 00 00 	mov    %cx,0x456(%rbx)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021600f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216012:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216016:	66 89 93 60 04 00 00 	mov    %dx,0x460(%rbx)
ffffffff8021601d:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80216021:	66 89 83 14 04 00 00 	mov    %ax,0x414(%rbx)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80216028:	66 89 8b 66 04 00 00 	mov    %cx,0x466(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8021602f:	c7 83 0c 04 00 00 00 	movl   $0x0,0x40c(%rbx)
ffffffff80216036:	00 00 00 
ffffffff80216039:	66 89 b3 12 04 00 00 	mov    %si,0x412(%rbx)
ffffffff80216040:	c7 83 1c 04 00 00 00 	movl   $0x0,0x41c(%rbx)
ffffffff80216047:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8021604a:	c7 83 22 04 00 00 08 	movl   $0x8e000008,0x422(%rbx)
ffffffff80216051:	00 00 8e 
ffffffff80216054:	c7 83 2c 04 00 00 00 	movl   $0x0,0x42c(%rbx)
ffffffff8021605b:	00 00 00 
ffffffff8021605e:	c7 83 32 04 00 00 08 	movl   $0x8e000008,0x432(%rbx)
ffffffff80216065:	00 00 8e 
ffffffff80216068:	c7 83 3c 04 00 00 00 	movl   $0x0,0x43c(%rbx)
ffffffff8021606f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80216072:	c7 83 42 04 00 00 08 	movl   $0x8e000008,0x442(%rbx)
ffffffff80216079:	00 00 8e 
ffffffff8021607c:	c7 83 4c 04 00 00 00 	movl   $0x0,0x44c(%rbx)
ffffffff80216083:	00 00 00 
ffffffff80216086:	c7 83 52 04 00 00 08 	movl   $0x8e000008,0x452(%rbx)
ffffffff8021608d:	00 00 8e 
ffffffff80216090:	c7 83 5c 04 00 00 00 	movl   $0x0,0x45c(%rbx)
ffffffff80216097:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021609a:	c7 83 62 04 00 00 08 	movl   $0x8e000008,0x462(%rbx)
ffffffff802160a1:	00 00 8e 
ffffffff802160a4:	89 93 68 04 00 00    	mov    %edx,0x468(%rbx)
ffffffff802160aa:	48 c7 c2 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rdx
ffffffff802160b1:	66 89 93 70 04 00 00 	mov    %dx,0x470(%rbx)
ffffffff802160b8:	48 89 d1             	mov    %rdx,%rcx
ffffffff802160bb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802160bf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802160c3:	89 93 78 04 00 00    	mov    %edx,0x478(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff802160c9:	48 c7 c2 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rdx
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff802160d0:	66 89 8b 76 04 00 00 	mov    %cx,0x476(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff802160d7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802160da:	66 89 93 80 04 00 00 	mov    %dx,0x480(%rbx)
ffffffff802160e1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802160e5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802160e9:	89 93 88 04 00 00    	mov    %edx,0x488(%rbx)
ffffffff802160ef:	48 c7 c2 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rdx
ffffffff802160f6:	66 89 8b 86 04 00 00 	mov    %cx,0x486(%rbx)
ffffffff802160fd:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216100:	66 89 93 90 04 00 00 	mov    %dx,0x490(%rbx)
ffffffff80216107:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021610b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021610f:	89 93 98 04 00 00    	mov    %edx,0x498(%rbx)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216115:	48 c7 c2 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rdx
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8021611c:	66 89 8b 96 04 00 00 	mov    %cx,0x496(%rbx)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216123:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216126:	66 89 93 a0 04 00 00 	mov    %dx,0x4a0(%rbx)
ffffffff8021612d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216131:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216135:	89 93 a8 04 00 00    	mov    %edx,0x4a8(%rbx)
ffffffff8021613b:	48 c7 c2 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rdx
ffffffff80216142:	66 89 8b a6 04 00 00 	mov    %cx,0x4a6(%rbx)
ffffffff80216149:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021614c:	66 89 93 b0 04 00 00 	mov    %dx,0x4b0(%rbx)
ffffffff80216153:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216157:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021615b:	89 93 b8 04 00 00    	mov    %edx,0x4b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216161:	48 c7 c2 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rdx
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216168:	66 89 8b b6 04 00 00 	mov    %cx,0x4b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8021616f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216172:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216176:	66 89 93 c0 04 00 00 	mov    %dx,0x4c0(%rbx)
ffffffff8021617d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216181:	89 93 c8 04 00 00    	mov    %edx,0x4c8(%rbx)
ffffffff80216187:	48 c7 c2 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rdx
ffffffff8021618e:	66 89 8b c6 04 00 00 	mov    %cx,0x4c6(%rbx)
ffffffff80216195:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216198:	66 89 93 d0 04 00 00 	mov    %dx,0x4d0(%rbx)
ffffffff8021619f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802161a3:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff802161a7:	c7 83 6c 04 00 00 00 	movl   $0x0,0x46c(%rbx)
ffffffff802161ae:	00 00 00 
ffffffff802161b1:	c7 83 72 04 00 00 08 	movl   $0x8e000008,0x472(%rbx)
ffffffff802161b8:	00 00 8e 
ffffffff802161bb:	c7 83 7c 04 00 00 00 	movl   $0x0,0x47c(%rbx)
ffffffff802161c2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff802161c5:	c7 83 82 04 00 00 08 	movl   $0x8e000008,0x482(%rbx)
ffffffff802161cc:	00 00 8e 
ffffffff802161cf:	c7 83 8c 04 00 00 00 	movl   $0x0,0x48c(%rbx)
ffffffff802161d6:	00 00 00 
ffffffff802161d9:	c7 83 92 04 00 00 08 	movl   $0x8e000008,0x492(%rbx)
ffffffff802161e0:	00 00 8e 
ffffffff802161e3:	c7 83 9c 04 00 00 00 	movl   $0x0,0x49c(%rbx)
ffffffff802161ea:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff802161ed:	c7 83 a2 04 00 00 08 	movl   $0x8e000008,0x4a2(%rbx)
ffffffff802161f4:	00 00 8e 
ffffffff802161f7:	c7 83 ac 04 00 00 00 	movl   $0x0,0x4ac(%rbx)
ffffffff802161fe:	00 00 00 
ffffffff80216201:	c7 83 b2 04 00 00 08 	movl   $0x8e000008,0x4b2(%rbx)
ffffffff80216208:	00 00 8e 
ffffffff8021620b:	c7 83 bc 04 00 00 00 	movl   $0x0,0x4bc(%rbx)
ffffffff80216212:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216215:	c7 83 c2 04 00 00 08 	movl   $0x8e000008,0x4c2(%rbx)
ffffffff8021621c:	00 00 8e 
ffffffff8021621f:	c7 83 cc 04 00 00 00 	movl   $0x0,0x4cc(%rbx)
ffffffff80216226:	00 00 00 
ffffffff80216229:	c7 83 d2 04 00 00 08 	movl   $0x8e000008,0x4d2(%rbx)
ffffffff80216230:	00 00 8e 
ffffffff80216233:	89 93 d8 04 00 00    	mov    %edx,0x4d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80216239:	48 c7 c2 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rdx
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216240:	66 89 8b d6 04 00 00 	mov    %cx,0x4d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80216247:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021624a:	66 89 93 e0 04 00 00 	mov    %dx,0x4e0(%rbx)
ffffffff80216251:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216255:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216259:	89 93 e8 04 00 00    	mov    %edx,0x4e8(%rbx)
ffffffff8021625f:	48 c7 c2 09 bc 20 80 	mov    $0xffffffff8020bc09,%rdx
ffffffff80216266:	66 89 8b e6 04 00 00 	mov    %cx,0x4e6(%rbx)
ffffffff8021626d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216270:	66 89 93 f0 04 00 00 	mov    %dx,0x4f0(%rbx)
ffffffff80216277:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021627b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021627f:	89 93 f8 04 00 00    	mov    %edx,0x4f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216285:	48 c7 c2 15 bc 20 80 	mov    $0xffffffff8020bc15,%rdx
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8021628c:	66 89 8b f6 04 00 00 	mov    %cx,0x4f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216293:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216296:	66 89 93 00 05 00 00 	mov    %dx,0x500(%rbx)
ffffffff8021629d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802162a1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802162a5:	89 93 08 05 00 00    	mov    %edx,0x508(%rbx)
ffffffff802162ab:	48 c7 c2 21 bc 20 80 	mov    $0xffffffff8020bc21,%rdx
ffffffff802162b2:	66 89 8b 06 05 00 00 	mov    %cx,0x506(%rbx)
ffffffff802162b9:	48 89 d1             	mov    %rdx,%rcx
ffffffff802162bc:	66 89 93 10 05 00 00 	mov    %dx,0x510(%rbx)
ffffffff802162c3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802162c7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802162cb:	89 93 18 05 00 00    	mov    %edx,0x518(%rbx)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff802162d1:	48 c7 c2 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rdx
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff802162d8:	66 89 8b 16 05 00 00 	mov    %cx,0x516(%rbx)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff802162df:	48 89 d1             	mov    %rdx,%rcx
ffffffff802162e2:	66 89 93 20 05 00 00 	mov    %dx,0x520(%rbx)
ffffffff802162e9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802162ed:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802162f1:	89 93 28 05 00 00    	mov    %edx,0x528(%rbx)
ffffffff802162f7:	48 c7 c2 39 bc 20 80 	mov    $0xffffffff8020bc39,%rdx
ffffffff802162fe:	66 89 8b 26 05 00 00 	mov    %cx,0x526(%rbx)
ffffffff80216305:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216308:	66 89 93 30 05 00 00 	mov    %dx,0x530(%rbx)
ffffffff8021630f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216313:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216317:	89 93 38 05 00 00    	mov    %edx,0x538(%rbx)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8021631d:	48 c7 c2 45 bc 20 80 	mov    $0xffffffff8020bc45,%rdx
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80216324:	66 89 8b 36 05 00 00 	mov    %cx,0x536(%rbx)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8021632b:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8021632e:	c7 83 dc 04 00 00 00 	movl   $0x0,0x4dc(%rbx)
ffffffff80216335:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80216338:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8021633c:	c7 83 e2 04 00 00 08 	movl   $0x8e000008,0x4e2(%rbx)
ffffffff80216343:	00 00 8e 
ffffffff80216346:	c7 83 ec 04 00 00 00 	movl   $0x0,0x4ec(%rbx)
ffffffff8021634d:	00 00 00 
ffffffff80216350:	c7 83 f2 04 00 00 08 	movl   $0x8e000008,0x4f2(%rbx)
ffffffff80216357:	00 00 8e 
ffffffff8021635a:	c7 83 fc 04 00 00 00 	movl   $0x0,0x4fc(%rbx)
ffffffff80216361:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216364:	c7 83 02 05 00 00 08 	movl   $0x8e000008,0x502(%rbx)
ffffffff8021636b:	00 00 8e 
ffffffff8021636e:	c7 83 0c 05 00 00 00 	movl   $0x0,0x50c(%rbx)
ffffffff80216375:	00 00 00 
ffffffff80216378:	c7 83 12 05 00 00 08 	movl   $0x8e000008,0x512(%rbx)
ffffffff8021637f:	00 00 8e 
ffffffff80216382:	c7 83 1c 05 00 00 00 	movl   $0x0,0x51c(%rbx)
ffffffff80216389:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8021638c:	c7 83 22 05 00 00 08 	movl   $0x8e000008,0x522(%rbx)
ffffffff80216393:	00 00 8e 
ffffffff80216396:	c7 83 2c 05 00 00 00 	movl   $0x0,0x52c(%rbx)
ffffffff8021639d:	00 00 00 
ffffffff802163a0:	c7 83 32 05 00 00 08 	movl   $0x8e000008,0x532(%rbx)
ffffffff802163a7:	00 00 8e 
ffffffff802163aa:	c7 83 3c 05 00 00 00 	movl   $0x0,0x53c(%rbx)
ffffffff802163b1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff802163b4:	66 89 93 40 05 00 00 	mov    %dx,0x540(%rbx)
ffffffff802163bb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802163bf:	89 93 48 05 00 00    	mov    %edx,0x548(%rbx)
ffffffff802163c5:	48 c7 c2 51 bc 20 80 	mov    $0xffffffff8020bc51,%rdx
ffffffff802163cc:	66 89 8b 46 05 00 00 	mov    %cx,0x546(%rbx)
ffffffff802163d3:	48 89 d1             	mov    %rdx,%rcx
ffffffff802163d6:	66 89 93 50 05 00 00 	mov    %dx,0x550(%rbx)
ffffffff802163dd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802163e1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802163e5:	89 93 58 05 00 00    	mov    %edx,0x558(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff802163eb:	48 c7 c2 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rdx
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff802163f2:	66 89 8b 56 05 00 00 	mov    %cx,0x556(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff802163f9:	48 89 d1             	mov    %rdx,%rcx
ffffffff802163fc:	66 89 93 60 05 00 00 	mov    %dx,0x560(%rbx)
ffffffff80216403:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216407:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021640b:	89 93 68 05 00 00    	mov    %edx,0x568(%rbx)
ffffffff80216411:	48 c7 c2 69 bc 20 80 	mov    $0xffffffff8020bc69,%rdx
ffffffff80216418:	66 89 8b 66 05 00 00 	mov    %cx,0x566(%rbx)
ffffffff8021641f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216422:	66 89 93 70 05 00 00 	mov    %dx,0x570(%rbx)
ffffffff80216429:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021642d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216431:	89 93 78 05 00 00    	mov    %edx,0x578(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216437:	48 c7 c2 75 bc 20 80 	mov    $0xffffffff8020bc75,%rdx
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8021643e:	66 89 8b 76 05 00 00 	mov    %cx,0x576(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216445:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216448:	66 89 93 80 05 00 00 	mov    %dx,0x580(%rbx)
ffffffff8021644f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216453:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216457:	89 93 88 05 00 00    	mov    %edx,0x588(%rbx)
ffffffff8021645d:	48 c7 c2 81 bc 20 80 	mov    $0xffffffff8020bc81,%rdx
ffffffff80216464:	66 89 8b 86 05 00 00 	mov    %cx,0x586(%rbx)
ffffffff8021646b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021646e:	66 89 93 90 05 00 00 	mov    %dx,0x590(%rbx)
ffffffff80216475:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216479:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021647d:	89 93 98 05 00 00    	mov    %edx,0x598(%rbx)
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216483:	48 c7 c2 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rdx
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8021648a:	66 89 8b 96 05 00 00 	mov    %cx,0x596(%rbx)
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216491:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216494:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216498:	66 89 93 a0 05 00 00 	mov    %dx,0x5a0(%rbx)
ffffffff8021649f:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff802164a3:	c7 83 42 05 00 00 08 	movl   $0x8e000008,0x542(%rbx)
ffffffff802164aa:	00 00 8e 
ffffffff802164ad:	c7 83 4c 05 00 00 00 	movl   $0x0,0x54c(%rbx)
ffffffff802164b4:	00 00 00 
ffffffff802164b7:	c7 83 52 05 00 00 08 	movl   $0x8e000008,0x552(%rbx)
ffffffff802164be:	00 00 8e 
ffffffff802164c1:	c7 83 5c 05 00 00 00 	movl   $0x0,0x55c(%rbx)
ffffffff802164c8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff802164cb:	c7 83 62 05 00 00 08 	movl   $0x8e000008,0x562(%rbx)
ffffffff802164d2:	00 00 8e 
ffffffff802164d5:	c7 83 6c 05 00 00 00 	movl   $0x0,0x56c(%rbx)
ffffffff802164dc:	00 00 00 
ffffffff802164df:	c7 83 72 05 00 00 08 	movl   $0x8e000008,0x572(%rbx)
ffffffff802164e6:	00 00 8e 
ffffffff802164e9:	c7 83 7c 05 00 00 00 	movl   $0x0,0x57c(%rbx)
ffffffff802164f0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff802164f3:	c7 83 82 05 00 00 08 	movl   $0x8e000008,0x582(%rbx)
ffffffff802164fa:	00 00 8e 
ffffffff802164fd:	c7 83 8c 05 00 00 00 	movl   $0x0,0x58c(%rbx)
ffffffff80216504:	00 00 00 
ffffffff80216507:	c7 83 92 05 00 00 08 	movl   $0x8e000008,0x592(%rbx)
ffffffff8021650e:	00 00 8e 
ffffffff80216511:	c7 83 9c 05 00 00 00 	movl   $0x0,0x59c(%rbx)
ffffffff80216518:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8021651b:	c7 83 a2 05 00 00 08 	movl   $0x8e000008,0x5a2(%rbx)
ffffffff80216522:	00 00 8e 
ffffffff80216525:	66 89 8b a6 05 00 00 	mov    %cx,0x5a6(%rbx)
ffffffff8021652c:	89 93 a8 05 00 00    	mov    %edx,0x5a8(%rbx)
ffffffff80216532:	48 c7 c2 99 bc 20 80 	mov    $0xffffffff8020bc99,%rdx
ffffffff80216539:	66 89 93 b0 05 00 00 	mov    %dx,0x5b0(%rbx)
ffffffff80216540:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216543:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216547:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021654b:	89 93 b8 05 00 00    	mov    %edx,0x5b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216551:	48 c7 c2 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rdx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216558:	66 89 8b b6 05 00 00 	mov    %cx,0x5b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8021655f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216562:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216566:	66 89 93 c0 05 00 00 	mov    %dx,0x5c0(%rbx)
ffffffff8021656d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216571:	89 93 c8 05 00 00    	mov    %edx,0x5c8(%rbx)
ffffffff80216577:	48 c7 c2 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rdx
ffffffff8021657e:	66 89 8b c6 05 00 00 	mov    %cx,0x5c6(%rbx)
ffffffff80216585:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216588:	66 89 93 d0 05 00 00 	mov    %dx,0x5d0(%rbx)
ffffffff8021658f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216593:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216597:	89 93 d8 05 00 00    	mov    %edx,0x5d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021659d:	48 c7 c2 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rdx
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff802165a4:	66 89 8b d6 05 00 00 	mov    %cx,0x5d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff802165ab:	48 89 d1             	mov    %rdx,%rcx
ffffffff802165ae:	66 89 93 e0 05 00 00 	mov    %dx,0x5e0(%rbx)
ffffffff802165b5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802165b9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802165bd:	89 93 e8 05 00 00    	mov    %edx,0x5e8(%rbx)
ffffffff802165c3:	48 c7 c2 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rdx
ffffffff802165ca:	66 89 8b e6 05 00 00 	mov    %cx,0x5e6(%rbx)
ffffffff802165d1:	48 89 d1             	mov    %rdx,%rcx
ffffffff802165d4:	66 89 93 f0 05 00 00 	mov    %dx,0x5f0(%rbx)
ffffffff802165db:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802165df:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802165e3:	89 93 f8 05 00 00    	mov    %edx,0x5f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff802165e9:	48 c7 c2 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rdx
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff802165f0:	66 89 8b f6 05 00 00 	mov    %cx,0x5f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff802165f7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802165fa:	66 89 93 00 06 00 00 	mov    %dx,0x600(%rbx)
ffffffff80216601:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216605:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216609:	89 93 08 06 00 00    	mov    %edx,0x608(%rbx)
ffffffff8021660f:	48 c7 c2 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rdx
ffffffff80216616:	66 89 8b 06 06 00 00 	mov    %cx,0x606(%rbx)
ffffffff8021661d:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216620:	c7 83 ac 05 00 00 00 	movl   $0x0,0x5ac(%rbx)
ffffffff80216627:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021662a:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8021662e:	c7 83 b2 05 00 00 08 	movl   $0x8e000008,0x5b2(%rbx)
ffffffff80216635:	00 00 8e 
ffffffff80216638:	c7 83 bc 05 00 00 00 	movl   $0x0,0x5bc(%rbx)
ffffffff8021663f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216642:	c7 83 c2 05 00 00 08 	movl   $0x8e000008,0x5c2(%rbx)
ffffffff80216649:	00 00 8e 
ffffffff8021664c:	c7 83 cc 05 00 00 00 	movl   $0x0,0x5cc(%rbx)
ffffffff80216653:	00 00 00 
ffffffff80216656:	c7 83 d2 05 00 00 08 	movl   $0x8e000008,0x5d2(%rbx)
ffffffff8021665d:	00 00 8e 
ffffffff80216660:	c7 83 dc 05 00 00 00 	movl   $0x0,0x5dc(%rbx)
ffffffff80216667:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021666a:	c7 83 e2 05 00 00 08 	movl   $0x8e000008,0x5e2(%rbx)
ffffffff80216671:	00 00 8e 
ffffffff80216674:	c7 83 ec 05 00 00 00 	movl   $0x0,0x5ec(%rbx)
ffffffff8021667b:	00 00 00 
ffffffff8021667e:	c7 83 f2 05 00 00 08 	movl   $0x8e000008,0x5f2(%rbx)
ffffffff80216685:	00 00 8e 
ffffffff80216688:	c7 83 fc 05 00 00 00 	movl   $0x0,0x5fc(%rbx)
ffffffff8021668f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216692:	c7 83 02 06 00 00 08 	movl   $0x8e000008,0x602(%rbx)
ffffffff80216699:	00 00 8e 
ffffffff8021669c:	c7 83 0c 06 00 00 00 	movl   $0x0,0x60c(%rbx)
ffffffff802166a3:	00 00 00 
ffffffff802166a6:	66 89 93 10 06 00 00 	mov    %dx,0x610(%rbx)
ffffffff802166ad:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802166b1:	89 93 18 06 00 00    	mov    %edx,0x618(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff802166b7:	48 c7 c2 ed bc 20 80 	mov    $0xffffffff8020bced,%rdx
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff802166be:	66 89 8b 16 06 00 00 	mov    %cx,0x616(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff802166c5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802166c8:	66 89 93 20 06 00 00 	mov    %dx,0x620(%rbx)
ffffffff802166cf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802166d3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802166d7:	89 93 28 06 00 00    	mov    %edx,0x628(%rbx)
ffffffff802166dd:	48 c7 c2 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rdx
ffffffff802166e4:	66 89 8b 26 06 00 00 	mov    %cx,0x626(%rbx)
ffffffff802166eb:	48 89 d1             	mov    %rdx,%rcx
ffffffff802166ee:	66 89 93 30 06 00 00 	mov    %dx,0x630(%rbx)
ffffffff802166f5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802166f9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802166fd:	89 93 38 06 00 00    	mov    %edx,0x638(%rbx)
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80216703:	48 c7 c2 05 bd 20 80 	mov    $0xffffffff8020bd05,%rdx
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8021670a:	66 89 8b 36 06 00 00 	mov    %cx,0x636(%rbx)
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80216711:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216714:	66 89 93 40 06 00 00 	mov    %dx,0x640(%rbx)
ffffffff8021671b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021671f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216723:	89 93 48 06 00 00    	mov    %edx,0x648(%rbx)
ffffffff80216729:	48 c7 c2 11 bd 20 80 	mov    $0xffffffff8020bd11,%rdx
ffffffff80216730:	66 89 8b 46 06 00 00 	mov    %cx,0x646(%rbx)
ffffffff80216737:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021673a:	66 89 93 50 06 00 00 	mov    %dx,0x650(%rbx)
ffffffff80216741:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216745:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216749:	89 93 58 06 00 00    	mov    %edx,0x658(%rbx)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8021674f:	48 c7 c2 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rdx
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80216756:	66 89 8b 56 06 00 00 	mov    %cx,0x656(%rbx)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8021675d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216760:	66 89 93 60 06 00 00 	mov    %dx,0x660(%rbx)
ffffffff80216767:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021676b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021676f:	89 93 68 06 00 00    	mov    %edx,0x668(%rbx)
ffffffff80216775:	48 c7 c2 29 bd 20 80 	mov    $0xffffffff8020bd29,%rdx
ffffffff8021677c:	66 89 8b 66 06 00 00 	mov    %cx,0x666(%rbx)
ffffffff80216783:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216786:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021678a:	66 89 93 70 06 00 00 	mov    %dx,0x670(%rbx)
ffffffff80216791:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216795:	66 89 83 14 06 00 00 	mov    %ax,0x614(%rbx)
ffffffff8021679c:	66 89 bb 12 06 00 00 	mov    %di,0x612(%rbx)
ffffffff802167a3:	c7 83 1c 06 00 00 00 	movl   $0x0,0x61c(%rbx)
ffffffff802167aa:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff802167ad:	c7 83 22 06 00 00 08 	movl   $0x8e000008,0x622(%rbx)
ffffffff802167b4:	00 00 8e 
ffffffff802167b7:	c7 83 2c 06 00 00 00 	movl   $0x0,0x62c(%rbx)
ffffffff802167be:	00 00 00 
ffffffff802167c1:	c7 83 32 06 00 00 08 	movl   $0x8e000008,0x632(%rbx)
ffffffff802167c8:	00 00 8e 
ffffffff802167cb:	c7 83 3c 06 00 00 00 	movl   $0x0,0x63c(%rbx)
ffffffff802167d2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff802167d5:	c7 83 42 06 00 00 08 	movl   $0x8e000008,0x642(%rbx)
ffffffff802167dc:	00 00 8e 
ffffffff802167df:	c7 83 4c 06 00 00 00 	movl   $0x0,0x64c(%rbx)
ffffffff802167e6:	00 00 00 
ffffffff802167e9:	c7 83 52 06 00 00 08 	movl   $0x8e000008,0x652(%rbx)
ffffffff802167f0:	00 00 8e 
ffffffff802167f3:	c7 83 5c 06 00 00 00 	movl   $0x0,0x65c(%rbx)
ffffffff802167fa:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff802167fd:	c7 83 62 06 00 00 08 	movl   $0x8e000008,0x662(%rbx)
ffffffff80216804:	00 00 8e 
ffffffff80216807:	c7 83 6c 06 00 00 00 	movl   $0x0,0x66c(%rbx)
ffffffff8021680e:	00 00 00 
ffffffff80216811:	c7 83 72 06 00 00 08 	movl   $0x8e000008,0x672(%rbx)
ffffffff80216818:	00 00 8e 
ffffffff8021681b:	66 89 8b 76 06 00 00 	mov    %cx,0x676(%rbx)
ffffffff80216822:	89 93 78 06 00 00    	mov    %edx,0x678(%rbx)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff80216828:	48 c7 c2 35 bd 20 80 	mov    $0xffffffff8020bd35,%rdx
ffffffff8021682f:	66 89 93 80 06 00 00 	mov    %dx,0x680(%rbx)
ffffffff80216836:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216839:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021683d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216841:	89 93 88 06 00 00    	mov    %edx,0x688(%rbx)
ffffffff80216847:	48 c7 c2 41 bd 20 80 	mov    $0xffffffff8020bd41,%rdx
ffffffff8021684e:	66 89 8b 86 06 00 00 	mov    %cx,0x686(%rbx)
ffffffff80216855:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216858:	66 89 93 90 06 00 00 	mov    %dx,0x690(%rbx)
ffffffff8021685f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216863:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216867:	89 93 98 06 00 00    	mov    %edx,0x698(%rbx)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8021686d:	48 c7 c2 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rdx
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff80216874:	66 89 8b 96 06 00 00 	mov    %cx,0x696(%rbx)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8021687b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021687e:	66 89 93 a0 06 00 00 	mov    %dx,0x6a0(%rbx)
ffffffff80216885:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216889:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021688d:	89 93 a8 06 00 00    	mov    %edx,0x6a8(%rbx)
ffffffff80216893:	48 c7 c2 59 bd 20 80 	mov    $0xffffffff8020bd59,%rdx
ffffffff8021689a:	66 89 8b a6 06 00 00 	mov    %cx,0x6a6(%rbx)
ffffffff802168a1:	48 89 d1             	mov    %rdx,%rcx
ffffffff802168a4:	66 89 93 b0 06 00 00 	mov    %dx,0x6b0(%rbx)
ffffffff802168ab:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802168af:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802168b3:	89 93 b8 06 00 00    	mov    %edx,0x6b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff802168b9:	48 c7 c2 65 bd 20 80 	mov    $0xffffffff8020bd65,%rdx
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff802168c0:	66 89 8b b6 06 00 00 	mov    %cx,0x6b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff802168c7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802168ca:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802168ce:	66 89 93 c0 06 00 00 	mov    %dx,0x6c0(%rbx)
ffffffff802168d5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802168d9:	89 93 c8 06 00 00    	mov    %edx,0x6c8(%rbx)
ffffffff802168df:	48 c7 c2 71 bd 20 80 	mov    $0xffffffff8020bd71,%rdx
ffffffff802168e6:	66 89 8b c6 06 00 00 	mov    %cx,0x6c6(%rbx)
ffffffff802168ed:	48 89 d1             	mov    %rdx,%rcx
ffffffff802168f0:	66 89 93 d0 06 00 00 	mov    %dx,0x6d0(%rbx)
ffffffff802168f7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802168fb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802168ff:	89 93 d8 06 00 00    	mov    %edx,0x6d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216905:	48 c7 c2 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rdx
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8021690c:	66 89 8b d6 06 00 00 	mov    %cx,0x6d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216913:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff80216916:	c7 83 7c 06 00 00 00 	movl   $0x0,0x67c(%rbx)
ffffffff8021691d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216920:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff80216924:	c7 83 82 06 00 00 08 	movl   $0x8e000008,0x682(%rbx)
ffffffff8021692b:	00 00 8e 
ffffffff8021692e:	c7 83 8c 06 00 00 00 	movl   $0x0,0x68c(%rbx)
ffffffff80216935:	00 00 00 
ffffffff80216938:	c7 83 92 06 00 00 08 	movl   $0x8e000008,0x692(%rbx)
ffffffff8021693f:	00 00 8e 
ffffffff80216942:	c7 83 9c 06 00 00 00 	movl   $0x0,0x69c(%rbx)
ffffffff80216949:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8021694c:	c7 83 a2 06 00 00 08 	movl   $0x8e000008,0x6a2(%rbx)
ffffffff80216953:	00 00 8e 
ffffffff80216956:	c7 83 ac 06 00 00 00 	movl   $0x0,0x6ac(%rbx)
ffffffff8021695d:	00 00 00 
ffffffff80216960:	c7 83 b2 06 00 00 08 	movl   $0x8e000008,0x6b2(%rbx)
ffffffff80216967:	00 00 8e 
ffffffff8021696a:	c7 83 bc 06 00 00 00 	movl   $0x0,0x6bc(%rbx)
ffffffff80216971:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff80216974:	c7 83 c2 06 00 00 08 	movl   $0x8e000008,0x6c2(%rbx)
ffffffff8021697b:	00 00 8e 
ffffffff8021697e:	c7 83 cc 06 00 00 00 	movl   $0x0,0x6cc(%rbx)
ffffffff80216985:	00 00 00 
ffffffff80216988:	c7 83 d2 06 00 00 08 	movl   $0x8e000008,0x6d2(%rbx)
ffffffff8021698f:	00 00 8e 
ffffffff80216992:	c7 83 dc 06 00 00 00 	movl   $0x0,0x6dc(%rbx)
ffffffff80216999:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8021699c:	66 89 93 e0 06 00 00 	mov    %dx,0x6e0(%rbx)
ffffffff802169a3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802169a7:	89 93 e8 06 00 00    	mov    %edx,0x6e8(%rbx)
ffffffff802169ad:	48 c7 c2 89 bd 20 80 	mov    $0xffffffff8020bd89,%rdx
ffffffff802169b4:	66 89 8b e6 06 00 00 	mov    %cx,0x6e6(%rbx)
ffffffff802169bb:	48 89 d1             	mov    %rdx,%rcx
ffffffff802169be:	66 89 93 f0 06 00 00 	mov    %dx,0x6f0(%rbx)
ffffffff802169c5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802169c9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802169cd:	89 93 f8 06 00 00    	mov    %edx,0x6f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff802169d3:	48 c7 c2 95 bd 20 80 	mov    $0xffffffff8020bd95,%rdx
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff802169da:	66 89 8b f6 06 00 00 	mov    %cx,0x6f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff802169e1:	48 89 d1             	mov    %rdx,%rcx
ffffffff802169e4:	66 89 93 00 07 00 00 	mov    %dx,0x700(%rbx)
ffffffff802169eb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802169ef:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802169f3:	89 93 08 07 00 00    	mov    %edx,0x708(%rbx)
ffffffff802169f9:	48 c7 c2 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rdx
ffffffff80216a00:	66 89 8b 06 07 00 00 	mov    %cx,0x706(%rbx)
ffffffff80216a07:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216a0a:	66 89 93 10 07 00 00 	mov    %dx,0x710(%rbx)
ffffffff80216a11:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216a15:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216a19:	89 93 18 07 00 00    	mov    %edx,0x718(%rbx)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216a1f:	48 c7 c2 ad bd 20 80 	mov    $0xffffffff8020bdad,%rdx
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216a26:	66 89 8b 16 07 00 00 	mov    %cx,0x716(%rbx)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216a2d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216a30:	66 89 93 20 07 00 00 	mov    %dx,0x720(%rbx)
ffffffff80216a37:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216a3b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216a3f:	89 93 28 07 00 00    	mov    %edx,0x728(%rbx)
ffffffff80216a45:	48 c7 c2 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rdx
ffffffff80216a4c:	66 89 8b 26 07 00 00 	mov    %cx,0x726(%rbx)
ffffffff80216a53:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216a56:	66 89 93 30 07 00 00 	mov    %dx,0x730(%rbx)
ffffffff80216a5d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216a61:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216a65:	89 93 38 07 00 00    	mov    %edx,0x738(%rbx)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216a6b:	48 c7 c2 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rdx
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216a72:	66 89 8b 36 07 00 00 	mov    %cx,0x736(%rbx)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216a79:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216a7c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216a80:	66 89 93 40 07 00 00 	mov    %dx,0x740(%rbx)
ffffffff80216a87:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216a8b:	66 89 8b 46 07 00 00 	mov    %cx,0x746(%rbx)
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216a92:	c7 83 e2 06 00 00 08 	movl   $0x8e000008,0x6e2(%rbx)
ffffffff80216a99:	00 00 8e 
ffffffff80216a9c:	c7 83 ec 06 00 00 00 	movl   $0x0,0x6ec(%rbx)
ffffffff80216aa3:	00 00 00 
ffffffff80216aa6:	c7 83 f2 06 00 00 08 	movl   $0x8e000008,0x6f2(%rbx)
ffffffff80216aad:	00 00 8e 
ffffffff80216ab0:	c7 83 fc 06 00 00 00 	movl   $0x0,0x6fc(%rbx)
ffffffff80216ab7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216aba:	c7 83 02 07 00 00 08 	movl   $0x8e000008,0x702(%rbx)
ffffffff80216ac1:	00 00 8e 
ffffffff80216ac4:	c7 83 0c 07 00 00 00 	movl   $0x0,0x70c(%rbx)
ffffffff80216acb:	00 00 00 
ffffffff80216ace:	c7 83 12 07 00 00 08 	movl   $0x8e000008,0x712(%rbx)
ffffffff80216ad5:	00 00 8e 
ffffffff80216ad8:	c7 83 1c 07 00 00 00 	movl   $0x0,0x71c(%rbx)
ffffffff80216adf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216ae2:	c7 83 22 07 00 00 08 	movl   $0x8e000008,0x722(%rbx)
ffffffff80216ae9:	00 00 8e 
ffffffff80216aec:	c7 83 2c 07 00 00 00 	movl   $0x0,0x72c(%rbx)
ffffffff80216af3:	00 00 00 
ffffffff80216af6:	c7 83 32 07 00 00 08 	movl   $0x8e000008,0x732(%rbx)
ffffffff80216afd:	00 00 8e 
ffffffff80216b00:	c7 83 3c 07 00 00 00 	movl   $0x0,0x73c(%rbx)
ffffffff80216b07:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216b0a:	c7 83 42 07 00 00 08 	movl   $0x8e000008,0x742(%rbx)
ffffffff80216b11:	00 00 8e 
ffffffff80216b14:	89 93 48 07 00 00    	mov    %edx,0x748(%rbx)
ffffffff80216b1a:	48 c7 c2 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rdx
ffffffff80216b21:	66 89 93 50 07 00 00 	mov    %dx,0x750(%rbx)
ffffffff80216b28:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b2b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b2f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216b33:	89 93 58 07 00 00    	mov    %edx,0x758(%rbx)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216b39:	48 c7 c2 dd bd 20 80 	mov    $0xffffffff8020bddd,%rdx
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216b40:	66 89 8b 56 07 00 00 	mov    %cx,0x756(%rbx)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216b47:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b4a:	66 89 93 60 07 00 00 	mov    %dx,0x760(%rbx)
ffffffff80216b51:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b55:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216b59:	89 93 68 07 00 00    	mov    %edx,0x768(%rbx)
ffffffff80216b5f:	48 c7 c2 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rdx
ffffffff80216b66:	66 89 8b 66 07 00 00 	mov    %cx,0x766(%rbx)
ffffffff80216b6d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b70:	66 89 93 70 07 00 00 	mov    %dx,0x770(%rbx)
ffffffff80216b77:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b7b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216b7f:	89 93 78 07 00 00    	mov    %edx,0x778(%rbx)
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216b85:	48 c7 c2 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rdx
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216b8c:	66 89 8b 76 07 00 00 	mov    %cx,0x776(%rbx)
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216b93:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b96:	66 89 93 80 07 00 00 	mov    %dx,0x780(%rbx)
ffffffff80216b9d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216ba1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216ba5:	89 93 88 07 00 00    	mov    %edx,0x788(%rbx)
ffffffff80216bab:	48 c7 c2 01 be 20 80 	mov    $0xffffffff8020be01,%rdx
ffffffff80216bb2:	66 89 8b 86 07 00 00 	mov    %cx,0x786(%rbx)
ffffffff80216bb9:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216bbc:	66 89 93 90 07 00 00 	mov    %dx,0x790(%rbx)
ffffffff80216bc3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216bc7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216bcb:	89 93 98 07 00 00    	mov    %edx,0x798(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216bd1:	48 c7 c2 0d be 20 80 	mov    $0xffffffff8020be0d,%rdx
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216bd8:	66 89 8b 96 07 00 00 	mov    %cx,0x796(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216bdf:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216be2:	66 89 93 a0 07 00 00 	mov    %dx,0x7a0(%rbx)
ffffffff80216be9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216bed:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216bf1:	89 93 a8 07 00 00    	mov    %edx,0x7a8(%rbx)
ffffffff80216bf7:	48 c7 c2 19 be 20 80 	mov    $0xffffffff8020be19,%rdx
ffffffff80216bfe:	66 89 8b a6 07 00 00 	mov    %cx,0x7a6(%rbx)
ffffffff80216c05:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216c08:	66 89 93 b0 07 00 00 	mov    %dx,0x7b0(%rbx)
ffffffff80216c0f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216c13:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216c17:	c7 83 4c 07 00 00 00 	movl   $0x0,0x74c(%rbx)
ffffffff80216c1e:	00 00 00 
ffffffff80216c21:	c7 83 52 07 00 00 08 	movl   $0x8e000008,0x752(%rbx)
ffffffff80216c28:	00 00 8e 
ffffffff80216c2b:	c7 83 5c 07 00 00 00 	movl   $0x0,0x75c(%rbx)
ffffffff80216c32:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216c35:	c7 83 62 07 00 00 08 	movl   $0x8e000008,0x762(%rbx)
ffffffff80216c3c:	00 00 8e 
ffffffff80216c3f:	c7 83 6c 07 00 00 00 	movl   $0x0,0x76c(%rbx)
ffffffff80216c46:	00 00 00 
ffffffff80216c49:	c7 83 72 07 00 00 08 	movl   $0x8e000008,0x772(%rbx)
ffffffff80216c50:	00 00 8e 
ffffffff80216c53:	c7 83 7c 07 00 00 00 	movl   $0x0,0x77c(%rbx)
ffffffff80216c5a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216c5d:	c7 83 82 07 00 00 08 	movl   $0x8e000008,0x782(%rbx)
ffffffff80216c64:	00 00 8e 
ffffffff80216c67:	c7 83 8c 07 00 00 00 	movl   $0x0,0x78c(%rbx)
ffffffff80216c6e:	00 00 00 
ffffffff80216c71:	c7 83 92 07 00 00 08 	movl   $0x8e000008,0x792(%rbx)
ffffffff80216c78:	00 00 8e 
ffffffff80216c7b:	c7 83 9c 07 00 00 00 	movl   $0x0,0x79c(%rbx)
ffffffff80216c82:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216c85:	c7 83 a2 07 00 00 08 	movl   $0x8e000008,0x7a2(%rbx)
ffffffff80216c8c:	00 00 8e 
ffffffff80216c8f:	c7 83 ac 07 00 00 00 	movl   $0x0,0x7ac(%rbx)
ffffffff80216c96:	00 00 00 
ffffffff80216c99:	c7 83 b2 07 00 00 08 	movl   $0x8e000008,0x7b2(%rbx)
ffffffff80216ca0:	00 00 8e 
ffffffff80216ca3:	89 93 b8 07 00 00    	mov    %edx,0x7b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216ca9:	48 c7 c2 25 be 20 80 	mov    $0xffffffff8020be25,%rdx
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216cb0:	66 89 8b b6 07 00 00 	mov    %cx,0x7b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216cb7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216cba:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216cbe:	66 89 93 c0 07 00 00 	mov    %dx,0x7c0(%rbx)
ffffffff80216cc5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216cc9:	89 93 c8 07 00 00    	mov    %edx,0x7c8(%rbx)
ffffffff80216ccf:	48 c7 c2 31 be 20 80 	mov    $0xffffffff8020be31,%rdx
ffffffff80216cd6:	66 89 8b c6 07 00 00 	mov    %cx,0x7c6(%rbx)
ffffffff80216cdd:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216ce0:	66 89 93 d0 07 00 00 	mov    %dx,0x7d0(%rbx)
ffffffff80216ce7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216ceb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216cef:	89 93 d8 07 00 00    	mov    %edx,0x7d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216cf5:	48 c7 c2 3d be 20 80 	mov    $0xffffffff8020be3d,%rdx
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216cfc:	66 89 8b d6 07 00 00 	mov    %cx,0x7d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216d03:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216d06:	66 89 93 e0 07 00 00 	mov    %dx,0x7e0(%rbx)
ffffffff80216d0d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216d11:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216d15:	89 93 e8 07 00 00    	mov    %edx,0x7e8(%rbx)
ffffffff80216d1b:	48 c7 c2 49 be 20 80 	mov    $0xffffffff8020be49,%rdx
ffffffff80216d22:	66 89 8b e6 07 00 00 	mov    %cx,0x7e6(%rbx)
ffffffff80216d29:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216d2c:	66 89 93 f0 07 00 00 	mov    %dx,0x7f0(%rbx)
ffffffff80216d33:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216d37:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216d3b:	89 93 f8 07 00 00    	mov    %edx,0x7f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80216d41:	48 c7 c2 55 be 20 80 	mov    $0xffffffff8020be55,%rdx
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216d48:	66 89 8b f6 07 00 00 	mov    %cx,0x7f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80216d4f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216d52:	66 89 93 00 08 00 00 	mov    %dx,0x800(%rbx)
ffffffff80216d59:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216d5d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216d61:	89 93 08 08 00 00    	mov    %edx,0x808(%rbx)
ffffffff80216d67:	48 c7 c2 64 be 20 80 	mov    $0xffffffff8020be64,%rdx
ffffffff80216d6e:	66 89 8b 06 08 00 00 	mov    %cx,0x806(%rbx)
ffffffff80216d75:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216d78:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216d7c:	66 89 93 10 08 00 00 	mov    %dx,0x810(%rbx)
ffffffff80216d83:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216d87:	66 89 83 14 08 00 00 	mov    %ax,0x814(%rbx)
ffffffff80216d8e:	66 89 8b 16 08 00 00 	mov    %cx,0x816(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216d95:	c7 83 bc 07 00 00 00 	movl   $0x0,0x7bc(%rbx)
ffffffff80216d9c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216d9f:	c7 83 c2 07 00 00 08 	movl   $0x8e000008,0x7c2(%rbx)
ffffffff80216da6:	00 00 8e 
ffffffff80216da9:	c7 83 cc 07 00 00 00 	movl   $0x0,0x7cc(%rbx)
ffffffff80216db0:	00 00 00 
ffffffff80216db3:	c7 83 d2 07 00 00 08 	movl   $0x8e000008,0x7d2(%rbx)
ffffffff80216dba:	00 00 8e 
ffffffff80216dbd:	c7 83 dc 07 00 00 00 	movl   $0x0,0x7dc(%rbx)
ffffffff80216dc4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216dc7:	c7 83 e2 07 00 00 08 	movl   $0x8e000008,0x7e2(%rbx)
ffffffff80216dce:	00 00 8e 
ffffffff80216dd1:	c7 83 ec 07 00 00 00 	movl   $0x0,0x7ec(%rbx)
ffffffff80216dd8:	00 00 00 
ffffffff80216ddb:	c7 83 f2 07 00 00 08 	movl   $0x8e000008,0x7f2(%rbx)
ffffffff80216de2:	00 00 8e 
ffffffff80216de5:	c7 83 fc 07 00 00 00 	movl   $0x0,0x7fc(%rbx)
ffffffff80216dec:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80216def:	c7 83 02 08 00 00 08 	movl   $0x8e000008,0x802(%rbx)
ffffffff80216df6:	00 00 8e 
ffffffff80216df9:	c7 83 0c 08 00 00 00 	movl   $0x0,0x80c(%rbx)
ffffffff80216e00:	00 00 00 
ffffffff80216e03:	66 44 89 83 12 08 00 	mov    %r8w,0x812(%rbx)
ffffffff80216e0a:	00 
ffffffff80216e0b:	89 93 18 08 00 00    	mov    %edx,0x818(%rbx)
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff80216e11:	48 c7 c2 73 be 20 80 	mov    $0xffffffff8020be73,%rdx
ffffffff80216e18:	66 89 93 20 08 00 00 	mov    %dx,0x820(%rbx)
ffffffff80216e1f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e22:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e26:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e2a:	89 93 28 08 00 00    	mov    %edx,0x828(%rbx)
ffffffff80216e30:	48 c7 c2 82 be 20 80 	mov    $0xffffffff8020be82,%rdx
ffffffff80216e37:	66 89 8b 26 08 00 00 	mov    %cx,0x826(%rbx)
ffffffff80216e3e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e41:	66 89 93 30 08 00 00 	mov    %dx,0x830(%rbx)
ffffffff80216e48:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e4c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e50:	89 93 38 08 00 00    	mov    %edx,0x838(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80216e56:	48 c7 c2 91 be 20 80 	mov    $0xffffffff8020be91,%rdx
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff80216e5d:	66 89 8b 36 08 00 00 	mov    %cx,0x836(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80216e64:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e67:	66 89 93 40 08 00 00 	mov    %dx,0x840(%rbx)
ffffffff80216e6e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e72:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e76:	89 93 48 08 00 00    	mov    %edx,0x848(%rbx)
ffffffff80216e7c:	48 c7 c2 a0 be 20 80 	mov    $0xffffffff8020bea0,%rdx
ffffffff80216e83:	66 89 8b 46 08 00 00 	mov    %cx,0x846(%rbx)
ffffffff80216e8a:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e8d:	66 89 93 50 08 00 00 	mov    %dx,0x850(%rbx)
ffffffff80216e94:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e98:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e9c:	89 93 58 08 00 00    	mov    %edx,0x858(%rbx)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80216ea2:	48 c7 c2 af be 20 80 	mov    $0xffffffff8020beaf,%rdx
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80216ea9:	66 89 8b 56 08 00 00 	mov    %cx,0x856(%rbx)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80216eb0:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216eb3:	66 89 93 60 08 00 00 	mov    %dx,0x860(%rbx)
ffffffff80216eba:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216ebe:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216ec2:	89 93 68 08 00 00    	mov    %edx,0x868(%rbx)
ffffffff80216ec8:	48 c7 c2 be be 20 80 	mov    $0xffffffff8020bebe,%rdx
ffffffff80216ecf:	66 89 8b 66 08 00 00 	mov    %cx,0x866(%rbx)
ffffffff80216ed6:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216ed9:	66 89 93 70 08 00 00 	mov    %dx,0x870(%rbx)
ffffffff80216ee0:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216ee4:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216ee8:	89 93 78 08 00 00    	mov    %edx,0x878(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80216eee:	48 c7 c2 cd be 20 80 	mov    $0xffffffff8020becd,%rdx
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80216ef5:	66 89 8b 76 08 00 00 	mov    %cx,0x876(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80216efc:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216eff:	66 89 93 80 08 00 00 	mov    %dx,0x880(%rbx)
ffffffff80216f06:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f0a:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80216f0e:	c7 83 1c 08 00 00 00 	movl   $0x0,0x81c(%rbx)
ffffffff80216f15:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff80216f18:	c7 83 22 08 00 00 08 	movl   $0x8e000008,0x822(%rbx)
ffffffff80216f1f:	00 00 8e 
ffffffff80216f22:	c7 83 2c 08 00 00 00 	movl   $0x0,0x82c(%rbx)
ffffffff80216f29:	00 00 00 
ffffffff80216f2c:	c7 83 32 08 00 00 08 	movl   $0x8e000008,0x832(%rbx)
ffffffff80216f33:	00 00 8e 
ffffffff80216f36:	c7 83 3c 08 00 00 00 	movl   $0x0,0x83c(%rbx)
ffffffff80216f3d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80216f40:	c7 83 42 08 00 00 08 	movl   $0x8e000008,0x842(%rbx)
ffffffff80216f47:	00 00 8e 
ffffffff80216f4a:	c7 83 4c 08 00 00 00 	movl   $0x0,0x84c(%rbx)
ffffffff80216f51:	00 00 00 
ffffffff80216f54:	c7 83 52 08 00 00 08 	movl   $0x8e000008,0x852(%rbx)
ffffffff80216f5b:	00 00 8e 
ffffffff80216f5e:	c7 83 5c 08 00 00 00 	movl   $0x0,0x85c(%rbx)
ffffffff80216f65:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80216f68:	c7 83 62 08 00 00 08 	movl   $0x8e000008,0x862(%rbx)
ffffffff80216f6f:	00 00 8e 
ffffffff80216f72:	c7 83 6c 08 00 00 00 	movl   $0x0,0x86c(%rbx)
ffffffff80216f79:	00 00 00 
ffffffff80216f7c:	c7 83 72 08 00 00 08 	movl   $0x8e000008,0x872(%rbx)
ffffffff80216f83:	00 00 8e 
ffffffff80216f86:	c7 83 7c 08 00 00 00 	movl   $0x0,0x87c(%rbx)
ffffffff80216f8d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80216f90:	c7 83 82 08 00 00 08 	movl   $0x8e000008,0x882(%rbx)
ffffffff80216f97:	00 00 8e 
ffffffff80216f9a:	89 93 88 08 00 00    	mov    %edx,0x888(%rbx)
ffffffff80216fa0:	48 c7 c2 dc be 20 80 	mov    $0xffffffff8020bedc,%rdx
ffffffff80216fa7:	66 89 8b 86 08 00 00 	mov    %cx,0x886(%rbx)
ffffffff80216fae:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216fb1:	66 89 93 90 08 00 00 	mov    %dx,0x890(%rbx)
ffffffff80216fb8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216fbc:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216fc0:	89 93 98 08 00 00    	mov    %edx,0x898(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80216fc6:	48 c7 c2 eb be 20 80 	mov    $0xffffffff8020beeb,%rdx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80216fcd:	66 89 8b 96 08 00 00 	mov    %cx,0x896(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80216fd4:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216fd7:	66 89 93 a0 08 00 00 	mov    %dx,0x8a0(%rbx)
ffffffff80216fde:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216fe2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216fe6:	89 93 a8 08 00 00    	mov    %edx,0x8a8(%rbx)
ffffffff80216fec:	48 c7 c2 fa be 20 80 	mov    $0xffffffff8020befa,%rdx
ffffffff80216ff3:	66 89 8b a6 08 00 00 	mov    %cx,0x8a6(%rbx)
ffffffff80216ffa:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216ffd:	66 89 93 b0 08 00 00 	mov    %dx,0x8b0(%rbx)
ffffffff80217004:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217008:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021700c:	89 93 b8 08 00 00    	mov    %edx,0x8b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217012:	48 c7 c2 09 bf 20 80 	mov    $0xffffffff8020bf09,%rdx
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80217019:	66 89 8b b6 08 00 00 	mov    %cx,0x8b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217020:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217023:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217027:	66 89 93 c0 08 00 00 	mov    %dx,0x8c0(%rbx)
ffffffff8021702e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217032:	89 93 c8 08 00 00    	mov    %edx,0x8c8(%rbx)
ffffffff80217038:	48 c7 c2 18 bf 20 80 	mov    $0xffffffff8020bf18,%rdx
ffffffff8021703f:	66 89 8b c6 08 00 00 	mov    %cx,0x8c6(%rbx)
ffffffff80217046:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217049:	66 89 93 d0 08 00 00 	mov    %dx,0x8d0(%rbx)
ffffffff80217050:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217054:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217058:	89 93 d8 08 00 00    	mov    %edx,0x8d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8021705e:	48 c7 c2 27 bf 20 80 	mov    $0xffffffff8020bf27,%rdx
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217065:	66 89 8b d6 08 00 00 	mov    %cx,0x8d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8021706c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021706f:	66 89 93 e0 08 00 00 	mov    %dx,0x8e0(%rbx)
ffffffff80217076:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021707a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021707e:	89 93 e8 08 00 00    	mov    %edx,0x8e8(%rbx)
ffffffff80217084:	48 c7 c2 36 bf 20 80 	mov    $0xffffffff8020bf36,%rdx
ffffffff8021708b:	66 89 8b e6 08 00 00 	mov    %cx,0x8e6(%rbx)
ffffffff80217092:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80217095:	c7 83 8c 08 00 00 00 	movl   $0x0,0x88c(%rbx)
ffffffff8021709c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8021709f:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff802170a3:	c7 83 92 08 00 00 08 	movl   $0x8e000008,0x892(%rbx)
ffffffff802170aa:	00 00 8e 
ffffffff802170ad:	c7 83 9c 08 00 00 00 	movl   $0x0,0x89c(%rbx)
ffffffff802170b4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff802170b7:	c7 83 a2 08 00 00 08 	movl   $0x8e000008,0x8a2(%rbx)
ffffffff802170be:	00 00 8e 
ffffffff802170c1:	c7 83 ac 08 00 00 00 	movl   $0x0,0x8ac(%rbx)
ffffffff802170c8:	00 00 00 
ffffffff802170cb:	c7 83 b2 08 00 00 08 	movl   $0x8e000008,0x8b2(%rbx)
ffffffff802170d2:	00 00 8e 
ffffffff802170d5:	c7 83 bc 08 00 00 00 	movl   $0x0,0x8bc(%rbx)
ffffffff802170dc:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff802170df:	c7 83 c2 08 00 00 08 	movl   $0x8e000008,0x8c2(%rbx)
ffffffff802170e6:	00 00 8e 
ffffffff802170e9:	c7 83 cc 08 00 00 00 	movl   $0x0,0x8cc(%rbx)
ffffffff802170f0:	00 00 00 
ffffffff802170f3:	c7 83 d2 08 00 00 08 	movl   $0x8e000008,0x8d2(%rbx)
ffffffff802170fa:	00 00 8e 
ffffffff802170fd:	c7 83 dc 08 00 00 00 	movl   $0x0,0x8dc(%rbx)
ffffffff80217104:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80217107:	c7 83 e2 08 00 00 08 	movl   $0x8e000008,0x8e2(%rbx)
ffffffff8021710e:	00 00 8e 
ffffffff80217111:	c7 83 ec 08 00 00 00 	movl   $0x0,0x8ec(%rbx)
ffffffff80217118:	00 00 00 
ffffffff8021711b:	66 89 93 f0 08 00 00 	mov    %dx,0x8f0(%rbx)
ffffffff80217122:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217126:	89 93 f8 08 00 00    	mov    %edx,0x8f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8021712c:	48 c7 c2 45 bf 20 80 	mov    $0xffffffff8020bf45,%rdx
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80217133:	66 89 8b f6 08 00 00 	mov    %cx,0x8f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8021713a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021713d:	66 89 93 00 09 00 00 	mov    %dx,0x900(%rbx)
ffffffff80217144:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217148:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021714c:	89 93 08 09 00 00    	mov    %edx,0x908(%rbx)
ffffffff80217152:	48 c7 c2 54 bf 20 80 	mov    $0xffffffff8020bf54,%rdx
ffffffff80217159:	66 89 8b 06 09 00 00 	mov    %cx,0x906(%rbx)
ffffffff80217160:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217163:	66 89 93 10 09 00 00 	mov    %dx,0x910(%rbx)
ffffffff8021716a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021716e:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217172:	89 93 18 09 00 00    	mov    %edx,0x918(%rbx)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80217178:	48 c7 c2 63 bf 20 80 	mov    $0xffffffff8020bf63,%rdx
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8021717f:	66 89 8b 16 09 00 00 	mov    %cx,0x916(%rbx)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80217186:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217189:	66 89 93 20 09 00 00 	mov    %dx,0x920(%rbx)
ffffffff80217190:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217194:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217198:	89 93 28 09 00 00    	mov    %edx,0x928(%rbx)
ffffffff8021719e:	48 c7 c2 72 bf 20 80 	mov    $0xffffffff8020bf72,%rdx
ffffffff802171a5:	66 89 8b 26 09 00 00 	mov    %cx,0x926(%rbx)
ffffffff802171ac:	48 89 d1             	mov    %rdx,%rcx
ffffffff802171af:	66 89 93 30 09 00 00 	mov    %dx,0x930(%rbx)
ffffffff802171b6:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802171ba:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802171be:	89 93 38 09 00 00    	mov    %edx,0x938(%rbx)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff802171c4:	48 c7 c2 81 bf 20 80 	mov    $0xffffffff8020bf81,%rdx
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff802171cb:	66 89 8b 36 09 00 00 	mov    %cx,0x936(%rbx)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff802171d2:	48 89 d1             	mov    %rdx,%rcx
ffffffff802171d5:	66 89 93 40 09 00 00 	mov    %dx,0x940(%rbx)
ffffffff802171dc:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802171e0:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802171e4:	89 93 48 09 00 00    	mov    %edx,0x948(%rbx)
ffffffff802171ea:	48 c7 c2 90 bf 20 80 	mov    $0xffffffff8020bf90,%rdx
ffffffff802171f1:	66 89 8b 46 09 00 00 	mov    %cx,0x946(%rbx)
ffffffff802171f8:	48 89 d1             	mov    %rdx,%rcx
ffffffff802171fb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802171ff:	66 89 93 50 09 00 00 	mov    %dx,0x950(%rbx)
ffffffff80217206:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8021720a:	c7 83 f2 08 00 00 08 	movl   $0x8e000008,0x8f2(%rbx)
ffffffff80217211:	00 00 8e 
ffffffff80217214:	c7 83 fc 08 00 00 00 	movl   $0x0,0x8fc(%rbx)
ffffffff8021721b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8021721e:	c7 83 02 09 00 00 08 	movl   $0x8e000008,0x902(%rbx)
ffffffff80217225:	00 00 8e 
ffffffff80217228:	c7 83 0c 09 00 00 00 	movl   $0x0,0x90c(%rbx)
ffffffff8021722f:	00 00 00 
ffffffff80217232:	c7 83 12 09 00 00 08 	movl   $0x8e000008,0x912(%rbx)
ffffffff80217239:	00 00 8e 
ffffffff8021723c:	c7 83 1c 09 00 00 00 	movl   $0x0,0x91c(%rbx)
ffffffff80217243:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80217246:	c7 83 22 09 00 00 08 	movl   $0x8e000008,0x922(%rbx)
ffffffff8021724d:	00 00 8e 
ffffffff80217250:	c7 83 2c 09 00 00 00 	movl   $0x0,0x92c(%rbx)
ffffffff80217257:	00 00 00 
ffffffff8021725a:	c7 83 32 09 00 00 08 	movl   $0x8e000008,0x932(%rbx)
ffffffff80217261:	00 00 8e 
ffffffff80217264:	c7 83 3c 09 00 00 00 	movl   $0x0,0x93c(%rbx)
ffffffff8021726b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8021726e:	c7 83 42 09 00 00 08 	movl   $0x8e000008,0x942(%rbx)
ffffffff80217275:	00 00 8e 
ffffffff80217278:	c7 83 4c 09 00 00 00 	movl   $0x0,0x94c(%rbx)
ffffffff8021727f:	00 00 00 
ffffffff80217282:	c7 83 52 09 00 00 08 	movl   $0x8e000008,0x952(%rbx)
ffffffff80217289:	00 00 8e 
ffffffff8021728c:	66 89 8b 56 09 00 00 	mov    %cx,0x956(%rbx)
ffffffff80217293:	89 93 58 09 00 00    	mov    %edx,0x958(%rbx)
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80217299:	48 c7 c2 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rdx
ffffffff802172a0:	66 89 93 60 09 00 00 	mov    %dx,0x960(%rbx)
ffffffff802172a7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802172aa:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802172ae:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802172b2:	89 93 68 09 00 00    	mov    %edx,0x968(%rbx)
ffffffff802172b8:	48 c7 c2 ae bf 20 80 	mov    $0xffffffff8020bfae,%rdx
ffffffff802172bf:	66 89 8b 66 09 00 00 	mov    %cx,0x966(%rbx)
ffffffff802172c6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802172c9:	66 89 93 70 09 00 00 	mov    %dx,0x970(%rbx)
ffffffff802172d0:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802172d4:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802172d8:	89 93 78 09 00 00    	mov    %edx,0x978(%rbx)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff802172de:	48 c7 c2 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rdx
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff802172e5:	66 89 8b 76 09 00 00 	mov    %cx,0x976(%rbx)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff802172ec:	48 89 d1             	mov    %rdx,%rcx
ffffffff802172ef:	66 89 93 80 09 00 00 	mov    %dx,0x980(%rbx)
ffffffff802172f6:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802172fa:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802172fe:	89 93 88 09 00 00    	mov    %edx,0x988(%rbx)
ffffffff80217304:	48 c7 c2 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rdx
ffffffff8021730b:	66 89 8b 86 09 00 00 	mov    %cx,0x986(%rbx)
ffffffff80217312:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217315:	66 89 93 90 09 00 00 	mov    %dx,0x990(%rbx)
ffffffff8021731c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217320:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217324:	89 93 98 09 00 00    	mov    %edx,0x998(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8021732a:	48 c7 c2 db bf 20 80 	mov    $0xffffffff8020bfdb,%rdx
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80217331:	66 89 8b 96 09 00 00 	mov    %cx,0x996(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80217338:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021733b:	66 89 93 a0 09 00 00 	mov    %dx,0x9a0(%rbx)
ffffffff80217342:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217346:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021734a:	89 93 a8 09 00 00    	mov    %edx,0x9a8(%rbx)
ffffffff80217350:	48 c7 c2 ea bf 20 80 	mov    $0xffffffff8020bfea,%rdx
ffffffff80217357:	66 89 8b a6 09 00 00 	mov    %cx,0x9a6(%rbx)
ffffffff8021735e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217361:	66 89 93 b0 09 00 00 	mov    %dx,0x9b0(%rbx)
ffffffff80217368:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021736c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217370:	89 93 b8 09 00 00    	mov    %edx,0x9b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217376:	48 c7 c2 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rdx
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8021737d:	66 89 8b b6 09 00 00 	mov    %cx,0x9b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217384:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80217387:	c7 83 5c 09 00 00 00 	movl   $0x0,0x95c(%rbx)
ffffffff8021738e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217391:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80217395:	c7 83 62 09 00 00 08 	movl   $0x8e000008,0x962(%rbx)
ffffffff8021739c:	00 00 8e 
ffffffff8021739f:	c7 83 6c 09 00 00 00 	movl   $0x0,0x96c(%rbx)
ffffffff802173a6:	00 00 00 
ffffffff802173a9:	c7 83 72 09 00 00 08 	movl   $0x8e000008,0x972(%rbx)
ffffffff802173b0:	00 00 8e 
ffffffff802173b3:	c7 83 7c 09 00 00 00 	movl   $0x0,0x97c(%rbx)
ffffffff802173ba:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff802173bd:	c7 83 82 09 00 00 08 	movl   $0x8e000008,0x982(%rbx)
ffffffff802173c4:	00 00 8e 
ffffffff802173c7:	c7 83 8c 09 00 00 00 	movl   $0x0,0x98c(%rbx)
ffffffff802173ce:	00 00 00 
ffffffff802173d1:	c7 83 92 09 00 00 08 	movl   $0x8e000008,0x992(%rbx)
ffffffff802173d8:	00 00 8e 
ffffffff802173db:	c7 83 9c 09 00 00 00 	movl   $0x0,0x99c(%rbx)
ffffffff802173e2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff802173e5:	c7 83 a2 09 00 00 08 	movl   $0x8e000008,0x9a2(%rbx)
ffffffff802173ec:	00 00 8e 
ffffffff802173ef:	c7 83 ac 09 00 00 00 	movl   $0x0,0x9ac(%rbx)
ffffffff802173f6:	00 00 00 
ffffffff802173f9:	c7 83 b2 09 00 00 08 	movl   $0x8e000008,0x9b2(%rbx)
ffffffff80217400:	00 00 8e 
ffffffff80217403:	c7 83 bc 09 00 00 00 	movl   $0x0,0x9bc(%rbx)
ffffffff8021740a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8021740d:	66 89 93 c0 09 00 00 	mov    %dx,0x9c0(%rbx)
ffffffff80217414:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217418:	89 93 c8 09 00 00    	mov    %edx,0x9c8(%rbx)
ffffffff8021741e:	48 c7 c2 08 c0 20 80 	mov    $0xffffffff8020c008,%rdx
ffffffff80217425:	66 89 8b c6 09 00 00 	mov    %cx,0x9c6(%rbx)
ffffffff8021742c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021742f:	66 89 93 d0 09 00 00 	mov    %dx,0x9d0(%rbx)
ffffffff80217436:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021743a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021743e:	89 93 d8 09 00 00    	mov    %edx,0x9d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217444:	48 c7 c2 17 c0 20 80 	mov    $0xffffffff8020c017,%rdx
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8021744b:	66 89 8b d6 09 00 00 	mov    %cx,0x9d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217452:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217455:	66 89 93 e0 09 00 00 	mov    %dx,0x9e0(%rbx)
ffffffff8021745c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217460:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217464:	89 93 e8 09 00 00    	mov    %edx,0x9e8(%rbx)
ffffffff8021746a:	48 c7 c2 26 c0 20 80 	mov    $0xffffffff8020c026,%rdx
ffffffff80217471:	66 89 8b e6 09 00 00 	mov    %cx,0x9e6(%rbx)
ffffffff80217478:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021747b:	66 89 93 f0 09 00 00 	mov    %dx,0x9f0(%rbx)
ffffffff80217482:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217486:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021748a:	89 93 f8 09 00 00    	mov    %edx,0x9f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80217490:	48 c7 c2 35 c0 20 80 	mov    $0xffffffff8020c035,%rdx
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217497:	66 89 8b f6 09 00 00 	mov    %cx,0x9f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8021749e:	48 89 d1             	mov    %rdx,%rcx
ffffffff802174a1:	66 89 93 00 0a 00 00 	mov    %dx,0xa00(%rbx)
ffffffff802174a8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802174ac:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802174b0:	89 93 08 0a 00 00    	mov    %edx,0xa08(%rbx)
ffffffff802174b6:	48 c7 c2 44 c0 20 80 	mov    $0xffffffff8020c044,%rdx
ffffffff802174bd:	66 89 8b 06 0a 00 00 	mov    %cx,0xa06(%rbx)
ffffffff802174c4:	48 89 d1             	mov    %rdx,%rcx
ffffffff802174c7:	66 89 93 10 0a 00 00 	mov    %dx,0xa10(%rbx)
ffffffff802174ce:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802174d2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802174d6:	89 93 18 0a 00 00    	mov    %edx,0xa18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff802174dc:	48 c7 c2 53 c0 20 80 	mov    $0xffffffff8020c053,%rdx
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff802174e3:	66 89 8b 16 0a 00 00 	mov    %cx,0xa16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff802174ea:	48 89 d1             	mov    %rdx,%rcx
ffffffff802174ed:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802174f1:	66 89 93 20 0a 00 00 	mov    %dx,0xa20(%rbx)
ffffffff802174f8:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff802174fc:	66 89 83 14 0a 00 00 	mov    %ax,0xa14(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217503:	c7 83 c2 09 00 00 08 	movl   $0x8e000008,0x9c2(%rbx)
ffffffff8021750a:	00 00 8e 
ffffffff8021750d:	c7 83 cc 09 00 00 00 	movl   $0x0,0x9cc(%rbx)
ffffffff80217514:	00 00 00 
ffffffff80217517:	c7 83 d2 09 00 00 08 	movl   $0x8e000008,0x9d2(%rbx)
ffffffff8021751e:	00 00 8e 
ffffffff80217521:	c7 83 dc 09 00 00 00 	movl   $0x0,0x9dc(%rbx)
ffffffff80217528:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8021752b:	c7 83 e2 09 00 00 08 	movl   $0x8e000008,0x9e2(%rbx)
ffffffff80217532:	00 00 8e 
ffffffff80217535:	c7 83 ec 09 00 00 00 	movl   $0x0,0x9ec(%rbx)
ffffffff8021753c:	00 00 00 
ffffffff8021753f:	c7 83 f2 09 00 00 08 	movl   $0x8e000008,0x9f2(%rbx)
ffffffff80217546:	00 00 8e 
ffffffff80217549:	c7 83 fc 09 00 00 00 	movl   $0x0,0x9fc(%rbx)
ffffffff80217550:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80217553:	c7 83 02 0a 00 00 08 	movl   $0x8e000008,0xa02(%rbx)
ffffffff8021755a:	00 00 8e 
ffffffff8021755d:	c7 83 0c 0a 00 00 00 	movl   $0x0,0xa0c(%rbx)
ffffffff80217564:	00 00 00 
ffffffff80217567:	66 44 89 8b 12 0a 00 	mov    %r9w,0xa12(%rbx)
ffffffff8021756e:	00 
ffffffff8021756f:	c7 83 1c 0a 00 00 00 	movl   $0x0,0xa1c(%rbx)
ffffffff80217576:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80217579:	c7 83 22 0a 00 00 08 	movl   $0x8e000008,0xa22(%rbx)
ffffffff80217580:	00 00 8e 
ffffffff80217583:	66 89 8b 26 0a 00 00 	mov    %cx,0xa26(%rbx)
ffffffff8021758a:	89 93 28 0a 00 00    	mov    %edx,0xa28(%rbx)
ffffffff80217590:	48 c7 c2 62 c0 20 80 	mov    $0xffffffff8020c062,%rdx
ffffffff80217597:	66 89 93 30 0a 00 00 	mov    %dx,0xa30(%rbx)
ffffffff8021759e:	48 89 d1             	mov    %rdx,%rcx
ffffffff802175a1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802175a5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802175a9:	89 93 38 0a 00 00    	mov    %edx,0xa38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff802175af:	48 c7 c2 71 c0 20 80 	mov    $0xffffffff8020c071,%rdx
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff802175b6:	66 89 8b 36 0a 00 00 	mov    %cx,0xa36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff802175bd:	48 89 d1             	mov    %rdx,%rcx
ffffffff802175c0:	66 89 93 40 0a 00 00 	mov    %dx,0xa40(%rbx)
ffffffff802175c7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802175cb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802175cf:	89 93 48 0a 00 00    	mov    %edx,0xa48(%rbx)
ffffffff802175d5:	48 c7 c2 80 c0 20 80 	mov    $0xffffffff8020c080,%rdx
ffffffff802175dc:	66 89 8b 46 0a 00 00 	mov    %cx,0xa46(%rbx)
ffffffff802175e3:	48 89 d1             	mov    %rdx,%rcx
ffffffff802175e6:	66 89 93 50 0a 00 00 	mov    %dx,0xa50(%rbx)
ffffffff802175ed:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802175f1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802175f5:	89 93 58 0a 00 00    	mov    %edx,0xa58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff802175fb:	48 c7 c2 8f c0 20 80 	mov    $0xffffffff8020c08f,%rdx
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80217602:	66 89 8b 56 0a 00 00 	mov    %cx,0xa56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80217609:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021760c:	66 89 93 60 0a 00 00 	mov    %dx,0xa60(%rbx)
ffffffff80217613:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217617:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021761b:	89 93 68 0a 00 00    	mov    %edx,0xa68(%rbx)
ffffffff80217621:	48 c7 c2 9e c0 20 80 	mov    $0xffffffff8020c09e,%rdx
ffffffff80217628:	66 89 8b 66 0a 00 00 	mov    %cx,0xa66(%rbx)
ffffffff8021762f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217632:	66 89 93 70 0a 00 00 	mov    %dx,0xa70(%rbx)
ffffffff80217639:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021763d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217641:	89 93 78 0a 00 00    	mov    %edx,0xa78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80217647:	48 c7 c2 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rdx
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff8021764e:	66 89 8b 76 0a 00 00 	mov    %cx,0xa76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80217655:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217658:	66 89 93 80 0a 00 00 	mov    %dx,0xa80(%rbx)
ffffffff8021765f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217663:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217667:	89 93 88 0a 00 00    	mov    %edx,0xa88(%rbx)
ffffffff8021766d:	48 c7 c2 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rdx
ffffffff80217674:	66 89 8b 86 0a 00 00 	mov    %cx,0xa86(%rbx)
ffffffff8021767b:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8021767e:	c7 83 2c 0a 00 00 00 	movl   $0x0,0xa2c(%rbx)
ffffffff80217685:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80217688:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8021768c:	c7 83 32 0a 00 00 08 	movl   $0x8e000008,0xa32(%rbx)
ffffffff80217693:	00 00 8e 
ffffffff80217696:	c7 83 3c 0a 00 00 00 	movl   $0x0,0xa3c(%rbx)
ffffffff8021769d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff802176a0:	c7 83 42 0a 00 00 08 	movl   $0x8e000008,0xa42(%rbx)
ffffffff802176a7:	00 00 8e 
ffffffff802176aa:	c7 83 4c 0a 00 00 00 	movl   $0x0,0xa4c(%rbx)
ffffffff802176b1:	00 00 00 
ffffffff802176b4:	c7 83 52 0a 00 00 08 	movl   $0x8e000008,0xa52(%rbx)
ffffffff802176bb:	00 00 8e 
ffffffff802176be:	c7 83 5c 0a 00 00 00 	movl   $0x0,0xa5c(%rbx)
ffffffff802176c5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff802176c8:	c7 83 62 0a 00 00 08 	movl   $0x8e000008,0xa62(%rbx)
ffffffff802176cf:	00 00 8e 
ffffffff802176d2:	c7 83 6c 0a 00 00 00 	movl   $0x0,0xa6c(%rbx)
ffffffff802176d9:	00 00 00 
ffffffff802176dc:	c7 83 72 0a 00 00 08 	movl   $0x8e000008,0xa72(%rbx)
ffffffff802176e3:	00 00 8e 
ffffffff802176e6:	c7 83 7c 0a 00 00 00 	movl   $0x0,0xa7c(%rbx)
ffffffff802176ed:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff802176f0:	c7 83 82 0a 00 00 08 	movl   $0x8e000008,0xa82(%rbx)
ffffffff802176f7:	00 00 8e 
ffffffff802176fa:	c7 83 8c 0a 00 00 00 	movl   $0x0,0xa8c(%rbx)
ffffffff80217701:	00 00 00 
ffffffff80217704:	66 89 93 90 0a 00 00 	mov    %dx,0xa90(%rbx)
ffffffff8021770b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021770f:	89 93 98 0a 00 00    	mov    %edx,0xa98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80217715:	48 c7 c2 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rdx
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8021771c:	66 89 8b 96 0a 00 00 	mov    %cx,0xa96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80217723:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217726:	66 89 93 a0 0a 00 00 	mov    %dx,0xaa0(%rbx)
ffffffff8021772d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217731:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217735:	89 93 a8 0a 00 00    	mov    %edx,0xaa8(%rbx)
ffffffff8021773b:	48 c7 c2 da c0 20 80 	mov    $0xffffffff8020c0da,%rdx
ffffffff80217742:	66 89 8b a6 0a 00 00 	mov    %cx,0xaa6(%rbx)
ffffffff80217749:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021774c:	66 89 93 b0 0a 00 00 	mov    %dx,0xab0(%rbx)
ffffffff80217753:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217757:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021775b:	89 93 b8 0a 00 00    	mov    %edx,0xab8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80217761:	48 c7 c2 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rdx
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80217768:	66 89 8b b6 0a 00 00 	mov    %cx,0xab6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8021776f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217772:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217776:	66 89 93 c0 0a 00 00 	mov    %dx,0xac0(%rbx)
ffffffff8021777d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217781:	89 93 c8 0a 00 00    	mov    %edx,0xac8(%rbx)
ffffffff80217787:	48 c7 c2 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rdx
ffffffff8021778e:	66 89 8b c6 0a 00 00 	mov    %cx,0xac6(%rbx)
ffffffff80217795:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217798:	66 89 93 d0 0a 00 00 	mov    %dx,0xad0(%rbx)
ffffffff8021779f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802177a3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802177a7:	89 93 d8 0a 00 00    	mov    %edx,0xad8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff802177ad:	48 c7 c2 07 c1 20 80 	mov    $0xffffffff8020c107,%rdx
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff802177b4:	66 89 8b d6 0a 00 00 	mov    %cx,0xad6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff802177bb:	48 89 d1             	mov    %rdx,%rcx
ffffffff802177be:	66 89 93 e0 0a 00 00 	mov    %dx,0xae0(%rbx)
ffffffff802177c5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802177c9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802177cd:	89 93 e8 0a 00 00    	mov    %edx,0xae8(%rbx)
ffffffff802177d3:	48 c7 c2 16 c1 20 80 	mov    $0xffffffff8020c116,%rdx
ffffffff802177da:	66 89 8b e6 0a 00 00 	mov    %cx,0xae6(%rbx)
ffffffff802177e1:	48 89 d1             	mov    %rdx,%rcx
ffffffff802177e4:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802177e8:	66 89 93 f0 0a 00 00 	mov    %dx,0xaf0(%rbx)
ffffffff802177ef:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802177f3:	66 89 8b f6 0a 00 00 	mov    %cx,0xaf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff802177fa:	c7 83 92 0a 00 00 08 	movl   $0x8e000008,0xa92(%rbx)
ffffffff80217801:	00 00 8e 
ffffffff80217804:	c7 83 9c 0a 00 00 00 	movl   $0x0,0xa9c(%rbx)
ffffffff8021780b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8021780e:	c7 83 a2 0a 00 00 08 	movl   $0x8e000008,0xaa2(%rbx)
ffffffff80217815:	00 00 8e 
ffffffff80217818:	c7 83 ac 0a 00 00 00 	movl   $0x0,0xaac(%rbx)
ffffffff8021781f:	00 00 00 
ffffffff80217822:	c7 83 b2 0a 00 00 08 	movl   $0x8e000008,0xab2(%rbx)
ffffffff80217829:	00 00 8e 
ffffffff8021782c:	c7 83 bc 0a 00 00 00 	movl   $0x0,0xabc(%rbx)
ffffffff80217833:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80217836:	c7 83 c2 0a 00 00 08 	movl   $0x8e000008,0xac2(%rbx)
ffffffff8021783d:	00 00 8e 
ffffffff80217840:	c7 83 cc 0a 00 00 00 	movl   $0x0,0xacc(%rbx)
ffffffff80217847:	00 00 00 
ffffffff8021784a:	c7 83 d2 0a 00 00 08 	movl   $0x8e000008,0xad2(%rbx)
ffffffff80217851:	00 00 8e 
ffffffff80217854:	c7 83 dc 0a 00 00 00 	movl   $0x0,0xadc(%rbx)
ffffffff8021785b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8021785e:	c7 83 e2 0a 00 00 08 	movl   $0x8e000008,0xae2(%rbx)
ffffffff80217865:	00 00 8e 
ffffffff80217868:	c7 83 ec 0a 00 00 00 	movl   $0x0,0xaec(%rbx)
ffffffff8021786f:	00 00 00 
ffffffff80217872:	c7 83 f2 0a 00 00 08 	movl   $0x8e000008,0xaf2(%rbx)
ffffffff80217879:	00 00 8e 
ffffffff8021787c:	89 93 f8 0a 00 00    	mov    %edx,0xaf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80217882:	48 c7 c2 25 c1 20 80 	mov    $0xffffffff8020c125,%rdx
ffffffff80217889:	66 89 93 00 0b 00 00 	mov    %dx,0xb00(%rbx)
ffffffff80217890:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217893:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217897:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021789b:	89 93 08 0b 00 00    	mov    %edx,0xb08(%rbx)
ffffffff802178a1:	48 c7 c2 34 c1 20 80 	mov    $0xffffffff8020c134,%rdx
ffffffff802178a8:	66 89 8b 06 0b 00 00 	mov    %cx,0xb06(%rbx)
ffffffff802178af:	48 89 d1             	mov    %rdx,%rcx
ffffffff802178b2:	66 89 93 10 0b 00 00 	mov    %dx,0xb10(%rbx)
ffffffff802178b9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802178bd:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802178c1:	89 93 18 0b 00 00    	mov    %edx,0xb18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff802178c7:	48 c7 c2 43 c1 20 80 	mov    $0xffffffff8020c143,%rdx
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff802178ce:	66 89 8b 16 0b 00 00 	mov    %cx,0xb16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff802178d5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802178d8:	66 89 93 20 0b 00 00 	mov    %dx,0xb20(%rbx)
ffffffff802178df:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802178e3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802178e7:	89 93 28 0b 00 00    	mov    %edx,0xb28(%rbx)
ffffffff802178ed:	48 c7 c2 52 c1 20 80 	mov    $0xffffffff8020c152,%rdx
ffffffff802178f4:	66 89 8b 26 0b 00 00 	mov    %cx,0xb26(%rbx)
ffffffff802178fb:	48 89 d1             	mov    %rdx,%rcx
ffffffff802178fe:	66 89 93 30 0b 00 00 	mov    %dx,0xb30(%rbx)
ffffffff80217905:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217909:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021790d:	89 93 38 0b 00 00    	mov    %edx,0xb38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217913:	48 c7 c2 61 c1 20 80 	mov    $0xffffffff8020c161,%rdx
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8021791a:	66 89 8b 36 0b 00 00 	mov    %cx,0xb36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217921:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217924:	66 89 93 40 0b 00 00 	mov    %dx,0xb40(%rbx)
ffffffff8021792b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021792f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217933:	89 93 48 0b 00 00    	mov    %edx,0xb48(%rbx)
ffffffff80217939:	48 c7 c2 70 c1 20 80 	mov    $0xffffffff8020c170,%rdx
ffffffff80217940:	66 89 8b 46 0b 00 00 	mov    %cx,0xb46(%rbx)
ffffffff80217947:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021794a:	66 89 93 50 0b 00 00 	mov    %dx,0xb50(%rbx)
ffffffff80217951:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217955:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217959:	89 93 58 0b 00 00    	mov    %edx,0xb58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff8021795f:	48 c7 c2 7f c1 20 80 	mov    $0xffffffff8020c17f,%rdx
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217966:	66 89 8b 56 0b 00 00 	mov    %cx,0xb56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff8021796d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217970:	66 89 93 60 0b 00 00 	mov    %dx,0xb60(%rbx)
ffffffff80217977:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021797b:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8021797f:	c7 83 fc 0a 00 00 00 	movl   $0x0,0xafc(%rbx)
ffffffff80217986:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80217989:	c7 83 02 0b 00 00 08 	movl   $0x8e000008,0xb02(%rbx)
ffffffff80217990:	00 00 8e 
ffffffff80217993:	c7 83 0c 0b 00 00 00 	movl   $0x0,0xb0c(%rbx)
ffffffff8021799a:	00 00 00 
ffffffff8021799d:	c7 83 12 0b 00 00 08 	movl   $0x8e000008,0xb12(%rbx)
ffffffff802179a4:	00 00 8e 
ffffffff802179a7:	c7 83 1c 0b 00 00 00 	movl   $0x0,0xb1c(%rbx)
ffffffff802179ae:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff802179b1:	c7 83 22 0b 00 00 08 	movl   $0x8e000008,0xb22(%rbx)
ffffffff802179b8:	00 00 8e 
ffffffff802179bb:	c7 83 2c 0b 00 00 00 	movl   $0x0,0xb2c(%rbx)
ffffffff802179c2:	00 00 00 
ffffffff802179c5:	c7 83 32 0b 00 00 08 	movl   $0x8e000008,0xb32(%rbx)
ffffffff802179cc:	00 00 8e 
ffffffff802179cf:	c7 83 3c 0b 00 00 00 	movl   $0x0,0xb3c(%rbx)
ffffffff802179d6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff802179d9:	c7 83 42 0b 00 00 08 	movl   $0x8e000008,0xb42(%rbx)
ffffffff802179e0:	00 00 8e 
ffffffff802179e3:	c7 83 4c 0b 00 00 00 	movl   $0x0,0xb4c(%rbx)
ffffffff802179ea:	00 00 00 
ffffffff802179ed:	c7 83 52 0b 00 00 08 	movl   $0x8e000008,0xb52(%rbx)
ffffffff802179f4:	00 00 8e 
ffffffff802179f7:	c7 83 5c 0b 00 00 00 	movl   $0x0,0xb5c(%rbx)
ffffffff802179fe:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217a01:	c7 83 62 0b 00 00 08 	movl   $0x8e000008,0xb62(%rbx)
ffffffff80217a08:	00 00 8e 
ffffffff80217a0b:	89 93 68 0b 00 00    	mov    %edx,0xb68(%rbx)
ffffffff80217a11:	48 c7 c2 8e c1 20 80 	mov    $0xffffffff8020c18e,%rdx
ffffffff80217a18:	66 89 8b 66 0b 00 00 	mov    %cx,0xb66(%rbx)
ffffffff80217a1f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a22:	66 89 93 70 0b 00 00 	mov    %dx,0xb70(%rbx)
ffffffff80217a29:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a2d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217a31:	89 93 78 0b 00 00    	mov    %edx,0xb78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217a37:	48 c7 c2 9d c1 20 80 	mov    $0xffffffff8020c19d,%rdx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217a3e:	66 89 8b 76 0b 00 00 	mov    %cx,0xb76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217a45:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a48:	66 89 93 80 0b 00 00 	mov    %dx,0xb80(%rbx)
ffffffff80217a4f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a53:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217a57:	89 93 88 0b 00 00    	mov    %edx,0xb88(%rbx)
ffffffff80217a5d:	48 c7 c2 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rdx
ffffffff80217a64:	66 89 8b 86 0b 00 00 	mov    %cx,0xb86(%rbx)
ffffffff80217a6b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a6e:	66 89 93 90 0b 00 00 	mov    %dx,0xb90(%rbx)
ffffffff80217a75:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a79:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217a7d:	89 93 98 0b 00 00    	mov    %edx,0xb98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217a83:	48 c7 c2 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rdx
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217a8a:	66 89 8b 96 0b 00 00 	mov    %cx,0xb96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217a91:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a94:	66 89 93 a0 0b 00 00 	mov    %dx,0xba0(%rbx)
ffffffff80217a9b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a9f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217aa3:	89 93 a8 0b 00 00    	mov    %edx,0xba8(%rbx)
ffffffff80217aa9:	48 c7 c2 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rdx
ffffffff80217ab0:	66 89 8b a6 0b 00 00 	mov    %cx,0xba6(%rbx)
ffffffff80217ab7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217aba:	66 89 93 b0 0b 00 00 	mov    %dx,0xbb0(%rbx)
ffffffff80217ac1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217ac5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ac9:	89 93 b8 0b 00 00    	mov    %edx,0xbb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217acf:	48 c7 c2 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rdx
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217ad6:	66 89 8b b6 0b 00 00 	mov    %cx,0xbb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217add:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217ae0:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ae4:	66 89 93 c0 0b 00 00 	mov    %dx,0xbc0(%rbx)
ffffffff80217aeb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217aef:	89 93 c8 0b 00 00    	mov    %edx,0xbc8(%rbx)
ffffffff80217af5:	48 c7 c2 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rdx
ffffffff80217afc:	66 89 8b c6 0b 00 00 	mov    %cx,0xbc6(%rbx)
ffffffff80217b03:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217b06:	c7 83 6c 0b 00 00 00 	movl   $0x0,0xb6c(%rbx)
ffffffff80217b0d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217b10:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217b14:	c7 83 72 0b 00 00 08 	movl   $0x8e000008,0xb72(%rbx)
ffffffff80217b1b:	00 00 8e 
ffffffff80217b1e:	c7 83 7c 0b 00 00 00 	movl   $0x0,0xb7c(%rbx)
ffffffff80217b25:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217b28:	c7 83 82 0b 00 00 08 	movl   $0x8e000008,0xb82(%rbx)
ffffffff80217b2f:	00 00 8e 
ffffffff80217b32:	c7 83 8c 0b 00 00 00 	movl   $0x0,0xb8c(%rbx)
ffffffff80217b39:	00 00 00 
ffffffff80217b3c:	c7 83 92 0b 00 00 08 	movl   $0x8e000008,0xb92(%rbx)
ffffffff80217b43:	00 00 8e 
ffffffff80217b46:	c7 83 9c 0b 00 00 00 	movl   $0x0,0xb9c(%rbx)
ffffffff80217b4d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217b50:	c7 83 a2 0b 00 00 08 	movl   $0x8e000008,0xba2(%rbx)
ffffffff80217b57:	00 00 8e 
ffffffff80217b5a:	c7 83 ac 0b 00 00 00 	movl   $0x0,0xbac(%rbx)
ffffffff80217b61:	00 00 00 
ffffffff80217b64:	c7 83 b2 0b 00 00 08 	movl   $0x8e000008,0xbb2(%rbx)
ffffffff80217b6b:	00 00 8e 
ffffffff80217b6e:	c7 83 bc 0b 00 00 00 	movl   $0x0,0xbbc(%rbx)
ffffffff80217b75:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217b78:	c7 83 c2 0b 00 00 08 	movl   $0x8e000008,0xbc2(%rbx)
ffffffff80217b7f:	00 00 8e 
ffffffff80217b82:	c7 83 cc 0b 00 00 00 	movl   $0x0,0xbcc(%rbx)
ffffffff80217b89:	00 00 00 
ffffffff80217b8c:	66 89 93 d0 0b 00 00 	mov    %dx,0xbd0(%rbx)
ffffffff80217b93:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b97:	89 93 d8 0b 00 00    	mov    %edx,0xbd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217b9d:	48 c7 c2 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rdx
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217ba4:	66 89 8b d6 0b 00 00 	mov    %cx,0xbd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217bab:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217bae:	66 89 93 e0 0b 00 00 	mov    %dx,0xbe0(%rbx)
ffffffff80217bb5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217bb9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217bbd:	89 93 e8 0b 00 00    	mov    %edx,0xbe8(%rbx)
ffffffff80217bc3:	48 c7 c2 06 c2 20 80 	mov    $0xffffffff8020c206,%rdx
ffffffff80217bca:	66 89 8b e6 0b 00 00 	mov    %cx,0xbe6(%rbx)
ffffffff80217bd1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217bd4:	66 89 93 f0 0b 00 00 	mov    %dx,0xbf0(%rbx)
ffffffff80217bdb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217bdf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217be3:	89 93 f8 0b 00 00    	mov    %edx,0xbf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217be9:	48 c7 c2 15 c2 20 80 	mov    $0xffffffff8020c215,%rdx
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217bf0:	66 89 8b f6 0b 00 00 	mov    %cx,0xbf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217bf7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217bfa:	66 89 93 00 0c 00 00 	mov    %dx,0xc00(%rbx)
ffffffff80217c01:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217c05:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217c09:	89 93 08 0c 00 00    	mov    %edx,0xc08(%rbx)
ffffffff80217c0f:	48 c7 c2 24 c2 20 80 	mov    $0xffffffff8020c224,%rdx
ffffffff80217c16:	66 89 8b 06 0c 00 00 	mov    %cx,0xc06(%rbx)
ffffffff80217c1d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217c20:	66 89 93 10 0c 00 00 	mov    %dx,0xc10(%rbx)
ffffffff80217c27:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217c2b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217c2f:	89 93 18 0c 00 00    	mov    %edx,0xc18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217c35:	48 c7 c2 33 c2 20 80 	mov    $0xffffffff8020c233,%rdx
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217c3c:	66 89 8b 16 0c 00 00 	mov    %cx,0xc16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217c43:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217c46:	66 89 93 20 0c 00 00 	mov    %dx,0xc20(%rbx)
ffffffff80217c4d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217c51:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217c55:	89 93 28 0c 00 00    	mov    %edx,0xc28(%rbx)
ffffffff80217c5b:	48 c7 c2 42 c2 20 80 	mov    $0xffffffff8020c242,%rdx
ffffffff80217c62:	66 89 8b 26 0c 00 00 	mov    %cx,0xc26(%rbx)
ffffffff80217c69:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217c6c:	66 89 93 30 0c 00 00 	mov    %dx,0xc30(%rbx)
ffffffff80217c73:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217c77:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217c7b:	66 89 83 14 0c 00 00 	mov    %ax,0xc14(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217c82:	c7 83 d2 0b 00 00 08 	movl   $0x8e000008,0xbd2(%rbx)
ffffffff80217c89:	00 00 8e 
ffffffff80217c8c:	c7 83 dc 0b 00 00 00 	movl   $0x0,0xbdc(%rbx)
ffffffff80217c93:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217c96:	c7 83 e2 0b 00 00 08 	movl   $0x8e000008,0xbe2(%rbx)
ffffffff80217c9d:	00 00 8e 
ffffffff80217ca0:	c7 83 ec 0b 00 00 00 	movl   $0x0,0xbec(%rbx)
ffffffff80217ca7:	00 00 00 
ffffffff80217caa:	c7 83 f2 0b 00 00 08 	movl   $0x8e000008,0xbf2(%rbx)
ffffffff80217cb1:	00 00 8e 
ffffffff80217cb4:	c7 83 fc 0b 00 00 00 	movl   $0x0,0xbfc(%rbx)
ffffffff80217cbb:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217cbe:	c7 83 02 0c 00 00 08 	movl   $0x8e000008,0xc02(%rbx)
ffffffff80217cc5:	00 00 8e 
ffffffff80217cc8:	c7 83 0c 0c 00 00 00 	movl   $0x0,0xc0c(%rbx)
ffffffff80217ccf:	00 00 00 
ffffffff80217cd2:	66 44 89 93 12 0c 00 	mov    %r10w,0xc12(%rbx)
ffffffff80217cd9:	00 
ffffffff80217cda:	c7 83 1c 0c 00 00 00 	movl   $0x0,0xc1c(%rbx)
ffffffff80217ce1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217ce4:	c7 83 22 0c 00 00 08 	movl   $0x8e000008,0xc22(%rbx)
ffffffff80217ceb:	00 00 8e 
ffffffff80217cee:	c7 83 2c 0c 00 00 00 	movl   $0x0,0xc2c(%rbx)
ffffffff80217cf5:	00 00 00 
ffffffff80217cf8:	c7 83 32 0c 00 00 08 	movl   $0x8e000008,0xc32(%rbx)
ffffffff80217cff:	00 00 8e 
ffffffff80217d02:	89 93 38 0c 00 00    	mov    %edx,0xc38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217d08:	48 c7 c2 51 c2 20 80 	mov    $0xffffffff8020c251,%rdx
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217d0f:	66 89 8b 36 0c 00 00 	mov    %cx,0xc36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217d16:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d19:	66 89 93 40 0c 00 00 	mov    %dx,0xc40(%rbx)
ffffffff80217d20:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d24:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d28:	89 93 48 0c 00 00    	mov    %edx,0xc48(%rbx)
ffffffff80217d2e:	48 c7 c2 60 c2 20 80 	mov    $0xffffffff8020c260,%rdx
ffffffff80217d35:	66 89 8b 46 0c 00 00 	mov    %cx,0xc46(%rbx)
ffffffff80217d3c:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d3f:	66 89 93 50 0c 00 00 	mov    %dx,0xc50(%rbx)
ffffffff80217d46:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d4a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d4e:	89 93 58 0c 00 00    	mov    %edx,0xc58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80217d54:	48 c7 c2 6f c2 20 80 	mov    $0xffffffff8020c26f,%rdx
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217d5b:	66 89 8b 56 0c 00 00 	mov    %cx,0xc56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80217d62:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d65:	66 89 93 60 0c 00 00 	mov    %dx,0xc60(%rbx)
ffffffff80217d6c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d70:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d74:	89 93 68 0c 00 00    	mov    %edx,0xc68(%rbx)
ffffffff80217d7a:	48 c7 c2 7e c2 20 80 	mov    $0xffffffff8020c27e,%rdx
ffffffff80217d81:	66 89 8b 66 0c 00 00 	mov    %cx,0xc66(%rbx)
ffffffff80217d88:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d8b:	66 89 93 70 0c 00 00 	mov    %dx,0xc70(%rbx)
ffffffff80217d92:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d96:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d9a:	89 93 78 0c 00 00    	mov    %edx,0xc78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80217da0:	48 c7 c2 8d c2 20 80 	mov    $0xffffffff8020c28d,%rdx
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80217da7:	66 89 8b 76 0c 00 00 	mov    %cx,0xc76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80217dae:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217db1:	66 89 93 80 0c 00 00 	mov    %dx,0xc80(%rbx)
ffffffff80217db8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217dbc:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217dc0:	89 93 88 0c 00 00    	mov    %edx,0xc88(%rbx)
ffffffff80217dc6:	48 c7 c2 9c c2 20 80 	mov    $0xffffffff8020c29c,%rdx
ffffffff80217dcd:	66 89 8b 86 0c 00 00 	mov    %cx,0xc86(%rbx)
ffffffff80217dd4:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217dd7:	66 89 93 90 0c 00 00 	mov    %dx,0xc90(%rbx)
ffffffff80217dde:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217de2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217de6:	89 93 98 0c 00 00    	mov    %edx,0xc98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217dec:	48 c7 c2 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rdx
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80217df3:	66 89 8b 96 0c 00 00 	mov    %cx,0xc96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217dfa:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217dfd:	c7 83 3c 0c 00 00 00 	movl   $0x0,0xc3c(%rbx)
ffffffff80217e04:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217e07:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217e0b:	c7 83 42 0c 00 00 08 	movl   $0x8e000008,0xc42(%rbx)
ffffffff80217e12:	00 00 8e 
ffffffff80217e15:	c7 83 4c 0c 00 00 00 	movl   $0x0,0xc4c(%rbx)
ffffffff80217e1c:	00 00 00 
ffffffff80217e1f:	c7 83 52 0c 00 00 08 	movl   $0x8e000008,0xc52(%rbx)
ffffffff80217e26:	00 00 8e 
ffffffff80217e29:	c7 83 5c 0c 00 00 00 	movl   $0x0,0xc5c(%rbx)
ffffffff80217e30:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80217e33:	c7 83 62 0c 00 00 08 	movl   $0x8e000008,0xc62(%rbx)
ffffffff80217e3a:	00 00 8e 
ffffffff80217e3d:	c7 83 6c 0c 00 00 00 	movl   $0x0,0xc6c(%rbx)
ffffffff80217e44:	00 00 00 
ffffffff80217e47:	c7 83 72 0c 00 00 08 	movl   $0x8e000008,0xc72(%rbx)
ffffffff80217e4e:	00 00 8e 
ffffffff80217e51:	c7 83 7c 0c 00 00 00 	movl   $0x0,0xc7c(%rbx)
ffffffff80217e58:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80217e5b:	c7 83 82 0c 00 00 08 	movl   $0x8e000008,0xc82(%rbx)
ffffffff80217e62:	00 00 8e 
ffffffff80217e65:	c7 83 8c 0c 00 00 00 	movl   $0x0,0xc8c(%rbx)
ffffffff80217e6c:	00 00 00 
ffffffff80217e6f:	c7 83 92 0c 00 00 08 	movl   $0x8e000008,0xc92(%rbx)
ffffffff80217e76:	00 00 8e 
ffffffff80217e79:	c7 83 9c 0c 00 00 00 	movl   $0x0,0xc9c(%rbx)
ffffffff80217e80:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217e83:	66 89 93 a0 0c 00 00 	mov    %dx,0xca0(%rbx)
ffffffff80217e8a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e8e:	89 93 a8 0c 00 00    	mov    %edx,0xca8(%rbx)
ffffffff80217e94:	48 c7 c2 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rdx
ffffffff80217e9b:	66 89 8b a6 0c 00 00 	mov    %cx,0xca6(%rbx)
ffffffff80217ea2:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217ea5:	66 89 93 b0 0c 00 00 	mov    %dx,0xcb0(%rbx)
ffffffff80217eac:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217eb0:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217eb4:	89 93 b8 0c 00 00    	mov    %edx,0xcb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80217eba:	48 c7 c2 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rdx
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217ec1:	66 89 8b b6 0c 00 00 	mov    %cx,0xcb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80217ec8:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217ecb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ecf:	66 89 93 c0 0c 00 00 	mov    %dx,0xcc0(%rbx)
ffffffff80217ed6:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217eda:	89 93 c8 0c 00 00    	mov    %edx,0xcc8(%rbx)
ffffffff80217ee0:	48 c7 c2 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rdx
ffffffff80217ee7:	66 89 8b c6 0c 00 00 	mov    %cx,0xcc6(%rbx)
ffffffff80217eee:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217ef1:	66 89 93 d0 0c 00 00 	mov    %dx,0xcd0(%rbx)
ffffffff80217ef8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217efc:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217f00:	89 93 d8 0c 00 00    	mov    %edx,0xcd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80217f06:	48 c7 c2 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rdx
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80217f0d:	66 89 8b d6 0c 00 00 	mov    %cx,0xcd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80217f14:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217f17:	66 89 93 e0 0c 00 00 	mov    %dx,0xce0(%rbx)
ffffffff80217f1e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217f22:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217f26:	89 93 e8 0c 00 00    	mov    %edx,0xce8(%rbx)
ffffffff80217f2c:	48 c7 c2 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rdx
ffffffff80217f33:	66 89 8b e6 0c 00 00 	mov    %cx,0xce6(%rbx)
ffffffff80217f3a:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217f3d:	66 89 93 f0 0c 00 00 	mov    %dx,0xcf0(%rbx)
ffffffff80217f44:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217f48:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217f4c:	89 93 f8 0c 00 00    	mov    %edx,0xcf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80217f52:	48 c7 c2 05 c3 20 80 	mov    $0xffffffff8020c305,%rdx
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80217f59:	66 89 8b f6 0c 00 00 	mov    %cx,0xcf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80217f60:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217f63:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217f67:	66 89 93 00 0d 00 00 	mov    %dx,0xd00(%rbx)
ffffffff80217f6e:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217f72:	c7 83 a2 0c 00 00 08 	movl   $0x8e000008,0xca2(%rbx)
ffffffff80217f79:	00 00 8e 
ffffffff80217f7c:	c7 83 ac 0c 00 00 00 	movl   $0x0,0xcac(%rbx)
ffffffff80217f83:	00 00 00 
ffffffff80217f86:	c7 83 b2 0c 00 00 08 	movl   $0x8e000008,0xcb2(%rbx)
ffffffff80217f8d:	00 00 8e 
ffffffff80217f90:	c7 83 bc 0c 00 00 00 	movl   $0x0,0xcbc(%rbx)
ffffffff80217f97:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80217f9a:	c7 83 c2 0c 00 00 08 	movl   $0x8e000008,0xcc2(%rbx)
ffffffff80217fa1:	00 00 8e 
ffffffff80217fa4:	c7 83 cc 0c 00 00 00 	movl   $0x0,0xccc(%rbx)
ffffffff80217fab:	00 00 00 
ffffffff80217fae:	c7 83 d2 0c 00 00 08 	movl   $0x8e000008,0xcd2(%rbx)
ffffffff80217fb5:	00 00 8e 
ffffffff80217fb8:	c7 83 dc 0c 00 00 00 	movl   $0x0,0xcdc(%rbx)
ffffffff80217fbf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80217fc2:	c7 83 e2 0c 00 00 08 	movl   $0x8e000008,0xce2(%rbx)
ffffffff80217fc9:	00 00 8e 
ffffffff80217fcc:	c7 83 ec 0c 00 00 00 	movl   $0x0,0xcec(%rbx)
ffffffff80217fd3:	00 00 00 
ffffffff80217fd6:	c7 83 f2 0c 00 00 08 	movl   $0x8e000008,0xcf2(%rbx)
ffffffff80217fdd:	00 00 8e 
ffffffff80217fe0:	c7 83 fc 0c 00 00 00 	movl   $0x0,0xcfc(%rbx)
ffffffff80217fe7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80217fea:	c7 83 02 0d 00 00 08 	movl   $0x8e000008,0xd02(%rbx)
ffffffff80217ff1:	00 00 8e 
ffffffff80217ff4:	66 89 8b 06 0d 00 00 	mov    %cx,0xd06(%rbx)
ffffffff80217ffb:	89 93 08 0d 00 00    	mov    %edx,0xd08(%rbx)
ffffffff80218001:	48 c7 c2 14 c3 20 80 	mov    $0xffffffff8020c314,%rdx
ffffffff80218008:	66 89 93 10 0d 00 00 	mov    %dx,0xd10(%rbx)
ffffffff8021800f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218012:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218016:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021801a:	89 93 18 0d 00 00    	mov    %edx,0xd18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80218020:	48 c7 c2 23 c3 20 80 	mov    $0xffffffff8020c323,%rdx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80218027:	66 89 8b 16 0d 00 00 	mov    %cx,0xd16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff8021802e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218031:	66 89 93 20 0d 00 00 	mov    %dx,0xd20(%rbx)
ffffffff80218038:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021803c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218040:	89 93 28 0d 00 00    	mov    %edx,0xd28(%rbx)
ffffffff80218046:	48 c7 c2 32 c3 20 80 	mov    $0xffffffff8020c332,%rdx
ffffffff8021804d:	66 89 8b 26 0d 00 00 	mov    %cx,0xd26(%rbx)
ffffffff80218054:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218057:	66 89 93 30 0d 00 00 	mov    %dx,0xd30(%rbx)
ffffffff8021805e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218062:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218066:	89 93 38 0d 00 00    	mov    %edx,0xd38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff8021806c:	48 c7 c2 41 c3 20 80 	mov    $0xffffffff8020c341,%rdx
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80218073:	66 89 8b 36 0d 00 00 	mov    %cx,0xd36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff8021807a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021807d:	66 89 93 40 0d 00 00 	mov    %dx,0xd40(%rbx)
ffffffff80218084:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218088:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021808c:	89 93 48 0d 00 00    	mov    %edx,0xd48(%rbx)
ffffffff80218092:	48 c7 c2 50 c3 20 80 	mov    $0xffffffff8020c350,%rdx
ffffffff80218099:	66 89 8b 46 0d 00 00 	mov    %cx,0xd46(%rbx)
ffffffff802180a0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802180a3:	66 89 93 50 0d 00 00 	mov    %dx,0xd50(%rbx)
ffffffff802180aa:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802180ae:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802180b2:	89 93 58 0d 00 00    	mov    %edx,0xd58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802180b8:	48 c7 c2 5f c3 20 80 	mov    $0xffffffff8020c35f,%rdx
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff802180bf:	66 89 8b 56 0d 00 00 	mov    %cx,0xd56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802180c6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802180c9:	66 89 93 60 0d 00 00 	mov    %dx,0xd60(%rbx)
ffffffff802180d0:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802180d4:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802180d8:	89 93 68 0d 00 00    	mov    %edx,0xd68(%rbx)
ffffffff802180de:	48 c7 c2 6e c3 20 80 	mov    $0xffffffff8020c36e,%rdx
ffffffff802180e5:	66 89 8b 66 0d 00 00 	mov    %cx,0xd66(%rbx)
ffffffff802180ec:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802180ef:	c7 83 0c 0d 00 00 00 	movl   $0x0,0xd0c(%rbx)
ffffffff802180f6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802180f9:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802180fd:	c7 83 12 0d 00 00 08 	movl   $0x8e000008,0xd12(%rbx)
ffffffff80218104:	00 00 8e 
ffffffff80218107:	c7 83 1c 0d 00 00 00 	movl   $0x0,0xd1c(%rbx)
ffffffff8021810e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80218111:	c7 83 22 0d 00 00 08 	movl   $0x8e000008,0xd22(%rbx)
ffffffff80218118:	00 00 8e 
ffffffff8021811b:	c7 83 2c 0d 00 00 00 	movl   $0x0,0xd2c(%rbx)
ffffffff80218122:	00 00 00 
ffffffff80218125:	c7 83 32 0d 00 00 08 	movl   $0x8e000008,0xd32(%rbx)
ffffffff8021812c:	00 00 8e 
ffffffff8021812f:	c7 83 3c 0d 00 00 00 	movl   $0x0,0xd3c(%rbx)
ffffffff80218136:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80218139:	c7 83 42 0d 00 00 08 	movl   $0x8e000008,0xd42(%rbx)
ffffffff80218140:	00 00 8e 
ffffffff80218143:	c7 83 4c 0d 00 00 00 	movl   $0x0,0xd4c(%rbx)
ffffffff8021814a:	00 00 00 
ffffffff8021814d:	c7 83 52 0d 00 00 08 	movl   $0x8e000008,0xd52(%rbx)
ffffffff80218154:	00 00 8e 
ffffffff80218157:	c7 83 5c 0d 00 00 00 	movl   $0x0,0xd5c(%rbx)
ffffffff8021815e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80218161:	c7 83 62 0d 00 00 08 	movl   $0x8e000008,0xd62(%rbx)
ffffffff80218168:	00 00 8e 
ffffffff8021816b:	c7 83 6c 0d 00 00 00 	movl   $0x0,0xd6c(%rbx)
ffffffff80218172:	00 00 00 
ffffffff80218175:	66 89 93 70 0d 00 00 	mov    %dx,0xd70(%rbx)
ffffffff8021817c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218180:	89 93 78 0d 00 00    	mov    %edx,0xd78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80218186:	48 c7 c2 7d c3 20 80 	mov    $0xffffffff8020c37d,%rdx
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff8021818d:	66 89 8b 76 0d 00 00 	mov    %cx,0xd76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80218194:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218197:	66 89 93 80 0d 00 00 	mov    %dx,0xd80(%rbx)
ffffffff8021819e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802181a2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802181a6:	89 93 88 0d 00 00    	mov    %edx,0xd88(%rbx)
ffffffff802181ac:	48 c7 c2 8c c3 20 80 	mov    $0xffffffff8020c38c,%rdx
ffffffff802181b3:	66 89 8b 86 0d 00 00 	mov    %cx,0xd86(%rbx)
ffffffff802181ba:	48 89 d1             	mov    %rdx,%rcx
ffffffff802181bd:	66 89 93 90 0d 00 00 	mov    %dx,0xd90(%rbx)
ffffffff802181c4:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802181c8:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802181cc:	89 93 98 0d 00 00    	mov    %edx,0xd98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802181d2:	48 c7 c2 9b c3 20 80 	mov    $0xffffffff8020c39b,%rdx
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff802181d9:	66 89 8b 96 0d 00 00 	mov    %cx,0xd96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802181e0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802181e3:	66 89 93 a0 0d 00 00 	mov    %dx,0xda0(%rbx)
ffffffff802181ea:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802181ee:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802181f2:	89 93 a8 0d 00 00    	mov    %edx,0xda8(%rbx)
ffffffff802181f8:	48 c7 c2 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rdx
ffffffff802181ff:	66 89 8b a6 0d 00 00 	mov    %cx,0xda6(%rbx)
ffffffff80218206:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218209:	66 89 93 b0 0d 00 00 	mov    %dx,0xdb0(%rbx)
ffffffff80218210:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218214:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218218:	89 93 b8 0d 00 00    	mov    %edx,0xdb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff8021821e:	48 c7 c2 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rdx
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218225:	66 89 8b b6 0d 00 00 	mov    %cx,0xdb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff8021822c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021822f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218233:	66 89 93 c0 0d 00 00 	mov    %dx,0xdc0(%rbx)
ffffffff8021823a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021823e:	89 93 c8 0d 00 00    	mov    %edx,0xdc8(%rbx)
ffffffff80218244:	48 c7 c2 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rdx
ffffffff8021824b:	66 89 8b c6 0d 00 00 	mov    %cx,0xdc6(%rbx)
ffffffff80218252:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218255:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218259:	66 89 93 d0 0d 00 00 	mov    %dx,0xdd0(%rbx)
ffffffff80218260:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218264:	66 89 8b d6 0d 00 00 	mov    %cx,0xdd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff8021826b:	c7 83 72 0d 00 00 08 	movl   $0x8e000008,0xd72(%rbx)
ffffffff80218272:	00 00 8e 
ffffffff80218275:	c7 83 7c 0d 00 00 00 	movl   $0x0,0xd7c(%rbx)
ffffffff8021827c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff8021827f:	c7 83 82 0d 00 00 08 	movl   $0x8e000008,0xd82(%rbx)
ffffffff80218286:	00 00 8e 
ffffffff80218289:	c7 83 8c 0d 00 00 00 	movl   $0x0,0xd8c(%rbx)
ffffffff80218290:	00 00 00 
ffffffff80218293:	c7 83 92 0d 00 00 08 	movl   $0x8e000008,0xd92(%rbx)
ffffffff8021829a:	00 00 8e 
ffffffff8021829d:	c7 83 9c 0d 00 00 00 	movl   $0x0,0xd9c(%rbx)
ffffffff802182a4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802182a7:	c7 83 a2 0d 00 00 08 	movl   $0x8e000008,0xda2(%rbx)
ffffffff802182ae:	00 00 8e 
ffffffff802182b1:	c7 83 ac 0d 00 00 00 	movl   $0x0,0xdac(%rbx)
ffffffff802182b8:	00 00 00 
ffffffff802182bb:	c7 83 b2 0d 00 00 08 	movl   $0x8e000008,0xdb2(%rbx)
ffffffff802182c2:	00 00 8e 
ffffffff802182c5:	c7 83 bc 0d 00 00 00 	movl   $0x0,0xdbc(%rbx)
ffffffff802182cc:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff802182cf:	c7 83 c2 0d 00 00 08 	movl   $0x8e000008,0xdc2(%rbx)
ffffffff802182d6:	00 00 8e 
ffffffff802182d9:	c7 83 cc 0d 00 00 00 	movl   $0x0,0xdcc(%rbx)
ffffffff802182e0:	00 00 00 
ffffffff802182e3:	c7 83 d2 0d 00 00 08 	movl   $0x8e000008,0xdd2(%rbx)
ffffffff802182ea:	00 00 8e 
ffffffff802182ed:	89 93 d8 0d 00 00    	mov    %edx,0xdd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff802182f3:	48 c7 c2 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rdx
ffffffff802182fa:	66 89 93 e0 0d 00 00 	mov    %dx,0xde0(%rbx)
ffffffff80218301:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218304:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218308:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021830c:	89 93 e8 0d 00 00    	mov    %edx,0xde8(%rbx)
ffffffff80218312:	48 c7 c2 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rdx
ffffffff80218319:	66 89 8b e6 0d 00 00 	mov    %cx,0xde6(%rbx)
ffffffff80218320:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218323:	66 89 93 f0 0d 00 00 	mov    %dx,0xdf0(%rbx)
ffffffff8021832a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021832e:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218332:	89 93 f8 0d 00 00    	mov    %edx,0xdf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218338:	48 c7 c2 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rdx
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff8021833f:	66 89 8b f6 0d 00 00 	mov    %cx,0xdf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218346:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218349:	66 89 93 00 0e 00 00 	mov    %dx,0xe00(%rbx)
ffffffff80218350:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218354:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218358:	89 93 08 0e 00 00    	mov    %edx,0xe08(%rbx)
ffffffff8021835e:	48 c7 c2 04 c4 20 80 	mov    $0xffffffff8020c404,%rdx
ffffffff80218365:	66 89 83 14 0e 00 00 	mov    %ax,0xe14(%rbx)
ffffffff8021836c:	48 89 d0             	mov    %rdx,%rax
ffffffff8021836f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218373:	66 89 93 10 0e 00 00 	mov    %dx,0xe10(%rbx)
ffffffff8021837a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021837e:	66 89 83 16 0e 00 00 	mov    %ax,0xe16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218385:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff8021838c:	89 93 18 0e 00 00    	mov    %edx,0xe18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218392:	48 89 c2             	mov    %rax,%rdx
ffffffff80218395:	66 89 83 20 0e 00 00 	mov    %ax,0xe20(%rbx)
ffffffff8021839c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802183a0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802183a4:	89 83 28 0e 00 00    	mov    %eax,0xe28(%rbx)
ffffffff802183aa:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff802183b1:	66 89 93 26 0e 00 00 	mov    %dx,0xe26(%rbx)
ffffffff802183b8:	48 89 c2             	mov    %rax,%rdx
ffffffff802183bb:	66 89 83 30 0e 00 00 	mov    %ax,0xe30(%rbx)
ffffffff802183c2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802183c6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802183ca:	89 83 38 0e 00 00    	mov    %eax,0xe38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802183d0:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff802183d7:	66 89 93 36 0e 00 00 	mov    %dx,0xe36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802183de:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff802183e1:	c7 83 dc 0d 00 00 00 	movl   $0x0,0xddc(%rbx)
ffffffff802183e8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802183eb:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff802183ef:	c7 83 e2 0d 00 00 08 	movl   $0x8e000008,0xde2(%rbx)
ffffffff802183f6:	00 00 8e 
ffffffff802183f9:	c7 83 ec 0d 00 00 00 	movl   $0x0,0xdec(%rbx)
ffffffff80218400:	00 00 00 
ffffffff80218403:	c7 83 f2 0d 00 00 08 	movl   $0x8e000008,0xdf2(%rbx)
ffffffff8021840a:	00 00 8e 
ffffffff8021840d:	c7 83 fc 0d 00 00 00 	movl   $0x0,0xdfc(%rbx)
ffffffff80218414:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218417:	c7 83 02 0e 00 00 08 	movl   $0x8e000008,0xe02(%rbx)
ffffffff8021841e:	00 00 8e 
ffffffff80218421:	66 89 8b 06 0e 00 00 	mov    %cx,0xe06(%rbx)
ffffffff80218428:	c7 83 0c 0e 00 00 00 	movl   $0x0,0xe0c(%rbx)
ffffffff8021842f:	00 00 00 
ffffffff80218432:	66 44 89 9b 12 0e 00 	mov    %r11w,0xe12(%rbx)
ffffffff80218439:	00 
ffffffff8021843a:	c7 83 1c 0e 00 00 00 	movl   $0x0,0xe1c(%rbx)
ffffffff80218441:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218444:	c7 83 22 0e 00 00 08 	movl   $0x8e000008,0xe22(%rbx)
ffffffff8021844b:	00 00 8e 
ffffffff8021844e:	c7 83 2c 0e 00 00 00 	movl   $0x0,0xe2c(%rbx)
ffffffff80218455:	00 00 00 
ffffffff80218458:	c7 83 32 0e 00 00 08 	movl   $0x8e000008,0xe32(%rbx)
ffffffff8021845f:	00 00 8e 
ffffffff80218462:	c7 83 3c 0e 00 00 00 	movl   $0x0,0xe3c(%rbx)
ffffffff80218469:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff8021846c:	66 89 83 40 0e 00 00 	mov    %ax,0xe40(%rbx)
ffffffff80218473:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218477:	89 83 48 0e 00 00    	mov    %eax,0xe48(%rbx)
ffffffff8021847d:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff80218484:	66 89 93 46 0e 00 00 	mov    %dx,0xe46(%rbx)
ffffffff8021848b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021848e:	66 89 83 50 0e 00 00 	mov    %ax,0xe50(%rbx)
ffffffff80218495:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218499:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021849d:	89 83 58 0e 00 00    	mov    %eax,0xe58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802184a3:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802184aa:	66 89 93 56 0e 00 00 	mov    %dx,0xe56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802184b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802184b4:	66 89 83 60 0e 00 00 	mov    %ax,0xe60(%rbx)
ffffffff802184bb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802184bf:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802184c3:	89 83 68 0e 00 00    	mov    %eax,0xe68(%rbx)
ffffffff802184c9:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff802184d0:	66 89 93 66 0e 00 00 	mov    %dx,0xe66(%rbx)
ffffffff802184d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802184da:	66 89 83 70 0e 00 00 	mov    %ax,0xe70(%rbx)
ffffffff802184e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802184e5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802184e9:	89 83 78 0e 00 00    	mov    %eax,0xe78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff802184ef:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802184f6:	66 89 93 76 0e 00 00 	mov    %dx,0xe76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff802184fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80218500:	66 89 83 80 0e 00 00 	mov    %ax,0xe80(%rbx)
ffffffff80218507:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021850b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021850f:	89 83 88 0e 00 00    	mov    %eax,0xe88(%rbx)
ffffffff80218515:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff8021851c:	66 89 93 86 0e 00 00 	mov    %dx,0xe86(%rbx)
ffffffff80218523:	48 89 c2             	mov    %rax,%rdx
ffffffff80218526:	66 89 83 90 0e 00 00 	mov    %ax,0xe90(%rbx)
ffffffff8021852d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218531:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218535:	89 83 98 0e 00 00    	mov    %eax,0xe98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff8021853b:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80218542:	66 89 93 96 0e 00 00 	mov    %dx,0xe96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218549:	48 89 c2             	mov    %rax,%rdx
ffffffff8021854c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218550:	66 89 83 a0 0e 00 00 	mov    %ax,0xea0(%rbx)
ffffffff80218557:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021855b:	66 89 93 a6 0e 00 00 	mov    %dx,0xea6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80218562:	c7 83 42 0e 00 00 08 	movl   $0x8e000008,0xe42(%rbx)
ffffffff80218569:	00 00 8e 
ffffffff8021856c:	c7 83 4c 0e 00 00 00 	movl   $0x0,0xe4c(%rbx)
ffffffff80218573:	00 00 00 
ffffffff80218576:	c7 83 52 0e 00 00 08 	movl   $0x8e000008,0xe52(%rbx)
ffffffff8021857d:	00 00 8e 
ffffffff80218580:	c7 83 5c 0e 00 00 00 	movl   $0x0,0xe5c(%rbx)
ffffffff80218587:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff8021858a:	c7 83 62 0e 00 00 08 	movl   $0x8e000008,0xe62(%rbx)
ffffffff80218591:	00 00 8e 
ffffffff80218594:	c7 83 6c 0e 00 00 00 	movl   $0x0,0xe6c(%rbx)
ffffffff8021859b:	00 00 00 
ffffffff8021859e:	c7 83 72 0e 00 00 08 	movl   $0x8e000008,0xe72(%rbx)
ffffffff802185a5:	00 00 8e 
ffffffff802185a8:	c7 83 7c 0e 00 00 00 	movl   $0x0,0xe7c(%rbx)
ffffffff802185af:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff802185b2:	c7 83 82 0e 00 00 08 	movl   $0x8e000008,0xe82(%rbx)
ffffffff802185b9:	00 00 8e 
ffffffff802185bc:	c7 83 8c 0e 00 00 00 	movl   $0x0,0xe8c(%rbx)
ffffffff802185c3:	00 00 00 
ffffffff802185c6:	c7 83 92 0e 00 00 08 	movl   $0x8e000008,0xe92(%rbx)
ffffffff802185cd:	00 00 8e 
ffffffff802185d0:	c7 83 9c 0e 00 00 00 	movl   $0x0,0xe9c(%rbx)
ffffffff802185d7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff802185da:	c7 83 a2 0e 00 00 08 	movl   $0x8e000008,0xea2(%rbx)
ffffffff802185e1:	00 00 8e 
ffffffff802185e4:	89 83 a8 0e 00 00    	mov    %eax,0xea8(%rbx)
ffffffff802185ea:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff802185f1:	66 89 83 b0 0e 00 00 	mov    %ax,0xeb0(%rbx)
ffffffff802185f8:	48 89 c2             	mov    %rax,%rdx
ffffffff802185fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802185ff:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218603:	89 83 b8 0e 00 00    	mov    %eax,0xeb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218609:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218610:	66 89 93 b6 0e 00 00 	mov    %dx,0xeb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218617:	48 89 c2             	mov    %rax,%rdx
ffffffff8021861a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021861e:	66 89 83 c0 0e 00 00 	mov    %ax,0xec0(%rbx)
ffffffff80218625:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218629:	89 83 c8 0e 00 00    	mov    %eax,0xec8(%rbx)
ffffffff8021862f:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff80218636:	66 89 93 c6 0e 00 00 	mov    %dx,0xec6(%rbx)
ffffffff8021863d:	48 89 c2             	mov    %rax,%rdx
ffffffff80218640:	66 89 83 d0 0e 00 00 	mov    %ax,0xed0(%rbx)
ffffffff80218647:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021864b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021864f:	89 83 d8 0e 00 00    	mov    %eax,0xed8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80218655:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff8021865c:	66 89 93 d6 0e 00 00 	mov    %dx,0xed6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80218663:	48 89 c2             	mov    %rax,%rdx
ffffffff80218666:	66 89 83 e0 0e 00 00 	mov    %ax,0xee0(%rbx)
ffffffff8021866d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218671:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218675:	89 83 e8 0e 00 00    	mov    %eax,0xee8(%rbx)
ffffffff8021867b:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff80218682:	66 89 93 e6 0e 00 00 	mov    %dx,0xee6(%rbx)
ffffffff80218689:	48 89 c2             	mov    %rax,%rdx
ffffffff8021868c:	66 89 83 f0 0e 00 00 	mov    %ax,0xef0(%rbx)
ffffffff80218693:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218697:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021869b:	89 83 f8 0e 00 00    	mov    %eax,0xef8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff802186a1:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff802186a8:	66 89 93 f6 0e 00 00 	mov    %dx,0xef6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff802186af:	48 89 c2             	mov    %rax,%rdx
ffffffff802186b2:	66 89 83 00 0f 00 00 	mov    %ax,0xf00(%rbx)
ffffffff802186b9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802186bd:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802186c1:	89 83 08 0f 00 00    	mov    %eax,0xf08(%rbx)
ffffffff802186c7:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff802186ce:	66 89 93 06 0f 00 00 	mov    %dx,0xf06(%rbx)
ffffffff802186d5:	48 89 c2             	mov    %rax,%rdx
ffffffff802186d8:	66 89 83 10 0f 00 00 	mov    %ax,0xf10(%rbx)
ffffffff802186df:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802186e3:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff802186e7:	c7 83 ac 0e 00 00 00 	movl   $0x0,0xeac(%rbx)
ffffffff802186ee:	00 00 00 
ffffffff802186f1:	c7 83 b2 0e 00 00 08 	movl   $0x8e000008,0xeb2(%rbx)
ffffffff802186f8:	00 00 8e 
ffffffff802186fb:	c7 83 bc 0e 00 00 00 	movl   $0x0,0xebc(%rbx)
ffffffff80218702:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218705:	c7 83 c2 0e 00 00 08 	movl   $0x8e000008,0xec2(%rbx)
ffffffff8021870c:	00 00 8e 
ffffffff8021870f:	c7 83 cc 0e 00 00 00 	movl   $0x0,0xecc(%rbx)
ffffffff80218716:	00 00 00 
ffffffff80218719:	c7 83 d2 0e 00 00 08 	movl   $0x8e000008,0xed2(%rbx)
ffffffff80218720:	00 00 8e 
ffffffff80218723:	c7 83 dc 0e 00 00 00 	movl   $0x0,0xedc(%rbx)
ffffffff8021872a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff8021872d:	c7 83 e2 0e 00 00 08 	movl   $0x8e000008,0xee2(%rbx)
ffffffff80218734:	00 00 8e 
ffffffff80218737:	c7 83 ec 0e 00 00 00 	movl   $0x0,0xeec(%rbx)
ffffffff8021873e:	00 00 00 
ffffffff80218741:	c7 83 f2 0e 00 00 08 	movl   $0x8e000008,0xef2(%rbx)
ffffffff80218748:	00 00 8e 
ffffffff8021874b:	c7 83 fc 0e 00 00 00 	movl   $0x0,0xefc(%rbx)
ffffffff80218752:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218755:	c7 83 02 0f 00 00 08 	movl   $0x8e000008,0xf02(%rbx)
ffffffff8021875c:	00 00 8e 
ffffffff8021875f:	c7 83 0c 0f 00 00 00 	movl   $0x0,0xf0c(%rbx)
ffffffff80218766:	00 00 00 
ffffffff80218769:	c7 83 12 0f 00 00 08 	movl   $0x8e000008,0xf12(%rbx)
ffffffff80218770:	00 00 8e 
ffffffff80218773:	89 83 18 0f 00 00    	mov    %eax,0xf18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80218779:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218780:	66 89 93 16 0f 00 00 	mov    %dx,0xf16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80218787:	48 89 c2             	mov    %rax,%rdx
ffffffff8021878a:	66 89 83 20 0f 00 00 	mov    %ax,0xf20(%rbx)
ffffffff80218791:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218795:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218799:	89 83 28 0f 00 00    	mov    %eax,0xf28(%rbx)
ffffffff8021879f:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff802187a6:	66 89 93 26 0f 00 00 	mov    %dx,0xf26(%rbx)
ffffffff802187ad:	48 89 c2             	mov    %rax,%rdx
ffffffff802187b0:	66 89 83 30 0f 00 00 	mov    %ax,0xf30(%rbx)
ffffffff802187b7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802187bb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802187bf:	89 83 38 0f 00 00    	mov    %eax,0xf38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff802187c5:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff802187cc:	66 89 93 36 0f 00 00 	mov    %dx,0xf36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff802187d3:	48 89 c2             	mov    %rax,%rdx
ffffffff802187d6:	66 89 83 40 0f 00 00 	mov    %ax,0xf40(%rbx)
ffffffff802187dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802187e1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802187e5:	89 83 48 0f 00 00    	mov    %eax,0xf48(%rbx)
ffffffff802187eb:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff802187f2:	66 89 93 46 0f 00 00 	mov    %dx,0xf46(%rbx)
ffffffff802187f9:	48 89 c2             	mov    %rax,%rdx
ffffffff802187fc:	66 89 83 50 0f 00 00 	mov    %ax,0xf50(%rbx)
ffffffff80218803:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218807:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021880b:	89 83 58 0f 00 00    	mov    %eax,0xf58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80218811:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80218818:	66 89 93 56 0f 00 00 	mov    %dx,0xf56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff8021881f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218822:	66 89 83 60 0f 00 00 	mov    %ax,0xf60(%rbx)
ffffffff80218829:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021882d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218831:	89 83 68 0f 00 00    	mov    %eax,0xf68(%rbx)
ffffffff80218837:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff8021883e:	66 89 93 66 0f 00 00 	mov    %dx,0xf66(%rbx)
ffffffff80218845:	48 89 c2             	mov    %rax,%rdx
ffffffff80218848:	66 89 83 70 0f 00 00 	mov    %ax,0xf70(%rbx)
ffffffff8021884f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218853:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218857:	89 83 78 0f 00 00    	mov    %eax,0xf78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff8021885d:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80218864:	66 89 93 76 0f 00 00 	mov    %dx,0xf76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff8021886b:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff8021886e:	c7 83 1c 0f 00 00 00 	movl   $0x0,0xf1c(%rbx)
ffffffff80218875:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218878:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff8021887c:	c7 83 22 0f 00 00 08 	movl   $0x8e000008,0xf22(%rbx)
ffffffff80218883:	00 00 8e 
ffffffff80218886:	c7 83 2c 0f 00 00 00 	movl   $0x0,0xf2c(%rbx)
ffffffff8021888d:	00 00 00 
ffffffff80218890:	c7 83 32 0f 00 00 08 	movl   $0x8e000008,0xf32(%rbx)
ffffffff80218897:	00 00 8e 
ffffffff8021889a:	c7 83 3c 0f 00 00 00 	movl   $0x0,0xf3c(%rbx)
ffffffff802188a1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff802188a4:	c7 83 42 0f 00 00 08 	movl   $0x8e000008,0xf42(%rbx)
ffffffff802188ab:	00 00 8e 
ffffffff802188ae:	c7 83 4c 0f 00 00 00 	movl   $0x0,0xf4c(%rbx)
ffffffff802188b5:	00 00 00 
ffffffff802188b8:	c7 83 52 0f 00 00 08 	movl   $0x8e000008,0xf52(%rbx)
ffffffff802188bf:	00 00 8e 
ffffffff802188c2:	c7 83 5c 0f 00 00 00 	movl   $0x0,0xf5c(%rbx)
ffffffff802188c9:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff802188cc:	c7 83 62 0f 00 00 08 	movl   $0x8e000008,0xf62(%rbx)
ffffffff802188d3:	00 00 8e 
ffffffff802188d6:	c7 83 6c 0f 00 00 00 	movl   $0x0,0xf6c(%rbx)
ffffffff802188dd:	00 00 00 
ffffffff802188e0:	c7 83 72 0f 00 00 08 	movl   $0x8e000008,0xf72(%rbx)
ffffffff802188e7:	00 00 8e 
ffffffff802188ea:	c7 83 7c 0f 00 00 00 	movl   $0x0,0xf7c(%rbx)
ffffffff802188f1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff802188f4:	66 89 83 80 0f 00 00 	mov    %ax,0xf80(%rbx)
ffffffff802188fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802188ff:	89 83 88 0f 00 00    	mov    %eax,0xf88(%rbx)
ffffffff80218905:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff8021890c:	66 89 93 86 0f 00 00 	mov    %dx,0xf86(%rbx)
ffffffff80218913:	48 89 c2             	mov    %rax,%rdx
ffffffff80218916:	66 89 83 90 0f 00 00 	mov    %ax,0xf90(%rbx)
ffffffff8021891d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218921:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218925:	89 83 98 0f 00 00    	mov    %eax,0xf98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff8021892b:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218932:	66 89 93 96 0f 00 00 	mov    %dx,0xf96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80218939:	48 89 c2             	mov    %rax,%rdx
ffffffff8021893c:	66 89 83 a0 0f 00 00 	mov    %ax,0xfa0(%rbx)
ffffffff80218943:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218947:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021894b:	89 83 a8 0f 00 00    	mov    %eax,0xfa8(%rbx)
ffffffff80218951:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80218958:	66 89 93 a6 0f 00 00 	mov    %dx,0xfa6(%rbx)
ffffffff8021895f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218962:	66 89 83 b0 0f 00 00 	mov    %ax,0xfb0(%rbx)
ffffffff80218969:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021896d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218971:	89 83 b8 0f 00 00    	mov    %eax,0xfb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218977:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff8021897e:	66 89 93 b6 0f 00 00 	mov    %dx,0xfb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218985:	48 89 c2             	mov    %rax,%rdx
ffffffff80218988:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021898c:	66 89 83 c0 0f 00 00 	mov    %ax,0xfc0(%rbx)
ffffffff80218993:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218997:	89 83 c8 0f 00 00    	mov    %eax,0xfc8(%rbx)
ffffffff8021899d:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff802189a4:	66 89 93 c6 0f 00 00 	mov    %dx,0xfc6(%rbx)
ffffffff802189ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802189ae:	66 89 83 d0 0f 00 00 	mov    %ax,0xfd0(%rbx)
ffffffff802189b5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802189b9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802189bd:	89 83 d8 0f 00 00    	mov    %eax,0xfd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff802189c3:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff802189ca:	66 89 93 d6 0f 00 00 	mov    %dx,0xfd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff802189d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802189d4:	66 89 83 e0 0f 00 00 	mov    %ax,0xfe0(%rbx)
ffffffff802189db:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802189df:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff802189e3:	c7 83 82 0f 00 00 08 	movl   $0x8e000008,0xf82(%rbx)
ffffffff802189ea:	00 00 8e 
ffffffff802189ed:	c7 83 8c 0f 00 00 00 	movl   $0x0,0xf8c(%rbx)
ffffffff802189f4:	00 00 00 
ffffffff802189f7:	c7 83 92 0f 00 00 08 	movl   $0x8e000008,0xf92(%rbx)
ffffffff802189fe:	00 00 8e 
ffffffff80218a01:	c7 83 9c 0f 00 00 00 	movl   $0x0,0xf9c(%rbx)
ffffffff80218a08:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80218a0b:	c7 83 a2 0f 00 00 08 	movl   $0x8e000008,0xfa2(%rbx)
ffffffff80218a12:	00 00 8e 
ffffffff80218a15:	c7 83 ac 0f 00 00 00 	movl   $0x0,0xfac(%rbx)
ffffffff80218a1c:	00 00 00 
ffffffff80218a1f:	c7 83 b2 0f 00 00 08 	movl   $0x8e000008,0xfb2(%rbx)
ffffffff80218a26:	00 00 8e 
ffffffff80218a29:	c7 83 bc 0f 00 00 00 	movl   $0x0,0xfbc(%rbx)
ffffffff80218a30:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218a33:	c7 83 c2 0f 00 00 08 	movl   $0x8e000008,0xfc2(%rbx)
ffffffff80218a3a:	00 00 8e 
ffffffff80218a3d:	c7 83 cc 0f 00 00 00 	movl   $0x0,0xfcc(%rbx)
ffffffff80218a44:	00 00 00 
ffffffff80218a47:	c7 83 d2 0f 00 00 08 	movl   $0x8e000008,0xfd2(%rbx)
ffffffff80218a4e:	00 00 8e 
ffffffff80218a51:	c7 83 dc 0f 00 00 00 	movl   $0x0,0xfdc(%rbx)
ffffffff80218a58:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80218a5b:	c7 83 e2 0f 00 00 08 	movl   $0x8e000008,0xfe2(%rbx)
ffffffff80218a62:	00 00 8e 
ffffffff80218a65:	66 89 93 e6 0f 00 00 	mov    %dx,0xfe6(%rbx)
ffffffff80218a6c:	89 83 e8 0f 00 00    	mov    %eax,0xfe8(%rbx)
ffffffff80218a72:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80218a79:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a7c:	66 89 83 f0 0f 00 00 	mov    %ax,0xff0(%rbx)
ffffffff80218a83:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218a87:	89 83 f8 0f 00 00    	mov    %eax,0xff8(%rbx)
ffffffff80218a8d:	48 c1 ea 10          	shr    $0x10,%rdx
    if(RME_X64_CPU_Cnt==0)
ffffffff80218a91:	48 8b 05 08 da 00 00 	mov    0xda08(%rip),%rax        # ffffffff802264a0 <RME_X64_CPU_Cnt>
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80218a98:	c7 83 ec 0f 00 00 00 	movl   $0x0,0xfec(%rbx)
ffffffff80218a9f:	00 00 00 
ffffffff80218aa2:	c7 83 f2 0f 00 00 08 	movl   $0x8e000008,0xff2(%rbx)
ffffffff80218aa9:	00 00 8e 
ffffffff80218aac:	66 89 93 f6 0f 00 00 	mov    %dx,0xff6(%rbx)
ffffffff80218ab3:	c7 83 fc 0f 00 00 00 	movl   $0x0,0xffc(%rbx)
ffffffff80218aba:	00 00 00 
    if(RME_X64_CPU_Cnt==0)
ffffffff80218abd:	48 85 c0             	test   %rax,%rax
ffffffff80218ac0:	75 3a                	jne    ffffffff80218afc <__RME_X64_CPU_Local_Init+0x379c>
        RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
ffffffff80218ac2:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80218ac9:	c7 83 22 02 00 00 08 	movl   $0x8e000008,0x222(%rbx)
ffffffff80218ad0:	00 00 8e 
ffffffff80218ad3:	48 89 c2             	mov    %rax,%rdx
ffffffff80218ad6:	66 89 83 20 02 00 00 	mov    %ax,0x220(%rbx)
ffffffff80218add:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218ae1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218ae5:	89 83 28 02 00 00    	mov    %eax,0x228(%rbx)
ffffffff80218aeb:	66 89 93 26 02 00 00 	mov    %dx,0x226(%rbx)
ffffffff80218af2:	c7 83 2c 02 00 00 00 	movl   $0x0,0x22c(%rbx)
ffffffff80218af9:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218afc:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80218b03:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218b08:	66 89 83 30 08 00 00 	mov    %ax,0x830(%rbx)
ffffffff80218b0f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218b12:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218b16:	89 83 38 08 00 00    	mov    %eax,0x838(%rbx)
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80218b1c:	b8 ff 0f 00 00       	mov    $0xfff,%eax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218b21:	48 c1 ea 10          	shr    $0x10,%rdx
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80218b25:	66 89 44 24 06       	mov    %ax,0x6(%rsp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80218b2a:	48 89 d8             	mov    %rbx,%rax
ffffffff80218b2d:	48 c1 e8 10          	shr    $0x10,%rax
    Desc[1]=(rme_ptr_t)IDT_Table;
ffffffff80218b31:	66 89 5c 24 08       	mov    %bx,0x8(%rsp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80218b36:	66 89 44 24 0a       	mov    %ax,0xa(%rsp)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80218b3b:	48 89 d8             	mov    %rbx,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218b3e:	66 89 93 36 08 00 00 	mov    %dx,0x836(%rbx)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80218b45:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218b49:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
    Desc[4]=((rme_ptr_t)IDT_Table)>>48;
ffffffff80218b4e:	48 89 d8             	mov    %rbx,%rax
ffffffff80218b51:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218b55:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80218b5a:	e8 1a 2d ff ff       	call   ffffffff8020b879 <__RME_X64_IDT_Load>
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80218b5f:	48 8b 15 6a d9 00 00 	mov    0xd96a(%rip),%rdx        # ffffffff802264d0 <RME_X64_Layout+0x10>
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff80218b66:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80218b6b:	48 8b 05 2e d9 00 00 	mov    0xd92e(%rip),%rax        # ffffffff802264a0 <RME_X64_CPU_Cnt>
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218b72:	48 be 00 00 ff ff ff 	movabs $0xffffff0000,%rsi
ffffffff80218b79:	00 00 00 
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218b7c:	66 0f 6f 05 cc 3f 00 	movdqa 0x3fcc(%rip),%xmm0        # ffffffff8021cb50 <Table.1+0x1d0>
ffffffff80218b83:	00 
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80218b84:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80218b88:	48 8d 84 02 00 10 00 	lea    0x1000(%rdx,%rax,1),%rax
ffffffff80218b8f:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80218b90:	48 8b 15 39 d9 00 00 	mov    0xd939(%rip),%rdx        # ffffffff802264d0 <RME_X64_Layout+0x10>
ffffffff80218b97:	48 8b 2d 02 d9 00 00 	mov    0xd902(%rip),%rbp        # ffffffff802264a0 <RME_X64_CPU_Cnt>
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218b9e:	0f 11 00             	movups %xmm0,(%rax)
ffffffff80218ba1:	66 0f 6f 05 b7 3f 00 	movdqa 0x3fb7(%rip),%xmm0        # ffffffff8021cb60 <Table.1+0x1e0>
ffffffff80218ba8:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80218ba9:	48 c1 e5 0d          	shl    $0xd,%rbp
ffffffff80218bad:	48 01 d5             	add    %rdx,%rbp
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218bb0:	0f 11 40 10          	movups %xmm0,0x10(%rax)
ffffffff80218bb4:	66 0f 6f 05 b4 3f 00 	movdqa 0x3fb4(%rip),%xmm0        # ffffffff8021cb70 <Table.1+0x1f0>
ffffffff80218bbb:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80218bbc:	48 8d 8d 80 10 00 00 	lea    0x1080(%rbp),%rcx
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218bc3:	48 89 ca             	mov    %rcx,%rdx
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218bc6:	0f 11 40 20          	movups %xmm0,0x20(%rax)
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218bca:	48 c1 e2 10          	shl    $0x10,%rdx
ffffffff80218bce:	48 21 f2             	and    %rsi,%rdx
ffffffff80218bd1:	48 89 ce             	mov    %rcx,%rsi
    GDT_Table[7]=(TSS_Table>>32);
ffffffff80218bd4:	48 c1 e9 20          	shr    $0x20,%rcx
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218bd8:	48 c1 ee 18          	shr    $0x18,%rsi
    GDT_Table[7]=(TSS_Table>>32);
ffffffff80218bdc:	48 89 48 38          	mov    %rcx,0x38(%rax)
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218be0:	48 c1 e6 38          	shl    $0x38,%rsi
ffffffff80218be4:	48 09 f2             	or     %rsi,%rdx
ffffffff80218be7:	48 be 67 00 00 00 00 	movabs $0x890000000067,%rsi
ffffffff80218bee:	89 00 00 
ffffffff80218bf1:	48 09 f2             	or     %rsi,%rdx
ffffffff80218bf4:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Desc[0]=8*sizeof(rme_ptr_t)-1;
ffffffff80218bf8:	ba 3f 00 00 00       	mov    $0x3f,%edx
ffffffff80218bfd:	66 89 54 24 06       	mov    %dx,0x6(%rsp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff80218c02:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c05:	48 c1 ea 10          	shr    $0x10,%rdx
    Desc[1]=(rme_ptr_t)GDT_Table;
ffffffff80218c09:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff80218c0e:	66 89 54 24 0a       	mov    %dx,0xa(%rsp)
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff80218c13:	48 89 c2             	mov    %rax,%rdx
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80218c16:	48 c1 e8 30          	shr    $0x30,%rax
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff80218c1a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218c1e:	66 89 54 24 0c       	mov    %dx,0xc(%rsp)
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80218c23:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff80218c28:	e8 48 2c ff ff       	call   ffffffff8020b875 <__RME_X64_GDT_Load>
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218c2d:	48 8b 15 e4 da 00 00 	mov    0xdae4(%rip),%rdx        # ffffffff80226718 <RME_X64_Layout+0x258>
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff80218c34:	bf 30 00 00 00       	mov    $0x30,%edi
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218c39:	48 8b 05 60 d8 00 00 	mov    0xd860(%rip),%rax        # ffffffff802264a0 <RME_X64_CPU_Cnt>
ffffffff80218c40:	83 c0 01             	add    $0x1,%eax
ffffffff80218c43:	c1 e0 14             	shl    $0x14,%eax
ffffffff80218c46:	01 d0                	add    %edx,%eax
ffffffff80218c48:	89 85 84 10 00 00    	mov    %eax,0x1084(%rbp)
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80218c4e:	48 8b 15 c3 da 00 00 	mov    0xdac3(%rip),%rdx        # ffffffff80226718 <RME_X64_Layout+0x258>
ffffffff80218c55:	48 8b 05 44 d8 00 00 	mov    0xd844(%rip),%rax        # ffffffff802264a0 <RME_X64_CPU_Cnt>
    ((rme_u32_t*)TSS_Table)[16]=0x00680000;
ffffffff80218c5c:	c7 85 c0 10 00 00 00 	movl   $0x680000,0x10c0(%rbp)
ffffffff80218c63:	00 68 00 
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80218c66:	48 83 c0 01          	add    $0x1,%rax
ffffffff80218c6a:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80218c6e:	48 01 d0             	add    %rdx,%rax
ffffffff80218c71:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218c75:	89 85 88 10 00 00    	mov    %eax,0x1088(%rbp)
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff80218c7b:	e8 fd 2b ff ff       	call   ffffffff8020b87d <__RME_X64_TSS_Load>
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80218c80:	48 8b 15 49 d8 00 00 	mov    0xd849(%rip),%rdx        # ffffffff802264d0 <RME_X64_Layout+0x10>
ffffffff80218c87:	48 8b 05 12 d8 00 00 	mov    0xd812(%rip),%rax        # ffffffff802264a0 <RME_X64_CPU_Cnt>
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff80218c8e:	48 8b 35 0b d8 00 00 	mov    0xd80b(%rip),%rsi        # ffffffff802264a0 <RME_X64_CPU_Cnt>
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80218c95:	48 c1 e0 0d          	shl    $0xd,%rax
    		                          RME_POW2(RME_PGT_SIZE_4K)+
ffffffff80218c99:	48 8d ac 02 00 14 00 	lea    0x1400(%rdx,%rax,1),%rbp
ffffffff80218ca0:	00 
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff80218ca1:	48 89 ef             	mov    %rbp,%rdi
ffffffff80218ca4:	e8 d7 75 ff ff       	call   ffffffff80210280 <_RME_CPU_Local_Init>
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff80218ca9:	48 8b 15 20 d8 00 00 	mov    0xd820(%rip),%rdx        # ffffffff802264d0 <RME_X64_Layout+0x10>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218cb0:	48 89 de             	mov    %rbx,%rsi
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff80218cb3:	48 8b 05 e6 d7 00 00 	mov    0xd7e6(%rip),%rax        # ffffffff802264a0 <RME_X64_CPU_Cnt>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218cba:	bf 02 01 00 c0       	mov    $0xc0000102,%edi
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff80218cbf:	48 83 c0 01          	add    $0x1,%rax
ffffffff80218cc3:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80218cc7:	48 8d 54 02 e8       	lea    -0x18(%rdx,%rax,1),%rdx
    Temp->CPU_Local_Addr=(rme_ptr_t)CPU_Local;
ffffffff80218ccc:	48 89 2a             	mov    %rbp,(%rdx)
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218ccf:	48 8b 0d 42 da 00 00 	mov    0xda42(%rip),%rcx        # ffffffff80226718 <RME_X64_Layout+0x258>
ffffffff80218cd6:	48 8b 05 c3 d7 00 00 	mov    0xd7c3(%rip),%rax        # ffffffff802264a0 <RME_X64_CPU_Cnt>
    Temp->Temp_User_SP=0;
ffffffff80218cdd:	48 c7 42 10 00 00 00 	movq   $0x0,0x10(%rdx)
ffffffff80218ce4:	00 
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218ce5:	48 83 c0 01          	add    $0x1,%rax
ffffffff80218ce9:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80218ced:	48 01 c8             	add    %rcx,%rax
ffffffff80218cf0:	48 89 42 08          	mov    %rax,0x8(%rdx)
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218cf4:	e8 31 2b ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218cf9:	48 89 de             	mov    %rbx,%rsi
ffffffff80218cfc:	bf 01 01 00 c0       	mov    $0xc0000101,%edi
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff80218d01:	bb 80 00 00 c0       	mov    $0xc0000080,%ebx
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218d06:	e8 1f 2b ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff80218d0b:	48 89 df             	mov    %rbx,%rdi
ffffffff80218d0e:	e8 03 2b ff ff       	call   ffffffff8020b816 <__RME_X64_Read_MSR>
ffffffff80218d13:	48 89 df             	mov    %rbx,%rdi
ffffffff80218d16:	48 83 c8 01          	or     $0x1,%rax
ffffffff80218d1a:	48 89 c6             	mov    %rax,%rsi
ffffffff80218d1d:	e8 08 2b ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_LSTAR, (rme_ptr_t)SVC_Handler);
ffffffff80218d22:	48 c7 c6 c2 c6 20 80 	mov    $0xffffffff8020c6c2,%rsi
ffffffff80218d29:	bf 82 00 00 c0       	mov    $0xc0000082,%edi
ffffffff80218d2e:	e8 f7 2a ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_FMASK, ~RME_X64_RFLAGS_IF);
ffffffff80218d33:	48 c7 c6 ff fd ff ff 	mov    $0xfffffffffffffdff,%rsi
ffffffff80218d3a:	bf 84 00 00 c0       	mov    $0xc0000084,%edi
ffffffff80218d3f:	e8 e6 2a ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_STAR, (((rme_ptr_t)RME_X64_SEG_EMPTY)<<48)|(((rme_ptr_t)RME_X64_SEG_KERNEL_CODE)<<32));
ffffffff80218d44:	bf 81 00 00 c0       	mov    $0xc0000081,%edi
ffffffff80218d49:	48 be 00 00 00 00 08 	movabs $0x1b000800000000,%rsi
ffffffff80218d50:	00 1b 00 
ffffffff80218d53:	e8 d2 2a ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
}
ffffffff80218d58:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80218d5c:	5b                   	pop    %rbx
ffffffff80218d5d:	5d                   	pop    %rbp
ffffffff80218d5e:	c3                   	ret
ffffffff80218d5f:	90                   	nop

ffffffff80218d60 <__RME_List_Crt>:
{
ffffffff80218d60:	f3 0f 1e fa          	endbr64
}
ffffffff80218d64:	c3                   	ret
ffffffff80218d65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80218d6c:	00 00 00 00 

ffffffff80218d70 <__RME_List_Ins>:
{
ffffffff80218d70:	f3 0f 1e fa          	endbr64
}
ffffffff80218d74:	c3                   	ret
ffffffff80218d75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80218d7c:	00 00 00 00 

ffffffff80218d80 <__RME_List_Del>:
{
ffffffff80218d80:	f3 0f 1e fa          	endbr64
}
ffffffff80218d84:	c3                   	ret
ffffffff80218d85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80218d8c:	00 00 00 00 

ffffffff80218d90 <__RME_Inv_Retval_Set>:
void __RME_Inv_Retval_Set(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
ffffffff80218d90:	f3 0f 1e fa          	endbr64
ffffffff80218d94:	c3                   	ret
ffffffff80218d95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80218d9c:	00 00 00 00 

ffffffff80218da0 <__RME_Kfn_Handler>:
{
ffffffff80218da0:	f3 0f 1e fa          	endbr64
}
ffffffff80218da4:	31 c0                	xor    %eax,%eax
ffffffff80218da6:	c3                   	ret
ffffffff80218da7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80218dae:	00 00 

ffffffff80218db0 <__RME_Putchar>:
{
ffffffff80218db0:	f3 0f 1e fa          	endbr64
ffffffff80218db4:	53                   	push   %rbx
ffffffff80218db5:	89 fb                	mov    %edi,%ebx
    while((__RME_X64_In(RME_X64_COM1+5)&0x20)==0);
ffffffff80218db7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80218dbe:	00 00 
ffffffff80218dc0:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff80218dc5:	e8 36 2a ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff80218dca:	a8 20                	test   $0x20,%al
ffffffff80218dcc:	74 f2                	je     ffffffff80218dc0 <__RME_Putchar+0x10>
    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff80218dce:	48 0f be f3          	movsbq %bl,%rsi
ffffffff80218dd2:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80218dd7:	e8 2e 2a ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff80218ddc:	31 c0                	xor    %eax,%eax
ffffffff80218dde:	5b                   	pop    %rbx
ffffffff80218ddf:	c3                   	ret

ffffffff80218de0 <__RME_X64_LAPIC_Ack>:
{
ffffffff80218de0:	f3 0f 1e fa          	endbr64
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff80218de4:	48 8b 15 45 c6 00 00 	mov    0xc645(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80218deb:	48 b8 b0 00 00 00 00 	movabs $0xffff8000000000b0,%rax
ffffffff80218df2:	80 ff ff 
ffffffff80218df5:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
}
ffffffff80218dfc:	c3                   	ret
ffffffff80218dfd:	0f 1f 00             	nopl   (%rax)

ffffffff80218e00 <__RME_X64_SMP_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff80218e00:	f3 0f 1e fa          	endbr64
ffffffff80218e04:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax
ffffffff80218e0b:	80 ff ff 
ffffffff80218e0e:	41 57                	push   %r15
ffffffff80218e10:	48 be a0 5b 21 80 ff 	movabs $0x7fff80215ba0,%rsi
ffffffff80218e17:	7f 00 00 
    rme_cnt_t Count;
    rme_u16_t* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(rme_u8_t*)RME_X64_PA2VA(0x7000);
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80218e1a:	48 b9 62 70 00 00 00 	movabs $0xffff800000007062,%rcx
ffffffff80218e21:	80 ff ff 
{
ffffffff80218e24:	41 56                	push   %r14
ffffffff80218e26:	41 55                	push   %r13
ffffffff80218e28:	41 54                	push   %r12
ffffffff80218e2a:	55                   	push   %rbp
ffffffff80218e2b:	53                   	push   %rbx
ffffffff80218e2c:	48 83 ec 18          	sub    $0x18,%rsp
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80218e30:	0f b6 14 06          	movzbl (%rsi,%rax,1),%edx
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80218e34:	48 83 c0 01          	add    $0x1,%rax
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80218e38:	88 50 ff             	mov    %dl,-0x1(%rax)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80218e3b:	48 39 c8             	cmp    %rcx,%rax
ffffffff80218e3e:	75 f0                	jne    ffffffff80218e30 <__RME_X64_SMP_Init+0x30>
    {
        RME_DBG_S("\n\rBooting CPU ");
        RME_DBG_I(Count);
        /* Temporary stack */
        *(rme_u32_t*)(Code-4)=0x8000;
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80218e40:	48 c7 c7 89 80 10 80 	mov    $0xffffffff80108089,%rdi
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80218e47:	41 be 01 00 00 00    	mov    $0x1,%r14d
    RME_X64_CPU_Cnt=1;
ffffffff80218e4d:	48 c7 05 48 d6 00 00 	movq   $0x1,0xd648(%rip)        # ffffffff802264a0 <RME_X64_CPU_Cnt>
ffffffff80218e54:	01 00 00 00 
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80218e58:	48 8b 05 49 d6 00 00 	mov    0xd649(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80218e5f:	49 bc f8 6f 00 00 00 	movabs $0xffff800000006ff8,%r12
ffffffff80218e66:	80 ff ff 
ffffffff80218e69:	8d bf 00 00 00 80    	lea    -0x80000000(%rdi),%edi
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80218e6f:	48 bd f0 6f 00 00 00 	movabs $0xffff800000006ff0,%rbp
ffffffff80218e76:	80 ff ff 
        Warm_Reset=(rme_u16_t*)RME_X64_PA2VA((0x40<<4|0x67));
        Warm_Reset[0]=0;
        Warm_Reset[1]=0x7000>>4;

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80218e79:	48 bb 10 03 00 00 00 	movabs $0xffff800000000310,%rbx
ffffffff80218e80:	80 ff ff 
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80218e83:	49 bf 00 03 00 00 00 	movabs $0xffff800000000300,%r15
ffffffff80218e8a:	80 ff ff 
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80218e8d:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80218e91:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80218e95:	0f 86 31 01 00 00    	jbe    ffffffff80218fcc <__RME_X64_SMP_Init+0x1cc>
ffffffff80218e9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff80218ea0:	4d 89 f5             	mov    %r14,%r13
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80218ea3:	49 83 c6 01          	add    $0x1,%r14
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff80218ea7:	be 0f 00 00 00       	mov    $0xf,%esi
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff80218eac:	48 b8 fc 6f 00 00 00 	movabs $0xffff800000006ffc,%rax
ffffffff80218eb3:	80 ff ff 
ffffffff80218eb6:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80218ebc:	8b 44 24 0c          	mov    0xc(%rsp),%eax
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff80218ec0:	bf 70 00 00 00       	mov    $0x70,%edi
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80218ec5:	49 c1 e5 04          	shl    $0x4,%r13
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80218ec9:	41 89 04 24          	mov    %eax,(%r12)
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80218ecd:	4c 89 f0             	mov    %r14,%rax
ffffffff80218ed0:	48 8b 0d 41 d8 00 00 	mov    0xd841(%rip),%rcx        # ffffffff80226718 <RME_X64_Layout+0x258>
ffffffff80218ed7:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80218edb:	48 01 c8             	add    %rcx,%rax
ffffffff80218ede:	48 89 45 00          	mov    %rax,0x0(%rbp)
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff80218ee2:	e8 23 29 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
ffffffff80218ee7:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80218eec:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff80218ef1:	e8 14 29 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
        Warm_Reset[1]=0x7000>>4;
ffffffff80218ef6:	b9 00 07 00 00       	mov    $0x700,%ecx
        Warm_Reset[0]=0;
ffffffff80218efb:	31 d2                	xor    %edx,%edx
ffffffff80218efd:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax
ffffffff80218f04:	80 ff ff 
ffffffff80218f07:	66 89 10             	mov    %dx,(%rax)
        Warm_Reset[1]=0x7000>>4;
ffffffff80218f0a:	66 89 48 02          	mov    %cx,0x2(%rax)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80218f0e:	49 8b 85 a0 54 22 80 	mov    -0x7fddab60(%r13),%rax
ffffffff80218f15:	48 8b 0d 14 c5 00 00 	mov    0xc514(%rip),%rcx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80218f1c:	c1 e0 18             	shl    $0x18,%eax
ffffffff80218f1f:	89 04 19             	mov    %eax,(%rcx,%rbx,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80218f22:	48 8b 05 07 c5 00 00 	mov    0xc507(%rip),%rax        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80218f29:	42 c7 04 38 00 c5 00 	movl   $0xc500,(%rax,%r15,1)
ffffffff80218f30:	00 
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80218f31:	48 8b 05 f8 c4 00 00 	mov    0xc4f8(%rip),%rax        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80218f38:	42 c7 04 38 00 85 00 	movl   $0x8500,(%rax,%r15,1)
ffffffff80218f3f:	00 
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80218f40:	49 8b 85 a0 54 22 80 	mov    -0x7fddab60(%r13),%rax
ffffffff80218f47:	48 8b 0d e2 c4 00 00 	mov    0xc4e2(%rip),%rcx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80218f4e:	c1 e0 18             	shl    $0x18,%eax
ffffffff80218f51:	89 04 19             	mov    %eax,(%rcx,%rbx,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff80218f54:	48 8b 05 d5 c4 00 00 	mov    0xc4d5(%rip),%rax        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80218f5b:	42 c7 04 38 07 06 00 	movl   $0x607,(%rax,%r15,1)
ffffffff80218f62:	00 
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80218f63:	49 8b 85 a0 54 22 80 	mov    -0x7fddab60(%r13),%rax
ffffffff80218f6a:	48 8b 0d bf c4 00 00 	mov    0xc4bf(%rip),%rcx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80218f71:	c1 e0 18             	shl    $0x18,%eax
ffffffff80218f74:	89 04 19             	mov    %eax,(%rcx,%rbx,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff80218f77:	48 8b 05 b2 c4 00 00 	mov    0xc4b2(%rip),%rax        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80218f7e:	42 c7 04 38 07 06 00 	movl   $0x607,(%rax,%r15,1)
ffffffff80218f85:	00 
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
ffffffff80218f86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80218f8d:	00 00 00 
ffffffff80218f90:	48 8b 05 09 d5 00 00 	mov    0xd509(%rip),%rax        # ffffffff802264a0 <RME_X64_CPU_Cnt>
ffffffff80218f97:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80218f9b:	48 05 a0 54 22 80    	add    $0xffffffff802254a0,%rax
ffffffff80218fa1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218fa5:	48 85 c0             	test   %rax,%rax
ffffffff80218fa8:	74 e6                	je     ffffffff80218f90 <__RME_X64_SMP_Init+0x190>
        RME_X64_CPU_Cnt++;
ffffffff80218faa:	48 8b 05 ef d4 00 00 	mov    0xd4ef(%rip),%rax        # ffffffff802264a0 <RME_X64_CPU_Cnt>
ffffffff80218fb1:	48 83 c0 01          	add    $0x1,%rax
ffffffff80218fb5:	48 89 05 e4 d4 00 00 	mov    %rax,0xd4e4(%rip)        # ffffffff802264a0 <RME_X64_CPU_Cnt>
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80218fbc:	48 8b 05 e5 d4 00 00 	mov    0xd4e5(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff80218fc3:	49 39 c6             	cmp    %rax,%r14
ffffffff80218fc6:	0f 82 d4 fe ff ff    	jb     ffffffff80218ea0 <__RME_X64_SMP_Init+0xa0>
    }
}
ffffffff80218fcc:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80218fd0:	5b                   	pop    %rbx
ffffffff80218fd1:	5d                   	pop    %rbp
ffffffff80218fd2:	41 5c                	pop    %r12
ffffffff80218fd4:	41 5d                	pop    %r13
ffffffff80218fd6:	41 5e                	pop    %r14
ffffffff80218fd8:	41 5f                	pop    %r15
ffffffff80218fda:	c3                   	ret
ffffffff80218fdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80218fe0 <__RME_X64_SMP_Tick>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Tick(void)
{
ffffffff80218fe0:	f3 0f 1e fa          	endbr64
    /* Is this a SMP? */
    if(RME_X64_Num_CPU>1)
ffffffff80218fe4:	48 8b 05 bd d4 00 00 	mov    0xd4bd(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff80218feb:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80218fef:	76 27                	jbe    ffffffff80219018 <__RME_X64_SMP_Tick+0x38>
    {
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0xFFULL<<24);
ffffffff80218ff1:	48 8b 15 38 c4 00 00 	mov    0xc438(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80218ff8:	48 b8 10 03 00 00 00 	movabs $0xffff800000000310,%rax
ffffffff80218fff:	80 ff ff 
ffffffff80219002:	c7 04 02 00 00 00 ff 	movl   $0xff000000,(%rdx,%rax,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_EXC_SELF|
ffffffff80219009:	48 8b 15 20 c4 00 00 	mov    0xc420(%rip),%rdx        # ffffffff80225430 <RME_X64_LAPIC_Addr>
ffffffff80219010:	c7 44 10 f0 83 00 0c 	movl   $0xc0083,-0x10(%rax,%rdx,1)
ffffffff80219017:	00 
                                                 RME_X64_LAPIC_ICRLO_FIXED|
                                                 RME_X64_INT_SMP_SYSTICK);
    }
}
ffffffff80219018:	c3                   	ret
ffffffff80219019:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80219020 <__RME_Lowlvl_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Lowlvl_Init(void)
{
ffffffff80219020:	f3 0f 1e fa          	endbr64
ffffffff80219024:	41 57                	push   %r15
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80219026:	31 f6                	xor    %esi,%esi
ffffffff80219028:	bf f9 03 00 00       	mov    $0x3f9,%edi
{
ffffffff8021902d:	41 56                	push   %r14
ffffffff8021902f:	41 55                	push   %r13
ffffffff80219031:	41 54                	push   %r12
ffffffff80219033:	55                   	push   %rbp
ffffffff80219034:	53                   	push   %rbx
ffffffff80219035:	48 83 ec 28          	sub    $0x28,%rsp
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80219039:	e8 cc 27 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x80);
ffffffff8021903e:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff80219043:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff80219048:	e8 bd 27 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+0, 115200/9600);
ffffffff8021904d:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff80219052:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80219057:	e8 ae 27 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021905c:	31 f6                	xor    %esi,%esi
ffffffff8021905e:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff80219063:	e8 a2 27 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x03);
ffffffff80219068:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021906d:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff80219072:	e8 93 27 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+2, 0xC7);
ffffffff80219077:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff8021907c:	bf fa 03 00 00       	mov    $0x3fa,%edi
ffffffff80219081:	e8 84 27 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+4, 0);
ffffffff80219086:	31 f6                	xor    %esi,%esi
ffffffff80219088:	bf fc 03 00 00       	mov    $0x3fc,%edi
ffffffff8021908d:	e8 78 27 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
ffffffff80219092:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff80219097:	e8 64 27 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff8021909c:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff802190a2:	0f 84 60 07 00 00    	je     ffffffff80219808 <__RME_Lowlvl_Init+0x7e8>
        RME_X64_UART_Exist=1;
ffffffff802190a8:	48 c7 05 7d d6 00 00 	movq   $0x1,0xd67d(%rip)        # ffffffff80226730 <RME_X64_UART_Exist>
ffffffff802190af:	01 00 00 00 
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff802190b3:	48 b8 0e 04 00 00 00 	movabs $0xffff80000000040e,%rax
ffffffff802190ba:	80 ff ff 
ffffffff802190bd:	0f b7 00             	movzwl (%rax),%eax
    if(Paddr!=0)
ffffffff802190c0:	c1 e0 04             	shl    $0x4,%eax
ffffffff802190c3:	0f 84 10 01 00 00    	je     ffffffff802191d9 <__RME_Lowlvl_Init+0x1b9>
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff802190c9:	48 bb 00 00 00 00 00 	movabs $0xffff800000000000,%rbx
ffffffff802190d0:	80 ff ff 
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff802190d3:	48 98                	cltq
ffffffff802190d5:	48 ba e0 03 00 00 00 	movabs $0xffff8000000003e0,%rdx
ffffffff802190dc:	80 ff ff 
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff802190df:	48 01 c3             	add    %rax,%rbx
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff802190e2:	4c 8d 2c 10          	lea    (%rax,%rdx,1),%r13
ffffffff802190e6:	e9 c5 00 00 00       	jmp    ffffffff802191b0 <__RME_Lowlvl_Init+0x190>
ffffffff802190eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                Checksum+=Pos[Count+Check_Cnt];
ffffffff802190f0:	f3 0f 6f 13          	movdqu (%rbx),%xmm2
ffffffff802190f4:	66 0f ef ff          	pxor   %xmm7,%xmm7
ffffffff802190f8:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff802190fc:	66 0f ef e4          	pxor   %xmm4,%xmm4
ffffffff80219100:	0f b6 43 10          	movzbl 0x10(%rbx),%eax
ffffffff80219104:	0f b6 53 11          	movzbl 0x11(%rbx),%edx
ffffffff80219108:	66 0f 6f da          	movdqa %xmm2,%xmm3
ffffffff8021910c:	66 0f 68 d7          	punpckhbw %xmm7,%xmm2
ffffffff80219110:	66 0f 60 df          	punpcklbw %xmm7,%xmm3
ffffffff80219114:	66 0f 6f ea          	movdqa %xmm2,%xmm5
ffffffff80219118:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
ffffffff8021911c:	48 01 c2             	add    %rax,%rdx
ffffffff8021911f:	66 0f 6f cb          	movdqa %xmm3,%xmm1
ffffffff80219123:	66 0f 69 d8          	punpckhwd %xmm0,%xmm3
ffffffff80219127:	66 0f 61 e8          	punpcklwd %xmm0,%xmm5
ffffffff8021912b:	0f b6 43 12          	movzbl 0x12(%rbx),%eax
ffffffff8021912f:	66 0f 61 c8          	punpcklwd %xmm0,%xmm1
ffffffff80219133:	66 0f 6f f1          	movdqa %xmm1,%xmm6
ffffffff80219137:	66 0f 6f c1          	movdqa %xmm1,%xmm0
ffffffff8021913b:	66 0f 6f cb          	movdqa %xmm3,%xmm1
ffffffff8021913f:	48 01 c2             	add    %rax,%rdx
ffffffff80219142:	66 0f 6a cc          	punpckhdq %xmm4,%xmm1
ffffffff80219146:	66 0f 62 dc          	punpckldq %xmm4,%xmm3
ffffffff8021914a:	66 0f 6a f4          	punpckhdq %xmm4,%xmm6
ffffffff8021914e:	0f b6 43 13          	movzbl 0x13(%rbx),%eax
ffffffff80219152:	66 0f d4 d9          	paddq  %xmm1,%xmm3
ffffffff80219156:	66 0f 6f cd          	movdqa %xmm5,%xmm1
ffffffff8021915a:	66 0f 62 c4          	punpckldq %xmm4,%xmm0
ffffffff8021915e:	66 0f 6a cc          	punpckhdq %xmm4,%xmm1
ffffffff80219162:	66 0f 62 ec          	punpckldq %xmm4,%xmm5
ffffffff80219166:	66 0f d4 c6          	paddq  %xmm6,%xmm0
ffffffff8021916a:	48 01 c2             	add    %rax,%rdx
ffffffff8021916d:	66 0f d4 e9          	paddq  %xmm1,%xmm5
ffffffff80219171:	66 0f 6f ca          	movdqa %xmm2,%xmm1
ffffffff80219175:	66 0f d4 c3          	paddq  %xmm3,%xmm0
ffffffff80219179:	66 0f 6a cc          	punpckhdq %xmm4,%xmm1
ffffffff8021917d:	66 0f 62 d4          	punpckldq %xmm4,%xmm2
ffffffff80219181:	66 0f d4 c5          	paddq  %xmm5,%xmm0
ffffffff80219185:	66 0f d4 d1          	paddq  %xmm1,%xmm2
ffffffff80219189:	66 0f d4 c2          	paddq  %xmm2,%xmm0
ffffffff8021918d:	66 0f 6f c8          	movdqa %xmm0,%xmm1
ffffffff80219191:	66 0f 73 d9 08       	psrldq $0x8,%xmm1
ffffffff80219196:	66 0f d4 c1          	paddq  %xmm1,%xmm0
ffffffff8021919a:	66 48 0f 7e c0       	movq   %xmm0,%rax
            if((Checksum&0xFF)==0)
ffffffff8021919f:	00 c2                	add    %al,%dl
ffffffff802191a1:	0f 84 29 01 00 00    	je     ffffffff802192d0 <__RME_Lowlvl_Init+0x2b0>
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff802191a7:	48 83 c3 04          	add    $0x4,%rbx
ffffffff802191ab:	49 39 dd             	cmp    %rbx,%r13
ffffffff802191ae:	74 29                	je     ffffffff802191d9 <__RME_Lowlvl_Init+0x1b9>
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff802191b0:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff802191b5:	48 c7 c6 47 c7 21 80 	mov    $0xffffffff8021c747,%rsi
ffffffff802191bc:	48 89 df             	mov    %rbx,%rdi
ffffffff802191bf:	49 89 dc             	mov    %rbx,%r12
ffffffff802191c2:	e8 19 52 ff ff       	call   ffffffff8020e3e0 <_RME_Memcmp>
ffffffff802191c7:	48 85 c0             	test   %rax,%rax
ffffffff802191ca:	0f 84 20 ff ff ff    	je     ffffffff802190f0 <__RME_Lowlvl_Init+0xd0>
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff802191d0:	48 83 c3 04          	add    $0x4,%rbx
ffffffff802191d4:	49 39 dd             	cmp    %rbx,%r13
ffffffff802191d7:	75 d7                	jne    ffffffff802191b0 <__RME_Lowlvl_Init+0x190>
{
ffffffff802191d9:	48 bb 00 00 0e 00 00 	movabs $0xffff8000000e0000,%rbx
ffffffff802191e0:	80 ff ff 
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff802191e3:	49 bd e0 ff 0f 00 00 	movabs $0xffff8000000fffe0,%r13
ffffffff802191ea:	80 ff ff 
ffffffff802191ed:	eb 0e                	jmp    ffffffff802191fd <__RME_Lowlvl_Init+0x1dd>
ffffffff802191ef:	90                   	nop
ffffffff802191f0:	48 83 c3 04          	add    $0x4,%rbx
ffffffff802191f4:	4c 39 eb             	cmp    %r13,%rbx
ffffffff802191f7:	0f 84 3d 06 00 00    	je     ffffffff8021983a <__RME_Lowlvl_Init+0x81a>
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff802191fd:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80219202:	48 c7 c6 47 c7 21 80 	mov    $0xffffffff8021c747,%rsi
ffffffff80219209:	48 89 df             	mov    %rbx,%rdi
ffffffff8021920c:	49 89 dc             	mov    %rbx,%r12
ffffffff8021920f:	e8 cc 51 ff ff       	call   ffffffff8020e3e0 <_RME_Memcmp>
ffffffff80219214:	48 85 c0             	test   %rax,%rax
ffffffff80219217:	75 d7                	jne    ffffffff802191f0 <__RME_Lowlvl_Init+0x1d0>
                Checksum+=Pos[Count+Check_Cnt];
ffffffff80219219:	f3 0f 6f 13          	movdqu (%rbx),%xmm2
ffffffff8021921d:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff80219221:	66 0f ef e4          	pxor   %xmm4,%xmm4
ffffffff80219225:	0f b6 43 11          	movzbl 0x11(%rbx),%eax
ffffffff80219229:	0f b6 53 10          	movzbl 0x10(%rbx),%edx
ffffffff8021922d:	66 0f 6f da          	movdqa %xmm2,%xmm3
ffffffff80219231:	66 0f 68 d0          	punpckhbw %xmm0,%xmm2
ffffffff80219235:	66 0f 60 d8          	punpcklbw %xmm0,%xmm3
ffffffff80219239:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021923d:	66 0f 6f ea          	movdqa %xmm2,%xmm5
ffffffff80219241:	48 01 c2             	add    %rax,%rdx
ffffffff80219244:	66 0f 6f cb          	movdqa %xmm3,%xmm1
ffffffff80219248:	66 0f 69 d8          	punpckhwd %xmm0,%xmm3
ffffffff8021924c:	66 0f 61 e8          	punpcklwd %xmm0,%xmm5
ffffffff80219250:	0f b6 43 12          	movzbl 0x12(%rbx),%eax
ffffffff80219254:	66 0f 61 c8          	punpcklwd %xmm0,%xmm1
ffffffff80219258:	66 0f 69 d0          	punpckhwd %xmm0,%xmm2
ffffffff8021925c:	66 0f 6f f1          	movdqa %xmm1,%xmm6
ffffffff80219260:	66 0f 6f c1          	movdqa %xmm1,%xmm0
ffffffff80219264:	66 0f 6f cb          	movdqa %xmm3,%xmm1
ffffffff80219268:	48 01 c2             	add    %rax,%rdx
ffffffff8021926b:	66 0f 6a cc          	punpckhdq %xmm4,%xmm1
ffffffff8021926f:	66 0f 62 dc          	punpckldq %xmm4,%xmm3
ffffffff80219273:	66 0f 6a f4          	punpckhdq %xmm4,%xmm6
ffffffff80219277:	0f b6 43 13          	movzbl 0x13(%rbx),%eax
ffffffff8021927b:	66 0f d4 d9          	paddq  %xmm1,%xmm3
ffffffff8021927f:	66 0f 6f cd          	movdqa %xmm5,%xmm1
ffffffff80219283:	66 0f 62 c4          	punpckldq %xmm4,%xmm0
ffffffff80219287:	66 0f 6a cc          	punpckhdq %xmm4,%xmm1
ffffffff8021928b:	66 0f 62 ec          	punpckldq %xmm4,%xmm5
ffffffff8021928f:	66 0f d4 c6          	paddq  %xmm6,%xmm0
ffffffff80219293:	48 01 c2             	add    %rax,%rdx
ffffffff80219296:	66 0f d4 e9          	paddq  %xmm1,%xmm5
ffffffff8021929a:	66 0f 6f ca          	movdqa %xmm2,%xmm1
ffffffff8021929e:	66 0f d4 c3          	paddq  %xmm3,%xmm0
ffffffff802192a2:	66 0f 6a cc          	punpckhdq %xmm4,%xmm1
ffffffff802192a6:	66 0f 62 d4          	punpckldq %xmm4,%xmm2
ffffffff802192aa:	66 0f d4 c5          	paddq  %xmm5,%xmm0
ffffffff802192ae:	66 0f d4 d1          	paddq  %xmm1,%xmm2
ffffffff802192b2:	66 0f d4 c2          	paddq  %xmm2,%xmm0
ffffffff802192b6:	66 0f 6f c8          	movdqa %xmm0,%xmm1
ffffffff802192ba:	66 0f 73 d9 08       	psrldq $0x8,%xmm1
ffffffff802192bf:	66 0f d4 c1          	paddq  %xmm1,%xmm0
ffffffff802192c3:	66 48 0f 7e c0       	movq   %xmm0,%rax
            if((Checksum&0xFF)==0)
ffffffff802192c8:	00 c2                	add    %al,%dl
ffffffff802192ca:	0f 85 20 ff ff ff    	jne    ffffffff802191f0 <__RME_Lowlvl_Init+0x1d0>
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff802192d0:	49 bf 00 00 00 00 00 	movabs $0xffff800000000000,%r15
ffffffff802192d7:	80 ff ff 
ffffffff802192da:	45 8b 74 24 10       	mov    0x10(%r12),%r14d
ffffffff802192df:	4d 01 fe             	add    %r15,%r14
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;
ffffffff802192e2:	45 8b 6e 04          	mov    0x4(%r14),%r13d
ffffffff802192e6:	49 83 ed 24          	sub    $0x24,%r13
    for(Count=0;Count<Table_Num;Count++)
ffffffff802192ea:	49 c1 ed 02          	shr    $0x2,%r13
ffffffff802192ee:	0f 84 96 00 00 00    	je     ffffffff8021938a <__RME_Lowlvl_Init+0x36a>
ffffffff802192f4:	45 31 e4             	xor    %r12d,%r12d
ffffffff802192f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff802192fe:	00 00 
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff80219300:	43 8b 5c a6 24       	mov    0x24(%r14,%r12,4),%ebx
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff80219305:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021930a:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff8021930f:	4c 01 fb             	add    %r15,%rbx
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff80219312:	48 89 de             	mov    %rbx,%rsi
ffffffff80219315:	e8 06 51 ff ff       	call   ffffffff8020e420 <_RME_Memcpy>
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff8021931a:	48 8d 73 0a          	lea    0xa(%rbx),%rsi
ffffffff8021931e:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff80219323:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    Signature[4]='\0';
ffffffff80219328:	c6 44 24 0a 00       	movb   $0x0,0xa(%rsp)
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff8021932d:	e8 ee 50 ff ff       	call   ffffffff8020e420 <_RME_Memcpy>
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff80219332:	48 8d 73 10          	lea    0x10(%rbx),%rsi
ffffffff80219336:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021933b:	48 8d 7c 24 17       	lea    0x17(%rsp),%rdi
    ID[6]='\0';
ffffffff80219340:	c6 44 24 16 00       	movb   $0x0,0x16(%rsp)
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff80219345:	e8 d6 50 ff ff       	call   ffffffff8020e420 <_RME_Memcpy>
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff8021934a:	48 8d 73 1c          	lea    0x1c(%rbx),%rsi
ffffffff8021934e:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80219353:	48 8d 7c 24 0b       	lea    0xb(%rsp),%rdi
    Table_ID[8]='\0';
ffffffff80219358:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff8021935d:	e8 be 50 ff ff       	call   ffffffff8020e420 <_RME_Memcpy>
        if(_RME_Memcmp(Header->Signature, "APIC", 4)==0)
ffffffff80219362:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80219367:	48 c7 c6 50 c7 21 80 	mov    $0xffffffff8021c750,%rsi
ffffffff8021936e:	48 89 df             	mov    %rbx,%rdi
ffffffff80219371:	e8 6a 50 ff ff       	call   ffffffff8020e3e0 <_RME_Memcmp>
            MADT=(struct RME_X64_ACPI_MADT_Hdr*)Header;
ffffffff80219376:	48 85 c0             	test   %rax,%rax
ffffffff80219379:	48 0f 44 eb          	cmove  %rbx,%rbp
    for(Count=0;Count<Table_Num;Count++)
ffffffff8021937d:	49 83 c4 01          	add    $0x1,%r12
ffffffff80219381:	4d 39 e5             	cmp    %r12,%r13
ffffffff80219384:	0f 85 76 ff ff ff    	jne    ffffffff80219300 <__RME_Lowlvl_Init+0x2e0>
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
ffffffff8021938a:	8b 45 04             	mov    0x4(%rbp),%eax
ffffffff8021938d:	83 f8 2b             	cmp    $0x2b,%eax
ffffffff80219390:	0f 86 ba 00 00 00    	jbe    ffffffff80219450 <__RME_Lowlvl_Init+0x430>
    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff80219396:	8b 55 24             	mov    0x24(%rbp),%edx
    Ptr=MADT->Table;
ffffffff80219399:	48 8d 5d 2c          	lea    0x2c(%rbp),%rbx
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff8021939d:	48 83 e8 2c          	sub    $0x2c,%rax
ffffffff802193a1:	4c 8d 24 03          	lea    (%rbx,%rax,1),%r12
    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff802193a5:	48 89 15 84 c0 00 00 	mov    %rdx,0xc084(%rip)        # ffffffff80225430 <RME_X64_LAPIC_Addr>
    RME_X64_Num_IOAPIC=0;
ffffffff802193ac:	48 c7 05 c9 c0 00 00 	movq   $0x0,0xc0c9(%rip)        # ffffffff80225480 <RME_X64_Num_IOAPIC>
ffffffff802193b3:	00 00 00 00 
    RME_X64_Num_CPU=0;
ffffffff802193b7:	48 c7 05 e6 d0 00 00 	movq   $0x0,0xd0e6(%rip)        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff802193be:	00 00 00 00 
    while(Ptr<End)
ffffffff802193c2:	4c 39 e3             	cmp    %r12,%rbx
ffffffff802193c5:	72 2f                	jb     ffffffff802193f6 <__RME_Lowlvl_Init+0x3d6>
ffffffff802193c7:	e9 84 00 00 00       	jmp    ffffffff80219450 <__RME_Lowlvl_Init+0x430>
ffffffff802193cc:	0f 1f 40 00          	nopl   0x0(%rax)
        switch(Ptr[0])
ffffffff802193d0:	84 c0                	test   %al,%al
ffffffff802193d2:	75 14                	jne    ffffffff802193e8 <__RME_Lowlvl_Init+0x3c8>
                if(Length<sizeof(struct RME_X64_ACPI_MADT_LAPIC_Record))
ffffffff802193d4:	48 83 fd 07          	cmp    $0x7,%rbp
ffffffff802193d8:	76 0e                	jbe    ffffffff802193e8 <__RME_Lowlvl_Init+0x3c8>
                if((LAPIC->Flags&RME_X64_APIC_LAPIC_ENABLED)==0)
ffffffff802193da:	f6 43 04 01          	testb  $0x1,0x4(%rbx)
ffffffff802193de:	0f 85 c5 03 00 00    	jne    ffffffff802197a9 <__RME_Lowlvl_Init+0x789>
ffffffff802193e4:	0f 1f 40 00          	nopl   0x0(%rax)
        Ptr+=Length;
ffffffff802193e8:	48 01 eb             	add    %rbp,%rbx
    while(Ptr<End)
ffffffff802193eb:	4c 39 e3             	cmp    %r12,%rbx
ffffffff802193ee:	73 60                	jae    ffffffff80219450 <__RME_Lowlvl_Init+0x430>
        if((End-Ptr)<2)
ffffffff802193f0:	4c 89 e0             	mov    %r12,%rax
ffffffff802193f3:	48 29 d8             	sub    %rbx,%rax
ffffffff802193f6:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802193fa:	74 54                	je     ffffffff80219450 <__RME_Lowlvl_Init+0x430>
        Length=Ptr[1];
ffffffff802193fc:	0f b6 6b 01          	movzbl 0x1(%rbx),%ebp
        if((End-Ptr)<Length)
ffffffff80219400:	48 39 e8             	cmp    %rbp,%rax
ffffffff80219403:	72 4b                	jb     ffffffff80219450 <__RME_Lowlvl_Init+0x430>
        switch(Ptr[0])
ffffffff80219405:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80219408:	3c 01                	cmp    $0x1,%al
ffffffff8021940a:	0f 84 00 03 00 00    	je     ffffffff80219710 <__RME_Lowlvl_Init+0x6f0>
ffffffff80219410:	3c 02                	cmp    $0x2,%al
ffffffff80219412:	75 bc                	jne    ffffffff802193d0 <__RME_Lowlvl_Init+0x3b0>
                if(Length<sizeof(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record))
ffffffff80219414:	48 83 fd 06          	cmp    $0x6,%rbp
ffffffff80219418:	76 ce                	jbe    ffffffff802193e8 <__RME_Lowlvl_Init+0x3c8>
                RME_Int_Print(OVERRIDE->Bus);
ffffffff8021941a:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
ffffffff8021941e:	e8 1d 48 ff ff       	call   ffffffff8020dc40 <RME_Int_Print>
                RME_Hex_Print(OVERRIDE->Source);
ffffffff80219423:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
ffffffff80219427:	e8 44 49 ff ff       	call   ffffffff8020dd70 <RME_Hex_Print>
                RME_Int_Print(OVERRIDE->GS_Interrupt);
ffffffff8021942c:	0f b6 7b 04          	movzbl 0x4(%rbx),%edi
ffffffff80219430:	e8 0b 48 ff ff       	call   ffffffff8020dc40 <RME_Int_Print>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff80219435:	0f b7 7b 05          	movzwl 0x5(%rbx),%edi
        Ptr+=Length;
ffffffff80219439:	48 01 eb             	add    %rbp,%rbx
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff8021943c:	e8 ff 47 ff ff       	call   ffffffff8020dc40 <RME_Int_Print>
    while(Ptr<End)
ffffffff80219441:	4c 39 e3             	cmp    %r12,%rbx
ffffffff80219444:	72 aa                	jb     ffffffff802193f0 <__RME_Lowlvl_Init+0x3d0>
ffffffff80219446:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021944d:	00 00 00 
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff80219450:	48 c7 c1 48 50 22 80 	mov    $0xffffffff80225048,%rcx
ffffffff80219457:	48 c7 c2 40 50 22 80 	mov    $0xffffffff80225040,%rdx
ffffffff8021945e:	31 ff                	xor    %edi,%edi
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80219460:	bb 01 00 00 00       	mov    $0x1,%ebx
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff80219465:	48 c7 c6 38 50 22 80 	mov    $0xffffffff80225038,%rsi
ffffffff8021946c:	48 c7 c5 58 50 22 80 	mov    $0xffffffff80225058,%rbp
ffffffff80219473:	e8 d1 23 ff ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff80219478:	48 89 05 a1 bb 00 00 	mov    %rax,0xbba1(%rip)        # ffffffff80225020 <RME_X64_Feature>
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;
ffffffff8021947f:	48 8b 05 9a bb 00 00 	mov    0xbb9a(%rip),%rax        # ffffffff80225020 <RME_X64_Feature>
ffffffff80219486:	48 89 05 a3 bb 00 00 	mov    %rax,0xbba3(%rip)        # ffffffff80225030 <RME_X64_Feature+0x10>
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff8021948d:	48 8b 05 8c bb 00 00 	mov    0xbb8c(%rip),%rax        # ffffffff80225020 <RME_X64_Feature>
ffffffff80219494:	48 85 c0             	test   %rax,%rax
ffffffff80219497:	74 3c                	je     ffffffff802194d5 <__RME_Lowlvl_Init+0x4b5>
ffffffff80219499:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
ffffffff802194a0:	48 8d 55 08          	lea    0x8(%rbp),%rdx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][3]));
ffffffff802194a4:	48 8d 4d 10          	lea    0x10(%rbp),%rcx
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff802194a8:	48 89 ee             	mov    %rbp,%rsi
ffffffff802194ab:	48 89 df             	mov    %rbx,%rdi
ffffffff802194ae:	e8 96 23 ff ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff802194b3:	48 89 da             	mov    %rbx,%rdx
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff802194b6:	48 83 c3 01          	add    $0x1,%rbx
ffffffff802194ba:	48 83 c5 20          	add    $0x20,%rbp
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff802194be:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff802194c2:	48 89 82 30 50 22 80 	mov    %rax,-0x7fddafd0(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff802194c9:	48 8b 05 50 bb 00 00 	mov    0xbb50(%rip),%rax        # ffffffff80225020 <RME_X64_Feature>
ffffffff802194d0:	48 39 d8             	cmp    %rbx,%rax
ffffffff802194d3:	73 cb                	jae    ffffffff802194a0 <__RME_Lowlvl_Init+0x480>
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff802194d5:	bb 00 00 00 80       	mov    $0x80000000,%ebx
ffffffff802194da:	48 c7 c1 48 52 22 80 	mov    $0xffffffff80225248,%rcx
ffffffff802194e1:	48 c7 c2 40 52 22 80 	mov    $0xffffffff80225240,%rdx
ffffffff802194e8:	48 c7 c6 38 52 22 80 	mov    $0xffffffff80225238,%rsi
ffffffff802194ef:	48 89 df             	mov    %rbx,%rdi
ffffffff802194f2:	49 c7 c4 58 52 22 80 	mov    $0xffffffff80225258,%r12
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff802194f9:	bd 01 00 00 00       	mov    $0x1,%ebp
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff802194fe:	e8 46 23 ff ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff80219503:	48 89 05 1e bb 00 00 	mov    %rax,0xbb1e(%rip)        # ffffffff80225028 <RME_X64_Feature+0x8>
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;
ffffffff8021950a:	48 8b 05 17 bb 00 00 	mov    0xbb17(%rip),%rax        # ffffffff80225028 <RME_X64_Feature+0x8>
ffffffff80219511:	48 89 05 18 bd 00 00 	mov    %rax,0xbd18(%rip)        # ffffffff80225230 <RME_X64_Feature+0x210>
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80219518:	48 8b 05 09 bb 00 00 	mov    0xbb09(%rip),%rax        # ffffffff80225028 <RME_X64_Feature+0x8>
ffffffff8021951f:	48 39 d8             	cmp    %rbx,%rax
ffffffff80219522:	74 44                	je     ffffffff80219568 <__RME_Lowlvl_Init+0x548>
ffffffff80219524:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80219528:	48 89 ef             	mov    %rbp,%rdi
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
ffffffff8021952b:	49 8d 54 24 08       	lea    0x8(%r12),%rdx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][3]));
ffffffff80219530:	49 8d 4c 24 10       	lea    0x10(%r12),%rcx
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80219535:	4c 89 e6             	mov    %r12,%rsi
ffffffff80219538:	48 09 df             	or     %rbx,%rdi
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff8021953b:	49 83 c4 20          	add    $0x20,%r12
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff8021953f:	e8 05 23 ff ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff80219544:	48 89 ea             	mov    %rbp,%rdx
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80219547:	48 83 c5 01          	add    $0x1,%rbp
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff8021954b:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021954f:	48 89 82 30 52 22 80 	mov    %rax,-0x7fddadd0(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80219556:	48 8b 05 cb ba 00 00 	mov    0xbacb(%rip),%rax        # ffffffff80225028 <RME_X64_Feature+0x8>
ffffffff8021955d:	48 05 00 00 00 80    	add    $0xffffffff80000000,%rax
ffffffff80219563:	48 39 e8             	cmp    %rbp,%rax
ffffffff80219566:	73 c0                	jae    ffffffff80219528 <__RME_Lowlvl_Init+0x508>
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
    /* Detect CPU features */
    __RME_X64_Feature_Get();
    /* Extract memory specifications */
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80219568:	48 8b 05 b9 d1 00 00 	mov    0xd1b9(%rip),%rax        # ffffffff80226728 <RME_X64_MBInfo>
    Info_Cnt=0;
ffffffff8021956f:	45 31 f6             	xor    %r14d,%r14d
    MMap_Cnt=0;
ffffffff80219572:	31 ed                	xor    %ebp,%ebp
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80219574:	44 8b 60 2c          	mov    0x2c(%rax),%r12d
ffffffff80219578:	44 8b 68 30          	mov    0x30(%rax),%r13d
    while(MMap_Cnt<MMap_Length)
ffffffff8021957c:	4d 85 e4             	test   %r12,%r12
ffffffff8021957f:	75 14                	jne    ffffffff80219595 <__RME_Lowlvl_Init+0x575>
ffffffff80219581:	e9 8b 00 00 00       	jmp    ffffffff80219611 <__RME_Lowlvl_Init+0x5f1>
ffffffff80219586:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021958d:	00 00 00 
ffffffff80219590:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80219593:	73 7c                	jae    ffffffff80219611 <__RME_Lowlvl_Init+0x5f1>
        MMap=(struct multiboot_mmap_entry*)(MMap_Addr+MMap_Cnt);
ffffffff80219595:	49 8d 5c 2d 00       	lea    0x0(%r13,%rbp,1),%rbx
        MMap_Cnt+=MMap->size+4;
ffffffff8021959a:	8b 03                	mov    (%rbx),%eax
ffffffff8021959c:	83 c0 04             	add    $0x4,%eax
ffffffff8021959f:	48 01 c5             	add    %rax,%rbp
        if(MMap->type!=1)
ffffffff802195a2:	83 7b 14 01          	cmpl   $0x1,0x14(%rbx)
ffffffff802195a6:	75 e8                	jne    ffffffff80219590 <__RME_Lowlvl_Init+0x570>
        Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff802195a8:	48 8b 05 51 ba 00 00 	mov    0xba51(%rip),%rax        # ffffffff80225000 <RME_X64_Phys_Mem>
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff802195af:	48 8b 53 04          	mov    0x4(%rbx),%rdx
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff802195b3:	48 3d 00 50 22 80    	cmp    $0xffffffff80225000,%rax
ffffffff802195b9:	75 10                	jne    ffffffff802195cb <__RME_Lowlvl_Init+0x5ab>
ffffffff802195bb:	eb 14                	jmp    ffffffff802195d1 <__RME_Lowlvl_Init+0x5b1>
ffffffff802195bd:	0f 1f 00             	nopl   (%rax)
            Trav_Ptr=Trav_Ptr->Next;
ffffffff802195c0:	48 8b 00             	mov    (%rax),%rax
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff802195c3:	48 3d 00 50 22 80    	cmp    $0xffffffff80225000,%rax
ffffffff802195c9:	74 06                	je     ffffffff802195d1 <__RME_Lowlvl_Init+0x5b1>
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
ffffffff802195cb:	48 3b 50 10          	cmp    0x10(%rax),%rdx
ffffffff802195cf:	73 ef                	jae    ffffffff802195c0 <__RME_Lowlvl_Init+0x5a0>
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff802195d1:	4c 89 f1             	mov    %r14,%rcx
        Info_Cnt++;
ffffffff802195d4:	49 83 c6 01          	add    $0x1,%r14
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff802195d8:	48 c1 e1 05          	shl    $0x5,%rcx
ffffffff802195dc:	48 89 91 10 d0 21 80 	mov    %rdx,-0x7fde2ff0(%rcx)
        RME_X64_Mem[Info_Cnt].Length=MMap->len;
ffffffff802195e3:	48 8b 53 0c          	mov    0xc(%rbx),%rdx
ffffffff802195e7:	48 89 91 18 d0 21 80 	mov    %rdx,-0x7fde2fe8(%rcx)
        RME_Hex_Print(MMap->addr);
ffffffff802195ee:	48 8b 7b 04          	mov    0x4(%rbx),%rdi
        __RME_List_Ins(&(RME_X64_Mem[Info_Cnt].Head),Trav_Ptr->Prev,Trav_Ptr);
ffffffff802195f2:	48 8b 40 08          	mov    0x8(%rax),%rax
        RME_Hex_Print(MMap->addr);
ffffffff802195f6:	e8 75 47 ff ff       	call   ffffffff8020dd70 <RME_Hex_Print>
        RME_Hex_Print(MMap->len);
ffffffff802195fb:	48 8b 7b 0c          	mov    0xc(%rbx),%rdi
ffffffff802195ff:	e8 6c 47 ff ff       	call   ffffffff8020dd70 <RME_Hex_Print>
        RME_Hex_Print(MMap->type);
ffffffff80219604:	8b 7b 14             	mov    0x14(%rbx),%edi
ffffffff80219607:	e8 64 47 ff ff       	call   ffffffff8020dd70 <RME_Hex_Print>
    while(MMap_Cnt<MMap_Length)
ffffffff8021960c:	4c 39 e5             	cmp    %r12,%rbp
ffffffff8021960f:	72 84                	jb     ffffffff80219595 <__RME_Lowlvl_Init+0x575>
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff80219611:	48 8b 15 e8 b9 00 00 	mov    0xb9e8(%rip),%rdx        # ffffffff80225000 <RME_X64_Phys_Mem>
ffffffff80219618:	48 89 d0             	mov    %rdx,%rax
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021961b:	48 81 fa 00 50 22 80 	cmp    $0xffffffff80225000,%rdx
ffffffff80219622:	0f 84 f0 01 00 00    	je     ffffffff80219818 <__RME_Lowlvl_Init+0x7f8>
ffffffff80219628:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021962f:	00 
ffffffff80219630:	48 8b 08             	mov    (%rax),%rcx
ffffffff80219633:	48 81 f9 00 50 22 80 	cmp    $0xffffffff80225000,%rcx
ffffffff8021963a:	74 23                	je     ffffffff8021965f <__RME_Lowlvl_Init+0x63f>
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021963c:	48 8b 48 10          	mov    0x10(%rax),%rcx
ffffffff80219640:	48 8b 70 18          	mov    0x18(%rax),%rsi
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr)
ffffffff80219644:	48 8b 38             	mov    (%rax),%rdi
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff80219647:	48 01 ce             	add    %rcx,%rsi
ffffffff8021964a:	48 39 77 10          	cmp    %rsi,0x10(%rdi)
ffffffff8021964e:	0f 82 2c 01 00 00    	jb     ffffffff80219780 <__RME_Lowlvl_Init+0x760>
        Trav_Ptr=Trav_Ptr->Next;
ffffffff80219654:	48 8b 00             	mov    (%rax),%rax
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff80219657:	48 3d 00 50 22 80    	cmp    $0xffffffff80225000,%rax
ffffffff8021965d:	75 d1                	jne    ffffffff80219630 <__RME_Lowlvl_Init+0x610>
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021965f:	31 db                	xor    %ebx,%ebx
ffffffff80219661:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        MMap_Cnt+=((struct __RME_X64_Mem*)(Trav_Ptr))->Length;
ffffffff80219668:	48 03 5a 18          	add    0x18(%rdx),%rbx
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021966c:	48 8b 12             	mov    (%rdx),%rdx
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021966f:	48 81 fa 00 50 22 80 	cmp    $0xffffffff80225000,%rdx
ffffffff80219676:	75 f0                	jne    ffffffff80219668 <__RME_Lowlvl_Init+0x648>
    RME_Hex_Print(MMap_Cnt);
ffffffff80219678:	48 89 df             	mov    %rbx,%rdi
ffffffff8021967b:	e8 f0 46 ff ff       	call   ffffffff8020dd70 <RME_Hex_Print>
    RME_X64_Layout.Kot_Start=(rme_ptr_t)RME_KOT_VA_BASE;
ffffffff80219680:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80219687:	80 ff ff 
ffffffff8021968a:	48 89 05 2f ce 00 00 	mov    %rax,0xce2f(%rip)        # ffffffff802264c0 <RME_X64_Layout>
    Info_Cnt=(MMap_Cnt>3*RME_POW2(RME_PGT_SIZE_1G))?(MMap_Cnt+RME_POW2(RME_PGT_SIZE_1G)):MMap_Cnt;
ffffffff80219691:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
ffffffff80219696:	48 39 d8             	cmp    %rbx,%rax
ffffffff80219699:	73 07                	jae    ffffffff802196a2 <__RME_Lowlvl_Init+0x682>
ffffffff8021969b:	48 81 c3 00 00 00 40 	add    $0x40000000,%rbx
    RME_X64_Layout.Kot_Size=((Info_Cnt>>RME_KOM_SLOT_ORDER)>>RME_WORD_ORDER)+1;
ffffffff802196a2:	48 c1 eb 0a          	shr    $0xa,%rbx
ffffffff802196a6:	48 8d 43 01          	lea    0x1(%rbx),%rax
ffffffff802196aa:	48 89 05 17 ce 00 00 	mov    %rax,0xce17(%rip)        # ffffffff802264c8 <RME_X64_Layout+0x8>
    RME_X64_Layout.PerCPU_Start=RME_ROUND_UP(RME_X64_Layout.Kot_Start+RME_X64_Layout.Kot_Size,RME_PGT_SIZE_4K);
ffffffff802196b1:	48 8b 15 08 ce 00 00 	mov    0xce08(%rip),%rdx        # ffffffff802264c0 <RME_X64_Layout>
ffffffff802196b8:	48 8b 05 09 ce 00 00 	mov    0xce09(%rip),%rax        # ffffffff802264c8 <RME_X64_Layout+0x8>
ffffffff802196bf:	48 8d 84 02 ff 0f 00 	lea    0xfff(%rdx,%rax,1),%rax
ffffffff802196c6:	00 
ffffffff802196c7:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff802196cd:	48 89 05 fc cd 00 00 	mov    %rax,0xcdfc(%rip)        # ffffffff802264d0 <RME_X64_Layout+0x10>
    RME_X64_Layout.PerCPU_Size=2*RME_POW2(RME_PGT_SIZE_4K)*RME_X64_Num_CPU;
ffffffff802196d4:	48 8b 05 cd cd 00 00 	mov    0xcdcd(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff802196db:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff802196df:	48 89 05 f2 cd 00 00 	mov    %rax,0xcdf2(%rip)        # ffffffff802264d8 <RME_X64_Layout+0x18>
    RME_X64_Layout.Stack_Size=RME_X64_Num_CPU<<RME_X64_KSTACK_ORDER;
ffffffff802196e6:	48 8b 05 bb cd 00 00 	mov    0xcdbb(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff802196ed:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff802196f1:	48 89 05 28 d0 00 00 	mov    %rax,0xd028(%rip)        # ffffffff80226720 <RME_X64_Layout+0x260>

    return 0;
}
ffffffff802196f8:	48 83 c4 28          	add    $0x28,%rsp
ffffffff802196fc:	31 c0                	xor    %eax,%eax
ffffffff802196fe:	5b                   	pop    %rbx
ffffffff802196ff:	5d                   	pop    %rbp
ffffffff80219700:	41 5c                	pop    %r12
ffffffff80219702:	41 5d                	pop    %r13
ffffffff80219704:	41 5e                	pop    %r14
ffffffff80219706:	41 5f                	pop    %r15
ffffffff80219708:	c3                   	ret
ffffffff80219709:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_IOAPIC_Record))
ffffffff80219710:	48 83 fd 0b          	cmp    $0xb,%rbp
ffffffff80219714:	0f 86 ce fc ff ff    	jbe    ffffffff802193e8 <__RME_Lowlvl_Init+0x3c8>
                RME_Int_Print(RME_X64_Num_IOAPIC);
ffffffff8021971a:	48 8b 3d 5f bd 00 00 	mov    0xbd5f(%rip),%rdi        # ffffffff80225480 <RME_X64_Num_IOAPIC>
ffffffff80219721:	e8 1a 45 ff ff       	call   ffffffff8020dc40 <RME_Int_Print>
                RME_Hex_Print(IOAPIC->Addr);
ffffffff80219726:	8b 7b 04             	mov    0x4(%rbx),%edi
ffffffff80219729:	e8 42 46 ff ff       	call   ffffffff8020dd70 <RME_Hex_Print>
                RME_Int_Print(IOAPIC->ID);
ffffffff8021972e:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
ffffffff80219732:	e8 09 45 ff ff       	call   ffffffff8020dc40 <RME_Int_Print>
                RME_Int_Print(IOAPIC->Interrupt_Base);
ffffffff80219737:	8b 7b 08             	mov    0x8(%rbx),%edi
ffffffff8021973a:	e8 01 45 ff ff       	call   ffffffff8020dc40 <RME_Int_Print>
                if(RME_X64_Num_IOAPIC!=0)
ffffffff8021973f:	48 8b 05 3a bd 00 00 	mov    0xbd3a(%rip),%rax        # ffffffff80225480 <RME_X64_Num_IOAPIC>
ffffffff80219746:	48 85 c0             	test   %rax,%rax
ffffffff80219749:	75 13                	jne    ffffffff8021975e <__RME_Lowlvl_Init+0x73e>
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
ffffffff8021974b:	48 8b 05 2e bd 00 00 	mov    0xbd2e(%rip),%rax        # ffffffff80225480 <RME_X64_Num_IOAPIC>
ffffffff80219752:	0f b6 53 02          	movzbl 0x2(%rbx),%edx
ffffffff80219756:	48 89 14 c5 40 54 22 	mov    %rdx,-0x7fddabc0(,%rax,8)
ffffffff8021975d:	80 
                RME_X64_Num_IOAPIC++;
ffffffff8021975e:	48 8b 05 1b bd 00 00 	mov    0xbd1b(%rip),%rax        # ffffffff80225480 <RME_X64_Num_IOAPIC>
ffffffff80219765:	48 83 c0 01          	add    $0x1,%rax
ffffffff80219769:	48 89 05 10 bd 00 00 	mov    %rax,0xbd10(%rip)        # ffffffff80225480 <RME_X64_Num_IOAPIC>
                RME_ASSERT(RME_X64_Num_IOAPIC<=RME_X64_IOAPIC_NUM);
ffffffff80219770:	48 8b 05 09 bd 00 00 	mov    0xbd09(%rip),%rax        # ffffffff80225480 <RME_X64_Num_IOAPIC>
                break;
ffffffff80219777:	e9 6c fc ff ff       	jmp    ffffffff802193e8 <__RME_Lowlvl_Init+0x3c8>
ffffffff8021977c:	0f 1f 40 00          	nopl   0x0(%rax)
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff80219780:	48 8b 38             	mov    (%rax),%rdi
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff80219783:	48 8b 30             	mov    (%rax),%rsi
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff80219786:	48 8b 76 18          	mov    0x18(%rsi),%rsi
ffffffff8021978a:	48 03 77 10          	add    0x10(%rdi),%rsi
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021978e:	48 29 ce             	sub    %rcx,%rsi
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff80219791:	48 8b 08             	mov    (%rax),%rcx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff80219794:	48 89 70 18          	mov    %rsi,0x18(%rax)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff80219798:	48 3d 00 50 22 80    	cmp    $0xffffffff80225000,%rax
ffffffff8021979e:	0f 85 8c fe ff ff    	jne    ffffffff80219630 <__RME_Lowlvl_Init+0x610>
ffffffff802197a4:	e9 b6 fe ff ff       	jmp    ffffffff8021965f <__RME_Lowlvl_Init+0x63f>
                RME_Int_Print(RME_X64_Num_CPU);
ffffffff802197a9:	48 8b 3d f8 cc 00 00 	mov    0xccf8(%rip),%rdi        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff802197b0:	e8 8b 44 ff ff       	call   ffffffff8020dc40 <RME_Int_Print>
                RME_Int_Print(LAPIC->APIC_ID);
ffffffff802197b5:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
ffffffff802197b9:	e8 82 44 ff ff       	call   ffffffff8020dc40 <RME_Int_Print>
                RME_X64_CPU_Info[RME_X64_Num_CPU].LAPIC_ID=LAPIC->APIC_ID;
ffffffff802197be:	48 8b 05 e3 cc 00 00 	mov    0xcce3(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff802197c5:	0f b6 53 03          	movzbl 0x3(%rbx),%edx
ffffffff802197c9:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802197cd:	48 89 90 a0 54 22 80 	mov    %rdx,-0x7fddab60(%rax)
                RME_X64_CPU_Info[RME_X64_Num_CPU].Boot_Done=0;
ffffffff802197d4:	48 8b 05 cd cc 00 00 	mov    0xcccd(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff802197db:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802197df:	48 c7 80 a8 54 22 80 	movq   $0x0,-0x7fddab58(%rax)
ffffffff802197e6:	00 00 00 00 
                RME_X64_Num_CPU++;
ffffffff802197ea:	48 8b 05 b7 cc 00 00 	mov    0xccb7(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff802197f1:	48 83 c0 01          	add    $0x1,%rax
ffffffff802197f5:	48 89 05 ac cc 00 00 	mov    %rax,0xccac(%rip)        # ffffffff802264a8 <RME_X64_Num_CPU>
                RME_ASSERT(RME_X64_Num_CPU<=RME_X64_CPU_NUM);
ffffffff802197fc:	48 8b 05 a5 cc 00 00 	mov    0xcca5(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
                break;
ffffffff80219803:	e9 e0 fb ff ff       	jmp    ffffffff802193e8 <__RME_Lowlvl_Init+0x3c8>
        RME_X64_UART_Exist=0;
ffffffff80219808:	48 c7 05 1d cf 00 00 	movq   $0x0,0xcf1d(%rip)        # ffffffff80226730 <RME_X64_UART_Exist>
ffffffff8021980f:	00 00 00 00 
ffffffff80219813:	e9 9b f8 ff ff       	jmp    ffffffff802190b3 <__RME_Lowlvl_Init+0x93>
    RME_Hex_Print(MMap_Cnt);
ffffffff80219818:	31 ff                	xor    %edi,%edi
ffffffff8021981a:	e8 51 45 ff ff       	call   ffffffff8020dd70 <RME_Hex_Print>
    RME_X64_Layout.Kot_Start=(rme_ptr_t)RME_KOT_VA_BASE;
ffffffff8021981f:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80219826:	80 ff ff 
ffffffff80219829:	48 89 05 90 cc 00 00 	mov    %rax,0xcc90(%rip)        # ffffffff802264c0 <RME_X64_Layout>
ffffffff80219830:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80219835:	e9 70 fe ff ff       	jmp    ffffffff802196aa <__RME_Lowlvl_Init+0x68a>
ffffffff8021983a:	e9 40 18 00 00       	jmp    ffffffff8021b07f <__RME_Lowlvl_Init.cold>
ffffffff8021983f:	90                   	nop

ffffffff80219840 <__RME_Pgt_Kom_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Kom_Init(void)
{
ffffffff80219840:	f3 0f 1e fa          	endbr64
ffffffff80219844:	48 83 ec 08          	sub    $0x8,%rsp
    rme_cnt_t PDE_Cnt;
    rme_cnt_t Addr_Cnt;
    struct __RME_X64_Mem* Mem;

    /* Now initialize the kernel object allocation table */
    _RME_Kot_Init(RME_X64_Layout.Kot_Size/sizeof(rme_ptr_t));
ffffffff80219848:	48 8b 3d 79 cc 00 00 	mov    0xcc79(%rip),%rdi        # ffffffff802264c8 <RME_X64_Layout+0x8>
ffffffff8021984f:	48 c1 ef 03          	shr    $0x3,%rdi
ffffffff80219853:	e8 e8 50 ff ff       	call   ffffffff8020e940 <_RME_Kot_Init>
    /* Reset PCID counter */
    RME_X64_PCID_Inc=0;
ffffffff80219858:	66 0f 6f 05 20 33 00 	movdqa 0x3320(%rip),%xmm0        # ffffffff8021cb80 <Table.1+0x200>
ffffffff8021985f:	00 
ffffffff80219860:	48 c7 c1 00 a0 10 80 	mov    $0xffffffff8010a000,%rcx

    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219867:	31 f6                	xor    %esi,%esi
    RME_X64_PCID_Inc=0;
ffffffff80219869:	48 c7 05 9c b7 00 00 	movq   $0x0,0xb79c(%rip)        # ffffffff80225010 <RME_X64_PCID_Inc>
ffffffff80219870:	00 00 00 00 
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219874:	48 c7 c2 00 b0 10 80 	mov    $0xffffffff8010b000,%rdx
    {
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|
ffffffff8021987b:	49 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%r8
ffffffff80219882:	ff 0f 00 
ffffffff80219885:	0f 1f 00             	nopl   (%rax)
ffffffff80219888:	48 8d 82 00 f0 ff 7f 	lea    0x7ffff000(%rdx),%rax
ffffffff8021988f:	48 89 d7             	mov    %rdx,%rdi
ffffffff80219892:	4c 21 c0             	and    %r8,%rax
ffffffff80219895:	48 29 cf             	sub    %rcx,%rdi
ffffffff80219898:	48 0d 03 01 00 00    	or     $0x103,%rax
ffffffff8021989e:	83 e7 10             	and    $0x10,%edi
ffffffff802198a1:	48 89 04 f5 00 98 10 	mov    %rax,-0x7fef6800(,%rsi,8)
ffffffff802198a8:	80 
ffffffff802198a9:	48 89 c8             	mov    %rcx,%rax
ffffffff802198ac:	74 12                	je     ffffffff802198c0 <__RME_Pgt_Kom_Init+0x80>
        		                    RME_X64_MMU_KERN_PML4;

        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff802198ae:	48 8d 41 10          	lea    0x10(%rcx),%rax
ffffffff802198b2:	0f 11 01             	movups %xmm0,(%rcx)
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff802198b5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802198b8:	74 16                	je     ffffffff802198d0 <__RME_Pgt_Kom_Init+0x90>
ffffffff802198ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff802198c0:	0f 11 00             	movups %xmm0,(%rax)
ffffffff802198c3:	48 83 c0 20          	add    $0x20,%rax
ffffffff802198c7:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff802198cb:	48 39 c2             	cmp    %rax,%rdx
ffffffff802198ce:	75 f0                	jne    ffffffff802198c0 <__RME_Pgt_Kom_Init+0x80>
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff802198d0:	48 83 c6 01          	add    $0x1,%rsi
ffffffff802198d4:	48 81 c1 00 10 00 00 	add    $0x1000,%rcx
ffffffff802198db:	48 81 c2 00 10 00 00 	add    $0x1000,%rdx
ffffffff802198e2:	48 81 fe 00 01 00 00 	cmp    $0x100,%rsi
ffffffff802198e9:	75 9d                	jne    ffffffff80219888 <__RME_Pgt_Kom_Init+0x48>
    }

    /* Map in the first 4GB as linear mappings as always, 4 super pages, including the device hole.
     * We need to detect whether the 1GB page is supported. If not, we just map the initial tables
     * in, and we know where they are hard-coded in the assembly file */
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff802198eb:	4c 8b 0d 76 b9 00 00 	mov    0xb976(%rip),%r9        # ffffffff80225268 <RME_X64_Feature+0x248>
    {
        /* Can use 1GB pages */
        RME_DBG_S("\n\rThis CPU have 1GB superpage support");
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802198f2:	4c 8b 05 07 07 ef ff 	mov    -0x10f8f9(%rip),%r8        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802198f9:	48 8b 3d 08 07 ef ff 	mov    -0x10f8f8(%rip),%rdi        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219900:	48 8b 35 09 07 ef ff 	mov    -0x10f8f7(%rip),%rsi        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        /* We need to mark the device hole as unbufferable */
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_ADDR(3*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219907:	48 8b 0d 0a 07 ef ff 	mov    -0x10f8f6(%rip),%rcx        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021990e:	48 8b 15 db 06 ff ff 	mov    -0xf925(%rip),%rdx        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219915:	48 8b 05 dc 06 ff ff 	mov    -0xf924(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff8021991c:	41 f7 c1 00 00 00 04 	test   $0x4000000,%r9d
ffffffff80219923:	0f 84 47 04 00 00    	je     ffffffff80219d70 <__RME_Pgt_Kom_Init+0x530>
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219929:	41 b9 81 00 00 80    	mov    $0x80000081,%r9d
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021992f:	41 80 c8 81          	or     $0x81,%r8b
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219933:	80 ca 81             	or     $0x81,%dl
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219936:	48 0d 81 00 00 40    	or     $0x40000081,%rax
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021993c:	4c 09 ce             	or     %r9,%rsi
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff8021993f:	49 81 c1 18 00 00 40 	add    $0x40000018,%r9
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219946:	48 81 cf 81 00 00 40 	or     $0x40000081,%rdi
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff8021994d:	4c 09 c9             	or     %r9,%rcx
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219950:	48 89 05 a1 06 ff ff 	mov    %rax,-0xf95f(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
    }

    /* Ignore all memory below 4G, but we need to get the size of such memory above 16MB */
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff80219957:	48 8b 05 a2 b6 00 00 	mov    0xb6a2(%rip),%rax        # ffffffff80225000 <RME_X64_Phys_Mem>
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021995e:	4c 89 05 9b 06 ef ff 	mov    %r8,-0x10f965(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219965:	48 89 3d 9c 06 ef ff 	mov    %rdi,-0x10f964(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021996c:	48 89 35 9d 06 ef ff 	mov    %rsi,-0x10f963(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff80219973:	48 89 0d 9e 06 ef ff 	mov    %rcx,-0x10f962(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021997a:	48 89 15 6f 06 ff ff 	mov    %rdx,-0xf991(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219981:	48 3d 00 50 22 80    	cmp    $0xffffffff80225000,%rax
ffffffff80219987:	75 16                	jne    ffffffff8021999f <__RME_Pgt_Kom_Init+0x15f>
ffffffff80219989:	e9 65 04 00 00       	jmp    ffffffff80219df3 <__RME_Pgt_Kom_Init+0x5b3>
ffffffff8021998e:	66 90                	xchg   %ax,%ax
    {
        /* See if this memory segment passes 16MB limit */
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80219990:	48 8b 00             	mov    (%rax),%rax
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219993:	48 3d 00 50 22 80    	cmp    $0xffffffff80225000,%rax
ffffffff80219999:	0f 84 a4 04 00 00    	je     ffffffff80219e43 <__RME_Pgt_Kom_Init+0x603>
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
ffffffff8021999f:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff802199a3:	48 03 50 10          	add    0x10(%rax),%rdx
ffffffff802199a7:	48 81 fa 00 00 00 01 	cmp    $0x1000000,%rdx
ffffffff802199ae:	76 e0                	jbe    ffffffff80219990 <__RME_Pgt_Kom_Init+0x150>
    }

    /* The first Kom1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGT_SIZE_16M));
    /* The raw sizes of kernel memory segment 1 - per CPU area is already aligned so no need to align again */
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff802199b0:	48 8b 15 19 cb 00 00 	mov    0xcb19(%rip),%rdx        # ffffffff802264d0 <RME_X64_Layout+0x10>
ffffffff802199b7:	48 8b 0d 1a cb 00 00 	mov    0xcb1a(%rip),%rcx        # ffffffff802264d8 <RME_X64_Layout+0x18>
ffffffff802199be:	48 01 ca             	add    %rcx,%rdx
ffffffff802199c1:	48 89 15 30 cb 00 00 	mov    %rdx,0xcb30(%rip)        # ffffffff802264f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff802199c8:	48 8b 0d 29 cb 00 00 	mov    0xcb29(%rip),%rcx        # ffffffff802264f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff802199cf:	48 ba 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rdx
ffffffff802199d6:	7f ff ff 
ffffffff802199d9:	48 29 ca             	sub    %rcx,%rdx
ffffffff802199dc:	48 03 50 10          	add    0x10(%rax),%rdx
ffffffff802199e0:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff802199e4:	48 89 15 0d cc 00 00 	mov    %rdx,0xcc0d(%rip)        # ffffffff802265f8 <RME_X64_Layout+0x138>

    /* Add the rest of Kom1 into the array */
    Addr_Cnt=1;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802199eb:	48 3d 00 50 22 80    	cmp    $0xffffffff80225000,%rax
ffffffff802199f1:	0f 84 40 04 00 00    	je     ffffffff80219e37 <__RME_Pgt_Kom_Init+0x5f7>
    Addr_Cnt=1;
ffffffff802199f7:	ba 01 00 00 00       	mov    $0x1,%edx
    {
        /* Add all segments under 4GB to Kom1 */
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
        /* If detected anything above 4GB, then this is not Kom1, exiting */
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff802199fc:	bf ff ff ff ff       	mov    $0xffffffff,%edi
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
        {
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
            RME_ASSERT(0);
        }
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff80219a01:	48 be 00 00 00 00 00 	movabs $0xffff800000000000,%rsi
ffffffff80219a08:	80 ff ff 
ffffffff80219a0b:	eb 4e                	jmp    ffffffff80219a5b <__RME_Pgt_Kom_Init+0x21b>
        if(Mem->Length<RME_POW2(RME_PGT_SIZE_4M))
ffffffff80219a0d:	48 81 78 18 ff ff 3f 	cmpq   $0x3fffff,0x18(%rax)
ffffffff80219a14:	00 
ffffffff80219a15:	76 38                	jbe    ffffffff80219a4f <__RME_Pgt_Kom_Init+0x20f>
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff80219a17:	48 81 c1 ff ff 1f 00 	add    $0x1fffff,%rcx
ffffffff80219a1e:	4c 8d 42 06          	lea    0x6(%rdx),%r8
ffffffff80219a22:	48 81 e1 00 00 e0 ff 	and    $0xffffffffffe00000,%rcx
ffffffff80219a29:	48 01 f1             	add    %rsi,%rcx
ffffffff80219a2c:	4a 89 0c c5 c8 64 22 	mov    %rcx,-0x7fdd9b38(,%r8,8)
ffffffff80219a33:	80 
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff80219a34:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80219a38:	4c 8d 42 26          	lea    0x26(%rdx),%r8
        Addr_Cnt++;
ffffffff80219a3c:	48 83 c2 01          	add    $0x1,%rdx
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff80219a40:	48 81 e1 00 00 e0 ff 	and    $0xffffffffffe00000,%rcx
ffffffff80219a47:	4a 89 0c c5 c8 64 22 	mov    %rcx,-0x7fdd9b38(,%r8,8)
ffffffff80219a4e:	80 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219a4f:	48 3d 00 50 22 80    	cmp    $0xffffffff80225000,%rax
ffffffff80219a55:	0f 84 a3 01 00 00    	je     ffffffff80219bfe <__RME_Pgt_Kom_Init+0x3be>
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80219a5b:	48 8b 00             	mov    (%rax),%rax
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff80219a5e:	48 8b 48 10          	mov    0x10(%rax),%rcx
ffffffff80219a62:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80219a65:	73 a6                	jae    ffffffff80219a0d <__RME_Pgt_Kom_Init+0x1cd>
    }
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff80219a67:	48 89 15 82 ca 00 00 	mov    %rdx,0xca82(%rip)        # ffffffff802264f0 <RME_X64_Layout+0x30>

    /* This is the hole */
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff80219a6e:	48 8d 4a 05          	lea    0x5(%rdx),%rcx
ffffffff80219a72:	48 83 c2 25          	add    $0x25,%rdx
ffffffff80219a76:	48 8b 0c cd c8 64 22 	mov    -0x7fdd9b38(,%rcx,8),%rcx
ffffffff80219a7d:	80 
ffffffff80219a7e:	48 8b 14 d5 c8 64 22 	mov    -0x7fdd9b38(,%rdx,8),%rdx
ffffffff80219a85:	80 
ffffffff80219a86:	48 01 ca             	add    %rcx,%rdx
ffffffff80219a89:	48 89 15 68 cc 00 00 	mov    %rdx,0xcc68(%rip)        # ffffffff802266f8 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff80219a90:	48 8b 35 61 cc 00 00 	mov    0xcc61(%rip),%rsi        # ffffffff802266f8 <RME_X64_Layout+0x238>
ffffffff80219a97:	48 ba 00 00 00 00 01 	movabs $0xffff800100000000,%rdx
ffffffff80219a9e:	80 ff ff 
ffffffff80219aa1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80219aa4:	48 29 f1             	sub    %rsi,%rcx
ffffffff80219aa7:	48 89 0d 52 cc 00 00 	mov    %rcx,0xcc52(%rip)        # ffffffff80226700 <RME_X64_Layout+0x240>

    /* Create kernel page mappings for memory above 4GB - we assume only one segment below 4GB */
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff80219aae:	48 8b 0d 43 ca 00 00 	mov    0xca43(%rip),%rcx        # ffffffff802264f8 <RME_X64_Layout+0x38>
ffffffff80219ab5:	48 89 0d 24 ca 00 00 	mov    %rcx,0xca24(%rip)        # ffffffff802264e0 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff80219abc:	48 89 15 45 cc 00 00 	mov    %rdx,0xcc45(%rip)        # ffffffff80226708 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff80219ac3:	48 c7 05 42 cc 00 00 	movq   $0x0,0xcc42(%rip)        # ffffffff80226710 <RME_X64_Layout+0x250>
ffffffff80219aca:	00 00 00 00 

    /* We have filled the first 4 1GB superpages */
    PML4_Cnt=0;
    PDP_Cnt=3;
    PDE_Cnt=511;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219ace:	48 3d 00 50 22 80    	cmp    $0xffffffff80225000,%rax
ffffffff80219ad4:	0f 84 8f 01 00 00    	je     ffffffff80219c69 <__RME_Pgt_Kom_Init+0x429>
    PDE_Cnt=511;
ffffffff80219ada:	be ff 01 00 00       	mov    $0x1ff,%esi
    PDP_Cnt=3;
ffffffff80219adf:	bf 03 00 00 00       	mov    $0x3,%edi
    PML4_Cnt=0;
ffffffff80219ae4:	45 31 c9             	xor    %r9d,%r9d
                {
                    PDP_Cnt=0;
                    PML4_Cnt++;
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff80219ae7:	49 ba 00 00 00 00 00 	movabs $0x800000000000,%r10
ffffffff80219aee:	80 00 00 
ffffffff80219af1:	49 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%r8
ffffffff80219af8:	ff 0f 00 
ffffffff80219afb:	eb 0f                	jmp    ffffffff80219b0c <__RME_Pgt_Kom_Init+0x2cc>
            RME_X64_Layout.Kom1_Start[0]+=sizeof(rme_ptr_t);
            RME_X64_Layout.Kom1_Size[0]-=sizeof(rme_ptr_t);
            RME_X64_Layout.Kom2_Size+=RME_POW2(RME_PGT_SIZE_2M);
        }

        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80219afd:	48 8b 00             	mov    (%rax),%rax
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219b00:	48 3d 00 50 22 80    	cmp    $0xffffffff80225000,%rax
ffffffff80219b06:	0f 84 5d 01 00 00    	je     ffffffff80219c69 <__RME_Pgt_Kom_Init+0x429>
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219b0c:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff80219b10:	48 81 fa ff ff 3f 00 	cmp    $0x3fffff,%rdx
ffffffff80219b17:	76 e4                	jbe    ffffffff80219afd <__RME_Pgt_Kom_Init+0x2bd>
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80219b19:	48 8b 48 10          	mov    0x10(%rax),%rcx
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff80219b1d:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff80219b21:	48 81 e2 00 00 e0 ff 	and    $0xffffffffffe00000,%rdx
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80219b28:	48 81 c1 ff ff 1f 00 	add    $0x1fffff,%rcx
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff80219b2f:	48 89 50 18          	mov    %rdx,0x18(%rax)
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80219b33:	48 81 e1 00 00 e0 ff 	and    $0xffffffffffe00000,%rcx
ffffffff80219b3a:	48 89 48 10          	mov    %rcx,0x10(%rax)
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff80219b3e:	31 c9                	xor    %ecx,%ecx
ffffffff80219b40:	eb 65                	jmp    ffffffff80219ba7 <__RME_Pgt_Kom_Init+0x367>
            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff80219b42:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80219b46:	4c 8b 1d ab c9 00 00 	mov    0xc9ab(%rip),%r11        # ffffffff802264f8 <RME_X64_Layout+0x38>
ffffffff80219b4d:	48 01 ca             	add    %rcx,%rdx
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219b50:	48 81 c1 00 00 20 00 	add    $0x200000,%rcx
            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff80219b57:	4c 21 c2             	and    %r8,%rdx
ffffffff80219b5a:	48 81 ca 83 01 00 00 	or     $0x183,%rdx
ffffffff80219b61:	49 89 13             	mov    %rdx,(%r11)
            RME_X64_Layout.Kom1_Start[0]+=sizeof(rme_ptr_t);
ffffffff80219b64:	48 8b 15 8d c9 00 00 	mov    0xc98d(%rip),%rdx        # ffffffff802264f8 <RME_X64_Layout+0x38>
ffffffff80219b6b:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80219b6f:	48 89 15 82 c9 00 00 	mov    %rdx,0xc982(%rip)        # ffffffff802264f8 <RME_X64_Layout+0x38>
            RME_X64_Layout.Kom1_Size[0]-=sizeof(rme_ptr_t);
ffffffff80219b76:	48 8b 15 7b ca 00 00 	mov    0xca7b(%rip),%rdx        # ffffffff802265f8 <RME_X64_Layout+0x138>
ffffffff80219b7d:	48 83 ea 08          	sub    $0x8,%rdx
ffffffff80219b81:	48 89 15 70 ca 00 00 	mov    %rdx,0xca70(%rip)        # ffffffff802265f8 <RME_X64_Layout+0x138>
            RME_X64_Layout.Kom2_Size+=RME_POW2(RME_PGT_SIZE_2M);
ffffffff80219b88:	48 8b 15 81 cb 00 00 	mov    0xcb81(%rip),%rdx        # ffffffff80226710 <RME_X64_Layout+0x250>
ffffffff80219b8f:	48 81 c2 00 00 20 00 	add    $0x200000,%rdx
ffffffff80219b96:	48 89 15 73 cb 00 00 	mov    %rdx,0xcb73(%rip)        # ffffffff80226710 <RME_X64_Layout+0x250>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219b9d:	48 3b 48 18          	cmp    0x18(%rax),%rcx
ffffffff80219ba1:	0f 83 56 ff ff ff    	jae    ffffffff80219afd <__RME_Pgt_Kom_Init+0x2bd>
            PDE_Cnt++;
ffffffff80219ba7:	48 83 c6 01          	add    $0x1,%rsi
            if(PDE_Cnt==512)
ffffffff80219bab:	48 81 fe 00 02 00 00 	cmp    $0x200,%rsi
ffffffff80219bb2:	75 8e                	jne    ffffffff80219b42 <__RME_Pgt_Kom_Init+0x302>
                PDP_Cnt++;
ffffffff80219bb4:	48 83 c7 01          	add    $0x1,%rdi
                if(PDP_Cnt==512)
ffffffff80219bb8:	48 81 ff 00 02 00 00 	cmp    $0x200,%rdi
ffffffff80219bbf:	75 06                	jne    ffffffff80219bc7 <__RME_Pgt_Kom_Init+0x387>
                    PML4_Cnt++;
ffffffff80219bc1:	49 83 c1 01          	add    $0x1,%r9
                    PDP_Cnt=0;
ffffffff80219bc5:	31 ff                	xor    %edi,%edi
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff80219bc7:	48 8b 15 2a c9 00 00 	mov    0xc92a(%rip),%rdx        # ffffffff802264f8 <RME_X64_Layout+0x38>
ffffffff80219bce:	4c 89 ce             	mov    %r9,%rsi
ffffffff80219bd1:	48 c1 e6 09          	shl    $0x9,%rsi
ffffffff80219bd5:	48 8d b4 37 00 02 00 	lea    0x200(%rdi,%rsi,1),%rsi
ffffffff80219bdc:	00 
ffffffff80219bdd:	4c 01 d2             	add    %r10,%rdx
ffffffff80219be0:	4c 21 c2             	and    %r8,%rdx
ffffffff80219be3:	48 0b 14 f5 00 90 10 	or     -0x7fef7000(,%rsi,8),%rdx
ffffffff80219bea:	80 
ffffffff80219beb:	48 83 ca 01          	or     $0x1,%rdx
ffffffff80219bef:	48 89 14 f5 00 90 10 	mov    %rdx,-0x7fef7000(,%rsi,8)
ffffffff80219bf6:	80 
                PDE_Cnt=0;
ffffffff80219bf7:	31 f6                	xor    %esi,%esi
ffffffff80219bf9:	e9 44 ff ff ff       	jmp    ffffffff80219b42 <__RME_Pgt_Kom_Init+0x302>
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff80219bfe:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff80219c02:	48 89 15 e7 c8 00 00 	mov    %rdx,0xc8e7(%rip)        # ffffffff802264f0 <RME_X64_Layout+0x30>
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff80219c09:	48 8d 50 06          	lea    0x6(%rax),%rdx
ffffffff80219c0d:	48 83 c0 26          	add    $0x26,%rax
ffffffff80219c11:	48 8b 14 d5 c8 64 22 	mov    -0x7fdd9b38(,%rdx,8),%rdx
ffffffff80219c18:	80 
ffffffff80219c19:	48 8b 04 c5 c8 64 22 	mov    -0x7fdd9b38(,%rax,8),%rax
ffffffff80219c20:	80 
ffffffff80219c21:	48 01 d0             	add    %rdx,%rax
ffffffff80219c24:	48 89 05 cd ca 00 00 	mov    %rax,0xcacd(%rip)        # ffffffff802266f8 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff80219c2b:	48 8b 0d c6 ca 00 00 	mov    0xcac6(%rip),%rcx        # ffffffff802266f8 <RME_X64_Layout+0x238>
ffffffff80219c32:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff80219c39:	80 ff ff 
ffffffff80219c3c:	48 89 c2             	mov    %rax,%rdx
ffffffff80219c3f:	48 29 ca             	sub    %rcx,%rdx
ffffffff80219c42:	48 89 15 b7 ca 00 00 	mov    %rdx,0xcab7(%rip)        # ffffffff80226700 <RME_X64_Layout+0x240>
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff80219c49:	48 8b 15 a8 c8 00 00 	mov    0xc8a8(%rip),%rdx        # ffffffff802264f8 <RME_X64_Layout+0x38>
ffffffff80219c50:	48 89 15 89 c8 00 00 	mov    %rdx,0xc889(%rip)        # ffffffff802264e0 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff80219c57:	48 89 05 aa ca 00 00 	mov    %rax,0xcaaa(%rip)        # ffffffff80226708 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff80219c5e:	48 c7 05 a7 ca 00 00 	movq   $0x0,0xcaa7(%rip)        # ffffffff80226710 <RME_X64_Layout+0x250>
ffffffff80219c65:	00 00 00 00 
                PDE_Cnt=0;
ffffffff80219c69:	48 b8 00 18 10 00 00 	movabs $0xffff800000101800,%rax
ffffffff80219c70:	80 ff ff 
ffffffff80219c73:	48 be 00 80 00 80 ff 	movabs $0x7fff80008000,%rsi
ffffffff80219c7a:	7f 00 00 
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219c7d:	48 b9 00 20 10 00 00 	movabs $0xffff800000102000,%rcx
ffffffff80219c84:	80 ff ff 
ffffffff80219c87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80219c8e:	00 00 
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff80219c90:	48 8b 14 06          	mov    (%rsi,%rax,1),%rdx
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219c94:	48 83 c0 08          	add    $0x8,%rax
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff80219c98:	48 89 50 f8          	mov    %rdx,-0x8(%rax)
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219c9c:	48 39 c8             	cmp    %rcx,%rax
ffffffff80219c9f:	75 ef                	jne    ffffffff80219c90 <__RME_Pgt_Kom_Init+0x450>

    /* Page table allocation finished. Now need to align Kom1 to 2MB page boundary */
    RME_X64_Layout.Kom1_Start[0]=RME_ROUND_UP(RME_X64_Layout.Kom1_Start[0],RME_PGT_SIZE_2M);
ffffffff80219ca1:	48 8b 05 50 c8 00 00 	mov    0xc850(%rip),%rax        # ffffffff802264f8 <RME_X64_Layout+0x38>
ffffffff80219ca8:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80219cae:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80219cb4:	48 89 05 3d c8 00 00 	mov    %rax,0xc83d(%rip)        # ffffffff802264f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Size[0]-1,RME_PGT_SIZE_2M);
ffffffff80219cbb:	48 8b 05 36 c9 00 00 	mov    0xc936(%rip),%rax        # ffffffff802265f8 <RME_X64_Layout+0x138>
ffffffff80219cc2:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80219cc6:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80219ccc:	48 89 05 25 c9 00 00 	mov    %rax,0xc925(%rip)        # ffffffff802265f8 <RME_X64_Layout+0x138>

    /* All memory is mapped. Now figure out the size of kernel stacks */
    RME_X64_Layout.Kpgtbl_Size=RME_X64_Layout.Kom1_Start[0]-RME_X64_Layout.Kpgtbl_Start;
ffffffff80219cd3:	48 8b 05 1e c8 00 00 	mov    0xc81e(%rip),%rax        # ffffffff802264f8 <RME_X64_Layout+0x38>
ffffffff80219cda:	48 8b 15 ff c7 00 00 	mov    0xc7ff(%rip),%rdx        # ffffffff802264e0 <RME_X64_Layout+0x20>
ffffffff80219ce1:	48 29 d0             	sub    %rdx,%rax
ffffffff80219ce4:	48 89 05 fd c7 00 00 	mov    %rax,0xc7fd(%rip)        # ffffffff802264e8 <RME_X64_Layout+0x28>

    /* See if we are allocating the stack from Kom2 or Kom1 */
    if(RME_X64_Layout.Kom2_Size==0)
ffffffff80219ceb:	48 8b 05 1e ca 00 00 	mov    0xca1e(%rip),%rax        # ffffffff80226710 <RME_X64_Layout+0x250>
ffffffff80219cf2:	48 85 c0             	test   %rax,%rax
ffffffff80219cf5:	0f 85 a3 00 00 00    	jne    ffffffff80219d9e <__RME_Pgt_Kom_Init+0x55e>
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Start[0]+RME_X64_Layout.Kom1_Size[0]-1,RME_X64_KSTACK_ORDER);
ffffffff80219cfb:	48 8b 15 f6 c7 00 00 	mov    0xc7f6(%rip),%rdx        # ffffffff802264f8 <RME_X64_Layout+0x38>
ffffffff80219d02:	48 8b 05 ef c8 00 00 	mov    0xc8ef(%rip),%rax        # ffffffff802265f8 <RME_X64_Layout+0x138>
ffffffff80219d09:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff80219d0e:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff80219d14:	48 89 05 fd c9 00 00 	mov    %rax,0xc9fd(%rip)        # ffffffff80226718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80219d1b:	48 8b 15 fe c9 00 00 	mov    0xc9fe(%rip),%rdx        # ffffffff80226720 <RME_X64_Layout+0x260>
ffffffff80219d22:	48 8b 05 ef c9 00 00 	mov    0xc9ef(%rip),%rax        # ffffffff80226718 <RME_X64_Layout+0x258>
ffffffff80219d29:	48 29 d0             	sub    %rdx,%rax
ffffffff80219d2c:	48 89 05 e5 c9 00 00 	mov    %rax,0xc9e5(%rip)        # ffffffff80226718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom1_Start[0];
ffffffff80219d33:	48 8b 05 de c9 00 00 	mov    0xc9de(%rip),%rax        # ffffffff80226718 <RME_X64_Layout+0x258>
ffffffff80219d3a:	48 8b 15 b7 c7 00 00 	mov    0xc7b7(%rip),%rdx        # ffffffff802264f8 <RME_X64_Layout+0x38>
ffffffff80219d41:	48 29 d0             	sub    %rdx,%rax
ffffffff80219d44:	48 89 05 ad c8 00 00 	mov    %rax,0xc8ad(%rip)        # ffffffff802265f8 <RME_X64_Layout+0x138>
    RME_DBG_U(RME_X64_Layout.PerCPU_Size);
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Start);
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Size);
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219d4b:	48 8b 05 9e c7 00 00 	mov    0xc79e(%rip),%rax        # ffffffff802264f0 <RME_X64_Layout+0x30>
ffffffff80219d52:	48 85 c0             	test   %rax,%rax
ffffffff80219d55:	74 12                	je     ffffffff80219d69 <__RME_Pgt_Kom_Init+0x529>
ffffffff80219d57:	31 c0                	xor    %eax,%eax
ffffffff80219d59:	48 8b 15 90 c7 00 00 	mov    0xc790(%rip),%rdx        # ffffffff802264f0 <RME_X64_Layout+0x30>
ffffffff80219d60:	48 83 c0 01          	add    $0x1,%rax
ffffffff80219d64:	48 39 d0             	cmp    %rdx,%rax
ffffffff80219d67:	72 f0                	jb     ffffffff80219d59 <__RME_Pgt_Kom_Init+0x519>
    RME_DBG_U(RME_X64_Layout.Stack_Start);
    RME_DBG_S("\n\rStack_Size:      0x");
    RME_DBG_U(RME_X64_Layout.Stack_Size);

    return 0;
}
ffffffff80219d69:	31 c0                	xor    %eax,%eax
ffffffff80219d6b:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80219d6f:	c3                   	ret
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff80219d70:	49 81 c8 01 40 10 00 	or     $0x104001,%r8
        RME_X64_Kpgt.PDP[0][1]|=0x105000|RME_X64_MMU_P;
ffffffff80219d77:	48 81 cf 01 50 10 00 	or     $0x105001,%rdi
        RME_X64_Kpgt.PDP[0][2]|=0x106000|RME_X64_MMU_P;
ffffffff80219d7e:	48 81 ce 01 60 10 00 	or     $0x106001,%rsi
        RME_X64_Kpgt.PDP[0][3]|=0x107000|RME_X64_MMU_PCD|RME_X64_MMU_PWT|RME_X64_MMU_P;
ffffffff80219d85:	48 81 c9 19 70 10 00 	or     $0x107019,%rcx
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
ffffffff80219d8c:	48 81 ca 01 40 10 00 	or     $0x104001,%rdx
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80219d93:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff80219d99:	e9 b2 fb ff ff       	jmp    ffffffff80219950 <__RME_Pgt_Kom_Init+0x110>
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size-1,RME_X64_KSTACK_ORDER);
ffffffff80219d9e:	48 8b 15 63 c9 00 00 	mov    0xc963(%rip),%rdx        # ffffffff80226708 <RME_X64_Layout+0x248>
ffffffff80219da5:	48 8b 05 64 c9 00 00 	mov    0xc964(%rip),%rax        # ffffffff80226710 <RME_X64_Layout+0x250>
ffffffff80219dac:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff80219db1:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff80219db7:	48 89 05 5a c9 00 00 	mov    %rax,0xc95a(%rip)        # ffffffff80226718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80219dbe:	48 8b 15 5b c9 00 00 	mov    0xc95b(%rip),%rdx        # ffffffff80226720 <RME_X64_Layout+0x260>
ffffffff80219dc5:	48 8b 05 4c c9 00 00 	mov    0xc94c(%rip),%rax        # ffffffff80226718 <RME_X64_Layout+0x258>
ffffffff80219dcc:	48 29 d0             	sub    %rdx,%rax
ffffffff80219dcf:	48 89 05 42 c9 00 00 	mov    %rax,0xc942(%rip)        # ffffffff80226718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
ffffffff80219dd6:	48 8b 05 3b c9 00 00 	mov    0xc93b(%rip),%rax        # ffffffff80226718 <RME_X64_Layout+0x258>
ffffffff80219ddd:	48 8b 15 24 c9 00 00 	mov    0xc924(%rip),%rdx        # ffffffff80226708 <RME_X64_Layout+0x248>
ffffffff80219de4:	48 29 d0             	sub    %rdx,%rax
ffffffff80219de7:	48 89 05 22 c9 00 00 	mov    %rax,0xc922(%rip)        # ffffffff80226710 <RME_X64_Layout+0x250>
ffffffff80219dee:	e9 58 ff ff ff       	jmp    ffffffff80219d4b <__RME_Pgt_Kom_Init+0x50b>
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219df3:	48 8b 05 d6 c6 00 00 	mov    0xc6d6(%rip),%rax        # ffffffff802264d0 <RME_X64_Layout+0x10>
ffffffff80219dfa:	48 8b 15 d7 c6 00 00 	mov    0xc6d7(%rip),%rdx        # ffffffff802264d8 <RME_X64_Layout+0x18>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219e01:	48 b9 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rcx
ffffffff80219e08:	7f ff ff 
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219e0b:	48 01 d0             	add    %rdx,%rax
ffffffff80219e0e:	48 89 05 e3 c6 00 00 	mov    %rax,0xc6e3(%rip)        # ffffffff802264f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219e15:	48 8b 05 f4 b1 00 00 	mov    0xb1f4(%rip),%rax        # ffffffff80225010 <RME_X64_PCID_Inc>
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80219e1c:	48 8b 15 d5 c6 00 00 	mov    0xc6d5(%rip),%rdx        # ffffffff802264f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219e23:	48 03 05 ee b1 00 00 	add    0xb1ee(%rip),%rax        # ffffffff80225018 <RME_X64_PCID_Inc+0x8>
ffffffff80219e2a:	48 01 c8             	add    %rcx,%rax
ffffffff80219e2d:	48 29 d0             	sub    %rdx,%rax
ffffffff80219e30:	48 89 05 c1 c7 00 00 	mov    %rax,0xc7c1(%rip)        # ffffffff802265f8 <RME_X64_Layout+0x138>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219e37:	31 c0                	xor    %eax,%eax
ffffffff80219e39:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80219e3e:	e9 bf fd ff ff       	jmp    ffffffff80219c02 <__RME_Pgt_Kom_Init+0x3c2>
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219e43:	48 8b 05 86 c6 00 00 	mov    0xc686(%rip),%rax        # ffffffff802264d0 <RME_X64_Layout+0x10>
ffffffff80219e4a:	48 8b 15 87 c6 00 00 	mov    0xc687(%rip),%rdx        # ffffffff802264d8 <RME_X64_Layout+0x18>
ffffffff80219e51:	48 01 d0             	add    %rdx,%rax
ffffffff80219e54:	48 89 05 9d c6 00 00 	mov    %rax,0xc69d(%rip)        # ffffffff802264f8 <RME_X64_Layout+0x38>
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80219e5b:	48 8b 15 96 c6 00 00 	mov    0xc696(%rip),%rdx        # ffffffff802264f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219e62:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff80219e69:	7f ff ff 
ffffffff80219e6c:	48 29 d0             	sub    %rdx,%rax
ffffffff80219e6f:	48 03 05 9a b1 00 00 	add    0xb19a(%rip),%rax        # ffffffff80225010 <RME_X64_PCID_Inc>
ffffffff80219e76:	48 03 05 9b b1 00 00 	add    0xb19b(%rip),%rax        # ffffffff80225018 <RME_X64_PCID_Inc+0x8>
ffffffff80219e7d:	48 89 05 74 c7 00 00 	mov    %rax,0xc774(%rip)        # ffffffff802265f8 <RME_X64_Layout+0x138>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219e84:	eb b1                	jmp    ffffffff80219e37 <__RME_Pgt_Kom_Init+0x5f7>
ffffffff80219e86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80219e8d:	00 00 00 

ffffffff80219e90 <__RME_SMP_Low_Level_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
rme_ptr_t __RME_SMP_Low_Level_Init(void)
{
ffffffff80219e90:	f3 0f 1e fa          	endbr64
ffffffff80219e94:	53                   	push   %rbx
    struct RME_CPU_Local* CPU_Local;

    /* Initialize all vector tables */
    __RME_X64_CPU_Local_Init();
ffffffff80219e95:	e8 c6 b4 ff ff       	call   ffffffff80215360 <__RME_X64_CPU_Local_Init>
    /* Initialize LAPIC */
    __RME_X64_LAPIC_Init();
ffffffff80219e9a:	e8 b1 b3 ff ff       	call   ffffffff80215250 <__RME_X64_LAPIC_Init>

    /* Check to see if we are booting this correctly */
    CPU_Local=RME_CPU_LOCAL();
ffffffff80219e9f:	e8 9b 19 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80219ea4:	48 89 c3             	mov    %rax,%rbx
    RME_ASSERT(CPU_Local->CPUID==RME_X64_CPU_Cnt);
ffffffff80219ea7:	48 8b 05 f2 c5 00 00 	mov    0xc5f2(%rip),%rax        # ffffffff802264a0 <RME_X64_CPU_Cnt>

    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
ffffffff80219eae:	48 8b 15 eb c5 00 00 	mov    0xc5eb(%rip),%rdx        # ffffffff802264a0 <RME_X64_CPU_Cnt>
ffffffff80219eb5:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80219eb9:	48 c7 82 a8 54 22 80 	movq   $0x1,-0x7fddab58(%rdx)
ffffffff80219ec0:	01 00 00 00 
    /* Spin until the global CPU counter is zero again, which means the booting
     * processor has done booting and we can proceed now */
    while(RME_X64_CPU_Cnt!=0);
ffffffff80219ec4:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80219ec8:	48 8b 15 d1 c5 00 00 	mov    0xc5d1(%rip),%rdx        # ffffffff802264a0 <RME_X64_CPU_Cnt>
ffffffff80219ecf:	48 85 d2             	test   %rdx,%rdx
ffffffff80219ed2:	75 f4                	jne    ffffffff80219ec8 <__RME_SMP_Low_Level_Init+0x38>
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgt_Set(rme_ptr_t Pgt)
{
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff80219ed4:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff80219edb:	80 00 00 
    __RME_Pgt_Set(RME_CAP_GETOBJ((CPU_Local->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff80219ede:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffff80219ee2:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80219ee6:	48 8b 40 30          	mov    0x30(%rax),%rax
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff80219eea:	48 03 78 18          	add    0x18(%rax),%rdi
ffffffff80219eee:	e8 b6 19 ff ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
    __RME_Enter_User_Mode(0, RME_X64_USTACK(CPU_Local->CPUID), CPU_Local->CPUID);
ffffffff80219ef3:	48 8b 13             	mov    (%rbx),%rdx
ffffffff80219ef6:	31 ff                	xor    %edi,%edi
ffffffff80219ef8:	48 8d b2 01 04 00 00 	lea    0x401(%rdx),%rsi
ffffffff80219eff:	48 c1 e6 0b          	shl    $0xb,%rsi
ffffffff80219f03:	e8 b8 19 ff ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
}
ffffffff80219f08:	31 c0                	xor    %eax,%eax
ffffffff80219f0a:	5b                   	pop    %rbx
ffffffff80219f0b:	c3                   	ret
ffffffff80219f0c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80219f10 <__RME_Boot>:
{
ffffffff80219f10:	f3 0f 1e fa          	endbr64
ffffffff80219f14:	41 57                	push   %r15
ffffffff80219f16:	41 56                	push   %r14
ffffffff80219f18:	41 55                	push   %r13
ffffffff80219f1a:	41 54                	push   %r12
ffffffff80219f1c:	55                   	push   %rbp
    for(Count=0;Count<16;Count++)
ffffffff80219f1d:	31 ed                	xor    %ebp,%ebp
{
ffffffff80219f1f:	53                   	push   %rbx
ffffffff80219f20:	48 83 ec 28          	sub    $0x28,%rsp
    RME_X64_CPU_Cnt=0;
ffffffff80219f24:	48 c7 05 71 c5 00 00 	movq   $0x0,0xc571(%rip)        # ffffffff802264a0 <RME_X64_CPU_Cnt>
ffffffff80219f2b:	00 00 00 00 
    __RME_X64_CPU_Local_Init();
ffffffff80219f2f:	e8 2c b4 ff ff       	call   ffffffff80215360 <__RME_X64_CPU_Local_Init>
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80219f34:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80219f39:	bf 21 00 00 00       	mov    $0x21,%edi
    __RME_X64_LAPIC_Init();
ffffffff80219f3e:	e8 0d b3 ff ff       	call   ffffffff80215250 <__RME_X64_LAPIC_Init>
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80219f43:	e8 c2 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff80219f48:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80219f4d:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219f52:	e8 b3 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x11);
ffffffff80219f57:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80219f5c:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80219f61:	e8 a4 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, RME_X64_INT_USER(0));
ffffffff80219f66:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80219f6b:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219f70:	e8 95 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 1<<2);
ffffffff80219f75:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80219f7a:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219f7f:	e8 86 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0x3);
ffffffff80219f84:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80219f89:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219f8e:	e8 77 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x11);
ffffffff80219f93:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80219f98:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80219f9d:	e8 68 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, RME_X64_INT_USER(8));
ffffffff80219fa2:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff80219fa7:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219fac:	e8 59 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 2);
ffffffff80219fb1:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80219fb6:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219fbb:	e8 4a 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0x3);
ffffffff80219fc0:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80219fc5:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219fca:	e8 3b 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x68);
ffffffff80219fcf:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80219fd4:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80219fd9:	e8 2c 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x0A);
ffffffff80219fde:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80219fe3:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80219fe8:	e8 1d 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x68);
ffffffff80219fed:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80219ff2:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80219ff7:	e8 0e 18 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x0A);
ffffffff80219ffc:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff8021a001:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8021a006:	e8 ff 17 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff8021a00b:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8021a010:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021a015:	e8 f0 17 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff8021a01a:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8021a01f:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021a024:	e8 e1 17 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff8021a029:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8021a030:	80 ff ff 
    Max_Int=((Max_Int>>16)&0xFF);
ffffffff8021a033:	0f b6 50 12          	movzbl 0x12(%rax),%edx
ffffffff8021a037:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,0);
ffffffff8021a03e:	8d 54 12 11          	lea    0x11(%rdx,%rdx,1),%edx
ffffffff8021a042:	89 10                	mov    %edx,(%rax)
    __RME_X64_SMP_Init();
ffffffff8021a044:	e8 b7 ed ff ff       	call   ffffffff80218e00 <__RME_X64_SMP_Init>
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff8021a049:	4c 8b 3d a8 c4 00 00 	mov    0xc4a8(%rip),%r15        # ffffffff802264f8 <RME_X64_Layout+0x38>
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff8021a050:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff8021a055:	31 ff                	xor    %edi,%edi
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff8021a057:	49 8d 9f 00 00 00 02 	lea    0x2000000(%r15),%rbx
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff8021a05e:	48 89 de             	mov    %rbx,%rsi
ffffffff8021a061:	e8 4a 56 ff ff       	call   ffffffff8020f6b0 <_RME_Cpt_Boot_Init>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff8021a066:	41 b8 11 20 00 00    	mov    $0x2011,%r8d
ffffffff8021a06c:	31 f6                	xor    %esi,%esi
ffffffff8021a06e:	48 89 df             	mov    %rbx,%rdi
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(16));
ffffffff8021a071:	49 8d 8f 00 10 00 02 	lea    0x2001000(%r15),%rcx
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff8021a078:	49 81 c7 ff 2f 08 02 	add    $0x2082fff,%r15
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff8021a07f:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021a084:	e8 e7 56 ff ff       	call   ffffffff8020f770 <_RME_Cpt_Boot_Crt>
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021a089:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff8021a08f:	45 31 c0             	xor    %r8d,%r8d
ffffffff8021a092:	31 d2                	xor    %edx,%edx
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff8021a094:	49 81 e7 00 f0 ff ff 	and    $0xfffffffffffff000,%r15
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021a09b:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a0a0:	48 89 df             	mov    %rbx,%rdi
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff8021a0a3:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021a0a8:	4c 89 f9             	mov    %r15,%rcx
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff8021a0ab:	4d 8d a7 00 10 00 00 	lea    0x1000(%r15),%r12
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8021a0b2:	6a 09                	push   $0x9
ffffffff8021a0b4:	6a 27                	push   $0x27
ffffffff8021a0b6:	e8 a5 58 ff ff       	call   ffffffff8020f960 <_RME_Pgt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff8021a0bb:	41 5a                	pop    %r10
ffffffff8021a0bd:	41 5b                	pop    %r11
ffffffff8021a0bf:	90                   	nop
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff8021a0c0:	6a 09                	push   $0x9
ffffffff8021a0c2:	49 89 ed             	mov    %rbp,%r13
ffffffff8021a0c5:	48 83 c5 01          	add    $0x1,%rbp
ffffffff8021a0c9:	45 31 c9             	xor    %r9d,%r9d
ffffffff8021a0cc:	6a 1e                	push   $0x1e
ffffffff8021a0ce:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021a0d1:	45 31 c0             	xor    %r8d,%r8d
ffffffff8021a0d4:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a0d7:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a0dc:	48 89 df             	mov    %rbx,%rdi
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8021a0df:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff8021a0e6:	e8 75 58 ff ff       	call   ffffffff8020f960 <_RME_Pgt_Boot_Crt>
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4), Count,
ffffffff8021a0eb:	49 8d 4d 02          	lea    0x2(%r13),%rcx
ffffffff8021a0ef:	4c 89 ea             	mov    %r13,%rdx
ffffffff8021a0f2:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a0f5:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8021a0fb:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a100:	e8 db 45 ff ff       	call   ffffffff8020e6e0 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<16;Count++)
ffffffff8021a105:	41 58                	pop    %r8
ffffffff8021a107:	41 59                	pop    %r9
ffffffff8021a109:	48 83 fd 10          	cmp    $0x10,%rbp
ffffffff8021a10d:	75 b1                	jne    ffffffff8021a0c0 <__RME_Boot+0x1b0>
ffffffff8021a10f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    for(Count=0;Count<8192;Count++)
ffffffff8021a114:	31 ed                	xor    %ebp,%ebp
ffffffff8021a116:	4c 8d a0 00 10 01 00 	lea    0x11000(%rax),%r12
ffffffff8021a11d:	0f 1f 00             	nopl   (%rax)
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff8021a120:	6a 09                	push   $0x9
ffffffff8021a122:	48 8d 55 11          	lea    0x11(%rbp),%rdx
ffffffff8021a126:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021a129:	45 31 c9             	xor    %r9d,%r9d
ffffffff8021a12c:	6a 15                	push   $0x15
ffffffff8021a12e:	45 31 c0             	xor    %r8d,%r8d
ffffffff8021a131:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a136:	48 89 df             	mov    %rbx,%rdi
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8021a139:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff8021a140:	e8 1b 58 ff ff       	call   ffffffff8020f960 <_RME_Pgt_Boot_Crt>
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff8021a145:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021a148:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a14b:	48 8d 4d 12          	lea    0x12(%rbp),%rcx
ffffffff8021a14f:	48 c1 fe 09          	sar    $0x9,%rsi
ffffffff8021a153:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a156:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff8021a15c:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8021a162:	48 83 c6 02          	add    $0x2,%rsi
    for(Count=0;Count<8192;Count++)
ffffffff8021a166:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff8021a16a:	e8 71 45 ff ff       	call   ffffffff8020e6e0 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<8192;Count++)
ffffffff8021a16f:	5e                   	pop    %rsi
ffffffff8021a170:	5f                   	pop    %rdi
ffffffff8021a171:	48 81 fd 00 20 00 00 	cmp    $0x2000,%rbp
ffffffff8021a178:	75 a6                	jne    ffffffff8021a120 <__RME_Boot+0x210>
ffffffff8021a17a:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8021a17f:	4c 8b 3d 6a c3 00 00 	mov    0xc36a(%rip),%r15        # ffffffff802264f0 <RME_X64_Layout+0x30>
ffffffff8021a186:	48 05 00 10 01 02    	add    $0x2011000,%rax
ffffffff8021a18c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff8021a191:	4d 85 ff             	test   %r15,%r15
ffffffff8021a194:	0f 84 95 00 00 00    	je     ffffffff8021a22f <__RME_Boot+0x31f>
ffffffff8021a19a:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff8021a1a1:	00 00 
    Page_Ptr=0;
ffffffff8021a1a3:	45 31 ff             	xor    %r15d,%r15d
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021a1a6:	49 bd 00 00 00 00 00 	movabs $0x800000000000,%r13
ffffffff8021a1ad:	80 00 00 
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a1b0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff8021a1b5:	45 31 f6             	xor    %r14d,%r14d
ffffffff8021a1b8:	48 8d 6f 26          	lea    0x26(%rdi),%rbp
ffffffff8021a1bc:	4c 8d 67 06          	lea    0x6(%rdi),%r12
ffffffff8021a1c0:	48 8b 04 ed c8 64 22 	mov    -0x7fdd9b38(,%rbp,8),%rax
ffffffff8021a1c7:	80 
ffffffff8021a1c8:	48 85 c0             	test   %rax,%rax
ffffffff8021a1cb:	74 4b                	je     ffffffff8021a218 <__RME_Boot+0x308>
ffffffff8021a1cd:	0f 1f 00             	nopl   (%rax)
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a1d0:	4c 89 fe             	mov    %r15,%rsi
ffffffff8021a1d3:	4c 89 f9             	mov    %r15,%rcx
ffffffff8021a1d6:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff8021a1dc:	48 89 df             	mov    %rbx,%rdi
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021a1df:	4a 8b 14 e5 c8 64 22 	mov    -0x7fdd9b38(,%r12,8),%rdx
ffffffff8021a1e6:	80 
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a1e7:	48 c1 ee 09          	shr    $0x9,%rsi
ffffffff8021a1eb:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
            Page_Ptr++;
ffffffff8021a1f1:	49 83 c7 01          	add    $0x1,%r15
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a1f5:	48 83 c6 12          	add    $0x12,%rsi
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8021a1f9:	4c 01 ea             	add    %r13,%rdx
ffffffff8021a1fc:	4c 01 f2             	add    %r14,%rdx
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a1ff:	49 81 c6 00 00 20 00 	add    $0x200000,%r14
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a206:	e8 85 43 ff ff       	call   ffffffff8020e590 <_RME_Pgt_Boot_Add>
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021a20b:	48 8b 04 ed c8 64 22 	mov    -0x7fdd9b38(,%rbp,8),%rax
ffffffff8021a212:	80 
ffffffff8021a213:	49 39 c6             	cmp    %rax,%r14
ffffffff8021a216:	72 b8                	jb     ffffffff8021a1d0 <__RME_Boot+0x2c0>
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8021a218:	48 83 44 24 08 01    	addq   $0x1,0x8(%rsp)
ffffffff8021a21e:	48 8b 05 cb c2 00 00 	mov    0xc2cb(%rip),%rax        # ffffffff802264f0 <RME_X64_Layout+0x30>
ffffffff8021a225:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff8021a22a:	48 39 c7             	cmp    %rax,%rdi
ffffffff8021a22d:	72 81                	jb     ffffffff8021a1b0 <__RME_Boot+0x2a0>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a22f:	48 8b 05 da c4 00 00 	mov    0xc4da(%rip),%rax        # ffffffff80226710 <RME_X64_Layout+0x250>
ffffffff8021a236:	bd 00 08 00 00       	mov    $0x800,%ebp
ffffffff8021a23b:	4d 8d af 00 f8 ff ff 	lea    -0x800(%r15),%r13
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a242:	49 be 00 f0 ff ff ff 	movabs $0xffffffffff000,%r14
ffffffff8021a249:	ff 0f 00 
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a24c:	49 bc 00 00 00 00 00 	movabs $0xffff800000000000,%r12
ffffffff8021a253:	80 ff ff 
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a256:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021a25a:	0f 84 7d 00 00 00    	je     ffffffff8021a2dd <__RME_Boot+0x3cd>
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a260:	48 89 e8             	mov    %rbp,%rax
ffffffff8021a263:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a266:	4a 8d 74 2d 00       	lea    0x0(%rbp,%r13,1),%rsi
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a26b:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a271:	48 c1 f8 12          	sar    $0x12,%rax
ffffffff8021a275:	48 c1 fa 09          	sar    $0x9,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a279:	48 89 f1             	mov    %rsi,%rcx
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a27c:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff8021a282:	48 c1 e0 09          	shl    $0x9,%rax
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a286:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a28c:	48 8d 84 02 00 02 00 	lea    0x200(%rdx,%rax,1),%rax
ffffffff8021a293:	00 
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a294:	48 89 ea             	mov    %rbp,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a297:	48 c1 ee 09          	shr    $0x9,%rsi
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a29b:	48 83 c5 01          	add    $0x1,%rbp
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a29f:	48 8b 3c c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rdi
ffffffff8021a2a6:	80 
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a2a7:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a2ad:	48 83 c6 12          	add    $0x12,%rsi
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a2b1:	4c 21 f7             	and    %r14,%rdi
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a2b4:	48 8d 04 d7          	lea    (%rdi,%rdx,8),%rax
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a2b8:	48 89 df             	mov    %rbx,%rdi
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a2bb:	4a 8b 14 20          	mov    (%rax,%r12,1),%rdx
ffffffff8021a2bf:	4c 21 f2             	and    %r14,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a2c2:	e8 c9 42 ff ff       	call   ffffffff8020e590 <_RME_Pgt_Boot_Add>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a2c7:	48 8b 05 42 c4 00 00 	mov    0xc442(%rip),%rax        # ffffffff80226710 <RME_X64_Layout+0x250>
ffffffff8021a2ce:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021a2d2:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021a2d8:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a2db:	72 83                	jb     ffffffff8021a260 <__RME_Boot+0x350>
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff8021a2dd:	41 b8 01 00 00 00    	mov    $0x1,%r8d
ffffffff8021a2e3:	31 c9                	xor    %ecx,%ecx
ffffffff8021a2e5:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff8021a2ea:	31 f6                	xor    %esi,%esi
ffffffff8021a2ec:	48 89 df             	mov    %rbx,%rdi
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a2ef:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff8021a2f1:	e8 1a 60 ff ff       	call   ffffffff80210310 <_RME_Prc_Boot_Crt>
    RME_ASSERT(_RME_Kfn_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_KERN)==0);
ffffffff8021a2f6:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021a2fb:	31 f6                	xor    %esi,%esi
ffffffff8021a2fd:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a300:	e8 eb ad ff ff       	call   ffffffff802150f0 <_RME_Kfn_Boot_Crt>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_KOM, Cur_Addr, RME_X64_KOM1_MAXSEGS+1)==0);
ffffffff8021a305:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
ffffffff8021a30a:	31 f6                	xor    %esi,%esi
ffffffff8021a30c:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a30f:	41 b8 21 00 00 00    	mov    $0x21,%r8d
ffffffff8021a315:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff8021a31a:	e8 51 54 ff ff       	call   ffffffff8020f770 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff8021a31f:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a324:	48 8b 05 c5 c1 00 00 	mov    0xc1c5(%rip),%rax        # ffffffff802264f0 <RME_X64_Layout+0x30>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff8021a32b:	49 81 c7 00 20 01 02 	add    $0x2012000,%r15
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a332:	48 85 c0             	test   %rax,%rax
ffffffff8021a335:	74 53                	je     ffffffff8021a38a <__RME_Boot+0x47a>
ffffffff8021a337:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a33e:	00 00 
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a340:	48 8d 45 06          	lea    0x6(%rbp),%rax
ffffffff8021a344:	48 8d 55 26          	lea    0x26(%rbp),%rdx
ffffffff8021a348:	41 b9 0f 00 00 00    	mov    $0xf,%r9d
ffffffff8021a34e:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a351:	48 8b 34 c5 c8 64 22 	mov    -0x7fdd9b38(,%rax,8),%rsi
ffffffff8021a358:	80 
ffffffff8021a359:	48 8b 14 d5 c8 64 22 	mov    -0x7fdd9b38(,%rdx,8),%rdx
ffffffff8021a360:	80 
ffffffff8021a361:	48 8b 0c c5 c8 64 22 	mov    -0x7fdd9b38(,%rax,8),%rcx
ffffffff8021a368:	80 
ffffffff8021a369:	4c 8d 04 16          	lea    (%rsi,%rdx,1),%r8
ffffffff8021a36d:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a370:	be 05 00 00 00       	mov    $0x5,%esi
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a375:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a379:	e8 82 5d ff ff       	call   ffffffff80210100 <_RME_Kom_Boot_Crt>
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a37e:	48 8b 05 6b c1 00 00 	mov    0xc16b(%rip),%rax        # ffffffff802264f0 <RME_X64_Layout+0x30>
ffffffff8021a385:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a388:	72 b6                	jb     ffffffff8021a340 <__RME_Boot+0x430>
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a38a:	41 b9 0d 00 00 00    	mov    $0xd,%r9d
ffffffff8021a390:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff8021a395:	48 89 df             	mov    %rbx,%rdi
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a398:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a39a:	48 8b 15 67 c3 00 00 	mov    0xc367(%rip),%rdx        # ffffffff80226708 <RME_X64_Layout+0x248>
ffffffff8021a3a1:	48 8b 05 68 c3 00 00 	mov    0xc368(%rip),%rax        # ffffffff80226710 <RME_X64_Layout+0x250>
ffffffff8021a3a8:	48 8b 0d 59 c3 00 00 	mov    0xc359(%rip),%rcx        # ffffffff80226708 <RME_X64_Layout+0x248>
ffffffff8021a3af:	4c 8d 04 02          	lea    (%rdx,%rax,1),%r8
ffffffff8021a3b3:	ba 20 00 00 00       	mov    $0x20,%edx
ffffffff8021a3b8:	e8 43 5d ff ff       	call   ffffffff80210100 <_RME_Kom_Boot_Crt>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a3bd:	4c 89 f9             	mov    %r15,%rcx
ffffffff8021a3c0:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff8021a3c5:	31 f6                	xor    %esi,%esi
ffffffff8021a3c7:	4c 8b 05 da c0 00 00 	mov    0xc0da(%rip),%r8        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff8021a3ce:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a3d1:	e8 9a 53 ff ff       	call   ffffffff8020f770 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a3d6:	4c 8b 25 cb c0 00 00 	mov    0xc0cb(%rip),%r12        # ffffffff802264a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a3dd:	48 8b 05 c4 c0 00 00 	mov    0xc0c4(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a3e4:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021a3e8:	49 81 c4 ff 0f 00 00 	add    $0xfff,%r12
ffffffff8021a3ef:	49 81 e4 00 f0 ff ff 	and    $0xfffffffffffff000,%r12
ffffffff8021a3f6:	4d 01 fc             	add    %r15,%r12
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a3f9:	48 85 c0             	test   %rax,%rax
ffffffff8021a3fc:	74 46                	je     ffffffff8021a444 <__RME_Boot+0x534>
ffffffff8021a3fe:	66 90                	xchg   %ax,%ax
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a400:	48 8b 0d c9 c0 00 00 	mov    0xc0c9(%rip),%rcx        # ffffffff802264d0 <RME_X64_Layout+0x10>
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a407:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a40a:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a40d:	48 89 df             	mov    %rbx,%rdi
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a410:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021a414:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a418:	48 03 83 98 01 00 00 	add    0x198(%rbx),%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a41f:	be 06 00 00 00       	mov    $0x6,%esi
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a424:	48 89 84 11 10 14 00 	mov    %rax,0x1410(%rcx,%rdx,1)
ffffffff8021a42b:	00 
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a42c:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a42f:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a433:	e8 e8 65 ff ff       	call   ffffffff80210a20 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a438:	48 8b 05 69 c0 00 00 	mov    0xc069(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff8021a43f:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a442:	72 bc                	jb     ffffffff8021a400 <__RME_Boot+0x4f0>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a444:	4c 8b 05 5d c0 00 00 	mov    0xc05d(%rip),%r8        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff8021a44b:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021a44e:	31 f6                	xor    %esi,%esi
ffffffff8021a450:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a453:	ba 07 00 00 00       	mov    $0x7,%edx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a458:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a45a:	e8 11 53 ff ff       	call   ffffffff8020f770 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a45f:	4c 8b 2d 42 c0 00 00 	mov    0xc042(%rip),%r13        # ffffffff802264a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a466:	48 8b 05 3b c0 00 00 	mov    0xc03b(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a46d:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8021a471:	49 81 c5 ff 0f 00 00 	add    $0xfff,%r13
ffffffff8021a478:	49 81 e5 00 f0 ff ff 	and    $0xfffffffffffff000,%r13
ffffffff8021a47f:	4d 01 e5             	add    %r12,%r13
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a482:	48 85 c0             	test   %rax,%rax
ffffffff8021a485:	74 4d                	je     ffffffff8021a4d4 <__RME_Boot+0x5c4>
ffffffff8021a487:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a48e:	00 00 
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a490:	48 8b 0d 39 c0 00 00 	mov    0xc039(%rip),%rcx        # ffffffff802264d0 <RME_X64_Layout+0x10>
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a497:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a49a:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a49d:	48 89 df             	mov    %rbx,%rdi
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a4a0:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021a4a4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a4a8:	48 03 83 d8 01 00 00 	add    0x1d8(%rbx),%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a4af:	be 07 00 00 00       	mov    $0x7,%esi
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a4b4:	48 89 84 11 18 14 00 	mov    %rax,0x1418(%rcx,%rdx,1)
ffffffff8021a4bb:	00 
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a4bc:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a4bf:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a4c3:	e8 58 65 ff ff       	call   ffffffff80210a20 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a4c8:	48 8b 05 d9 bf 00 00 	mov    0xbfd9(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff8021a4cf:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a4d2:	72 bc                	jb     ffffffff8021a490 <__RME_Boot+0x580>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a4d4:	4c 8b 05 cd bf 00 00 	mov    0xbfcd(%rip),%r8        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff8021a4db:	4c 89 e9             	mov    %r13,%rcx
ffffffff8021a4de:	31 f6                	xor    %esi,%esi
ffffffff8021a4e0:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a4e3:	ba 03 00 00 00       	mov    $0x3,%edx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a4e8:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a4ea:	e8 81 52 ff ff       	call   ffffffff8020f770 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a4ef:	4c 8b 25 b2 bf 00 00 	mov    0xbfb2(%rip),%r12        # ffffffff802264a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a4f6:	48 8b 05 ab bf 00 00 	mov    0xbfab(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a4fd:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021a501:	49 81 c4 ff 0f 00 00 	add    $0xfff,%r12
ffffffff8021a508:	49 81 e4 00 f0 ff ff 	and    $0xfffffffffffff000,%r12
ffffffff8021a50f:	4d 01 ec             	add    %r13,%r12
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a512:	48 85 c0             	test   %rax,%rax
ffffffff8021a515:	74 58                	je     ffffffff8021a56f <__RME_Boot+0x65f>
ffffffff8021a517:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a51e:	00 00 
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a520:	48 8b 15 a9 bf 00 00 	mov    0xbfa9(%rip),%rdx        # ffffffff802264d0 <RME_X64_Layout+0x10>
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a527:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a52a:	4d 89 e0             	mov    %r12,%r8
ffffffff8021a52d:	45 31 c9             	xor    %r9d,%r9d
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a530:	48 c1 e0 0d          	shl    $0xd,%rax
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a534:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8021a538:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff8021a53d:	48 89 df             	mov    %rbx,%rdi
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a540:	48 8d 84 02 00 14 00 	lea    0x1400(%rdx,%rax,1),%rax
ffffffff8021a547:	00 
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a548:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021a54d:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a550:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a554:	50                   	push   %rax
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_THD_SIZE);
ffffffff8021a555:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a55c:	e8 0f 61 ff ff       	call   ffffffff80210670 <_RME_Thd_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a561:	48 8b 05 40 bf 00 00 	mov    0xbf40(%rip),%rax        # ffffffff802264a8 <RME_X64_Num_CPU>
ffffffff8021a568:	5a                   	pop    %rdx
ffffffff8021a569:	59                   	pop    %rcx
ffffffff8021a56a:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a56d:	72 b1                	jb     ffffffff8021a520 <__RME_Boot+0x610>
    __RME_X64_Out(RME_X64_PIT_CMD,0x34);
ffffffff8021a56f:	be 34 00 00 00       	mov    $0x34,%esi
ffffffff8021a574:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff8021a579:	e8 8c 12 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,(1193182/2/RME_X64_TIMER_FREQ)&0xFF);
ffffffff8021a57e:	be 54 00 00 00       	mov    $0x54,%esi
ffffffff8021a583:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff8021a588:	e8 7d 12 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,((1193182/2/RME_X64_TIMER_FREQ)>>8)&0xFF);
ffffffff8021a58d:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff8021a592:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff8021a597:	e8 6e 12 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_Pgt_Set(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff8021a59c:	e8 9e 12 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff8021a5a1:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021a5a8:	80 00 00 
    __RME_Pgt_Set(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff8021a5ab:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a5af:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021a5b3:	48 8b 40 30          	mov    0x30(%rax),%rax
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff8021a5b7:	48 03 78 18          	add    0x18(%rax),%rdi
ffffffff8021a5bb:	e8 e9 12 ff ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
    _RME_Memcpy(0,(void*)UVM_Init,RME_POW2(RME_PGT_SIZE_2M));
ffffffff8021a5c0:	ba 00 00 20 00       	mov    $0x200000,%edx
ffffffff8021a5c5:	48 c7 c6 a0 b0 21 80 	mov    $0xffffffff8021b0a0,%rsi
ffffffff8021a5cc:	31 ff                	xor    %edi,%edi
ffffffff8021a5ce:	e8 4d 3e ff ff       	call   ffffffff8020e420 <_RME_Memcpy>
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff8021a5d3:	31 d2                	xor    %edx,%edx
ffffffff8021a5d5:	be 00 08 20 00       	mov    $0x200800,%esi
ffffffff8021a5da:	31 ff                	xor    %edi,%edi
    RME_X64_CPU_Cnt=0;
ffffffff8021a5dc:	48 c7 05 b9 be 00 00 	movq   $0x0,0xbeb9(%rip)        # ffffffff802264a0 <RME_X64_CPU_Cnt>
ffffffff8021a5e3:	00 00 00 00 
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff8021a5e7:	e8 d4 12 ff ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
}
ffffffff8021a5ec:	48 83 c4 28          	add    $0x28,%rsp
ffffffff8021a5f0:	31 c0                	xor    %eax,%eax
ffffffff8021a5f2:	5b                   	pop    %rbx
ffffffff8021a5f3:	5d                   	pop    %rbp
ffffffff8021a5f4:	41 5c                	pop    %r12
ffffffff8021a5f6:	41 5d                	pop    %r13
ffffffff8021a5f8:	41 5e                	pop    %r14
ffffffff8021a5fa:	41 5f                	pop    %r15
ffffffff8021a5fc:	c3                   	ret
ffffffff8021a5fd:	0f 1f 00             	nopl   (%rax)

ffffffff8021a600 <__RME_Reboot>:
{
ffffffff8021a600:	f3 0f 1e fa          	endbr64
}
ffffffff8021a604:	c3                   	ret
ffffffff8021a605:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a60c:	00 00 00 00 

ffffffff8021a610 <__RME_Shutdown>:
void __RME_Shutdown(void)
ffffffff8021a610:	f3 0f 1e fa          	endbr64
ffffffff8021a614:	c3                   	ret
ffffffff8021a615:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a61c:	00 00 00 00 

ffffffff8021a620 <__RME_Get_Syscall_Param>:
{
ffffffff8021a620:	f3 0f 1e fa          	endbr64
    *Svc=(Reg->RDI)>>32;
ffffffff8021a624:	8b 47 2c             	mov    0x2c(%rdi),%eax
ffffffff8021a627:	48 89 06             	mov    %rax,(%rsi)
    *Capid=(Reg->RDI)&0xFFFFFFFF;
ffffffff8021a62a:	8b 47 28             	mov    0x28(%rdi),%eax
ffffffff8021a62d:	48 89 02             	mov    %rax,(%rdx)
    Param[0]=Reg->RSI;
ffffffff8021a630:	48 8b 47 20          	mov    0x20(%rdi),%rax
ffffffff8021a634:	48 89 01             	mov    %rax,(%rcx)
    Param[1]=Reg->RDX;
ffffffff8021a637:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8021a63b:	48 89 41 08          	mov    %rax,0x8(%rcx)
    Param[2]=Reg->R8;
ffffffff8021a63f:	48 8b 47 38          	mov    0x38(%rdi),%rax
ffffffff8021a643:	48 89 41 10          	mov    %rax,0x10(%rcx)
}
ffffffff8021a647:	c3                   	ret
ffffffff8021a648:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a64f:	00 

ffffffff8021a650 <__RME_Set_Syscall_Retval>:
{
ffffffff8021a650:	f3 0f 1e fa          	endbr64
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff8021a654:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8021a657:	c3                   	ret
ffffffff8021a658:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a65f:	00 

ffffffff8021a660 <__RME_Thd_Reg_Init>:
{
ffffffff8021a660:	f3 0f 1e fa          	endbr64
    Reg->INT_NUM=0x10000;
ffffffff8021a664:	66 0f 6f 05 24 25 00 	movdqa 0x2524(%rip),%xmm0        # ffffffff8021cb90 <Table.1+0x210>
ffffffff8021a66b:	00 
    Reg->RDI=Param;
ffffffff8021a66c:	49 89 48 28          	mov    %rcx,0x28(%r8)
    Reg->RIP=Entry;
ffffffff8021a670:	49 89 b0 88 00 00 00 	mov    %rsi,0x88(%r8)
    Reg->CS=RME_X64_SEG_USER_CODE;
ffffffff8021a677:	49 c7 80 90 00 00 00 	movq   $0x2b,0x90(%r8)
ffffffff8021a67e:	2b 00 00 00 
    Reg->RFLAGS=0x3200;
ffffffff8021a682:	49 c7 80 98 00 00 00 	movq   $0x3200,0x98(%r8)
ffffffff8021a689:	00 32 00 00 
    Reg->RSP=Stack;
ffffffff8021a68d:	49 89 90 a0 00 00 00 	mov    %rdx,0xa0(%r8)
    Reg->SS=RME_X64_SEG_USER_DATA;
ffffffff8021a694:	49 c7 80 a8 00 00 00 	movq   $0x23,0xa8(%r8)
ffffffff8021a69b:	23 00 00 00 
    Reg->INT_NUM=0x10000;
ffffffff8021a69f:	41 0f 11 40 78       	movups %xmm0,0x78(%r8)
}
ffffffff8021a6a4:	c3                   	ret
ffffffff8021a6a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a6ac:	00 00 00 00 

ffffffff8021a6b0 <__RME_Thd_Reg_Copy>:
{
ffffffff8021a6b0:	f3 0f 1e fa          	endbr64
    Dst->RAX=Src->RAX;
ffffffff8021a6b4:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff8021a6b7:	48 89 0f             	mov    %rcx,(%rdi)
    Dst->RBX=Src->RBX;
ffffffff8021a6ba:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff8021a6be:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
    Dst->RCX=Src->RCX;
ffffffff8021a6c2:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
ffffffff8021a6c6:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
    Dst->RDX=Src->RDX;
ffffffff8021a6ca:	48 8b 4e 18          	mov    0x18(%rsi),%rcx
ffffffff8021a6ce:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
    Dst->RSI=Src->RSI;
ffffffff8021a6d2:	48 8b 4e 20          	mov    0x20(%rsi),%rcx
ffffffff8021a6d6:	48 89 4f 20          	mov    %rcx,0x20(%rdi)
    Dst->RDI=Src->RDI;
ffffffff8021a6da:	48 8b 4e 28          	mov    0x28(%rsi),%rcx
ffffffff8021a6de:	48 89 4f 28          	mov    %rcx,0x28(%rdi)
    Dst->RBP=Src->RBP;
ffffffff8021a6e2:	48 8b 4e 30          	mov    0x30(%rsi),%rcx
ffffffff8021a6e6:	48 89 4f 30          	mov    %rcx,0x30(%rdi)
    Dst->R8=Src->R8;
ffffffff8021a6ea:	48 8b 4e 38          	mov    0x38(%rsi),%rcx
ffffffff8021a6ee:	48 89 4f 38          	mov    %rcx,0x38(%rdi)
    Dst->R9=Src->R9;
ffffffff8021a6f2:	48 8b 4e 40          	mov    0x40(%rsi),%rcx
ffffffff8021a6f6:	48 89 4f 40          	mov    %rcx,0x40(%rdi)
    Dst->R10=Src->R10;
ffffffff8021a6fa:	48 8b 4e 48          	mov    0x48(%rsi),%rcx
ffffffff8021a6fe:	48 89 4f 48          	mov    %rcx,0x48(%rdi)
    Dst->R11=Src->R11;
ffffffff8021a702:	48 8b 4e 50          	mov    0x50(%rsi),%rcx
ffffffff8021a706:	48 89 4f 50          	mov    %rcx,0x50(%rdi)
    Dst->R12=Src->R12;
ffffffff8021a70a:	48 8b 4e 58          	mov    0x58(%rsi),%rcx
ffffffff8021a70e:	48 89 4f 58          	mov    %rcx,0x58(%rdi)
    Dst->R13=Src->R13;
ffffffff8021a712:	48 8b 4e 60          	mov    0x60(%rsi),%rcx
ffffffff8021a716:	48 89 4f 60          	mov    %rcx,0x60(%rdi)
    Dst->R14=Src->R14;
ffffffff8021a71a:	48 8b 4e 68          	mov    0x68(%rsi),%rcx
ffffffff8021a71e:	48 89 4f 68          	mov    %rcx,0x68(%rdi)
    Dst->R15=Src->R15;
ffffffff8021a722:	48 8b 4e 70          	mov    0x70(%rsi),%rcx
ffffffff8021a726:	48 89 4f 70          	mov    %rcx,0x70(%rdi)
    Dst->INT_NUM=Src->INT_NUM;
ffffffff8021a72a:	48 8b 4e 78          	mov    0x78(%rsi),%rcx
ffffffff8021a72e:	48 89 4f 78          	mov    %rcx,0x78(%rdi)
    Dst->ERROR_CODE=Src->ERROR_CODE;
ffffffff8021a732:	48 8b 8e 80 00 00 00 	mov    0x80(%rsi),%rcx
ffffffff8021a739:	48 89 8f 80 00 00 00 	mov    %rcx,0x80(%rdi)
    Dst->RIP=Src->RIP;
ffffffff8021a740:	48 8b 8e 88 00 00 00 	mov    0x88(%rsi),%rcx
ffffffff8021a747:	48 89 8f 88 00 00 00 	mov    %rcx,0x88(%rdi)
    Dst->CS=Src->CS;
ffffffff8021a74e:	48 8b 8e 90 00 00 00 	mov    0x90(%rsi),%rcx
ffffffff8021a755:	48 89 8f 90 00 00 00 	mov    %rcx,0x90(%rdi)
    Dst->RFLAGS=Src->RFLAGS;
ffffffff8021a75c:	48 8b 8e 98 00 00 00 	mov    0x98(%rsi),%rcx
ffffffff8021a763:	48 89 8f 98 00 00 00 	mov    %rcx,0x98(%rdi)
    Dst->RSP=Src->RSP;
ffffffff8021a76a:	48 8b 8e a0 00 00 00 	mov    0xa0(%rsi),%rcx
ffffffff8021a771:	48 89 8f a0 00 00 00 	mov    %rcx,0xa0(%rdi)
    Dst->SS=Src->SS;
ffffffff8021a778:	48 8b 96 a8 00 00 00 	mov    0xa8(%rsi),%rdx
ffffffff8021a77f:	48 89 97 a8 00 00 00 	mov    %rdx,0xa8(%rdi)
}
ffffffff8021a786:	c3                   	ret
ffffffff8021a787:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a78e:	00 00 

ffffffff8021a790 <__RME_Thd_Cop_Init>:
void __RME_Thd_Cop_Init(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021a790:	f3 0f 1e fa          	endbr64
ffffffff8021a794:	c3                   	ret
ffffffff8021a795:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a79c:	00 00 00 00 

ffffffff8021a7a0 <__RME_Thd_Cop_Save>:
void __RME_Thd_Cop_Save(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021a7a0:	f3 0f 1e fa          	endbr64
ffffffff8021a7a4:	c3                   	ret
ffffffff8021a7a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a7ac:	00 00 00 00 

ffffffff8021a7b0 <__RME_Thd_Cop_Restore>:
void __RME_Thd_Cop_Restore(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021a7b0:	f3 0f 1e fa          	endbr64
ffffffff8021a7b4:	c3                   	ret
ffffffff8021a7b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a7bc:	00 00 00 00 

ffffffff8021a7c0 <__RME_Inv_Reg_Save>:
{
ffffffff8021a7c0:	f3 0f 1e fa          	endbr64
    Ret->RIP=Reg->RIP;
ffffffff8021a7c4:	48 8b 86 88 00 00 00 	mov    0x88(%rsi),%rax
ffffffff8021a7cb:	48 89 07             	mov    %rax,(%rdi)
    Ret->RSP=Reg->RSP;
ffffffff8021a7ce:	48 8b 86 a0 00 00 00 	mov    0xa0(%rsi),%rax
ffffffff8021a7d5:	48 89 47 08          	mov    %rax,0x8(%rdi)
}
ffffffff8021a7d9:	c3                   	ret
ffffffff8021a7da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021a7e0 <__RME_Inv_Reg_Restore>:
{
ffffffff8021a7e0:	f3 0f 1e fa          	endbr64
    Reg->RIP=Ret->RIP;
ffffffff8021a7e4:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021a7e7:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
    Reg->RSP=Ret->RSP;
ffffffff8021a7ee:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8021a7f2:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
}
ffffffff8021a7f9:	c3                   	ret
ffffffff8021a7fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021a800 <__RME_Set_Inv_Retval>:
{
ffffffff8021a800:	f3 0f 1e fa          	endbr64
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff8021a804:	48 89 77 28          	mov    %rsi,0x28(%rdi)
}
ffffffff8021a808:	c3                   	ret
ffffffff8021a809:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021a810 <write_string>:
{
ffffffff8021a810:	f3 0f 1e fa          	endbr64
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021a814:	48 b8 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rax
ffffffff8021a81b:	80 ff ff 
ffffffff8021a81e:	48 01 c2             	add    %rax,%rdx
    while( *string != 0 )
ffffffff8021a821:	0f b6 06             	movzbl (%rsi),%eax
ffffffff8021a824:	84 c0                	test   %al,%al
ffffffff8021a826:	74 20                	je     ffffffff8021a848 <write_string+0x38>
ffffffff8021a828:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a82f:	00 
        *video++ = *string++;
ffffffff8021a830:	88 02                	mov    %al,(%rdx)
ffffffff8021a832:	48 83 c6 01          	add    $0x1,%rsi
        *video++ = colour;
ffffffff8021a836:	48 89 d0             	mov    %rdx,%rax
ffffffff8021a839:	48 83 c2 02          	add    $0x2,%rdx
ffffffff8021a83d:	40 88 78 01          	mov    %dil,0x1(%rax)
    while( *string != 0 )
ffffffff8021a841:	0f b6 06             	movzbl (%rsi),%eax
ffffffff8021a844:	84 c0                	test   %al,%al
ffffffff8021a846:	75 e8                	jne    ffffffff8021a830 <write_string+0x20>
}
ffffffff8021a848:	c3                   	ret
ffffffff8021a849:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021a850 <NDBG>:
{
ffffffff8021a850:	f3 0f 1e fa          	endbr64
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021a854:	48 b8 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rax
ffffffff8021a85b:	80 ff ff 
    while( *string != 0 )
ffffffff8021a85e:	b9 48 00 00 00       	mov    $0x48,%ecx
ffffffff8021a863:	48 c7 c2 55 c7 21 80 	mov    $0xffffffff8021c755,%rdx
ffffffff8021a86a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        *video++ = *string++;
ffffffff8021a870:	88 08                	mov    %cl,(%rax)
ffffffff8021a872:	48 83 c2 01          	add    $0x1,%rdx
        *video++ = colour;
ffffffff8021a876:	48 89 c1             	mov    %rax,%rcx
ffffffff8021a879:	48 83 c0 02          	add    $0x2,%rax
ffffffff8021a87d:	c6 41 01 07          	movb   $0x7,0x1(%rcx)
    while( *string != 0 )
ffffffff8021a881:	0f b6 0a             	movzbl (%rdx),%ecx
ffffffff8021a884:	84 c9                	test   %cl,%cl
ffffffff8021a886:	75 e8                	jne    ffffffff8021a870 <NDBG+0x20>
}
ffffffff8021a888:	c3                   	ret
ffffffff8021a889:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021a890 <__RME_Kern_Func_Handler>:
{
ffffffff8021a890:	f3 0f 1e fa          	endbr64
    String[0]=Param1/10000000+'0';
ffffffff8021a894:	48 b8 bd 42 7a e5 d5 	movabs $0xd6bf94d5e57a42bd,%rax
ffffffff8021a89b:	94 bf d6 
{
ffffffff8021a89e:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021a8a1:	41 55                	push   %r13
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a8a3:	4d 89 c2             	mov    %r8,%r10
    String[0]=Param1/10000000+'0';
ffffffff8021a8a6:	49 f7 e0             	mul    %r8
{
ffffffff8021a8a9:	41 54                	push   %r12
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a8ab:	49 c1 ea 05          	shr    $0x5,%r10
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a8af:	48 b8 db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rax
ffffffff8021a8b6:	de 1b 43 
ffffffff8021a8b9:	49 bc cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r12
ffffffff8021a8c0:	cc cc cc 
{
ffffffff8021a8c3:	55                   	push   %rbp
    String[5]=(Param1/100)%10+'0';
ffffffff8021a8c4:	4c 89 c5             	mov    %r8,%rbp
{
ffffffff8021a8c7:	53                   	push   %rbx
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a8c8:	4c 89 c3             	mov    %r8,%rbx
    String[5]=(Param1/100)%10+'0';
ffffffff8021a8cb:	48 c1 ed 02          	shr    $0x2,%rbp
    String[0]=Param1/10000000+'0';
ffffffff8021a8cf:	48 89 d7             	mov    %rdx,%rdi
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a8d2:	49 f7 e0             	mul    %r8
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a8d5:	48 c1 eb 03          	shr    $0x3,%rbx
    String[0]=Param1/10000000+'0';
ffffffff8021a8d9:	48 c1 ef 17          	shr    $0x17,%rdi
{
ffffffff8021a8dd:	48 83 ec 18          	sub    $0x18,%rsp
    String[0]=Param1/10000000+'0';
ffffffff8021a8e1:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff8021a8e5:	f3 0f 7e 05 bb 24 00 	movq   0x24bb(%rip),%xmm0        # ffffffff8021cda8 <RME_X64_Pgflg_RME2NAT+0x108>
ffffffff8021a8ec:	00 
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a8ed:	49 89 d1             	mov    %rdx,%r9
    String[8]='\0';
ffffffff8021a8f0:	c6 44 24 08 00       	movb   $0x0,0x8(%rsp)
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a8f5:	49 c1 e9 12          	shr    $0x12,%r9
ffffffff8021a8f9:	4c 89 c8             	mov    %r9,%rax
ffffffff8021a8fc:	49 f7 e4             	mul    %r12
ffffffff8021a8ff:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a903:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a907:	48 01 c0             	add    %rax,%rax
ffffffff8021a90a:	49 29 c1             	sub    %rax,%r9
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a90d:	48 b8 43 78 b4 71 c4 	movabs $0xa7c5ac471b47843,%rax
ffffffff8021a914:	5a 7c 0a 
ffffffff8021a917:	49 f7 e2             	mul    %r10
    String[0]=Param1/10000000+'0';
ffffffff8021a91a:	45 0f b6 c9          	movzbl %r9b,%r9d
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a91e:	49 89 d2             	mov    %rdx,%r10
ffffffff8021a921:	49 c1 ea 07          	shr    $0x7,%r10
ffffffff8021a925:	4c 89 d0             	mov    %r10,%rax
ffffffff8021a928:	49 f7 e4             	mul    %r12
ffffffff8021a92b:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a92f:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a933:	48 01 c0             	add    %rax,%rax
ffffffff8021a936:	49 29 c2             	sub    %rax,%r10
    String[3]=(Param1/10000)%10+'0';
ffffffff8021a939:	48 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rax
ffffffff8021a940:	c5 6d 34 
ffffffff8021a943:	49 f7 e0             	mul    %r8
    String[0]=Param1/10000000+'0';
ffffffff8021a946:	45 0f b6 d2          	movzbl %r10b,%r10d
    String[3]=(Param1/10000)%10+'0';
ffffffff8021a94a:	49 89 d3             	mov    %rdx,%r11
ffffffff8021a94d:	49 c1 eb 0b          	shr    $0xb,%r11
ffffffff8021a951:	4c 89 d8             	mov    %r11,%rax
ffffffff8021a954:	49 f7 e4             	mul    %r12
ffffffff8021a957:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a95b:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a95f:	48 01 c0             	add    %rax,%rax
ffffffff8021a962:	49 29 c3             	sub    %rax,%r11
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a965:	48 b8 cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rax
ffffffff8021a96c:	9b c4 20 
ffffffff8021a96f:	48 f7 e3             	mul    %rbx
    String[0]=Param1/10000000+'0';
ffffffff8021a972:	45 0f b6 db          	movzbl %r11b,%r11d
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a976:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021a979:	48 c1 eb 04          	shr    $0x4,%rbx
ffffffff8021a97d:	48 89 d8             	mov    %rbx,%rax
ffffffff8021a980:	49 f7 e4             	mul    %r12
ffffffff8021a983:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a987:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a98b:	48 01 c0             	add    %rax,%rax
ffffffff8021a98e:	48 29 c3             	sub    %rax,%rbx
    String[5]=(Param1/100)%10+'0';
ffffffff8021a991:	48 b8 c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rax
ffffffff8021a998:	c2 f5 28 
ffffffff8021a99b:	48 f7 e5             	mul    %rbp
    String[0]=Param1/10000000+'0';
ffffffff8021a99e:	0f b6 db             	movzbl %bl,%ebx
    String[5]=(Param1/100)%10+'0';
ffffffff8021a9a1:	48 89 d5             	mov    %rdx,%rbp
ffffffff8021a9a4:	48 c1 ed 02          	shr    $0x2,%rbp
ffffffff8021a9a8:	48 89 e8             	mov    %rbp,%rax
ffffffff8021a9ab:	49 f7 e4             	mul    %r12
ffffffff8021a9ae:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a9b2:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a9b6:	48 01 c0             	add    %rax,%rax
ffffffff8021a9b9:	48 29 c5             	sub    %rax,%rbp
    String[6]=(Param1/10)%10+'0';
ffffffff8021a9bc:	4c 89 c0             	mov    %r8,%rax
ffffffff8021a9bf:	49 f7 e4             	mul    %r12
    String[0]=Param1/10000000+'0';
ffffffff8021a9c2:	40 0f b6 ed          	movzbl %bpl,%ebp
    String[6]=(Param1/10)%10+'0';
ffffffff8021a9c6:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a9ca:	48 89 d0             	mov    %rdx,%rax
ffffffff8021a9cd:	49 89 d5             	mov    %rdx,%r13
ffffffff8021a9d0:	49 f7 e4             	mul    %r12
ffffffff8021a9d3:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a9d7:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a9db:	4c 89 ea             	mov    %r13,%rdx
ffffffff8021a9de:	48 01 c0             	add    %rax,%rax
ffffffff8021a9e1:	48 29 c2             	sub    %rax,%rdx
    String[7]=(Param1)%10+'0';
ffffffff8021a9e4:	4b 8d 44 ad 00       	lea    0x0(%r13,%r13,4),%rax
ffffffff8021a9e9:	48 01 c0             	add    %rax,%rax
    String[0]=Param1/10000000+'0';
ffffffff8021a9ec:	0f b6 d2             	movzbl %dl,%edx
    String[7]=(Param1)%10+'0';
ffffffff8021a9ef:	49 29 c0             	sub    %rax,%r8
    String[0]=Param1/10000000+'0';
ffffffff8021a9f2:	41 0f b6 c0          	movzbl %r8b,%eax
ffffffff8021a9f6:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021a9fa:	48 09 d0             	or     %rdx,%rax
ffffffff8021a9fd:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021aa01:	48 09 e8             	or     %rbp,%rax
ffffffff8021aa04:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021aa08:	48 09 d8             	or     %rbx,%rax
ffffffff8021aa0b:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021aa0f:	4c 09 d8             	or     %r11,%rax
ffffffff8021aa12:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021aa16:	4c 09 d0             	or     %r10,%rax
ffffffff8021aa19:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021aa1d:	4c 09 c8             	or     %r9,%rax
ffffffff8021aa20:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021aa24:	48 09 f8             	or     %rdi,%rax
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021aa27:	48 bf 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rdi
ffffffff8021aa2e:	80 ff ff 
    String[0]=Param1/10000000+'0';
ffffffff8021aa31:	66 48 0f 6e c8       	movq   %rax,%xmm1
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021aa36:	48 01 f9             	add    %rdi,%rcx
    String[0]=Param1/10000000+'0';
ffffffff8021aa39:	66 0f fc c1          	paddb  %xmm1,%xmm0
ffffffff8021aa3d:	66 48 0f 7e c2       	movq   %xmm0,%rdx
ffffffff8021aa42:	66 0f d6 04 24       	movq   %xmm0,(%rsp)
    while( *string != 0 )
ffffffff8021aa47:	84 d2                	test   %dl,%dl
ffffffff8021aa49:	74 1d                	je     ffffffff8021aa68 <__RME_Kern_Func_Handler+0x1d8>
ffffffff8021aa4b:	89 d0                	mov    %edx,%eax
        *video++ = colour;
ffffffff8021aa4d:	48 89 e2             	mov    %rsp,%rdx
        *video++ = *string++;
ffffffff8021aa50:	88 01                	mov    %al,(%rcx)
ffffffff8021aa52:	48 83 c2 01          	add    $0x1,%rdx
        *video++ = colour;
ffffffff8021aa56:	48 89 c8             	mov    %rcx,%rax
ffffffff8021aa59:	48 83 c1 02          	add    $0x2,%rcx
ffffffff8021aa5d:	40 88 70 01          	mov    %sil,0x1(%rax)
    while( *string != 0 )
ffffffff8021aa61:	0f b6 02             	movzbl (%rdx),%eax
ffffffff8021aa64:	84 c0                	test   %al,%al
ffffffff8021aa66:	75 e8                	jne    ffffffff8021aa50 <__RME_Kern_Func_Handler+0x1c0>
}
ffffffff8021aa68:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021aa6c:	31 c0                	xor    %eax,%eax
ffffffff8021aa6e:	5b                   	pop    %rbx
ffffffff8021aa6f:	5d                   	pop    %rbp
ffffffff8021aa70:	41 5c                	pop    %r12
ffffffff8021aa72:	41 5d                	pop    %r13
ffffffff8021aa74:	c3                   	ret
ffffffff8021aa75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021aa7c:	00 00 00 00 

ffffffff8021aa80 <__RME_X64_Fault_Handler>:
{
ffffffff8021aa80:	f3 0f 1e fa          	endbr64
ffffffff8021aa84:	0f 1f 40 00          	nopl   0x0(%rax)
    while(1);
ffffffff8021aa88:	eb fe                	jmp    ffffffff8021aa88 <__RME_X64_Fault_Handler+0x8>
ffffffff8021aa8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021aa90 <__RME_X64_Generic_Handler>:
{
ffffffff8021aa90:	f3 0f 1e fa          	endbr64
}
ffffffff8021aa94:	c3                   	ret
ffffffff8021aa95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021aa9c:	00 00 00 00 

ffffffff8021aaa0 <__RME_Pgt_Set>:
{
ffffffff8021aaa0:	f3 0f 1e fa          	endbr64
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff8021aaa4:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8021aaab:	80 00 00 
ffffffff8021aaae:	48 01 c7             	add    %rax,%rdi
ffffffff8021aab1:	e9 f3 0d ff ff       	jmp    ffffffff8020b8a9 <__RME_X64_Pgt_Set>
ffffffff8021aab6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021aabd:	00 00 00 

ffffffff8021aac0 <__RME_Pgt_Check>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Check(rme_ptr_t Base_Addr, rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order, rme_ptr_t Num_Order, rme_ptr_t Vaddr)
{
ffffffff8021aac0:	f3 0f 1e fa          	endbr64
    /* Is the table address aligned to 4kB? */
    if((Vaddr&0xFFF)!=0)
        return RME_ERR_PGT_OPFAIL;
ffffffff8021aac4:	b8 01 00 00 00       	mov    $0x1,%eax
    if((Vaddr&0xFFF)!=0)
ffffffff8021aac9:	41 f7 c0 ff 0f 00 00 	test   $0xfff,%r8d
ffffffff8021aad0:	75 31                	jne    ffffffff8021ab03 <__RME_Pgt_Check+0x43>

    /* Is the size order allowed? */
    if((Size_Order!=RME_PGT_SIZE_512G)&&(Size_Order!=RME_PGT_SIZE_1G)&&
       (Size_Order!=RME_PGT_SIZE_2M)&&(Size_Order!=RME_PGT_SIZE_4K))
ffffffff8021aad2:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff8021aad6:	77 2b                	ja     ffffffff8021ab03 <__RME_Pgt_Check+0x43>
ffffffff8021aad8:	48 bf ff ef df bf 7f 	movabs $0xffffff7fbfdfefff,%rdi
ffffffff8021aadf:	ff ff ff 
ffffffff8021aae2:	48 0f a3 d7          	bt     %rdx,%rdi
ffffffff8021aae6:	72 1b                	jb     ffffffff8021ab03 <__RME_Pgt_Check+0x43>
        return RME_ERR_PGT_OPFAIL;

    /* Is the top-level relationship correct? */
    if(((Size_Order==RME_PGT_SIZE_512G)^(Is_Top!=0))!=0)
ffffffff8021aae8:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff8021aaec:	0f 94 c0             	sete   %al
ffffffff8021aaef:	48 85 f6             	test   %rsi,%rsi
ffffffff8021aaf2:	0f 95 c2             	setne  %dl
ffffffff8021aaf5:	31 d0                	xor    %edx,%eax
        return RME_ERR_PGT_OPFAIL;

    /* Is the number order allowed? */
    if(Num_Order!=RME_PGT_NUM_512)
ffffffff8021aaf7:	48 83 f9 09          	cmp    $0x9,%rcx
ffffffff8021aafb:	0f 95 c2             	setne  %dl
ffffffff8021aafe:	09 d0                	or     %edx,%eax
ffffffff8021ab00:	0f b6 c0             	movzbl %al,%eax
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021ab03:	c3                   	ret
ffffffff8021ab04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021ab0b:	00 00 00 00 
ffffffff8021ab0f:	90                   	nop

ffffffff8021ab10 <__RME_Pgt_Init>:
Input       : struct RME_Cap_Pgt* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Init(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff8021ab10:	f3 0f 1e fa          	endbr64
    rme_cnt_t Count;
    rme_ptr_t* Ptr;
    
    /* Get the actual table */
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8021ab14:	48 8b 4f 18          	mov    0x18(%rdi),%rcx

    /* Hopefully the compiler optimize this to rep stos */
    for(Count=0;Count<256;Count++)
        Ptr[Count]=0;
ffffffff8021ab18:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021ab1c:	48 8d 91 00 08 00 00 	lea    0x800(%rcx),%rdx
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8021ab23:	48 89 c8             	mov    %rcx,%rax
ffffffff8021ab26:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021ab2d:	00 00 00 
        Ptr[Count]=0;
ffffffff8021ab30:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8021ab33:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021ab37:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021ab3b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ab3e:	75 f0                	jne    ffffffff8021ab30 <__RME_Pgt_Init+0x20>

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgt_Op->Base&RME_PGT_TOP)!=0)
ffffffff8021ab40:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021ab44:	74 64                	je     ffffffff8021abaa <__RME_Pgt_Init+0x9a>
    {
        for(;Count<512;Count++)
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021ab46:	48 81 e9 00 90 10 80 	sub    $0xffffffff80109000,%rcx
ffffffff8021ab4d:	48 81 fa 08 98 10 80 	cmp    $0xffffffff80109808,%rdx
ffffffff8021ab54:	48 c7 c0 00 98 10 80 	mov    $0xffffffff80109800,%rax
ffffffff8021ab5b:	48 c7 c6 00 a0 10 80 	mov    $0xffffffff8010a000,%rsi
ffffffff8021ab62:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021ab65:	74 21                	je     ffffffff8021ab88 <__RME_Pgt_Init+0x78>
ffffffff8021ab67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021ab6e:	00 00 
ffffffff8021ab70:	f3 0f 6f 08          	movdqu (%rax),%xmm1
ffffffff8021ab74:	0f 11 0c 02          	movups %xmm1,(%rdx,%rax,1)
        for(;Count<512;Count++)
ffffffff8021ab78:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021ab7c:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021ab7f:	75 ef                	jne    ffffffff8021ab70 <__RME_Pgt_Init+0x60>
        for(;Count<512;Count++)
            Ptr[Count]=0;
    }

    return 0;
}
ffffffff8021ab81:	31 c0                	xor    %eax,%eax
ffffffff8021ab83:	c3                   	ret
ffffffff8021ab84:	0f 1f 40 00          	nopl   0x0(%rax)
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021ab88:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021ab8b:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
        for(;Count<512;Count++)
ffffffff8021ab8f:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021ab93:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021ab96:	74 e9                	je     ffffffff8021ab81 <__RME_Pgt_Init+0x71>
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021ab98:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021ab9b:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
        for(;Count<512;Count++)
ffffffff8021ab9f:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021aba3:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021aba6:	75 e0                	jne    ffffffff8021ab88 <__RME_Pgt_Init+0x78>
ffffffff8021aba8:	eb d7                	jmp    ffffffff8021ab81 <__RME_Pgt_Init+0x71>
ffffffff8021abaa:	48 8d 81 00 10 00 00 	lea    0x1000(%rcx),%rax
            Ptr[Count]=0;
ffffffff8021abb1:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021abb5:	48 89 c1             	mov    %rax,%rcx
ffffffff8021abb8:	48 29 d1             	sub    %rdx,%rcx
ffffffff8021abbb:	83 e1 10             	and    $0x10,%ecx
ffffffff8021abbe:	74 10                	je     ffffffff8021abd0 <__RME_Pgt_Init+0xc0>
ffffffff8021abc0:	0f 11 02             	movups %xmm0,(%rdx)
        for(;Count<512;Count++)
ffffffff8021abc3:	48 83 c2 10          	add    $0x10,%rdx
ffffffff8021abc7:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021abca:	74 b5                	je     ffffffff8021ab81 <__RME_Pgt_Init+0x71>
ffffffff8021abcc:	0f 1f 40 00          	nopl   0x0(%rax)
            Ptr[Count]=0;
ffffffff8021abd0:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8021abd3:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8021abd7:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
        for(;Count<512;Count++)
ffffffff8021abdb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021abde:	74 a1                	je     ffffffff8021ab81 <__RME_Pgt_Init+0x71>
            Ptr[Count]=0;
ffffffff8021abe0:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8021abe3:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8021abe7:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
        for(;Count<512;Count++)
ffffffff8021abeb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021abee:	75 e0                	jne    ffffffff8021abd0 <__RME_Pgt_Init+0xc0>
ffffffff8021abf0:	eb 8f                	jmp    ffffffff8021ab81 <__RME_Pgt_Init+0x71>
ffffffff8021abf2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021abf9:	00 00 00 00 
ffffffff8021abfd:	0f 1f 00             	nopl   (%rax)

ffffffff8021ac00 <__RME_Pgt_Del_Check>:
Input       : struct RME_Cap_Pgt Pgt_Op* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If can be deleted, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Del_Check(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff8021ac00:	f3 0f 1e fa          	endbr64

    return 0;
}
ffffffff8021ac04:	31 c0                	xor    %eax,%eax
ffffffff8021ac06:	c3                   	ret
ffffffff8021ac07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021ac0e:	00 00 

ffffffff8021ac10 <__RME_Pgt_Page_Map>:
                                architecture specific page table's settings.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Map(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Paddr, rme_ptr_t Pos, rme_ptr_t Flags)
{
ffffffff8021ac10:	f3 0f 1e fa          	endbr64
    rme_ptr_t* Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff8021ac14:	48 89 c8             	mov    %rcx,%rax
ffffffff8021ac17:	83 e0 01             	and    $0x1,%eax
ffffffff8021ac1a:	74 4c                	je     ffffffff8021ac68 <__RME_Pgt_Page_Map+0x58>
        return RME_ERR_PGT_OPFAIL;

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021ac1c:	48 81 fa ff 00 00 00 	cmp    $0xff,%rdx
ffffffff8021ac23:	76 06                	jbe    ffffffff8021ac2b <__RME_Pgt_Page_Map+0x1b>
ffffffff8021ac25:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021ac29:	75 42                	jne    ffffffff8021ac6d <__RME_Pgt_Page_Map+0x5d>

    /* Generate flags */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;
ffffffff8021ac2b:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff8021ac32:	ff 0f 00 
ffffffff8021ac35:	83 e1 df             	and    $0xffffffdf,%ecx
ffffffff8021ac38:	48 21 c6             	and    %rax,%rsi

    /* Try to map it in */
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff8021ac3b:	48 8b 47 18          	mov    0x18(%rdi),%rax
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;
ffffffff8021ac3f:	48 0b 34 cd a0 cc 21 	or     -0x7fde3360(,%rcx,8),%rsi
ffffffff8021ac46:	80 
ffffffff8021ac47:	40 80 ce 84          	or     $0x84,%sil
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff8021ac4b:	48 8d 14 d0          	lea    (%rax,%rdx,8),%rdx
ffffffff8021ac4f:	31 c0                	xor    %eax,%eax
ffffffff8021ac51:	f0 48 0f b1 32       	lock cmpxchg %rsi,(%rdx)
ffffffff8021ac56:	40 0f 94 c6          	sete   %sil
ffffffff8021ac5a:	31 c0                	xor    %eax,%eax
ffffffff8021ac5c:	40 84 f6             	test   %sil,%sil
ffffffff8021ac5f:	0f 94 c0             	sete   %al
ffffffff8021ac62:	c3                   	ret
ffffffff8021ac63:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return RME_ERR_PGT_OPFAIL;
ffffffff8021ac68:	b8 01 00 00 00       	mov    $0x1,%eax
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021ac6d:	c3                   	ret
ffffffff8021ac6e:	66 90                	xchg   %ax,%ax

ffffffff8021ac70 <__RME_Pgt_Page_Unmap>:
              rme_ptr_t Pos - The position in the page table.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Unmap(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos)
{
ffffffff8021ac70:	f3 0f 1e fa          	endbr64
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021ac74:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021ac7b:	76 0b                	jbe    ffffffff8021ac88 <__RME_Pgt_Page_Unmap+0x18>
        return RME_ERR_PGT_OPFAIL;
ffffffff8021ac7d:	ba 01 00 00 00       	mov    $0x1,%edx
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021ac82:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021ac86:	75 2b                	jne    ffffffff8021acb3 <__RME_Pgt_Page_Unmap+0x43>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);

    /* Make sure that there is something */
    Temp=Table[Pos];
ffffffff8021ac88:	48 8b 47 18          	mov    0x18(%rdi),%rax
        return RME_ERR_PGT_OPFAIL;
ffffffff8021ac8c:	ba 01 00 00 00       	mov    $0x1,%edx
    Temp=Table[Pos];
ffffffff8021ac91:	48 8d 0c f0          	lea    (%rax,%rsi,8),%rcx
ffffffff8021ac95:	48 8b 01             	mov    (%rcx),%rax
    if(Temp==0)
ffffffff8021ac98:	48 85 c0             	test   %rax,%rax
ffffffff8021ac9b:	74 16                	je     ffffffff8021acb3 <__RME_Pgt_Page_Unmap+0x43>
        return RME_ERR_PGT_OPFAIL;

    /* Is this a page directory? We cannot unmap page directories like this */
    if((RME_PGT_SIZEORD(Pgt_Op->Order)!=RME_PGT_SIZE_4K)&&((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff8021ac9d:	a8 80                	test   $0x80,%al
ffffffff8021ac9f:	74 12                	je     ffffffff8021acb3 <__RME_Pgt_Page_Unmap+0x43>
ffffffff8021aca1:	31 d2                	xor    %edx,%edx
ffffffff8021aca3:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021aca8:	0f 94 c2             	sete   %dl
        return RME_ERR_PGT_OPFAIL;

    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Table[Pos]),Temp,0)==0)
ffffffff8021acab:	84 d2                	test   %dl,%dl
ffffffff8021acad:	0f 94 c2             	sete   %dl
ffffffff8021acb0:	0f b6 d2             	movzbl %dl,%edx
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021acb3:	48 89 d0             	mov    %rdx,%rax
ffffffff8021acb6:	c3                   	ret
ffffffff8021acb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021acbe:	00 00 

ffffffff8021acc0 <__RME_Pgt_Pgdir_Map>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Map(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                struct RME_Cap_Pgt* Pgt_Child, rme_ptr_t Flags)
{
ffffffff8021acc0:	f3 0f 1e fa          	endbr64
ffffffff8021acc4:	48 89 f0             	mov    %rsi,%rax
ffffffff8021acc7:	48 89 d6             	mov    %rdx,%rsi
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff8021acca:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021accd:	83 e2 01             	and    $0x1,%edx
ffffffff8021acd0:	74 5e                	je     ffffffff8021ad30 <__RME_Pgt_Pgdir_Map+0x70>
        return RME_ERR_PGT_OPFAIL;

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021acd2:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff8021acd8:	76 06                	jbe    ffffffff8021ace0 <__RME_Pgt_Pgdir_Map+0x20>
ffffffff8021acda:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021acde:	75 44                	jne    ffffffff8021ad24 <__RME_Pgt_Pgdir_Map+0x64>
    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
    Child_Table=RME_CAP_GETOBJ(Pgt_Child,rme_ptr_t*);

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021ace0:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021ace7:	80 00 00 
ffffffff8021acea:	83 e1 df             	and    $0xffffffdf,%ecx
ffffffff8021aced:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff8021acf1:	48 be 00 f0 ff ff ff 	movabs $0xffffffffff000,%rsi
ffffffff8021acf8:	ff 0f 00 
ffffffff8021acfb:	48 21 f2             	and    %rsi,%rdx
ffffffff8021acfe:	48 0b 14 cd a0 cc 21 	or     -0x7fde3360(,%rcx,8),%rdx
ffffffff8021ad05:	80 

    /* Try to map it in - may need to increase some count */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff8021ad06:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021ad0a:	48 83 ca 04          	or     $0x4,%rdx
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff8021ad0e:	48 8d 0c c1          	lea    (%rcx,%rax,8),%rcx
ffffffff8021ad12:	31 c0                	xor    %eax,%eax
ffffffff8021ad14:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021ad19:	0f 94 c2             	sete   %dl
ffffffff8021ad1c:	84 d2                	test   %dl,%dl
ffffffff8021ad1e:	0f 94 c2             	sete   %dl
ffffffff8021ad21:	0f b6 d2             	movzbl %dl,%edx
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021ad24:	48 89 d0             	mov    %rdx,%rax
ffffffff8021ad27:	c3                   	ret
ffffffff8021ad28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021ad2f:	00 
        return RME_ERR_PGT_OPFAIL;
ffffffff8021ad30:	ba 01 00 00 00       	mov    $0x1,%edx
}
ffffffff8021ad35:	48 89 d0             	mov    %rdx,%rax
ffffffff8021ad38:	c3                   	ret
ffffffff8021ad39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021ad40 <__RME_Pgt_Pgdir_Unmap>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Unmap(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                  struct RME_Cap_Pgt* Pgt_Child)
{
ffffffff8021ad40:	f3 0f 1e fa          	endbr64
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021ad44:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021ad4b:	76 0b                	jbe    ffffffff8021ad58 <__RME_Pgt_Pgdir_Unmap+0x18>
        return RME_ERR_PGT_OPFAIL;
ffffffff8021ad4d:	ba 01 00 00 00       	mov    $0x1,%edx
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021ad52:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021ad56:	75 31                	jne    ffffffff8021ad89 <__RME_Pgt_Pgdir_Unmap+0x49>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);

    /* Make sure that there is something */
    Temp=Parent_Table[Pos];
ffffffff8021ad58:	48 8b 47 18          	mov    0x18(%rdi),%rax
        return RME_ERR_PGT_OPFAIL;
ffffffff8021ad5c:	ba 01 00 00 00       	mov    $0x1,%edx
    Temp=Parent_Table[Pos];
ffffffff8021ad61:	48 8d 0c f0          	lea    (%rax,%rsi,8),%rcx
ffffffff8021ad65:	48 8b 01             	mov    (%rcx),%rax
    if(Temp==0)
ffffffff8021ad68:	48 85 c0             	test   %rax,%rax
ffffffff8021ad6b:	74 1c                	je     ffffffff8021ad89 <__RME_Pgt_Pgdir_Unmap+0x49>
        return RME_ERR_PGT_OPFAIL;

    /* Is this a page? We cannot unmap pages like this */
    if((RME_PGT_SIZEORD(Pgt_Parent->Order)==RME_PGT_SIZE_4K)||((Temp&RME_X64_MMU_PDE_SUP)!=0))
ffffffff8021ad6d:	48 89 c6             	mov    %rax,%rsi
ffffffff8021ad70:	81 e6 80 00 00 00    	and    $0x80,%esi
ffffffff8021ad76:	75 11                	jne    ffffffff8021ad89 <__RME_Pgt_Pgdir_Unmap+0x49>
ffffffff8021ad78:	f0 48 0f b1 31       	lock cmpxchg %rsi,(%rcx)
ffffffff8021ad7d:	40 0f 94 c6          	sete   %sil

    /* Is this child table mapped here? - check that in the future */

    Child_Table=(rme_ptr_t*)Temp;
    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),Temp,0)==0)
ffffffff8021ad81:	31 d2                	xor    %edx,%edx
ffffffff8021ad83:	40 84 f6             	test   %sil,%sil
ffffffff8021ad86:	0f 94 c2             	sete   %dl
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021ad89:	48 89 d0             	mov    %rdx,%rax
ffffffff8021ad8c:	c3                   	ret
ffffffff8021ad8d:	0f 1f 00             	nopl   (%rax)

ffffffff8021ad90 <__RME_Pgt_Lookup>:
Output      : rme_ptr_t* Paddr - The physical address of the page.
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Lookup(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos, rme_ptr_t* Paddr, rme_ptr_t* Flags)
{
ffffffff8021ad90:	f3 0f 1e fa          	endbr64
ffffffff8021ad94:	49 89 c8             	mov    %rcx,%r8
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Check if the position is within the range of this page table */
    if((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0)
        return RME_ERR_PGT_OPFAIL;
ffffffff8021ad97:	b9 01 00 00 00       	mov    $0x1,%ecx
    if((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0)
ffffffff8021ad9c:	48 85 f6             	test   %rsi,%rsi
ffffffff8021ad9f:	75 5d                	jne    ffffffff8021adfe <__RME_Pgt_Lookup+0x6e>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
    /* Get the position requested - atomic read */
    Temp=Table[Pos];
ffffffff8021ada1:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8021ada5:	48 8b 00             	mov    (%rax),%rax
        if((Temp&RME_X64_MMU_P)==0)
            return RME_ERR_PGT_OPFAIL;
    }
    else
    {
        if(((Temp&RME_X64_MMU_P)==0)||((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff8021ada8:	48 89 c6             	mov    %rax,%rsi
ffffffff8021adab:	48 f7 d6             	not    %rsi
ffffffff8021adae:	81 e6 81 00 00 00    	and    $0x81,%esi
ffffffff8021adb4:	75 48                	jne    ffffffff8021adfe <__RME_Pgt_Lookup+0x6e>
            return RME_ERR_PGT_OPFAIL;
    }

    /* This is a page. Return the physical address and flags */
    if(Paddr!=0)
ffffffff8021adb6:	48 85 d2             	test   %rdx,%rdx
ffffffff8021adb9:	74 10                	je     ffffffff8021adcb <__RME_Pgt_Lookup+0x3b>
        *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff8021adbb:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff8021adc2:	ff 0f 00 
ffffffff8021adc5:	48 21 c1             	and    %rax,%rcx
ffffffff8021adc8:	48 89 0a             	mov    %rcx,(%rdx)

    if(Flags!=0)
ffffffff8021adcb:	4d 85 c0             	test   %r8,%r8
ffffffff8021adce:	74 2c                	je     ffffffff8021adfc <__RME_Pgt_Lookup+0x6c>
        *Flags=RME_X64_PGFLG_NAT2RME(Temp);
ffffffff8021add0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021add3:	48 89 c1             	mov    %rax,%rcx
ffffffff8021add6:	48 d1 e8             	shr    $1,%rax
ffffffff8021add9:	48 c1 ea 3f          	shr    $0x3f,%rdx
ffffffff8021addd:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff8021ade1:	83 e0 01             	and    $0x1,%eax
ffffffff8021ade4:	48 c1 e2 03          	shl    $0x3,%rdx
ffffffff8021ade8:	83 e1 06             	and    $0x6,%ecx
ffffffff8021adeb:	48 09 ca             	or     %rcx,%rdx
ffffffff8021adee:	48 09 d0             	or     %rdx,%rax
ffffffff8021adf1:	48 8b 04 c5 20 cc 21 	mov    -0x7fde33e0(,%rax,8),%rax
ffffffff8021adf8:	80 
ffffffff8021adf9:	49 89 00             	mov    %rax,(%r8)

    return 0;
ffffffff8021adfc:	31 c9                	xor    %ecx,%ecx
}
ffffffff8021adfe:	48 89 c8             	mov    %rcx,%rax
ffffffff8021ae01:	c3                   	ret
ffffffff8021ae02:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021ae09:	00 00 00 00 
ffffffff8021ae0d:	0f 1f 00             	nopl   (%rax)

ffffffff8021ae10 <__RME_Pgt_Walk>:
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Walk(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Vaddr, rme_ptr_t* Pgt,
                           rme_ptr_t* Map_Vaddr, rme_ptr_t* Paddr, rme_ptr_t* Size_Order, rme_ptr_t* Num_Order, rme_ptr_t* Flags)
{
ffffffff8021ae10:	f3 0f 1e fa          	endbr64
ffffffff8021ae14:	41 56                	push   %r14
ffffffff8021ae16:	41 55                	push   %r13
ffffffff8021ae18:	41 54                	push   %r12
ffffffff8021ae1a:	55                   	push   %rbp
ffffffff8021ae1b:	53                   	push   %rbx
    /* Check if this is the top-level page table */
    if(((Pgt_Op->Base)&RME_PGT_TOP)==0)
        return RME_ERR_PGT_OPFAIL;

    /* Are we attempting a kernel or non-canonical lookup? If yes, stop immediately */
    if(Vaddr>=0x7FFFFFFFFFFFULL)
ffffffff8021ae1c:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021ae20:	0f 84 9a 01 00 00    	je     ffffffff8021afc0 <__RME_Pgt_Walk+0x1b0>
ffffffff8021ae26:	49 89 d3             	mov    %rdx,%r11
ffffffff8021ae29:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffe,%rdx
ffffffff8021ae30:	7f 00 00 
ffffffff8021ae33:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021ae36:	0f 82 84 01 00 00    	jb     ffffffff8021afc0 <__RME_Pgt_Walk+0x1b0>
        return RME_ERR_PGT_OPFAIL;

    /* Get the table and start lookup */
    Table=RME_CAP_GETOBJ(Pgt_Op, rme_ptr_t*);
ffffffff8021ae3c:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
    Flags_Accum=0xFFF;
    No_Execute=0;
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021ae40:	48 89 f0             	mov    %rsi,%rax
ffffffff8021ae43:	48 c1 e8 27          	shr    $0x27,%rax
        /* Atomic read */
        Temp=Table[Pos];
ffffffff8021ae47:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021ae4b:	48 89 c3             	mov    %rax,%rbx
ffffffff8021ae4e:	83 e3 01             	and    $0x1,%ebx
ffffffff8021ae51:	0f 84 69 01 00 00    	je     ffffffff8021afc0 <__RME_Pgt_Walk+0x1b0>
ffffffff8021ae57:	49 89 ca             	mov    %rcx,%r10
            return RME_ERR_PGT_OPFAIL;
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021ae5a:	a8 80                	test   $0x80,%al
ffffffff8021ae5c:	0f 85 76 01 00 00    	jne    ffffffff8021afd8 <__RME_Pgt_Walk+0x1c8>
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Flags_Accum&=Temp;
            No_Execute|=Temp&RME_X64_MMU_NX;
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021ae62:	48 bd 00 f0 ff ff ff 	movabs $0xffffffffff000,%rbp
ffffffff8021ae69:	ff 0f 00 
ffffffff8021ae6c:	48 89 c7             	mov    %rax,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021ae6f:	48 89 f1             	mov    %rsi,%rcx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021ae72:	49 bd 00 00 00 00 00 	movabs $0xffff800000000000,%r13
ffffffff8021ae79:	80 ff ff 
ffffffff8021ae7c:	48 21 ef             	and    %rbp,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021ae7f:	48 c1 e9 1e          	shr    $0x1e,%rcx
            Flags_Accum&=Temp;
ffffffff8021ae83:	48 89 c2             	mov    %rax,%rdx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021ae86:	4c 01 ef             	add    %r13,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021ae89:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
            Flags_Accum&=Temp;
ffffffff8021ae8f:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
        Temp=Table[Pos];
ffffffff8021ae95:	48 8b 0c cf          	mov    (%rdi,%rcx,8),%rcx
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021ae99:	49 89 ce             	mov    %rcx,%r14
ffffffff8021ae9c:	41 83 e6 01          	and    $0x1,%r14d
ffffffff8021aea0:	0f 84 1f 01 00 00    	je     ffffffff8021afc5 <__RME_Pgt_Walk+0x1b5>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021aea6:	f6 c1 80             	test   $0x80,%cl
ffffffff8021aea9:	0f 85 41 01 00 00    	jne    ffffffff8021aff0 <__RME_Pgt_Walk+0x1e0>
            Flags_Accum&=Temp;
ffffffff8021aeaf:	48 09 c8             	or     %rcx,%rax
ffffffff8021aeb2:	48 21 ca             	and    %rcx,%rdx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021aeb5:	48 21 e9             	and    %rbp,%rcx
ffffffff8021aeb8:	49 89 c4             	mov    %rax,%r12
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021aebb:	48 89 f0             	mov    %rsi,%rax
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021aebe:	4a 8d 3c 29          	lea    (%rcx,%r13,1),%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021aec2:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021aec6:	25 ff 01 00 00       	and    $0x1ff,%eax
        Temp=Table[Pos];
ffffffff8021aecb:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021aecf:	48 89 c3             	mov    %rax,%rbx
ffffffff8021aed2:	83 e3 01             	and    $0x1,%ebx
ffffffff8021aed5:	0f 84 34 01 00 00    	je     ffffffff8021b00f <__RME_Pgt_Walk+0x1ff>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021aedb:	a8 80                	test   $0x80,%al
ffffffff8021aedd:	0f 85 31 01 00 00    	jne    ffffffff8021b014 <__RME_Pgt_Walk+0x204>
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021aee3:	49 09 c4             	or     %rax,%r12
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021aee6:	48 21 c5             	and    %rax,%rbp
            Flags_Accum&=Temp;
ffffffff8021aee9:	48 21 c2             	and    %rax,%rdx
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021aeec:	48 89 f0             	mov    %rsi,%rax
ffffffff8021aeef:	48 c1 e8 0c          	shr    $0xc,%rax
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021aef3:	4a 8d 7c 2d 00       	lea    0x0(%rbp,%r13,1),%rdi
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021aef8:	48 b9 00 00 00 00 00 	movabs $0x8000000000000000,%rcx
ffffffff8021aeff:	00 00 80 
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021af02:	25 ff 01 00 00       	and    $0x1ff,%eax
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021af07:	49 21 cc             	and    %rcx,%r12
        Temp=Table[Pos];
ffffffff8021af0a:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021af0e:	a8 01                	test   $0x1,%al
ffffffff8021af10:	0f 84 af 00 00 00    	je     ffffffff8021afc5 <__RME_Pgt_Walk+0x1b5>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021af16:	bb 0c 00 00 00       	mov    $0xc,%ebx
ffffffff8021af1b:	b9 0c 00 00 00       	mov    $0xc,%ecx
            if(Pgt!=0)
ffffffff8021af20:	4d 85 db             	test   %r11,%r11
ffffffff8021af23:	74 03                	je     ffffffff8021af28 <__RME_Pgt_Walk+0x118>
                *Pgt=(rme_ptr_t)Table;
ffffffff8021af25:	49 89 3b             	mov    %rdi,(%r11)
            if(Map_Vaddr!=0)
ffffffff8021af28:	4d 85 d2             	test   %r10,%r10
ffffffff8021af2b:	74 10                	je     ffffffff8021af3d <__RME_Pgt_Walk+0x12d>
                *Map_Vaddr=RME_ROUND_DOWN(Vaddr,Size_Cnt);
ffffffff8021af2d:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
ffffffff8021af34:	48 d3 e7             	shl    %cl,%rdi
ffffffff8021af37:	48 21 f7             	and    %rsi,%rdi
ffffffff8021af3a:	49 89 3a             	mov    %rdi,(%r10)
            if(Paddr!=0)
ffffffff8021af3d:	4d 85 c0             	test   %r8,%r8
ffffffff8021af40:	74 10                	je     ffffffff8021af52 <__RME_Pgt_Walk+0x142>
                *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff8021af42:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff8021af49:	ff 0f 00 
ffffffff8021af4c:	48 21 c1             	and    %rax,%rcx
ffffffff8021af4f:	49 89 08             	mov    %rcx,(%r8)
            if(Size_Order!=0)
ffffffff8021af52:	4d 85 c9             	test   %r9,%r9
ffffffff8021af55:	74 03                	je     ffffffff8021af5a <__RME_Pgt_Walk+0x14a>
                *Size_Order=Size_Cnt;
ffffffff8021af57:	49 89 19             	mov    %rbx,(%r9)
            if(Num_Order!=0)
ffffffff8021af5a:	48 83 7c 24 30 00    	cmpq   $0x0,0x30(%rsp)
ffffffff8021af60:	74 0c                	je     ffffffff8021af6e <__RME_Pgt_Walk+0x15e>
                *Num_Order=RME_PGT_NUM_512;
ffffffff8021af62:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
ffffffff8021af67:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
            if(Flags!=0)
ffffffff8021af6e:	48 83 7c 24 38 00    	cmpq   $0x0,0x38(%rsp)
ffffffff8021af74:	74 37                	je     ffffffff8021afad <__RME_Pgt_Walk+0x19d>
                *Flags=RME_X64_PGFLG_NAT2RME(No_Execute|(Temp&Flags_Accum));
ffffffff8021af76:	48 21 c2             	and    %rax,%rdx
ffffffff8021af79:	48 8b 5c 24 38       	mov    0x38(%rsp),%rbx
ffffffff8021af7e:	4c 09 e2             	or     %r12,%rdx
ffffffff8021af81:	48 89 d0             	mov    %rdx,%rax
ffffffff8021af84:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021af87:	48 d1 ea             	shr    $1,%rdx
ffffffff8021af8a:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8021af8e:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff8021af92:	83 e2 01             	and    $0x1,%edx
ffffffff8021af95:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8021af99:	83 e1 06             	and    $0x6,%ecx
ffffffff8021af9c:	48 09 c8             	or     %rcx,%rax
ffffffff8021af9f:	48 09 d0             	or     %rdx,%rax
ffffffff8021afa2:	48 8b 04 c5 20 cc 21 	mov    -0x7fde33e0(,%rax,8),%rax
ffffffff8021afa9:	80 
ffffffff8021afaa:	48 89 03             	mov    %rax,(%rbx)

        /* The size order always decreases by 512 */
        Size_Cnt-=RME_PGT_SIZE_512B;
    }

    return 0;
ffffffff8021afad:	31 db                	xor    %ebx,%ebx
}
ffffffff8021afaf:	48 89 d8             	mov    %rbx,%rax
ffffffff8021afb2:	5b                   	pop    %rbx
ffffffff8021afb3:	5d                   	pop    %rbp
ffffffff8021afb4:	41 5c                	pop    %r12
ffffffff8021afb6:	41 5d                	pop    %r13
ffffffff8021afb8:	41 5e                	pop    %r14
ffffffff8021afba:	c3                   	ret
ffffffff8021afbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return RME_ERR_PGT_OPFAIL;
ffffffff8021afc0:	bb 01 00 00 00       	mov    $0x1,%ebx
}
ffffffff8021afc5:	48 89 d8             	mov    %rbx,%rax
ffffffff8021afc8:	5b                   	pop    %rbx
ffffffff8021afc9:	5d                   	pop    %rbp
ffffffff8021afca:	41 5c                	pop    %r12
ffffffff8021afcc:	41 5d                	pop    %r13
ffffffff8021afce:	41 5e                	pop    %r14
ffffffff8021afd0:	c3                   	ret
ffffffff8021afd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    No_Execute=0;
ffffffff8021afd8:	45 31 e4             	xor    %r12d,%r12d
    Flags_Accum=0xFFF;
ffffffff8021afdb:	ba ff 0f 00 00       	mov    $0xfff,%edx
    Size_Cnt=RME_PGT_SIZE_512G;
ffffffff8021afe0:	bb 27 00 00 00       	mov    $0x27,%ebx
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021afe5:	b9 27 00 00 00       	mov    $0x27,%ecx
ffffffff8021afea:	e9 31 ff ff ff       	jmp    ffffffff8021af20 <__RME_Pgt_Walk+0x110>
ffffffff8021afef:	90                   	nop
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021aff0:	49 bc 00 00 00 00 00 	movabs $0x8000000000000000,%r12
ffffffff8021aff7:	00 00 80 
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff8021affa:	bb 1e 00 00 00       	mov    $0x1e,%ebx
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021afff:	49 21 c4             	and    %rax,%r12
        Temp=Table[Pos];
ffffffff8021b002:	48 89 c8             	mov    %rcx,%rax
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b005:	b9 1e 00 00 00       	mov    $0x1e,%ecx
ffffffff8021b00a:	e9 11 ff ff ff       	jmp    ffffffff8021af20 <__RME_Pgt_Walk+0x110>
        return RME_ERR_PGT_OPFAIL;
ffffffff8021b00f:	4c 89 f3             	mov    %r14,%rbx
ffffffff8021b012:	eb b1                	jmp    ffffffff8021afc5 <__RME_Pgt_Walk+0x1b5>
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b014:	48 b9 00 00 00 00 00 	movabs $0x8000000000000000,%rcx
ffffffff8021b01b:	00 00 80 
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff8021b01e:	bb 15 00 00 00       	mov    $0x15,%ebx
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b023:	49 21 cc             	and    %rcx,%r12
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b026:	b9 15 00 00 00       	mov    $0x15,%ecx
ffffffff8021b02b:	e9 f0 fe ff ff       	jmp    ffffffff8021af20 <__RME_Pgt_Walk+0x110>

ffffffff8021b030 <__RME_Svc_Param_Get>:
/* End Function:__RME_X64_Pgt_Set*/

/*Function:__RME_Svc_Param_Get*/

void __RME_Svc_Param_Get(struct RME_Reg_Struct* Reg,rme_ptr_t* Svc,rme_ptr_t* Cid,rme_ptr_t* Param)
{
ffffffff8021b030:	f3 0f 1e fa          	endbr64

}
ffffffff8021b034:	c3                   	ret
ffffffff8021b035:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b03c:	00 00 00 00 

ffffffff8021b040 <__RME_Svc_Retval_Set>:
/*End Function:__RME_Svc_Param_Get*/

/*Function:__RME_Svc_Retval_Set*/

void __RME_Svc_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff8021b040:	f3 0f 1e fa          	endbr64

}
ffffffff8021b044:	c3                   	ret
ffffffff8021b045:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021b04c:	00 00 00 
ffffffff8021b04f:	90                   	nop

ffffffff8021b050 <main>:
{
ffffffff8021b050:	f3 0f 1e fa          	endbr64
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021b054:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b05b:	80 ff ff 
{
ffffffff8021b05e:	48 83 ec 08          	sub    $0x8,%rsp
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021b062:	48 01 c7             	add    %rax,%rdi
ffffffff8021b065:	48 89 3d bc b6 00 00 	mov    %rdi,0xb6bc(%rip)        # ffffffff80226728 <RME_X64_MBInfo>
    _RME_Kmain(RME_KOM_STACK_ADDR);
ffffffff8021b06c:	48 c7 c7 00 b8 20 80 	mov    $0xffffffff8020b800,%rdi
ffffffff8021b073:	e8 3b 08 ff ff       	call   ffffffff8020b8b3 <_RME_Kmain>
}
ffffffff8021b078:	31 c0                	xor    %eax,%eax
ffffffff8021b07a:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021b07e:	c3                   	ret

ffffffff8021b07f <__RME_Lowlvl_Init.cold>:
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff8021b07f:	8b 04 25 10 00 00 00 	mov    0x10,%eax
ffffffff8021b086:	0f 0b                	ud2
