
./Object/RME：     文件格式 elf64-x86-64


Disassembly of section .text:

ffffffff80100000 <__RME_X64_Mboot_Header>:
ffffffff80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
ffffffff80100006:	01 00                	add    %eax,(%rax)
ffffffff80100008:	fe 4f 51             	decb   0x51(%rdi)
ffffffff8010000b:	e4 00                	in     $0x0,%al
ffffffff8010000d:	00 10                	add    %dl,(%rax)
ffffffff8010000f:	00 00                	add    %al,(%rax)
ffffffff80100011:	00 10                	add    %dl,(%rax)
ffffffff80100013:	00 00                	add    %al,(%rax)
ffffffff80100015:	e0 21                	loopne ffffffff80100038 <__RME_X64_Mboot_Header+0x38>
ffffffff80100017:	00 38                	add    %bh,(%rax)
ffffffff80100019:	77 22                	ja     ffffffff8010003d <__RME_X64_Mboot_Header+0x3d>
ffffffff8010001b:	00 00                	add    %al,(%rax)
ffffffff8010001d:	80 10 00             	adcb   $0x0,(%rax)
ffffffff80100020:	90                   	nop
ffffffff80100021:	e9 da 0f 00 00       	jmp    ffffffff80101000 <__RME_X64_Mboot_Header+0x1000>
ffffffff80100026:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010002d:	00 00 00 00 
ffffffff80100031:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100038:	00 00 00 00 
ffffffff8010003c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100043:	00 00 00 00 
ffffffff80100047:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010004e:	00 00 00 00 
ffffffff80100052:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100059:	00 00 00 00 
ffffffff8010005d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100064:	00 00 00 00 
ffffffff80100068:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010006f:	00 00 00 00 
ffffffff80100073:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010007a:	00 00 00 00 
ffffffff8010007e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100085:	00 00 00 00 
ffffffff80100089:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100090:	00 00 00 00 
ffffffff80100094:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010009b:	00 00 00 00 
ffffffff8010009f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000a6:	00 00 00 00 
ffffffff801000aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000b1:	00 00 00 00 
ffffffff801000b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000bc:	00 00 00 00 
ffffffff801000c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000c7:	00 00 00 00 
ffffffff801000cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000d2:	00 00 00 00 
ffffffff801000d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000dd:	00 00 00 00 
ffffffff801000e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000e8:	00 00 00 00 
ffffffff801000ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000f3:	00 00 00 00 
ffffffff801000f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000fe:	00 00 00 00 
ffffffff80100102:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100109:	00 00 00 00 
ffffffff8010010d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100114:	00 00 00 00 
ffffffff80100118:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010011f:	00 00 00 00 
ffffffff80100123:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010012a:	00 00 00 00 
ffffffff8010012e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100135:	00 00 00 00 
ffffffff80100139:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100140:	00 00 00 00 
ffffffff80100144:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010014b:	00 00 00 00 
ffffffff8010014f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100156:	00 00 00 00 
ffffffff8010015a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100161:	00 00 00 00 
ffffffff80100165:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010016c:	00 00 00 00 
ffffffff80100170:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100177:	00 00 00 00 
ffffffff8010017b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100182:	00 00 00 00 
ffffffff80100186:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010018d:	00 00 00 00 
ffffffff80100191:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100198:	00 00 00 00 
ffffffff8010019c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001a3:	00 00 00 00 
ffffffff801001a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ae:	00 00 00 00 
ffffffff801001b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001b9:	00 00 00 00 
ffffffff801001bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001c4:	00 00 00 00 
ffffffff801001c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001cf:	00 00 00 00 
ffffffff801001d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001da:	00 00 00 00 
ffffffff801001de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001e5:	00 00 00 00 
ffffffff801001e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001f0:	00 00 00 00 
ffffffff801001f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001fb:	00 00 00 00 
ffffffff801001ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100206:	00 00 00 00 
ffffffff8010020a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100211:	00 00 00 00 
ffffffff80100215:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010021c:	00 00 00 00 
ffffffff80100220:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100227:	00 00 00 00 
ffffffff8010022b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100232:	00 00 00 00 
ffffffff80100236:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010023d:	00 00 00 00 
ffffffff80100241:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100248:	00 00 00 00 
ffffffff8010024c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100253:	00 00 00 00 
ffffffff80100257:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010025e:	00 00 00 00 
ffffffff80100262:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100269:	00 00 00 00 
ffffffff8010026d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100274:	00 00 00 00 
ffffffff80100278:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010027f:	00 00 00 00 
ffffffff80100283:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010028a:	00 00 00 00 
ffffffff8010028e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100295:	00 00 00 00 
ffffffff80100299:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002a0:	00 00 00 00 
ffffffff801002a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ab:	00 00 00 00 
ffffffff801002af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002b6:	00 00 00 00 
ffffffff801002ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002c1:	00 00 00 00 
ffffffff801002c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002cc:	00 00 00 00 
ffffffff801002d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002d7:	00 00 00 00 
ffffffff801002db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002e2:	00 00 00 00 
ffffffff801002e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ed:	00 00 00 00 
ffffffff801002f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002f8:	00 00 00 00 
ffffffff801002fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100303:	00 00 00 00 
ffffffff80100307:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010030e:	00 00 00 00 
ffffffff80100312:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100319:	00 00 00 00 
ffffffff8010031d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100324:	00 00 00 00 
ffffffff80100328:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010032f:	00 00 00 00 
ffffffff80100333:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010033a:	00 00 00 00 
ffffffff8010033e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100345:	00 00 00 00 
ffffffff80100349:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100350:	00 00 00 00 
ffffffff80100354:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010035b:	00 00 00 00 
ffffffff8010035f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100366:	00 00 00 00 
ffffffff8010036a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100371:	00 00 00 00 
ffffffff80100375:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010037c:	00 00 00 00 
ffffffff80100380:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100387:	00 00 00 00 
ffffffff8010038b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100392:	00 00 00 00 
ffffffff80100396:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010039d:	00 00 00 00 
ffffffff801003a1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003a8:	00 00 00 00 
ffffffff801003ac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003b3:	00 00 00 00 
ffffffff801003b7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003be:	00 00 00 00 
ffffffff801003c2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003c9:	00 00 00 00 
ffffffff801003cd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003d4:	00 00 00 00 
ffffffff801003d8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003df:	00 00 00 00 
ffffffff801003e3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003ea:	00 00 00 00 
ffffffff801003ee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003f5:	00 00 00 00 
ffffffff801003f9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100400:	00 00 00 00 
ffffffff80100404:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010040b:	00 00 00 00 
ffffffff8010040f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100416:	00 00 00 00 
ffffffff8010041a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100421:	00 00 00 00 
ffffffff80100425:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010042c:	00 00 00 00 
ffffffff80100430:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100437:	00 00 00 00 
ffffffff8010043b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100442:	00 00 00 00 
ffffffff80100446:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010044d:	00 00 00 00 
ffffffff80100451:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100458:	00 00 00 00 
ffffffff8010045c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100463:	00 00 00 00 
ffffffff80100467:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010046e:	00 00 00 00 
ffffffff80100472:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100479:	00 00 00 00 
ffffffff8010047d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100484:	00 00 00 00 
ffffffff80100488:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010048f:	00 00 00 00 
ffffffff80100493:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010049a:	00 00 00 00 
ffffffff8010049e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004a5:	00 00 00 00 
ffffffff801004a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004b0:	00 00 00 00 
ffffffff801004b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004bb:	00 00 00 00 
ffffffff801004bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004c6:	00 00 00 00 
ffffffff801004ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004d1:	00 00 00 00 
ffffffff801004d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004dc:	00 00 00 00 
ffffffff801004e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004e7:	00 00 00 00 
ffffffff801004eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004f2:	00 00 00 00 
ffffffff801004f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004fd:	00 00 00 00 
ffffffff80100501:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100508:	00 00 00 00 
ffffffff8010050c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100513:	00 00 00 00 
ffffffff80100517:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010051e:	00 00 00 00 
ffffffff80100522:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100529:	00 00 00 00 
ffffffff8010052d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100534:	00 00 00 00 
ffffffff80100538:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010053f:	00 00 00 00 
ffffffff80100543:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010054a:	00 00 00 00 
ffffffff8010054e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100555:	00 00 00 00 
ffffffff80100559:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100560:	00 00 00 00 
ffffffff80100564:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010056b:	00 00 00 00 
ffffffff8010056f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100576:	00 00 00 00 
ffffffff8010057a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100581:	00 00 00 00 
ffffffff80100585:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010058c:	00 00 00 00 
ffffffff80100590:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100597:	00 00 00 00 
ffffffff8010059b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005a2:	00 00 00 00 
ffffffff801005a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ad:	00 00 00 00 
ffffffff801005b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005b8:	00 00 00 00 
ffffffff801005bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005c3:	00 00 00 00 
ffffffff801005c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ce:	00 00 00 00 
ffffffff801005d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005d9:	00 00 00 00 
ffffffff801005dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005e4:	00 00 00 00 
ffffffff801005e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ef:	00 00 00 00 
ffffffff801005f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005fa:	00 00 00 00 
ffffffff801005fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100605:	00 00 00 00 
ffffffff80100609:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100610:	00 00 00 00 
ffffffff80100614:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010061b:	00 00 00 00 
ffffffff8010061f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100626:	00 00 00 00 
ffffffff8010062a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100631:	00 00 00 00 
ffffffff80100635:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010063c:	00 00 00 00 
ffffffff80100640:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100647:	00 00 00 00 
ffffffff8010064b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100652:	00 00 00 00 
ffffffff80100656:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010065d:	00 00 00 00 
ffffffff80100661:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100668:	00 00 00 00 
ffffffff8010066c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100673:	00 00 00 00 
ffffffff80100677:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010067e:	00 00 00 00 
ffffffff80100682:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100689:	00 00 00 00 
ffffffff8010068d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100694:	00 00 00 00 
ffffffff80100698:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010069f:	00 00 00 00 
ffffffff801006a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006aa:	00 00 00 00 
ffffffff801006ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006b5:	00 00 00 00 
ffffffff801006b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006c0:	00 00 00 00 
ffffffff801006c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006cb:	00 00 00 00 
ffffffff801006cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006d6:	00 00 00 00 
ffffffff801006da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006e1:	00 00 00 00 
ffffffff801006e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006ec:	00 00 00 00 
ffffffff801006f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006f7:	00 00 00 00 
ffffffff801006fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100702:	00 00 00 00 
ffffffff80100706:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010070d:	00 00 00 00 
ffffffff80100711:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100718:	00 00 00 00 
ffffffff8010071c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100723:	00 00 00 00 
ffffffff80100727:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010072e:	00 00 00 00 
ffffffff80100732:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100739:	00 00 00 00 
ffffffff8010073d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100744:	00 00 00 00 
ffffffff80100748:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010074f:	00 00 00 00 
ffffffff80100753:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010075a:	00 00 00 00 
ffffffff8010075e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100765:	00 00 00 00 
ffffffff80100769:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100770:	00 00 00 00 
ffffffff80100774:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010077b:	00 00 00 00 
ffffffff8010077f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100786:	00 00 00 00 
ffffffff8010078a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100791:	00 00 00 00 
ffffffff80100795:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010079c:	00 00 00 00 
ffffffff801007a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007a7:	00 00 00 00 
ffffffff801007ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007b2:	00 00 00 00 
ffffffff801007b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007bd:	00 00 00 00 
ffffffff801007c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007c8:	00 00 00 00 
ffffffff801007cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007d3:	00 00 00 00 
ffffffff801007d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007de:	00 00 00 00 
ffffffff801007e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007e9:	00 00 00 00 
ffffffff801007ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007f4:	00 00 00 00 
ffffffff801007f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007ff:	00 00 00 00 
ffffffff80100803:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010080a:	00 00 00 00 
ffffffff8010080e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100815:	00 00 00 00 
ffffffff80100819:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100820:	00 00 00 00 
ffffffff80100824:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010082b:	00 00 00 00 
ffffffff8010082f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100836:	00 00 00 00 
ffffffff8010083a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100841:	00 00 00 00 
ffffffff80100845:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010084c:	00 00 00 00 
ffffffff80100850:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100857:	00 00 00 00 
ffffffff8010085b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100862:	00 00 00 00 
ffffffff80100866:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010086d:	00 00 00 00 
ffffffff80100871:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100878:	00 00 00 00 
ffffffff8010087c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100883:	00 00 00 00 
ffffffff80100887:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010088e:	00 00 00 00 
ffffffff80100892:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100899:	00 00 00 00 
ffffffff8010089d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008a4:	00 00 00 00 
ffffffff801008a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008af:	00 00 00 00 
ffffffff801008b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008ba:	00 00 00 00 
ffffffff801008be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008c5:	00 00 00 00 
ffffffff801008c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008d0:	00 00 00 00 
ffffffff801008d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008db:	00 00 00 00 
ffffffff801008df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008e6:	00 00 00 00 
ffffffff801008ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008f1:	00 00 00 00 
ffffffff801008f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008fc:	00 00 00 00 
ffffffff80100900:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100907:	00 00 00 00 
ffffffff8010090b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100912:	00 00 00 00 
ffffffff80100916:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010091d:	00 00 00 00 
ffffffff80100921:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100928:	00 00 00 00 
ffffffff8010092c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100933:	00 00 00 00 
ffffffff80100937:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010093e:	00 00 00 00 
ffffffff80100942:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100949:	00 00 00 00 
ffffffff8010094d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100954:	00 00 00 00 
ffffffff80100958:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010095f:	00 00 00 00 
ffffffff80100963:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010096a:	00 00 00 00 
ffffffff8010096e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100975:	00 00 00 00 
ffffffff80100979:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100980:	00 00 00 00 
ffffffff80100984:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010098b:	00 00 00 00 
ffffffff8010098f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100996:	00 00 00 00 
ffffffff8010099a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009a1:	00 00 00 00 
ffffffff801009a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ac:	00 00 00 00 
ffffffff801009b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009b7:	00 00 00 00 
ffffffff801009bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009c2:	00 00 00 00 
ffffffff801009c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009cd:	00 00 00 00 
ffffffff801009d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009d8:	00 00 00 00 
ffffffff801009dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009e3:	00 00 00 00 
ffffffff801009e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ee:	00 00 00 00 
ffffffff801009f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009f9:	00 00 00 00 
ffffffff801009fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a04:	00 00 00 00 
ffffffff80100a08:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a0f:	00 00 00 00 
ffffffff80100a13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a1a:	00 00 00 00 
ffffffff80100a1e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a25:	00 00 00 00 
ffffffff80100a29:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a30:	00 00 00 00 
ffffffff80100a34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a3b:	00 00 00 00 
ffffffff80100a3f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a46:	00 00 00 00 
ffffffff80100a4a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a51:	00 00 00 00 
ffffffff80100a55:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a5c:	00 00 00 00 
ffffffff80100a60:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a67:	00 00 00 00 
ffffffff80100a6b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a72:	00 00 00 00 
ffffffff80100a76:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a7d:	00 00 00 00 
ffffffff80100a81:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a88:	00 00 00 00 
ffffffff80100a8c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a93:	00 00 00 00 
ffffffff80100a97:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a9e:	00 00 00 00 
ffffffff80100aa2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aa9:	00 00 00 00 
ffffffff80100aad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ab4:	00 00 00 00 
ffffffff80100ab8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100abf:	00 00 00 00 
ffffffff80100ac3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aca:	00 00 00 00 
ffffffff80100ace:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ad5:	00 00 00 00 
ffffffff80100ad9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ae0:	00 00 00 00 
ffffffff80100ae4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aeb:	00 00 00 00 
ffffffff80100aef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100af6:	00 00 00 00 
ffffffff80100afa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b01:	00 00 00 00 
ffffffff80100b05:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b0c:	00 00 00 00 
ffffffff80100b10:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b17:	00 00 00 00 
ffffffff80100b1b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b22:	00 00 00 00 
ffffffff80100b26:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b2d:	00 00 00 00 
ffffffff80100b31:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b38:	00 00 00 00 
ffffffff80100b3c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b43:	00 00 00 00 
ffffffff80100b47:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b4e:	00 00 00 00 
ffffffff80100b52:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b59:	00 00 00 00 
ffffffff80100b5d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b64:	00 00 00 00 
ffffffff80100b68:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b6f:	00 00 00 00 
ffffffff80100b73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b7a:	00 00 00 00 
ffffffff80100b7e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b85:	00 00 00 00 
ffffffff80100b89:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b90:	00 00 00 00 
ffffffff80100b94:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b9b:	00 00 00 00 
ffffffff80100b9f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ba6:	00 00 00 00 
ffffffff80100baa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bb1:	00 00 00 00 
ffffffff80100bb5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bbc:	00 00 00 00 
ffffffff80100bc0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bc7:	00 00 00 00 
ffffffff80100bcb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bd2:	00 00 00 00 
ffffffff80100bd6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bdd:	00 00 00 00 
ffffffff80100be1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100be8:	00 00 00 00 
ffffffff80100bec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bf3:	00 00 00 00 
ffffffff80100bf7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bfe:	00 00 00 00 
ffffffff80100c02:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c09:	00 00 00 00 
ffffffff80100c0d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c14:	00 00 00 00 
ffffffff80100c18:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c1f:	00 00 00 00 
ffffffff80100c23:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c2a:	00 00 00 00 
ffffffff80100c2e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c35:	00 00 00 00 
ffffffff80100c39:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c40:	00 00 00 00 
ffffffff80100c44:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c4b:	00 00 00 00 
ffffffff80100c4f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c56:	00 00 00 00 
ffffffff80100c5a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c61:	00 00 00 00 
ffffffff80100c65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c6c:	00 00 00 00 
ffffffff80100c70:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c77:	00 00 00 00 
ffffffff80100c7b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c82:	00 00 00 00 
ffffffff80100c86:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c8d:	00 00 00 00 
ffffffff80100c91:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c98:	00 00 00 00 
ffffffff80100c9c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ca3:	00 00 00 00 
ffffffff80100ca7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cae:	00 00 00 00 
ffffffff80100cb2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cb9:	00 00 00 00 
ffffffff80100cbd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cc4:	00 00 00 00 
ffffffff80100cc8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ccf:	00 00 00 00 
ffffffff80100cd3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cda:	00 00 00 00 
ffffffff80100cde:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ce5:	00 00 00 00 
ffffffff80100ce9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cf0:	00 00 00 00 
ffffffff80100cf4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cfb:	00 00 00 00 
ffffffff80100cff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d06:	00 00 00 00 
ffffffff80100d0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d11:	00 00 00 00 
ffffffff80100d15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d1c:	00 00 00 00 
ffffffff80100d20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d27:	00 00 00 00 
ffffffff80100d2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d32:	00 00 00 00 
ffffffff80100d36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d3d:	00 00 00 00 
ffffffff80100d41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d48:	00 00 00 00 
ffffffff80100d4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d53:	00 00 00 00 
ffffffff80100d57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d5e:	00 00 00 00 
ffffffff80100d62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d69:	00 00 00 00 
ffffffff80100d6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d74:	00 00 00 00 
ffffffff80100d78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d7f:	00 00 00 00 
ffffffff80100d83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d8a:	00 00 00 00 
ffffffff80100d8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d95:	00 00 00 00 
ffffffff80100d99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100da0:	00 00 00 00 
ffffffff80100da4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dab:	00 00 00 00 
ffffffff80100daf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100db6:	00 00 00 00 
ffffffff80100dba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dc1:	00 00 00 00 
ffffffff80100dc5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dcc:	00 00 00 00 
ffffffff80100dd0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dd7:	00 00 00 00 
ffffffff80100ddb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100de2:	00 00 00 00 
ffffffff80100de6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ded:	00 00 00 00 
ffffffff80100df1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100df8:	00 00 00 00 
ffffffff80100dfc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e03:	00 00 00 00 
ffffffff80100e07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e0e:	00 00 00 00 
ffffffff80100e12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e19:	00 00 00 00 
ffffffff80100e1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e24:	00 00 00 00 
ffffffff80100e28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e2f:	00 00 00 00 
ffffffff80100e33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e3a:	00 00 00 00 
ffffffff80100e3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e45:	00 00 00 00 
ffffffff80100e49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e50:	00 00 00 00 
ffffffff80100e54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e5b:	00 00 00 00 
ffffffff80100e5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e66:	00 00 00 00 
ffffffff80100e6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e71:	00 00 00 00 
ffffffff80100e75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e7c:	00 00 00 00 
ffffffff80100e80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e87:	00 00 00 00 
ffffffff80100e8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e92:	00 00 00 00 
ffffffff80100e96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e9d:	00 00 00 00 
ffffffff80100ea1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ea8:	00 00 00 00 
ffffffff80100eac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eb3:	00 00 00 00 
ffffffff80100eb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ebe:	00 00 00 00 
ffffffff80100ec2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ec9:	00 00 00 00 
ffffffff80100ecd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ed4:	00 00 00 00 
ffffffff80100ed8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100edf:	00 00 00 00 
ffffffff80100ee3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eea:	00 00 00 00 
ffffffff80100eee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ef5:	00 00 00 00 
ffffffff80100ef9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f00:	00 00 00 00 
ffffffff80100f04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f0b:	00 00 00 00 
ffffffff80100f0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f16:	00 00 00 00 
ffffffff80100f1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f21:	00 00 00 00 
ffffffff80100f25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f2c:	00 00 00 00 
ffffffff80100f30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f37:	00 00 00 00 
ffffffff80100f3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f42:	00 00 00 00 
ffffffff80100f46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f4d:	00 00 00 00 
ffffffff80100f51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f58:	00 00 00 00 
ffffffff80100f5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f63:	00 00 00 00 
ffffffff80100f67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f6e:	00 00 00 00 
ffffffff80100f72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f79:	00 00 00 00 
ffffffff80100f7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f84:	00 00 00 00 
ffffffff80100f88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f8f:	00 00 00 00 
ffffffff80100f93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f9a:	00 00 00 00 
ffffffff80100f9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fa5:	00 00 00 00 
ffffffff80100fa9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fb0:	00 00 00 00 
ffffffff80100fb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fbb:	00 00 00 00 
ffffffff80100fbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fc6:	00 00 00 00 
ffffffff80100fca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fd1:	00 00 00 00 
ffffffff80100fd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fdc:	00 00 00 00 
ffffffff80100fe0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fe7:	00 00 00 00 
ffffffff80100feb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ff2:	00 00 00 00 
ffffffff80100ff6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80100ffd:	00 00 00 
	...

ffffffff80108000 <__RME_X64_Mboot_Entry>:
/* The entry point after the bootloader finishes *****************************/
    .code32
    .align              16
__RME_X64_Mboot_Entry:
     /* EBX contains Multiboot data structure, let's relocate it to some other places */
     MOV                %EBX,%ESI
ffffffff80108000:	89 de                	mov    %ebx,%esi
     /* Zero 7 pages for our bootstrap page tables, PML4 @ 0x101000 */
     CLD
ffffffff80108002:	fc                   	cld
     XOR                %EAX,%EAX
ffffffff80108003:	31 c0                	xor    %eax,%eax
     MOV                $0x101000,%EDI
ffffffff80108005:	bf 00 10 10 00       	mov    $0x101000,%edi
     MOV                $0x7000,%ECX
ffffffff8010800a:	b9 00 70 00 00       	mov    $0x7000,%ecx
     REP STOSB
ffffffff8010800f:	f3 aa                	rep stos %al,%es:(%rdi)
     /* PML4[0] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff80108011:	b8 03 20 10 00       	mov    $0x102003,%eax
     MOV                %EAX,0x101000
ffffffff80108016:	a3 00 10 10 00 b8 03 	movabs %eax,0x102003b800101000
ffffffff8010801d:	20 10 
     /* PML4[256] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff8010801f:	00 a3 00 18 10 00    	add    %ah,0x101800(%rbx)
     MOV                %EAX,0x101800
     /* PML4[511] -> PDP-B @ 0x103000 */
     MOV                $(0x103000|3),%EAX
ffffffff80108025:	b8 03 30 10 00       	mov    $0x103003,%eax
     MOV                %EAX,0x101FF8
ffffffff8010802a:	a3 f8 1f 10 00 b8 03 	movabs %eax,0x104003b800101ff8
ffffffff80108031:	40 10 
     /* PDP-A[0] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff80108033:	00 a3 00 20 10 00    	add    %ah,0x102000(%rbx)
     MOV                %EAX,0x102000
     /* PDP-A[1] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108039:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x102008
ffffffff8010803e:	a3 08 20 10 00 b8 03 	movabs %eax,0x106003b800102008
ffffffff80108045:	60 10 
     /* PDP-A[2] -> PDE-C @ 0x106000 */
     MOV                $(0x106000|3),%EAX
ffffffff80108047:	00 a3 10 20 10 00    	add    %ah,0x102010(%rbx)
     MOV                %EAX,0x102010
     /* PDP-A[3] -> PDE-D @ 0x107000 unbufferable uncacheable */
     MOV                $(0x107000|3|0x18),%EAX
ffffffff8010804d:	b8 1b 70 10 00       	mov    $0x10701b,%eax
     MOV                %EAX,0x102018
ffffffff80108052:	a3 18 20 10 00 b8 03 	movabs %eax,0x104003b800102018
ffffffff80108059:	40 10 
     /* PDP-B[510] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff8010805b:	00 a3 f0 3f 10 00    	add    %ah,0x103ff0(%rbx)
     MOV                %EAX,0x103FF0
     /* PDP-B[511] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108061:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x103FF8
ffffffff80108066:	a3 f8 3f 10 00 b8 83 	movabs %eax,0x83b800103ff8
ffffffff8010806d:	00 00 
     /* PDE-A/B/C/D [0..511/0...511/0..511/0..511] -> 0..4094MB */
     MOV                $(0x83),%EAX
ffffffff8010806f:	00 bb 00 40 10 00    	add    %bh,0x104000(%rbx)
     MOV                $0x104000,%EBX
     MOV                $(512*4),%ECX
ffffffff80108075:	b9 00 08 00 00       	mov    $0x800,%ecx

ffffffff8010807a <PDE_Loop>:
PDE_Loop:
     MOV                %EAX,(%EBX)
ffffffff8010807a:	89 03                	mov    %eax,(%rbx)
     ADD                $0x200000,%EAX
ffffffff8010807c:	05 00 00 20 00       	add    $0x200000,%eax
     ADD                $0x8,%EBX
ffffffff80108081:	83 c3 08             	add    $0x8,%ebx
     DEC                %ECX
ffffffff80108084:	49 75 f3             	rex.WB jne ffffffff8010807a <PDE_Loop>
     JNZ                PDE_Loop
	 /* Clear ebx for initial processor boot.
      * When secondary processors boot, they'll call through
      * __RME_X64_SMP_Boot, but with a nonzero ebx.
      * We'll reuse these bootstrap pagetables and GDT. */
     XOR                %EBX,%EBX
ffffffff80108087:	31 db                	xor    %ebx,%ebx

ffffffff80108089 <__RME_X64_SMP_Boot_32>:
     /* SMP boot will run directly from here */
__RME_X64_SMP_Boot_32:
     /* CR3 -> PML4 @ 0x101000 */
     MOV                $0x101000,%EAX
ffffffff80108089:	b8 00 10 10 00       	mov    $0x101000,%eax
     MOV                %EAX,%CR3
ffffffff8010808e:	0f 22 d8             	mov    %rax,%cr3
     /* Load GDT */
     LGDT               (Boot_GDT_Desc-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff80108091:	0f 01 15 28 81 10 00 	lgdt   0x108128(%rip)        # ffffffff802101c0 <_RME_Kom_Boot_Crt+0x80>
     /* Enable PAE - CR4.PAE=1 */
     MOV                %CR4,%EAX
ffffffff80108098:	0f 20 e0             	mov    %cr4,%rax
     BTS                $5,%EAX
ffffffff8010809b:	0f ba e8 05          	bts    $0x5,%eax
     MOV                %EAX,%CR4
ffffffff8010809f:	0f 22 e0             	mov    %rax,%cr4
     /* Enable long mode and no execute bit - EFER.LME=1, EFER.NXE=1 */
     MOV                $0xC0000080,%ECX
ffffffff801080a2:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
     RDMSR
ffffffff801080a7:	0f 32                	rdmsr
     BTS                $8,%EAX
ffffffff801080a9:	0f ba e8 08          	bts    $0x8,%eax
     BTS                $11,%EAX
ffffffff801080ad:	0f ba e8 0b          	bts    $0xb,%eax
     WRMSR
ffffffff801080b1:	0f 30                	wrmsr
     /* Enable paging */
     MOV                %CR0,%EAX
ffffffff801080b3:	0f 20 c0             	mov    %cr0,%rax
     BTS                $31,%EAX
ffffffff801080b6:	0f ba e8 1f          	bts    $0x1f,%eax
     MOV                %EAX,%CR0
ffffffff801080ba:	0f 22 c0             	mov    %rax,%cr0
     /* Enable PCID - CR4.PCIDE=1 FIXME: this made things slower - due to extra logic for PCID processing *//*
     MOV                %CR4,%EAX
     BTS                $17,%EAX
     MOV                %EAX,%CR4 */
     /* shift to 64bit segment */
     LJMP               $8,$(Boot_Low_64-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff801080bd:	ea                   	(bad)
ffffffff801080be:	d0 80 10 00 08 00    	rolb   $1,0x80010(%rax)
ffffffff801080c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801080cb:	00 00 00 00 
ffffffff801080cf:	90                   	nop

ffffffff801080d0 <Boot_Low_64>:

/* Now we are in 64-bit mode *************************************************/
    .align              16
    .code64
Boot_Low_64:
    movq                $Boot_High_64,%RAX
ffffffff801080d0:	48 c7 c0 d9 80 10 80 	mov    $0xffffffff801080d9,%rax
    jmp                 *%RAX
ffffffff801080d7:	ff e0                	jmp    *%rax

ffffffff801080d9 <_start>:
_start:
Boot_High_64:
    /* ensure data segment registers are sane - zero out all of them */
    XOR                 %RAX,%RAX
ffffffff801080d9:	48 31 c0             	xor    %rax,%rax
    /* Below are all 16-bit moves */
    MOV                 %AX,%SS
ffffffff801080dc:	8e d0                	mov    %eax,%ss
    MOV                 %AX,%DS
ffffffff801080de:	8e d8                	mov    %eax,%ds
    MOV                 %AX,%ES
ffffffff801080e0:	8e c0                	mov    %eax,%es
    MOV                 %AX,%FS
ffffffff801080e2:	8e e0                	mov    %eax,%fs
    MOV                 %AX,%GS
ffffffff801080e4:	8e e8                	mov    %eax,%gs
    /* Check to see if we're booting a secondary core */
    TEST                %EBX,%EBX
ffffffff801080e6:	85 db                	test   %ebx,%ebx
    JNZ                 Boot_SMP_64
ffffffff801080e8:	75 14                	jne    ffffffff801080fe <Boot_SMP_64>
    /* Setup initial stack - this is hard-coded at low memory */
    MOV                 $__RME_X64_Kern_Boot_Stack,%RAX
ffffffff801080ea:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
    MOV                 %RAX,%RSP
ffffffff801080f1:	48 89 c4             	mov    %rax,%rsp
    /* Pass the physical address of RSI to it */
    MOV                 %RSI,%RDI
ffffffff801080f4:	48 89 f7             	mov    %rsi,%rdi
    JMP                 main
ffffffff801080f7:	e9 94 31 11 00       	jmp    ffffffff8021b290 <main>
    JMP                 .
ffffffff801080fc:	eb fe                	jmp    ffffffff801080fc <_start+0x23>

ffffffff801080fe <Boot_SMP_64>:
Boot_SMP_64:
    MOV                 $0x7000,%RAX
ffffffff801080fe:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax
    MOV                 -16(%RAX),%RSP
ffffffff80108105:	48 8b 60 f0          	mov    -0x10(%rax),%rsp
    JMP                 __RME_SMP_Low_Level_Init
ffffffff80108109:	e9 02 1a 11 00       	jmp    ffffffff80219b10 <__RME_SMP_Low_Level_Init>
    JMP                 .
ffffffff8010810e:	eb fe                	jmp    ffffffff8010810e <Boot_SMP_64+0x10>

ffffffff80108110 <Boot_GDT>:
	...
ffffffff8010811c:	00 98 20 00 00 00    	add    %bl,0x20(%rax)
ffffffff80108122:	00 00                	add    %al,(%rax)
ffffffff80108124:	00                   	.byte 0
ffffffff80108125:	90                   	nop
	...

ffffffff80108128 <Boot_GDT_Desc>:
ffffffff80108128:	17                   	(bad)
ffffffff80108129:	00 10                	add    %dl,(%rax)
ffffffff8010812b:	81 10 00 00 00 00    	adcl   $0x0,(%rax)
ffffffff80108131:	00 90 66 66 2e 0f    	add    %dl,0xf2e6666(%rax)
ffffffff80108137:	1f                   	(bad)
ffffffff80108138:	84 00                	test   %al,(%rax)
ffffffff8010813a:	00 00                	add    %al,(%rax)
ffffffff8010813c:	00 00                	add    %al,(%rax)
ffffffff8010813e:	66 90                	xchg   %ax,%ax
ffffffff80108140:	90                   	nop
ffffffff80108141:	e9 ba 0e 00 00       	jmp    ffffffff80109000 <RME_X64_Kpgt>
ffffffff80108146:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010814d:	00 00 00 00 
ffffffff80108151:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108158:	00 00 00 00 
ffffffff8010815c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108163:	00 00 00 00 
ffffffff80108167:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010816e:	00 00 00 00 
ffffffff80108172:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108179:	00 00 00 00 
ffffffff8010817d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108184:	00 00 00 00 
ffffffff80108188:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010818f:	00 00 00 00 
ffffffff80108193:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010819a:	00 00 00 00 
ffffffff8010819e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081a5:	00 00 00 00 
ffffffff801081a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081b0:	00 00 00 00 
ffffffff801081b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081bb:	00 00 00 00 
ffffffff801081bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081c6:	00 00 00 00 
ffffffff801081ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081d1:	00 00 00 00 
ffffffff801081d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081dc:	00 00 00 00 
ffffffff801081e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081e7:	00 00 00 00 
ffffffff801081eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081f2:	00 00 00 00 
ffffffff801081f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081fd:	00 00 00 00 
ffffffff80108201:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108208:	00 00 00 00 
ffffffff8010820c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108213:	00 00 00 00 
ffffffff80108217:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010821e:	00 00 00 00 
ffffffff80108222:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108229:	00 00 00 00 
ffffffff8010822d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108234:	00 00 00 00 
ffffffff80108238:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010823f:	00 00 00 00 
ffffffff80108243:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010824a:	00 00 00 00 
ffffffff8010824e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108255:	00 00 00 00 
ffffffff80108259:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108260:	00 00 00 00 
ffffffff80108264:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010826b:	00 00 00 00 
ffffffff8010826f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108276:	00 00 00 00 
ffffffff8010827a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108281:	00 00 00 00 
ffffffff80108285:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010828c:	00 00 00 00 
ffffffff80108290:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108297:	00 00 00 00 
ffffffff8010829b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082a2:	00 00 00 00 
ffffffff801082a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ad:	00 00 00 00 
ffffffff801082b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082b8:	00 00 00 00 
ffffffff801082bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082c3:	00 00 00 00 
ffffffff801082c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ce:	00 00 00 00 
ffffffff801082d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082d9:	00 00 00 00 
ffffffff801082dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082e4:	00 00 00 00 
ffffffff801082e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ef:	00 00 00 00 
ffffffff801082f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082fa:	00 00 00 00 
ffffffff801082fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108305:	00 00 00 00 
ffffffff80108309:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108310:	00 00 00 00 
ffffffff80108314:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010831b:	00 00 00 00 
ffffffff8010831f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108326:	00 00 00 00 
ffffffff8010832a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108331:	00 00 00 00 
ffffffff80108335:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010833c:	00 00 00 00 
ffffffff80108340:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108347:	00 00 00 00 
ffffffff8010834b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108352:	00 00 00 00 
ffffffff80108356:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010835d:	00 00 00 00 
ffffffff80108361:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108368:	00 00 00 00 
ffffffff8010836c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108373:	00 00 00 00 
ffffffff80108377:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010837e:	00 00 00 00 
ffffffff80108382:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108389:	00 00 00 00 
ffffffff8010838d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108394:	00 00 00 00 
ffffffff80108398:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010839f:	00 00 00 00 
ffffffff801083a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083aa:	00 00 00 00 
ffffffff801083ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083b5:	00 00 00 00 
ffffffff801083b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083c0:	00 00 00 00 
ffffffff801083c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083cb:	00 00 00 00 
ffffffff801083cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083d6:	00 00 00 00 
ffffffff801083da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083e1:	00 00 00 00 
ffffffff801083e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083ec:	00 00 00 00 
ffffffff801083f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083f7:	00 00 00 00 
ffffffff801083fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108402:	00 00 00 00 
ffffffff80108406:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010840d:	00 00 00 00 
ffffffff80108411:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108418:	00 00 00 00 
ffffffff8010841c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108423:	00 00 00 00 
ffffffff80108427:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010842e:	00 00 00 00 
ffffffff80108432:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108439:	00 00 00 00 
ffffffff8010843d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108444:	00 00 00 00 
ffffffff80108448:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010844f:	00 00 00 00 
ffffffff80108453:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010845a:	00 00 00 00 
ffffffff8010845e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108465:	00 00 00 00 
ffffffff80108469:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108470:	00 00 00 00 
ffffffff80108474:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010847b:	00 00 00 00 
ffffffff8010847f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108486:	00 00 00 00 
ffffffff8010848a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108491:	00 00 00 00 
ffffffff80108495:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010849c:	00 00 00 00 
ffffffff801084a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084a7:	00 00 00 00 
ffffffff801084ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084b2:	00 00 00 00 
ffffffff801084b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084bd:	00 00 00 00 
ffffffff801084c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084c8:	00 00 00 00 
ffffffff801084cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084d3:	00 00 00 00 
ffffffff801084d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084de:	00 00 00 00 
ffffffff801084e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084e9:	00 00 00 00 
ffffffff801084ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084f4:	00 00 00 00 
ffffffff801084f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084ff:	00 00 00 00 
ffffffff80108503:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010850a:	00 00 00 00 
ffffffff8010850e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108515:	00 00 00 00 
ffffffff80108519:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108520:	00 00 00 00 
ffffffff80108524:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010852b:	00 00 00 00 
ffffffff8010852f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108536:	00 00 00 00 
ffffffff8010853a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108541:	00 00 00 00 
ffffffff80108545:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010854c:	00 00 00 00 
ffffffff80108550:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108557:	00 00 00 00 
ffffffff8010855b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108562:	00 00 00 00 
ffffffff80108566:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010856d:	00 00 00 00 
ffffffff80108571:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108578:	00 00 00 00 
ffffffff8010857c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108583:	00 00 00 00 
ffffffff80108587:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010858e:	00 00 00 00 
ffffffff80108592:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108599:	00 00 00 00 
ffffffff8010859d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085a4:	00 00 00 00 
ffffffff801085a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085af:	00 00 00 00 
ffffffff801085b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085ba:	00 00 00 00 
ffffffff801085be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085c5:	00 00 00 00 
ffffffff801085c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085d0:	00 00 00 00 
ffffffff801085d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085db:	00 00 00 00 
ffffffff801085df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085e6:	00 00 00 00 
ffffffff801085ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085f1:	00 00 00 00 
ffffffff801085f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085fc:	00 00 00 00 
ffffffff80108600:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108607:	00 00 00 00 
ffffffff8010860b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108612:	00 00 00 00 
ffffffff80108616:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010861d:	00 00 00 00 
ffffffff80108621:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108628:	00 00 00 00 
ffffffff8010862c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108633:	00 00 00 00 
ffffffff80108637:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010863e:	00 00 00 00 
ffffffff80108642:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108649:	00 00 00 00 
ffffffff8010864d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108654:	00 00 00 00 
ffffffff80108658:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010865f:	00 00 00 00 
ffffffff80108663:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010866a:	00 00 00 00 
ffffffff8010866e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108675:	00 00 00 00 
ffffffff80108679:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108680:	00 00 00 00 
ffffffff80108684:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010868b:	00 00 00 00 
ffffffff8010868f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108696:	00 00 00 00 
ffffffff8010869a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086a1:	00 00 00 00 
ffffffff801086a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ac:	00 00 00 00 
ffffffff801086b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086b7:	00 00 00 00 
ffffffff801086bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086c2:	00 00 00 00 
ffffffff801086c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086cd:	00 00 00 00 
ffffffff801086d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086d8:	00 00 00 00 
ffffffff801086dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086e3:	00 00 00 00 
ffffffff801086e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ee:	00 00 00 00 
ffffffff801086f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086f9:	00 00 00 00 
ffffffff801086fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108704:	00 00 00 00 
ffffffff80108708:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010870f:	00 00 00 00 
ffffffff80108713:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010871a:	00 00 00 00 
ffffffff8010871e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108725:	00 00 00 00 
ffffffff80108729:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108730:	00 00 00 00 
ffffffff80108734:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010873b:	00 00 00 00 
ffffffff8010873f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108746:	00 00 00 00 
ffffffff8010874a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108751:	00 00 00 00 
ffffffff80108755:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010875c:	00 00 00 00 
ffffffff80108760:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108767:	00 00 00 00 
ffffffff8010876b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108772:	00 00 00 00 
ffffffff80108776:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010877d:	00 00 00 00 
ffffffff80108781:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108788:	00 00 00 00 
ffffffff8010878c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108793:	00 00 00 00 
ffffffff80108797:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010879e:	00 00 00 00 
ffffffff801087a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087a9:	00 00 00 00 
ffffffff801087ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087b4:	00 00 00 00 
ffffffff801087b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087bf:	00 00 00 00 
ffffffff801087c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087ca:	00 00 00 00 
ffffffff801087ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087d5:	00 00 00 00 
ffffffff801087d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087e0:	00 00 00 00 
ffffffff801087e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087eb:	00 00 00 00 
ffffffff801087ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087f6:	00 00 00 00 
ffffffff801087fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108801:	00 00 00 00 
ffffffff80108805:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010880c:	00 00 00 00 
ffffffff80108810:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108817:	00 00 00 00 
ffffffff8010881b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108822:	00 00 00 00 
ffffffff80108826:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010882d:	00 00 00 00 
ffffffff80108831:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108838:	00 00 00 00 
ffffffff8010883c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108843:	00 00 00 00 
ffffffff80108847:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010884e:	00 00 00 00 
ffffffff80108852:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108859:	00 00 00 00 
ffffffff8010885d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108864:	00 00 00 00 
ffffffff80108868:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010886f:	00 00 00 00 
ffffffff80108873:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010887a:	00 00 00 00 
ffffffff8010887e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108885:	00 00 00 00 
ffffffff80108889:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108890:	00 00 00 00 
ffffffff80108894:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010889b:	00 00 00 00 
ffffffff8010889f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088a6:	00 00 00 00 
ffffffff801088aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088b1:	00 00 00 00 
ffffffff801088b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088bc:	00 00 00 00 
ffffffff801088c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088c7:	00 00 00 00 
ffffffff801088cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088d2:	00 00 00 00 
ffffffff801088d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088dd:	00 00 00 00 
ffffffff801088e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088e8:	00 00 00 00 
ffffffff801088ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088f3:	00 00 00 00 
ffffffff801088f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088fe:	00 00 00 00 
ffffffff80108902:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108909:	00 00 00 00 
ffffffff8010890d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108914:	00 00 00 00 
ffffffff80108918:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010891f:	00 00 00 00 
ffffffff80108923:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010892a:	00 00 00 00 
ffffffff8010892e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108935:	00 00 00 00 
ffffffff80108939:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108940:	00 00 00 00 
ffffffff80108944:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010894b:	00 00 00 00 
ffffffff8010894f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108956:	00 00 00 00 
ffffffff8010895a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108961:	00 00 00 00 
ffffffff80108965:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010896c:	00 00 00 00 
ffffffff80108970:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108977:	00 00 00 00 
ffffffff8010897b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108982:	00 00 00 00 
ffffffff80108986:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010898d:	00 00 00 00 
ffffffff80108991:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108998:	00 00 00 00 
ffffffff8010899c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089a3:	00 00 00 00 
ffffffff801089a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ae:	00 00 00 00 
ffffffff801089b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089b9:	00 00 00 00 
ffffffff801089bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089c4:	00 00 00 00 
ffffffff801089c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089cf:	00 00 00 00 
ffffffff801089d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089da:	00 00 00 00 
ffffffff801089de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089e5:	00 00 00 00 
ffffffff801089e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089f0:	00 00 00 00 
ffffffff801089f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089fb:	00 00 00 00 
ffffffff801089ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a06:	00 00 00 00 
ffffffff80108a0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a11:	00 00 00 00 
ffffffff80108a15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a1c:	00 00 00 00 
ffffffff80108a20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a27:	00 00 00 00 
ffffffff80108a2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a32:	00 00 00 00 
ffffffff80108a36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a3d:	00 00 00 00 
ffffffff80108a41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a48:	00 00 00 00 
ffffffff80108a4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a53:	00 00 00 00 
ffffffff80108a57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a5e:	00 00 00 00 
ffffffff80108a62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a69:	00 00 00 00 
ffffffff80108a6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a74:	00 00 00 00 
ffffffff80108a78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a7f:	00 00 00 00 
ffffffff80108a83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a8a:	00 00 00 00 
ffffffff80108a8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a95:	00 00 00 00 
ffffffff80108a99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aa0:	00 00 00 00 
ffffffff80108aa4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aab:	00 00 00 00 
ffffffff80108aaf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ab6:	00 00 00 00 
ffffffff80108aba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ac1:	00 00 00 00 
ffffffff80108ac5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108acc:	00 00 00 00 
ffffffff80108ad0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ad7:	00 00 00 00 
ffffffff80108adb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ae2:	00 00 00 00 
ffffffff80108ae6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aed:	00 00 00 00 
ffffffff80108af1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108af8:	00 00 00 00 
ffffffff80108afc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b03:	00 00 00 00 
ffffffff80108b07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b0e:	00 00 00 00 
ffffffff80108b12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b19:	00 00 00 00 
ffffffff80108b1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b24:	00 00 00 00 
ffffffff80108b28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b2f:	00 00 00 00 
ffffffff80108b33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b3a:	00 00 00 00 
ffffffff80108b3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b45:	00 00 00 00 
ffffffff80108b49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b50:	00 00 00 00 
ffffffff80108b54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b5b:	00 00 00 00 
ffffffff80108b5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b66:	00 00 00 00 
ffffffff80108b6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b71:	00 00 00 00 
ffffffff80108b75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b7c:	00 00 00 00 
ffffffff80108b80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b87:	00 00 00 00 
ffffffff80108b8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b92:	00 00 00 00 
ffffffff80108b96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b9d:	00 00 00 00 
ffffffff80108ba1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ba8:	00 00 00 00 
ffffffff80108bac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bb3:	00 00 00 00 
ffffffff80108bb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bbe:	00 00 00 00 
ffffffff80108bc2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bc9:	00 00 00 00 
ffffffff80108bcd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bd4:	00 00 00 00 
ffffffff80108bd8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bdf:	00 00 00 00 
ffffffff80108be3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bea:	00 00 00 00 
ffffffff80108bee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bf5:	00 00 00 00 
ffffffff80108bf9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c00:	00 00 00 00 
ffffffff80108c04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c0b:	00 00 00 00 
ffffffff80108c0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c16:	00 00 00 00 
ffffffff80108c1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c21:	00 00 00 00 
ffffffff80108c25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c2c:	00 00 00 00 
ffffffff80108c30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c37:	00 00 00 00 
ffffffff80108c3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c42:	00 00 00 00 
ffffffff80108c46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c4d:	00 00 00 00 
ffffffff80108c51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c58:	00 00 00 00 
ffffffff80108c5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c63:	00 00 00 00 
ffffffff80108c67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c6e:	00 00 00 00 
ffffffff80108c72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c79:	00 00 00 00 
ffffffff80108c7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c84:	00 00 00 00 
ffffffff80108c88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c8f:	00 00 00 00 
ffffffff80108c93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c9a:	00 00 00 00 
ffffffff80108c9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ca5:	00 00 00 00 
ffffffff80108ca9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cb0:	00 00 00 00 
ffffffff80108cb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cbb:	00 00 00 00 
ffffffff80108cbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cc6:	00 00 00 00 
ffffffff80108cca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cd1:	00 00 00 00 
ffffffff80108cd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cdc:	00 00 00 00 
ffffffff80108ce0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ce7:	00 00 00 00 
ffffffff80108ceb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cf2:	00 00 00 00 
ffffffff80108cf6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cfd:	00 00 00 00 
ffffffff80108d01:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d08:	00 00 00 00 
ffffffff80108d0c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d13:	00 00 00 00 
ffffffff80108d17:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d1e:	00 00 00 00 
ffffffff80108d22:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d29:	00 00 00 00 
ffffffff80108d2d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d34:	00 00 00 00 
ffffffff80108d38:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d3f:	00 00 00 00 
ffffffff80108d43:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d4a:	00 00 00 00 
ffffffff80108d4e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d55:	00 00 00 00 
ffffffff80108d59:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d60:	00 00 00 00 
ffffffff80108d64:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d6b:	00 00 00 00 
ffffffff80108d6f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d76:	00 00 00 00 
ffffffff80108d7a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d81:	00 00 00 00 
ffffffff80108d85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d8c:	00 00 00 00 
ffffffff80108d90:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d97:	00 00 00 00 
ffffffff80108d9b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108da2:	00 00 00 00 
ffffffff80108da6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dad:	00 00 00 00 
ffffffff80108db1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108db8:	00 00 00 00 
ffffffff80108dbc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dc3:	00 00 00 00 
ffffffff80108dc7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dce:	00 00 00 00 
ffffffff80108dd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dd9:	00 00 00 00 
ffffffff80108ddd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108de4:	00 00 00 00 
ffffffff80108de8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108def:	00 00 00 00 
ffffffff80108df3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dfa:	00 00 00 00 
ffffffff80108dfe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e05:	00 00 00 00 
ffffffff80108e09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e10:	00 00 00 00 
ffffffff80108e14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e1b:	00 00 00 00 
ffffffff80108e1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e26:	00 00 00 00 
ffffffff80108e2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e31:	00 00 00 00 
ffffffff80108e35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e3c:	00 00 00 00 
ffffffff80108e40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e47:	00 00 00 00 
ffffffff80108e4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e52:	00 00 00 00 
ffffffff80108e56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e5d:	00 00 00 00 
ffffffff80108e61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e68:	00 00 00 00 
ffffffff80108e6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e73:	00 00 00 00 
ffffffff80108e77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e7e:	00 00 00 00 
ffffffff80108e82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e89:	00 00 00 00 
ffffffff80108e8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e94:	00 00 00 00 
ffffffff80108e98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e9f:	00 00 00 00 
ffffffff80108ea3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eaa:	00 00 00 00 
ffffffff80108eae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eb5:	00 00 00 00 
ffffffff80108eb9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ec0:	00 00 00 00 
ffffffff80108ec4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ecb:	00 00 00 00 
ffffffff80108ecf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ed6:	00 00 00 00 
ffffffff80108eda:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ee1:	00 00 00 00 
ffffffff80108ee5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eec:	00 00 00 00 
ffffffff80108ef0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ef7:	00 00 00 00 
ffffffff80108efb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f02:	00 00 00 00 
ffffffff80108f06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f0d:	00 00 00 00 
ffffffff80108f11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f18:	00 00 00 00 
ffffffff80108f1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f23:	00 00 00 00 
ffffffff80108f27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f2e:	00 00 00 00 
ffffffff80108f32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f39:	00 00 00 00 
ffffffff80108f3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f44:	00 00 00 00 
ffffffff80108f48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f4f:	00 00 00 00 
ffffffff80108f53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f5a:	00 00 00 00 
ffffffff80108f5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f65:	00 00 00 00 
ffffffff80108f69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f70:	00 00 00 00 
ffffffff80108f74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f7b:	00 00 00 00 
ffffffff80108f7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f86:	00 00 00 00 
ffffffff80108f8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f91:	00 00 00 00 
ffffffff80108f95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f9c:	00 00 00 00 
ffffffff80108fa0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fa7:	00 00 00 00 
ffffffff80108fab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fb2:	00 00 00 00 
ffffffff80108fb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fbd:	00 00 00 00 
ffffffff80108fc1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fc8:	00 00 00 00 
ffffffff80108fcc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fd3:	00 00 00 00 
ffffffff80108fd7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fde:	00 00 00 00 
ffffffff80108fe2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fe9:	00 00 00 00 
ffffffff80108fed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ff4:	00 00 00 00 
ffffffff80108ff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80108fff:	00 

ffffffff80109000 <RME_X64_Kpgt>:
	...

ffffffff8020b800 <__RME_X64_In>:
Input       : ptr_t Port - The port to output to.
Output      : None.
Return      : ptr_t - The data received from that port.
******************************************************************************/
__RME_X64_In:
    PUSHQ               %RDX
ffffffff8020b800:	52                   	push   %rdx
    MOVQ                %RDI,%RDX
ffffffff8020b801:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RAX,%RAX
ffffffff8020b804:	48 89 c0             	mov    %rax,%rax
    INB                 (%DX),%AL
ffffffff8020b807:	ec                   	in     (%dx),%al
    POPQ                %RDX
ffffffff8020b808:	5a                   	pop    %rdx
    RETQ
ffffffff8020b809:	c3                   	ret

ffffffff8020b80a <__RME_X64_Out>:
                 ptr_t Data - The data to send to that port.
Output         : None.
Return         : None.
******************************************************************************/
__RME_X64_Out:
    PUSHQ               %RDX
ffffffff8020b80a:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b80b:	50                   	push   %rax
    MOVQ                %RDI,%RDX
ffffffff8020b80c:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RSI,%RAX
ffffffff8020b80f:	48 89 f0             	mov    %rsi,%rax
    OUTB                %AL,(%DX)
ffffffff8020b812:	ee                   	out    %al,(%dx)
    POPQ                %RAX
ffffffff8020b813:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b814:	5a                   	pop    %rdx
    RETQ
ffffffff8020b815:	c3                   	ret

ffffffff8020b816 <__RME_X64_Read_MSR>:
Input       : ptr_t MSR - The MSR to read.
Output      : None.
Return      : ptr_t - The content of the MSR.
******************************************************************************/
__RME_X64_Read_MSR:
    PUSHQ               %RCX
ffffffff8020b816:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b817:	52                   	push   %rdx
    MOVQ                %RDI,%RCX
ffffffff8020b818:	48 89 f9             	mov    %rdi,%rcx
    XORQ                %RAX,%RAX
ffffffff8020b81b:	48 31 c0             	xor    %rax,%rax
    RDMSR
ffffffff8020b81e:	0f 32                	rdmsr
    SHLQ                $32,%RDX
ffffffff8020b820:	48 c1 e2 20          	shl    $0x20,%rdx
    ADDQ                %RDX,%RAX
ffffffff8020b824:	48 01 d0             	add    %rdx,%rax
    POPQ                %RDX
ffffffff8020b827:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b828:	59                   	pop    %rcx
    RETQ
ffffffff8020b829:	c3                   	ret

ffffffff8020b82a <__RME_X64_Write_MSR>:
              ptr_t Value - The value to write to it.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_MSR:
    PUSHQ               %RCX
ffffffff8020b82a:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b82b:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b82c:	50                   	push   %rax
    MOVQ                %RDI,%RCX
ffffffff8020b82d:	48 89 f9             	mov    %rdi,%rcx
    MOVL                %ESI,%EAX
ffffffff8020b830:	89 f0                	mov    %esi,%eax
    MOVQ                %RSI,%RDX
ffffffff8020b832:	48 89 f2             	mov    %rsi,%rdx
    SHR                 $32,%RDX
ffffffff8020b835:	48 c1 ea 20          	shr    $0x20,%rdx
    WRMSR
ffffffff8020b839:	0f 30                	wrmsr
    POPQ                %RAX
ffffffff8020b83b:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b83c:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b83d:	59                   	pop    %rcx
    RETQ
ffffffff8020b83e:	c3                   	ret

ffffffff8020b83f <__RME_X64_CPU_Local_Get>:
Input       : None.
Output      : None.
Return      : struct RME_CPU_Local* - The CPU-local data structures.
******************************************************************************/
__RME_X64_CPU_Local_Get:
    MOVQ                %GS:(8192-8*3),%RAX
ffffffff8020b83f:	65 48 8b 04 25 e8 1f 	mov    %gs:0x1fe8,%rax
ffffffff8020b846:	00 00 
    RETQ
ffffffff8020b848:	c3                   	ret

ffffffff8020b849 <__RME_X64_CPUID_Get>:
              ptr_t* ECX - The ECX info.
              ptr_t* EDX - The EDX info.
Return      : ptr_t - The maximum number for CPUID instruction.
******************************************************************************/
__RME_X64_CPUID_Get:
    PUSHQ               %R8
ffffffff8020b849:	41 50                	push   %r8
    PUSHQ               %R9
ffffffff8020b84b:	41 51                	push   %r9
    PUSHQ               %RBX
ffffffff8020b84d:	53                   	push   %rbx
    PUSHQ               %RCX
ffffffff8020b84e:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b84f:	52                   	push   %rdx

    MOVQ                %RDI,%RAX
ffffffff8020b850:	48 89 f8             	mov    %rdi,%rax
    MOVQ                %RDX,%R8
ffffffff8020b853:	49 89 d0             	mov    %rdx,%r8
    MOVQ                %RCX,%R9
ffffffff8020b856:	49 89 c9             	mov    %rcx,%r9

    MOVQ                (%RSI),%RBX
ffffffff8020b859:	48 8b 1e             	mov    (%rsi),%rbx
    MOVQ                (%R8),%RCX
ffffffff8020b85c:	49 8b 08             	mov    (%r8),%rcx
    MOVQ                (%R9),%RDX
ffffffff8020b85f:	49 8b 11             	mov    (%r9),%rdx
    CPUID
ffffffff8020b862:	0f a2                	cpuid
    MOVQ                %RBX,(%RSI)
ffffffff8020b864:	48 89 1e             	mov    %rbx,(%rsi)
    MOVQ                %RCX,(%R8)
ffffffff8020b867:	49 89 08             	mov    %rcx,(%r8)
    MOVQ                %RDX,(%R9)
ffffffff8020b86a:	49 89 11             	mov    %rdx,(%r9)

    POPQ                %RDX
ffffffff8020b86d:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b86e:	59                   	pop    %rcx
    POPQ                %RBX
ffffffff8020b86f:	5b                   	pop    %rbx
    POPQ                %R9
ffffffff8020b870:	41 59                	pop    %r9
    POPQ                %R8
ffffffff8020b872:	41 58                	pop    %r8
    RETQ
ffffffff8020b874:	c3                   	ret

ffffffff8020b875 <__RME_X64_GDT_Load>:
Input       : ptr_t* GDTR - The pointer to the GDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_GDT_Load:
    LGDT                (%RDI)
ffffffff8020b875:	0f 01 17             	lgdt   (%rdi)
    RETQ
ffffffff8020b878:	c3                   	ret

ffffffff8020b879 <__RME_X64_IDT_Load>:
Input       : ptr_t* IDTR - The pointer to the IDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_IDT_Load:
    LIDT                (%RDI)
ffffffff8020b879:	0f 01 1f             	lidt   (%rdi)
    RETQ
ffffffff8020b87c:	c3                   	ret

ffffffff8020b87d <__RME_X64_TSS_Load>:
Input       : ptr_t TSS - The TSS's position in GDT.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_TSS_Load:
    LTR                 %DI
ffffffff8020b87d:	0f 00 df             	ltr    %edi
    RETQ
ffffffff8020b880:	c3                   	ret

ffffffff8020b881 <__RME_X64_Comp_Swap>:
              ptr_t New - The new value.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - If successful, 1; else 0.
******************************************************************************/
__RME_X64_Comp_Swap:
    MOVQ                %RSI,%RAX
ffffffff8020b881:	48 89 f0             	mov    %rsi,%rax
    XOR                 %RSI,%RSI
ffffffff8020b884:	48 31 f6             	xor    %rsi,%rsi
    /* In x86, locked instructions act as a fence */
    LOCK CMPXCHGQ       %RDX,(%RDI)
ffffffff8020b887:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
    /* Set the bit if ZF is set */
    SETZ                %SIL
ffffffff8020b88c:	40 0f 94 c6          	sete   %sil
    MOVQ                %RSI,%RAX
ffffffff8020b890:	48 89 f0             	mov    %rsi,%rax
    RETQ
ffffffff8020b893:	c3                   	ret

ffffffff8020b894 <__RME_X64_Fetch_Add>:
              cnt_t Addend - The number to add.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the addition.
******************************************************************************/
__RME_X64_Fetch_Add:
    MOVQ                %RSI,%RAX
ffffffff8020b894:	48 89 f0             	mov    %rsi,%rax
    /* In x86, locked instructions act as a fence */
    LOCK XADDQ          %RAX,(%RDI)
ffffffff8020b897:	f0 48 0f c1 07       	lock xadd %rax,(%rdi)
    RETQ
ffffffff8020b89c:	c3                   	ret

ffffffff8020b89d <__RME_X64_Fetch_And>:
              cnt_t Operand - The number to logic AND with the destination.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the AND operation.
******************************************************************************/
__RME_X64_Fetch_And:
    MOVQ                (%RDI),%RAX
ffffffff8020b89d:	48 8b 07             	mov    (%rdi),%rax
    /* In x86, locked instructions act as a fence */
    LOCK ANDQ           %RSI,(%RDI)
ffffffff8020b8a0:	f0 48 21 37          	lock and %rsi,(%rdi)
    RETQ
ffffffff8020b8a4:	c3                   	ret

ffffffff8020b8a5 <__RME_X64_Write_Release>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_Release:
    MFENCE
ffffffff8020b8a5:	0f ae f0             	mfence
    RETQ
ffffffff8020b8a8:	c3                   	ret

ffffffff8020b8a9 <__RME_X64_Pgt_Set>:
Input       : ptr_t Pgt - The physical address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Pgt_Set:
    MOV                 %RDI,%CR3
ffffffff8020b8a9:	0f 22 df             	mov    %rdi,%cr3
    RETQ
ffffffff8020b8ac:	c3                   	ret

ffffffff8020b8ad <__RME_Disable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Disable_Int:
    /* Disable all interrupts */
    CLI
ffffffff8020b8ad:	fa                   	cli
    RETQ
ffffffff8020b8ae:	c3                   	ret

ffffffff8020b8af <__RME_Enable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enable_Int:
    /* Enable all interrupts */
    STI
ffffffff8020b8af:	fb                   	sti
    RETQ
ffffffff8020b8b0:	c3                   	ret

ffffffff8020b8b1 <__RME_X64_Halt>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Halt:
    /* Wait for interrupt */
    HLT
ffffffff8020b8b1:	f4                   	hlt
    RETQ
ffffffff8020b8b2:	c3                   	ret

ffffffff8020b8b3 <_RME_Kmain>:
Input       : ptr_t Stack - The stack address to set SP to.
Output      : None.
Return      : None.
******************************************************************************/
_RME_Kmain:
    MOVQ                %RDI,%RSP
ffffffff8020b8b3:	48 89 fc             	mov    %rdi,%rsp
    JMP                 RME_Kmain
ffffffff8020b8b6:	e9 05 2c 00 00       	jmp    ffffffff8020e4c0 <RME_Kmain>

ffffffff8020b8bb <__RME_X64_MSB_Get>:
Input       : ptr_t Val - The value.
Output      : None.
Return      : ptr_t - The MSB position.
******************************************************************************/
__RME_X64_MSB_Get:
    BSRQ                %RDI,%RAX
ffffffff8020b8bb:	48 0f bd c7          	bsr    %rdi,%rax
    RETQ
ffffffff8020b8bf:	c3                   	ret

ffffffff8020b8c0 <__RME_Enter_User_Mode>:
              ptr_t CPUID - The CPUID.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enter_User_Mode:
    MOVQ                %RDI,%RCX           /* Entry */
ffffffff8020b8c0:	48 89 f9             	mov    %rdi,%rcx
    MOVQ                %RSI,%RSP           /* Stack */
ffffffff8020b8c3:	48 89 f4             	mov    %rsi,%rsp
    MOVQ                $0x3200,%R11        /* Flags - IOPL 3, IF */
ffffffff8020b8c6:	49 c7 c3 00 32 00 00 	mov    $0x3200,%r11
    MOVQ                %RDX,%RDI           /* CPUID */
ffffffff8020b8cd:	48 89 d7             	mov    %rdx,%rdi
    SYSRETQ
ffffffff8020b8d0:	48 0f 07             	sysretq

ffffffff8020b8d3 <__RME_X64_FAULT_DE_Handler>:
    PUSHQ               $\REASON
    JMP                 Fault_Handler
.endm

/* Fault handlers */
FAULT_HANDLER NAME=__RME_X64_FAULT_DE_Handler ERRCODE=0 REASON=0
ffffffff8020b8d3:	0f 01 f8             	swapgs
ffffffff8020b8d6:	6a 00                	push   $0x0
ffffffff8020b8d8:	6a 00                	push   $0x0
ffffffff8020b8da:	e9 a6 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8df <__RME_X64_TRAP_DB_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_DB_Handler ERRCODE=0 REASON=1
ffffffff8020b8df:	0f 01 f8             	swapgs
ffffffff8020b8e2:	6a 00                	push   $0x0
ffffffff8020b8e4:	6a 01                	push   $0x1
ffffffff8020b8e6:	e9 9a 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8eb <__RME_X64_INT_NMI_Handler>:
FAULT_HANDLER NAME=__RME_X64_INT_NMI_Handler ERRCODE=0 REASON=2
ffffffff8020b8eb:	0f 01 f8             	swapgs
ffffffff8020b8ee:	6a 00                	push   $0x0
ffffffff8020b8f0:	6a 02                	push   $0x2
ffffffff8020b8f2:	e9 8e 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8f7 <__RME_X64_TRAP_BP_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_BP_Handler ERRCODE=0 REASON=3
ffffffff8020b8f7:	0f 01 f8             	swapgs
ffffffff8020b8fa:	6a 00                	push   $0x0
ffffffff8020b8fc:	6a 03                	push   $0x3
ffffffff8020b8fe:	e9 82 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b903 <__RME_X64_TRAP_OF_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_OF_Handler ERRCODE=0 REASON=4
ffffffff8020b903:	0f 01 f8             	swapgs
ffffffff8020b906:	6a 00                	push   $0x0
ffffffff8020b908:	6a 04                	push   $0x4
ffffffff8020b90a:	eb 79                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b90c <__RME_X64_FAULT_BR_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_BR_Handler ERRCODE=0 REASON=5
ffffffff8020b90c:	0f 01 f8             	swapgs
ffffffff8020b90f:	6a 00                	push   $0x0
ffffffff8020b911:	6a 05                	push   $0x5
ffffffff8020b913:	eb 70                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b915 <__RME_X64_FAULT_UD_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_UD_Handler ERRCODE=0 REASON=6
ffffffff8020b915:	0f 01 f8             	swapgs
ffffffff8020b918:	6a 00                	push   $0x0
ffffffff8020b91a:	6a 06                	push   $0x6
ffffffff8020b91c:	eb 67                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b91e <__RME_X64_FAULT_NM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NM_Handler ERRCODE=0 REASON=7
ffffffff8020b91e:	0f 01 f8             	swapgs
ffffffff8020b921:	6a 00                	push   $0x0
ffffffff8020b923:	6a 07                	push   $0x7
ffffffff8020b925:	eb 5e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b927 <__RME_X64_ABORT_DF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_DF_Handler ERRCODE=1 REASON=8
ffffffff8020b927:	0f 01 f8             	swapgs
ffffffff8020b92a:	6a 08                	push   $0x8
ffffffff8020b92c:	eb 57                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b92e <__RME_X64_ABORT_OLD_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_OLD_MF_Handler ERRCODE=0 REASON=9
ffffffff8020b92e:	0f 01 f8             	swapgs
ffffffff8020b931:	6a 00                	push   $0x0
ffffffff8020b933:	6a 09                	push   $0x9
ffffffff8020b935:	eb 4e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b937 <__RME_X64_FAULT_TS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_TS_Handler ERRCODE=1 REASON=10
ffffffff8020b937:	0f 01 f8             	swapgs
ffffffff8020b93a:	6a 0a                	push   $0xa
ffffffff8020b93c:	eb 47                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b93e <__RME_X64_FAULT_NP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NP_Handler ERRCODE=1 REASON=11
ffffffff8020b93e:	0f 01 f8             	swapgs
ffffffff8020b941:	6a 0b                	push   $0xb
ffffffff8020b943:	eb 40                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b945 <__RME_X64_FAULT_SS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_SS_Handler ERRCODE=1 REASON=12
ffffffff8020b945:	0f 01 f8             	swapgs
ffffffff8020b948:	6a 0c                	push   $0xc
ffffffff8020b94a:	eb 39                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b94c <__RME_X64_FAULT_GP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_GP_Handler ERRCODE=1 REASON=13
ffffffff8020b94c:	0f 01 f8             	swapgs
ffffffff8020b94f:	6a 0d                	push   $0xd
ffffffff8020b951:	eb 32                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b953 <__RME_X64_FAULT_PF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_PF_Handler ERRCODE=1 REASON=14
ffffffff8020b953:	0f 01 f8             	swapgs
ffffffff8020b956:	6a 0e                	push   $0xe
ffffffff8020b958:	eb 2b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b95a <__RME_X64_FAULT_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_MF_Handler ERRCODE=0 REASON=16
ffffffff8020b95a:	0f 01 f8             	swapgs
ffffffff8020b95d:	6a 00                	push   $0x0
ffffffff8020b95f:	6a 10                	push   $0x10
ffffffff8020b961:	eb 22                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b963 <__RME_X64_FAULT_AC_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_AC_Handler ERRCODE=1 REASON=17
ffffffff8020b963:	0f 01 f8             	swapgs
ffffffff8020b966:	6a 11                	push   $0x11
ffffffff8020b968:	eb 1b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b96a <__RME_X64_ABORT_MC_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_MC_Handler ERRCODE=0 REASON=18
ffffffff8020b96a:	0f 01 f8             	swapgs
ffffffff8020b96d:	6a 00                	push   $0x0
ffffffff8020b96f:	6a 12                	push   $0x12
ffffffff8020b971:	eb 12                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b973 <__RME_X64_FAULT_XM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_XM_Handler ERRCODE=0 REASON=19
ffffffff8020b973:	0f 01 f8             	swapgs
ffffffff8020b976:	6a 00                	push   $0x0
ffffffff8020b978:	6a 13                	push   $0x13
ffffffff8020b97a:	eb 09                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b97c <__RME_X64_FAULT_VE_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_VE_Handler ERRCODE=0 REASON=20
ffffffff8020b97c:	0f 01 f8             	swapgs
ffffffff8020b97f:	6a 00                	push   $0x0
ffffffff8020b981:	6a 14                	push   $0x14
ffffffff8020b983:	eb 00                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b985 <Fault_Handler>:
/* Common function body for fault handlers - reduce I-Cache usage */
Fault_Handler:
    SAVE_GP_REGS
ffffffff8020b985:	41 57                	push   %r15
ffffffff8020b987:	41 56                	push   %r14
ffffffff8020b989:	41 55                	push   %r13
ffffffff8020b98b:	41 54                	push   %r12
ffffffff8020b98d:	41 53                	push   %r11
ffffffff8020b98f:	41 52                	push   %r10
ffffffff8020b991:	41 51                	push   %r9
ffffffff8020b993:	41 50                	push   %r8
ffffffff8020b995:	55                   	push   %rbp
ffffffff8020b996:	57                   	push   %rdi
ffffffff8020b997:	56                   	push   %rsi
ffffffff8020b998:	52                   	push   %rdx
ffffffff8020b999:	51                   	push   %rcx
ffffffff8020b99a:	53                   	push   %rbx
ffffffff8020b99b:	50                   	push   %rax
ffffffff8020b99c:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020b9a0:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020b9a2:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020b9a5:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Fault_Handler
ffffffff8020b9aa:	e8 61 ef 00 00       	call   ffffffff8021a910 <__RME_X64_Fault_Handler>

    RESTORE_GP_REGS
ffffffff8020b9af:	0f 01 f8             	swapgs
ffffffff8020b9b2:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020b9b6:	8e d8                	mov    %eax,%ds
ffffffff8020b9b8:	58                   	pop    %rax
ffffffff8020b9b9:	5b                   	pop    %rbx
ffffffff8020b9ba:	59                   	pop    %rcx
ffffffff8020b9bb:	5a                   	pop    %rdx
ffffffff8020b9bc:	5e                   	pop    %rsi
ffffffff8020b9bd:	5f                   	pop    %rdi
ffffffff8020b9be:	5d                   	pop    %rbp
ffffffff8020b9bf:	41 58                	pop    %r8
ffffffff8020b9c1:	41 59                	pop    %r9
ffffffff8020b9c3:	41 5a                	pop    %r10
ffffffff8020b9c5:	41 5b                	pop    %r11
ffffffff8020b9c7:	41 5c                	pop    %r12
ffffffff8020b9c9:	41 5d                	pop    %r13
ffffffff8020b9cb:	41 5e                	pop    %r14
ffffffff8020b9cd:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020b9cf:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020b9d3:	48 cf                	iretq

ffffffff8020b9d5 <__RME_X64_USER32_Handler>:
    PUSHQ               $0                  /* Make a dummy error code */
    PUSHQ               $\VECTNUM           /* Interrupt number */
    JMP                 User_Handler
.endm
/* User handlers */
USER_HANDLER NAME=__RME_X64_USER32_Handler VECTNUM=32
ffffffff8020b9d5:	0f 01 f8             	swapgs
ffffffff8020b9d8:	6a 00                	push   $0x0
ffffffff8020b9da:	6a 20                	push   $0x20
ffffffff8020b9dc:	e9 d3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9e1 <__RME_X64_USER33_Handler>:
USER_HANDLER NAME=__RME_X64_USER33_Handler VECTNUM=33
ffffffff8020b9e1:	0f 01 f8             	swapgs
ffffffff8020b9e4:	6a 00                	push   $0x0
ffffffff8020b9e6:	6a 21                	push   $0x21
ffffffff8020b9e8:	e9 c7 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9ed <__RME_X64_USER34_Handler>:
USER_HANDLER NAME=__RME_X64_USER34_Handler VECTNUM=34
ffffffff8020b9ed:	0f 01 f8             	swapgs
ffffffff8020b9f0:	6a 00                	push   $0x0
ffffffff8020b9f2:	6a 22                	push   $0x22
ffffffff8020b9f4:	e9 bb 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9f9 <__RME_X64_USER35_Handler>:
USER_HANDLER NAME=__RME_X64_USER35_Handler VECTNUM=35
ffffffff8020b9f9:	0f 01 f8             	swapgs
ffffffff8020b9fc:	6a 00                	push   $0x0
ffffffff8020b9fe:	6a 23                	push   $0x23
ffffffff8020ba00:	e9 af 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba05 <__RME_X64_USER36_Handler>:
USER_HANDLER NAME=__RME_X64_USER36_Handler VECTNUM=36
ffffffff8020ba05:	0f 01 f8             	swapgs
ffffffff8020ba08:	6a 00                	push   $0x0
ffffffff8020ba0a:	6a 24                	push   $0x24
ffffffff8020ba0c:	e9 a3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba11 <__RME_X64_USER37_Handler>:
USER_HANDLER NAME=__RME_X64_USER37_Handler VECTNUM=37
ffffffff8020ba11:	0f 01 f8             	swapgs
ffffffff8020ba14:	6a 00                	push   $0x0
ffffffff8020ba16:	6a 25                	push   $0x25
ffffffff8020ba18:	e9 97 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba1d <__RME_X64_USER38_Handler>:
USER_HANDLER NAME=__RME_X64_USER38_Handler VECTNUM=38
ffffffff8020ba1d:	0f 01 f8             	swapgs
ffffffff8020ba20:	6a 00                	push   $0x0
ffffffff8020ba22:	6a 26                	push   $0x26
ffffffff8020ba24:	e9 8b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba29 <__RME_X64_USER39_Handler>:
USER_HANDLER NAME=__RME_X64_USER39_Handler VECTNUM=39
ffffffff8020ba29:	0f 01 f8             	swapgs
ffffffff8020ba2c:	6a 00                	push   $0x0
ffffffff8020ba2e:	6a 27                	push   $0x27
ffffffff8020ba30:	e9 7f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba35 <__RME_X64_USER40_Handler>:

USER_HANDLER NAME=__RME_X64_USER40_Handler VECTNUM=40
ffffffff8020ba35:	0f 01 f8             	swapgs
ffffffff8020ba38:	6a 00                	push   $0x0
ffffffff8020ba3a:	6a 28                	push   $0x28
ffffffff8020ba3c:	e9 73 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba41 <__RME_X64_USER41_Handler>:
USER_HANDLER NAME=__RME_X64_USER41_Handler VECTNUM=41
ffffffff8020ba41:	0f 01 f8             	swapgs
ffffffff8020ba44:	6a 00                	push   $0x0
ffffffff8020ba46:	6a 29                	push   $0x29
ffffffff8020ba48:	e9 67 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba4d <__RME_X64_USER42_Handler>:
USER_HANDLER NAME=__RME_X64_USER42_Handler VECTNUM=42
ffffffff8020ba4d:	0f 01 f8             	swapgs
ffffffff8020ba50:	6a 00                	push   $0x0
ffffffff8020ba52:	6a 2a                	push   $0x2a
ffffffff8020ba54:	e9 5b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba59 <__RME_X64_USER43_Handler>:
USER_HANDLER NAME=__RME_X64_USER43_Handler VECTNUM=43
ffffffff8020ba59:	0f 01 f8             	swapgs
ffffffff8020ba5c:	6a 00                	push   $0x0
ffffffff8020ba5e:	6a 2b                	push   $0x2b
ffffffff8020ba60:	e9 4f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba65 <__RME_X64_USER44_Handler>:
USER_HANDLER NAME=__RME_X64_USER44_Handler VECTNUM=44
ffffffff8020ba65:	0f 01 f8             	swapgs
ffffffff8020ba68:	6a 00                	push   $0x0
ffffffff8020ba6a:	6a 2c                	push   $0x2c
ffffffff8020ba6c:	e9 43 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba71 <__RME_X64_USER45_Handler>:
USER_HANDLER NAME=__RME_X64_USER45_Handler VECTNUM=45
ffffffff8020ba71:	0f 01 f8             	swapgs
ffffffff8020ba74:	6a 00                	push   $0x0
ffffffff8020ba76:	6a 2d                	push   $0x2d
ffffffff8020ba78:	e9 37 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba7d <__RME_X64_USER46_Handler>:
USER_HANDLER NAME=__RME_X64_USER46_Handler VECTNUM=46
ffffffff8020ba7d:	0f 01 f8             	swapgs
ffffffff8020ba80:	6a 00                	push   $0x0
ffffffff8020ba82:	6a 2e                	push   $0x2e
ffffffff8020ba84:	e9 2b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba89 <__RME_X64_USER47_Handler>:
USER_HANDLER NAME=__RME_X64_USER47_Handler VECTNUM=47
ffffffff8020ba89:	0f 01 f8             	swapgs
ffffffff8020ba8c:	6a 00                	push   $0x0
ffffffff8020ba8e:	6a 2f                	push   $0x2f
ffffffff8020ba90:	e9 1f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba95 <__RME_X64_USER48_Handler>:
USER_HANDLER NAME=__RME_X64_USER48_Handler VECTNUM=48
ffffffff8020ba95:	0f 01 f8             	swapgs
ffffffff8020ba98:	6a 00                	push   $0x0
ffffffff8020ba9a:	6a 30                	push   $0x30
ffffffff8020ba9c:	e9 13 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baa1 <__RME_X64_USER49_Handler>:
USER_HANDLER NAME=__RME_X64_USER49_Handler VECTNUM=49
ffffffff8020baa1:	0f 01 f8             	swapgs
ffffffff8020baa4:	6a 00                	push   $0x0
ffffffff8020baa6:	6a 31                	push   $0x31
ffffffff8020baa8:	e9 07 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baad <__RME_X64_USER50_Handler>:

USER_HANDLER NAME=__RME_X64_USER50_Handler VECTNUM=50
ffffffff8020baad:	0f 01 f8             	swapgs
ffffffff8020bab0:	6a 00                	push   $0x0
ffffffff8020bab2:	6a 32                	push   $0x32
ffffffff8020bab4:	e9 fb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bab9 <__RME_X64_USER51_Handler>:
USER_HANDLER NAME=__RME_X64_USER51_Handler VECTNUM=51
ffffffff8020bab9:	0f 01 f8             	swapgs
ffffffff8020babc:	6a 00                	push   $0x0
ffffffff8020babe:	6a 33                	push   $0x33
ffffffff8020bac0:	e9 ef 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bac5 <__RME_X64_USER52_Handler>:
USER_HANDLER NAME=__RME_X64_USER52_Handler VECTNUM=52
ffffffff8020bac5:	0f 01 f8             	swapgs
ffffffff8020bac8:	6a 00                	push   $0x0
ffffffff8020baca:	6a 34                	push   $0x34
ffffffff8020bacc:	e9 e3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bad1 <__RME_X64_USER53_Handler>:
USER_HANDLER NAME=__RME_X64_USER53_Handler VECTNUM=53
ffffffff8020bad1:	0f 01 f8             	swapgs
ffffffff8020bad4:	6a 00                	push   $0x0
ffffffff8020bad6:	6a 35                	push   $0x35
ffffffff8020bad8:	e9 d7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020badd <__RME_X64_USER54_Handler>:
USER_HANDLER NAME=__RME_X64_USER54_Handler VECTNUM=54
ffffffff8020badd:	0f 01 f8             	swapgs
ffffffff8020bae0:	6a 00                	push   $0x0
ffffffff8020bae2:	6a 36                	push   $0x36
ffffffff8020bae4:	e9 cb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bae9 <__RME_X64_USER55_Handler>:
USER_HANDLER NAME=__RME_X64_USER55_Handler VECTNUM=55
ffffffff8020bae9:	0f 01 f8             	swapgs
ffffffff8020baec:	6a 00                	push   $0x0
ffffffff8020baee:	6a 37                	push   $0x37
ffffffff8020baf0:	e9 bf 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baf5 <__RME_X64_USER56_Handler>:
USER_HANDLER NAME=__RME_X64_USER56_Handler VECTNUM=56
ffffffff8020baf5:	0f 01 f8             	swapgs
ffffffff8020baf8:	6a 00                	push   $0x0
ffffffff8020bafa:	6a 38                	push   $0x38
ffffffff8020bafc:	e9 b3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb01 <__RME_X64_USER57_Handler>:
USER_HANDLER NAME=__RME_X64_USER57_Handler VECTNUM=57
ffffffff8020bb01:	0f 01 f8             	swapgs
ffffffff8020bb04:	6a 00                	push   $0x0
ffffffff8020bb06:	6a 39                	push   $0x39
ffffffff8020bb08:	e9 a7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb0d <__RME_X64_USER58_Handler>:
USER_HANDLER NAME=__RME_X64_USER58_Handler VECTNUM=58
ffffffff8020bb0d:	0f 01 f8             	swapgs
ffffffff8020bb10:	6a 00                	push   $0x0
ffffffff8020bb12:	6a 3a                	push   $0x3a
ffffffff8020bb14:	e9 9b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb19 <__RME_X64_USER59_Handler>:
USER_HANDLER NAME=__RME_X64_USER59_Handler VECTNUM=59
ffffffff8020bb19:	0f 01 f8             	swapgs
ffffffff8020bb1c:	6a 00                	push   $0x0
ffffffff8020bb1e:	6a 3b                	push   $0x3b
ffffffff8020bb20:	e9 8f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb25 <__RME_X64_USER60_Handler>:

USER_HANDLER NAME=__RME_X64_USER60_Handler VECTNUM=60
ffffffff8020bb25:	0f 01 f8             	swapgs
ffffffff8020bb28:	6a 00                	push   $0x0
ffffffff8020bb2a:	6a 3c                	push   $0x3c
ffffffff8020bb2c:	e9 83 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb31 <__RME_X64_USER61_Handler>:
USER_HANDLER NAME=__RME_X64_USER61_Handler VECTNUM=61
ffffffff8020bb31:	0f 01 f8             	swapgs
ffffffff8020bb34:	6a 00                	push   $0x0
ffffffff8020bb36:	6a 3d                	push   $0x3d
ffffffff8020bb38:	e9 77 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb3d <__RME_X64_USER62_Handler>:
USER_HANDLER NAME=__RME_X64_USER62_Handler VECTNUM=62
ffffffff8020bb3d:	0f 01 f8             	swapgs
ffffffff8020bb40:	6a 00                	push   $0x0
ffffffff8020bb42:	6a 3e                	push   $0x3e
ffffffff8020bb44:	e9 6b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb49 <__RME_X64_USER63_Handler>:
USER_HANDLER NAME=__RME_X64_USER63_Handler VECTNUM=63
ffffffff8020bb49:	0f 01 f8             	swapgs
ffffffff8020bb4c:	6a 00                	push   $0x0
ffffffff8020bb4e:	6a 3f                	push   $0x3f
ffffffff8020bb50:	e9 5f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb55 <__RME_X64_USER64_Handler>:
USER_HANDLER NAME=__RME_X64_USER64_Handler VECTNUM=64
ffffffff8020bb55:	0f 01 f8             	swapgs
ffffffff8020bb58:	6a 00                	push   $0x0
ffffffff8020bb5a:	6a 40                	push   $0x40
ffffffff8020bb5c:	e9 53 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb61 <__RME_X64_USER65_Handler>:
USER_HANDLER NAME=__RME_X64_USER65_Handler VECTNUM=65
ffffffff8020bb61:	0f 01 f8             	swapgs
ffffffff8020bb64:	6a 00                	push   $0x0
ffffffff8020bb66:	6a 41                	push   $0x41
ffffffff8020bb68:	e9 47 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb6d <__RME_X64_USER66_Handler>:
USER_HANDLER NAME=__RME_X64_USER66_Handler VECTNUM=66
ffffffff8020bb6d:	0f 01 f8             	swapgs
ffffffff8020bb70:	6a 00                	push   $0x0
ffffffff8020bb72:	6a 42                	push   $0x42
ffffffff8020bb74:	e9 3b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb79 <__RME_X64_USER67_Handler>:
USER_HANDLER NAME=__RME_X64_USER67_Handler VECTNUM=67
ffffffff8020bb79:	0f 01 f8             	swapgs
ffffffff8020bb7c:	6a 00                	push   $0x0
ffffffff8020bb7e:	6a 43                	push   $0x43
ffffffff8020bb80:	e9 2f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb85 <__RME_X64_USER68_Handler>:
USER_HANDLER NAME=__RME_X64_USER68_Handler VECTNUM=68
ffffffff8020bb85:	0f 01 f8             	swapgs
ffffffff8020bb88:	6a 00                	push   $0x0
ffffffff8020bb8a:	6a 44                	push   $0x44
ffffffff8020bb8c:	e9 23 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb91 <__RME_X64_USER69_Handler>:
USER_HANDLER NAME=__RME_X64_USER69_Handler VECTNUM=69
ffffffff8020bb91:	0f 01 f8             	swapgs
ffffffff8020bb94:	6a 00                	push   $0x0
ffffffff8020bb96:	6a 45                	push   $0x45
ffffffff8020bb98:	e9 17 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb9d <__RME_X64_USER70_Handler>:

USER_HANDLER NAME=__RME_X64_USER70_Handler VECTNUM=70
ffffffff8020bb9d:	0f 01 f8             	swapgs
ffffffff8020bba0:	6a 00                	push   $0x0
ffffffff8020bba2:	6a 46                	push   $0x46
ffffffff8020bba4:	e9 0b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bba9 <__RME_X64_USER71_Handler>:
USER_HANDLER NAME=__RME_X64_USER71_Handler VECTNUM=71
ffffffff8020bba9:	0f 01 f8             	swapgs
ffffffff8020bbac:	6a 00                	push   $0x0
ffffffff8020bbae:	6a 47                	push   $0x47
ffffffff8020bbb0:	e9 ff 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbb5 <__RME_X64_USER72_Handler>:
USER_HANDLER NAME=__RME_X64_USER72_Handler VECTNUM=72
ffffffff8020bbb5:	0f 01 f8             	swapgs
ffffffff8020bbb8:	6a 00                	push   $0x0
ffffffff8020bbba:	6a 48                	push   $0x48
ffffffff8020bbbc:	e9 f3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbc1 <__RME_X64_USER73_Handler>:
USER_HANDLER NAME=__RME_X64_USER73_Handler VECTNUM=73
ffffffff8020bbc1:	0f 01 f8             	swapgs
ffffffff8020bbc4:	6a 00                	push   $0x0
ffffffff8020bbc6:	6a 49                	push   $0x49
ffffffff8020bbc8:	e9 e7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbcd <__RME_X64_USER74_Handler>:
USER_HANDLER NAME=__RME_X64_USER74_Handler VECTNUM=74
ffffffff8020bbcd:	0f 01 f8             	swapgs
ffffffff8020bbd0:	6a 00                	push   $0x0
ffffffff8020bbd2:	6a 4a                	push   $0x4a
ffffffff8020bbd4:	e9 db 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbd9 <__RME_X64_USER75_Handler>:
USER_HANDLER NAME=__RME_X64_USER75_Handler VECTNUM=75
ffffffff8020bbd9:	0f 01 f8             	swapgs
ffffffff8020bbdc:	6a 00                	push   $0x0
ffffffff8020bbde:	6a 4b                	push   $0x4b
ffffffff8020bbe0:	e9 cf 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbe5 <__RME_X64_USER76_Handler>:
USER_HANDLER NAME=__RME_X64_USER76_Handler VECTNUM=76
ffffffff8020bbe5:	0f 01 f8             	swapgs
ffffffff8020bbe8:	6a 00                	push   $0x0
ffffffff8020bbea:	6a 4c                	push   $0x4c
ffffffff8020bbec:	e9 c3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbf1 <__RME_X64_USER77_Handler>:
USER_HANDLER NAME=__RME_X64_USER77_Handler VECTNUM=77
ffffffff8020bbf1:	0f 01 f8             	swapgs
ffffffff8020bbf4:	6a 00                	push   $0x0
ffffffff8020bbf6:	6a 4d                	push   $0x4d
ffffffff8020bbf8:	e9 b7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbfd <__RME_X64_USER78_Handler>:
USER_HANDLER NAME=__RME_X64_USER78_Handler VECTNUM=78
ffffffff8020bbfd:	0f 01 f8             	swapgs
ffffffff8020bc00:	6a 00                	push   $0x0
ffffffff8020bc02:	6a 4e                	push   $0x4e
ffffffff8020bc04:	e9 ab 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc09 <__RME_X64_USER79_Handler>:
USER_HANDLER NAME=__RME_X64_USER79_Handler VECTNUM=79
ffffffff8020bc09:	0f 01 f8             	swapgs
ffffffff8020bc0c:	6a 00                	push   $0x0
ffffffff8020bc0e:	6a 4f                	push   $0x4f
ffffffff8020bc10:	e9 9f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc15 <__RME_X64_USER80_Handler>:

USER_HANDLER NAME=__RME_X64_USER80_Handler VECTNUM=80
ffffffff8020bc15:	0f 01 f8             	swapgs
ffffffff8020bc18:	6a 00                	push   $0x0
ffffffff8020bc1a:	6a 50                	push   $0x50
ffffffff8020bc1c:	e9 93 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc21 <__RME_X64_USER81_Handler>:
USER_HANDLER NAME=__RME_X64_USER81_Handler VECTNUM=81
ffffffff8020bc21:	0f 01 f8             	swapgs
ffffffff8020bc24:	6a 00                	push   $0x0
ffffffff8020bc26:	6a 51                	push   $0x51
ffffffff8020bc28:	e9 87 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc2d <__RME_X64_USER82_Handler>:
USER_HANDLER NAME=__RME_X64_USER82_Handler VECTNUM=82
ffffffff8020bc2d:	0f 01 f8             	swapgs
ffffffff8020bc30:	6a 00                	push   $0x0
ffffffff8020bc32:	6a 52                	push   $0x52
ffffffff8020bc34:	e9 7b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc39 <__RME_X64_USER83_Handler>:
USER_HANDLER NAME=__RME_X64_USER83_Handler VECTNUM=83
ffffffff8020bc39:	0f 01 f8             	swapgs
ffffffff8020bc3c:	6a 00                	push   $0x0
ffffffff8020bc3e:	6a 53                	push   $0x53
ffffffff8020bc40:	e9 6f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc45 <__RME_X64_USER84_Handler>:
USER_HANDLER NAME=__RME_X64_USER84_Handler VECTNUM=84
ffffffff8020bc45:	0f 01 f8             	swapgs
ffffffff8020bc48:	6a 00                	push   $0x0
ffffffff8020bc4a:	6a 54                	push   $0x54
ffffffff8020bc4c:	e9 63 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc51 <__RME_X64_USER85_Handler>:
USER_HANDLER NAME=__RME_X64_USER85_Handler VECTNUM=85
ffffffff8020bc51:	0f 01 f8             	swapgs
ffffffff8020bc54:	6a 00                	push   $0x0
ffffffff8020bc56:	6a 55                	push   $0x55
ffffffff8020bc58:	e9 57 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc5d <__RME_X64_USER86_Handler>:
USER_HANDLER NAME=__RME_X64_USER86_Handler VECTNUM=86
ffffffff8020bc5d:	0f 01 f8             	swapgs
ffffffff8020bc60:	6a 00                	push   $0x0
ffffffff8020bc62:	6a 56                	push   $0x56
ffffffff8020bc64:	e9 4b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc69 <__RME_X64_USER87_Handler>:
USER_HANDLER NAME=__RME_X64_USER87_Handler VECTNUM=87
ffffffff8020bc69:	0f 01 f8             	swapgs
ffffffff8020bc6c:	6a 00                	push   $0x0
ffffffff8020bc6e:	6a 57                	push   $0x57
ffffffff8020bc70:	e9 3f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc75 <__RME_X64_USER88_Handler>:
USER_HANDLER NAME=__RME_X64_USER88_Handler VECTNUM=88
ffffffff8020bc75:	0f 01 f8             	swapgs
ffffffff8020bc78:	6a 00                	push   $0x0
ffffffff8020bc7a:	6a 58                	push   $0x58
ffffffff8020bc7c:	e9 33 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc81 <__RME_X64_USER89_Handler>:
USER_HANDLER NAME=__RME_X64_USER89_Handler VECTNUM=89
ffffffff8020bc81:	0f 01 f8             	swapgs
ffffffff8020bc84:	6a 00                	push   $0x0
ffffffff8020bc86:	6a 59                	push   $0x59
ffffffff8020bc88:	e9 27 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc8d <__RME_X64_USER90_Handler>:

USER_HANDLER NAME=__RME_X64_USER90_Handler VECTNUM=90
ffffffff8020bc8d:	0f 01 f8             	swapgs
ffffffff8020bc90:	6a 00                	push   $0x0
ffffffff8020bc92:	6a 5a                	push   $0x5a
ffffffff8020bc94:	e9 1b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc99 <__RME_X64_USER91_Handler>:
USER_HANDLER NAME=__RME_X64_USER91_Handler VECTNUM=91
ffffffff8020bc99:	0f 01 f8             	swapgs
ffffffff8020bc9c:	6a 00                	push   $0x0
ffffffff8020bc9e:	6a 5b                	push   $0x5b
ffffffff8020bca0:	e9 0f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bca5 <__RME_X64_USER92_Handler>:
USER_HANDLER NAME=__RME_X64_USER92_Handler VECTNUM=92
ffffffff8020bca5:	0f 01 f8             	swapgs
ffffffff8020bca8:	6a 00                	push   $0x0
ffffffff8020bcaa:	6a 5c                	push   $0x5c
ffffffff8020bcac:	e9 03 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcb1 <__RME_X64_USER93_Handler>:
USER_HANDLER NAME=__RME_X64_USER93_Handler VECTNUM=93
ffffffff8020bcb1:	0f 01 f8             	swapgs
ffffffff8020bcb4:	6a 00                	push   $0x0
ffffffff8020bcb6:	6a 5d                	push   $0x5d
ffffffff8020bcb8:	e9 f7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcbd <__RME_X64_USER94_Handler>:
USER_HANDLER NAME=__RME_X64_USER94_Handler VECTNUM=94
ffffffff8020bcbd:	0f 01 f8             	swapgs
ffffffff8020bcc0:	6a 00                	push   $0x0
ffffffff8020bcc2:	6a 5e                	push   $0x5e
ffffffff8020bcc4:	e9 eb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcc9 <__RME_X64_USER95_Handler>:
USER_HANDLER NAME=__RME_X64_USER95_Handler VECTNUM=95
ffffffff8020bcc9:	0f 01 f8             	swapgs
ffffffff8020bccc:	6a 00                	push   $0x0
ffffffff8020bcce:	6a 5f                	push   $0x5f
ffffffff8020bcd0:	e9 df 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcd5 <__RME_X64_USER96_Handler>:
USER_HANDLER NAME=__RME_X64_USER96_Handler VECTNUM=96
ffffffff8020bcd5:	0f 01 f8             	swapgs
ffffffff8020bcd8:	6a 00                	push   $0x0
ffffffff8020bcda:	6a 60                	push   $0x60
ffffffff8020bcdc:	e9 d3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bce1 <__RME_X64_USER97_Handler>:
USER_HANDLER NAME=__RME_X64_USER97_Handler VECTNUM=97
ffffffff8020bce1:	0f 01 f8             	swapgs
ffffffff8020bce4:	6a 00                	push   $0x0
ffffffff8020bce6:	6a 61                	push   $0x61
ffffffff8020bce8:	e9 c7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bced <__RME_X64_USER98_Handler>:
USER_HANDLER NAME=__RME_X64_USER98_Handler VECTNUM=98
ffffffff8020bced:	0f 01 f8             	swapgs
ffffffff8020bcf0:	6a 00                	push   $0x0
ffffffff8020bcf2:	6a 62                	push   $0x62
ffffffff8020bcf4:	e9 bb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcf9 <__RME_X64_USER99_Handler>:
USER_HANDLER NAME=__RME_X64_USER99_Handler VECTNUM=99
ffffffff8020bcf9:	0f 01 f8             	swapgs
ffffffff8020bcfc:	6a 00                	push   $0x0
ffffffff8020bcfe:	6a 63                	push   $0x63
ffffffff8020bd00:	e9 af 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd05 <__RME_X64_USER100_Handler>:

USER_HANDLER NAME=__RME_X64_USER100_Handler VECTNUM=100
ffffffff8020bd05:	0f 01 f8             	swapgs
ffffffff8020bd08:	6a 00                	push   $0x0
ffffffff8020bd0a:	6a 64                	push   $0x64
ffffffff8020bd0c:	e9 a3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd11 <__RME_X64_USER101_Handler>:
USER_HANDLER NAME=__RME_X64_USER101_Handler VECTNUM=101
ffffffff8020bd11:	0f 01 f8             	swapgs
ffffffff8020bd14:	6a 00                	push   $0x0
ffffffff8020bd16:	6a 65                	push   $0x65
ffffffff8020bd18:	e9 97 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd1d <__RME_X64_USER102_Handler>:
USER_HANDLER NAME=__RME_X64_USER102_Handler VECTNUM=102
ffffffff8020bd1d:	0f 01 f8             	swapgs
ffffffff8020bd20:	6a 00                	push   $0x0
ffffffff8020bd22:	6a 66                	push   $0x66
ffffffff8020bd24:	e9 8b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd29 <__RME_X64_USER103_Handler>:
USER_HANDLER NAME=__RME_X64_USER103_Handler VECTNUM=103
ffffffff8020bd29:	0f 01 f8             	swapgs
ffffffff8020bd2c:	6a 00                	push   $0x0
ffffffff8020bd2e:	6a 67                	push   $0x67
ffffffff8020bd30:	e9 7f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd35 <__RME_X64_USER104_Handler>:
USER_HANDLER NAME=__RME_X64_USER104_Handler VECTNUM=104
ffffffff8020bd35:	0f 01 f8             	swapgs
ffffffff8020bd38:	6a 00                	push   $0x0
ffffffff8020bd3a:	6a 68                	push   $0x68
ffffffff8020bd3c:	e9 73 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd41 <__RME_X64_USER105_Handler>:
USER_HANDLER NAME=__RME_X64_USER105_Handler VECTNUM=105
ffffffff8020bd41:	0f 01 f8             	swapgs
ffffffff8020bd44:	6a 00                	push   $0x0
ffffffff8020bd46:	6a 69                	push   $0x69
ffffffff8020bd48:	e9 67 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd4d <__RME_X64_USER106_Handler>:
USER_HANDLER NAME=__RME_X64_USER106_Handler VECTNUM=106
ffffffff8020bd4d:	0f 01 f8             	swapgs
ffffffff8020bd50:	6a 00                	push   $0x0
ffffffff8020bd52:	6a 6a                	push   $0x6a
ffffffff8020bd54:	e9 5b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd59 <__RME_X64_USER107_Handler>:
USER_HANDLER NAME=__RME_X64_USER107_Handler VECTNUM=107
ffffffff8020bd59:	0f 01 f8             	swapgs
ffffffff8020bd5c:	6a 00                	push   $0x0
ffffffff8020bd5e:	6a 6b                	push   $0x6b
ffffffff8020bd60:	e9 4f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd65 <__RME_X64_USER108_Handler>:
USER_HANDLER NAME=__RME_X64_USER108_Handler VECTNUM=108
ffffffff8020bd65:	0f 01 f8             	swapgs
ffffffff8020bd68:	6a 00                	push   $0x0
ffffffff8020bd6a:	6a 6c                	push   $0x6c
ffffffff8020bd6c:	e9 43 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd71 <__RME_X64_USER109_Handler>:
USER_HANDLER NAME=__RME_X64_USER109_Handler VECTNUM=109
ffffffff8020bd71:	0f 01 f8             	swapgs
ffffffff8020bd74:	6a 00                	push   $0x0
ffffffff8020bd76:	6a 6d                	push   $0x6d
ffffffff8020bd78:	e9 37 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd7d <__RME_X64_USER110_Handler>:

USER_HANDLER NAME=__RME_X64_USER110_Handler VECTNUM=110
ffffffff8020bd7d:	0f 01 f8             	swapgs
ffffffff8020bd80:	6a 00                	push   $0x0
ffffffff8020bd82:	6a 6e                	push   $0x6e
ffffffff8020bd84:	e9 2b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd89 <__RME_X64_USER111_Handler>:
USER_HANDLER NAME=__RME_X64_USER111_Handler VECTNUM=111
ffffffff8020bd89:	0f 01 f8             	swapgs
ffffffff8020bd8c:	6a 00                	push   $0x0
ffffffff8020bd8e:	6a 6f                	push   $0x6f
ffffffff8020bd90:	e9 1f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd95 <__RME_X64_USER112_Handler>:
USER_HANDLER NAME=__RME_X64_USER112_Handler VECTNUM=112
ffffffff8020bd95:	0f 01 f8             	swapgs
ffffffff8020bd98:	6a 00                	push   $0x0
ffffffff8020bd9a:	6a 70                	push   $0x70
ffffffff8020bd9c:	e9 13 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bda1 <__RME_X64_USER113_Handler>:
USER_HANDLER NAME=__RME_X64_USER113_Handler VECTNUM=113
ffffffff8020bda1:	0f 01 f8             	swapgs
ffffffff8020bda4:	6a 00                	push   $0x0
ffffffff8020bda6:	6a 71                	push   $0x71
ffffffff8020bda8:	e9 07 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdad <__RME_X64_USER114_Handler>:
USER_HANDLER NAME=__RME_X64_USER114_Handler VECTNUM=114
ffffffff8020bdad:	0f 01 f8             	swapgs
ffffffff8020bdb0:	6a 00                	push   $0x0
ffffffff8020bdb2:	6a 72                	push   $0x72
ffffffff8020bdb4:	e9 fb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdb9 <__RME_X64_USER115_Handler>:
USER_HANDLER NAME=__RME_X64_USER115_Handler VECTNUM=115
ffffffff8020bdb9:	0f 01 f8             	swapgs
ffffffff8020bdbc:	6a 00                	push   $0x0
ffffffff8020bdbe:	6a 73                	push   $0x73
ffffffff8020bdc0:	e9 ef 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdc5 <__RME_X64_USER116_Handler>:
USER_HANDLER NAME=__RME_X64_USER116_Handler VECTNUM=116
ffffffff8020bdc5:	0f 01 f8             	swapgs
ffffffff8020bdc8:	6a 00                	push   $0x0
ffffffff8020bdca:	6a 74                	push   $0x74
ffffffff8020bdcc:	e9 e3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdd1 <__RME_X64_USER117_Handler>:
USER_HANDLER NAME=__RME_X64_USER117_Handler VECTNUM=117
ffffffff8020bdd1:	0f 01 f8             	swapgs
ffffffff8020bdd4:	6a 00                	push   $0x0
ffffffff8020bdd6:	6a 75                	push   $0x75
ffffffff8020bdd8:	e9 d7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bddd <__RME_X64_USER118_Handler>:
USER_HANDLER NAME=__RME_X64_USER118_Handler VECTNUM=118
ffffffff8020bddd:	0f 01 f8             	swapgs
ffffffff8020bde0:	6a 00                	push   $0x0
ffffffff8020bde2:	6a 76                	push   $0x76
ffffffff8020bde4:	e9 cb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bde9 <__RME_X64_USER119_Handler>:
USER_HANDLER NAME=__RME_X64_USER119_Handler VECTNUM=119
ffffffff8020bde9:	0f 01 f8             	swapgs
ffffffff8020bdec:	6a 00                	push   $0x0
ffffffff8020bdee:	6a 77                	push   $0x77
ffffffff8020bdf0:	e9 bf 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdf5 <__RME_X64_USER120_Handler>:

USER_HANDLER NAME=__RME_X64_USER120_Handler VECTNUM=120
ffffffff8020bdf5:	0f 01 f8             	swapgs
ffffffff8020bdf8:	6a 00                	push   $0x0
ffffffff8020bdfa:	6a 78                	push   $0x78
ffffffff8020bdfc:	e9 b3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be01 <__RME_X64_USER121_Handler>:
USER_HANDLER NAME=__RME_X64_USER121_Handler VECTNUM=121
ffffffff8020be01:	0f 01 f8             	swapgs
ffffffff8020be04:	6a 00                	push   $0x0
ffffffff8020be06:	6a 79                	push   $0x79
ffffffff8020be08:	e9 a7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be0d <__RME_X64_USER122_Handler>:
USER_HANDLER NAME=__RME_X64_USER122_Handler VECTNUM=122
ffffffff8020be0d:	0f 01 f8             	swapgs
ffffffff8020be10:	6a 00                	push   $0x0
ffffffff8020be12:	6a 7a                	push   $0x7a
ffffffff8020be14:	e9 9b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be19 <__RME_X64_USER123_Handler>:
USER_HANDLER NAME=__RME_X64_USER123_Handler VECTNUM=123
ffffffff8020be19:	0f 01 f8             	swapgs
ffffffff8020be1c:	6a 00                	push   $0x0
ffffffff8020be1e:	6a 7b                	push   $0x7b
ffffffff8020be20:	e9 8f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be25 <__RME_X64_USER124_Handler>:
USER_HANDLER NAME=__RME_X64_USER124_Handler VECTNUM=124
ffffffff8020be25:	0f 01 f8             	swapgs
ffffffff8020be28:	6a 00                	push   $0x0
ffffffff8020be2a:	6a 7c                	push   $0x7c
ffffffff8020be2c:	e9 83 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be31 <__RME_X64_USER125_Handler>:
USER_HANDLER NAME=__RME_X64_USER125_Handler VECTNUM=125
ffffffff8020be31:	0f 01 f8             	swapgs
ffffffff8020be34:	6a 00                	push   $0x0
ffffffff8020be36:	6a 7d                	push   $0x7d
ffffffff8020be38:	e9 77 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be3d <__RME_X64_USER126_Handler>:
USER_HANDLER NAME=__RME_X64_USER126_Handler VECTNUM=126
ffffffff8020be3d:	0f 01 f8             	swapgs
ffffffff8020be40:	6a 00                	push   $0x0
ffffffff8020be42:	6a 7e                	push   $0x7e
ffffffff8020be44:	e9 6b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be49 <__RME_X64_USER127_Handler>:
USER_HANDLER NAME=__RME_X64_USER127_Handler VECTNUM=127
ffffffff8020be49:	0f 01 f8             	swapgs
ffffffff8020be4c:	6a 00                	push   $0x0
ffffffff8020be4e:	6a 7f                	push   $0x7f
ffffffff8020be50:	e9 5f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be55 <__RME_X64_USER128_Handler>:
USER_HANDLER NAME=__RME_X64_USER128_Handler VECTNUM=128
ffffffff8020be55:	0f 01 f8             	swapgs
ffffffff8020be58:	6a 00                	push   $0x0
ffffffff8020be5a:	68 80 00 00 00       	push   $0x80
ffffffff8020be5f:	e9 50 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be64 <__RME_X64_USER129_Handler>:
USER_HANDLER NAME=__RME_X64_USER129_Handler VECTNUM=129
ffffffff8020be64:	0f 01 f8             	swapgs
ffffffff8020be67:	6a 00                	push   $0x0
ffffffff8020be69:	68 81 00 00 00       	push   $0x81
ffffffff8020be6e:	e9 41 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be73 <__RME_X64_USER130_Handler>:

USER_HANDLER NAME=__RME_X64_USER130_Handler VECTNUM=130
ffffffff8020be73:	0f 01 f8             	swapgs
ffffffff8020be76:	6a 00                	push   $0x0
ffffffff8020be78:	68 82 00 00 00       	push   $0x82
ffffffff8020be7d:	e9 32 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be82 <__RME_X64_USER131_Handler>:
USER_HANDLER NAME=__RME_X64_USER131_Handler VECTNUM=131
ffffffff8020be82:	0f 01 f8             	swapgs
ffffffff8020be85:	6a 00                	push   $0x0
ffffffff8020be87:	68 83 00 00 00       	push   $0x83
ffffffff8020be8c:	e9 23 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be91 <__RME_X64_USER132_Handler>:
USER_HANDLER NAME=__RME_X64_USER132_Handler VECTNUM=132
ffffffff8020be91:	0f 01 f8             	swapgs
ffffffff8020be94:	6a 00                	push   $0x0
ffffffff8020be96:	68 84 00 00 00       	push   $0x84
ffffffff8020be9b:	e9 14 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bea0 <__RME_X64_USER133_Handler>:
USER_HANDLER NAME=__RME_X64_USER133_Handler VECTNUM=133
ffffffff8020bea0:	0f 01 f8             	swapgs
ffffffff8020bea3:	6a 00                	push   $0x0
ffffffff8020bea5:	68 85 00 00 00       	push   $0x85
ffffffff8020beaa:	e9 05 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beaf <__RME_X64_USER134_Handler>:
USER_HANDLER NAME=__RME_X64_USER134_Handler VECTNUM=134
ffffffff8020beaf:	0f 01 f8             	swapgs
ffffffff8020beb2:	6a 00                	push   $0x0
ffffffff8020beb4:	68 86 00 00 00       	push   $0x86
ffffffff8020beb9:	e9 f6 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bebe <__RME_X64_USER135_Handler>:
USER_HANDLER NAME=__RME_X64_USER135_Handler VECTNUM=135
ffffffff8020bebe:	0f 01 f8             	swapgs
ffffffff8020bec1:	6a 00                	push   $0x0
ffffffff8020bec3:	68 87 00 00 00       	push   $0x87
ffffffff8020bec8:	e9 e7 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020becd <__RME_X64_USER136_Handler>:
USER_HANDLER NAME=__RME_X64_USER136_Handler VECTNUM=136
ffffffff8020becd:	0f 01 f8             	swapgs
ffffffff8020bed0:	6a 00                	push   $0x0
ffffffff8020bed2:	68 88 00 00 00       	push   $0x88
ffffffff8020bed7:	e9 d8 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bedc <__RME_X64_USER137_Handler>:
USER_HANDLER NAME=__RME_X64_USER137_Handler VECTNUM=137
ffffffff8020bedc:	0f 01 f8             	swapgs
ffffffff8020bedf:	6a 00                	push   $0x0
ffffffff8020bee1:	68 89 00 00 00       	push   $0x89
ffffffff8020bee6:	e9 c9 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beeb <__RME_X64_USER138_Handler>:
USER_HANDLER NAME=__RME_X64_USER138_Handler VECTNUM=138
ffffffff8020beeb:	0f 01 f8             	swapgs
ffffffff8020beee:	6a 00                	push   $0x0
ffffffff8020bef0:	68 8a 00 00 00       	push   $0x8a
ffffffff8020bef5:	e9 ba 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020befa <__RME_X64_USER139_Handler>:
USER_HANDLER NAME=__RME_X64_USER139_Handler VECTNUM=139
ffffffff8020befa:	0f 01 f8             	swapgs
ffffffff8020befd:	6a 00                	push   $0x0
ffffffff8020beff:	68 8b 00 00 00       	push   $0x8b
ffffffff8020bf04:	e9 ab 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf09 <__RME_X64_USER140_Handler>:

USER_HANDLER NAME=__RME_X64_USER140_Handler VECTNUM=140
ffffffff8020bf09:	0f 01 f8             	swapgs
ffffffff8020bf0c:	6a 00                	push   $0x0
ffffffff8020bf0e:	68 8c 00 00 00       	push   $0x8c
ffffffff8020bf13:	e9 9c 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf18 <__RME_X64_USER141_Handler>:
USER_HANDLER NAME=__RME_X64_USER141_Handler VECTNUM=141
ffffffff8020bf18:	0f 01 f8             	swapgs
ffffffff8020bf1b:	6a 00                	push   $0x0
ffffffff8020bf1d:	68 8d 00 00 00       	push   $0x8d
ffffffff8020bf22:	e9 8d 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf27 <__RME_X64_USER142_Handler>:
USER_HANDLER NAME=__RME_X64_USER142_Handler VECTNUM=142
ffffffff8020bf27:	0f 01 f8             	swapgs
ffffffff8020bf2a:	6a 00                	push   $0x0
ffffffff8020bf2c:	68 8e 00 00 00       	push   $0x8e
ffffffff8020bf31:	e9 7e 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf36 <__RME_X64_USER143_Handler>:
USER_HANDLER NAME=__RME_X64_USER143_Handler VECTNUM=143
ffffffff8020bf36:	0f 01 f8             	swapgs
ffffffff8020bf39:	6a 00                	push   $0x0
ffffffff8020bf3b:	68 8f 00 00 00       	push   $0x8f
ffffffff8020bf40:	e9 6f 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf45 <__RME_X64_USER144_Handler>:
USER_HANDLER NAME=__RME_X64_USER144_Handler VECTNUM=144
ffffffff8020bf45:	0f 01 f8             	swapgs
ffffffff8020bf48:	6a 00                	push   $0x0
ffffffff8020bf4a:	68 90 00 00 00       	push   $0x90
ffffffff8020bf4f:	e9 60 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf54 <__RME_X64_USER145_Handler>:
USER_HANDLER NAME=__RME_X64_USER145_Handler VECTNUM=145
ffffffff8020bf54:	0f 01 f8             	swapgs
ffffffff8020bf57:	6a 00                	push   $0x0
ffffffff8020bf59:	68 91 00 00 00       	push   $0x91
ffffffff8020bf5e:	e9 51 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf63 <__RME_X64_USER146_Handler>:
USER_HANDLER NAME=__RME_X64_USER146_Handler VECTNUM=146
ffffffff8020bf63:	0f 01 f8             	swapgs
ffffffff8020bf66:	6a 00                	push   $0x0
ffffffff8020bf68:	68 92 00 00 00       	push   $0x92
ffffffff8020bf6d:	e9 42 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf72 <__RME_X64_USER147_Handler>:
USER_HANDLER NAME=__RME_X64_USER147_Handler VECTNUM=147
ffffffff8020bf72:	0f 01 f8             	swapgs
ffffffff8020bf75:	6a 00                	push   $0x0
ffffffff8020bf77:	68 93 00 00 00       	push   $0x93
ffffffff8020bf7c:	e9 33 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf81 <__RME_X64_USER148_Handler>:
USER_HANDLER NAME=__RME_X64_USER148_Handler VECTNUM=148
ffffffff8020bf81:	0f 01 f8             	swapgs
ffffffff8020bf84:	6a 00                	push   $0x0
ffffffff8020bf86:	68 94 00 00 00       	push   $0x94
ffffffff8020bf8b:	e9 24 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf90 <__RME_X64_USER149_Handler>:
USER_HANDLER NAME=__RME_X64_USER149_Handler VECTNUM=149
ffffffff8020bf90:	0f 01 f8             	swapgs
ffffffff8020bf93:	6a 00                	push   $0x0
ffffffff8020bf95:	68 95 00 00 00       	push   $0x95
ffffffff8020bf9a:	e9 15 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf9f <__RME_X64_USER150_Handler>:

USER_HANDLER NAME=__RME_X64_USER150_Handler VECTNUM=150
ffffffff8020bf9f:	0f 01 f8             	swapgs
ffffffff8020bfa2:	6a 00                	push   $0x0
ffffffff8020bfa4:	68 96 00 00 00       	push   $0x96
ffffffff8020bfa9:	e9 06 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfae <__RME_X64_USER151_Handler>:
USER_HANDLER NAME=__RME_X64_USER151_Handler VECTNUM=151
ffffffff8020bfae:	0f 01 f8             	swapgs
ffffffff8020bfb1:	6a 00                	push   $0x0
ffffffff8020bfb3:	68 97 00 00 00       	push   $0x97
ffffffff8020bfb8:	e9 f7 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfbd <__RME_X64_USER152_Handler>:
USER_HANDLER NAME=__RME_X64_USER152_Handler VECTNUM=152
ffffffff8020bfbd:	0f 01 f8             	swapgs
ffffffff8020bfc0:	6a 00                	push   $0x0
ffffffff8020bfc2:	68 98 00 00 00       	push   $0x98
ffffffff8020bfc7:	e9 e8 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfcc <__RME_X64_USER153_Handler>:
USER_HANDLER NAME=__RME_X64_USER153_Handler VECTNUM=153
ffffffff8020bfcc:	0f 01 f8             	swapgs
ffffffff8020bfcf:	6a 00                	push   $0x0
ffffffff8020bfd1:	68 99 00 00 00       	push   $0x99
ffffffff8020bfd6:	e9 d9 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfdb <__RME_X64_USER154_Handler>:
USER_HANDLER NAME=__RME_X64_USER154_Handler VECTNUM=154
ffffffff8020bfdb:	0f 01 f8             	swapgs
ffffffff8020bfde:	6a 00                	push   $0x0
ffffffff8020bfe0:	68 9a 00 00 00       	push   $0x9a
ffffffff8020bfe5:	e9 ca 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfea <__RME_X64_USER155_Handler>:
USER_HANDLER NAME=__RME_X64_USER155_Handler VECTNUM=155
ffffffff8020bfea:	0f 01 f8             	swapgs
ffffffff8020bfed:	6a 00                	push   $0x0
ffffffff8020bfef:	68 9b 00 00 00       	push   $0x9b
ffffffff8020bff4:	e9 bb 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bff9 <__RME_X64_USER156_Handler>:
USER_HANDLER NAME=__RME_X64_USER156_Handler VECTNUM=156
ffffffff8020bff9:	0f 01 f8             	swapgs
ffffffff8020bffc:	6a 00                	push   $0x0
ffffffff8020bffe:	68 9c 00 00 00       	push   $0x9c
ffffffff8020c003:	e9 ac 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c008 <__RME_X64_USER157_Handler>:
USER_HANDLER NAME=__RME_X64_USER157_Handler VECTNUM=157
ffffffff8020c008:	0f 01 f8             	swapgs
ffffffff8020c00b:	6a 00                	push   $0x0
ffffffff8020c00d:	68 9d 00 00 00       	push   $0x9d
ffffffff8020c012:	e9 9d 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c017 <__RME_X64_USER158_Handler>:
USER_HANDLER NAME=__RME_X64_USER158_Handler VECTNUM=158
ffffffff8020c017:	0f 01 f8             	swapgs
ffffffff8020c01a:	6a 00                	push   $0x0
ffffffff8020c01c:	68 9e 00 00 00       	push   $0x9e
ffffffff8020c021:	e9 8e 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c026 <__RME_X64_USER159_Handler>:
USER_HANDLER NAME=__RME_X64_USER159_Handler VECTNUM=159
ffffffff8020c026:	0f 01 f8             	swapgs
ffffffff8020c029:	6a 00                	push   $0x0
ffffffff8020c02b:	68 9f 00 00 00       	push   $0x9f
ffffffff8020c030:	e9 7f 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c035 <__RME_X64_USER160_Handler>:

USER_HANDLER NAME=__RME_X64_USER160_Handler VECTNUM=160
ffffffff8020c035:	0f 01 f8             	swapgs
ffffffff8020c038:	6a 00                	push   $0x0
ffffffff8020c03a:	68 a0 00 00 00       	push   $0xa0
ffffffff8020c03f:	e9 70 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c044 <__RME_X64_USER161_Handler>:
USER_HANDLER NAME=__RME_X64_USER161_Handler VECTNUM=161
ffffffff8020c044:	0f 01 f8             	swapgs
ffffffff8020c047:	6a 00                	push   $0x0
ffffffff8020c049:	68 a1 00 00 00       	push   $0xa1
ffffffff8020c04e:	e9 61 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c053 <__RME_X64_USER162_Handler>:
USER_HANDLER NAME=__RME_X64_USER162_Handler VECTNUM=162
ffffffff8020c053:	0f 01 f8             	swapgs
ffffffff8020c056:	6a 00                	push   $0x0
ffffffff8020c058:	68 a2 00 00 00       	push   $0xa2
ffffffff8020c05d:	e9 52 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c062 <__RME_X64_USER163_Handler>:
USER_HANDLER NAME=__RME_X64_USER163_Handler VECTNUM=163
ffffffff8020c062:	0f 01 f8             	swapgs
ffffffff8020c065:	6a 00                	push   $0x0
ffffffff8020c067:	68 a3 00 00 00       	push   $0xa3
ffffffff8020c06c:	e9 43 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c071 <__RME_X64_USER164_Handler>:
USER_HANDLER NAME=__RME_X64_USER164_Handler VECTNUM=164
ffffffff8020c071:	0f 01 f8             	swapgs
ffffffff8020c074:	6a 00                	push   $0x0
ffffffff8020c076:	68 a4 00 00 00       	push   $0xa4
ffffffff8020c07b:	e9 34 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c080 <__RME_X64_USER165_Handler>:
USER_HANDLER NAME=__RME_X64_USER165_Handler VECTNUM=165
ffffffff8020c080:	0f 01 f8             	swapgs
ffffffff8020c083:	6a 00                	push   $0x0
ffffffff8020c085:	68 a5 00 00 00       	push   $0xa5
ffffffff8020c08a:	e9 25 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c08f <__RME_X64_USER166_Handler>:
USER_HANDLER NAME=__RME_X64_USER166_Handler VECTNUM=166
ffffffff8020c08f:	0f 01 f8             	swapgs
ffffffff8020c092:	6a 00                	push   $0x0
ffffffff8020c094:	68 a6 00 00 00       	push   $0xa6
ffffffff8020c099:	e9 16 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c09e <__RME_X64_USER167_Handler>:
USER_HANDLER NAME=__RME_X64_USER167_Handler VECTNUM=167
ffffffff8020c09e:	0f 01 f8             	swapgs
ffffffff8020c0a1:	6a 00                	push   $0x0
ffffffff8020c0a3:	68 a7 00 00 00       	push   $0xa7
ffffffff8020c0a8:	e9 07 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0ad <__RME_X64_USER168_Handler>:
USER_HANDLER NAME=__RME_X64_USER168_Handler VECTNUM=168
ffffffff8020c0ad:	0f 01 f8             	swapgs
ffffffff8020c0b0:	6a 00                	push   $0x0
ffffffff8020c0b2:	68 a8 00 00 00       	push   $0xa8
ffffffff8020c0b7:	e9 f8 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0bc <__RME_X64_USER169_Handler>:
USER_HANDLER NAME=__RME_X64_USER169_Handler VECTNUM=169
ffffffff8020c0bc:	0f 01 f8             	swapgs
ffffffff8020c0bf:	6a 00                	push   $0x0
ffffffff8020c0c1:	68 a9 00 00 00       	push   $0xa9
ffffffff8020c0c6:	e9 e9 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0cb <__RME_X64_USER170_Handler>:

USER_HANDLER NAME=__RME_X64_USER170_Handler VECTNUM=170
ffffffff8020c0cb:	0f 01 f8             	swapgs
ffffffff8020c0ce:	6a 00                	push   $0x0
ffffffff8020c0d0:	68 aa 00 00 00       	push   $0xaa
ffffffff8020c0d5:	e9 da 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0da <__RME_X64_USER171_Handler>:
USER_HANDLER NAME=__RME_X64_USER171_Handler VECTNUM=171
ffffffff8020c0da:	0f 01 f8             	swapgs
ffffffff8020c0dd:	6a 00                	push   $0x0
ffffffff8020c0df:	68 ab 00 00 00       	push   $0xab
ffffffff8020c0e4:	e9 cb 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0e9 <__RME_X64_USER172_Handler>:
USER_HANDLER NAME=__RME_X64_USER172_Handler VECTNUM=172
ffffffff8020c0e9:	0f 01 f8             	swapgs
ffffffff8020c0ec:	6a 00                	push   $0x0
ffffffff8020c0ee:	68 ac 00 00 00       	push   $0xac
ffffffff8020c0f3:	e9 bc 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0f8 <__RME_X64_USER173_Handler>:
USER_HANDLER NAME=__RME_X64_USER173_Handler VECTNUM=173
ffffffff8020c0f8:	0f 01 f8             	swapgs
ffffffff8020c0fb:	6a 00                	push   $0x0
ffffffff8020c0fd:	68 ad 00 00 00       	push   $0xad
ffffffff8020c102:	e9 ad 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c107 <__RME_X64_USER174_Handler>:
USER_HANDLER NAME=__RME_X64_USER174_Handler VECTNUM=174
ffffffff8020c107:	0f 01 f8             	swapgs
ffffffff8020c10a:	6a 00                	push   $0x0
ffffffff8020c10c:	68 ae 00 00 00       	push   $0xae
ffffffff8020c111:	e9 9e 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c116 <__RME_X64_USER175_Handler>:
USER_HANDLER NAME=__RME_X64_USER175_Handler VECTNUM=175
ffffffff8020c116:	0f 01 f8             	swapgs
ffffffff8020c119:	6a 00                	push   $0x0
ffffffff8020c11b:	68 af 00 00 00       	push   $0xaf
ffffffff8020c120:	e9 8f 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c125 <__RME_X64_USER176_Handler>:
USER_HANDLER NAME=__RME_X64_USER176_Handler VECTNUM=176
ffffffff8020c125:	0f 01 f8             	swapgs
ffffffff8020c128:	6a 00                	push   $0x0
ffffffff8020c12a:	68 b0 00 00 00       	push   $0xb0
ffffffff8020c12f:	e9 80 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c134 <__RME_X64_USER177_Handler>:
USER_HANDLER NAME=__RME_X64_USER177_Handler VECTNUM=177
ffffffff8020c134:	0f 01 f8             	swapgs
ffffffff8020c137:	6a 00                	push   $0x0
ffffffff8020c139:	68 b1 00 00 00       	push   $0xb1
ffffffff8020c13e:	e9 71 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c143 <__RME_X64_USER178_Handler>:
USER_HANDLER NAME=__RME_X64_USER178_Handler VECTNUM=178
ffffffff8020c143:	0f 01 f8             	swapgs
ffffffff8020c146:	6a 00                	push   $0x0
ffffffff8020c148:	68 b2 00 00 00       	push   $0xb2
ffffffff8020c14d:	e9 62 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c152 <__RME_X64_USER179_Handler>:
USER_HANDLER NAME=__RME_X64_USER179_Handler VECTNUM=179
ffffffff8020c152:	0f 01 f8             	swapgs
ffffffff8020c155:	6a 00                	push   $0x0
ffffffff8020c157:	68 b3 00 00 00       	push   $0xb3
ffffffff8020c15c:	e9 53 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c161 <__RME_X64_USER180_Handler>:

USER_HANDLER NAME=__RME_X64_USER180_Handler VECTNUM=180
ffffffff8020c161:	0f 01 f8             	swapgs
ffffffff8020c164:	6a 00                	push   $0x0
ffffffff8020c166:	68 b4 00 00 00       	push   $0xb4
ffffffff8020c16b:	e9 44 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c170 <__RME_X64_USER181_Handler>:
USER_HANDLER NAME=__RME_X64_USER181_Handler VECTNUM=181
ffffffff8020c170:	0f 01 f8             	swapgs
ffffffff8020c173:	6a 00                	push   $0x0
ffffffff8020c175:	68 b5 00 00 00       	push   $0xb5
ffffffff8020c17a:	e9 35 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c17f <__RME_X64_USER182_Handler>:
USER_HANDLER NAME=__RME_X64_USER182_Handler VECTNUM=182
ffffffff8020c17f:	0f 01 f8             	swapgs
ffffffff8020c182:	6a 00                	push   $0x0
ffffffff8020c184:	68 b6 00 00 00       	push   $0xb6
ffffffff8020c189:	e9 26 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c18e <__RME_X64_USER183_Handler>:
USER_HANDLER NAME=__RME_X64_USER183_Handler VECTNUM=183
ffffffff8020c18e:	0f 01 f8             	swapgs
ffffffff8020c191:	6a 00                	push   $0x0
ffffffff8020c193:	68 b7 00 00 00       	push   $0xb7
ffffffff8020c198:	e9 17 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c19d <__RME_X64_USER184_Handler>:
USER_HANDLER NAME=__RME_X64_USER184_Handler VECTNUM=184
ffffffff8020c19d:	0f 01 f8             	swapgs
ffffffff8020c1a0:	6a 00                	push   $0x0
ffffffff8020c1a2:	68 b8 00 00 00       	push   $0xb8
ffffffff8020c1a7:	e9 08 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ac <__RME_X64_USER185_Handler>:
USER_HANDLER NAME=__RME_X64_USER185_Handler VECTNUM=185
ffffffff8020c1ac:	0f 01 f8             	swapgs
ffffffff8020c1af:	6a 00                	push   $0x0
ffffffff8020c1b1:	68 b9 00 00 00       	push   $0xb9
ffffffff8020c1b6:	e9 f9 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1bb <__RME_X64_USER186_Handler>:
USER_HANDLER NAME=__RME_X64_USER186_Handler VECTNUM=186
ffffffff8020c1bb:	0f 01 f8             	swapgs
ffffffff8020c1be:	6a 00                	push   $0x0
ffffffff8020c1c0:	68 ba 00 00 00       	push   $0xba
ffffffff8020c1c5:	e9 ea 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ca <__RME_X64_USER187_Handler>:
USER_HANDLER NAME=__RME_X64_USER187_Handler VECTNUM=187
ffffffff8020c1ca:	0f 01 f8             	swapgs
ffffffff8020c1cd:	6a 00                	push   $0x0
ffffffff8020c1cf:	68 bb 00 00 00       	push   $0xbb
ffffffff8020c1d4:	e9 db 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1d9 <__RME_X64_USER188_Handler>:
USER_HANDLER NAME=__RME_X64_USER188_Handler VECTNUM=188
ffffffff8020c1d9:	0f 01 f8             	swapgs
ffffffff8020c1dc:	6a 00                	push   $0x0
ffffffff8020c1de:	68 bc 00 00 00       	push   $0xbc
ffffffff8020c1e3:	e9 cc 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1e8 <__RME_X64_USER189_Handler>:
USER_HANDLER NAME=__RME_X64_USER189_Handler VECTNUM=189
ffffffff8020c1e8:	0f 01 f8             	swapgs
ffffffff8020c1eb:	6a 00                	push   $0x0
ffffffff8020c1ed:	68 bd 00 00 00       	push   $0xbd
ffffffff8020c1f2:	e9 bd 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1f7 <__RME_X64_USER190_Handler>:

USER_HANDLER NAME=__RME_X64_USER190_Handler VECTNUM=190
ffffffff8020c1f7:	0f 01 f8             	swapgs
ffffffff8020c1fa:	6a 00                	push   $0x0
ffffffff8020c1fc:	68 be 00 00 00       	push   $0xbe
ffffffff8020c201:	e9 ae 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c206 <__RME_X64_USER191_Handler>:
USER_HANDLER NAME=__RME_X64_USER191_Handler VECTNUM=191
ffffffff8020c206:	0f 01 f8             	swapgs
ffffffff8020c209:	6a 00                	push   $0x0
ffffffff8020c20b:	68 bf 00 00 00       	push   $0xbf
ffffffff8020c210:	e9 9f 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c215 <__RME_X64_USER192_Handler>:
USER_HANDLER NAME=__RME_X64_USER192_Handler VECTNUM=192
ffffffff8020c215:	0f 01 f8             	swapgs
ffffffff8020c218:	6a 00                	push   $0x0
ffffffff8020c21a:	68 c0 00 00 00       	push   $0xc0
ffffffff8020c21f:	e9 90 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c224 <__RME_X64_USER193_Handler>:
USER_HANDLER NAME=__RME_X64_USER193_Handler VECTNUM=193
ffffffff8020c224:	0f 01 f8             	swapgs
ffffffff8020c227:	6a 00                	push   $0x0
ffffffff8020c229:	68 c1 00 00 00       	push   $0xc1
ffffffff8020c22e:	e9 81 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c233 <__RME_X64_USER194_Handler>:
USER_HANDLER NAME=__RME_X64_USER194_Handler VECTNUM=194
ffffffff8020c233:	0f 01 f8             	swapgs
ffffffff8020c236:	6a 00                	push   $0x0
ffffffff8020c238:	68 c2 00 00 00       	push   $0xc2
ffffffff8020c23d:	e9 72 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c242 <__RME_X64_USER195_Handler>:
USER_HANDLER NAME=__RME_X64_USER195_Handler VECTNUM=195
ffffffff8020c242:	0f 01 f8             	swapgs
ffffffff8020c245:	6a 00                	push   $0x0
ffffffff8020c247:	68 c3 00 00 00       	push   $0xc3
ffffffff8020c24c:	e9 63 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c251 <__RME_X64_USER196_Handler>:
USER_HANDLER NAME=__RME_X64_USER196_Handler VECTNUM=196
ffffffff8020c251:	0f 01 f8             	swapgs
ffffffff8020c254:	6a 00                	push   $0x0
ffffffff8020c256:	68 c4 00 00 00       	push   $0xc4
ffffffff8020c25b:	e9 54 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c260 <__RME_X64_USER197_Handler>:
USER_HANDLER NAME=__RME_X64_USER197_Handler VECTNUM=197
ffffffff8020c260:	0f 01 f8             	swapgs
ffffffff8020c263:	6a 00                	push   $0x0
ffffffff8020c265:	68 c5 00 00 00       	push   $0xc5
ffffffff8020c26a:	e9 45 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c26f <__RME_X64_USER198_Handler>:
USER_HANDLER NAME=__RME_X64_USER198_Handler VECTNUM=198
ffffffff8020c26f:	0f 01 f8             	swapgs
ffffffff8020c272:	6a 00                	push   $0x0
ffffffff8020c274:	68 c6 00 00 00       	push   $0xc6
ffffffff8020c279:	e9 36 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c27e <__RME_X64_USER199_Handler>:
USER_HANDLER NAME=__RME_X64_USER199_Handler VECTNUM=199
ffffffff8020c27e:	0f 01 f8             	swapgs
ffffffff8020c281:	6a 00                	push   $0x0
ffffffff8020c283:	68 c7 00 00 00       	push   $0xc7
ffffffff8020c288:	e9 27 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c28d <__RME_X64_USER200_Handler>:

USER_HANDLER NAME=__RME_X64_USER200_Handler VECTNUM=200
ffffffff8020c28d:	0f 01 f8             	swapgs
ffffffff8020c290:	6a 00                	push   $0x0
ffffffff8020c292:	68 c8 00 00 00       	push   $0xc8
ffffffff8020c297:	e9 18 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c29c <__RME_X64_USER201_Handler>:
USER_HANDLER NAME=__RME_X64_USER201_Handler VECTNUM=201
ffffffff8020c29c:	0f 01 f8             	swapgs
ffffffff8020c29f:	6a 00                	push   $0x0
ffffffff8020c2a1:	68 c9 00 00 00       	push   $0xc9
ffffffff8020c2a6:	e9 09 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ab <__RME_X64_USER202_Handler>:
USER_HANDLER NAME=__RME_X64_USER202_Handler VECTNUM=202
ffffffff8020c2ab:	0f 01 f8             	swapgs
ffffffff8020c2ae:	6a 00                	push   $0x0
ffffffff8020c2b0:	68 ca 00 00 00       	push   $0xca
ffffffff8020c2b5:	e9 fa 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ba <__RME_X64_USER203_Handler>:
USER_HANDLER NAME=__RME_X64_USER203_Handler VECTNUM=203
ffffffff8020c2ba:	0f 01 f8             	swapgs
ffffffff8020c2bd:	6a 00                	push   $0x0
ffffffff8020c2bf:	68 cb 00 00 00       	push   $0xcb
ffffffff8020c2c4:	e9 eb 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2c9 <__RME_X64_USER204_Handler>:
USER_HANDLER NAME=__RME_X64_USER204_Handler VECTNUM=204
ffffffff8020c2c9:	0f 01 f8             	swapgs
ffffffff8020c2cc:	6a 00                	push   $0x0
ffffffff8020c2ce:	68 cc 00 00 00       	push   $0xcc
ffffffff8020c2d3:	e9 dc 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2d8 <__RME_X64_USER205_Handler>:
USER_HANDLER NAME=__RME_X64_USER205_Handler VECTNUM=205
ffffffff8020c2d8:	0f 01 f8             	swapgs
ffffffff8020c2db:	6a 00                	push   $0x0
ffffffff8020c2dd:	68 cd 00 00 00       	push   $0xcd
ffffffff8020c2e2:	e9 cd 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2e7 <__RME_X64_USER206_Handler>:
USER_HANDLER NAME=__RME_X64_USER206_Handler VECTNUM=206
ffffffff8020c2e7:	0f 01 f8             	swapgs
ffffffff8020c2ea:	6a 00                	push   $0x0
ffffffff8020c2ec:	68 ce 00 00 00       	push   $0xce
ffffffff8020c2f1:	e9 be 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2f6 <__RME_X64_USER207_Handler>:
USER_HANDLER NAME=__RME_X64_USER207_Handler VECTNUM=207
ffffffff8020c2f6:	0f 01 f8             	swapgs
ffffffff8020c2f9:	6a 00                	push   $0x0
ffffffff8020c2fb:	68 cf 00 00 00       	push   $0xcf
ffffffff8020c300:	e9 af 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c305 <__RME_X64_USER208_Handler>:
USER_HANDLER NAME=__RME_X64_USER208_Handler VECTNUM=208
ffffffff8020c305:	0f 01 f8             	swapgs
ffffffff8020c308:	6a 00                	push   $0x0
ffffffff8020c30a:	68 d0 00 00 00       	push   $0xd0
ffffffff8020c30f:	e9 a0 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c314 <__RME_X64_USER209_Handler>:
USER_HANDLER NAME=__RME_X64_USER209_Handler VECTNUM=209
ffffffff8020c314:	0f 01 f8             	swapgs
ffffffff8020c317:	6a 00                	push   $0x0
ffffffff8020c319:	68 d1 00 00 00       	push   $0xd1
ffffffff8020c31e:	e9 91 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c323 <__RME_X64_USER210_Handler>:

USER_HANDLER NAME=__RME_X64_USER210_Handler VECTNUM=210
ffffffff8020c323:	0f 01 f8             	swapgs
ffffffff8020c326:	6a 00                	push   $0x0
ffffffff8020c328:	68 d2 00 00 00       	push   $0xd2
ffffffff8020c32d:	e9 82 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c332 <__RME_X64_USER211_Handler>:
USER_HANDLER NAME=__RME_X64_USER211_Handler VECTNUM=211
ffffffff8020c332:	0f 01 f8             	swapgs
ffffffff8020c335:	6a 00                	push   $0x0
ffffffff8020c337:	68 d3 00 00 00       	push   $0xd3
ffffffff8020c33c:	e9 73 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c341 <__RME_X64_USER212_Handler>:
USER_HANDLER NAME=__RME_X64_USER212_Handler VECTNUM=212
ffffffff8020c341:	0f 01 f8             	swapgs
ffffffff8020c344:	6a 00                	push   $0x0
ffffffff8020c346:	68 d4 00 00 00       	push   $0xd4
ffffffff8020c34b:	e9 64 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c350 <__RME_X64_USER213_Handler>:
USER_HANDLER NAME=__RME_X64_USER213_Handler VECTNUM=213
ffffffff8020c350:	0f 01 f8             	swapgs
ffffffff8020c353:	6a 00                	push   $0x0
ffffffff8020c355:	68 d5 00 00 00       	push   $0xd5
ffffffff8020c35a:	e9 55 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c35f <__RME_X64_USER214_Handler>:
USER_HANDLER NAME=__RME_X64_USER214_Handler VECTNUM=214
ffffffff8020c35f:	0f 01 f8             	swapgs
ffffffff8020c362:	6a 00                	push   $0x0
ffffffff8020c364:	68 d6 00 00 00       	push   $0xd6
ffffffff8020c369:	e9 46 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c36e <__RME_X64_USER215_Handler>:
USER_HANDLER NAME=__RME_X64_USER215_Handler VECTNUM=215
ffffffff8020c36e:	0f 01 f8             	swapgs
ffffffff8020c371:	6a 00                	push   $0x0
ffffffff8020c373:	68 d7 00 00 00       	push   $0xd7
ffffffff8020c378:	e9 37 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c37d <__RME_X64_USER216_Handler>:
USER_HANDLER NAME=__RME_X64_USER216_Handler VECTNUM=216
ffffffff8020c37d:	0f 01 f8             	swapgs
ffffffff8020c380:	6a 00                	push   $0x0
ffffffff8020c382:	68 d8 00 00 00       	push   $0xd8
ffffffff8020c387:	e9 28 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c38c <__RME_X64_USER217_Handler>:
USER_HANDLER NAME=__RME_X64_USER217_Handler VECTNUM=217
ffffffff8020c38c:	0f 01 f8             	swapgs
ffffffff8020c38f:	6a 00                	push   $0x0
ffffffff8020c391:	68 d9 00 00 00       	push   $0xd9
ffffffff8020c396:	e9 19 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c39b <__RME_X64_USER218_Handler>:
USER_HANDLER NAME=__RME_X64_USER218_Handler VECTNUM=218
ffffffff8020c39b:	0f 01 f8             	swapgs
ffffffff8020c39e:	6a 00                	push   $0x0
ffffffff8020c3a0:	68 da 00 00 00       	push   $0xda
ffffffff8020c3a5:	e9 0a 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3aa <__RME_X64_USER219_Handler>:
USER_HANDLER NAME=__RME_X64_USER219_Handler VECTNUM=219
ffffffff8020c3aa:	0f 01 f8             	swapgs
ffffffff8020c3ad:	6a 00                	push   $0x0
ffffffff8020c3af:	68 db 00 00 00       	push   $0xdb
ffffffff8020c3b4:	e9 fb 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3b9 <__RME_X64_USER220_Handler>:

USER_HANDLER NAME=__RME_X64_USER220_Handler VECTNUM=220
ffffffff8020c3b9:	0f 01 f8             	swapgs
ffffffff8020c3bc:	6a 00                	push   $0x0
ffffffff8020c3be:	68 dc 00 00 00       	push   $0xdc
ffffffff8020c3c3:	e9 ec 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3c8 <__RME_X64_USER221_Handler>:
USER_HANDLER NAME=__RME_X64_USER221_Handler VECTNUM=221
ffffffff8020c3c8:	0f 01 f8             	swapgs
ffffffff8020c3cb:	6a 00                	push   $0x0
ffffffff8020c3cd:	68 dd 00 00 00       	push   $0xdd
ffffffff8020c3d2:	e9 dd 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3d7 <__RME_X64_USER222_Handler>:
USER_HANDLER NAME=__RME_X64_USER222_Handler VECTNUM=222
ffffffff8020c3d7:	0f 01 f8             	swapgs
ffffffff8020c3da:	6a 00                	push   $0x0
ffffffff8020c3dc:	68 de 00 00 00       	push   $0xde
ffffffff8020c3e1:	e9 ce 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3e6 <__RME_X64_USER223_Handler>:
USER_HANDLER NAME=__RME_X64_USER223_Handler VECTNUM=223
ffffffff8020c3e6:	0f 01 f8             	swapgs
ffffffff8020c3e9:	6a 00                	push   $0x0
ffffffff8020c3eb:	68 df 00 00 00       	push   $0xdf
ffffffff8020c3f0:	e9 bf 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3f5 <__RME_X64_USER224_Handler>:
USER_HANDLER NAME=__RME_X64_USER224_Handler VECTNUM=224
ffffffff8020c3f5:	0f 01 f8             	swapgs
ffffffff8020c3f8:	6a 00                	push   $0x0
ffffffff8020c3fa:	68 e0 00 00 00       	push   $0xe0
ffffffff8020c3ff:	e9 b0 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c404 <__RME_X64_USER225_Handler>:
USER_HANDLER NAME=__RME_X64_USER225_Handler VECTNUM=225
ffffffff8020c404:	0f 01 f8             	swapgs
ffffffff8020c407:	6a 00                	push   $0x0
ffffffff8020c409:	68 e1 00 00 00       	push   $0xe1
ffffffff8020c40e:	e9 a1 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c413 <__RME_X64_USER226_Handler>:
USER_HANDLER NAME=__RME_X64_USER226_Handler VECTNUM=226
ffffffff8020c413:	0f 01 f8             	swapgs
ffffffff8020c416:	6a 00                	push   $0x0
ffffffff8020c418:	68 e2 00 00 00       	push   $0xe2
ffffffff8020c41d:	e9 92 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c422 <__RME_X64_USER227_Handler>:
USER_HANDLER NAME=__RME_X64_USER227_Handler VECTNUM=227
ffffffff8020c422:	0f 01 f8             	swapgs
ffffffff8020c425:	6a 00                	push   $0x0
ffffffff8020c427:	68 e3 00 00 00       	push   $0xe3
ffffffff8020c42c:	e9 83 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c431 <__RME_X64_USER228_Handler>:
USER_HANDLER NAME=__RME_X64_USER228_Handler VECTNUM=228
ffffffff8020c431:	0f 01 f8             	swapgs
ffffffff8020c434:	6a 00                	push   $0x0
ffffffff8020c436:	68 e4 00 00 00       	push   $0xe4
ffffffff8020c43b:	e9 74 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c440 <__RME_X64_USER229_Handler>:
USER_HANDLER NAME=__RME_X64_USER229_Handler VECTNUM=229
ffffffff8020c440:	0f 01 f8             	swapgs
ffffffff8020c443:	6a 00                	push   $0x0
ffffffff8020c445:	68 e5 00 00 00       	push   $0xe5
ffffffff8020c44a:	e9 65 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c44f <__RME_X64_USER230_Handler>:

USER_HANDLER NAME=__RME_X64_USER230_Handler VECTNUM=230
ffffffff8020c44f:	0f 01 f8             	swapgs
ffffffff8020c452:	6a 00                	push   $0x0
ffffffff8020c454:	68 e6 00 00 00       	push   $0xe6
ffffffff8020c459:	e9 56 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c45e <__RME_X64_USER231_Handler>:
USER_HANDLER NAME=__RME_X64_USER231_Handler VECTNUM=231
ffffffff8020c45e:	0f 01 f8             	swapgs
ffffffff8020c461:	6a 00                	push   $0x0
ffffffff8020c463:	68 e7 00 00 00       	push   $0xe7
ffffffff8020c468:	e9 47 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c46d <__RME_X64_USER232_Handler>:
USER_HANDLER NAME=__RME_X64_USER232_Handler VECTNUM=232
ffffffff8020c46d:	0f 01 f8             	swapgs
ffffffff8020c470:	6a 00                	push   $0x0
ffffffff8020c472:	68 e8 00 00 00       	push   $0xe8
ffffffff8020c477:	e9 38 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c47c <__RME_X64_USER233_Handler>:
USER_HANDLER NAME=__RME_X64_USER233_Handler VECTNUM=233
ffffffff8020c47c:	0f 01 f8             	swapgs
ffffffff8020c47f:	6a 00                	push   $0x0
ffffffff8020c481:	68 e9 00 00 00       	push   $0xe9
ffffffff8020c486:	e9 29 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c48b <__RME_X64_USER234_Handler>:
USER_HANDLER NAME=__RME_X64_USER234_Handler VECTNUM=234
ffffffff8020c48b:	0f 01 f8             	swapgs
ffffffff8020c48e:	6a 00                	push   $0x0
ffffffff8020c490:	68 ea 00 00 00       	push   $0xea
ffffffff8020c495:	e9 1a 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c49a <__RME_X64_USER235_Handler>:
USER_HANDLER NAME=__RME_X64_USER235_Handler VECTNUM=235
ffffffff8020c49a:	0f 01 f8             	swapgs
ffffffff8020c49d:	6a 00                	push   $0x0
ffffffff8020c49f:	68 eb 00 00 00       	push   $0xeb
ffffffff8020c4a4:	e9 0b 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4a9 <__RME_X64_USER236_Handler>:
USER_HANDLER NAME=__RME_X64_USER236_Handler VECTNUM=236
ffffffff8020c4a9:	0f 01 f8             	swapgs
ffffffff8020c4ac:	6a 00                	push   $0x0
ffffffff8020c4ae:	68 ec 00 00 00       	push   $0xec
ffffffff8020c4b3:	e9 fc 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4b8 <__RME_X64_USER237_Handler>:
USER_HANDLER NAME=__RME_X64_USER237_Handler VECTNUM=237
ffffffff8020c4b8:	0f 01 f8             	swapgs
ffffffff8020c4bb:	6a 00                	push   $0x0
ffffffff8020c4bd:	68 ed 00 00 00       	push   $0xed
ffffffff8020c4c2:	e9 ed 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4c7 <__RME_X64_USER238_Handler>:
USER_HANDLER NAME=__RME_X64_USER238_Handler VECTNUM=238
ffffffff8020c4c7:	0f 01 f8             	swapgs
ffffffff8020c4ca:	6a 00                	push   $0x0
ffffffff8020c4cc:	68 ee 00 00 00       	push   $0xee
ffffffff8020c4d1:	e9 de 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4d6 <__RME_X64_USER239_Handler>:
USER_HANDLER NAME=__RME_X64_USER239_Handler VECTNUM=239
ffffffff8020c4d6:	0f 01 f8             	swapgs
ffffffff8020c4d9:	6a 00                	push   $0x0
ffffffff8020c4db:	68 ef 00 00 00       	push   $0xef
ffffffff8020c4e0:	e9 cf 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4e5 <__RME_X64_USER240_Handler>:

USER_HANDLER NAME=__RME_X64_USER240_Handler VECTNUM=240
ffffffff8020c4e5:	0f 01 f8             	swapgs
ffffffff8020c4e8:	6a 00                	push   $0x0
ffffffff8020c4ea:	68 f0 00 00 00       	push   $0xf0
ffffffff8020c4ef:	e9 c0 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4f4 <__RME_X64_USER241_Handler>:
USER_HANDLER NAME=__RME_X64_USER241_Handler VECTNUM=241
ffffffff8020c4f4:	0f 01 f8             	swapgs
ffffffff8020c4f7:	6a 00                	push   $0x0
ffffffff8020c4f9:	68 f1 00 00 00       	push   $0xf1
ffffffff8020c4fe:	e9 b1 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c503 <__RME_X64_USER242_Handler>:
USER_HANDLER NAME=__RME_X64_USER242_Handler VECTNUM=242
ffffffff8020c503:	0f 01 f8             	swapgs
ffffffff8020c506:	6a 00                	push   $0x0
ffffffff8020c508:	68 f2 00 00 00       	push   $0xf2
ffffffff8020c50d:	e9 a2 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c512 <__RME_X64_USER243_Handler>:
USER_HANDLER NAME=__RME_X64_USER243_Handler VECTNUM=243
ffffffff8020c512:	0f 01 f8             	swapgs
ffffffff8020c515:	6a 00                	push   $0x0
ffffffff8020c517:	68 f3 00 00 00       	push   $0xf3
ffffffff8020c51c:	e9 93 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c521 <__RME_X64_USER244_Handler>:
USER_HANDLER NAME=__RME_X64_USER244_Handler VECTNUM=244
ffffffff8020c521:	0f 01 f8             	swapgs
ffffffff8020c524:	6a 00                	push   $0x0
ffffffff8020c526:	68 f4 00 00 00       	push   $0xf4
ffffffff8020c52b:	e9 84 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c530 <__RME_X64_USER245_Handler>:
USER_HANDLER NAME=__RME_X64_USER245_Handler VECTNUM=245
ffffffff8020c530:	0f 01 f8             	swapgs
ffffffff8020c533:	6a 00                	push   $0x0
ffffffff8020c535:	68 f5 00 00 00       	push   $0xf5
ffffffff8020c53a:	eb 78                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c53c <__RME_X64_USER246_Handler>:
USER_HANDLER NAME=__RME_X64_USER246_Handler VECTNUM=246
ffffffff8020c53c:	0f 01 f8             	swapgs
ffffffff8020c53f:	6a 00                	push   $0x0
ffffffff8020c541:	68 f6 00 00 00       	push   $0xf6
ffffffff8020c546:	eb 6c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c548 <__RME_X64_USER247_Handler>:
USER_HANDLER NAME=__RME_X64_USER247_Handler VECTNUM=247
ffffffff8020c548:	0f 01 f8             	swapgs
ffffffff8020c54b:	6a 00                	push   $0x0
ffffffff8020c54d:	68 f7 00 00 00       	push   $0xf7
ffffffff8020c552:	eb 60                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c554 <__RME_X64_USER248_Handler>:
USER_HANDLER NAME=__RME_X64_USER248_Handler VECTNUM=248
ffffffff8020c554:	0f 01 f8             	swapgs
ffffffff8020c557:	6a 00                	push   $0x0
ffffffff8020c559:	68 f8 00 00 00       	push   $0xf8
ffffffff8020c55e:	eb 54                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c560 <__RME_X64_USER249_Handler>:
USER_HANDLER NAME=__RME_X64_USER249_Handler VECTNUM=249
ffffffff8020c560:	0f 01 f8             	swapgs
ffffffff8020c563:	6a 00                	push   $0x0
ffffffff8020c565:	68 f9 00 00 00       	push   $0xf9
ffffffff8020c56a:	eb 48                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c56c <__RME_X64_USER250_Handler>:

USER_HANDLER NAME=__RME_X64_USER250_Handler VECTNUM=250
ffffffff8020c56c:	0f 01 f8             	swapgs
ffffffff8020c56f:	6a 00                	push   $0x0
ffffffff8020c571:	68 fa 00 00 00       	push   $0xfa
ffffffff8020c576:	eb 3c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c578 <__RME_X64_USER251_Handler>:
USER_HANDLER NAME=__RME_X64_USER251_Handler VECTNUM=251
ffffffff8020c578:	0f 01 f8             	swapgs
ffffffff8020c57b:	6a 00                	push   $0x0
ffffffff8020c57d:	68 fb 00 00 00       	push   $0xfb
ffffffff8020c582:	eb 30                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c584 <__RME_X64_USER252_Handler>:
USER_HANDLER NAME=__RME_X64_USER252_Handler VECTNUM=252
ffffffff8020c584:	0f 01 f8             	swapgs
ffffffff8020c587:	6a 00                	push   $0x0
ffffffff8020c589:	68 fc 00 00 00       	push   $0xfc
ffffffff8020c58e:	eb 24                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c590 <__RME_X64_USER253_Handler>:
USER_HANDLER NAME=__RME_X64_USER253_Handler VECTNUM=253
ffffffff8020c590:	0f 01 f8             	swapgs
ffffffff8020c593:	6a 00                	push   $0x0
ffffffff8020c595:	68 fd 00 00 00       	push   $0xfd
ffffffff8020c59a:	eb 18                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c59c <__RME_X64_USER254_Handler>:
USER_HANDLER NAME=__RME_X64_USER254_Handler VECTNUM=254
ffffffff8020c59c:	0f 01 f8             	swapgs
ffffffff8020c59f:	6a 00                	push   $0x0
ffffffff8020c5a1:	68 fe 00 00 00       	push   $0xfe
ffffffff8020c5a6:	eb 0c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5a8 <__RME_X64_USER255_Handler>:
USER_HANDLER NAME=__RME_X64_USER255_Handler VECTNUM=255
ffffffff8020c5a8:	0f 01 f8             	swapgs
ffffffff8020c5ab:	6a 00                	push   $0x0
ffffffff8020c5ad:	68 ff 00 00 00       	push   $0xff
ffffffff8020c5b2:	eb 00                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5b4 <User_Handler>:
/* Common function body for generic interrupt handlers - reduce I-Cache usage */
User_Handler:
    SAVE_GP_REGS
ffffffff8020c5b4:	41 57                	push   %r15
ffffffff8020c5b6:	41 56                	push   %r14
ffffffff8020c5b8:	41 55                	push   %r13
ffffffff8020c5ba:	41 54                	push   %r12
ffffffff8020c5bc:	41 53                	push   %r11
ffffffff8020c5be:	41 52                	push   %r10
ffffffff8020c5c0:	41 51                	push   %r9
ffffffff8020c5c2:	41 50                	push   %r8
ffffffff8020c5c4:	55                   	push   %rbp
ffffffff8020c5c5:	57                   	push   %rdi
ffffffff8020c5c6:	56                   	push   %rsi
ffffffff8020c5c7:	52                   	push   %rdx
ffffffff8020c5c8:	51                   	push   %rcx
ffffffff8020c5c9:	53                   	push   %rbx
ffffffff8020c5ca:	50                   	push   %rax
ffffffff8020c5cb:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c5cf:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c5d1:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020c5d4:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Generic_Handler
ffffffff8020c5d9:	e8 c2 e6 00 00       	call   ffffffff8021aca0 <__RME_X64_Generic_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c5de:	e8 fd c8 00 00       	call   ffffffff80218ee0 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c5e3:	0f 01 f8             	swapgs
ffffffff8020c5e6:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c5ea:	8e d8                	mov    %eax,%ds
ffffffff8020c5ec:	58                   	pop    %rax
ffffffff8020c5ed:	5b                   	pop    %rbx
ffffffff8020c5ee:	59                   	pop    %rcx
ffffffff8020c5ef:	5a                   	pop    %rdx
ffffffff8020c5f0:	5e                   	pop    %rsi
ffffffff8020c5f1:	5f                   	pop    %rdi
ffffffff8020c5f2:	5d                   	pop    %rbp
ffffffff8020c5f3:	41 58                	pop    %r8
ffffffff8020c5f5:	41 59                	pop    %r9
ffffffff8020c5f7:	41 5a                	pop    %r10
ffffffff8020c5f9:	41 5b                	pop    %r11
ffffffff8020c5fb:	41 5c                	pop    %r12
ffffffff8020c5fd:	41 5d                	pop    %r13
ffffffff8020c5ff:	41 5e                	pop    %r14
ffffffff8020c601:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c603:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c607:	48 cf                	iretq

ffffffff8020c609 <SysTick_SMP_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_SMP_Handler:
    .global             SysTick_SMP_Handler
    SWAPGS
ffffffff8020c609:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c60c:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c60e:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c613:	41 57                	push   %r15
ffffffff8020c615:	41 56                	push   %r14
ffffffff8020c617:	41 55                	push   %r13
ffffffff8020c619:	41 54                	push   %r12
ffffffff8020c61b:	41 53                	push   %r11
ffffffff8020c61d:	41 52                	push   %r10
ffffffff8020c61f:	41 51                	push   %r9
ffffffff8020c621:	41 50                	push   %r8
ffffffff8020c623:	55                   	push   %rbp
ffffffff8020c624:	57                   	push   %rdi
ffffffff8020c625:	56                   	push   %rsi
ffffffff8020c626:	52                   	push   %rdx
ffffffff8020c627:	51                   	push   %rcx
ffffffff8020c628:	53                   	push   %rbx
ffffffff8020c629:	50                   	push   %rax
ffffffff8020c62a:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c62e:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c630:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_SMP_Handler
ffffffff8020c633:	e8 26 01 00 00       	call   ffffffff8020c75e <_RME_Tick_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c638:	e8 a3 c8 00 00       	call   ffffffff80218ee0 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c63d:	0f 01 f8             	swapgs
ffffffff8020c640:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c644:	8e d8                	mov    %eax,%ds
ffffffff8020c646:	58                   	pop    %rax
ffffffff8020c647:	5b                   	pop    %rbx
ffffffff8020c648:	59                   	pop    %rcx
ffffffff8020c649:	5a                   	pop    %rdx
ffffffff8020c64a:	5e                   	pop    %rsi
ffffffff8020c64b:	5f                   	pop    %rdi
ffffffff8020c64c:	5d                   	pop    %rbp
ffffffff8020c64d:	41 58                	pop    %r8
ffffffff8020c64f:	41 59                	pop    %r9
ffffffff8020c651:	41 5a                	pop    %r10
ffffffff8020c653:	41 5b                	pop    %r11
ffffffff8020c655:	41 5c                	pop    %r12
ffffffff8020c657:	41 5d                	pop    %r13
ffffffff8020c659:	41 5e                	pop    %r14
ffffffff8020c65b:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c65d:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c661:	48 cf                	iretq

ffffffff8020c663 <SysTick_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_Handler:
    .global             SysTick_Handler
    SWAPGS
ffffffff8020c663:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c666:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c668:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c66d:	41 57                	push   %r15
ffffffff8020c66f:	41 56                	push   %r14
ffffffff8020c671:	41 55                	push   %r13
ffffffff8020c673:	41 54                	push   %r12
ffffffff8020c675:	41 53                	push   %r11
ffffffff8020c677:	41 52                	push   %r10
ffffffff8020c679:	41 51                	push   %r9
ffffffff8020c67b:	41 50                	push   %r8
ffffffff8020c67d:	55                   	push   %rbp
ffffffff8020c67e:	57                   	push   %rdi
ffffffff8020c67f:	56                   	push   %rsi
ffffffff8020c680:	52                   	push   %rdx
ffffffff8020c681:	51                   	push   %rcx
ffffffff8020c682:	53                   	push   %rbx
ffffffff8020c683:	50                   	push   %rax
ffffffff8020c684:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c688:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c68a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_Handler
ffffffff8020c68d:	e8 cc 00 00 00       	call   ffffffff8020c75e <_RME_Tick_Handler>
    CALLQ               __RME_X64_SMP_Tick
ffffffff8020c692:	e8 59 ca 00 00       	call   ffffffff802190f0 <__RME_X64_SMP_Tick>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c697:	e8 44 c8 00 00       	call   ffffffff80218ee0 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c69c:	0f 01 f8             	swapgs
ffffffff8020c69f:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c6a3:	8e d8                	mov    %eax,%ds
ffffffff8020c6a5:	58                   	pop    %rax
ffffffff8020c6a6:	5b                   	pop    %rbx
ffffffff8020c6a7:	59                   	pop    %rcx
ffffffff8020c6a8:	5a                   	pop    %rdx
ffffffff8020c6a9:	5e                   	pop    %rsi
ffffffff8020c6aa:	5f                   	pop    %rdi
ffffffff8020c6ab:	5d                   	pop    %rbp
ffffffff8020c6ac:	41 58                	pop    %r8
ffffffff8020c6ae:	41 59                	pop    %r9
ffffffff8020c6b0:	41 5a                	pop    %r10
ffffffff8020c6b2:	41 5b                	pop    %r11
ffffffff8020c6b4:	41 5c                	pop    %r12
ffffffff8020c6b6:	41 5d                	pop    %r13
ffffffff8020c6b8:	41 5e                	pop    %r14
ffffffff8020c6ba:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c6bc:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c6c0:	48 cf                	iretq

ffffffff8020c6c2 <SVC_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SVC_Handler:
    .global             SVC_Handler
    SWAPGS
ffffffff8020c6c2:	0f 01 f8             	swapgs
    /* Swap the pointers with the per-core kernel RSP */
    MOVQ                %RSP,%GS:(8192-8)
ffffffff8020c6c5:	65 48 89 24 25 f8 1f 	mov    %rsp,%gs:0x1ff8
ffffffff8020c6cc:	00 00 
    MOVQ                %GS:(8192-16),%RSP
ffffffff8020c6ce:	65 48 8b 24 25 f0 1f 	mov    %gs:0x1ff0,%rsp
ffffffff8020c6d5:	00 00 
    /* Simulate INT stack: High - [SS, RSP, RFLAGS, CS, RIP, ERRCODE] - Low */
    PUSHQ               $(USER_DATA)
ffffffff8020c6d7:	6a 23                	push   $0x23
    PUSHQ               %GS:(8192-8)
ffffffff8020c6d9:	65 ff 34 25 f8 1f 00 	push   %gs:0x1ff8
ffffffff8020c6e0:	00 
    PUSHQ               %R11
ffffffff8020c6e1:	41 53                	push   %r11
    PUSHQ               $(USER_CODE)
ffffffff8020c6e3:	6a 2b                	push   $0x2b
    PUSHQ               %RCX
ffffffff8020c6e5:	51                   	push   %rcx
    PUSHQ               $0
ffffffff8020c6e6:	6a 00                	push   $0x0
    /* We went into this from a SYSCALL - interrupt number 0x10000 */
    PUSHQ               $0x10000
ffffffff8020c6e8:	68 00 00 01 00       	push   $0x10000
    SAVE_GP_REGS
ffffffff8020c6ed:	41 57                	push   %r15
ffffffff8020c6ef:	41 56                	push   %r14
ffffffff8020c6f1:	41 55                	push   %r13
ffffffff8020c6f3:	41 54                	push   %r12
ffffffff8020c6f5:	41 53                	push   %r11
ffffffff8020c6f7:	41 52                	push   %r10
ffffffff8020c6f9:	41 51                	push   %r9
ffffffff8020c6fb:	41 50                	push   %r8
ffffffff8020c6fd:	55                   	push   %rbp
ffffffff8020c6fe:	57                   	push   %rdi
ffffffff8020c6ff:	56                   	push   %rsi
ffffffff8020c700:	52                   	push   %rdx
ffffffff8020c701:	51                   	push   %rcx
ffffffff8020c702:	53                   	push   %rbx
ffffffff8020c703:	50                   	push   %rax
ffffffff8020c704:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c708:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c70a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Svc_Handler
ffffffff8020c70d:	e8 2e 46 00 00       	call   ffffffff80210d40 <_RME_Svc_Handler>
    RESTORE_GP_REGS
ffffffff8020c712:	0f 01 f8             	swapgs
ffffffff8020c715:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c719:	8e d8                	mov    %eax,%ds
ffffffff8020c71b:	58                   	pop    %rax
ffffffff8020c71c:	5b                   	pop    %rbx
ffffffff8020c71d:	59                   	pop    %rcx
ffffffff8020c71e:	5a                   	pop    %rdx
ffffffff8020c71f:	5e                   	pop    %rsi
ffffffff8020c720:	5f                   	pop    %rdi
ffffffff8020c721:	5d                   	pop    %rbp
ffffffff8020c722:	41 58                	pop    %r8
ffffffff8020c724:	41 59                	pop    %r9
ffffffff8020c726:	41 5a                	pop    %r10
ffffffff8020c728:	41 5b                	pop    %r11
ffffffff8020c72a:	41 5c                	pop    %r12
ffffffff8020c72c:	41 5d                	pop    %r13
ffffffff8020c72e:	41 5e                	pop    %r14
ffffffff8020c730:	41 5f                	pop    %r15
    /* See if we are forced to use IRET */
    TESTQ               $0x10000,(%RSP)
ffffffff8020c732:	48 f7 04 24 00 00 01 	testq  $0x10000,(%rsp)
ffffffff8020c739:	00 
    JZ                  Use_IRET
ffffffff8020c73a:	74 1c                	je     ffffffff8020c758 <Use_IRET>
    /* Just move these into the registers desired */
    /* CVE-2012-0217, CVE-2014-4699: Force canonical address on RIP */
    MOVQ                $0x7FFFFFFFFFFF,%RCX
ffffffff8020c73c:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff8020c743:	7f 00 00 
    ANDQ                16(%RSP),%RCX
ffffffff8020c746:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
    MOVQ                32(%RSP),%R11
ffffffff8020c74b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    MOVQ                40(%RSP),%RSP
ffffffff8020c750:	48 8b 64 24 28       	mov    0x28(%rsp),%rsp
    /* Return to user-level */
    SYSRETQ
ffffffff8020c755:	48 0f 07             	sysretq

ffffffff8020c758 <Use_IRET>:
Use_IRET:
    /* Flag is zero, We are forced to use IRET, because this is from INT */
    ADDQ                $16,%RSP
ffffffff8020c758:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c75c:	48 cf                	iretq

ffffffff8020c75e <_RME_Tick_Handler>:
ffffffff8020c75e:	66 90                	xchg   %ax,%ax

ffffffff8020c760 <_RME_Run_Del>:
static void _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff8020c760:	48 8b 4f 40          	mov    0x40(%rdi),%rcx
    Local=Thd->Sched.Local;
    /* It can't be free or there must be an error */
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Delete this thread from the runqueue */
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8020c764:	48 8b 37             	mov    (%rdi),%rsi
ffffffff8020c767:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    Local=Thd->Sched.Local;
ffffffff8020c76b:	48 8b 47 28          	mov    0x28(%rdi),%rax
    Next->Prev=Prev;
ffffffff8020c76f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
    Prev->Next=Next;
ffffffff8020c773:	48 89 32             	mov    %rsi,(%rdx)
    
    /* See if there are any thread on this priority level */
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff8020c776:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020c779:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8020c77d:	48 8d 54 30 28       	lea    0x28(%rax,%rsi,1),%rdx
ffffffff8020c782:	48 39 54 06 28       	cmp    %rdx,0x28(%rsi,%rax,1)
ffffffff8020c787:	74 07                	je     ffffffff8020c790 <_RME_Run_Del+0x30>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff8020c789:	c3                   	ret
ffffffff8020c78a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff8020c790:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020c793:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020c798:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff8020c79c:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020c79f:	48 f7 d2             	not    %rdx
ffffffff8020c7a2:	48 21 54 f0 20       	and    %rdx,0x20(%rax,%rsi,8)
}
ffffffff8020c7a7:	c3                   	ret
ffffffff8020c7a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020c7af:	00 

ffffffff8020c7b0 <_RME_Inv_Ret>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Ret(struct RME_Reg_Struct* Reg,
                              rme_ptr_t Retval,
                              rme_ptr_t Is_Exc)
{
ffffffff8020c7b0:	41 57                	push   %r15
ffffffff8020c7b2:	41 56                	push   %r14
ffffffff8020c7b4:	49 89 f6             	mov    %rsi,%r14
ffffffff8020c7b7:	41 55                	push   %r13
ffffffff8020c7b9:	49 89 d5             	mov    %rdx,%r13
ffffffff8020c7bc:	41 54                	push   %r12
ffffffff8020c7be:	49 89 fc             	mov    %rdi,%r12
ffffffff8020c7c1:	55                   	push   %rbp
ffffffff8020c7c2:	53                   	push   %rbx
ffffffff8020c7c3:	48 83 ec 08          	sub    $0x8,%rsp
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;

    /* See if we can return; If we can, get the structure */
    Thread=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020c7c7:	e8 73 f0 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020c7cc:	48 8b 68 08          	mov    0x8(%rax),%rbp
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8020c7d0:	48 8b 9d 98 00 00 00 	mov    0x98(%rbp),%rbx
ffffffff8020c7d7:	4c 8d bd 98 00 00 00 	lea    0x98(%rbp),%r15
    if(RME_UNLIKELY(Invocation==(void*)RME_NULL))
ffffffff8020c7de:	4c 39 fb             	cmp    %r15,%rbx
ffffffff8020c7e1:	0f 84 99 00 00 00    	je     ffffffff8020c880 <_RME_Inv_Ret+0xd0>
ffffffff8020c7e7:	48 85 db             	test   %rbx,%rbx
ffffffff8020c7ea:	0f 84 90 00 00 00    	je     ffffffff8020c880 <_RME_Inv_Ret+0xd0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if this port allows return-on-fault */
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8020c7f0:	4d 85 ed             	test   %r13,%r13
ffffffff8020c7f3:	0f 85 a7 00 00 00    	jne    ffffffff8020c8a0 <_RME_Inv_Ret+0xf0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Pop it from the stack */
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8020c7f9:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020c7fc:	48 8b 43 08          	mov    0x8(%rbx),%rax
    /* Decrease invocation depth - no atomic operation needed */
    Thread->Ctx.Invstk_Depth--;

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well. */
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c800:	48 8d 73 38          	lea    0x38(%rbx),%rsi
ffffffff8020c804:	4c 89 e7             	mov    %r12,%rdi
    Next->Prev=Prev;
ffffffff8020c807:	48 89 42 08          	mov    %rax,0x8(%rdx)
    Prev->Next=Next;
ffffffff8020c80b:	48 89 10             	mov    %rdx,(%rax)
    Thread->Ctx.Invstk_Depth--;
ffffffff8020c80e:	48 83 ad a8 00 00 00 	subq   $0x1,0xa8(%rbp)
ffffffff8020c815:	01 
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c816:	e8 55 de 00 00       	call   ffffffff8021a670 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8020c81b:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020c81e:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c821:	e8 6a c6 00 00       	call   ffffffff80218e90 <__RME_Inv_Retval_Set>

    /* We have successfully returned, set the invocation as inactive. We need
     * a barrier here to avoid potential destruction of the return value. */
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8020c826:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff8020c82d:	00 
    }
    else
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg,0);
ffffffff8020c82e:	31 f6                	xor    %esi,%esi
ffffffff8020c830:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c833:	e8 48 ea 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
    }

    /* Same assumptions as in invocation activation */
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8020c838:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Invocation!=(void*)RME_NULL)
ffffffff8020c83f:	48 85 c0             	test   %rax,%rax
ffffffff8020c842:	74 2c                	je     ffffffff8020c870 <_RME_Inv_Ret+0xc0>
ffffffff8020c844:	49 39 c7             	cmp    %rax,%r15
ffffffff8020c847:	74 27                	je     ffffffff8020c870 <_RME_Inv_Ret+0xc0>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8020c849:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020c84d:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020c851:	e8 6a e4 00 00       	call   ffffffff8021acc0 <__RME_Pgt_Set>
        RME_ASSERT(RME_CAP_IS_ROOT(Thread->Sched.Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
    }
    
    return 0;
ffffffff8020c856:	31 c0                	xor    %eax,%eax
}
ffffffff8020c858:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020c85c:	5b                   	pop    %rbx
ffffffff8020c85d:	5d                   	pop    %rbp
ffffffff8020c85e:	41 5c                	pop    %r12
ffffffff8020c860:	41 5d                	pop    %r13
ffffffff8020c862:	41 5e                	pop    %r14
ffffffff8020c864:	41 5f                	pop    %r15
ffffffff8020c866:	c3                   	ret
ffffffff8020c867:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020c86e:	00 00 
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
ffffffff8020c870:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff8020c874:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020c878:	e8 43 e4 00 00       	call   ffffffff8021acc0 <__RME_Pgt_Set>
ffffffff8020c87d:	eb d7                	jmp    ffffffff8020c856 <_RME_Inv_Ret+0xa6>
ffffffff8020c87f:	90                   	nop
}
ffffffff8020c880:	48 83 c4 08          	add    $0x8,%rsp
        return RME_ERR_SIV_EMPTY;
ffffffff8020c884:	48 c7 c0 d0 fe ff ff 	mov    $0xfffffffffffffed0,%rax
}
ffffffff8020c88b:	5b                   	pop    %rbx
ffffffff8020c88c:	5d                   	pop    %rbp
ffffffff8020c88d:	41 5c                	pop    %r12
ffffffff8020c88f:	41 5d                	pop    %r13
ffffffff8020c891:	41 5e                	pop    %r14
ffffffff8020c893:	41 5f                	pop    %r15
ffffffff8020c895:	c3                   	ret
ffffffff8020c896:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020c89d:	00 00 00 
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8020c8a0:	48 83 7b 30 00       	cmpq   $0x0,0x30(%rbx)
ffffffff8020c8a5:	74 49                	je     ffffffff8020c8f0 <_RME_Inv_Ret+0x140>
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8020c8a7:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020c8aa:	48 8b 43 08          	mov    0x8(%rbx),%rax
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c8ae:	48 8d 73 38          	lea    0x38(%rbx),%rsi
ffffffff8020c8b2:	4c 89 e7             	mov    %r12,%rdi
    Next->Prev=Prev;
ffffffff8020c8b5:	48 89 42 08          	mov    %rax,0x8(%rdx)
    Prev->Next=Next;
ffffffff8020c8b9:	48 89 10             	mov    %rdx,(%rax)
    Thread->Ctx.Invstk_Depth--;
ffffffff8020c8bc:	48 83 ad a8 00 00 00 	subq   $0x1,0xa8(%rbp)
ffffffff8020c8c3:	01 
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8020c8c4:	e8 a7 dd 00 00       	call   ffffffff8021a670 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8020c8c9:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020c8cc:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c8cf:	e8 bc c5 00 00       	call   ffffffff80218e90 <__RME_Inv_Retval_Set>
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8020c8d4:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff8020c8db:	00 
        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
ffffffff8020c8dc:	48 c7 c6 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rsi
ffffffff8020c8e3:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020c8e6:	e8 95 e9 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
ffffffff8020c8eb:	e9 48 ff ff ff       	jmp    ffffffff8020c838 <_RME_Inv_Ret+0x88>
        return RME_ERR_SIV_FAULT;
ffffffff8020c8f0:	48 c7 c0 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rax
ffffffff8020c8f7:	e9 5c ff ff ff       	jmp    ffffffff8020c858 <_RME_Inv_Ret+0xa8>
ffffffff8020c8fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020c900 <_RME_Thd_Sched_Bind.isra.0>:
static rme_ret_t _RME_Thd_Sched_Bind(struct RME_Cap_Cpt* Cpt,
ffffffff8020c900:	41 55                	push   %r13
ffffffff8020c902:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c905:	41 54                	push   %r12
ffffffff8020c907:	55                   	push   %rbp
ffffffff8020c908:	4c 89 cd             	mov    %r9,%rbp
ffffffff8020c90b:	53                   	push   %rbx
ffffffff8020c90c:	48 89 cb             	mov    %rcx,%rbx
ffffffff8020c90f:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020c913:	80 e6 80             	and    $0x80,%dh
ffffffff8020c916:	0f 85 44 02 00 00    	jne    ffffffff8020cb60 <_RME_Thd_Sched_Bind.isra.0+0x260>
ffffffff8020c91c:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020c91f:	0f 83 23 02 00 00    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020c925:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020c92c:	ff 00 00 
ffffffff8020c92f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020c933:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020c93a:	00 00 00 
ffffffff8020c93d:	48 01 f8             	add    %rdi,%rax
ffffffff8020c940:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020c943:	48 21 d1             	and    %rdx,%rcx
ffffffff8020c946:	4c 39 c9             	cmp    %r9,%rcx
ffffffff8020c949:	0f 84 79 02 00 00    	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020c94f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020c953:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8020c957:	0f 85 fb 02 00 00    	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff8020c95d:	f6 c7 80             	test   $0x80,%bh
ffffffff8020c960:	0f 85 7a 02 00 00    	jne    ffffffff8020cbe0 <_RME_Thd_Sched_Bind.isra.0+0x2e0>
ffffffff8020c966:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8020c969:	0f 83 d9 01 00 00    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020c96f:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020c976:	ff 00 00 
ffffffff8020c979:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020c97d:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020c984:	00 00 00 
ffffffff8020c987:	48 01 fb             	add    %rdi,%rbx
ffffffff8020c98a:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020c98d:	48 21 d1             	and    %rdx,%rcx
ffffffff8020c990:	4c 39 c9             	cmp    %r9,%rcx
ffffffff8020c993:	0f 84 2f 02 00 00    	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020c999:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020c99d:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8020c9a1:	0f 85 b1 02 00 00    	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff8020c9a7:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8020c9ab:	0f 84 1f 03 00 00    	je     ffffffff8020ccd0 <_RME_Thd_Sched_Bind.isra.0+0x3d0>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
ffffffff8020c9b1:	f6 43 10 04          	testb  $0x4,0x10(%rbx)
ffffffff8020c9b5:	0f 84 15 03 00 00    	je     ffffffff8020ccd0 <_RME_Thd_Sched_Bind.isra.0+0x3d0>
    if(Cap_Sig!=RME_CID_NULL)
ffffffff8020c9bb:	ba 00 00 00 80       	mov    $0x80000000,%edx
ffffffff8020c9c0:	49 39 d0             	cmp    %rdx,%r8
ffffffff8020c9c3:	0f 84 ff 02 00 00    	je     ffffffff8020ccc8 <_RME_Thd_Sched_Bind.isra.0+0x3c8>
        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8020c9c9:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020c9d0:	0f 84 9a 02 00 00    	je     ffffffff8020cc70 <_RME_Thd_Sched_Bind.isra.0+0x370>
ffffffff8020c9d6:	4c 89 c2             	mov    %r8,%rdx
ffffffff8020c9d9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020c9dd:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020c9e0:	0f 83 62 01 00 00    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020c9e6:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020c9ed:	ff 00 00 
ffffffff8020c9f0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020c9f4:	48 01 fa             	add    %rdi,%rdx
ffffffff8020c9f7:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020c9fe:	00 00 00 
ffffffff8020ca01:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020ca04:	49 89 c9             	mov    %rcx,%r9
ffffffff8020ca07:	49 21 f1             	and    %rsi,%r9
ffffffff8020ca0a:	49 39 f9             	cmp    %rdi,%r9
ffffffff8020ca0d:	0f 84 b5 01 00 00    	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020ca13:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020ca17:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020ca1b:	0f 85 37 02 00 00    	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
ffffffff8020ca21:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020ca25:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020ca2c:	49 39 c8             	cmp    %rcx,%r8
ffffffff8020ca2f:	0f 83 13 01 00 00    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020ca35:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020ca39:	4c 03 42 18          	add    0x18(%rdx),%r8
ffffffff8020ca3d:	49 8b 10             	mov    (%r8),%rdx
ffffffff8020ca40:	4d 89 c4             	mov    %r8,%r12
ffffffff8020ca43:	48 21 d6             	and    %rdx,%rsi
ffffffff8020ca46:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020ca49:	0f 84 79 01 00 00    	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020ca4f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020ca53:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8020ca57:	0f 85 fb 01 00 00    	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
        RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SCHED);
ffffffff8020ca5d:	41 f6 44 24 10 20    	testb  $0x20,0x10(%r12)
ffffffff8020ca63:	0f 84 67 02 00 00    	je     ffffffff8020ccd0 <_RME_Thd_Sched_Bind.isra.0+0x3d0>
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff8020ca69:	4c 8b 68 18          	mov    0x18(%rax),%r13
    if(Local_Old!=RME_THD_FREE)
ffffffff8020ca6d:	49 83 7d 28 ff       	cmpq   $0xffffffffffffffff,0x28(%r13)
ffffffff8020ca72:	0f 85 78 02 00 00    	jne    ffffffff8020ccf0 <_RME_Thd_Sched_Bind.isra.0+0x3f0>
    Local_New=RME_CPU_LOCAL();
ffffffff8020ca78:	e8 c2 ed ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Scheduler=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
ffffffff8020ca7d:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
    Local_New=RME_CPU_LOCAL();
ffffffff8020ca81:	48 89 c2             	mov    %rax,%rdx
    if(Scheduler->Sched.Local!=Local_New)
ffffffff8020ca84:	48 3b 41 28          	cmp    0x28(%rcx),%rax
ffffffff8020ca88:	0f 85 62 02 00 00    	jne    ffffffff8020ccf0 <_RME_Thd_Sched_Bind.isra.0+0x3f0>
    if(Thread==Scheduler)
ffffffff8020ca8e:	49 39 cd             	cmp    %rcx,%r13
ffffffff8020ca91:	0f 84 89 02 00 00    	je     ffffffff8020cd20 <_RME_Thd_Sched_Bind.isra.0+0x420>
    if(Scheduler->Sched.Prio_Max<Prio)
ffffffff8020ca97:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff8020ca9c:	48 39 41 48          	cmp    %rax,0x48(%rcx)
ffffffff8020caa0:	0f 82 62 02 00 00    	jb     ffffffff8020cd08 <_RME_Thd_Sched_Bind.isra.0+0x408>
    Hyp_Attr=Thread->Ctx.Hyp_Attr;
ffffffff8020caa6:	49 8b 85 88 00 00 00 	mov    0x88(%r13),%rax
    if(RME_THD_ATTR(Hyp_Attr)!=0U)
ffffffff8020caad:	48 89 c6             	mov    %rax,%rsi
ffffffff8020cab0:	48 0f ba f6 3f       	btr    $0x3f,%rsi
ffffffff8020cab5:	48 85 f6             	test   %rsi,%rsi
ffffffff8020cab8:	0f 85 12 02 00 00    	jne    ffffffff8020ccd0 <_RME_Thd_Sched_Bind.isra.0+0x3d0>
    else if(((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)==0U))||
ffffffff8020cabe:	48 83 7c 24 38 00    	cmpq   $0x0,0x38(%rsp)
ffffffff8020cac4:	0f 85 32 02 00 00    	jne    ffffffff8020ccfc <_RME_Thd_Sched_Bind.isra.0+0x3fc>
ffffffff8020caca:	48 85 c0             	test   %rax,%rax
ffffffff8020cacd:	0f 88 29 02 00 00    	js     ffffffff8020ccfc <_RME_Thd_Sched_Bind.isra.0+0x3fc>
/* Inline assembly implementation */
#else
static INLINE rme_ptr_t _RME_X64_Comp_Swap(volatile rme_ptr_t* Ptr, rme_ptr_t Old, rme_ptr_t New)
{
	rme_u8_t Zero;
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020cad3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020cada:	f0 49 0f b1 55 28    	lock cmpxchg %rdx,0x28(%r13)
ffffffff8020cae0:	0f 94 c2             	sete   %dl
    if(RME_COMP_SWAP((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff8020cae3:	84 d2                	test   %dl,%dl
ffffffff8020cae5:	0f 84 29 02 00 00    	je     ffffffff8020cd14 <_RME_Thd_Sched_Bind.isra.0+0x414>
    Thread->Sched.Prio=Prio;
ffffffff8020caeb:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    Scheduler->Sched.Sched_Ref++;
ffffffff8020caf0:	48 83 41 60 01       	addq   $0x1,0x60(%rcx)
    Thread->Sched.Sched_Thd=Scheduler;
ffffffff8020caf5:	49 89 4d 68          	mov    %rcx,0x68(%r13)
    Thread->Sched.Prio=Prio;
ffffffff8020caf9:	49 89 45 40          	mov    %rax,0x40(%r13)
    Thread->Sched.TID=(rme_ptr_t)TID;
ffffffff8020cafd:	49 89 6d 20          	mov    %rbp,0x20(%r13)
    if(Sig_Op==(void*)0U)
ffffffff8020cb01:	4d 85 e4             	test   %r12,%r12
ffffffff8020cb04:	0f 84 d6 01 00 00    	je     ffffffff8020cce0 <_RME_Thd_Sched_Bind.isra.0+0x3e0>
        Thread->Sched.Sched_Sig=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff8020cb0a:	41 8b 04 24          	mov    (%r12),%eax
ffffffff8020cb0e:	85 c0                	test   %eax,%eax
ffffffff8020cb10:	74 05                	je     ffffffff8020cb17 <_RME_Thd_Sched_Bind.isra.0+0x217>
ffffffff8020cb12:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
ffffffff8020cb17:	4d 89 65 70          	mov    %r12,0x70(%r13)
	                     :"memory", "cc");
	return (rme_ptr_t)Zero;
}
static INLINE rme_ptr_t _RME_X64_Fetch_Add(volatile rme_ptr_t* Ptr, rme_cnt_t Addend)
{
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020cb1b:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020cb20:	f0 49 0f c1 44 24 08 	lock xadd %rax,0x8(%r12)
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)!=0U)
ffffffff8020cb27:	49 83 bd 88 00 00 00 	cmpq   $0x0,0x88(%r13)
ffffffff8020cb2e:	00 
ffffffff8020cb2f:	0f 88 7b 01 00 00    	js     ffffffff8020ccb0 <_RME_Thd_Sched_Bind.isra.0+0x3b0>
    return 0;
ffffffff8020cb35:	31 c0                	xor    %eax,%eax
}
ffffffff8020cb37:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020cb3b:	5b                   	pop    %rbx
ffffffff8020cb3c:	5d                   	pop    %rbp
ffffffff8020cb3d:	41 5c                	pop    %r12
ffffffff8020cb3f:	41 5d                	pop    %r13
ffffffff8020cb41:	c3                   	ret
ffffffff8020cb42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cb48:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020cb4f:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020cb53:	5b                   	pop    %rbx
ffffffff8020cb54:	5d                   	pop    %rbp
ffffffff8020cb55:	41 5c                	pop    %r12
ffffffff8020cb57:	41 5d                	pop    %r13
ffffffff8020cb59:	c3                   	ret
ffffffff8020cb5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cb60:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cb63:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cb67:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020cb6a:	73 dc                	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020cb6c:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020cb73:	ff 00 00 
ffffffff8020cb76:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cb7a:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020cb81:	00 00 00 
ffffffff8020cb84:	48 01 fa             	add    %rdi,%rdx
ffffffff8020cb87:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020cb8a:	49 89 cb             	mov    %rcx,%r11
ffffffff8020cb8d:	4d 21 cb             	and    %r9,%r11
ffffffff8020cb90:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020cb93:	74 33                	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020cb95:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020cb99:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020cb9d:	0f 85 b5 00 00 00    	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
ffffffff8020cba3:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020cba7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020cbac:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020cbaf:	73 97                	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020cbb1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cbb5:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020cbb9:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020cbbc:	49 21 d1             	and    %rdx,%r9
ffffffff8020cbbf:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020cbc2:	0f 85 87 fd ff ff    	jne    ffffffff8020c94f <_RME_Thd_Sched_Bind.isra.0+0x4f>
}
ffffffff8020cbc8:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cbcc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020cbd3:	5b                   	pop    %rbx
ffffffff8020cbd4:	5d                   	pop    %rbp
ffffffff8020cbd5:	41 5c                	pop    %r12
ffffffff8020cbd7:	41 5d                	pop    %r13
ffffffff8020cbd9:	c3                   	ret
ffffffff8020cbda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff8020cbe0:	48 89 da             	mov    %rbx,%rdx
ffffffff8020cbe3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cbe7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020cbea:	0f 83 58 ff ff ff    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020cbf0:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020cbf7:	ff 00 00 
ffffffff8020cbfa:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cbfe:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020cc05:	00 00 00 
ffffffff8020cc08:	48 01 fa             	add    %rdi,%rdx
ffffffff8020cc0b:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020cc0e:	49 89 cb             	mov    %rcx,%r11
ffffffff8020cc11:	4d 21 cb             	and    %r9,%r11
ffffffff8020cc14:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020cc17:	74 af                	je     ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020cc19:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020cc1d:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020cc21:	75 35                	jne    ffffffff8020cc58 <_RME_Thd_Sched_Bind.isra.0+0x358>
ffffffff8020cc23:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020cc27:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020cc2d:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020cc30:	0f 83 12 ff ff ff    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020cc36:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020cc3a:	48 03 5a 18          	add    0x18(%rdx),%rbx
ffffffff8020cc3e:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020cc41:	49 21 d1             	and    %rdx,%r9
ffffffff8020cc44:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020cc47:	0f 85 4c fd ff ff    	jne    ffffffff8020c999 <_RME_Thd_Sched_Bind.isra.0+0x99>
ffffffff8020cc4d:	e9 76 ff ff ff       	jmp    ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020cc52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
}
ffffffff8020cc58:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8020cc5c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020cc63:	5b                   	pop    %rbx
ffffffff8020cc64:	5d                   	pop    %rbp
ffffffff8020cc65:	41 5c                	pop    %r12
ffffffff8020cc67:	41 5d                	pop    %r13
ffffffff8020cc69:	c3                   	ret
ffffffff8020cc6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8020cc70:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020cc73:	0f 83 cf fe ff ff    	jae    ffffffff8020cb48 <_RME_Thd_Sched_Bind.isra.0+0x248>
ffffffff8020cc79:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020cc80:	ff 00 00 
ffffffff8020cc83:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020cc87:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8020cc8e:	00 00 00 
ffffffff8020cc91:	4d 8d 24 38          	lea    (%r8,%rdi,1),%r12
ffffffff8020cc95:	49 8b 14 24          	mov    (%r12),%rdx
ffffffff8020cc99:	48 21 d1             	and    %rdx,%rcx
ffffffff8020cc9c:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020cc9f:	0f 85 aa fd ff ff    	jne    ffffffff8020ca4f <_RME_Thd_Sched_Bind.isra.0+0x14f>
ffffffff8020cca5:	e9 1e ff ff ff       	jmp    ffffffff8020cbc8 <_RME_Thd_Sched_Bind.isra.0+0x2c8>
ffffffff8020ccaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)Haddr;
ffffffff8020ccb0:	49 c7 85 90 00 00 00 	movq   $0x0,0x90(%r13)
ffffffff8020ccb7:	00 00 00 00 
    return 0;
ffffffff8020ccbb:	31 c0                	xor    %eax,%eax
ffffffff8020ccbd:	e9 75 fe ff ff       	jmp    ffffffff8020cb37 <_RME_Thd_Sched_Bind.isra.0+0x237>
ffffffff8020ccc2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Sig_Op=RME_NULL;
ffffffff8020ccc8:	45 31 e4             	xor    %r12d,%r12d
ffffffff8020cccb:	e9 99 fd ff ff       	jmp    ffffffff8020ca69 <_RME_Thd_Sched_Bind.isra.0+0x169>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff8020ccd0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ccd7:	e9 73 fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
ffffffff8020ccdc:	0f 1f 40 00          	nopl   0x0(%rax)
        Thread->Sched.Sched_Sig=0U;
ffffffff8020cce0:	49 c7 45 70 00 00 00 	movq   $0x0,0x70(%r13)
ffffffff8020cce7:	00 
ffffffff8020cce8:	e9 3a fe ff ff       	jmp    ffffffff8020cb27 <_RME_Thd_Sched_Bind.isra.0+0x227>
ffffffff8020cced:	0f 1f 00             	nopl   (%rax)
        return RME_ERR_PTH_INVSTATE;
ffffffff8020ccf0:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8020ccf7:	e9 53 fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
                    return RME_ERR_PTH_HADDR;
ffffffff8020ccfc:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8020cd03:	e9 47 fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
        return RME_ERR_PTH_PRIO;
ffffffff8020cd08:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8020cd0f:	e9 3b fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
        return RME_ERR_PTH_CONFLICT;
ffffffff8020cd14:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff8020cd1b:	e9 2f fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
        return RME_ERR_PTH_NOTIF;
ffffffff8020cd20:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff8020cd27:	e9 23 fe ff ff       	jmp    ffffffff8020cb4f <_RME_Thd_Sched_Bind.isra.0+0x24f>
ffffffff8020cd2c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020cd30 <_RME_Prc_Crt.isra.0>:
static rme_ret_t _RME_Prc_Crt(struct RME_Cap_Cpt* Cpt,
ffffffff8020cd30:	55                   	push   %rbp
ffffffff8020cd31:	48 89 d0             	mov    %rdx,%rax
ffffffff8020cd34:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020cd35:	80 e6 80             	and    $0x80,%dh
ffffffff8020cd38:	0f 85 ea 01 00 00    	jne    ffffffff8020cf28 <_RME_Prc_Crt.isra.0+0x1f8>
ffffffff8020cd3e:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020cd41:	0f 83 d1 01 00 00    	jae    ffffffff8020cf18 <_RME_Prc_Crt.isra.0+0x1e8>
ffffffff8020cd47:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020cd4e:	ff 00 00 
ffffffff8020cd51:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cd55:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020cd5c:	00 00 00 
ffffffff8020cd5f:	48 8d 14 38          	lea    (%rax,%rdi,1),%rdx
ffffffff8020cd63:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020cd66:	49 21 c2             	and    %rax,%r10
ffffffff8020cd69:	4d 39 da             	cmp    %r11,%r10
ffffffff8020cd6c:	0f 84 21 02 00 00    	je     ffffffff8020cf93 <_RME_Prc_Crt.isra.0+0x263>
ffffffff8020cd72:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020cd76:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020cd7a:	0f 85 98 02 00 00    	jne    ffffffff8020d018 <_RME_Prc_Crt.isra.0+0x2e8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020cd80:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020cd87:	0f 85 13 02 00 00    	jne    ffffffff8020cfa0 <_RME_Prc_Crt.isra.0+0x270>
ffffffff8020cd8d:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020cd90:	0f 83 82 01 00 00    	jae    ffffffff8020cf18 <_RME_Prc_Crt.isra.0+0x1e8>
ffffffff8020cd96:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020cd9d:	ff 00 00 
ffffffff8020cda0:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020cda4:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020cdab:	00 00 00 
ffffffff8020cdae:	49 01 f8             	add    %rdi,%r8
ffffffff8020cdb1:	49 8b 00             	mov    (%r8),%rax
ffffffff8020cdb4:	49 21 c2             	and    %rax,%r10
ffffffff8020cdb7:	4d 39 da             	cmp    %r11,%r10
ffffffff8020cdba:	0f 84 d3 01 00 00    	je     ffffffff8020cf93 <_RME_Prc_Crt.isra.0+0x263>
ffffffff8020cdc0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020cdc4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020cdc8:	0f 85 4a 02 00 00    	jne    ffffffff8020d018 <_RME_Prc_Crt.isra.0+0x2e8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020cdce:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8020cdd5:	0f 84 4d 02 00 00    	je     ffffffff8020d028 <_RME_Prc_Crt.isra.0+0x2f8>
ffffffff8020cddb:	4c 89 c8             	mov    %r9,%rax
ffffffff8020cdde:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020cde2:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020cde5:	0f 83 2d 01 00 00    	jae    ffffffff8020cf18 <_RME_Prc_Crt.isra.0+0x1e8>
ffffffff8020cdeb:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020cdf2:	00 00 00 
ffffffff8020cdf5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cdf9:	48 01 f8             	add    %rdi,%rax
ffffffff8020cdfc:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020ce03:	ff 00 00 
ffffffff8020ce06:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020ce09:	49 89 f3             	mov    %rsi,%r11
ffffffff8020ce0c:	49 21 fb             	and    %rdi,%r11
ffffffff8020ce0f:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020ce12:	0f 84 7b 01 00 00    	je     ffffffff8020cf93 <_RME_Prc_Crt.isra.0+0x263>
ffffffff8020ce18:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020ce1c:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020ce20:	0f 85 f2 01 00 00    	jne    ffffffff8020d018 <_RME_Prc_Crt.isra.0+0x2e8>
ffffffff8020ce26:	48 8b 70 28          	mov    0x28(%rax),%rsi
ffffffff8020ce2a:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff8020ce31:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020ce34:	0f 83 de 00 00 00    	jae    ffffffff8020cf18 <_RME_Prc_Crt.isra.0+0x1e8>
ffffffff8020ce3a:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020ce3e:	4c 03 48 18          	add    0x18(%rax),%r9
ffffffff8020ce42:	49 8b 01             	mov    (%r9),%rax
ffffffff8020ce45:	48 21 c7             	and    %rax,%rdi
ffffffff8020ce48:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8020ce4b:	0f 84 42 01 00 00    	je     ffffffff8020cf93 <_RME_Prc_Crt.isra.0+0x263>
ffffffff8020ce51:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ce55:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020ce59:	0f 85 b9 01 00 00    	jne    ffffffff8020d018 <_RME_Prc_Crt.isra.0+0x2e8>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020ce5f:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff8020ce63:	48 f7 d0             	not    %rax
ffffffff8020ce66:	83 e0 01             	and    $0x1,%eax
ffffffff8020ce69:	0f 85 f1 01 00 00    	jne    ffffffff8020d060 <_RME_Prc_Crt.isra.0+0x330>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff8020ce6f:	41 f6 40 10 40       	testb  $0x40,0x10(%r8)
ffffffff8020ce74:	0f 84 e6 01 00 00    	je     ffffffff8020d060 <_RME_Prc_Crt.isra.0+0x330>
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff8020ce7a:	41 f6 41 10 40       	testb  $0x40,0x10(%r9)
ffffffff8020ce7f:	0f 84 db 01 00 00    	je     ffffffff8020d060 <_RME_Prc_Crt.isra.0+0x330>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff8020ce85:	48 3b 4a 28          	cmp    0x28(%rdx),%rcx
ffffffff8020ce89:	0f 83 89 00 00 00    	jae    ffffffff8020cf18 <_RME_Prc_Crt.isra.0+0x1e8>
ffffffff8020ce8f:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020ce93:	48 03 4a 18          	add    0x18(%rdx),%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020ce97:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020ce9e:	00 00 00 
ffffffff8020cea1:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8020cea6:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020cea9:	84 d2                	test   %dl,%dl
ffffffff8020ceab:	0f 84 bf 01 00 00    	je     ffffffff8020d070 <_RME_Prc_Crt.isra.0+0x340>
ffffffff8020ceb1:	48 8b 05 58 91 01 00 	mov    0x19158(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    Prc_Crt->Head.Root_Ref=0U;
ffffffff8020ceb8:	66 0f 6f 05 00 05 01 	movdqa 0x10500(%rip),%xmm0        # ffffffff8021d3c0 <Table.1+0x100>
ffffffff8020cebf:	00 
    Prc_Crt->Head.Object=0U;
ffffffff8020cec0:	48 c7 41 18 00 00 00 	movq   $0x0,0x18(%rcx)
ffffffff8020cec7:	00 
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020cec8:	48 89 41 20          	mov    %rax,0x20(%rcx)
    Prc_Crt->Head.Root_Ref=0U;
ffffffff8020cecc:	0f 11 41 08          	movups %xmm0,0x8(%rcx)
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff8020ced0:	41 8b 10             	mov    (%r8),%edx
ffffffff8020ced3:	85 d2                	test   %edx,%edx
ffffffff8020ced5:	74 04                	je     ffffffff8020cedb <_RME_Prc_Crt.isra.0+0x1ab>
ffffffff8020ced7:	4d 8b 40 08          	mov    0x8(%r8),%r8
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff8020cedb:	41 8b 01             	mov    (%r9),%eax
ffffffff8020cede:	85 c0                	test   %eax,%eax
ffffffff8020cee0:	74 04                	je     ffffffff8020cee6 <_RME_Prc_Crt.isra.0+0x1b6>
ffffffff8020cee2:	4d 8b 49 08          	mov    0x8(%r9),%r9
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020cee6:	b8 01 00 00 00       	mov    $0x1,%eax
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff8020ceeb:	4c 89 41 28          	mov    %r8,0x28(%rcx)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff8020ceef:	4c 89 49 30          	mov    %r9,0x30(%rcx)
ffffffff8020cef3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cef6:	f0 49 0f c1 50 08    	lock xadd %rdx,0x8(%r8)
ffffffff8020cefc:	f0 49 0f c1 41 08    	lock xadd %rax,0x8(%r9)
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff8020cf02:	48 b8 00 00 00 00 00 	movabs $0x5000000000000,%rax
ffffffff8020cf09:	00 05 00 
ffffffff8020cf0c:	48 89 01             	mov    %rax,(%rcx)
    return 0;
ffffffff8020cf0f:	31 c0                	xor    %eax,%eax
}
ffffffff8020cf11:	5b                   	pop    %rbx
ffffffff8020cf12:	5d                   	pop    %rbp
ffffffff8020cf13:	c3                   	ret
ffffffff8020cf14:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020cf18:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020cf1f:	5b                   	pop    %rbx
ffffffff8020cf20:	5d                   	pop    %rbp
ffffffff8020cf21:	c3                   	ret
ffffffff8020cf22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020cf28:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cf2b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cf2f:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020cf32:	73 e4                	jae    ffffffff8020cf18 <_RME_Prc_Crt.isra.0+0x1e8>
ffffffff8020cf34:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020cf3b:	ff 00 00 
ffffffff8020cf3e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020cf42:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020cf49:	00 00 00 
ffffffff8020cf4c:	48 01 fa             	add    %rdi,%rdx
ffffffff8020cf4f:	4c 8b 12             	mov    (%rdx),%r10
ffffffff8020cf52:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020cf55:	4c 21 dd             	and    %r11,%rbp
ffffffff8020cf58:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020cf5b:	74 36                	je     ffffffff8020cf93 <_RME_Prc_Crt.isra.0+0x263>
ffffffff8020cf5d:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020cf61:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020cf65:	0f 85 ad 00 00 00    	jne    ffffffff8020d018 <_RME_Prc_Crt.isra.0+0x2e8>
ffffffff8020cf6b:	4c 8b 52 28          	mov    0x28(%rdx),%r10
ffffffff8020cf6f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020cf74:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020cf77:	73 9f                	jae    ffffffff8020cf18 <_RME_Prc_Crt.isra.0+0x1e8>
ffffffff8020cf79:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cf7d:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020cf81:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cf84:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cf87:	49 21 c3             	and    %rax,%r11
ffffffff8020cf8a:	49 39 db             	cmp    %rbx,%r11
ffffffff8020cf8d:	0f 85 df fd ff ff    	jne    ffffffff8020cd72 <_RME_Prc_Crt.isra.0+0x42>
ffffffff8020cf93:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020cf9a:	5b                   	pop    %rbx
ffffffff8020cf9b:	5d                   	pop    %rbp
ffffffff8020cf9c:	c3                   	ret
ffffffff8020cf9d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020cfa0:	4c 89 c0             	mov    %r8,%rax
ffffffff8020cfa3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020cfa7:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020cfaa:	0f 83 68 ff ff ff    	jae    ffffffff8020cf18 <_RME_Prc_Crt.isra.0+0x1e8>
ffffffff8020cfb0:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020cfb7:	ff 00 00 
ffffffff8020cfba:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020cfbe:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020cfc5:	00 00 00 
ffffffff8020cfc8:	48 01 f8             	add    %rdi,%rax
ffffffff8020cfcb:	4c 8b 10             	mov    (%rax),%r10
ffffffff8020cfce:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020cfd1:	4c 21 dd             	and    %r11,%rbp
ffffffff8020cfd4:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020cfd7:	74 ba                	je     ffffffff8020cf93 <_RME_Prc_Crt.isra.0+0x263>
ffffffff8020cfd9:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020cfdd:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020cfe1:	75 35                	jne    ffffffff8020d018 <_RME_Prc_Crt.isra.0+0x2e8>
ffffffff8020cfe3:	4c 8b 50 28          	mov    0x28(%rax),%r10
ffffffff8020cfe7:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020cfee:	4d 39 d0             	cmp    %r10,%r8
ffffffff8020cff1:	0f 83 21 ff ff ff    	jae    ffffffff8020cf18 <_RME_Prc_Crt.isra.0+0x1e8>
ffffffff8020cff7:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020cffb:	4c 03 40 18          	add    0x18(%rax),%r8
ffffffff8020cfff:	49 8b 00             	mov    (%r8),%rax
ffffffff8020d002:	49 21 c3             	and    %rax,%r11
ffffffff8020d005:	49 39 db             	cmp    %rbx,%r11
ffffffff8020d008:	0f 85 b2 fd ff ff    	jne    ffffffff8020cdc0 <_RME_Prc_Crt.isra.0+0x90>
ffffffff8020d00e:	e9 80 ff ff ff       	jmp    ffffffff8020cf93 <_RME_Prc_Crt.isra.0+0x263>
ffffffff8020d013:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020d018:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020d01f:	5b                   	pop    %rbx
ffffffff8020d020:	5d                   	pop    %rbp
ffffffff8020d021:	c3                   	ret
ffffffff8020d022:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020d028:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020d02b:	0f 83 e7 fe ff ff    	jae    ffffffff8020cf18 <_RME_Prc_Crt.isra.0+0x1e8>
ffffffff8020d031:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020d038:	ff 00 00 
ffffffff8020d03b:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020d03f:	49 01 f9             	add    %rdi,%r9
ffffffff8020d042:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020d049:	00 00 00 
ffffffff8020d04c:	49 8b 01             	mov    (%r9),%rax
ffffffff8020d04f:	48 21 c6             	and    %rax,%rsi
ffffffff8020d052:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020d055:	0f 85 f6 fd ff ff    	jne    ffffffff8020ce51 <_RME_Prc_Crt.isra.0+0x121>
ffffffff8020d05b:	e9 33 ff ff ff       	jmp    ffffffff8020cf93 <_RME_Prc_Crt.isra.0+0x263>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8020d060:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020d067:	e9 b3 fe ff ff       	jmp    ffffffff8020cf1f <_RME_Prc_Crt.isra.0+0x1ef>
ffffffff8020d06c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff8020d070:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020d077:	e9 a3 fe ff ff       	jmp    ffffffff8020cf1f <_RME_Prc_Crt.isra.0+0x1ef>
ffffffff8020d07c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020d080 <_RME_Run_Swt.isra.0>:
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
ffffffff8020d080:	41 55                	push   %r13
ffffffff8020d082:	41 54                	push   %r12
ffffffff8020d084:	49 89 fc             	mov    %rdi,%r12
ffffffff8020d087:	55                   	push   %rbp
ffffffff8020d088:	48 89 f5             	mov    %rsi,%rbp
ffffffff8020d08b:	53                   	push   %rbx
ffffffff8020d08c:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020d08f:	48 83 ec 08          	sub    $0x8,%rsp
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff8020d093:	4c 8b aa 90 00 00 00 	mov    0x90(%rdx),%r13
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff8020d09a:	48 8b be 90 00 00 00 	mov    0x90(%rsi),%rdi
ffffffff8020d0a1:	4c 89 e6             	mov    %r12,%rsi
ffffffff8020d0a4:	e8 97 d4 00 00       	call   ffffffff8021a540 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff8020d0a9:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020d0ac:	4c 89 e7             	mov    %r12,%rdi
ffffffff8020d0af:	e8 8c d4 00 00       	call   ffffffff8021a540 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d0b4:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d0bb:	48 85 c0             	test   %rax,%rax
ffffffff8020d0be:	74 70                	je     ffffffff8020d130 <_RME_Run_Swt.isra.0+0xb0>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d0c0:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d0c7:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020d0ca:	74 64                	je     ffffffff8020d130 <_RME_Run_Swt.isra.0+0xb0>
        return Inv_Top->Prc->Pgt;
ffffffff8020d0cc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d0d0:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d0d4:	48 8b 83 98 00 00 00 	mov    0x98(%rbx),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d0db:	48 85 c0             	test   %rax,%rax
ffffffff8020d0de:	74 40                	je     ffffffff8020d120 <_RME_Run_Swt.isra.0+0xa0>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff8020d0e0:	48 8d 8b 98 00 00 00 	lea    0x98(%rbx),%rcx
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d0e7:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020d0ea:	74 34                	je     ffffffff8020d120 <_RME_Run_Swt.isra.0+0xa0>
        return Inv_Top->Prc->Pgt;
ffffffff8020d0ec:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d0f0:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff8020d0f4:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8020d0f8:	48 39 42 18          	cmp    %rax,0x18(%rdx)
ffffffff8020d0fc:	75 12                	jne    ffffffff8020d110 <_RME_Run_Swt.isra.0+0x90>
}
ffffffff8020d0fe:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d102:	5b                   	pop    %rbx
ffffffff8020d103:	5d                   	pop    %rbp
ffffffff8020d104:	41 5c                	pop    %r12
ffffffff8020d106:	41 5d                	pop    %r13
ffffffff8020d108:	c3                   	ret
ffffffff8020d109:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020d110:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d114:	5b                   	pop    %rbx
ffffffff8020d115:	5d                   	pop    %rbp
ffffffff8020d116:	41 5c                	pop    %r12
ffffffff8020d118:	41 5d                	pop    %r13
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff8020d11a:	e9 a1 db 00 00       	jmp    ffffffff8021acc0 <__RME_Pgt_Set>
ffffffff8020d11f:	90                   	nop
        return Thd->Sched.Prc->Pgt;
ffffffff8020d120:	48 8b 43 58          	mov    0x58(%rbx),%rax
ffffffff8020d124:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff8020d128:	eb ca                	jmp    ffffffff8020d0f4 <_RME_Run_Swt.isra.0+0x74>
ffffffff8020d12a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020d130:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff8020d134:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020d138:	eb 9a                	jmp    ffffffff8020d0d4 <_RME_Run_Swt.isra.0+0x54>
ffffffff8020d13a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020d140 <_RME_Pgt_Con.isra.0>:
static rme_ret_t _RME_Pgt_Con(struct RME_Cap_Cpt* Cpt,
ffffffff8020d140:	55                   	push   %rbp
ffffffff8020d141:	48 89 f0             	mov    %rsi,%rax
ffffffff8020d144:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d147:	53                   	push   %rbx
ffffffff8020d148:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020d14b:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d14f:	80 e6 80             	and    $0x80,%dh
ffffffff8020d152:	0f 85 48 01 00 00    	jne    ffffffff8020d2a0 <_RME_Pgt_Con.isra.0+0x160>
ffffffff8020d158:	48 39 c3             	cmp    %rax,%rbx
ffffffff8020d15b:	0f 83 2f 01 00 00    	jae    ffffffff8020d290 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d161:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d168:	ff 00 00 
ffffffff8020d16b:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020d16f:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020d176:	00 00 00 
ffffffff8020d179:	48 01 fb             	add    %rdi,%rbx
ffffffff8020d17c:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020d17f:	48 21 d1             	and    %rdx,%rcx
ffffffff8020d182:	4c 39 d1             	cmp    %r10,%rcx
ffffffff8020d185:	0f 84 7e 01 00 00    	je     ffffffff8020d309 <_RME_Pgt_Con.isra.0+0x1c9>
ffffffff8020d18b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d18f:	48 83 fa 04          	cmp    $0x4,%rdx
ffffffff8020d193:	0f 85 17 02 00 00    	jne    ffffffff8020d3b0 <_RME_Pgt_Con.isra.0+0x270>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020d199:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020d1a0:	0f 85 7a 01 00 00    	jne    ffffffff8020d320 <_RME_Pgt_Con.isra.0+0x1e0>
ffffffff8020d1a6:	49 39 c0             	cmp    %rax,%r8
ffffffff8020d1a9:	0f 83 e1 00 00 00    	jae    ffffffff8020d290 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d1af:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020d1b6:	ff 00 00 
ffffffff8020d1b9:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d1bd:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020d1c4:	00 00 00 
ffffffff8020d1c7:	49 8d 2c 38          	lea    (%r8,%rdi,1),%rbp
ffffffff8020d1cb:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020d1cf:	48 21 c2             	and    %rax,%rdx
ffffffff8020d1d2:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020d1d5:	0f 84 2e 01 00 00    	je     ffffffff8020d309 <_RME_Pgt_Con.isra.0+0x1c9>
ffffffff8020d1db:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d1df:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020d1e3:	0f 85 c7 01 00 00    	jne    ffffffff8020d3b0 <_RME_Pgt_Con.isra.0+0x270>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff8020d1e9:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8020d1ed:	a8 10                	test   $0x10,%al
ffffffff8020d1ef:	0f 84 cb 01 00 00    	je     ffffffff8020d3c0 <_RME_Pgt_Con.isra.0+0x280>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff8020d1f5:	f6 45 10 08          	testb  $0x8,0x10(%rbp)
ffffffff8020d1f9:	0f 84 c1 01 00 00    	je     ffffffff8020d3c0 <_RME_Pgt_Con.isra.0+0x280>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff8020d1ff:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d202:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff8020d206:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020d209:	0f 82 b1 01 00 00    	jb     ffffffff8020d3c0 <_RME_Pgt_Con.isra.0+0x280>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff8020d20f:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020d213:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff8020d218:	48 39 c6             	cmp    %rax,%rsi
ffffffff8020d21b:	0f 82 9f 01 00 00    	jb     ffffffff8020d3c0 <_RME_Pgt_Con.isra.0+0x280>
    if((Pos>>RME_PGT_NMORD(Pgt_Parent->Order))!=0U)
ffffffff8020d221:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff8020d225:	48 89 f0             	mov    %rsi,%rax
ffffffff8020d228:	48 d3 e8             	shr    %cl,%rax
ffffffff8020d22b:	48 85 c0             	test   %rax,%rax
ffffffff8020d22e:	0f 85 9c 01 00 00    	jne    ffffffff8020d3d0 <_RME_Pgt_Con.isra.0+0x290>
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff8020d234:	48 8b 45 28          	mov    0x28(%rbp),%rax
    Szord_Parent=RME_PGT_SZORD(Pgt_Parent->Order);
ffffffff8020d238:	48 c1 e9 20          	shr    $0x20,%rcx
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff8020d23c:	89 c2                	mov    %eax,%edx
ffffffff8020d23e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d242:	48 01 d0             	add    %rdx,%rax
    if(Szord_Parent!=Order_Child)
ffffffff8020d245:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020d248:	0f 85 82 01 00 00    	jne    ffffffff8020d3d0 <_RME_Pgt_Con.isra.0+0x290>
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff8020d24e:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020d251:	4c 89 c9             	mov    %r9,%rcx
ffffffff8020d254:	48 89 df             	mov    %rbx,%rdi
ffffffff8020d257:	e8 b4 dc 00 00       	call   ffffffff8021af10 <__RME_Pgt_Pgdir_Map>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff8020d25c:	8b 13                	mov    (%rbx),%edx
ffffffff8020d25e:	85 d2                	test   %edx,%edx
ffffffff8020d260:	74 04                	je     ffffffff8020d266 <_RME_Pgt_Con.isra.0+0x126>
ffffffff8020d262:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff8020d266:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020d26b:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020d271:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020d274:	85 c0                	test   %eax,%eax
ffffffff8020d276:	0f 85 24 01 00 00    	jne    ffffffff8020d3a0 <_RME_Pgt_Con.isra.0+0x260>
ffffffff8020d27c:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020d281:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    return 0;
ffffffff8020d287:	31 c0                	xor    %eax,%eax
}
ffffffff8020d289:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020d28d:	5b                   	pop    %rbx
ffffffff8020d28e:	5d                   	pop    %rbp
ffffffff8020d28f:	c3                   	ret
ffffffff8020d290:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d294:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020d29b:	5b                   	pop    %rbx
ffffffff8020d29c:	5d                   	pop    %rbp
ffffffff8020d29d:	c3                   	ret
ffffffff8020d29e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d2a0:	48 89 da             	mov    %rbx,%rdx
ffffffff8020d2a3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d2a7:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d2aa:	73 e4                	jae    ffffffff8020d290 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d2ac:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020d2b3:	ff 00 00 
ffffffff8020d2b6:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d2ba:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020d2c1:	00 00 00 
ffffffff8020d2c4:	48 01 fa             	add    %rdi,%rdx
ffffffff8020d2c7:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020d2ca:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020d2cd:	4c 21 d5             	and    %r10,%rbp
ffffffff8020d2d0:	4c 39 dd             	cmp    %r11,%rbp
ffffffff8020d2d3:	74 34                	je     ffffffff8020d309 <_RME_Pgt_Con.isra.0+0x1c9>
ffffffff8020d2d5:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d2d9:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d2dd:	0f 85 cd 00 00 00    	jne    ffffffff8020d3b0 <_RME_Pgt_Con.isra.0+0x270>
ffffffff8020d2e3:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020d2e7:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020d2ed:	48 39 cb             	cmp    %rcx,%rbx
ffffffff8020d2f0:	73 9e                	jae    ffffffff8020d290 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d2f2:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020d2f6:	48 03 5a 18          	add    0x18(%rdx),%rbx
ffffffff8020d2fa:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8020d2fd:	49 21 d2             	and    %rdx,%r10
ffffffff8020d300:	4d 39 da             	cmp    %r11,%r10
ffffffff8020d303:	0f 85 82 fe ff ff    	jne    ffffffff8020d18b <_RME_Pgt_Con.isra.0+0x4b>
}
ffffffff8020d309:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d30d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020d314:	5b                   	pop    %rbx
ffffffff8020d315:	5d                   	pop    %rbp
ffffffff8020d316:	c3                   	ret
ffffffff8020d317:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020d31e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020d320:	4c 89 c2             	mov    %r8,%rdx
ffffffff8020d323:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d327:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d32a:	0f 83 60 ff ff ff    	jae    ffffffff8020d290 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d330:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d337:	ff 00 00 
ffffffff8020d33a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d33e:	48 8d 04 3a          	lea    (%rdx,%rdi,1),%rax
ffffffff8020d342:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020d349:	00 00 00 
ffffffff8020d34c:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020d34f:	49 89 d2             	mov    %rdx,%r10
ffffffff8020d352:	49 21 ca             	and    %rcx,%r10
ffffffff8020d355:	49 39 fa             	cmp    %rdi,%r10
ffffffff8020d358:	74 af                	je     ffffffff8020d309 <_RME_Pgt_Con.isra.0+0x1c9>
ffffffff8020d35a:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d35e:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020d362:	75 4c                	jne    ffffffff8020d3b0 <_RME_Pgt_Con.isra.0+0x270>
ffffffff8020d364:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020d368:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020d36f:	49 39 d0             	cmp    %rdx,%r8
ffffffff8020d372:	0f 83 18 ff ff ff    	jae    ffffffff8020d290 <_RME_Pgt_Con.isra.0+0x150>
ffffffff8020d378:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d37c:	4c 03 40 18          	add    0x18(%rax),%r8
ffffffff8020d380:	49 8b 00             	mov    (%r8),%rax
ffffffff8020d383:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020d386:	48 21 c1             	and    %rax,%rcx
ffffffff8020d389:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020d38c:	0f 85 49 fe ff ff    	jne    ffffffff8020d1db <_RME_Pgt_Con.isra.0+0x9b>
ffffffff8020d392:	e9 72 ff ff ff       	jmp    ffffffff8020d309 <_RME_Pgt_Con.isra.0+0x1c9>
ffffffff8020d397:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020d39e:	00 00 
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020d3a0:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
ffffffff8020d3a4:	e9 d3 fe ff ff       	jmp    ffffffff8020d27c <_RME_Pgt_Con.isra.0+0x13c>
ffffffff8020d3a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
ffffffff8020d3b0:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020d3b4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020d3bb:	5b                   	pop    %rbx
ffffffff8020d3bc:	5d                   	pop    %rbp
ffffffff8020d3bd:	c3                   	ret
ffffffff8020d3be:	66 90                	xchg   %ax,%ax
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff8020d3c0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020d3c7:	e9 bd fe ff ff       	jmp    ffffffff8020d289 <_RME_Pgt_Con.isra.0+0x149>
ffffffff8020d3cc:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PGT_ADDR;
ffffffff8020d3d0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020d3d7:	e9 ad fe ff ff       	jmp    ffffffff8020d289 <_RME_Pgt_Con.isra.0+0x149>
ffffffff8020d3dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020d3e0 <_RME_Pgt_Add.isra.0>:
static rme_ret_t _RME_Pgt_Add(struct RME_Cap_Cpt* Cpt, 
ffffffff8020d3e0:	41 55                	push   %r13
ffffffff8020d3e2:	49 89 f3             	mov    %rsi,%r11
ffffffff8020d3e5:	49 89 fa             	mov    %rdi,%r10
ffffffff8020d3e8:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d3eb:	41 54                	push   %r12
ffffffff8020d3ed:	4d 89 c4             	mov    %r8,%r12
ffffffff8020d3f0:	55                   	push   %rbp
ffffffff8020d3f1:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020d3f4:	53                   	push   %rbx
ffffffff8020d3f5:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020d3f9:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d3fe:	80 e6 80             	and    $0x80,%dh
ffffffff8020d401:	0f 85 b1 01 00 00    	jne    ffffffff8020d5b8 <_RME_Pgt_Add.isra.0+0x1d8>
ffffffff8020d407:	4c 39 d8             	cmp    %r11,%rax
ffffffff8020d40a:	0f 83 90 01 00 00    	jae    ffffffff8020d5a0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d410:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020d417:	ff 00 00 
ffffffff8020d41a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d41e:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020d425:	00 00 00 
ffffffff8020d428:	48 8d 1c 38          	lea    (%rax,%rdi,1),%rbx
ffffffff8020d42c:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020d42f:	48 21 c2             	and    %rax,%rdx
ffffffff8020d432:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020d435:	0f 84 e8 01 00 00    	je     ffffffff8020d623 <_RME_Pgt_Add.isra.0+0x243>
ffffffff8020d43b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d43f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020d443:	0f 85 7f 02 00 00    	jne    ffffffff8020d6c8 <_RME_Pgt_Add.isra.0+0x2e8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff8020d449:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8020d450:	0f 85 e2 01 00 00    	jne    ffffffff8020d638 <_RME_Pgt_Add.isra.0+0x258>
ffffffff8020d456:	4d 39 d9             	cmp    %r11,%r9
ffffffff8020d459:	0f 83 41 01 00 00    	jae    ffffffff8020d5a0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d45f:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020d466:	ff 00 00 
ffffffff8020d469:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020d46d:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020d474:	00 00 00 
ffffffff8020d477:	4b 8d 3c 11          	lea    (%r9,%r10,1),%rdi
ffffffff8020d47b:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020d47e:	48 21 c2             	and    %rax,%rdx
ffffffff8020d481:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020d484:	0f 84 99 01 00 00    	je     ffffffff8020d623 <_RME_Pgt_Add.isra.0+0x243>
ffffffff8020d48a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020d48e:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020d492:	0f 85 30 02 00 00    	jne    ffffffff8020d6c8 <_RME_Pgt_Add.isra.0+0x2e8>
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff8020d498:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8020d49c:	a8 02                	test   $0x2,%al
ffffffff8020d49e:	0f 84 3c 02 00 00    	je     ffffffff8020d6e0 <_RME_Pgt_Add.isra.0+0x300>
    RME_CAP_CHECK(Pgt_Src,RME_PGT_FLAG_ADD_SRC);
ffffffff8020d4a4:	48 8b 57 10          	mov    0x10(%rdi),%rdx
ffffffff8020d4a8:	f6 c2 01             	test   $0x1,%dl
ffffffff8020d4ab:	0f 84 2f 02 00 00    	je     ffffffff8020d6e0 <_RME_Pgt_Add.isra.0+0x300>
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff8020d4b1:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d4b4:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff8020d4b8:	48 39 e9             	cmp    %rbp,%rcx
ffffffff8020d4bb:	0f 82 1f 02 00 00    	jb     ffffffff8020d6e0 <_RME_Pgt_Add.isra.0+0x300>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff8020d4c1:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020d4c5:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff8020d4ca:	48 39 c5             	cmp    %rax,%rbp
ffffffff8020d4cd:	0f 82 0d 02 00 00    	jb     ffffffff8020d6e0 <_RME_Pgt_Add.isra.0+0x300>
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff8020d4d3:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d4d6:	48 c1 e8 24          	shr    $0x24,%rax
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff8020d4da:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020d4dd:	0f 82 fd 01 00 00    	jb     ffffffff8020d6e0 <_RME_Pgt_Add.isra.0+0x300>
       (Pos_Src<RME_PGT_FLAG_LOW(Pgt_Src->Head.Flag)))
ffffffff8020d4e3:	48 c1 ea 08          	shr    $0x8,%rdx
ffffffff8020d4e7:	81 e2 ff ff ff 0f    	and    $0xfffffff,%edx
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff8020d4ed:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8020d4f0:	0f 82 ea 01 00 00    	jb     ffffffff8020d6e0 <_RME_Pgt_Add.isra.0+0x300>
    Szord_Dst=RME_PGT_SZORD(Pgt_Dst->Order);
ffffffff8020d4f6:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
    Szord_Src=RME_PGT_SZORD(Pgt_Src->Order);
ffffffff8020d4fa:	48 8b 57 28          	mov    0x28(%rdi),%rdx
    Szord_Dst=RME_PGT_SZORD(Pgt_Dst->Order);
ffffffff8020d4fe:	49 89 cd             	mov    %rcx,%r13
    Szord_Src=RME_PGT_SZORD(Pgt_Src->Order);
ffffffff8020d501:	48 89 d0             	mov    %rdx,%rax
    Szord_Dst=RME_PGT_SZORD(Pgt_Dst->Order);
ffffffff8020d504:	49 c1 ed 20          	shr    $0x20,%r13
    Szord_Src=RME_PGT_SZORD(Pgt_Src->Order);
ffffffff8020d508:	48 c1 e8 20          	shr    $0x20,%rax
    if(Szord_Dst>Szord_Src)
ffffffff8020d50c:	4c 39 e8             	cmp    %r13,%rax
ffffffff8020d50f:	0f 82 d7 01 00 00    	jb     ffffffff8020d6ec <_RME_Pgt_Add.isra.0+0x30c>
    if(((Pos_Dst>>RME_PGT_NMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020d515:	49 89 e8             	mov    %rbp,%r8
       ((Pos_Src>>RME_PGT_NMORD(Pgt_Src->Order))!=0U))
ffffffff8020d518:	49 89 f2             	mov    %rsi,%r10
    if(((Pos_Dst>>RME_PGT_NMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020d51b:	49 d3 e8             	shr    %cl,%r8
       ((Pos_Src>>RME_PGT_NMORD(Pgt_Src->Order))!=0U))
ffffffff8020d51e:	89 d1                	mov    %edx,%ecx
ffffffff8020d520:	49 d3 ea             	shr    %cl,%r10
    if(((Pos_Dst>>RME_PGT_NMORD(Pgt_Dst->Order))!=0U)||
ffffffff8020d523:	4d 09 d0             	or     %r10,%r8
ffffffff8020d526:	0f 85 c0 01 00 00    	jne    ffffffff8020d6ec <_RME_Pgt_Add.isra.0+0x30c>
    if(Szord_Src<RME_WORD_BIT)
ffffffff8020d52c:	48 83 f8 3f          	cmp    $0x3f,%rax
ffffffff8020d530:	77 21                	ja     ffffffff8020d553 <_RME_Pgt_Add.isra.0+0x173>
        if(RME_POW2(Szord_Src)<=(Index<<Szord_Dst))
ffffffff8020d532:	89 c1                	mov    %eax,%ecx
ffffffff8020d534:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020d539:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020d53c:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020d53f:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d542:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
ffffffff8020d547:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020d54a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d54d:	0f 83 99 01 00 00    	jae    ffffffff8020d6ec <_RME_Pgt_Add.isra.0+0x30c>
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
ffffffff8020d553:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
ffffffff8020d558:	48 89 e2             	mov    %rsp,%rdx
ffffffff8020d55b:	e8 80 da 00 00       	call   ffffffff8021afe0 <__RME_Pgt_Lookup>
        Paddr_Dst=Paddr_Src;
ffffffff8020d560:	48 8b 34 24          	mov    (%rsp),%rsi
    if(Szord_Dst<RME_WORD_BIT)
ffffffff8020d564:	49 83 fd 3f          	cmp    $0x3f,%r13
ffffffff8020d568:	0f 86 42 01 00 00    	jbe    ffffffff8020d6b0 <_RME_Pgt_Add.isra.0+0x2d0>
    if(((Flag_Dst)&(~Flag_Src))!=0U)
ffffffff8020d56e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8020d573:	48 f7 d0             	not    %rax
ffffffff8020d576:	4c 85 e0             	test   %r12,%rax
ffffffff8020d579:	0f 85 79 01 00 00    	jne    ffffffff8020d6f8 <_RME_Pgt_Add.isra.0+0x318>
    if(__RME_Pgt_Page_Map(Pgt_Dst,Paddr_Dst,Pos_Dst,Flag_Dst)<0)
ffffffff8020d57f:	4c 89 e1             	mov    %r12,%rcx
ffffffff8020d582:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020d585:	48 89 df             	mov    %rbx,%rdi
ffffffff8020d588:	e8 a3 d8 00 00       	call   ffffffff8021ae30 <__RME_Pgt_Page_Map>
    return 0;
ffffffff8020d58d:	31 c0                	xor    %eax,%eax
}
ffffffff8020d58f:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020d593:	5b                   	pop    %rbx
ffffffff8020d594:	5d                   	pop    %rbp
ffffffff8020d595:	41 5c                	pop    %r12
ffffffff8020d597:	41 5d                	pop    %r13
ffffffff8020d599:	c3                   	ret
ffffffff8020d59a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020d5a0:	48 83 c4 18          	add    $0x18,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d5a4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020d5ab:	5b                   	pop    %rbx
ffffffff8020d5ac:	5d                   	pop    %rbp
ffffffff8020d5ad:	41 5c                	pop    %r12
ffffffff8020d5af:	41 5d                	pop    %r13
ffffffff8020d5b1:	c3                   	ret
ffffffff8020d5b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d5b8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d5bb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d5bf:	4c 39 da             	cmp    %r11,%rdx
ffffffff8020d5c2:	73 dc                	jae    ffffffff8020d5a0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d5c4:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020d5cb:	00 00 00 
ffffffff8020d5ce:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d5d2:	48 01 fa             	add    %rdi,%rdx
ffffffff8020d5d5:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020d5dc:	ff 00 00 
ffffffff8020d5df:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020d5e2:	48 89 cb             	mov    %rcx,%rbx
ffffffff8020d5e5:	48 21 fb             	and    %rdi,%rbx
ffffffff8020d5e8:	4c 39 c3             	cmp    %r8,%rbx
ffffffff8020d5eb:	74 36                	je     ffffffff8020d623 <_RME_Pgt_Add.isra.0+0x243>
ffffffff8020d5ed:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d5f1:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d5f5:	0f 85 cd 00 00 00    	jne    ffffffff8020d6c8 <_RME_Pgt_Add.isra.0+0x2e8>
ffffffff8020d5fb:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020d5ff:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020d604:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020d607:	73 97                	jae    ffffffff8020d5a0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d609:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d60d:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020d611:	48 89 c3             	mov    %rax,%rbx
ffffffff8020d614:	48 8b 00             	mov    (%rax),%rax
ffffffff8020d617:	48 21 c7             	and    %rax,%rdi
ffffffff8020d61a:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020d61d:	0f 85 18 fe ff ff    	jne    ffffffff8020d43b <_RME_Pgt_Add.isra.0+0x5b>
}
ffffffff8020d623:	48 83 c4 18          	add    $0x18,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d627:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020d62e:	5b                   	pop    %rbx
ffffffff8020d62f:	5d                   	pop    %rbp
ffffffff8020d630:	41 5c                	pop    %r12
ffffffff8020d632:	41 5d                	pop    %r13
ffffffff8020d634:	c3                   	ret
ffffffff8020d635:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff8020d638:	4c 89 c8             	mov    %r9,%rax
ffffffff8020d63b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020d63f:	4c 39 d8             	cmp    %r11,%rax
ffffffff8020d642:	0f 83 58 ff ff ff    	jae    ffffffff8020d5a0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d648:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020d64f:	ff 00 00 
ffffffff8020d652:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d656:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020d65d:	00 00 00 
ffffffff8020d660:	4c 01 d0             	add    %r10,%rax
ffffffff8020d663:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020d666:	48 89 d7             	mov    %rdx,%rdi
ffffffff8020d669:	48 21 cf             	and    %rcx,%rdi
ffffffff8020d66c:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020d66f:	74 b2                	je     ffffffff8020d623 <_RME_Pgt_Add.isra.0+0x243>
ffffffff8020d671:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020d675:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020d679:	75 4d                	jne    ffffffff8020d6c8 <_RME_Pgt_Add.isra.0+0x2e8>
ffffffff8020d67b:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020d67f:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff8020d686:	49 39 d1             	cmp    %rdx,%r9
ffffffff8020d689:	0f 83 11 ff ff ff    	jae    ffffffff8020d5a0 <_RME_Pgt_Add.isra.0+0x1c0>
ffffffff8020d68f:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8020d693:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020d697:	4c 01 cf             	add    %r9,%rdi
ffffffff8020d69a:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020d69d:	48 21 c1             	and    %rax,%rcx
ffffffff8020d6a0:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8020d6a3:	0f 85 e1 fd ff ff    	jne    ffffffff8020d48a <_RME_Pgt_Add.isra.0+0xaa>
ffffffff8020d6a9:	e9 75 ff ff ff       	jmp    ffffffff8020d623 <_RME_Pgt_Add.isra.0+0x243>
ffffffff8020d6ae:	66 90                	xchg   %ax,%ax
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
ffffffff8020d6b0:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff8020d6b5:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020d6b8:	48 d3 e6             	shl    %cl,%rsi
ffffffff8020d6bb:	48 03 34 24          	add    (%rsp),%rsi
ffffffff8020d6bf:	e9 aa fe ff ff       	jmp    ffffffff8020d56e <_RME_Pgt_Add.isra.0+0x18e>
ffffffff8020d6c4:	0f 1f 40 00          	nopl   0x0(%rax)
}
ffffffff8020d6c8:	48 83 c4 18          	add    $0x18,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8020d6cc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020d6d3:	5b                   	pop    %rbx
ffffffff8020d6d4:	5d                   	pop    %rbp
ffffffff8020d6d5:	41 5c                	pop    %r12
ffffffff8020d6d7:	41 5d                	pop    %r13
ffffffff8020d6d9:	c3                   	ret
ffffffff8020d6da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff8020d6e0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020d6e7:	e9 a3 fe ff ff       	jmp    ffffffff8020d58f <_RME_Pgt_Add.isra.0+0x1af>
        return RME_ERR_PGT_ADDR;
ffffffff8020d6ec:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020d6f3:	e9 97 fe ff ff       	jmp    ffffffff8020d58f <_RME_Pgt_Add.isra.0+0x1af>
        return RME_ERR_PGT_PERM;
ffffffff8020d6f8:	48 c7 c0 98 ff ff ff 	mov    $0xffffffffffffff98,%rax
ffffffff8020d6ff:	e9 8b fe ff ff       	jmp    ffffffff8020d58f <_RME_Pgt_Add.isra.0+0x1af>
ffffffff8020d704:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020d70b:	00 00 00 00 
ffffffff8020d70f:	90                   	nop

ffffffff8020d710 <_RME_Cpt_Add.isra.0>:
static rme_ret_t _RME_Cpt_Add(struct RME_Cap_Cpt* Cpt,
ffffffff8020d710:	48 89 d0             	mov    %rdx,%rax
ffffffff8020d713:	55                   	push   %rbp
ffffffff8020d714:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020d717:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020d718:	f6 c4 80             	test   $0x80,%ah
ffffffff8020d71b:	0f 85 ef 01 00 00    	jne    ffffffff8020d910 <_RME_Cpt_Add.isra.0+0x200>
ffffffff8020d721:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020d724:	0f 83 d6 01 00 00    	jae    ffffffff8020d900 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d72a:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020d731:	ff 00 00 
ffffffff8020d734:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d738:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020d73f:	00 00 00 
ffffffff8020d742:	48 01 f8             	add    %rdi,%rax
ffffffff8020d745:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020d748:	49 21 ca             	and    %rcx,%r10
ffffffff8020d74b:	4d 39 da             	cmp    %r11,%r10
ffffffff8020d74e:	0f 84 24 02 00 00    	je     ffffffff8020d978 <_RME_Cpt_Add.isra.0+0x268>
ffffffff8020d754:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d758:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d75c:	0f 85 0e 03 00 00    	jne    ffffffff8020da70 <_RME_Cpt_Add.isra.0+0x360>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020d762:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8020d769:	0f 85 19 02 00 00    	jne    ffffffff8020d988 <_RME_Cpt_Add.isra.0+0x278>
ffffffff8020d76f:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020d772:	0f 83 88 01 00 00    	jae    ffffffff8020d900 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d778:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020d77f:	ff 00 00 
ffffffff8020d782:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d786:	49 01 f8             	add    %rdi,%r8
ffffffff8020d789:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020d790:	00 00 00 
ffffffff8020d793:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020d796:	48 21 ce             	and    %rcx,%rsi
ffffffff8020d799:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020d79c:	0f 84 d6 01 00 00    	je     ffffffff8020d978 <_RME_Cpt_Add.isra.0+0x268>
ffffffff8020d7a2:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020d7a6:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020d7aa:	0f 85 c0 02 00 00    	jne    ffffffff8020da70 <_RME_Cpt_Add.isra.0+0x360>
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020d7b0:	f6 40 10 10          	testb  $0x10,0x10(%rax)
ffffffff8020d7b4:	0f 84 a6 02 00 00    	je     ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
    RME_CAP_CHECK(Cpt_Src,RME_CPT_FLAG_ADD_SRC);
ffffffff8020d7ba:	41 f6 40 10 08       	testb  $0x8,0x10(%r8)
ffffffff8020d7bf:	0f 84 9b 02 00 00    	je     ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020d7c5:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8020d7c9:	0f 83 31 01 00 00    	jae    ffffffff8020d900 <_RME_Cpt_Add.isra.0+0x1f0>
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020d7cf:	4d 3b 48 28          	cmp    0x28(%r8),%r9
ffffffff8020d7d3:	0f 83 27 01 00 00    	jae    ffffffff8020d900 <_RME_Cpt_Add.isra.0+0x1f0>
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020d7d9:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020d7e0:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020d7e3:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020d7e7:	4d 03 48 18          	add    0x18(%r8),%r9
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020d7eb:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020d7f2:	00 00 00 
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Src->Head.Type_Stat));
ffffffff8020d7f5:	49 8b 09             	mov    (%r9),%rcx
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020d7f8:	48 21 ce             	and    %rcx,%rsi
ffffffff8020d7fb:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020d7fe:	0f 84 74 01 00 00    	je     ffffffff8020d978 <_RME_Cpt_Add.isra.0+0x268>
    if(Type_Stat==0U)
ffffffff8020d804:	48 85 c9             	test   %rcx,%rcx
ffffffff8020d807:	0f 84 3f 03 00 00    	je     ffffffff8020db4c <_RME_Cpt_Add.isra.0+0x43c>
    Src_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020d80d:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d810:	48 c1 ee 30          	shr    $0x30,%rsi
    if(Src_Type==RME_CAP_TYPE_PGT)
ffffffff8020d814:	48 83 fe 04          	cmp    $0x4,%rsi
ffffffff8020d818:	0f 84 e2 01 00 00    	je     ffffffff8020da00 <_RME_Cpt_Add.isra.0+0x2f0>
    else if(Src_Type==RME_CAP_TYPE_KFN)
ffffffff8020d81e:	48 83 fe 01          	cmp    $0x1,%rsi
ffffffff8020d822:	0f 84 68 02 00 00    	je     ffffffff8020da90 <_RME_Cpt_Add.isra.0+0x380>
    else if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020d828:	48 83 fe 02          	cmp    $0x2,%rsi
ffffffff8020d82c:	0f 84 8e 02 00 00    	je     ffffffff8020dac0 <_RME_Cpt_Add.isra.0+0x3b0>
        if(Flag==0U)
ffffffff8020d832:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
ffffffff8020d838:	0f 84 22 02 00 00    	je     ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
        if((Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020d83e:	49 8b 79 10          	mov    0x10(%r9),%rdi
ffffffff8020d842:	48 f7 d7             	not    %rdi
ffffffff8020d845:	48 85 7c 24 18       	test   %rdi,0x18(%rsp)
ffffffff8020d84a:	0f 85 10 02 00 00    	jne    ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020d850:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020d854:	48 03 50 18          	add    0x18(%rax),%rdx
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff8020d858:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020d85b:	48 85 c0             	test   %rax,%rax
ffffffff8020d85e:	0f 85 dc 02 00 00    	jne    ffffffff8020db40 <_RME_Cpt_Add.isra.0+0x430>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020d864:	48 bf 00 00 00 00 01 	movabs $0x100000000,%rdi
ffffffff8020d86b:	00 00 00 
ffffffff8020d86e:	f0 48 0f b1 3a       	lock cmpxchg %rdi,(%rdx)
ffffffff8020d873:	40 0f 94 c7          	sete   %dil
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff8020d877:	40 84 ff             	test   %dil,%dil
ffffffff8020d87a:	0f 84 c0 02 00 00    	je     ffffffff8020db40 <_RME_Cpt_Add.isra.0+0x430>
ffffffff8020d880:	48 8b 05 89 87 01 00 	mov    0x18789(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020d887:	48 83 ee 01          	sub    $0x1,%rsi
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff8020d88b:	48 89 42 20          	mov    %rax,0x20(%rdx)
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
ffffffff8020d88f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff8020d894:	48 89 42 10          	mov    %rax,0x10(%rdx)
ffffffff8020d898:	49 8b 41 18          	mov    0x18(%r9),%rax
ffffffff8020d89c:	48 89 42 18          	mov    %rax,0x18(%rdx)
ffffffff8020d8a0:	49 8b 41 28          	mov    0x28(%r9),%rax
ffffffff8020d8a4:	48 89 42 28          	mov    %rax,0x28(%rdx)
ffffffff8020d8a8:	49 8b 41 30          	mov    0x30(%r9),%rax
ffffffff8020d8ac:	48 89 42 30          	mov    %rax,0x30(%rdx)
ffffffff8020d8b0:	49 8b 41 38          	mov    0x38(%r9),%rax
ffffffff8020d8b4:	48 89 42 38          	mov    %rax,0x38(%rdx)
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020d8b8:	48 83 fe 01          	cmp    $0x1,%rsi
ffffffff8020d8bc:	0f 86 be 01 00 00    	jbe    ffffffff8020da80 <_RME_Cpt_Add.isra.0+0x370>
        Capobj_Dst->Head.Root_Ref=RME_CAP_CONV_ROOT(Capobj_Src,rme_ptr_t);
ffffffff8020d8c2:	49 8b 01             	mov    (%r9),%rax
ffffffff8020d8c5:	85 c0                	test   %eax,%eax
ffffffff8020d8c7:	74 04                	je     ffffffff8020d8cd <_RME_Cpt_Add.isra.0+0x1bd>
ffffffff8020d8c9:	4d 8b 49 08          	mov    0x8(%r9),%r9
ffffffff8020d8cd:	4c 89 4a 08          	mov    %r9,0x8(%rdx)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020d8d1:	be 01 00 00 00       	mov    $0x1,%esi
        RME_FETCH_ADD(&(((volatile struct RME_Cap_Struct*)
ffffffff8020d8d6:	48 8b 42 08          	mov    0x8(%rdx),%rax
ffffffff8020d8da:	f0 48 0f c1 70 08    	lock xadd %rsi,0x8(%rax)
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff8020d8e0:	48 b8 00 00 00 00 00 	movabs $0xffff000000000000,%rax
ffffffff8020d8e7:	00 ff ff 
ffffffff8020d8ea:	48 21 c8             	and    %rcx,%rax
ffffffff8020d8ed:	48 83 c8 01          	or     $0x1,%rax
ffffffff8020d8f1:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff8020d8f4:	31 c0                	xor    %eax,%eax
}
ffffffff8020d8f6:	5b                   	pop    %rbx
ffffffff8020d8f7:	5d                   	pop    %rbp
ffffffff8020d8f8:	c3                   	ret
ffffffff8020d8f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020d900:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020d907:	5b                   	pop    %rbx
ffffffff8020d908:	5d                   	pop    %rbp
ffffffff8020d909:	c3                   	ret
ffffffff8020d90a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020d910:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d913:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020d917:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020d91a:	73 e4                	jae    ffffffff8020d900 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d91c:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020d923:	ff 00 00 
ffffffff8020d926:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020d92a:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020d931:	00 00 00 
ffffffff8020d934:	48 01 f9             	add    %rdi,%rcx
ffffffff8020d937:	4c 8b 11             	mov    (%rcx),%r10
ffffffff8020d93a:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020d93d:	4c 21 dd             	and    %r11,%rbp
ffffffff8020d940:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020d943:	74 33                	je     ffffffff8020d978 <_RME_Cpt_Add.isra.0+0x268>
ffffffff8020d945:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020d949:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020d94d:	0f 85 1d 01 00 00    	jne    ffffffff8020da70 <_RME_Cpt_Add.isra.0+0x360>
ffffffff8020d953:	4c 8b 51 28          	mov    0x28(%rcx),%r10
ffffffff8020d957:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020d95c:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020d95f:	73 9f                	jae    ffffffff8020d900 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d961:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020d965:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020d969:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020d96c:	49 21 cb             	and    %rcx,%r11
ffffffff8020d96f:	49 39 db             	cmp    %rbx,%r11
ffffffff8020d972:	0f 85 dc fd ff ff    	jne    ffffffff8020d754 <_RME_Cpt_Add.isra.0+0x44>
ffffffff8020d978:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020d97f:	5b                   	pop    %rbx
ffffffff8020d980:	5d                   	pop    %rbp
ffffffff8020d981:	c3                   	ret
ffffffff8020d982:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020d988:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020d98b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020d98f:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020d992:	0f 83 68 ff ff ff    	jae    ffffffff8020d900 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d998:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020d99f:	00 00 00 
ffffffff8020d9a2:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020d9a6:	48 01 f9             	add    %rdi,%rcx
ffffffff8020d9a9:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020d9b0:	ff 00 00 
ffffffff8020d9b3:	48 8b 31             	mov    (%rcx),%rsi
ffffffff8020d9b6:	49 89 f3             	mov    %rsi,%r11
ffffffff8020d9b9:	49 21 fb             	and    %rdi,%r11
ffffffff8020d9bc:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020d9bf:	74 b7                	je     ffffffff8020d978 <_RME_Cpt_Add.isra.0+0x268>
ffffffff8020d9c1:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020d9c5:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020d9c9:	0f 85 a1 00 00 00    	jne    ffffffff8020da70 <_RME_Cpt_Add.isra.0+0x360>
ffffffff8020d9cf:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020d9d3:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8020d9da:	49 39 f0             	cmp    %rsi,%r8
ffffffff8020d9dd:	0f 83 1d ff ff ff    	jae    ffffffff8020d900 <_RME_Cpt_Add.isra.0+0x1f0>
ffffffff8020d9e3:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020d9e7:	4c 03 41 18          	add    0x18(%rcx),%r8
ffffffff8020d9eb:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020d9ee:	48 21 cf             	and    %rcx,%rdi
ffffffff8020d9f1:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8020d9f4:	0f 85 a8 fd ff ff    	jne    ffffffff8020d7a2 <_RME_Cpt_Add.isra.0+0x92>
ffffffff8020d9fa:	e9 79 ff ff ff       	jmp    ffffffff8020d978 <_RME_Cpt_Add.isra.0+0x268>
ffffffff8020d9ff:	90                   	nop
        if(RME_PGT_FLAG_HIGH(Flag)>RME_PGT_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020da00:	4c 8b 54 24 18       	mov    0x18(%rsp),%r10
ffffffff8020da05:	49 8b 79 10          	mov    0x10(%r9),%rdi
ffffffff8020da09:	49 c1 ea 24          	shr    $0x24,%r10
ffffffff8020da0d:	48 c1 ef 24          	shr    $0x24,%rdi
ffffffff8020da11:	4c 39 d7             	cmp    %r10,%rdi
ffffffff8020da14:	72 4a                	jb     ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
        if(RME_PGT_FLAG_LOW(Flag)<RME_PGT_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020da16:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
ffffffff8020da1b:	49 8b 79 10          	mov    0x10(%r9),%rdi
ffffffff8020da1f:	49 c1 e8 08          	shr    $0x8,%r8
ffffffff8020da23:	48 c1 ef 08          	shr    $0x8,%rdi
ffffffff8020da27:	41 81 e0 ff ff ff 0f 	and    $0xfffffff,%r8d
ffffffff8020da2e:	81 e7 ff ff ff 0f    	and    $0xfffffff,%edi
        if(RME_PGT_FLAG_HIGH(Flag)<RME_PGT_FLAG_LOW(Flag))
ffffffff8020da34:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020da37:	72 27                	jb     ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
ffffffff8020da39:	4d 39 c2             	cmp    %r8,%r10
ffffffff8020da3c:	72 22                	jb     ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
        if(RME_PGT_FLAG_FLAG(Flag)==0U)
ffffffff8020da3e:	80 7c 24 18 00       	cmpb   $0x0,0x18(%rsp)
ffffffff8020da43:	74 1b                	je     ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
        if((RME_PGT_FLAG_FLAG(Flag)&(~RME_PGT_FLAG_FLAG(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020da45:	49 8b 79 10          	mov    0x10(%r9),%rdi
ffffffff8020da49:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff8020da4d:	48 f7 d7             	not    %rdi
ffffffff8020da50:	48 23 7c 24 18       	and    0x18(%rsp),%rdi
ffffffff8020da55:	40 84 ff             	test   %dil,%dil
ffffffff8020da58:	0f 84 f2 fd ff ff    	je     ffffffff8020d850 <_RME_Cpt_Add.isra.0+0x140>
ffffffff8020da5e:	66 90                	xchg   %ax,%ax
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020da60:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020da67:	e9 9b fe ff ff       	jmp    ffffffff8020d907 <_RME_Cpt_Add.isra.0+0x1f7>
ffffffff8020da6c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020da70:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020da77:	5b                   	pop    %rbx
ffffffff8020da78:	5d                   	pop    %rbp
ffffffff8020da79:	c3                   	ret
ffffffff8020da7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Capobj_Dst->Head.Root_Ref=0U;
ffffffff8020da80:	48 c7 42 08 00 00 00 	movq   $0x0,0x8(%rdx)
ffffffff8020da87:	00 
ffffffff8020da88:	e9 53 fe ff ff       	jmp    ffffffff8020d8e0 <_RME_Cpt_Add.isra.0+0x1d0>
ffffffff8020da8d:	0f 1f 00             	nopl   (%rax)
        if(RME_KFN_FLAG_HIGH(Flag)>RME_KFN_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020da90:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
ffffffff8020da95:	49 8b 79 10          	mov    0x10(%r9),%rdi
ffffffff8020da99:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff8020da9d:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff8020daa1:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020daa4:	72 ba                	jb     ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
        if(RME_KFN_FLAG_LOW(Flag)<RME_KFN_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020daa6:	49 8b 79 10          	mov    0x10(%r9),%rdi
ffffffff8020daaa:	44 8b 54 24 18       	mov    0x18(%rsp),%r10d
        if(RME_KFN_FLAG_HIGH(Flag)<RME_KFN_FLAG_LOW(Flag))
ffffffff8020daaf:	3b 7c 24 18          	cmp    0x18(%rsp),%edi
ffffffff8020dab3:	77 ab                	ja     ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
ffffffff8020dab5:	4d 39 d0             	cmp    %r10,%r8
ffffffff8020dab8:	0f 83 92 fd ff ff    	jae    ffffffff8020d850 <_RME_Cpt_Add.isra.0+0x140>
ffffffff8020dabe:	eb a0                	jmp    ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020dac0:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020dac5:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020daca:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
ffffffff8020dad1:	ff ff ff 
ffffffff8020dad4:	48 23 4c 24 18       	and    0x18(%rsp),%rcx
ffffffff8020dad9:	48 c1 e8 20          	shr    $0x20,%rax
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020dadd:	48 c1 e2 20          	shl    $0x20,%rdx
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020dae1:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff8020dae5:	48 09 c8             	or     %rcx,%rax
        if(Kom_End<=Kom_Begin)
ffffffff8020dae8:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020daeb:	0f 83 6f ff ff ff    	jae    ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020daf1:	49 8b 49 28          	mov    0x28(%r9),%rcx
ffffffff8020daf5:	48 01 ca             	add    %rcx,%rdx
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020daf8:	49 8b 49 28          	mov    0x28(%r9),%rcx
ffffffff8020dafc:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020daff:	0f 82 5b ff ff ff    	jb     ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020db05:	49 8b 71 28          	mov    0x28(%r9),%rsi
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020db09:	49 8b 49 28          	mov    0x28(%r9),%rcx
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020db0d:	48 01 f0             	add    %rsi,%rax
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020db10:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020db13:	0f 82 47 ff ff ff    	jb     ffffffff8020da60 <_RME_Cpt_Add.isra.0+0x350>
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020db19:	49 8b 49 28          	mov    0x28(%r9),%rcx
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020db1d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020db24:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020db27:	0f 82 da fd ff ff    	jb     ffffffff8020d907 <_RME_Cpt_Add.isra.0+0x1f7>
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->End<(Kom_End-1U))
ffffffff8020db2d:	49 8b 51 30          	mov    0x30(%r9),%rdx
            return RME_ERR_CPT_FLAG;
ffffffff8020db31:	e9 d1 fd ff ff       	jmp    ffffffff8020d907 <_RME_Cpt_Add.isra.0+0x1f7>
ffffffff8020db36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020db3d:	00 00 00 
        return RME_ERR_CPT_EXIST;
ffffffff8020db40:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020db47:	e9 bb fd ff ff       	jmp    ffffffff8020d907 <_RME_Cpt_Add.isra.0+0x1f7>
        return RME_ERR_CPT_NULL;
ffffffff8020db4c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020db53:	e9 af fd ff ff       	jmp    ffffffff8020d907 <_RME_Cpt_Add.isra.0+0x1f7>
ffffffff8020db58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020db5f:	00 

ffffffff8020db60 <_RME_Run_Notif>:
{
ffffffff8020db60:	41 54                	push   %r12
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8020db62:	48 8d 47 10          	lea    0x10(%rdi),%rax
{
ffffffff8020db66:	55                   	push   %rbp
ffffffff8020db67:	53                   	push   %rbx
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8020db68:	48 39 47 10          	cmp    %rax,0x10(%rdi)
ffffffff8020db6c:	74 42                	je     ffffffff8020dbb0 <_RME_Run_Notif+0x50>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff8020db6e:	48 8b 5f 70          	mov    0x70(%rdi),%rbx
ffffffff8020db72:	48 85 db             	test   %rbx,%rbx
ffffffff8020db75:	74 31                	je     ffffffff8020dba8 <_RME_Run_Notif+0x48>
    Thd_Sig=Cap_Sig->Thd;
ffffffff8020db77:	48 8b 6b 30          	mov    0x30(%rbx),%rbp
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff8020db7b:	48 85 ed             	test   %rbp,%rbp
ffffffff8020db7e:	74 0e                	je     ffffffff8020db8e <_RME_Run_Notif+0x2e>
        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff8020db80:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff8020db84:	e8 b6 dc ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020db89:	49 39 c4             	cmp    %rax,%r12
ffffffff8020db8c:	74 62                	je     ffffffff8020dbf0 <_RME_Run_Notif+0x90>
ffffffff8020db8e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020db93:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff8020db99:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff8020dba0:	ff ff 7f 
ffffffff8020dba3:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dba6:	72 35                	jb     ffffffff8020dbdd <_RME_Run_Notif+0x7d>
}
ffffffff8020dba8:	5b                   	pop    %rbx
ffffffff8020dba9:	5d                   	pop    %rbp
ffffffff8020dbaa:	41 5c                	pop    %r12
ffffffff8020dbac:	c3                   	ret
ffffffff8020dbad:	0f 1f 00             	nopl   (%rax)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff8020dbb0:	48 8b 57 68          	mov    0x68(%rdi),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff8020dbb4:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
ffffffff8020dbbb:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff8020dbbf:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff8020dbc6:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    New->Next=Next;
ffffffff8020dbcb:	66 48 0f 6e c9       	movq   %rcx,%xmm1
ffffffff8020dbd0:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff8020dbd4:	0f 11 47 10          	movups %xmm0,0x10(%rdi)
    Prev->Next=New;
ffffffff8020dbd8:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff8020dbdb:	eb 91                	jmp    ffffffff8020db6e <_RME_Run_Notif+0xe>
ffffffff8020dbdd:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020dbe4:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
}
ffffffff8020dbea:	eb bc                	jmp    ffffffff8020dba8 <_RME_Run_Notif+0x48>
ffffffff8020dbec:	0f 1f 40 00          	nopl   0x0(%rax)
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff8020dbf0:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff8020dbf7:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8020dbfc:	e8 7f d6 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff8020dc01:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff8020dc06:	74 68                	je     ffffffff8020dc70 <_RME_Run_Notif+0x110>
    Prio=Thd->Sched.Prio;
ffffffff8020dc08:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff8020dc0c:	48 8b 45 28          	mov    0x28(%rbp),%rax
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff8020dc10:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff8020dc17:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8020dc18:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020dc1b:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8020dc1f:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff8020dc23:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff8020dc28:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff8020dc2c:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020dc31:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff8020dc34:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020dc38:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff8020dc3c:	66 48 0f 6e d2       	movq   %rdx,%xmm2
ffffffff8020dc41:	66 0f 6c c2          	punpcklqdq %xmm2,%xmm0
ffffffff8020dc45:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff8020dc49:	48 89 2a             	mov    %rbp,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8020dc4c:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020dc51:	48 d3 e2             	shl    %cl,%rdx
ffffffff8020dc54:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        Cap_Sig->Thd=RME_NULL;
ffffffff8020dc59:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff8020dc60:	00 
ffffffff8020dc61:	e9 42 ff ff ff       	jmp    ffffffff8020dba8 <_RME_Run_Notif+0x48>
ffffffff8020dc66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020dc6d:	00 00 00 
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff8020dc70:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff8020dc77:	00 
            _RME_Run_Notif(Thd_Sig);
ffffffff8020dc78:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020dc7b:	e8 e0 fe ff ff       	call   ffffffff8020db60 <_RME_Run_Notif>
ffffffff8020dc80:	eb d7                	jmp    ffffffff8020dc59 <_RME_Run_Notif+0xf9>
ffffffff8020dc82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020dc89:	00 00 00 00 
ffffffff8020dc8d:	0f 1f 00             	nopl   (%rax)

ffffffff8020dc90 <RME_Int_Print>:
{
ffffffff8020dc90:	f3 0f 1e fa          	endbr64
ffffffff8020dc94:	41 57                	push   %r15
ffffffff8020dc96:	41 56                	push   %r14
ffffffff8020dc98:	41 55                	push   %r13
ffffffff8020dc9a:	41 54                	push   %r12
ffffffff8020dc9c:	53                   	push   %rbx
    if(Int==0)
ffffffff8020dc9d:	48 85 ff             	test   %rdi,%rdi
ffffffff8020dca0:	0f 84 ea 00 00 00    	je     ffffffff8020dd90 <RME_Int_Print+0x100>
ffffffff8020dca6:	49 89 fe             	mov    %rdi,%r14
    if(Int<0)
ffffffff8020dca9:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        Num=0;
ffffffff8020dcaf:	bf 00 00 00 00       	mov    $0x0,%edi
    if(Int<0)
ffffffff8020dcb4:	0f 88 b6 00 00 00    	js     ffffffff8020dd70 <RME_Int_Print+0xe0>
        Iter/=10;
ffffffff8020dcba:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
ffffffff8020dcc1:	cc cc cc 
ffffffff8020dcc4:	49 f7 e6             	mul    %r14
        if(Iter!=0)
ffffffff8020dcc7:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020dcca:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff8020dcce:	0f 84 dc 00 00 00    	je     ffffffff8020ddb0 <RME_Int_Print+0x120>
        Count++;
ffffffff8020dcd4:	41 bf 01 00 00 00    	mov    $0x1,%r15d
    Div=1;
ffffffff8020dcda:	bb 01 00 00 00       	mov    $0x1,%ebx
        Iter/=10;
ffffffff8020dcdf:	48 be 67 66 66 66 66 	movabs $0x6666666666666667,%rsi
ffffffff8020dce6:	66 66 66 
ffffffff8020dce9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020dcf0:	48 89 c8             	mov    %rcx,%rax
            Div*=10;
ffffffff8020dcf3:	48 8d 1c 9b          	lea    (%rbx,%rbx,4),%rbx
        Count++;
ffffffff8020dcf7:	49 83 c7 01          	add    $0x1,%r15
        Iter/=10;
ffffffff8020dcfb:	48 f7 ee             	imul   %rsi
ffffffff8020dcfe:	48 89 c8             	mov    %rcx,%rax
            Div*=10;
ffffffff8020dd01:	48 01 db             	add    %rbx,%rbx
        Iter/=10;
ffffffff8020dd04:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020dd08:	48 c1 fa 02          	sar    $0x2,%rdx
        if(Iter!=0)
ffffffff8020dd0c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020dd0f:	48 29 c1             	sub    %rax,%rcx
ffffffff8020dd12:	75 dc                	jne    ffffffff8020dcf0 <RME_Int_Print+0x60>
        Div/=10;
ffffffff8020dd14:	49 bc 67 66 66 66 66 	movabs $0x6666666666666667,%r12
ffffffff8020dd1b:	66 66 66 
    Num+=Count;
ffffffff8020dd1e:	4e 8d 2c 3f          	lea    (%rdi,%r15,1),%r13
    while(Count>0)
ffffffff8020dd22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Count--;
ffffffff8020dd28:	4c 89 f0             	mov    %r14,%rax
ffffffff8020dd2b:	49 83 ef 01          	sub    $0x1,%r15
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020dd2f:	48 99                	cqto
ffffffff8020dd31:	48 f7 fb             	idiv   %rbx
ffffffff8020dd34:	83 c0 30             	add    $0x30,%eax
ffffffff8020dd37:	49 89 d6             	mov    %rdx,%r14
ffffffff8020dd3a:	0f be f8             	movsbl %al,%edi
ffffffff8020dd3d:	e8 6e b1 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
        Div/=10;
ffffffff8020dd42:	48 89 d8             	mov    %rbx,%rax
ffffffff8020dd45:	49 f7 ec             	imul   %r12
ffffffff8020dd48:	48 89 d8             	mov    %rbx,%rax
ffffffff8020dd4b:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020dd4f:	48 c1 fa 02          	sar    $0x2,%rdx
ffffffff8020dd53:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020dd56:	48 29 c3             	sub    %rax,%rbx
    while(Count>0)
ffffffff8020dd59:	4d 85 ff             	test   %r15,%r15
ffffffff8020dd5c:	75 ca                	jne    ffffffff8020dd28 <RME_Int_Print+0x98>
}
ffffffff8020dd5e:	5b                   	pop    %rbx
ffffffff8020dd5f:	4c 89 e8             	mov    %r13,%rax
ffffffff8020dd62:	41 5c                	pop    %r12
ffffffff8020dd64:	41 5d                	pop    %r13
ffffffff8020dd66:	41 5e                	pop    %r14
ffffffff8020dd68:	41 5f                	pop    %r15
ffffffff8020dd6a:	c3                   	ret
ffffffff8020dd6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Putchar('-');
ffffffff8020dd70:	bf 2d 00 00 00       	mov    $0x2d,%edi
        Abs=-Int;
ffffffff8020dd75:	49 f7 de             	neg    %r14
ffffffff8020dd78:	41 bd 02 00 00 00    	mov    $0x2,%r13d
        __RME_Putchar('-');
ffffffff8020dd7e:	e8 2d b1 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
        Num=1;
ffffffff8020dd83:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff8020dd88:	e9 2d ff ff ff       	jmp    ffffffff8020dcba <RME_Int_Print+0x2a>
ffffffff8020dd8d:	0f 1f 00             	nopl   (%rax)
        return 1;
ffffffff8020dd90:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        __RME_Putchar('0');
ffffffff8020dd96:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020dd9b:	e8 10 b1 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
}
ffffffff8020dda0:	5b                   	pop    %rbx
ffffffff8020dda1:	4c 89 e8             	mov    %r13,%rax
ffffffff8020dda4:	41 5c                	pop    %r12
ffffffff8020dda6:	41 5d                	pop    %r13
ffffffff8020dda8:	41 5e                	pop    %r14
ffffffff8020ddaa:	41 5f                	pop    %r15
ffffffff8020ddac:	c3                   	ret
ffffffff8020ddad:	0f 1f 00             	nopl   (%rax)
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020ddb0:	41 8d 7e 30          	lea    0x30(%r14),%edi
ffffffff8020ddb4:	40 0f be ff          	movsbl %dil,%edi
ffffffff8020ddb8:	e8 f3 b0 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    while(Count>0)
ffffffff8020ddbd:	eb 9f                	jmp    ffffffff8020dd5e <RME_Int_Print+0xce>
ffffffff8020ddbf:	90                   	nop

ffffffff8020ddc0 <RME_Hex_Print>:
{
ffffffff8020ddc0:	f3 0f 1e fa          	endbr64
ffffffff8020ddc4:	41 54                	push   %r12
ffffffff8020ddc6:	55                   	push   %rbp
ffffffff8020ddc7:	53                   	push   %rbx
    if(Uint==0U)
ffffffff8020ddc8:	48 85 ff             	test   %rdi,%rdi
ffffffff8020ddcb:	0f 84 7f 00 00 00    	je     ffffffff8020de50 <RME_Hex_Print+0x90>
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020ddd1:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020ddd4:	48 89 fd             	mov    %rdi,%rbp
    Iter=Uint;
ffffffff8020ddd7:	48 89 f8             	mov    %rdi,%rax
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020ddda:	41 bc 10 00 00 00    	mov    $0x10,%r12d
ffffffff8020dde0:	48 c1 ea 3c          	shr    $0x3c,%rdx
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020dde4:	bb 10 00 00 00       	mov    $0x10,%ebx
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020dde9:	75 32                	jne    ffffffff8020de1d <RME_Hex_Print+0x5d>
ffffffff8020ddeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        Iter<<=4;
ffffffff8020ddf0:	48 c1 e0 04          	shl    $0x4,%rax
        Count++;
ffffffff8020ddf4:	48 83 c2 01          	add    $0x1,%rdx
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020ddf8:	48 89 c6             	mov    %rax,%rsi
ffffffff8020ddfb:	48 c1 ee 3c          	shr    $0x3c,%rsi
ffffffff8020ddff:	74 ef                	je     ffffffff8020ddf0 <RME_Hex_Print+0x30>
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020de01:	bb 10 00 00 00       	mov    $0x10,%ebx
    while(Count>0U)
ffffffff8020de06:	48 29 d3             	sub    %rdx,%rbx
ffffffff8020de09:	74 65                	je     ffffffff8020de70 <RME_Hex_Print+0xb0>
    return (rme_cnt_t)Num;
ffffffff8020de0b:	49 89 dc             	mov    %rbx,%r12
ffffffff8020de0e:	eb 0d                	jmp    ffffffff8020de1d <RME_Hex_Print+0x5d>
            __RME_Putchar((rme_s8_t)Iter+'0');
ffffffff8020de10:	8d 78 30             	lea    0x30(%rax),%edi
ffffffff8020de13:	e8 98 b0 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    while(Count>0U)
ffffffff8020de18:	48 85 db             	test   %rbx,%rbx
ffffffff8020de1b:	74 27                	je     ffffffff8020de44 <RME_Hex_Print+0x84>
        Count--;
ffffffff8020de1d:	48 83 eb 01          	sub    $0x1,%rbx
        Iter=(Uint>>(Count<<2U))&0x0FU;
ffffffff8020de21:	48 89 e8             	mov    %rbp,%rax
ffffffff8020de24:	8d 0c 9d 00 00 00 00 	lea    0x0(,%rbx,4),%ecx
ffffffff8020de2b:	48 d3 e8             	shr    %cl,%rax
ffffffff8020de2e:	83 e0 0f             	and    $0xf,%eax
        if(Iter<10U)
ffffffff8020de31:	48 83 f8 09          	cmp    $0x9,%rax
ffffffff8020de35:	76 d9                	jbe    ffffffff8020de10 <RME_Hex_Print+0x50>
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
ffffffff8020de37:	8d 78 37             	lea    0x37(%rax),%edi
ffffffff8020de3a:	e8 71 b0 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    while(Count>0U)
ffffffff8020de3f:	48 85 db             	test   %rbx,%rbx
ffffffff8020de42:	75 d9                	jne    ffffffff8020de1d <RME_Hex_Print+0x5d>
}
ffffffff8020de44:	4c 89 e0             	mov    %r12,%rax
ffffffff8020de47:	5b                   	pop    %rbx
ffffffff8020de48:	5d                   	pop    %rbp
ffffffff8020de49:	41 5c                	pop    %r12
ffffffff8020de4b:	c3                   	ret
ffffffff8020de4c:	0f 1f 40 00          	nopl   0x0(%rax)
        return 1;
ffffffff8020de50:	41 bc 01 00 00 00    	mov    $0x1,%r12d
        __RME_Putchar('0');
ffffffff8020de56:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020de5b:	e8 50 b0 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
}
ffffffff8020de60:	4c 89 e0             	mov    %r12,%rax
ffffffff8020de63:	5b                   	pop    %rbx
ffffffff8020de64:	5d                   	pop    %rbp
ffffffff8020de65:	41 5c                	pop    %r12
ffffffff8020de67:	c3                   	ret
ffffffff8020de68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020de6f:	00 
    while(Count>0U)
ffffffff8020de70:	45 31 e4             	xor    %r12d,%r12d
    return (rme_cnt_t)Num;
ffffffff8020de73:	eb cf                	jmp    ffffffff8020de44 <RME_Hex_Print+0x84>
ffffffff8020de75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020de7c:	00 00 00 00 

ffffffff8020de80 <RME_Str_Print>:
{
ffffffff8020de80:	f3 0f 1e fa          	endbr64
ffffffff8020de84:	55                   	push   %rbp
ffffffff8020de85:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020de88:	53                   	push   %rbx
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020de89:	31 db                	xor    %ebx,%ebx
{
ffffffff8020de8b:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020de8f:	eb 19                	jmp    ffffffff8020deaa <RME_Str_Print+0x2a>
ffffffff8020de91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count++]);
ffffffff8020de98:	e8 13 b0 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020de9d:	48 83 c3 02          	add    $0x2,%rbx
ffffffff8020dea1:	48 81 fb 00 01 00 00 	cmp    $0x100,%rbx
ffffffff8020dea8:	74 0a                	je     ffffffff8020deb4 <RME_Str_Print+0x34>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020deaa:	0f be 7c 1d 00       	movsbl 0x0(%rbp,%rbx,1),%edi
ffffffff8020deaf:	40 84 ff             	test   %dil,%dil
ffffffff8020deb2:	75 e4                	jne    ffffffff8020de98 <RME_Str_Print+0x18>
}
ffffffff8020deb4:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020deb8:	48 89 d8             	mov    %rbx,%rax
ffffffff8020debb:	5b                   	pop    %rbx
ffffffff8020debc:	5d                   	pop    %rbp
ffffffff8020debd:	c3                   	ret
ffffffff8020debe:	66 90                	xchg   %ax,%ax

ffffffff8020dec0 <RME_Log>:
{
ffffffff8020dec0:	f3 0f 1e fa          	endbr64
ffffffff8020dec4:	41 57                	push   %r15
ffffffff8020dec6:	49 c7 c7 10 c9 21 80 	mov    $0xffffffff8021c910,%r15
ffffffff8020decd:	41 56                	push   %r14
ffffffff8020decf:	49 c7 c6 10 ca 21 80 	mov    $0xffffffff8021ca10,%r14
ffffffff8020ded6:	41 55                	push   %r13
ffffffff8020ded8:	49 89 d5             	mov    %rdx,%r13
ffffffff8020dedb:	41 54                	push   %r12
ffffffff8020dedd:	55                   	push   %rbp
ffffffff8020dede:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020dee1:	53                   	push   %rbx
ffffffff8020dee2:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020dee5:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020dee9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
ffffffff8020deee:	eb 0e                	jmp    ffffffff8020defe <RME_Log+0x3e>
        __RME_Putchar(String[Count++]);
ffffffff8020def0:	e8 bb af 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020def5:	49 83 c7 02          	add    $0x2,%r15
ffffffff8020def9:	4d 39 fe             	cmp    %r15,%r14
ffffffff8020defc:	74 09                	je     ffffffff8020df07 <RME_Log+0x47>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020defe:	41 0f be 3f          	movsbl (%r15),%edi
ffffffff8020df02:	40 84 ff             	test   %dil,%dil
ffffffff8020df05:	75 e9                	jne    ffffffff8020def0 <RME_Log+0x30>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020df07:	4c 8d b5 00 01 00 00 	lea    0x100(%rbp),%r14
ffffffff8020df0e:	eb 0e                	jmp    ffffffff8020df1e <RME_Log+0x5e>
        __RME_Putchar(String[Count++]);
ffffffff8020df10:	e8 9b af 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020df15:	48 83 c5 02          	add    $0x2,%rbp
ffffffff8020df19:	49 39 ee             	cmp    %rbp,%r14
ffffffff8020df1c:	74 09                	je     ffffffff8020df27 <RME_Log+0x67>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020df1e:	0f be 7d 00          	movsbl 0x0(%rbp),%edi
ffffffff8020df22:	40 84 ff             	test   %dil,%dil
ffffffff8020df25:	75 e9                	jne    ffffffff8020df10 <RME_Log+0x50>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020df27:	49 c7 c6 e8 ca 21 80 	mov    $0xffffffff8021cae8,%r14
ffffffff8020df2e:	48 c7 c5 e8 cb 21 80 	mov    $0xffffffff8021cbe8,%rbp
ffffffff8020df35:	eb 17                	jmp    ffffffff8020df4e <RME_Log+0x8e>
ffffffff8020df37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020df3e:	00 00 
        __RME_Putchar(String[Count++]);
ffffffff8020df40:	e8 6b af 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020df45:	49 83 c6 02          	add    $0x2,%r14
ffffffff8020df49:	4c 39 f5             	cmp    %r14,%rbp
ffffffff8020df4c:	74 09                	je     ffffffff8020df57 <RME_Log+0x97>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020df4e:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020df52:	40 84 ff             	test   %dil,%dil
ffffffff8020df55:	75 e9                	jne    ffffffff8020df40 <RME_Log+0x80>
    if(Int==0)
ffffffff8020df57:	48 85 db             	test   %rbx,%rbx
ffffffff8020df5a:	0f 84 a0 01 00 00    	je     ffffffff8020e100 <RME_Log+0x240>
    if(Int<0)
ffffffff8020df60:	0f 88 82 01 00 00    	js     ffffffff8020e0e8 <RME_Log+0x228>
        Iter/=10;
ffffffff8020df66:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
ffffffff8020df6d:	cc cc cc 
ffffffff8020df70:	48 f7 e3             	mul    %rbx
        if(Iter!=0)
ffffffff8020df73:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020df76:	48 c1 ee 03          	shr    $0x3,%rsi
ffffffff8020df7a:	0f 84 8f 01 00 00    	je     ffffffff8020e10f <RME_Log+0x24f>
    Div=1;
ffffffff8020df80:	bd 01 00 00 00       	mov    $0x1,%ebp
        Count++;
ffffffff8020df85:	41 bc 01 00 00 00    	mov    $0x1,%r12d
        Iter/=10;
ffffffff8020df8b:	48 bf 67 66 66 66 66 	movabs $0x6666666666666667,%rdi
ffffffff8020df92:	66 66 66 
ffffffff8020df95:	0f 1f 00             	nopl   (%rax)
ffffffff8020df98:	48 89 f0             	mov    %rsi,%rax
            Div*=10;
ffffffff8020df9b:	48 8d 6c ad 00       	lea    0x0(%rbp,%rbp,4),%rbp
        Count++;
ffffffff8020dfa0:	49 83 c4 01          	add    $0x1,%r12
        Iter/=10;
ffffffff8020dfa4:	48 f7 ef             	imul   %rdi
ffffffff8020dfa7:	48 89 f0             	mov    %rsi,%rax
            Div*=10;
ffffffff8020dfaa:	48 01 ed             	add    %rbp,%rbp
        Iter/=10;
ffffffff8020dfad:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020dfb1:	48 c1 fa 02          	sar    $0x2,%rdx
        if(Iter!=0)
ffffffff8020dfb5:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020dfb8:	48 29 c6             	sub    %rax,%rsi
ffffffff8020dfbb:	75 db                	jne    ffffffff8020df98 <RME_Log+0xd8>
        Div/=10;
ffffffff8020dfbd:	49 be 67 66 66 66 66 	movabs $0x6666666666666667,%r14
ffffffff8020dfc4:	66 66 66 
ffffffff8020dfc7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020dfce:	00 00 
        Count--;
ffffffff8020dfd0:	48 89 d8             	mov    %rbx,%rax
ffffffff8020dfd3:	49 83 ec 01          	sub    $0x1,%r12
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020dfd7:	48 99                	cqto
ffffffff8020dfd9:	48 f7 fd             	idiv   %rbp
ffffffff8020dfdc:	83 c0 30             	add    $0x30,%eax
ffffffff8020dfdf:	48 89 d3             	mov    %rdx,%rbx
ffffffff8020dfe2:	0f be f8             	movsbl %al,%edi
ffffffff8020dfe5:	e8 c6 ae 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
        Div/=10;
ffffffff8020dfea:	48 89 e8             	mov    %rbp,%rax
ffffffff8020dfed:	49 f7 ee             	imul   %r14
ffffffff8020dff0:	48 89 e8             	mov    %rbp,%rax
ffffffff8020dff3:	48 c1 f8 3f          	sar    $0x3f,%rax
ffffffff8020dff7:	48 c1 fa 02          	sar    $0x2,%rdx
ffffffff8020dffb:	48 29 c2             	sub    %rax,%rdx
ffffffff8020dffe:	48 89 d5             	mov    %rdx,%rbp
    while(Count>0)
ffffffff8020e001:	4d 85 e4             	test   %r12,%r12
ffffffff8020e004:	75 ca                	jne    ffffffff8020dfd0 <RME_Log+0x110>
ffffffff8020e006:	48 c7 c3 46 cd 21 80 	mov    $0xffffffff8021cd46,%rbx
ffffffff8020e00d:	48 c7 c5 46 ce 21 80 	mov    $0xffffffff8021ce46,%rbp
        Count++;
ffffffff8020e014:	49 89 de             	mov    %rbx,%r14
ffffffff8020e017:	eb 15                	jmp    ffffffff8020e02e <RME_Log+0x16e>
ffffffff8020e019:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count++]);
ffffffff8020e020:	e8 8b ae 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e025:	49 83 c6 02          	add    $0x2,%r14
ffffffff8020e029:	4c 39 f5             	cmp    %r14,%rbp
ffffffff8020e02c:	74 09                	je     ffffffff8020e037 <RME_Log+0x177>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e02e:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020e032:	40 84 ff             	test   %dil,%dil
ffffffff8020e035:	75 e9                	jne    ffffffff8020e020 <RME_Log+0x160>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e037:	4d 8d b5 00 01 00 00 	lea    0x100(%r13),%r14
ffffffff8020e03e:	eb 0e                	jmp    ffffffff8020e04e <RME_Log+0x18e>
        __RME_Putchar(String[Count++]);
ffffffff8020e040:	e8 6b ae 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e045:	49 83 c5 02          	add    $0x2,%r13
ffffffff8020e049:	4d 39 ee             	cmp    %r13,%r14
ffffffff8020e04c:	74 0a                	je     ffffffff8020e058 <RME_Log+0x198>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e04e:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
ffffffff8020e053:	40 84 ff             	test   %dil,%dil
ffffffff8020e056:	75 e8                	jne    ffffffff8020e040 <RME_Log+0x180>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e058:	49 c7 c6 f1 ca 21 80 	mov    $0xffffffff8021caf1,%r14
ffffffff8020e05f:	49 c7 c5 f1 cb 21 80 	mov    $0xffffffff8021cbf1,%r13
ffffffff8020e066:	eb 16                	jmp    ffffffff8020e07e <RME_Log+0x1be>
ffffffff8020e068:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e06f:	00 
        __RME_Putchar(String[Count++]);
ffffffff8020e070:	e8 3b ae 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e075:	49 83 c6 02          	add    $0x2,%r14
ffffffff8020e079:	4d 39 f5             	cmp    %r14,%r13
ffffffff8020e07c:	74 09                	je     ffffffff8020e087 <RME_Log+0x1c7>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e07e:	41 0f be 3e          	movsbl (%r14),%edi
ffffffff8020e082:	40 84 ff             	test   %dil,%dil
ffffffff8020e085:	75 e9                	jne    ffffffff8020e070 <RME_Log+0x1b0>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e087:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
ffffffff8020e08c:	4d 8d ac 24 00 01 00 	lea    0x100(%r12),%r13
ffffffff8020e093:	00 
ffffffff8020e094:	eb 18                	jmp    ffffffff8020e0ae <RME_Log+0x1ee>
ffffffff8020e096:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e09d:	00 00 00 
        __RME_Putchar(String[Count++]);
ffffffff8020e0a0:	e8 0b ae 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e0a5:	49 83 c4 02          	add    $0x2,%r12
ffffffff8020e0a9:	4d 39 e5             	cmp    %r12,%r13
ffffffff8020e0ac:	74 20                	je     ffffffff8020e0ce <RME_Log+0x20e>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e0ae:	41 0f be 3c 24       	movsbl (%r12),%edi
ffffffff8020e0b3:	40 84 ff             	test   %dil,%dil
ffffffff8020e0b6:	75 e8                	jne    ffffffff8020e0a0 <RME_Log+0x1e0>
ffffffff8020e0b8:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e0bb:	40 84 ff             	test   %dil,%dil
ffffffff8020e0be:	74 16                	je     ffffffff8020e0d6 <RME_Log+0x216>
        __RME_Putchar(String[Count++]);
ffffffff8020e0c0:	e8 eb ad 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e0c5:	48 83 c3 02          	add    $0x2,%rbx
ffffffff8020e0c9:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020e0cc:	74 08                	je     ffffffff8020e0d6 <RME_Log+0x216>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020e0ce:	0f be 3b             	movsbl (%rbx),%edi
ffffffff8020e0d1:	40 84 ff             	test   %dil,%dil
ffffffff8020e0d4:	75 ea                	jne    ffffffff8020e0c0 <RME_Log+0x200>
}
ffffffff8020e0d6:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8020e0da:	5b                   	pop    %rbx
ffffffff8020e0db:	5d                   	pop    %rbp
ffffffff8020e0dc:	41 5c                	pop    %r12
ffffffff8020e0de:	41 5d                	pop    %r13
ffffffff8020e0e0:	41 5e                	pop    %r14
ffffffff8020e0e2:	41 5f                	pop    %r15
ffffffff8020e0e4:	c3                   	ret
ffffffff8020e0e5:	0f 1f 00             	nopl   (%rax)
        __RME_Putchar('-');
ffffffff8020e0e8:	bf 2d 00 00 00       	mov    $0x2d,%edi
        Abs=-Int;
ffffffff8020e0ed:	48 f7 db             	neg    %rbx
        __RME_Putchar('-');
ffffffff8020e0f0:	e8 bb ad 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
        Num=1;
ffffffff8020e0f5:	e9 6c fe ff ff       	jmp    ffffffff8020df66 <RME_Log+0xa6>
ffffffff8020e0fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        __RME_Putchar('0');
ffffffff8020e100:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020e105:	e8 a6 ad 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020e10a:	e9 f7 fe ff ff       	jmp    ffffffff8020e006 <RME_Log+0x146>
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020e10f:	8d 7b 30             	lea    0x30(%rbx),%edi
ffffffff8020e112:	40 0f be ff          	movsbl %dil,%edi
ffffffff8020e116:	e8 95 ad 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    while(Count>0)
ffffffff8020e11b:	e9 e6 fe ff ff       	jmp    ffffffff8020e006 <RME_Log+0x146>

ffffffff8020e120 <_RME_MSB_Generic>:
{
ffffffff8020e120:	f3 0f 1e fa          	endbr64
    if(Value>=RME_POW2(32U))
ffffffff8020e124:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e127:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e12b:	74 43                	je     ffffffff8020e170 <_RME_MSB_Generic+0x50>
        if(Value>=RME_POW2(48U))
ffffffff8020e12d:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e130:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e134:	0f 84 96 00 00 00    	je     ffffffff8020e1d0 <_RME_MSB_Generic+0xb0>
            if(Value>=RME_POW2(56U))
ffffffff8020e13a:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffffff,%rax
ffffffff8020e141:	ff ff 00 
ffffffff8020e144:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e147:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e149:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e14c:	83 c1 30             	add    $0x30,%ecx
ffffffff8020e14f:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e152:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e155:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e158:	0f b6 87 c0 d2 21 80 	movzbl -0x7fde2d40(%rdi),%eax
            if(Value>=RME_POW2(56U))
ffffffff8020e15f:	83 e2 08             	and    $0x8,%edx
ffffffff8020e162:	48 83 c2 30          	add    $0x30,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e166:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e169:	c3                   	ret
ffffffff8020e16a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if(Value>=RME_POW2(16U))
ffffffff8020e170:	48 81 ff ff ff 00 00 	cmp    $0xffff,%rdi
ffffffff8020e177:	77 27                	ja     ffffffff8020e1a0 <_RME_MSB_Generic+0x80>
            if(Value>=RME_POW2(8U))
ffffffff8020e179:	31 d2                	xor    %edx,%edx
ffffffff8020e17b:	48 81 ff ff 00 00 00 	cmp    $0xff,%rdi
ffffffff8020e182:	0f 97 c2             	seta   %dl
ffffffff8020e185:	48 c1 e2 03          	shl    $0x3,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e189:	89 d1                	mov    %edx,%ecx
ffffffff8020e18b:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e18e:	0f b6 87 c0 d2 21 80 	movzbl -0x7fde2d40(%rdi),%eax
ffffffff8020e195:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e198:	c3                   	ret
ffffffff8020e199:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            if(Value>=RME_POW2(24U))
ffffffff8020e1a0:	48 81 ff 00 00 00 01 	cmp    $0x1000000,%rdi
ffffffff8020e1a7:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e1a9:	83 e1 f8             	and    $0xfffffff8,%ecx
ffffffff8020e1ac:	83 c1 18             	add    $0x18,%ecx
ffffffff8020e1af:	48 81 ff 00 00 00 01 	cmp    $0x1000000,%rdi
ffffffff8020e1b6:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e1b9:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e1bc:	0f b6 87 c0 d2 21 80 	movzbl -0x7fde2d40(%rdi),%eax
            if(Value>=RME_POW2(24U))
ffffffff8020e1c3:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
ffffffff8020e1c7:	48 83 c2 18          	add    $0x18,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e1cb:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e1ce:	c3                   	ret
ffffffff8020e1cf:	90                   	nop
            if(Value>=RME_POW2(40U))
ffffffff8020e1d0:	48 b8 ff ff ff ff ff 	movabs $0xffffffffff,%rax
ffffffff8020e1d7:	00 00 00 
ffffffff8020e1da:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e1dd:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e1df:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e1e2:	83 c1 20             	add    $0x20,%ecx
ffffffff8020e1e5:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e1e8:	48 19 d2             	sbb    %rdx,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e1eb:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e1ee:	0f b6 87 c0 d2 21 80 	movzbl -0x7fde2d40(%rdi),%eax
            if(Value>=RME_POW2(40U))
ffffffff8020e1f5:	83 e2 08             	and    $0x8,%edx
ffffffff8020e1f8:	48 83 c2 20          	add    $0x20,%rdx
    return Table[Value>>Bit]+Bit;
ffffffff8020e1fc:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e1ff:	c3                   	ret

ffffffff8020e200 <_RME_LSB_Generic>:
{
ffffffff8020e200:	f3 0f 1e fa          	endbr64
    if((Value<<32U)==0U)
ffffffff8020e204:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e207:	48 c1 e0 20          	shl    $0x20,%rax
        if((Value<<16U)==0U)
ffffffff8020e20b:	48 89 f8             	mov    %rdi,%rax
    if((Value<<32U)==0U)
ffffffff8020e20e:	75 30                	jne    ffffffff8020e240 <_RME_LSB_Generic+0x40>
        if((Value<<16U)==0U)
ffffffff8020e210:	48 c1 e0 10          	shl    $0x10,%rax
            if((Value<<8U)==0U)
ffffffff8020e214:	48 89 f8             	mov    %rdi,%rax
        if((Value<<16U)==0U)
ffffffff8020e217:	75 77                	jne    ffffffff8020e290 <_RME_LSB_Generic+0x90>
            if((Value<<8U)==0U)
ffffffff8020e219:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8020e21d:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e221:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e223:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e226:	83 c1 30             	add    $0x30,%ecx
ffffffff8020e229:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e22d:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e230:	83 e2 08             	and    $0x8,%edx
ffffffff8020e233:	48 83 c2 30          	add    $0x30,%rdx
ffffffff8020e237:	eb 1f                	jmp    ffffffff8020e258 <_RME_LSB_Generic+0x58>
ffffffff8020e239:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if((Value<<48U)==0U)
ffffffff8020e240:	48 c1 e0 30          	shl    $0x30,%rax
            if((Value<<40U)==0U)
ffffffff8020e244:	48 89 f8             	mov    %rdi,%rax
        if((Value<<48U)==0U)
ffffffff8020e247:	74 27                	je     ffffffff8020e270 <_RME_LSB_Generic+0x70>
            if((Value<<56U)==0U)
ffffffff8020e249:	31 d2                	xor    %edx,%edx
ffffffff8020e24b:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff8020e24f:	0f 94 c2             	sete   %dl
ffffffff8020e252:	48 c1 e2 03          	shl    $0x3,%rdx
    return Table[(rme_u8_t)(Value>>Bit)]+Bit;
ffffffff8020e256:	89 d1                	mov    %edx,%ecx
ffffffff8020e258:	48 d3 ef             	shr    %cl,%rdi
ffffffff8020e25b:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff8020e25f:	0f b6 87 c0 d1 21 80 	movzbl -0x7fde2e40(%rdi),%eax
ffffffff8020e266:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020e269:	c3                   	ret
ffffffff8020e26a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            if((Value<<40U)==0U)
ffffffff8020e270:	48 c1 e0 28          	shl    $0x28,%rax
ffffffff8020e274:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e278:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e27a:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e27d:	83 c1 10             	add    $0x10,%ecx
ffffffff8020e280:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e284:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e287:	83 e2 08             	and    $0x8,%edx
ffffffff8020e28a:	48 83 c2 10          	add    $0x10,%rdx
ffffffff8020e28e:	eb c8                	jmp    ffffffff8020e258 <_RME_LSB_Generic+0x58>
            if((Value<<24U)==0U)
ffffffff8020e290:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff8020e294:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e298:	19 c9                	sbb    %ecx,%ecx
ffffffff8020e29a:	83 e1 08             	and    $0x8,%ecx
ffffffff8020e29d:	83 c1 20             	add    $0x20,%ecx
ffffffff8020e2a0:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8020e2a4:	48 19 d2             	sbb    %rdx,%rdx
ffffffff8020e2a7:	83 e2 08             	and    $0x8,%edx
ffffffff8020e2aa:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8020e2ae:	eb a8                	jmp    ffffffff8020e258 <_RME_LSB_Generic+0x58>

ffffffff8020e2b0 <_RME_Comp_Swap_Single>:
{
ffffffff8020e2b0:	f3 0f 1e fa          	endbr64
    if(*Ptr==Old)
ffffffff8020e2b4:	48 8b 0f             	mov    (%rdi),%rcx
    return 0U;
ffffffff8020e2b7:	31 c0                	xor    %eax,%eax
    if(*Ptr==Old)
ffffffff8020e2b9:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020e2bc:	74 02                	je     ffffffff8020e2c0 <_RME_Comp_Swap_Single+0x10>
}
ffffffff8020e2be:	c3                   	ret
ffffffff8020e2bf:	90                   	nop
        *Ptr=New;
ffffffff8020e2c0:	48 89 17             	mov    %rdx,(%rdi)
        return 1U;
ffffffff8020e2c3:	b8 01 00 00 00       	mov    $0x1,%eax
}
ffffffff8020e2c8:	c3                   	ret
ffffffff8020e2c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8020e2d0 <_RME_Fetch_Add_Single>:
{
ffffffff8020e2d0:	f3 0f 1e fa          	endbr64
    Old=(rme_cnt_t)(*Ptr);
ffffffff8020e2d4:	48 8b 07             	mov    (%rdi),%rax
    *Ptr=(rme_ptr_t)(Old+Addend);
ffffffff8020e2d7:	48 01 c6             	add    %rax,%rsi
ffffffff8020e2da:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020e2dd:	c3                   	ret
ffffffff8020e2de:	66 90                	xchg   %ax,%ax

ffffffff8020e2e0 <_RME_Fetch_And_Single>:
{
ffffffff8020e2e0:	f3 0f 1e fa          	endbr64
    Old=*Ptr;
ffffffff8020e2e4:	48 8b 07             	mov    (%rdi),%rax
    *Ptr=Old&Operand;
ffffffff8020e2e7:	48 21 c6             	and    %rax,%rsi
ffffffff8020e2ea:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020e2ed:	c3                   	ret
ffffffff8020e2ee:	66 90                	xchg   %ax,%ax

ffffffff8020e2f0 <_RME_List_Crt>:
{
ffffffff8020e2f0:	f3 0f 1e fa          	endbr64
    Head->Next=Head;
ffffffff8020e2f4:	66 48 0f 6e c7       	movq   %rdi,%xmm0
ffffffff8020e2f9:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
ffffffff8020e2fd:	0f 11 07             	movups %xmm0,(%rdi)
}
ffffffff8020e300:	c3                   	ret
ffffffff8020e301:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e308:	00 00 00 00 
ffffffff8020e30c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e310 <_RME_List_Del>:
{
ffffffff8020e310:	f3 0f 1e fa          	endbr64
    Next->Prev=Prev;
ffffffff8020e314:	48 89 7e 08          	mov    %rdi,0x8(%rsi)
    Prev->Next=Next;
ffffffff8020e318:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8020e31b:	c3                   	ret
ffffffff8020e31c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e320 <_RME_List_Ins>:
{
ffffffff8020e320:	f3 0f 1e fa          	endbr64
    Next->Prev=New;
ffffffff8020e324:	48 89 7a 08          	mov    %rdi,0x8(%rdx)
    New->Next=Next;
ffffffff8020e328:	48 89 17             	mov    %rdx,(%rdi)
    New->Prev=Prev;
ffffffff8020e32b:	48 89 77 08          	mov    %rsi,0x8(%rdi)
    Prev->Next=New;
ffffffff8020e32f:	48 89 3e             	mov    %rdi,(%rsi)
}
ffffffff8020e332:	c3                   	ret
ffffffff8020e333:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e33a:	00 00 00 00 
ffffffff8020e33e:	66 90                	xchg   %ax,%ax

ffffffff8020e340 <_RME_Clear>:
{
ffffffff8020e340:	f3 0f 1e fa          	endbr64
ffffffff8020e344:	48 89 f9             	mov    %rdi,%rcx
    for(Count=0U;Count<Size;Count++)
ffffffff8020e347:	48 85 f6             	test   %rsi,%rsi
ffffffff8020e34a:	0f 84 c8 00 00 00    	je     ffffffff8020e418 <_RME_Clear+0xd8>
ffffffff8020e350:	48 8d 46 ff          	lea    -0x1(%rsi),%rax
ffffffff8020e354:	48 83 f8 0e          	cmp    $0xe,%rax
ffffffff8020e358:	0f 86 bb 00 00 00    	jbe    ffffffff8020e419 <_RME_Clear+0xd9>
ffffffff8020e35e:	48 89 f0             	mov    %rsi,%rax
ffffffff8020e361:	48 89 fa             	mov    %rdi,%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e364:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8020e368:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
ffffffff8020e36c:	48 8d 3c 38          	lea    (%rax,%rdi,1),%rdi
ffffffff8020e370:	a8 10                	test   $0x10,%al
ffffffff8020e372:	74 0c                	je     ffffffff8020e380 <_RME_Clear+0x40>
ffffffff8020e374:	48 8d 51 10          	lea    0x10(%rcx),%rdx
ffffffff8020e378:	0f 11 01             	movups %xmm0,(%rcx)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e37b:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020e37e:	74 10                	je     ffffffff8020e390 <_RME_Clear+0x50>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e380:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8020e383:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8020e387:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e38b:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020e38e:	75 f0                	jne    ffffffff8020e380 <_RME_Clear+0x40>
ffffffff8020e390:	48 39 c6             	cmp    %rax,%rsi
ffffffff8020e393:	0f 84 87 00 00 00    	je     ffffffff8020e420 <_RME_Clear+0xe0>
ffffffff8020e399:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020e39c:	48 29 c2             	sub    %rax,%rdx
ffffffff8020e39f:	48 8d 7a ff          	lea    -0x1(%rdx),%rdi
ffffffff8020e3a3:	48 83 ff 06          	cmp    $0x6,%rdi
ffffffff8020e3a7:	76 17                	jbe    ffffffff8020e3c0 <_RME_Clear+0x80>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3a9:	48 89 d7             	mov    %rdx,%rdi
ffffffff8020e3ac:	48 c7 04 01 00 00 00 	movq   $0x0,(%rcx,%rax,1)
ffffffff8020e3b3:	00 
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3b4:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
ffffffff8020e3b8:	48 01 f8             	add    %rdi,%rax
ffffffff8020e3bb:	83 e2 07             	and    $0x7,%edx
ffffffff8020e3be:	74 58                	je     ffffffff8020e418 <_RME_Clear+0xd8>
ffffffff8020e3c0:	48 8d 50 01          	lea    0x1(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3c4:	c6 04 01 00          	movb   $0x0,(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3c8:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e3cb:	73 4b                	jae    ffffffff8020e418 <_RME_Clear+0xd8>
ffffffff8020e3cd:	48 8d 50 02          	lea    0x2(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3d1:	c6 44 01 01 00       	movb   $0x0,0x1(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3d6:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e3d9:	73 3d                	jae    ffffffff8020e418 <_RME_Clear+0xd8>
ffffffff8020e3db:	48 8d 50 03          	lea    0x3(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3df:	c6 44 01 02 00       	movb   $0x0,0x2(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3e4:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e3e7:	73 2f                	jae    ffffffff8020e418 <_RME_Clear+0xd8>
ffffffff8020e3e9:	48 8d 50 04          	lea    0x4(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3ed:	c6 44 01 03 00       	movb   $0x0,0x3(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e3f2:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e3f5:	73 21                	jae    ffffffff8020e418 <_RME_Clear+0xd8>
ffffffff8020e3f7:	48 8d 50 05          	lea    0x5(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e3fb:	c6 44 01 04 00       	movb   $0x0,0x4(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e400:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e403:	73 13                	jae    ffffffff8020e418 <_RME_Clear+0xd8>
ffffffff8020e405:	48 8d 50 06          	lea    0x6(%rax),%rdx
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e409:	c6 44 01 05 00       	movb   $0x0,0x5(%rcx,%rax,1)
    for(Count=0U;Count<Size;Count++)
ffffffff8020e40e:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020e411:	73 05                	jae    ffffffff8020e418 <_RME_Clear+0xd8>
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020e413:	c6 44 01 06 00       	movb   $0x0,0x6(%rcx,%rax,1)
}
ffffffff8020e418:	c3                   	ret
    for(Count=0U;Count<Size;Count++)
ffffffff8020e419:	31 c0                	xor    %eax,%eax
ffffffff8020e41b:	e9 79 ff ff ff       	jmp    ffffffff8020e399 <_RME_Clear+0x59>
ffffffff8020e420:	c3                   	ret
ffffffff8020e421:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e428:	00 00 00 00 
ffffffff8020e42c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e430 <_RME_Memcmp>:
{
ffffffff8020e430:	f3 0f 1e fa          	endbr64
    for(Count=0U;Count<Num;Count++)
ffffffff8020e434:	31 c0                	xor    %eax,%eax
ffffffff8020e436:	48 85 d2             	test   %rdx,%rdx
ffffffff8020e439:	75 0e                	jne    ffffffff8020e449 <_RME_Memcmp+0x19>
ffffffff8020e43b:	c3                   	ret
ffffffff8020e43c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020e440:	48 83 c0 01          	add    $0x1,%rax
ffffffff8020e444:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e447:	74 17                	je     ffffffff8020e460 <_RME_Memcmp+0x30>
        if(Dst[Count]!=Src[Count])
ffffffff8020e449:	0f b6 0c 07          	movzbl (%rdi,%rax,1),%ecx
ffffffff8020e44d:	44 0f be 04 06       	movsbl (%rsi,%rax,1),%r8d
ffffffff8020e452:	44 38 c1             	cmp    %r8b,%cl
ffffffff8020e455:	74 e9                	je     ffffffff8020e440 <_RME_Memcmp+0x10>
            return Dst[Count]-Src[Count];
ffffffff8020e457:	0f be c1             	movsbl %cl,%eax
ffffffff8020e45a:	44 29 c0             	sub    %r8d,%eax
ffffffff8020e45d:	48 98                	cltq
ffffffff8020e45f:	c3                   	ret
    return 0;
ffffffff8020e460:	31 c0                	xor    %eax,%eax
ffffffff8020e462:	c3                   	ret
ffffffff8020e463:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e46a:	00 00 00 00 
ffffffff8020e46e:	66 90                	xchg   %ax,%ax

ffffffff8020e470 <_RME_Memcpy>:
{
ffffffff8020e470:	f3 0f 1e fa          	endbr64
    for(Count=0U;Count<Num;Count++)
ffffffff8020e474:	48 85 d2             	test   %rdx,%rdx
ffffffff8020e477:	74 1a                	je     ffffffff8020e493 <_RME_Memcpy+0x23>
ffffffff8020e479:	48 01 f2             	add    %rsi,%rdx
ffffffff8020e47c:	0f 1f 40 00          	nopl   0x0(%rax)
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020e480:	0f b6 06             	movzbl (%rsi),%eax
    for(Count=0U;Count<Num;Count++)
ffffffff8020e483:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8020e487:	48 83 c7 01          	add    $0x1,%rdi
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020e48b:	88 47 ff             	mov    %al,-0x1(%rdi)
    for(Count=0U;Count<Num;Count++)
ffffffff8020e48e:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8020e491:	75 ed                	jne    ffffffff8020e480 <_RME_Memcpy+0x10>
}
ffffffff8020e493:	c3                   	ret
ffffffff8020e494:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e49b:	00 00 00 00 
ffffffff8020e49f:	90                   	nop

ffffffff8020e4a0 <_RME_Diff>:
{
ffffffff8020e4a0:	f3 0f 1e fa          	endbr64
    Diff1=Num1-Num2;
ffffffff8020e4a4:	48 89 f8             	mov    %rdi,%rax
ffffffff8020e4a7:	48 29 f0             	sub    %rsi,%rax
    Diff2=Num2-Num1;
ffffffff8020e4aa:	48 29 fe             	sub    %rdi,%rsi
    if(Diff1>Diff2)
ffffffff8020e4ad:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020e4b0:	48 0f 47 c6          	cmova  %rsi,%rax
}
ffffffff8020e4b4:	c3                   	ret
ffffffff8020e4b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e4bc:	00 00 00 00 

ffffffff8020e4c0 <RME_Kmain>:
{
ffffffff8020e4c0:	f3 0f 1e fa          	endbr64
ffffffff8020e4c4:	50                   	push   %rax
ffffffff8020e4c5:	58                   	pop    %rax
ffffffff8020e4c6:	48 83 ec 08          	sub    $0x8,%rsp
	return Ret;
}

static INLINE void __RME_Int_Disable()
{
	__asm__ __volatile__ ("cli");
ffffffff8020e4ca:	fa                   	cli
    __RME_Lowlvl_Init();
ffffffff8020e4cb:	e8 60 ac 00 00       	call   ffffffff80219130 <__RME_Lowlvl_Init>
    while(1){}
ffffffff8020e4d0:	eb fe                	jmp    ffffffff8020e4d0 <RME_Kmain+0x10>
ffffffff8020e4d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e4d9:	00 00 00 00 
ffffffff8020e4dd:	0f 1f 00             	nopl   (%rax)

ffffffff8020e4e0 <_RME_Tim_Elapse>:
{
ffffffff8020e4e0:	f3 0f 1e fa          	endbr64
ffffffff8020e4e4:	53                   	push   %rbx
ffffffff8020e4e5:	48 89 fb             	mov    %rdi,%rbx
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020e4e8:	e8 52 d3 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020e4ed:	48 b9 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rcx
ffffffff8020e4f4:	ff ff 7f 
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020e4f7:	48 8b 50 08          	mov    0x8(%rax),%rdx
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020e4fb:	48 8b 42 30          	mov    0x30(%rdx),%rax
ffffffff8020e4ff:	48 39 c1             	cmp    %rax,%rcx
ffffffff8020e502:	72 16                	jb     ffffffff8020e51a <_RME_Tim_Elapse+0x3a>
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020e504:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e507:	48 29 d9             	sub    %rbx,%rcx
ffffffff8020e50a:	48 39 c3             	cmp    %rax,%rbx
ffffffff8020e50d:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020e512:	48 0f 42 c1          	cmovb  %rcx,%rax
ffffffff8020e516:	48 89 42 30          	mov    %rax,0x30(%rdx)
}
ffffffff8020e51a:	5b                   	pop    %rbx
ffffffff8020e51b:	c3                   	ret
ffffffff8020e51c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e520 <_RME_Tim_Future>:
{
ffffffff8020e520:	f3 0f 1e fa          	endbr64
ffffffff8020e524:	48 83 ec 08          	sub    $0x8,%rsp
    return RME_CPU_LOCAL()->Thd_Cur->Sched.Slice;
ffffffff8020e528:	e8 12 d3 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020e52d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020e531:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff8020e535:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020e539:	c3                   	ret
ffffffff8020e53a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020e540 <_RME_Pgt_Boot_Add>:
{
ffffffff8020e540:	f3 0f 1e fa          	endbr64
ffffffff8020e544:	48 89 f0             	mov    %rsi,%rax
ffffffff8020e547:	49 89 f9             	mov    %rdi,%r9
ffffffff8020e54a:	48 89 d6             	mov    %rdx,%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020e54d:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
{
ffffffff8020e551:	48 89 ca             	mov    %rcx,%rdx
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020e554:	f6 c4 80             	test   $0x80,%ah
ffffffff8020e557:	0f 85 93 00 00 00    	jne    ffffffff8020e5f0 <_RME_Pgt_Boot_Add+0xb0>
ffffffff8020e55d:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e560:	0f 83 fa 00 00 00    	jae    ffffffff8020e660 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020e566:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020e56d:	ff 00 00 
ffffffff8020e570:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e574:	49 03 41 18          	add    0x18(%r9),%rax
ffffffff8020e578:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020e57f:	00 00 00 
ffffffff8020e582:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e585:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e588:	48 21 c1             	and    %rax,%rcx
ffffffff8020e58b:	4c 39 c9             	cmp    %r9,%rcx
ffffffff8020e58e:	0f 84 c4 00 00 00    	je     ffffffff8020e658 <_RME_Pgt_Boot_Add+0x118>
ffffffff8020e594:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e598:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020e59c:	0f 85 ce 00 00 00    	jne    ffffffff8020e670 <_RME_Pgt_Boot_Add+0x130>
    Szord=RME_PGT_SZORD(Pgt_Op->Order);
ffffffff8020e5a2:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020e5a6:	b9 40 00 00 00       	mov    $0x40,%ecx
    if(((Pos>>RME_PGT_NMORD(Pgt_Op->Order))!=0U)||
ffffffff8020e5ab:	49 89 d3             	mov    %rdx,%r11
    Szord=RME_PGT_SZORD(Pgt_Op->Order);
ffffffff8020e5ae:	4c 89 c8             	mov    %r9,%rax
ffffffff8020e5b1:	48 c1 e8 20          	shr    $0x20,%rax
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020e5b5:	29 c1                	sub    %eax,%ecx
ffffffff8020e5b7:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020e5be:	48 d3 e8             	shr    %cl,%rax
    if(((Pos>>RME_PGT_NMORD(Pgt_Op->Order))!=0U)||
ffffffff8020e5c1:	44 89 c9             	mov    %r9d,%ecx
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020e5c4:	48 21 f0             	and    %rsi,%rax
    if(((Pos>>RME_PGT_NMORD(Pgt_Op->Order))!=0U)||
ffffffff8020e5c7:	49 d3 eb             	shr    %cl,%r11
ffffffff8020e5ca:	4c 09 d8             	or     %r11,%rax
ffffffff8020e5cd:	0f 85 ad 00 00 00    	jne    ffffffff8020e680 <_RME_Pgt_Boot_Add+0x140>
{
ffffffff8020e5d3:	48 83 ec 08          	sub    $0x8,%rsp
    if(__RME_Pgt_Page_Map(Pgt_Op,Paddr,Pos,Flag)!=0)
ffffffff8020e5d7:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020e5da:	e8 51 c8 00 00       	call   ffffffff8021ae30 <__RME_Pgt_Page_Map>
    return 0;
ffffffff8020e5df:	48 f7 d8             	neg    %rax
ffffffff8020e5e2:	48 19 c0             	sbb    %rax,%rax
}
ffffffff8020e5e5:	48 83 c4 08          	add    $0x8,%rsp
    return 0;
ffffffff8020e5e9:	48 83 e0 9a          	and    $0xffffffffffffff9a,%rax
}
ffffffff8020e5ed:	c3                   	ret
ffffffff8020e5ee:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020e5f0:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e5f3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8020e5f7:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020e5fa:	73 64                	jae    ffffffff8020e660 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020e5fc:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020e603:	00 00 00 
ffffffff8020e606:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020e60a:	49 03 49 18          	add    0x18(%r9),%rcx
ffffffff8020e60e:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020e615:	ff 00 00 
ffffffff8020e618:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8020e61b:	49 89 fb             	mov    %rdi,%r11
ffffffff8020e61e:	4d 21 cb             	and    %r9,%r11
ffffffff8020e621:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020e624:	74 32                	je     ffffffff8020e658 <_RME_Pgt_Boot_Add+0x118>
ffffffff8020e626:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020e62a:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020e62e:	75 40                	jne    ffffffff8020e670 <_RME_Pgt_Boot_Add+0x130>
ffffffff8020e630:	48 8b 79 28          	mov    0x28(%rcx),%rdi
ffffffff8020e634:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e639:	48 39 f8             	cmp    %rdi,%rax
ffffffff8020e63c:	73 22                	jae    ffffffff8020e660 <_RME_Pgt_Boot_Add+0x120>
ffffffff8020e63e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e642:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff8020e646:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e649:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e64c:	49 21 c1             	and    %rax,%r9
ffffffff8020e64f:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020e652:	0f 85 3c ff ff ff    	jne    ffffffff8020e594 <_RME_Pgt_Boot_Add+0x54>
ffffffff8020e658:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e65f:	c3                   	ret
ffffffff8020e660:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e667:	c3                   	ret
ffffffff8020e668:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e66f:	00 
ffffffff8020e670:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e677:	c3                   	ret
ffffffff8020e678:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e67f:	00 
        return RME_ERR_PGT_ADDR;
ffffffff8020e680:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
}
ffffffff8020e687:	c3                   	ret
ffffffff8020e688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020e68f:	00 

ffffffff8020e690 <_RME_Pgt_Boot_Con>:
{
ffffffff8020e690:	f3 0f 1e fa          	endbr64
ffffffff8020e694:	55                   	push   %rbp
ffffffff8020e695:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020e698:	53                   	push   %rbx
ffffffff8020e699:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020e69c:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e69f:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e6a3:	48 8b 57 28          	mov    0x28(%rdi),%rdx
ffffffff8020e6a7:	f6 c7 80             	test   $0x80,%bh
ffffffff8020e6aa:	0f 85 20 01 00 00    	jne    ffffffff8020e7d0 <_RME_Pgt_Boot_Con+0x140>
ffffffff8020e6b0:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8020e6b3:	0f 83 ff 00 00 00    	jae    ffffffff8020e7b8 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e6b9:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff8020e6bd:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020e6c1:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020e6c8:	ff 00 00 
ffffffff8020e6cb:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020e6d2:	00 00 00 
ffffffff8020e6d5:	48 01 cb             	add    %rcx,%rbx
ffffffff8020e6d8:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020e6db:	48 21 c7             	and    %rax,%rdi
ffffffff8020e6de:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020e6e1:	0f 84 56 01 00 00    	je     ffffffff8020e83d <_RME_Pgt_Boot_Con+0x1ad>
ffffffff8020e6e7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e6eb:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020e6ef:	0f 85 e3 01 00 00    	jne    ffffffff8020e8d8 <_RME_Pgt_Boot_Con+0x248>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020e6f5:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020e6fb:	0f 85 4f 01 00 00    	jne    ffffffff8020e850 <_RME_Pgt_Boot_Con+0x1c0>
ffffffff8020e701:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020e704:	0f 83 ae 00 00 00    	jae    ffffffff8020e7b8 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e70a:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020e711:	ff 00 00 
ffffffff8020e714:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020e718:	48 01 cd             	add    %rcx,%rbp
ffffffff8020e71b:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020e722:	00 00 00 
ffffffff8020e725:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020e729:	48 21 c2             	and    %rax,%rdx
ffffffff8020e72c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020e72f:	0f 84 08 01 00 00    	je     ffffffff8020e83d <_RME_Pgt_Boot_Con+0x1ad>
ffffffff8020e735:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e739:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020e73d:	0f 85 95 01 00 00    	jne    ffffffff8020e8d8 <_RME_Pgt_Boot_Con+0x248>
    if((Pos>>RME_PGT_NMORD(Pgt_Parent->Order))!=0U)
ffffffff8020e743:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff8020e747:	48 89 f0             	mov    %rsi,%rax
ffffffff8020e74a:	48 d3 e8             	shr    %cl,%rax
ffffffff8020e74d:	48 85 c0             	test   %rax,%rax
ffffffff8020e750:	0f 85 9a 01 00 00    	jne    ffffffff8020e8f0 <_RME_Pgt_Boot_Con+0x260>
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff8020e756:	48 8b 45 28          	mov    0x28(%rbp),%rax
    Szord_Parent=RME_PGT_SZORD(Pgt_Parent->Order);
ffffffff8020e75a:	48 c1 e9 20          	shr    $0x20,%rcx
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
ffffffff8020e75e:	89 c2                	mov    %eax,%edx
ffffffff8020e760:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e764:	48 01 d0             	add    %rdx,%rax
    if(Szord_Parent!=Order_Child)
ffffffff8020e767:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020e76a:	0f 85 80 01 00 00    	jne    ffffffff8020e8f0 <_RME_Pgt_Boot_Con+0x260>
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff8020e770:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020e773:	4c 89 c1             	mov    %r8,%rcx
ffffffff8020e776:	48 89 df             	mov    %rbx,%rdi
ffffffff8020e779:	e8 92 c7 00 00       	call   ffffffff8021af10 <__RME_Pgt_Pgdir_Map>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff8020e77e:	8b 13                	mov    (%rbx),%edx
ffffffff8020e780:	85 d2                	test   %edx,%edx
ffffffff8020e782:	74 04                	je     ffffffff8020e788 <_RME_Pgt_Boot_Con+0xf8>
ffffffff8020e784:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020e788:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020e78d:	f0 48 0f c1 43 08    	lock xadd %rax,0x8(%rbx)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020e793:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020e796:	85 c0                	test   %eax,%eax
ffffffff8020e798:	0f 85 2a 01 00 00    	jne    ffffffff8020e8c8 <_RME_Pgt_Boot_Con+0x238>
ffffffff8020e79e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020e7a3:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    return 0;
ffffffff8020e7a9:	31 c0                	xor    %eax,%eax
}
ffffffff8020e7ab:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020e7af:	5b                   	pop    %rbx
ffffffff8020e7b0:	5d                   	pop    %rbp
ffffffff8020e7b1:	c3                   	ret
ffffffff8020e7b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020e7b8:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e7bc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020e7c3:	5b                   	pop    %rbx
ffffffff8020e7c4:	5d                   	pop    %rbp
ffffffff8020e7c5:	c3                   	ret
ffffffff8020e7c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e7cd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e7d0:	48 89 d8             	mov    %rbx,%rax
ffffffff8020e7d3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e7d7:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e7da:	73 dc                	jae    ffffffff8020e7b8 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e7dc:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff8020e7e0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e7e4:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020e7eb:	ff 00 00 
ffffffff8020e7ee:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020e7f5:	00 00 00 
ffffffff8020e7f8:	48 01 c8             	add    %rcx,%rax
ffffffff8020e7fb:	48 8b 38             	mov    (%rax),%rdi
ffffffff8020e7fe:	49 89 fb             	mov    %rdi,%r11
ffffffff8020e801:	4d 21 cb             	and    %r9,%r11
ffffffff8020e804:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020e807:	74 34                	je     ffffffff8020e83d <_RME_Pgt_Boot_Con+0x1ad>
ffffffff8020e809:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020e80d:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020e811:	0f 85 c1 00 00 00    	jne    ffffffff8020e8d8 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020e817:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff8020e81b:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020e821:	48 39 fb             	cmp    %rdi,%rbx
ffffffff8020e824:	73 92                	jae    ffffffff8020e7b8 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e826:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020e82a:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8020e82e:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020e831:	49 21 c1             	and    %rax,%r9
ffffffff8020e834:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020e837:	0f 85 aa fe ff ff    	jne    ffffffff8020e6e7 <_RME_Pgt_Boot_Con+0x57>
}
ffffffff8020e83d:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e841:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020e848:	5b                   	pop    %rbx
ffffffff8020e849:	5d                   	pop    %rbp
ffffffff8020e84a:	c3                   	ret
ffffffff8020e84b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff8020e850:	48 89 e8             	mov    %rbp,%rax
ffffffff8020e853:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e857:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e85a:	0f 83 58 ff ff ff    	jae    ffffffff8020e7b8 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e860:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020e867:	00 00 00 
ffffffff8020e86a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e86e:	48 01 c8             	add    %rcx,%rax
ffffffff8020e871:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020e878:	ff 00 00 
ffffffff8020e87b:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020e87e:	49 89 d1             	mov    %rdx,%r9
ffffffff8020e881:	49 21 c9             	and    %rcx,%r9
ffffffff8020e884:	49 39 f9             	cmp    %rdi,%r9
ffffffff8020e887:	74 b4                	je     ffffffff8020e83d <_RME_Pgt_Boot_Con+0x1ad>
ffffffff8020e889:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020e88d:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8020e891:	75 45                	jne    ffffffff8020e8d8 <_RME_Pgt_Boot_Con+0x248>
ffffffff8020e893:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e897:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8020e89d:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020e8a0:	0f 83 12 ff ff ff    	jae    ffffffff8020e7b8 <_RME_Pgt_Boot_Con+0x128>
ffffffff8020e8a6:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020e8aa:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff8020e8ae:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff8020e8b2:	48 21 c1             	and    %rax,%rcx
ffffffff8020e8b5:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8020e8b8:	0f 85 77 fe ff ff    	jne    ffffffff8020e735 <_RME_Pgt_Boot_Con+0xa5>
ffffffff8020e8be:	e9 7a ff ff ff       	jmp    ffffffff8020e83d <_RME_Pgt_Boot_Con+0x1ad>
ffffffff8020e8c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8020e8c8:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
ffffffff8020e8cc:	e9 cd fe ff ff       	jmp    ffffffff8020e79e <_RME_Pgt_Boot_Con+0x10e>
ffffffff8020e8d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
ffffffff8020e8d8:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8020e8dc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020e8e3:	5b                   	pop    %rbx
ffffffff8020e8e4:	5d                   	pop    %rbp
ffffffff8020e8e5:	c3                   	ret
ffffffff8020e8e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020e8ed:	00 00 00 
        return RME_ERR_PGT_ADDR;
ffffffff8020e8f0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8020e8f7:	e9 af fe ff ff       	jmp    ffffffff8020e7ab <_RME_Pgt_Boot_Con+0x11b>
ffffffff8020e8fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020e900 <_RME_Kot_Init>:
{
ffffffff8020e900:	f3 0f 1e fa          	endbr64
    if(Word<RME_KOT_WORD_NUM)
ffffffff8020e904:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020e908:	76 51                	jbe    ffffffff8020e95b <_RME_Kot_Init+0x5b>
ffffffff8020e90a:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020e911:	80 ff ff 
ffffffff8020e914:	48 8d 14 f8          	lea    (%rax,%rdi,8),%rdx
ffffffff8020e918:	83 e7 01             	and    $0x1,%edi
ffffffff8020e91b:	74 23                	je     ffffffff8020e940 <_RME_Kot_Init+0x40>
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e91d:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020e924:	80 ff ff 
ffffffff8020e927:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8020e92e:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020e932:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e935:	74 21                	je     ffffffff8020e958 <_RME_Kot_Init+0x58>
ffffffff8020e937:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020e93e:	00 00 
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e940:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8020e947:	48 83 c0 10          	add    $0x10,%rax
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8020e94b:	48 c7 40 f8 00 00 00 	movq   $0x0,-0x8(%rax)
ffffffff8020e952:	00 
    for(Count=0U;Count<Word;Count++)
ffffffff8020e953:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020e956:	75 e8                	jne    ffffffff8020e940 <_RME_Kot_Init+0x40>
    return 0;
ffffffff8020e958:	31 c0                	xor    %eax,%eax
ffffffff8020e95a:	c3                   	ret
        return -1;
ffffffff8020e95b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020e962:	c3                   	ret
ffffffff8020e963:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8020e96a:	00 00 00 00 
ffffffff8020e96e:	66 90                	xchg   %ax,%ax

ffffffff8020e970 <_RME_Kot_Mark>:
{
ffffffff8020e970:	f3 0f 1e fa          	endbr64
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff8020e974:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff8020e978:	0f 85 b7 01 00 00    	jne    ffffffff8020eb35 <_RME_Kot_Mark+0x1c5>
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e97e:	49 ba 00 00 00 00 00 	movabs $0x800000000000,%r10
ffffffff8020e985:	80 00 00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020e988:	49 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%r9
{
ffffffff8020e98f:	53                   	push   %rbx
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e990:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff8020e997:	7f 00 00 
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e99a:	49 01 fa             	add    %rdi,%r10
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e99d:	48 01 c6             	add    %rax,%rsi
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020e9a0:	4d 89 cb             	mov    %r9,%r11
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e9a3:	4c 89 d1             	mov    %r10,%rcx
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e9a6:	48 01 fe             	add    %rdi,%rsi
    Start=Start>>RME_WORD_ORDER;
ffffffff8020e9a9:	49 c1 ea 0a          	shr    $0xa,%r10
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020e9ad:	48 bf 00 00 00 01 00 	movabs $0xffff800001000000,%rdi
ffffffff8020e9b4:	80 ff ff 
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e9b7:	48 c1 e9 04          	shr    $0x4,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020e9bb:	4e 8d 04 d5 00 00 00 	lea    0x0(,%r10,8),%r8
ffffffff8020e9c2:	00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020e9c3:	49 d3 e3             	shl    %cl,%r11
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e9c6:	48 89 f1             	mov    %rsi,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020e9c9:	49 8d 1c 38          	lea    (%r8,%rdi,1),%rbx
    End=End>>RME_WORD_ORDER;
ffffffff8020e9cd:	48 c1 ee 0a          	shr    $0xa,%rsi
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020e9d1:	48 c1 e9 04          	shr    $0x4,%rcx
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8020e9d5:	48 8b 03             	mov    (%rbx),%rax
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020e9d8:	f7 d1                	not    %ecx
ffffffff8020e9da:	49 d3 e9             	shr    %cl,%r9
    if(Start==End)
ffffffff8020e9dd:	49 39 f2             	cmp    %rsi,%r10
ffffffff8020e9e0:	0f 84 32 01 00 00    	je     ffffffff8020eb18 <_RME_Kot_Mark+0x1a8>
        if((Old_Val&Mask_Begin)!=0U)
ffffffff8020e9e6:	49 85 c3             	test   %rax,%r11
ffffffff8020e9e9:	0f 85 e3 00 00 00    	jne    ffffffff8020ead2 <_RME_Kot_Mark+0x162>
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020e9ef:	4c 89 da             	mov    %r11,%rdx
ffffffff8020e9f2:	48 09 c2             	or     %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020e9f5:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff8020e9fa:	0f 94 c2             	sete   %dl
ffffffff8020e9fd:	84 d2                	test   %dl,%dl
ffffffff8020e9ff:	0f 84 cd 00 00 00    	je     ffffffff8020ead2 <_RME_Kot_Mark+0x162>
        for(Count=Start+1U;Count<End;Count++)
ffffffff8020ea05:	49 8d 4a 01          	lea    0x1(%r10),%rcx
ffffffff8020ea09:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020ea0c:	0f 83 ce 00 00 00    	jae    ffffffff8020eae0 <_RME_Kot_Mark+0x170>
ffffffff8020ea12:	49 8d 54 38 08       	lea    0x8(%r8,%rdi,1),%rdx
ffffffff8020ea17:	31 c0                	xor    %eax,%eax
ffffffff8020ea19:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
ffffffff8020ea20:	eb 25                	jmp    ffffffff8020ea47 <_RME_Kot_Mark+0xd7>
ffffffff8020ea22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8020ea28:	f0 48 0f b1 3a       	lock cmpxchg %rdi,(%rdx)
ffffffff8020ea2d:	41 0f 94 c0          	sete   %r8b
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Count],
ffffffff8020ea31:	45 84 c0             	test   %r8b,%r8b
ffffffff8020ea34:	74 17                	je     ffffffff8020ea4d <_RME_Kot_Mark+0xdd>
        for(Count=Start+1U;Count<End;Count++)
ffffffff8020ea36:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8020ea3a:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8020ea3e:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020ea41:	0f 84 99 00 00 00    	je     ffffffff8020eae0 <_RME_Kot_Mark+0x170>
            if(Old_Val!=0U)
ffffffff8020ea47:	48 83 3a 00          	cmpq   $0x0,(%rdx)
ffffffff8020ea4b:	74 db                	je     ffffffff8020ea28 <_RME_Kot_Mark+0xb8>
            for(Count--;Count>Start;Count--)
ffffffff8020ea4d:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
ffffffff8020ea51:	49 39 d2             	cmp    %rdx,%r10
ffffffff8020ea54:	73 72                	jae    ffffffff8020eac8 <_RME_Kot_Mark+0x158>
ffffffff8020ea56:	48 89 c8             	mov    %rcx,%rax
ffffffff8020ea59:	4c 29 d0             	sub    %r10,%rax
ffffffff8020ea5c:	48 8d 78 ff          	lea    -0x1(%rax),%rdi
ffffffff8020ea60:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ea64:	74 50                	je     ffffffff8020eab6 <_RME_Kot_Mark+0x146>
ffffffff8020ea66:	48 89 fe             	mov    %rdi,%rsi
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020ea69:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8020ea6d:	49 b8 f0 ff ff 00 00 	movabs $0xffff800000fffff0,%r8
ffffffff8020ea74:	80 ff ff 
ffffffff8020ea77:	48 83 e6 fe          	and    $0xfffffffffffffffe,%rsi
ffffffff8020ea7b:	49 8d 04 c8          	lea    (%r8,%rcx,8),%rax
ffffffff8020ea7f:	48 29 f1             	sub    %rsi,%rcx
ffffffff8020ea82:	49 8d 0c c8          	lea    (%r8,%rcx,8),%rcx
ffffffff8020ea86:	49 89 c0             	mov    %rax,%r8
ffffffff8020ea89:	49 29 c8             	sub    %rcx,%r8
ffffffff8020ea8c:	41 83 e0 10          	and    $0x10,%r8d
ffffffff8020ea90:	74 0c                	je     ffffffff8020ea9e <_RME_Kot_Mark+0x12e>
ffffffff8020ea92:	0f 11 00             	movups %xmm0,(%rax)
            for(Count--;Count>Start;Count--)
ffffffff8020ea95:	48 83 e8 10          	sub    $0x10,%rax
ffffffff8020ea99:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020ea9c:	74 10                	je     ffffffff8020eaae <_RME_Kot_Mark+0x13e>
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020ea9e:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8020eaa1:	48 83 e8 20          	sub    $0x20,%rax
ffffffff8020eaa5:	0f 11 40 10          	movups %xmm0,0x10(%rax)
            for(Count--;Count>Start;Count--)
ffffffff8020eaa9:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020eaac:	75 f0                	jne    ffffffff8020ea9e <_RME_Kot_Mark+0x12e>
ffffffff8020eaae:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020eab1:	74 15                	je     ffffffff8020eac8 <_RME_Kot_Mark+0x158>
ffffffff8020eab3:	48 29 f2             	sub    %rsi,%rdx
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8020eab6:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020eabd:	80 ff ff 
ffffffff8020eac0:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
ffffffff8020eac7:	00 
            RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff8020eac8:	49 f7 d3             	not    %r11
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff8020eacb:	4c 8b 1b             	mov    (%rbx),%r11
ffffffff8020eace:	f0 4c 21 1b          	lock and %r11,(%rbx)
        return RME_ERR_KOT_BMP;
ffffffff8020ead2:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8020ead9:	5b                   	pop    %rbx
ffffffff8020eada:	c3                   	ret
ffffffff8020eadb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Old_Val=RME_KOT_VA_BASE[End];
ffffffff8020eae0:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8020eae7:	80 ff ff 
ffffffff8020eaea:	48 8d 14 f0          	lea    (%rax,%rsi,8),%rdx
ffffffff8020eaee:	48 8b 02             	mov    (%rdx),%rax
            if((Old_Val&Mask_End)!=0U)
ffffffff8020eaf1:	49 85 c1             	test   %rax,%r9
ffffffff8020eaf4:	0f 85 53 ff ff ff    	jne    ffffffff8020ea4d <_RME_Kot_Mark+0xdd>
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[End],
ffffffff8020eafa:	49 09 c1             	or     %rax,%r9
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020eafd:	f0 4c 0f b1 0a       	lock cmpxchg %r9,(%rdx)
ffffffff8020eb02:	41 0f 94 c1          	sete   %r9b
ffffffff8020eb06:	45 84 c9             	test   %r9b,%r9b
ffffffff8020eb09:	0f 84 3e ff ff ff    	je     ffffffff8020ea4d <_RME_Kot_Mark+0xdd>
    return 0;
ffffffff8020eb0f:	31 c0                	xor    %eax,%eax
}
ffffffff8020eb11:	5b                   	pop    %rbx
ffffffff8020eb12:	c3                   	ret
ffffffff8020eb13:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
ffffffff8020eb18:	4d 21 d9             	and    %r11,%r9
ffffffff8020eb1b:	49 85 c1             	test   %rax,%r9
ffffffff8020eb1e:	75 b2                	jne    ffffffff8020ead2 <_RME_Kot_Mark+0x162>
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020eb20:	49 09 c1             	or     %rax,%r9
ffffffff8020eb23:	f0 4c 0f b1 0b       	lock cmpxchg %r9,(%rbx)
ffffffff8020eb28:	41 0f 94 c1          	sete   %r9b
ffffffff8020eb2c:	41 80 f9 01          	cmp    $0x1,%r9b
}
ffffffff8020eb30:	5b                   	pop    %rbx
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff8020eb31:	48 19 c0             	sbb    %rax,%rax
}
ffffffff8020eb34:	c3                   	ret
        return RME_ERR_KOT_BMP;
ffffffff8020eb35:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
}
ffffffff8020eb39:	c3                   	ret
ffffffff8020eb3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020eb40 <_RME_Cpt_Crt>:
{
ffffffff8020eb40:	48 89 f0             	mov    %rsi,%rax
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020eb43:	49 8d 71 ff          	lea    -0x1(%r9),%rsi
ffffffff8020eb47:	48 81 fe ff 7f 00 00 	cmp    $0x7fff,%rsi
ffffffff8020eb4e:	0f 87 d8 02 00 00    	ja     ffffffff8020ee2c <_RME_Cpt_Crt+0x2ec>
{
ffffffff8020eb54:	41 55                	push   %r13
ffffffff8020eb56:	41 54                	push   %r12
ffffffff8020eb58:	55                   	push   %rbp
ffffffff8020eb59:	4c 89 cd             	mov    %r9,%rbp
ffffffff8020eb5c:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020eb5d:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
ffffffff8020eb61:	f6 c4 80             	test   $0x80,%ah
ffffffff8020eb64:	0f 84 c6 01 00 00    	je     ffffffff8020ed30 <_RME_Cpt_Crt+0x1f0>
ffffffff8020eb6a:	48 89 c6             	mov    %rax,%rsi
ffffffff8020eb6d:	48 c1 ee 10          	shr    $0x10,%rsi
ffffffff8020eb71:	4c 39 ce             	cmp    %r9,%rsi
ffffffff8020eb74:	0f 83 fe 01 00 00    	jae    ffffffff8020ed78 <_RME_Cpt_Crt+0x238>
ffffffff8020eb7a:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020eb7e:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020eb82:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020eb89:	ff 00 00 
ffffffff8020eb8c:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020eb93:	00 00 00 
ffffffff8020eb96:	48 01 fe             	add    %rdi,%rsi
ffffffff8020eb99:	4c 8b 16             	mov    (%rsi),%r10
ffffffff8020eb9c:	4d 89 d4             	mov    %r10,%r12
ffffffff8020eb9f:	4d 21 dc             	and    %r11,%r12
ffffffff8020eba2:	49 39 dc             	cmp    %rbx,%r12
ffffffff8020eba5:	0f 84 b8 01 00 00    	je     ffffffff8020ed63 <_RME_Cpt_Crt+0x223>
ffffffff8020ebab:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020ebaf:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020ebb3:	0f 85 57 02 00 00    	jne    ffffffff8020ee10 <_RME_Cpt_Crt+0x2d0>
ffffffff8020ebb9:	4c 8b 56 28          	mov    0x28(%rsi),%r10
ffffffff8020ebbd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ebc2:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020ebc5:	0f 83 ad 01 00 00    	jae    ffffffff8020ed78 <_RME_Cpt_Crt+0x238>
ffffffff8020ebcb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ebcf:	48 03 46 18          	add    0x18(%rsi),%rax
ffffffff8020ebd3:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020ebd6:	49 21 f3             	and    %rsi,%r11
ffffffff8020ebd9:	49 39 db             	cmp    %rbx,%r11
ffffffff8020ebdc:	0f 84 81 01 00 00    	je     ffffffff8020ed63 <_RME_Cpt_Crt+0x223>
ffffffff8020ebe2:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020ebe6:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020ebea:	0f 85 20 02 00 00    	jne    ffffffff8020ee10 <_RME_Cpt_Crt+0x2d0>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020ebf0:	f6 c6 80             	test   $0x80,%dh
ffffffff8020ebf3:	0f 85 97 01 00 00    	jne    ffffffff8020ed90 <_RME_Cpt_Crt+0x250>
ffffffff8020ebf9:	4c 39 ca             	cmp    %r9,%rdx
ffffffff8020ebfc:	0f 83 76 01 00 00    	jae    ffffffff8020ed78 <_RME_Cpt_Crt+0x238>
ffffffff8020ec02:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020ec09:	00 00 00 
ffffffff8020ec0c:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020ec10:	48 01 fa             	add    %rdi,%rdx
ffffffff8020ec13:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020ec1a:	ff 00 00 
ffffffff8020ec1d:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8020ec20:	48 21 f7             	and    %rsi,%rdi
ffffffff8020ec23:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020ec26:	0f 84 37 01 00 00    	je     ffffffff8020ed63 <_RME_Cpt_Crt+0x223>
ffffffff8020ec2c:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020ec30:	48 83 fe 02          	cmp    $0x2,%rsi
ffffffff8020ec34:	0f 85 d6 01 00 00    	jne    ffffffff8020ee10 <_RME_Cpt_Crt+0x2d0>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020ec3a:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8020ec3e:	0f 84 bc 01 00 00    	je     ffffffff8020ee00 <_RME_Cpt_Crt+0x2c0>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020ec44:	f6 42 10 01          	testb  $0x1,0x10(%rdx)
ffffffff8020ec48:	0f 84 b2 01 00 00    	je     ffffffff8020ee00 <_RME_Cpt_Crt+0x2c0>
ffffffff8020ec4e:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8020ec52:	4c 39 c6             	cmp    %r8,%rsi
ffffffff8020ec55:	4e 8d 2c 06          	lea    (%rsi,%r8,1),%r13
ffffffff8020ec59:	49 0f 42 f0          	cmovb  %r8,%rsi
ffffffff8020ec5d:	49 39 f5             	cmp    %rsi,%r13
ffffffff8020ec60:	0f 82 9a 01 00 00    	jb     ffffffff8020ee00 <_RME_Cpt_Crt+0x2c0>
ffffffff8020ec66:	48 89 ee             	mov    %rbp,%rsi
ffffffff8020ec69:	31 db                	xor    %ebx,%ebx
ffffffff8020ec6b:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020ec6f:	48 89 f7             	mov    %rsi,%rdi
ffffffff8020ec72:	4c 01 ef             	add    %r13,%rdi
ffffffff8020ec75:	0f 92 c3             	setb   %bl
ffffffff8020ec78:	0f 82 82 01 00 00    	jb     ffffffff8020ee00 <_RME_Cpt_Crt+0x2c0>
ffffffff8020ec7e:	48 83 ef 01          	sub    $0x1,%rdi
ffffffff8020ec82:	48 39 7a 30          	cmp    %rdi,0x30(%rdx)
ffffffff8020ec86:	0f 82 74 01 00 00    	jb     ffffffff8020ee00 <_RME_Cpt_Crt+0x2c0>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020ec8c:	48 3b 48 28          	cmp    0x28(%rax),%rcx
ffffffff8020ec90:	0f 83 e2 00 00 00    	jae    ffffffff8020ed78 <_RME_Cpt_Crt+0x238>
ffffffff8020ec96:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020ec9d:	00 00 00 
ffffffff8020eca0:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020eca4:	48 03 48 18          	add    0x18(%rax),%rcx
ffffffff8020eca8:	48 89 d8             	mov    %rbx,%rax
ffffffff8020ecab:	49 89 cc             	mov    %rcx,%r12
ffffffff8020ecae:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8020ecb3:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020ecb6:	84 d2                	test   %dl,%dl
ffffffff8020ecb8:	0f 84 62 01 00 00    	je     ffffffff8020ee20 <_RME_Cpt_Crt+0x2e0>
ffffffff8020ecbe:	48 8b 05 4b 73 01 00 	mov    0x1734b(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020ecc5:	4c 89 ef             	mov    %r13,%rdi
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020ecc8:	48 89 41 20          	mov    %rax,0x20(%rcx)
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020eccc:	e8 9f fc ff ff       	call   ffffffff8020e970 <_RME_Kot_Mark>
ffffffff8020ecd1:	48 85 c0             	test   %rax,%rax
ffffffff8020ecd4:	0f 88 5a 01 00 00    	js     ffffffff8020ee34 <_RME_Cpt_Crt+0x2f4>
ffffffff8020ecda:	4c 89 e8             	mov    %r13,%rax
ffffffff8020ecdd:	0f 1f 00             	nopl   (%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020ece0:	48 83 c3 01          	add    $0x1,%rbx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020ece4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020eceb:	48 83 c0 40          	add    $0x40,%rax
ffffffff8020ecef:	48 39 eb             	cmp    %rbp,%rbx
ffffffff8020ecf2:	72 ec                	jb     ffffffff8020ece0 <_RME_Cpt_Crt+0x1a0>
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020ecf4:	48 b8 00 00 00 00 00 	movabs $0x3000000000000,%rax
ffffffff8020ecfb:	00 03 00 
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020ecfe:	49 c7 44 24 08 00 00 	movq   $0x0,0x8(%r12)
ffffffff8020ed05:	00 00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020ed07:	4d 89 6c 24 18       	mov    %r13,0x18(%r12)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020ed0c:	49 c7 44 24 10 ff 00 	movq   $0xff,0x10(%r12)
ffffffff8020ed13:	00 00 
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020ed15:	49 89 6c 24 28       	mov    %rbp,0x28(%r12)
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020ed1a:	49 89 04 24          	mov    %rax,(%r12)
    return 0;
ffffffff8020ed1e:	31 c0                	xor    %eax,%eax
}
ffffffff8020ed20:	5b                   	pop    %rbx
ffffffff8020ed21:	5d                   	pop    %rbp
ffffffff8020ed22:	41 5c                	pop    %r12
ffffffff8020ed24:	41 5d                	pop    %r13
ffffffff8020ed26:	c3                   	ret
ffffffff8020ed27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020ed2e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020ed30:	4c 39 c8             	cmp    %r9,%rax
ffffffff8020ed33:	73 43                	jae    ffffffff8020ed78 <_RME_Cpt_Crt+0x238>
ffffffff8020ed35:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8020ed39:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ed3d:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020ed44:	ff 00 00 
ffffffff8020ed47:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020ed4e:	00 00 00 
ffffffff8020ed51:	48 01 f8             	add    %rdi,%rax
ffffffff8020ed54:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020ed57:	49 21 f2             	and    %rsi,%r10
ffffffff8020ed5a:	4d 39 da             	cmp    %r11,%r10
ffffffff8020ed5d:	0f 85 7f fe ff ff    	jne    ffffffff8020ebe2 <_RME_Cpt_Crt+0xa2>
}
ffffffff8020ed63:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020ed64:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020ed6b:	5d                   	pop    %rbp
ffffffff8020ed6c:	41 5c                	pop    %r12
ffffffff8020ed6e:	41 5d                	pop    %r13
ffffffff8020ed70:	c3                   	ret
ffffffff8020ed71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        return RME_ERR_CPT_RANGE;
ffffffff8020ed78:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020ed7f:	5b                   	pop    %rbx
ffffffff8020ed80:	5d                   	pop    %rbp
ffffffff8020ed81:	41 5c                	pop    %r12
ffffffff8020ed83:	41 5d                	pop    %r13
ffffffff8020ed85:	c3                   	ret
ffffffff8020ed86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020ed8d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020ed90:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020ed93:	48 c1 ee 10          	shr    $0x10,%rsi
ffffffff8020ed97:	4c 39 ce             	cmp    %r9,%rsi
ffffffff8020ed9a:	73 dc                	jae    ffffffff8020ed78 <_RME_Cpt_Crt+0x238>
ffffffff8020ed9c:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020eda3:	ff 00 00 
ffffffff8020eda6:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020edaa:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020edb1:	00 00 00 
ffffffff8020edb4:	48 01 fe             	add    %rdi,%rsi
ffffffff8020edb7:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8020edba:	49 89 fb             	mov    %rdi,%r11
ffffffff8020edbd:	4d 21 cb             	and    %r9,%r11
ffffffff8020edc0:	4d 39 d3             	cmp    %r10,%r11
ffffffff8020edc3:	74 9e                	je     ffffffff8020ed63 <_RME_Cpt_Crt+0x223>
ffffffff8020edc5:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8020edc9:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8020edcd:	75 41                	jne    ffffffff8020ee10 <_RME_Cpt_Crt+0x2d0>
ffffffff8020edcf:	48 8b 7e 28          	mov    0x28(%rsi),%rdi
ffffffff8020edd3:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020edd9:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8020eddc:	73 9a                	jae    ffffffff8020ed78 <_RME_Cpt_Crt+0x238>
ffffffff8020edde:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020ede2:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff8020ede6:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8020ede9:	49 21 f1             	and    %rsi,%r9
ffffffff8020edec:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020edef:	0f 85 37 fe ff ff    	jne    ffffffff8020ec2c <_RME_Cpt_Crt+0xec>
ffffffff8020edf5:	e9 69 ff ff ff       	jmp    ffffffff8020ed63 <_RME_Cpt_Crt+0x223>
ffffffff8020edfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
}
ffffffff8020ee00:	5b                   	pop    %rbx
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020ee01:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff8020ee08:	5d                   	pop    %rbp
ffffffff8020ee09:	41 5c                	pop    %r12
ffffffff8020ee0b:	41 5d                	pop    %r13
ffffffff8020ee0d:	c3                   	ret
ffffffff8020ee0e:	66 90                	xchg   %ax,%ax
ffffffff8020ee10:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020ee11:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020ee18:	5d                   	pop    %rbp
ffffffff8020ee19:	41 5c                	pop    %r12
ffffffff8020ee1b:	41 5d                	pop    %r13
ffffffff8020ee1d:	c3                   	ret
ffffffff8020ee1e:	66 90                	xchg   %ax,%ax
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020ee20:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020ee27:	e9 53 ff ff ff       	jmp    ffffffff8020ed7f <_RME_Cpt_Crt+0x23f>
        return RME_ERR_CPT_RANGE;
ffffffff8020ee2c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020ee33:	c3                   	ret
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020ee34:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
ffffffff8020ee3b:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020ee3c:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020ee43:	e9 37 ff ff ff       	jmp    ffffffff8020ed7f <_RME_Cpt_Crt+0x23f>
ffffffff8020ee48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020ee4f:	00 

ffffffff8020ee50 <_RME_Pgt_Crt>:
{
ffffffff8020ee50:	41 57                	push   %r15
ffffffff8020ee52:	41 56                	push   %r14
ffffffff8020ee54:	41 55                	push   %r13
ffffffff8020ee56:	49 89 cd             	mov    %rcx,%r13
ffffffff8020ee59:	41 54                	push   %r12
ffffffff8020ee5b:	55                   	push   %rbp
ffffffff8020ee5c:	53                   	push   %rbx
ffffffff8020ee5d:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020ee61:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020ee66:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
ffffffff8020ee6b:	4c 01 e1             	add    %r12,%rcx
ffffffff8020ee6e:	48 83 f9 40          	cmp    $0x40,%rcx
ffffffff8020ee72:	0f 87 28 03 00 00    	ja     ffffffff8020f1a0 <_RME_Pgt_Crt+0x350>
ffffffff8020ee78:	48 89 f0             	mov    %rsi,%rax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ee7b:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020ee7f:	4d 89 ce             	mov    %r9,%r14
ffffffff8020ee82:	f6 c4 80             	test   $0x80,%ah
ffffffff8020ee85:	0f 84 05 02 00 00    	je     ffffffff8020f090 <_RME_Pgt_Crt+0x240>
ffffffff8020ee8b:	49 89 f2             	mov    %rsi,%r10
ffffffff8020ee8e:	49 c1 ea 10          	shr    $0x10,%r10
ffffffff8020ee92:	49 39 ca             	cmp    %rcx,%r10
ffffffff8020ee95:	0f 83 35 02 00 00    	jae    ffffffff8020f0d0 <_RME_Pgt_Crt+0x280>
ffffffff8020ee9b:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff8020ee9f:	49 c1 e2 06          	shl    $0x6,%r10
ffffffff8020eea3:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020eeaa:	ff 00 00 
ffffffff8020eead:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020eeb4:	00 00 00 
ffffffff8020eeb7:	49 01 f2             	add    %rsi,%r10
ffffffff8020eeba:	4d 8b 1a             	mov    (%r10),%r11
ffffffff8020eebd:	4c 89 db             	mov    %r11,%rbx
ffffffff8020eec0:	48 21 fb             	and    %rdi,%rbx
ffffffff8020eec3:	4c 39 cb             	cmp    %r9,%rbx
ffffffff8020eec6:	0f 84 f8 01 00 00    	je     ffffffff8020f0c4 <_RME_Pgt_Crt+0x274>
ffffffff8020eecc:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff8020eed0:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff8020eed4:	0f 85 86 02 00 00    	jne    ffffffff8020f160 <_RME_Pgt_Crt+0x310>
ffffffff8020eeda:	4d 8b 5a 28          	mov    0x28(%r10),%r11
ffffffff8020eede:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020eee3:	4c 39 d8             	cmp    %r11,%rax
ffffffff8020eee6:	0f 83 e4 01 00 00    	jae    ffffffff8020f0d0 <_RME_Pgt_Crt+0x280>
ffffffff8020eeec:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eef0:	49 03 42 18          	add    0x18(%r10),%rax
ffffffff8020eef4:	48 89 c3             	mov    %rax,%rbx
ffffffff8020eef7:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eefa:	48 21 c7             	and    %rax,%rdi
ffffffff8020eefd:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020ef00:	0f 84 be 01 00 00    	je     ffffffff8020f0c4 <_RME_Pgt_Crt+0x274>
ffffffff8020ef06:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ef0a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ef0e:	0f 85 4c 02 00 00    	jne    ffffffff8020f160 <_RME_Pgt_Crt+0x310>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020ef14:	f6 c6 80             	test   $0x80,%dh
ffffffff8020ef17:	0f 85 d3 01 00 00    	jne    ffffffff8020f0f0 <_RME_Pgt_Crt+0x2a0>
ffffffff8020ef1d:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020ef20:	0f 83 aa 01 00 00    	jae    ffffffff8020f0d0 <_RME_Pgt_Crt+0x280>
ffffffff8020ef26:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020ef2d:	ff 00 00 
ffffffff8020ef30:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020ef34:	48 8d 04 32          	lea    (%rdx,%rsi,1),%rax
ffffffff8020ef38:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8020ef3f:	00 00 00 
ffffffff8020ef42:	48 8b 10             	mov    (%rax),%rdx
ffffffff8020ef45:	48 21 d1             	and    %rdx,%rcx
ffffffff8020ef48:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020ef4b:	0f 84 73 01 00 00    	je     ffffffff8020f0c4 <_RME_Pgt_Crt+0x274>
ffffffff8020ef51:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020ef55:	48 83 fa 02          	cmp    $0x2,%rdx
ffffffff8020ef59:	0f 85 01 02 00 00    	jne    ffffffff8020f160 <_RME_Pgt_Crt+0x310>
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff8020ef5f:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020ef63:	0f 84 07 02 00 00    	je     ffffffff8020f170 <_RME_Pgt_Crt+0x320>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff8020ef69:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8020ef6d:	0f 84 fd 01 00 00    	je     ffffffff8020f170 <_RME_Pgt_Crt+0x320>
ffffffff8020ef73:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020ef77:	4c 39 c2             	cmp    %r8,%rdx
ffffffff8020ef7a:	4a 8d 2c 02          	lea    (%rdx,%r8,1),%rbp
ffffffff8020ef7e:	49 0f 42 d0          	cmovb  %r8,%rdx
ffffffff8020ef82:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020ef85:	0f 82 e5 01 00 00    	jb     ffffffff8020f170 <_RME_Pgt_Crt+0x320>
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020ef8b:	41 bf 01 00 00 00    	mov    $0x1,%r15d
ffffffff8020ef91:	44 89 e1             	mov    %r12d,%ecx
ffffffff8020ef94:	41 d3 e7             	shl    %cl,%r15d
ffffffff8020ef97:	4d 63 ff             	movslq %r15d,%r15
ffffffff8020ef9a:	49 c1 e7 03          	shl    $0x3,%r15
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff8020ef9e:	4c 89 fa             	mov    %r15,%rdx
ffffffff8020efa1:	48 01 ea             	add    %rbp,%rdx
ffffffff8020efa4:	0f 82 c6 01 00 00    	jb     ffffffff8020f170 <_RME_Pgt_Crt+0x320>
ffffffff8020efaa:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8020efae:	48 39 50 30          	cmp    %rdx,0x30(%rax)
ffffffff8020efb2:	0f 82 b8 01 00 00    	jb     ffffffff8020f170 <_RME_Pgt_Crt+0x320>
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
ffffffff8020efb8:	48 8b 54 24 48       	mov    0x48(%rsp),%rdx
ffffffff8020efbd:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
ffffffff8020efc2:	4c 89 e1             	mov    %r12,%rcx
ffffffff8020efc5:	49 89 e8             	mov    %rbp,%r8
ffffffff8020efc8:	4c 89 f7             	mov    %r14,%rdi
ffffffff8020efcb:	e8 10 bd 00 00       	call   ffffffff8021ace0 <__RME_Pgt_Check>
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020efd0:	b9 40 00 00 00       	mov    $0x40,%ecx
ffffffff8020efd5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020efdc:	44 29 e1             	sub    %r12d,%ecx
ffffffff8020efdf:	2b 4c 24 48          	sub    0x48(%rsp),%ecx
ffffffff8020efe3:	48 d3 e8             	shr    %cl,%rax
ffffffff8020efe6:	4c 21 f0             	and    %r14,%rax
ffffffff8020efe9:	0f 85 b1 01 00 00    	jne    ffffffff8020f1a0 <_RME_Pgt_Crt+0x350>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020efef:	4c 3b 6b 28          	cmp    0x28(%rbx),%r13
ffffffff8020eff3:	0f 83 d7 00 00 00    	jae    ffffffff8020f0d0 <_RME_Pgt_Crt+0x280>
ffffffff8020eff9:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f000:	00 00 00 
ffffffff8020f003:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8020f007:	4c 03 6b 18          	add    0x18(%rbx),%r13
ffffffff8020f00b:	f0 49 0f b1 55 00    	lock cmpxchg %rdx,0x0(%r13)
ffffffff8020f011:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020f014:	84 d2                	test   %dl,%dl
ffffffff8020f016:	0f 84 64 01 00 00    	je     ffffffff8020f180 <_RME_Pgt_Crt+0x330>
ffffffff8020f01c:	48 8b 05 ed 6f 01 00 	mov    0x16fed(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff8020f023:	4c 89 fe             	mov    %r15,%rsi
ffffffff8020f026:	48 89 ef             	mov    %rbp,%rdi
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020f029:	49 89 45 20          	mov    %rax,0x20(%r13)
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff8020f02d:	e8 3e f9 ff ff       	call   ffffffff8020e970 <_RME_Kot_Mark>
ffffffff8020f032:	48 89 c3             	mov    %rax,%rbx
ffffffff8020f035:	48 85 c0             	test   %rax,%rax
ffffffff8020f038:	0f 85 4e 01 00 00    	jne    ffffffff8020f18c <_RME_Pgt_Crt+0x33c>
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020f03e:	49 89 6d 18          	mov    %rbp,0x18(%r13)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f042:	48 8b 6c 24 48       	mov    0x48(%rsp),%rbp
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020f047:	4c 89 ef             	mov    %r13,%rdi
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f04a:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020f04f:	66 0f 6f 05 79 e3 00 	movdqa 0xe379(%rip),%xmm0        # ffffffff8021d3d0 <Table.1+0x110>
ffffffff8020f056:	00 
    Pgt_Crt->ASID=0U;
ffffffff8020f057:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
ffffffff8020f05e:	00 
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f05f:	48 c1 e5 20          	shl    $0x20,%rbp
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f063:	4c 09 f0             	or     %r14,%rax
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f066:	4c 09 e5             	or     %r12,%rbp
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020f069:	41 0f 11 45 08       	movups %xmm0,0x8(%r13)
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020f06e:	49 89 45 30          	mov    %rax,0x30(%r13)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020f072:	49 89 6d 28          	mov    %rbp,0x28(%r13)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020f076:	e8 b5 bc 00 00       	call   ffffffff8021ad30 <__RME_Pgt_Init>
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020f07b:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff8020f082:	00 04 00 
ffffffff8020f085:	49 89 45 00          	mov    %rax,0x0(%r13)
    return 0;
ffffffff8020f089:	eb 4c                	jmp    ffffffff8020f0d7 <_RME_Pgt_Crt+0x287>
ffffffff8020f08b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f090:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020f093:	73 3b                	jae    ffffffff8020f0d0 <_RME_Pgt_Crt+0x280>
ffffffff8020f095:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff8020f099:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f09d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f0a4:	ff 00 00 
ffffffff8020f0a7:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020f0ae:	00 00 00 
ffffffff8020f0b1:	48 8d 1c 30          	lea    (%rax,%rsi,1),%rbx
ffffffff8020f0b5:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020f0b8:	48 21 c7             	and    %rax,%rdi
ffffffff8020f0bb:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020f0be:	0f 85 42 fe ff ff    	jne    ffffffff8020ef06 <_RME_Pgt_Crt+0xb6>
ffffffff8020f0c4:	48 c7 c3 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rbx
ffffffff8020f0cb:	eb 0a                	jmp    ffffffff8020f0d7 <_RME_Pgt_Crt+0x287>
ffffffff8020f0cd:	0f 1f 00             	nopl   (%rax)
ffffffff8020f0d0:	48 c7 c3 fd ff ff ff 	mov    $0xfffffffffffffffd,%rbx
}
ffffffff8020f0d7:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020f0db:	48 89 d8             	mov    %rbx,%rax
ffffffff8020f0de:	5b                   	pop    %rbx
ffffffff8020f0df:	5d                   	pop    %rbp
ffffffff8020f0e0:	41 5c                	pop    %r12
ffffffff8020f0e2:	41 5d                	pop    %r13
ffffffff8020f0e4:	41 5e                	pop    %r14
ffffffff8020f0e6:	41 5f                	pop    %r15
ffffffff8020f0e8:	c3                   	ret
ffffffff8020f0e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f0f0:	48 89 d0             	mov    %rdx,%rax
ffffffff8020f0f3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f0f7:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020f0fa:	73 d4                	jae    ffffffff8020f0d0 <_RME_Pgt_Crt+0x280>
ffffffff8020f0fc:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f103:	00 00 00 
ffffffff8020f106:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f10a:	48 01 f0             	add    %rsi,%rax
ffffffff8020f10d:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f114:	ff 00 00 
ffffffff8020f117:	48 8b 08             	mov    (%rax),%rcx
ffffffff8020f11a:	49 89 c9             	mov    %rcx,%r9
ffffffff8020f11d:	49 21 f1             	and    %rsi,%r9
ffffffff8020f120:	49 39 f9             	cmp    %rdi,%r9
ffffffff8020f123:	74 9f                	je     ffffffff8020f0c4 <_RME_Pgt_Crt+0x274>
ffffffff8020f125:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f129:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f12d:	75 31                	jne    ffffffff8020f160 <_RME_Pgt_Crt+0x310>
ffffffff8020f12f:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff8020f133:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8020f139:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020f13c:	73 92                	jae    ffffffff8020f0d0 <_RME_Pgt_Crt+0x280>
ffffffff8020f13e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f142:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff8020f146:	48 89 d0             	mov    %rdx,%rax
ffffffff8020f149:	48 8b 12             	mov    (%rdx),%rdx
ffffffff8020f14c:	48 21 d6             	and    %rdx,%rsi
ffffffff8020f14f:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f152:	0f 85 f9 fd ff ff    	jne    ffffffff8020ef51 <_RME_Pgt_Crt+0x101>
ffffffff8020f158:	e9 67 ff ff ff       	jmp    ffffffff8020f0c4 <_RME_Pgt_Crt+0x274>
ffffffff8020f15d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f160:	48 c7 c3 fe ff ff ff 	mov    $0xfffffffffffffffe,%rbx
ffffffff8020f167:	e9 6b ff ff ff       	jmp    ffffffff8020f0d7 <_RME_Pgt_Crt+0x287>
ffffffff8020f16c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff8020f170:	48 c7 c3 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rbx
ffffffff8020f177:	e9 5b ff ff ff       	jmp    ffffffff8020f0d7 <_RME_Pgt_Crt+0x287>
ffffffff8020f17c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020f180:	48 c7 c3 fb ff ff ff 	mov    $0xfffffffffffffffb,%rbx
ffffffff8020f187:	e9 4b ff ff ff       	jmp    ffffffff8020f0d7 <_RME_Pgt_Crt+0x287>
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020f18c:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
ffffffff8020f193:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020f194:	48 c7 c3 fc ff ff ff 	mov    $0xfffffffffffffffc,%rbx
ffffffff8020f19b:	e9 37 ff ff ff       	jmp    ffffffff8020f0d7 <_RME_Pgt_Crt+0x287>
        return RME_ERR_PGT_HW;
ffffffff8020f1a0:	48 c7 c3 99 ff ff ff 	mov    $0xffffffffffffff99,%rbx
ffffffff8020f1a7:	e9 2b ff ff ff       	jmp    ffffffff8020f0d7 <_RME_Pgt_Crt+0x287>
ffffffff8020f1ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020f1b0 <_RME_Thd_Crt>:
{
ffffffff8020f1b0:	41 57                	push   %r15
ffffffff8020f1b2:	49 89 ff             	mov    %rdi,%r15
ffffffff8020f1b5:	41 56                	push   %r14
ffffffff8020f1b7:	49 89 d6             	mov    %rdx,%r14
ffffffff8020f1ba:	41 55                	push   %r13
ffffffff8020f1bc:	4d 89 cd             	mov    %r9,%r13
ffffffff8020f1bf:	41 54                	push   %r12
ffffffff8020f1c1:	49 89 cc             	mov    %rcx,%r12
ffffffff8020f1c4:	55                   	push   %rbp
ffffffff8020f1c5:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020f1c8:	53                   	push   %rbx
ffffffff8020f1c9:	48 89 f3             	mov    %rsi,%rbx
ffffffff8020f1cc:	48 83 ec 08          	sub    $0x8,%rsp
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
ffffffff8020f1d0:	e8 6a c6 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020f1d5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f1d9:	4c 39 68 48          	cmp    %r13,0x48(%rax)
ffffffff8020f1dd:	0f 82 7d 04 00 00    	jb     ffffffff8020f660 <_RME_Thd_Crt+0x4b0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f1e3:	49 8b 57 28          	mov    0x28(%r15),%rdx
ffffffff8020f1e7:	f6 c7 80             	test   $0x80,%bh
ffffffff8020f1ea:	0f 84 00 03 00 00    	je     ffffffff8020f4f0 <_RME_Thd_Crt+0x340>
ffffffff8020f1f0:	48 89 d8             	mov    %rbx,%rax
ffffffff8020f1f3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f1f7:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f1fa:	0f 83 c0 03 00 00    	jae    ffffffff8020f5c0 <_RME_Thd_Crt+0x410>
ffffffff8020f200:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff8020f204:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f208:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f20f:	ff 00 00 
ffffffff8020f212:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020f219:	00 00 00 
ffffffff8020f21c:	48 01 c8             	add    %rcx,%rax
ffffffff8020f21f:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020f222:	49 89 f1             	mov    %rsi,%r9
ffffffff8020f225:	49 21 f9             	and    %rdi,%r9
ffffffff8020f228:	4d 39 c1             	cmp    %r8,%r9
ffffffff8020f22b:	0f 84 ff 02 00 00    	je     ffffffff8020f530 <_RME_Thd_Crt+0x380>
ffffffff8020f231:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020f235:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020f239:	0f 85 a1 03 00 00    	jne    ffffffff8020f5e0 <_RME_Thd_Crt+0x430>
ffffffff8020f23f:	48 8b 70 28          	mov    0x28(%rax),%rsi
ffffffff8020f243:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8020f249:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8020f24c:	0f 83 6e 03 00 00    	jae    ffffffff8020f5c0 <_RME_Thd_Crt+0x410>
ffffffff8020f252:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020f256:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8020f25a:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020f25d:	48 21 c7             	and    %rax,%rdi
ffffffff8020f260:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020f263:	0f 84 c7 02 00 00    	je     ffffffff8020f530 <_RME_Thd_Crt+0x380>
ffffffff8020f269:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f26d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f271:	0f 85 69 03 00 00    	jne    ffffffff8020f5e0 <_RME_Thd_Crt+0x430>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f277:	41 f7 c6 00 80 00 00 	test   $0x8000,%r14d
ffffffff8020f27e:	0f 85 cc 02 00 00    	jne    ffffffff8020f550 <_RME_Thd_Crt+0x3a0>
ffffffff8020f284:	49 39 d6             	cmp    %rdx,%r14
ffffffff8020f287:	0f 83 33 03 00 00    	jae    ffffffff8020f5c0 <_RME_Thd_Crt+0x410>
ffffffff8020f28d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f294:	ff 00 00 
ffffffff8020f297:	49 c1 e6 06          	shl    $0x6,%r14
ffffffff8020f29b:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020f2a2:	00 00 00 
ffffffff8020f2a5:	49 8d 04 0e          	lea    (%r14,%rcx,1),%rax
ffffffff8020f2a9:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020f2ac:	48 21 f7             	and    %rsi,%rdi
ffffffff8020f2af:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020f2b2:	0f 84 78 02 00 00    	je     ffffffff8020f530 <_RME_Thd_Crt+0x380>
ffffffff8020f2b8:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020f2bc:	48 83 fe 02          	cmp    $0x2,%rsi
ffffffff8020f2c0:	0f 85 1a 03 00 00    	jne    ffffffff8020f5e0 <_RME_Thd_Crt+0x430>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020f2c6:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff8020f2cc:	0f 84 2e 03 00 00    	je     ffffffff8020f600 <_RME_Thd_Crt+0x450>
ffffffff8020f2d2:	48 89 ee             	mov    %rbp,%rsi
ffffffff8020f2d5:	48 c1 ee 10          	shr    $0x10,%rsi
ffffffff8020f2d9:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8020f2dc:	0f 83 de 02 00 00    	jae    ffffffff8020f5c0 <_RME_Thd_Crt+0x410>
ffffffff8020f2e2:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f2e9:	00 00 00 
ffffffff8020f2ec:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8020f2f0:	48 8d 14 0e          	lea    (%rsi,%rcx,1),%rdx
ffffffff8020f2f4:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f2fb:	ff 00 00 
ffffffff8020f2fe:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020f301:	49 89 c8             	mov    %rcx,%r8
ffffffff8020f304:	49 21 f0             	and    %rsi,%r8
ffffffff8020f307:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020f30a:	0f 84 20 02 00 00    	je     ffffffff8020f530 <_RME_Thd_Crt+0x380>
ffffffff8020f310:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f314:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f318:	0f 85 c2 02 00 00    	jne    ffffffff8020f5e0 <_RME_Thd_Crt+0x430>
ffffffff8020f31e:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020f322:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff8020f328:	48 39 cd             	cmp    %rcx,%rbp
ffffffff8020f32b:	0f 83 8f 02 00 00    	jae    ffffffff8020f5c0 <_RME_Thd_Crt+0x410>
ffffffff8020f331:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020f335:	48 03 6a 18          	add    0x18(%rdx),%rbp
ffffffff8020f339:	48 8b 55 00          	mov    0x0(%rbp),%rdx
ffffffff8020f33d:	48 21 d6             	and    %rdx,%rsi
ffffffff8020f340:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f343:	0f 84 e7 01 00 00    	je     ffffffff8020f530 <_RME_Thd_Crt+0x380>
ffffffff8020f349:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8020f34d:	48 83 fa 05          	cmp    $0x5,%rdx
ffffffff8020f351:	0f 85 89 02 00 00    	jne    ffffffff8020f5e0 <_RME_Thd_Crt+0x430>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f357:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020f35b:	0f 84 d7 02 00 00    	je     ffffffff8020f638 <_RME_Thd_Crt+0x488>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff8020f361:	f6 45 10 02          	testb  $0x2,0x10(%rbp)
ffffffff8020f365:	0f 84 cd 02 00 00    	je     ffffffff8020f638 <_RME_Thd_Crt+0x488>
    if(Is_Hyp==0U)
ffffffff8020f36b:	48 83 7c 24 50 00    	cmpq   $0x0,0x50(%rsp)
ffffffff8020f371:	0f 85 f5 02 00 00    	jne    ffffffff8020f66c <_RME_Thd_Crt+0x4bc>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff8020f377:	f6 40 10 04          	testb  $0x4,0x10(%rax)
ffffffff8020f37b:	0f 84 b7 02 00 00    	je     ffffffff8020f638 <_RME_Thd_Crt+0x488>
ffffffff8020f381:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f385:	4c 8b 74 24 40       	mov    0x40(%rsp),%r14
ffffffff8020f38a:	49 01 d6             	add    %rdx,%r14
ffffffff8020f38d:	48 3b 54 24 40       	cmp    0x40(%rsp),%rdx
ffffffff8020f392:	48 0f 42 54 24 40    	cmovb  0x40(%rsp),%rdx
ffffffff8020f398:	49 39 d6             	cmp    %rdx,%r14
ffffffff8020f39b:	0f 82 97 02 00 00    	jb     ffffffff8020f638 <_RME_Thd_Crt+0x488>
ffffffff8020f3a1:	49 81 fe 9f fe ff ff 	cmp    $0xfffffffffffffe9f,%r14
ffffffff8020f3a8:	0f 87 8a 02 00 00    	ja     ffffffff8020f638 <_RME_Thd_Crt+0x488>
ffffffff8020f3ae:	49 8d 96 5f 01 00 00 	lea    0x15f(%r14),%rdx
ffffffff8020f3b5:	48 39 50 30          	cmp    %rdx,0x30(%rax)
ffffffff8020f3b9:	0f 82 79 02 00 00    	jb     ffffffff8020f638 <_RME_Thd_Crt+0x488>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8020f3bf:	4c 3b 63 28          	cmp    0x28(%rbx),%r12
ffffffff8020f3c3:	0f 83 f7 01 00 00    	jae    ffffffff8020f5c0 <_RME_Thd_Crt+0x410>
ffffffff8020f3c9:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8020f3cd:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
ffffffff8020f3d2:	4c 03 63 18          	add    0x18(%rbx),%r12
ffffffff8020f3d6:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f3dd:	00 00 00 
ffffffff8020f3e0:	f0 49 0f b1 14 24    	lock cmpxchg %rdx,(%r12)
ffffffff8020f3e6:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020f3e9:	84 d2                	test   %dl,%dl
ffffffff8020f3eb:	0f 84 5f 02 00 00    	je     ffffffff8020f650 <_RME_Thd_Crt+0x4a0>
ffffffff8020f3f1:	48 8b 05 18 6c 01 00 	mov    0x16c18(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff8020f3f8:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8020f3fd:	4c 89 f7             	mov    %r14,%rdi
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020f400:	49 89 44 24 20       	mov    %rax,0x20(%r12)
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff8020f405:	e8 66 f5 ff ff       	call   ffffffff8020e970 <_RME_Kot_Mark>
ffffffff8020f40a:	48 85 c0             	test   %rax,%rax
ffffffff8020f40d:	0f 88 65 02 00 00    	js     ffffffff8020f678 <_RME_Thd_Crt+0x4c8>
    Thread->Sched.Slice=0U;
ffffffff8020f413:	66 0f 6f 05 c5 df 00 	movdqa 0xdfc5(%rip),%xmm0        # ffffffff8021d3e0 <Table.1+0x120>
ffffffff8020f41a:	00 
    Thread->Sched.TID=0U;
ffffffff8020f41b:	49 c7 46 20 00 00 00 	movq   $0x0,0x20(%r14)
ffffffff8020f422:	00 
    Thread->Sched.Slice=0U;
ffffffff8020f423:	41 0f 11 46 30       	movups %xmm0,0x30(%r14)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8020f428:	8b 45 00             	mov    0x0(%rbp),%eax
ffffffff8020f42b:	85 c0                	test   %eax,%eax
ffffffff8020f42d:	74 04                	je     ffffffff8020f433 <_RME_Thd_Crt+0x283>
ffffffff8020f42f:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8020f433:	49 8d 46 10          	lea    0x10(%r14),%rax
    Thread->Sched.Prc=Prc_Root;
ffffffff8020f437:	49 89 6e 58          	mov    %rbp,0x58(%r14)
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff8020f43b:	66 48 0f 6e c0       	movq   %rax,%xmm0
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff8020f440:	49 8d 46 78          	lea    0x78(%r14),%rax
    Thread->Sched.Signal=0U;
ffffffff8020f444:	49 c7 46 50 00 00 00 	movq   $0x0,0x50(%r14)
ffffffff8020f44b:	00 
    Head->Prev=Head;
ffffffff8020f44c:	49 89 86 80 00 00 00 	mov    %rax,0x80(%r14)
    Head->Next=Head;
ffffffff8020f453:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
ffffffff8020f457:	49 89 46 78          	mov    %rax,0x78(%r14)
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff8020f45b:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    Head->Next=Head;
ffffffff8020f460:	41 0f 11 46 10       	movups %xmm0,0x10(%r14)
    Thd_Crt->Head.Root_Ref=0U;
ffffffff8020f465:	66 0f 6f 05 83 df 00 	movdqa 0xdf83(%rip),%xmm0        # ffffffff8021d3f0 <Table.1+0x130>
ffffffff8020f46c:	00 
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff8020f46d:	49 89 86 88 00 00 00 	mov    %rax,0x88(%r14)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff8020f474:	49 8d 86 b0 00 00 00 	lea    0xb0(%r14),%rax
ffffffff8020f47b:	49 89 86 90 00 00 00 	mov    %rax,0x90(%r14)
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff8020f482:	49 8d 86 98 00 00 00 	lea    0x98(%r14),%rax
    Head->Prev=Head;
ffffffff8020f489:	49 89 86 a0 00 00 00 	mov    %rax,0xa0(%r14)
    Head->Next=Head;
ffffffff8020f490:	49 89 86 98 00 00 00 	mov    %rax,0x98(%r14)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020f497:	b8 01 00 00 00       	mov    $0x1,%eax
    Thread->Sched.Prio_Max=Prio_Max;
ffffffff8020f49c:	4d 89 6e 48          	mov    %r13,0x48(%r14)
    Thread->Sched.Sched_Ref=0U;
ffffffff8020f4a0:	49 c7 46 60 00 00 00 	movq   $0x0,0x60(%r14)
ffffffff8020f4a7:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff8020f4a8:	49 c7 46 70 00 00 00 	movq   $0x0,0x70(%r14)
ffffffff8020f4af:	00 
    Thread->Sched.Local=RME_THD_FREE;
ffffffff8020f4b0:	49 c7 46 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%r14)
ffffffff8020f4b7:	ff 
    Thread->Ctx.Invstk_Depth=0U;
ffffffff8020f4b8:	49 c7 86 a8 00 00 00 	movq   $0x0,0xa8(%r14)
ffffffff8020f4bf:	00 00 00 00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff8020f4c3:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
    Thd_Crt->Head.Root_Ref=0U;
ffffffff8020f4c8:	41 0f 11 44 24 08    	movups %xmm0,0x8(%r12)
ffffffff8020f4ce:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff8020f4d4:	48 b8 00 00 00 00 00 	movabs $0x6000000000000,%rax
ffffffff8020f4db:	00 06 00 
ffffffff8020f4de:	49 89 04 24          	mov    %rax,(%r12)
    return 0;
ffffffff8020f4e2:	31 c0                	xor    %eax,%eax
ffffffff8020f4e4:	eb 51                	jmp    ffffffff8020f537 <_RME_Thd_Crt+0x387>
ffffffff8020f4e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020f4ed:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f4f0:	48 39 d3             	cmp    %rdx,%rbx
ffffffff8020f4f3:	0f 83 c7 00 00 00    	jae    ffffffff8020f5c0 <_RME_Thd_Crt+0x410>
ffffffff8020f4f9:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff8020f4fd:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020f501:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f508:	ff 00 00 
ffffffff8020f50b:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f512:	00 00 00 
ffffffff8020f515:	48 01 cb             	add    %rcx,%rbx
ffffffff8020f518:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020f51b:	48 21 c6             	and    %rax,%rsi
ffffffff8020f51e:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f521:	0f 85 42 fd ff ff    	jne    ffffffff8020f269 <_RME_Thd_Crt+0xb9>
ffffffff8020f527:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020f52e:	00 00 
ffffffff8020f530:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020f537:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020f53b:	5b                   	pop    %rbx
ffffffff8020f53c:	5d                   	pop    %rbp
ffffffff8020f53d:	41 5c                	pop    %r12
ffffffff8020f53f:	41 5d                	pop    %r13
ffffffff8020f541:	41 5e                	pop    %r14
ffffffff8020f543:	41 5f                	pop    %r15
ffffffff8020f545:	c3                   	ret
ffffffff8020f546:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020f54d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020f550:	4c 89 f0             	mov    %r14,%rax
ffffffff8020f553:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f557:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f55a:	73 64                	jae    ffffffff8020f5c0 <_RME_Thd_Crt+0x410>
ffffffff8020f55c:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020f563:	ff 00 00 
ffffffff8020f566:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f56a:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8020f571:	00 00 00 
ffffffff8020f574:	48 01 c8             	add    %rcx,%rax
ffffffff8020f577:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020f57a:	49 89 f1             	mov    %rsi,%r9
ffffffff8020f57d:	49 21 f9             	and    %rdi,%r9
ffffffff8020f580:	4d 39 c1             	cmp    %r8,%r9
ffffffff8020f583:	74 ab                	je     ffffffff8020f530 <_RME_Thd_Crt+0x380>
ffffffff8020f585:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020f589:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020f58d:	75 51                	jne    ffffffff8020f5e0 <_RME_Thd_Crt+0x430>
ffffffff8020f58f:	48 8b 70 28          	mov    0x28(%rax),%rsi
ffffffff8020f593:	41 81 e6 ff 7f 00 00 	and    $0x7fff,%r14d
ffffffff8020f59a:	49 39 f6             	cmp    %rsi,%r14
ffffffff8020f59d:	73 21                	jae    ffffffff8020f5c0 <_RME_Thd_Crt+0x410>
ffffffff8020f59f:	49 c1 e6 06          	shl    $0x6,%r14
ffffffff8020f5a3:	4c 03 70 18          	add    0x18(%rax),%r14
ffffffff8020f5a7:	49 8b 36             	mov    (%r14),%rsi
ffffffff8020f5aa:	4c 89 f0             	mov    %r14,%rax
ffffffff8020f5ad:	48 21 f7             	and    %rsi,%rdi
ffffffff8020f5b0:	4c 39 c7             	cmp    %r8,%rdi
ffffffff8020f5b3:	0f 85 ff fc ff ff    	jne    ffffffff8020f2b8 <_RME_Thd_Crt+0x108>
ffffffff8020f5b9:	e9 72 ff ff ff       	jmp    ffffffff8020f530 <_RME_Thd_Crt+0x380>
ffffffff8020f5be:	66 90                	xchg   %ax,%ax
}
ffffffff8020f5c0:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f5c4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020f5cb:	5b                   	pop    %rbx
ffffffff8020f5cc:	5d                   	pop    %rbp
ffffffff8020f5cd:	41 5c                	pop    %r12
ffffffff8020f5cf:	41 5d                	pop    %r13
ffffffff8020f5d1:	41 5e                	pop    %r14
ffffffff8020f5d3:	41 5f                	pop    %r15
ffffffff8020f5d5:	c3                   	ret
ffffffff8020f5d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020f5dd:	00 00 00 
ffffffff8020f5e0:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f5e4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020f5eb:	5b                   	pop    %rbx
ffffffff8020f5ec:	5d                   	pop    %rbp
ffffffff8020f5ed:	41 5c                	pop    %r12
ffffffff8020f5ef:	41 5d                	pop    %r13
ffffffff8020f5f1:	41 5e                	pop    %r14
ffffffff8020f5f3:	41 5f                	pop    %r15
ffffffff8020f5f5:	c3                   	ret
ffffffff8020f5f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020f5fd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020f600:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8020f603:	73 bb                	jae    ffffffff8020f5c0 <_RME_Thd_Crt+0x410>
ffffffff8020f605:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8020f60c:	00 00 00 
ffffffff8020f60f:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020f613:	48 01 cd             	add    %rcx,%rbp
ffffffff8020f616:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020f61d:	ff 00 00 
ffffffff8020f620:	48 8b 55 00          	mov    0x0(%rbp),%rdx
ffffffff8020f624:	48 21 d1             	and    %rdx,%rcx
ffffffff8020f627:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020f62a:	0f 85 19 fd ff ff    	jne    ffffffff8020f349 <_RME_Thd_Crt+0x199>
ffffffff8020f630:	e9 fb fe ff ff       	jmp    ffffffff8020f530 <_RME_Thd_Crt+0x380>
ffffffff8020f635:	0f 1f 00             	nopl   (%rax)
}
ffffffff8020f638:	48 83 c4 08          	add    $0x8,%rsp
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f63c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff8020f643:	5b                   	pop    %rbx
ffffffff8020f644:	5d                   	pop    %rbp
ffffffff8020f645:	41 5c                	pop    %r12
ffffffff8020f647:	41 5d                	pop    %r13
ffffffff8020f649:	41 5e                	pop    %r14
ffffffff8020f64b:	41 5f                	pop    %r15
ffffffff8020f64d:	c3                   	ret
ffffffff8020f64e:	66 90                	xchg   %ax,%ax
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8020f650:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f657:	e9 db fe ff ff       	jmp    ffffffff8020f537 <_RME_Thd_Crt+0x387>
ffffffff8020f65c:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_PRIO;
ffffffff8020f660:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8020f667:	e9 cb fe ff ff       	jmp    ffffffff8020f537 <_RME_Thd_Crt+0x387>
        return RME_ERR_PTH_HADDR;
ffffffff8020f66c:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8020f673:	e9 bf fe ff ff       	jmp    ffffffff8020f537 <_RME_Thd_Crt+0x387>
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff8020f678:	31 d2                	xor    %edx,%edx
        return RME_ERR_CPT_KOT;
ffffffff8020f67a:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff8020f681:	49 89 14 24          	mov    %rdx,(%r12)
        return RME_ERR_CPT_KOT;
ffffffff8020f685:	e9 ad fe ff ff       	jmp    ffffffff8020f537 <_RME_Thd_Crt+0x387>
ffffffff8020f68a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8020f690 <_RME_Cpt_Boot_Init>:
{
ffffffff8020f690:	f3 0f 1e fa          	endbr64
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020f694:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
ffffffff8020f698:	48 3d ff 7f 00 00    	cmp    $0x7fff,%rax
ffffffff8020f69e:	0f 87 93 00 00 00    	ja     ffffffff8020f737 <_RME_Cpt_Boot_Init+0xa7>
{
ffffffff8020f6a4:	41 55                	push   %r13
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f6a6:	49 89 d5             	mov    %rdx,%r13
{
ffffffff8020f6a9:	41 54                	push   %r12
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f6ab:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8020f6af:	49 89 d4             	mov    %rdx,%r12
{
ffffffff8020f6b2:	55                   	push   %rbp
ffffffff8020f6b3:	48 89 fd             	mov    %rdi,%rbp
ffffffff8020f6b6:	53                   	push   %rbx
ffffffff8020f6b7:	48 89 f3             	mov    %rsi,%rbx
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f6ba:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020f6bd:	48 89 df             	mov    %rbx,%rdi
ffffffff8020f6c0:	e8 ab f2 ff ff       	call   ffffffff8020e970 <_RME_Kot_Mark>
ffffffff8020f6c5:	48 85 c0             	test   %rax,%rax
ffffffff8020f6c8:	75 75                	jne    ffffffff8020f73f <_RME_Cpt_Boot_Init+0xaf>
ffffffff8020f6ca:	49 8d 54 1d 00       	lea    0x0(%r13,%rbx,1),%rdx
ffffffff8020f6cf:	41 83 e5 40          	and    $0x40,%r13d
ffffffff8020f6d3:	48 89 d8             	mov    %rbx,%rax
ffffffff8020f6d6:	74 18                	je     ffffffff8020f6f0 <_RME_Cpt_Boot_Init+0x60>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f6d8:	48 8d 43 40          	lea    0x40(%rbx),%rax
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f6dc:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f6e3:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f6e6:	74 20                	je     ffffffff8020f708 <_RME_Cpt_Boot_Init+0x78>
ffffffff8020f6e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f6ef:	00 
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f6f0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f6f7:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f6fb:	48 c7 40 c0 00 00 00 	movq   $0x0,-0x40(%rax)
ffffffff8020f702:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f703:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f706:	75 e8                	jne    ffffffff8020f6f0 <_RME_Cpt_Boot_Init+0x60>
    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020f708:	48 89 e8             	mov    %rbp,%rax
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020f70b:	66 0f 6f 05 ed dc 00 	movdqa 0xdced(%rip),%xmm0        # ffffffff8021d400 <Table.1+0x140>
ffffffff8020f712:	00 
    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020f713:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f717:	48 01 d8             	add    %rbx,%rax
    Cpt->Head.Object=Vaddr;
ffffffff8020f71a:	48 89 58 18          	mov    %rbx,0x18(%rax)
    Cpt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020f71e:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020f725:	00 
    Cpt->Entry_Num=Entry_Num;
ffffffff8020f726:	4c 89 60 28          	mov    %r12,0x28(%rax)
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020f72a:	0f 11 00             	movups %xmm0,(%rax)
    return Cap_Cpt;
ffffffff8020f72d:	48 89 e8             	mov    %rbp,%rax
}
ffffffff8020f730:	5b                   	pop    %rbx
ffffffff8020f731:	5d                   	pop    %rbp
ffffffff8020f732:	41 5c                	pop    %r12
ffffffff8020f734:	41 5d                	pop    %r13
ffffffff8020f736:	c3                   	ret
        return RME_ERR_CPT_RANGE;
ffffffff8020f737:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020f73e:	c3                   	ret
        return RME_ERR_CPT_KOT;
ffffffff8020f73f:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020f746:	eb e8                	jmp    ffffffff8020f730 <_RME_Cpt_Boot_Init+0xa0>
ffffffff8020f748:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020f74f:	00 

ffffffff8020f750 <_RME_Cpt_Boot_Crt>:
{
ffffffff8020f750:	f3 0f 1e fa          	endbr64
ffffffff8020f754:	41 55                	push   %r13
ffffffff8020f756:	41 54                	push   %r12
ffffffff8020f758:	55                   	push   %rbp
ffffffff8020f759:	53                   	push   %rbx
ffffffff8020f75a:	48 89 d3             	mov    %rdx,%rbx
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020f75d:	49 8d 50 ff          	lea    -0x1(%r8),%rdx
ffffffff8020f761:	48 81 fa ff 7f 00 00 	cmp    $0x7fff,%rdx
ffffffff8020f768:	0f 87 b2 01 00 00    	ja     ffffffff8020f920 <_RME_Cpt_Boot_Crt+0x1d0>
ffffffff8020f76e:	48 89 f0             	mov    %rsi,%rax
ffffffff8020f771:	48 89 cd             	mov    %rcx,%rbp
ffffffff8020f774:	4d 89 c4             	mov    %r8,%r12
    RME_CPT_GETCAP(Cpt,
ffffffff8020f777:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020f77b:	f6 c4 80             	test   $0x80,%ah
ffffffff8020f77e:	0f 84 54 01 00 00    	je     ffffffff8020f8d8 <_RME_Cpt_Boot_Crt+0x188>
ffffffff8020f784:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020f787:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f78b:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020f78e:	0f 83 8c 01 00 00    	jae    ffffffff8020f920 <_RME_Cpt_Boot_Crt+0x1d0>
ffffffff8020f794:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f79b:	ff 00 00 
ffffffff8020f79e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f7a2:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020f7a6:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f7ad:	00 00 00 
ffffffff8020f7b0:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020f7b3:	49 89 c8             	mov    %rcx,%r8
ffffffff8020f7b6:	49 21 f0             	and    %rsi,%r8
ffffffff8020f7b9:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020f7bc:	0f 84 49 01 00 00    	je     ffffffff8020f90b <_RME_Cpt_Boot_Crt+0x1bb>
ffffffff8020f7c2:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f7c6:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f7ca:	0f 85 60 01 00 00    	jne    ffffffff8020f930 <_RME_Cpt_Boot_Crt+0x1e0>
ffffffff8020f7d0:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020f7d4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f7d9:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020f7dc:	0f 83 3e 01 00 00    	jae    ffffffff8020f920 <_RME_Cpt_Boot_Crt+0x1d0>
ffffffff8020f7e2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f7e6:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020f7ea:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f7ed:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f7f0:	48 21 c6             	and    %rax,%rsi
ffffffff8020f7f3:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020f7f6:	0f 84 0f 01 00 00    	je     ffffffff8020f90b <_RME_Cpt_Boot_Crt+0x1bb>
ffffffff8020f7fc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f800:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f804:	0f 85 26 01 00 00    	jne    ffffffff8020f930 <_RME_Cpt_Boot_Crt+0x1e0>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f80a:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff8020f80e:	48 f7 d0             	not    %rax
ffffffff8020f811:	83 e0 01             	and    $0x1,%eax
ffffffff8020f814:	0f 85 26 01 00 00    	jne    ffffffff8020f940 <_RME_Cpt_Boot_Crt+0x1f0>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020f81a:	48 3b 5a 28          	cmp    0x28(%rdx),%rbx
ffffffff8020f81e:	0f 83 fc 00 00 00    	jae    ffffffff8020f920 <_RME_Cpt_Boot_Crt+0x1d0>
ffffffff8020f824:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8020f828:	48 03 5a 18          	add    0x18(%rdx),%rbx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff8020f82c:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f833:	00 00 00 
ffffffff8020f836:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
ffffffff8020f83b:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020f83e:	84 d2                	test   %dl,%dl
ffffffff8020f840:	0f 84 0a 01 00 00    	je     ffffffff8020f950 <_RME_Cpt_Boot_Crt+0x200>
ffffffff8020f846:	48 8b 05 c3 67 01 00 	mov    0x167c3(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f84d:	4d 89 e5             	mov    %r12,%r13
ffffffff8020f850:	48 89 ef             	mov    %rbp,%rdi
ffffffff8020f853:	49 c1 e5 06          	shl    $0x6,%r13
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020f857:	48 89 43 20          	mov    %rax,0x20(%rbx)
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020f85b:	4c 89 ee             	mov    %r13,%rsi
ffffffff8020f85e:	e8 0d f1 ff ff       	call   ffffffff8020e970 <_RME_Kot_Mark>
ffffffff8020f863:	48 85 c0             	test   %rax,%rax
ffffffff8020f866:	0f 85 f0 00 00 00    	jne    ffffffff8020f95c <_RME_Cpt_Boot_Crt+0x20c>
ffffffff8020f86c:	49 8d 4c 2d 00       	lea    0x0(%r13,%rbp,1),%rcx
ffffffff8020f871:	41 83 e5 40          	and    $0x40,%r13d
ffffffff8020f875:	48 89 ea             	mov    %rbp,%rdx
ffffffff8020f878:	74 16                	je     ffffffff8020f890 <_RME_Cpt_Boot_Crt+0x140>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f87a:	48 8d 55 40          	lea    0x40(%rbp),%rdx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f87e:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8020f885:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f886:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8020f889:	74 1d                	je     ffffffff8020f8a8 <_RME_Cpt_Boot_Crt+0x158>
ffffffff8020f88b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f890:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f897:	48 83 ea 80          	sub    $0xffffffffffffff80,%rdx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020f89b:	48 c7 42 c0 00 00 00 	movq   $0x0,-0x40(%rdx)
ffffffff8020f8a2:	00 
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020f8a3:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8020f8a6:	75 e8                	jne    ffffffff8020f890 <_RME_Cpt_Boot_Crt+0x140>
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020f8a8:	48 be 00 00 00 00 00 	movabs $0x3000000000000,%rsi
ffffffff8020f8af:	00 03 00 
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020f8b2:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff8020f8b9:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020f8ba:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020f8be:	48 c7 43 10 ff 00 00 	movq   $0xff,0x10(%rbx)
ffffffff8020f8c5:	00 
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020f8c6:	4c 89 63 28          	mov    %r12,0x28(%rbx)
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020f8ca:	48 89 33             	mov    %rsi,(%rbx)
}
ffffffff8020f8cd:	5b                   	pop    %rbx
ffffffff8020f8ce:	5d                   	pop    %rbp
ffffffff8020f8cf:	41 5c                	pop    %r12
ffffffff8020f8d1:	41 5d                	pop    %r13
ffffffff8020f8d3:	c3                   	ret
ffffffff8020f8d4:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,
ffffffff8020f8d8:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020f8db:	73 43                	jae    ffffffff8020f920 <_RME_Cpt_Boot_Crt+0x1d0>
ffffffff8020f8dd:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8020f8e4:	ff 00 00 
ffffffff8020f8e7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f8eb:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8020f8ef:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8020f8f6:	00 00 00 
ffffffff8020f8f9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f8fc:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f8ff:	48 21 c1             	and    %rax,%rcx
ffffffff8020f902:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020f905:	0f 85 f1 fe ff ff    	jne    ffffffff8020f7fc <_RME_Cpt_Boot_Crt+0xac>
}
ffffffff8020f90b:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,
ffffffff8020f90c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020f913:	5d                   	pop    %rbp
ffffffff8020f914:	41 5c                	pop    %r12
ffffffff8020f916:	41 5d                	pop    %r13
ffffffff8020f918:	c3                   	ret
ffffffff8020f919:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020f920:	5b                   	pop    %rbx
        return RME_ERR_CPT_RANGE;
ffffffff8020f921:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020f928:	5d                   	pop    %rbp
ffffffff8020f929:	41 5c                	pop    %r12
ffffffff8020f92b:	41 5d                	pop    %r13
ffffffff8020f92d:	c3                   	ret
ffffffff8020f92e:	66 90                	xchg   %ax,%ax
ffffffff8020f930:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,
ffffffff8020f931:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020f938:	5d                   	pop    %rbp
ffffffff8020f939:	41 5c                	pop    %r12
ffffffff8020f93b:	41 5d                	pop    %r13
ffffffff8020f93d:	c3                   	ret
ffffffff8020f93e:	66 90                	xchg   %ax,%ax
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020f940:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f947:	eb 84                	jmp    ffffffff8020f8cd <_RME_Cpt_Boot_Crt+0x17d>
ffffffff8020f949:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020f950:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f957:	e9 71 ff ff ff       	jmp    ffffffff8020f8cd <_RME_Cpt_Boot_Crt+0x17d>
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020f95c:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CPT_KOT;
ffffffff8020f963:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020f96a:	e9 5e ff ff ff       	jmp    ffffffff8020f8cd <_RME_Cpt_Boot_Crt+0x17d>
ffffffff8020f96f:	90                   	nop

ffffffff8020f970 <_RME_Pgt_Boot_Crt>:
{
ffffffff8020f970:	f3 0f 1e fa          	endbr64
ffffffff8020f974:	41 57                	push   %r15
ffffffff8020f976:	41 56                	push   %r14
ffffffff8020f978:	41 55                	push   %r13
ffffffff8020f97a:	41 54                	push   %r12
ffffffff8020f97c:	55                   	push   %rbp
ffffffff8020f97d:	48 89 d5             	mov    %rdx,%rbp
ffffffff8020f980:	53                   	push   %rbx
ffffffff8020f981:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020f985:	4c 8b 6c 24 48       	mov    0x48(%rsp),%r13
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020f98a:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff8020f98f:	4c 01 ea             	add    %r13,%rdx
ffffffff8020f992:	48 83 fa 40          	cmp    $0x40,%rdx
ffffffff8020f996:	0f 87 34 02 00 00    	ja     ffffffff8020fbd0 <_RME_Pgt_Boot_Crt+0x260>
ffffffff8020f99c:	48 89 f0             	mov    %rsi,%rax
ffffffff8020f99f:	49 89 cc             	mov    %rcx,%r12
ffffffff8020f9a2:	4d 89 c7             	mov    %r8,%r15
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f9a5:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8020f9a9:	4d 89 ce             	mov    %r9,%r14
ffffffff8020f9ac:	f6 c4 80             	test   $0x80,%ah
ffffffff8020f9af:	0f 84 8b 01 00 00    	je     ffffffff8020fb40 <_RME_Pgt_Boot_Crt+0x1d0>
ffffffff8020f9b5:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020f9b8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f9bc:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020f9bf:	0f 83 bb 01 00 00    	jae    ffffffff8020fb80 <_RME_Pgt_Boot_Crt+0x210>
ffffffff8020f9c5:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020f9cc:	ff 00 00 
ffffffff8020f9cf:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020f9d3:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8020f9d7:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020f9de:	00 00 00 
ffffffff8020f9e1:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8020f9e4:	49 89 c8             	mov    %rcx,%r8
ffffffff8020f9e7:	49 21 f0             	and    %rsi,%r8
ffffffff8020f9ea:	49 39 f8             	cmp    %rdi,%r8
ffffffff8020f9ed:	0f 84 80 01 00 00    	je     ffffffff8020fb73 <_RME_Pgt_Boot_Crt+0x203>
ffffffff8020f9f3:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8020f9f7:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8020f9fb:	0f 85 8f 01 00 00    	jne    ffffffff8020fb90 <_RME_Pgt_Boot_Crt+0x220>
ffffffff8020fa01:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8020fa05:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fa0a:	48 39 c8             	cmp    %rcx,%rax
ffffffff8020fa0d:	0f 83 6d 01 00 00    	jae    ffffffff8020fb80 <_RME_Pgt_Boot_Crt+0x210>
ffffffff8020fa13:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fa17:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020fa1b:	48 89 c3             	mov    %rax,%rbx
ffffffff8020fa1e:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fa21:	48 21 c6             	and    %rax,%rsi
ffffffff8020fa24:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020fa27:	0f 84 46 01 00 00    	je     ffffffff8020fb73 <_RME_Pgt_Boot_Crt+0x203>
ffffffff8020fa2d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fa31:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fa35:	0f 85 55 01 00 00    	jne    ffffffff8020fb90 <_RME_Pgt_Boot_Crt+0x220>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fa3b:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8020fa3f:	0f 84 5b 01 00 00    	je     ffffffff8020fba0 <_RME_Pgt_Boot_Crt+0x230>
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)!=0)
ffffffff8020fa45:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff8020fa4a:	4d 89 e0             	mov    %r12,%r8
ffffffff8020fa4d:	4c 89 e9             	mov    %r13,%rcx
ffffffff8020fa50:	4c 89 f6             	mov    %r14,%rsi
ffffffff8020fa53:	4c 89 ff             	mov    %r15,%rdi
ffffffff8020fa56:	e8 85 b2 00 00       	call   ffffffff8021ace0 <__RME_Pgt_Check>
ffffffff8020fa5b:	48 85 c0             	test   %rax,%rax
ffffffff8020fa5e:	0f 85 6c 01 00 00    	jne    ffffffff8020fbd0 <_RME_Pgt_Boot_Crt+0x260>
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020fa64:	b9 40 00 00 00       	mov    $0x40,%ecx
ffffffff8020fa69:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020fa70:	44 29 e9             	sub    %r13d,%ecx
ffffffff8020fa73:	2b 4c 24 40          	sub    0x40(%rsp),%ecx
ffffffff8020fa77:	48 d3 e8             	shr    %cl,%rax
ffffffff8020fa7a:	4c 21 f8             	and    %r15,%rax
ffffffff8020fa7d:	0f 85 4d 01 00 00    	jne    ffffffff8020fbd0 <_RME_Pgt_Boot_Crt+0x260>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020fa83:	48 3b 6b 28          	cmp    0x28(%rbx),%rbp
ffffffff8020fa87:	0f 83 f3 00 00 00    	jae    ffffffff8020fb80 <_RME_Pgt_Boot_Crt+0x210>
ffffffff8020fa8d:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fa94:	00 00 00 
ffffffff8020fa97:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8020fa9b:	48 03 6b 18          	add    0x18(%rbx),%rbp
ffffffff8020fa9f:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff8020faa5:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020faa8:	84 d2                	test   %dl,%dl
ffffffff8020faaa:	0f 84 00 01 00 00    	je     ffffffff8020fbb0 <_RME_Pgt_Boot_Crt+0x240>
ffffffff8020fab0:	48 8b 05 59 65 01 00 	mov    0x16559(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020fab7:	44 89 e9             	mov    %r13d,%ecx
ffffffff8020faba:	be 01 00 00 00       	mov    $0x1,%esi
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020fabf:	4c 89 e7             	mov    %r12,%rdi
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020fac2:	d3 e6                	shl    %cl,%esi
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fac4:	48 89 45 20          	mov    %rax,0x20(%rbp)
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020fac8:	48 63 f6             	movslq %esi,%rsi
ffffffff8020facb:	48 c1 e6 03          	shl    $0x3,%rsi
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020facf:	e8 9c ee ff ff       	call   ffffffff8020e970 <_RME_Kot_Mark>
ffffffff8020fad4:	48 89 c3             	mov    %rax,%rbx
ffffffff8020fad7:	48 85 c0             	test   %rax,%rax
ffffffff8020fada:	0f 85 dc 00 00 00    	jne    ffffffff8020fbbc <_RME_Pgt_Boot_Crt+0x24c>
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020fae0:	4c 89 65 18          	mov    %r12,0x18(%rbp)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fae4:	4c 8b 64 24 40       	mov    0x40(%rsp),%r12
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020fae9:	4d 09 f7             	or     %r14,%r15
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020faec:	48 89 ef             	mov    %rbp,%rdi
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020faef:	66 0f 6f 05 19 d9 00 	movdqa 0xd919(%rip),%xmm0        # ffffffff8021d410 <Table.1+0x150>
ffffffff8020faf6:	00 
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020faf7:	4c 89 7d 30          	mov    %r15,0x30(%rbp)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fafb:	49 c1 e4 20          	shl    $0x20,%r12
    Pgt_Crt->ASID=0U;
ffffffff8020faff:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff8020fb06:	00 
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fb07:	4d 09 ec             	or     %r13,%r12
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020fb0a:	0f 11 45 08          	movups %xmm0,0x8(%rbp)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fb0e:	4c 89 65 28          	mov    %r12,0x28(%rbp)
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020fb12:	e8 19 b2 00 00       	call   ffffffff8021ad30 <__RME_Pgt_Init>
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020fb17:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff8020fb1e:	00 04 00 
ffffffff8020fb21:	48 89 45 00          	mov    %rax,0x0(%rbp)
}
ffffffff8020fb25:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8020fb29:	48 89 d8             	mov    %rbx,%rax
ffffffff8020fb2c:	5b                   	pop    %rbx
ffffffff8020fb2d:	5d                   	pop    %rbp
ffffffff8020fb2e:	41 5c                	pop    %r12
ffffffff8020fb30:	41 5d                	pop    %r13
ffffffff8020fb32:	41 5e                	pop    %r14
ffffffff8020fb34:	41 5f                	pop    %r15
ffffffff8020fb36:	c3                   	ret
ffffffff8020fb37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020fb3e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fb40:	48 39 ce             	cmp    %rcx,%rsi
ffffffff8020fb43:	73 3b                	jae    ffffffff8020fb80 <_RME_Pgt_Boot_Crt+0x210>
ffffffff8020fb45:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8020fb4c:	ff 00 00 
ffffffff8020fb4f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fb53:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8020fb57:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8020fb5e:	00 00 00 
ffffffff8020fb61:	48 89 c3             	mov    %rax,%rbx
ffffffff8020fb64:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fb67:	48 21 c2             	and    %rax,%rdx
ffffffff8020fb6a:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8020fb6d:	0f 85 ba fe ff ff    	jne    ffffffff8020fa2d <_RME_Pgt_Boot_Crt+0xbd>
ffffffff8020fb73:	48 c7 c3 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rbx
ffffffff8020fb7a:	eb a9                	jmp    ffffffff8020fb25 <_RME_Pgt_Boot_Crt+0x1b5>
ffffffff8020fb7c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8020fb80:	48 c7 c3 fd ff ff ff 	mov    $0xfffffffffffffffd,%rbx
ffffffff8020fb87:	eb 9c                	jmp    ffffffff8020fb25 <_RME_Pgt_Boot_Crt+0x1b5>
ffffffff8020fb89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8020fb90:	48 c7 c3 fe ff ff ff 	mov    $0xfffffffffffffffe,%rbx
ffffffff8020fb97:	eb 8c                	jmp    ffffffff8020fb25 <_RME_Pgt_Boot_Crt+0x1b5>
ffffffff8020fb99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fba0:	48 c7 c3 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rbx
ffffffff8020fba7:	e9 79 ff ff ff       	jmp    ffffffff8020fb25 <_RME_Pgt_Boot_Crt+0x1b5>
ffffffff8020fbac:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fbb0:	48 c7 c3 fb ff ff ff 	mov    $0xfffffffffffffffb,%rbx
ffffffff8020fbb7:	e9 69 ff ff ff       	jmp    ffffffff8020fb25 <_RME_Pgt_Boot_Crt+0x1b5>
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020fbbc:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8020fbc3:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020fbc4:	48 c7 c3 fc ff ff ff 	mov    $0xfffffffffffffffc,%rbx
ffffffff8020fbcb:	e9 55 ff ff ff       	jmp    ffffffff8020fb25 <_RME_Pgt_Boot_Crt+0x1b5>
        return RME_ERR_PGT_HW;
ffffffff8020fbd0:	48 c7 c3 99 ff ff ff 	mov    $0xffffffffffffff99,%rbx
ffffffff8020fbd7:	e9 49 ff ff ff       	jmp    ffffffff8020fb25 <_RME_Pgt_Boot_Crt+0x1b5>
ffffffff8020fbdc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020fbe0 <_RME_Inv_Crt.isra.0>:
static rme_ret_t _RME_Inv_Crt(struct RME_Cap_Cpt* Cpt,
ffffffff8020fbe0:	41 54                	push   %r12
ffffffff8020fbe2:	48 89 d0             	mov    %rdx,%rax
ffffffff8020fbe5:	55                   	push   %rbp
ffffffff8020fbe6:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fbe7:	80 e6 80             	and    $0x80,%dh
ffffffff8020fbea:	0f 85 30 02 00 00    	jne    ffffffff8020fe20 <_RME_Inv_Crt.isra.0+0x240>
ffffffff8020fbf0:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020fbf3:	0f 83 17 02 00 00    	jae    ffffffff8020fe10 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fbf9:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8020fc00:	ff 00 00 
ffffffff8020fc03:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fc07:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8020fc0e:	00 00 00 
ffffffff8020fc11:	48 8d 14 38          	lea    (%rax,%rdi,1),%rdx
ffffffff8020fc15:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020fc18:	49 21 c2             	and    %rax,%r10
ffffffff8020fc1b:	4d 39 da             	cmp    %r11,%r10
ffffffff8020fc1e:	0f 84 67 02 00 00    	je     ffffffff8020fe8b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020fc24:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fc28:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fc2c:	0f 85 ee 02 00 00    	jne    ffffffff8020ff20 <_RME_Inv_Crt.isra.0+0x340>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020fc32:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8020fc39:	0f 85 61 02 00 00    	jne    ffffffff8020fea0 <_RME_Inv_Crt.isra.0+0x2c0>
ffffffff8020fc3f:	49 39 f1             	cmp    %rsi,%r9
ffffffff8020fc42:	0f 83 c8 01 00 00    	jae    ffffffff8020fe10 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fc48:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8020fc4f:	00 00 00 
ffffffff8020fc52:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020fc56:	49 8d 1c 39          	lea    (%r9,%rdi,1),%rbx
ffffffff8020fc5a:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8020fc61:	ff 00 00 
ffffffff8020fc64:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020fc67:	49 21 c1             	and    %rax,%r9
ffffffff8020fc6a:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020fc6d:	0f 84 18 02 00 00    	je     ffffffff8020fe8b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020fc73:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fc77:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8020fc7b:	0f 85 9f 02 00 00    	jne    ffffffff8020ff20 <_RME_Inv_Crt.isra.0+0x340>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020fc81:	f6 c5 80             	test   $0x80,%ch
ffffffff8020fc84:	0f 84 a6 02 00 00    	je     ffffffff8020ff30 <_RME_Inv_Crt.isra.0+0x350>
ffffffff8020fc8a:	48 89 c8             	mov    %rcx,%rax
ffffffff8020fc8d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fc91:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020fc94:	0f 83 76 01 00 00    	jae    ffffffff8020fe10 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fc9a:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8020fca1:	00 00 00 
ffffffff8020fca4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fca8:	48 01 f8             	add    %rdi,%rax
ffffffff8020fcab:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff8020fcb2:	ff 00 00 
ffffffff8020fcb5:	48 8b 30             	mov    (%rax),%rsi
ffffffff8020fcb8:	49 89 f2             	mov    %rsi,%r10
ffffffff8020fcbb:	49 21 fa             	and    %rdi,%r10
ffffffff8020fcbe:	4d 39 ca             	cmp    %r9,%r10
ffffffff8020fcc1:	0f 84 c4 01 00 00    	je     ffffffff8020fe8b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020fcc7:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8020fccb:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8020fccf:	0f 85 4b 02 00 00    	jne    ffffffff8020ff20 <_RME_Inv_Crt.isra.0+0x340>
ffffffff8020fcd5:	48 8b 70 28          	mov    0x28(%rax),%rsi
ffffffff8020fcd9:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff8020fcdf:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020fce2:	0f 83 28 01 00 00    	jae    ffffffff8020fe10 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fce8:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020fcec:	48 03 48 18          	add    0x18(%rax),%rcx
ffffffff8020fcf0:	48 8b 01             	mov    (%rcx),%rax
ffffffff8020fcf3:	48 21 c7             	and    %rax,%rdi
ffffffff8020fcf6:	4c 39 cf             	cmp    %r9,%rdi
ffffffff8020fcf9:	0f 84 8c 01 00 00    	je     ffffffff8020fe8b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020fcff:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fd03:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fd07:	0f 85 13 02 00 00    	jne    ffffffff8020ff20 <_RME_Inv_Crt.isra.0+0x340>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fd0d:	f6 42 10 01          	testb  $0x1,0x10(%rdx)
ffffffff8020fd11:	0f 84 59 02 00 00    	je     ffffffff8020ff70 <_RME_Inv_Crt.isra.0+0x390>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_INV);
ffffffff8020fd17:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8020fd1b:	48 f7 d0             	not    %rax
ffffffff8020fd1e:	83 e0 01             	and    $0x1,%eax
ffffffff8020fd21:	0f 85 49 02 00 00    	jne    ffffffff8020ff70 <_RME_Inv_Crt.isra.0+0x390>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff8020fd27:	f6 41 10 08          	testb  $0x8,0x10(%rcx)
ffffffff8020fd2b:	0f 84 3f 02 00 00    	je     ffffffff8020ff70 <_RME_Inv_Crt.isra.0+0x390>
ffffffff8020fd31:	48 8b 71 28          	mov    0x28(%rcx),%rsi
ffffffff8020fd35:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
ffffffff8020fd3a:	49 01 f4             	add    %rsi,%r12
ffffffff8020fd3d:	48 3b 74 24 20       	cmp    0x20(%rsp),%rsi
ffffffff8020fd42:	48 0f 42 74 24 20    	cmovb  0x20(%rsp),%rsi
ffffffff8020fd48:	49 39 f4             	cmp    %rsi,%r12
ffffffff8020fd4b:	0f 82 1f 02 00 00    	jb     ffffffff8020ff70 <_RME_Inv_Crt.isra.0+0x390>
ffffffff8020fd51:	49 83 fc b7          	cmp    $0xffffffffffffffb7,%r12
ffffffff8020fd55:	0f 87 15 02 00 00    	ja     ffffffff8020ff70 <_RME_Inv_Crt.isra.0+0x390>
ffffffff8020fd5b:	49 8d 74 24 47       	lea    0x47(%r12),%rsi
ffffffff8020fd60:	48 39 71 30          	cmp    %rsi,0x30(%rcx)
ffffffff8020fd64:	0f 82 06 02 00 00    	jb     ffffffff8020ff70 <_RME_Inv_Crt.isra.0+0x390>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff8020fd6a:	4c 3b 42 28          	cmp    0x28(%rdx),%r8
ffffffff8020fd6e:	0f 83 9c 00 00 00    	jae    ffffffff8020fe10 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fd74:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8020fd78:	4c 03 42 18          	add    0x18(%rdx),%r8
ffffffff8020fd7c:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fd83:	00 00 00 
ffffffff8020fd86:	4c 89 c5             	mov    %r8,%rbp
ffffffff8020fd89:	f0 49 0f b1 10       	lock cmpxchg %rdx,(%r8)
ffffffff8020fd8e:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff8020fd91:	84 d2                	test   %dl,%dl
ffffffff8020fd93:	0f 84 e7 01 00 00    	je     ffffffff8020ff80 <_RME_Inv_Crt.isra.0+0x3a0>
ffffffff8020fd99:	48 8b 05 70 62 01 00 	mov    0x16270(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff8020fda0:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8020fda5:	4c 89 e7             	mov    %r12,%rdi
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff8020fda8:	49 89 40 20          	mov    %rax,0x20(%r8)
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff8020fdac:	e8 bf eb ff ff       	call   ffffffff8020e970 <_RME_Kot_Mark>
ffffffff8020fdb1:	48 85 c0             	test   %rax,%rax
ffffffff8020fdb4:	0f 85 d2 01 00 00    	jne    ffffffff8020ff8c <_RME_Inv_Crt.isra.0+0x3ac>
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8020fdba:	8b 13                	mov    (%rbx),%edx
ffffffff8020fdbc:	85 d2                	test   %edx,%edx
ffffffff8020fdbe:	74 04                	je     ffffffff8020fdc4 <_RME_Inv_Crt.isra.0+0x1e4>
ffffffff8020fdc0:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    Invocation->Prc=Prc_Root;
ffffffff8020fdc4:	49 89 5c 24 10       	mov    %rbx,0x10(%r12)
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8020fdc9:	ba 01 00 00 00       	mov    $0x1,%edx
    Invocation->Thd_Act=RME_NULL;
ffffffff8020fdce:	49 c7 44 24 18 00 00 	movq   $0x0,0x18(%r12)
ffffffff8020fdd5:	00 00 
    Invocation->Is_Exc_Ret=0U;
ffffffff8020fdd7:	49 c7 44 24 30 00 00 	movq   $0x0,0x30(%r12)
ffffffff8020fdde:	00 00 
    Inv_Crt->Head.Root_Ref=0U;
ffffffff8020fde0:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff8020fde7:	00 
    Inv_Crt->Head.Object=Vaddr;
ffffffff8020fde8:	4c 89 65 18          	mov    %r12,0x18(%rbp)
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
ffffffff8020fdec:	48 c7 45 10 03 00 00 	movq   $0x3,0x10(%rbp)
ffffffff8020fdf3:	00 
ffffffff8020fdf4:	f0 48 0f c1 53 08    	lock xadd %rdx,0x8(%rbx)
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
ffffffff8020fdfa:	48 bb 00 00 00 00 00 	movabs $0x7000000000000,%rbx
ffffffff8020fe01:	00 07 00 
ffffffff8020fe04:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
    return 0;
ffffffff8020fe08:	eb 0d                	jmp    ffffffff8020fe17 <_RME_Inv_Crt.isra.0+0x237>
ffffffff8020fe0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fe10:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff8020fe17:	5b                   	pop    %rbx
ffffffff8020fe18:	5d                   	pop    %rbp
ffffffff8020fe19:	41 5c                	pop    %r12
ffffffff8020fe1b:	c3                   	ret
ffffffff8020fe1c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fe20:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe23:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fe27:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8020fe2a:	73 e4                	jae    ffffffff8020fe10 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fe2c:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020fe33:	ff 00 00 
ffffffff8020fe36:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8020fe3a:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff8020fe41:	00 00 00 
ffffffff8020fe44:	48 01 fa             	add    %rdi,%rdx
ffffffff8020fe47:	4c 8b 12             	mov    (%rdx),%r10
ffffffff8020fe4a:	4c 89 d5             	mov    %r10,%rbp
ffffffff8020fe4d:	4c 21 dd             	and    %r11,%rbp
ffffffff8020fe50:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8020fe53:	74 36                	je     ffffffff8020fe8b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020fe55:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020fe59:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020fe5d:	0f 85 bd 00 00 00    	jne    ffffffff8020ff20 <_RME_Inv_Crt.isra.0+0x340>
ffffffff8020fe63:	4c 8b 52 28          	mov    0x28(%rdx),%r10
ffffffff8020fe67:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fe6c:	4c 39 d0             	cmp    %r10,%rax
ffffffff8020fe6f:	73 9f                	jae    ffffffff8020fe10 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fe71:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fe75:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8020fe79:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe7c:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fe7f:	49 21 c3             	and    %rax,%r11
ffffffff8020fe82:	49 39 db             	cmp    %rbx,%r11
ffffffff8020fe85:	0f 85 99 fd ff ff    	jne    ffffffff8020fc24 <_RME_Inv_Crt.isra.0+0x44>
}
ffffffff8020fe8b:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020fe8c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff8020fe93:	5d                   	pop    %rbp
ffffffff8020fe94:	41 5c                	pop    %r12
ffffffff8020fe96:	c3                   	ret
ffffffff8020fe97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8020fe9e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8020fea0:	4c 89 c8             	mov    %r9,%rax
ffffffff8020fea3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fea7:	48 39 f0             	cmp    %rsi,%rax
ffffffff8020feaa:	0f 83 60 ff ff ff    	jae    ffffffff8020fe10 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020feb0:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8020feb7:	ff 00 00 
ffffffff8020feba:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020febe:	48 bd 00 00 00 00 02 	movabs $0x200000000,%rbp
ffffffff8020fec5:	00 00 00 
ffffffff8020fec8:	48 01 f8             	add    %rdi,%rax
ffffffff8020fecb:	4c 8b 10             	mov    (%rax),%r10
ffffffff8020fece:	4c 89 d3             	mov    %r10,%rbx
ffffffff8020fed1:	4c 21 db             	and    %r11,%rbx
ffffffff8020fed4:	48 39 eb             	cmp    %rbp,%rbx
ffffffff8020fed7:	74 b2                	je     ffffffff8020fe8b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020fed9:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8020fedd:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8020fee1:	75 3d                	jne    ffffffff8020ff20 <_RME_Inv_Crt.isra.0+0x340>
ffffffff8020fee3:	4c 8b 50 28          	mov    0x28(%rax),%r10
ffffffff8020fee7:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff8020feee:	4d 39 d1             	cmp    %r10,%r9
ffffffff8020fef1:	0f 83 19 ff ff ff    	jae    ffffffff8020fe10 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020fef7:	48 8b 58 18          	mov    0x18(%rax),%rbx
ffffffff8020fefb:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8020feff:	4c 01 cb             	add    %r9,%rbx
ffffffff8020ff02:	48 8b 03             	mov    (%rbx),%rax
ffffffff8020ff05:	49 21 c3             	and    %rax,%r11
ffffffff8020ff08:	49 39 eb             	cmp    %rbp,%r11
ffffffff8020ff0b:	0f 85 62 fd ff ff    	jne    ffffffff8020fc73 <_RME_Inv_Crt.isra.0+0x93>
ffffffff8020ff11:	e9 75 ff ff ff       	jmp    ffffffff8020fe8b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020ff16:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8020ff1d:	00 00 00 
}
ffffffff8020ff20:	5b                   	pop    %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020ff21:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff8020ff28:	5d                   	pop    %rbp
ffffffff8020ff29:	41 5c                	pop    %r12
ffffffff8020ff2b:	c3                   	ret
ffffffff8020ff2c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020ff30:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8020ff33:	0f 83 d7 fe ff ff    	jae    ffffffff8020fe10 <_RME_Inv_Crt.isra.0+0x230>
ffffffff8020ff39:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8020ff40:	ff 00 00 
ffffffff8020ff43:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8020ff47:	48 01 f9             	add    %rdi,%rcx
ffffffff8020ff4a:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8020ff51:	00 00 00 
ffffffff8020ff54:	48 8b 01             	mov    (%rcx),%rax
ffffffff8020ff57:	48 21 c6             	and    %rax,%rsi
ffffffff8020ff5a:	48 39 fe             	cmp    %rdi,%rsi
ffffffff8020ff5d:	0f 85 9c fd ff ff    	jne    ffffffff8020fcff <_RME_Inv_Crt.isra.0+0x11f>
ffffffff8020ff63:	e9 23 ff ff ff       	jmp    ffffffff8020fe8b <_RME_Inv_Crt.isra.0+0x2ab>
ffffffff8020ff68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020ff6f:	00 
}
ffffffff8020ff70:	5b                   	pop    %rbx
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020ff71:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff8020ff78:	5d                   	pop    %rbp
ffffffff8020ff79:	41 5c                	pop    %r12
ffffffff8020ff7b:	c3                   	ret
ffffffff8020ff7c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff8020ff80:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020ff87:	e9 8b fe ff ff       	jmp    ffffffff8020fe17 <_RME_Inv_Crt.isra.0+0x237>
        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
ffffffff8020ff8c:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8020ff93:	00 
        return RME_ERR_CPT_KOT;
ffffffff8020ff94:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020ff9b:	e9 77 fe ff ff       	jmp    ffffffff8020fe17 <_RME_Inv_Crt.isra.0+0x237>

ffffffff8020ffa0 <_RME_Kot_Erase>:
{
ffffffff8020ffa0:	f3 0f 1e fa          	endbr64
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff8020ffa4:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff8020ffa8:	0f 85 7f 01 00 00    	jne    ffffffff8021012d <_RME_Kot_Erase+0x18d>
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ffae:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8020ffb5:	80 00 00 
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ffb8:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
{
ffffffff8020ffbf:	55                   	push   %rbp
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ffc0:	48 01 f8             	add    %rdi,%rax
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ffc3:	49 89 d3             	mov    %rdx,%r11
{
ffffffff8020ffc6:	53                   	push   %rbx
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ffc7:	48 89 c1             	mov    %rax,%rcx
    Start=Start>>RME_WORD_ORDER;
ffffffff8020ffca:	48 c1 e8 0a          	shr    $0xa,%rax
ffffffff8020ffce:	49 89 c0             	mov    %rax,%r8
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ffd1:	48 c1 e9 04          	shr    $0x4,%rcx
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ffd5:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff8020ffdc:	7f 00 00 
ffffffff8020ffdf:	48 01 c6             	add    %rax,%rsi
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020ffe2:	49 d3 e3             	shl    %cl,%r11
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff8020ffe5:	4e 8d 0c c5 00 00 00 	lea    0x0(,%r8,8),%r9
ffffffff8020ffec:	00 
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020ffed:	48 8d 04 3e          	lea    (%rsi,%rdi,1),%rax
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8020fff1:	48 89 d7             	mov    %rdx,%rdi
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff8020fff4:	48 ba 00 00 00 01 00 	movabs $0xffff800001000000,%rdx
ffffffff8020fffb:	80 ff ff 
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8020fffe:	48 89 c1             	mov    %rax,%rcx
    End=End>>RME_WORD_ORDER;
ffffffff80210001:	48 c1 e8 0a          	shr    $0xa,%rax
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff80210005:	49 8d 1c 11          	lea    (%r9,%rdx,1),%rbx
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80210009:	48 c1 e9 04          	shr    $0x4,%rcx
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8021000d:	f7 d1                	not    %ecx
ffffffff8021000f:	48 d3 ef             	shr    %cl,%rdi
    End=End>>RME_WORD_ORDER;
ffffffff80210012:	48 89 c1             	mov    %rax,%rcx
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff80210015:	48 8b 03             	mov    (%rbx),%rax
    if(Start==End)
ffffffff80210018:	49 39 c8             	cmp    %rcx,%r8
ffffffff8021001b:	74 43                	je     ffffffff80210060 <_RME_Kot_Erase+0xc0>
        if((RME_KOT_VA_BASE[Start]&Mask_Begin)!=Mask_Begin)
ffffffff8021001d:	48 f7 d0             	not    %rax
ffffffff80210020:	4c 85 d8             	test   %r11,%rax
ffffffff80210023:	75 2e                	jne    ffffffff80210053 <_RME_Kot_Erase+0xb3>
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80210025:	4d 8d 50 01          	lea    0x1(%r8),%r10
ffffffff80210029:	48 8d 71 ff          	lea    -0x1(%rcx),%rsi
ffffffff8021002d:	49 39 f2             	cmp    %rsi,%r10
ffffffff80210030:	73 4e                	jae    ffffffff80210080 <_RME_Kot_Erase+0xe0>
ffffffff80210032:	49 8d 44 11 08       	lea    0x8(%r9,%rdx,1),%rax
ffffffff80210037:	4c 89 d2             	mov    %r10,%rdx
ffffffff8021003a:	eb 11                	jmp    ffffffff8021004d <_RME_Kot_Erase+0xad>
ffffffff8021003c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80210040:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80210044:	48 83 c0 08          	add    $0x8,%rax
ffffffff80210048:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021004b:	74 33                	je     ffffffff80210080 <_RME_Kot_Erase+0xe0>
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
ffffffff8021004d:	48 83 38 ff          	cmpq   $0xffffffffffffffff,(%rax)
ffffffff80210051:	74 ed                	je     ffffffff80210040 <_RME_Kot_Erase+0xa0>
        return RME_ERR_KOT_BMP;
ffffffff80210053:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8021005a:	5b                   	pop    %rbx
ffffffff8021005b:	5d                   	pop    %rbp
ffffffff8021005c:	c3                   	ret
ffffffff8021005d:	0f 1f 00             	nopl   (%rax)
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff80210060:	4c 21 df             	and    %r11,%rdi
ffffffff80210063:	48 f7 d0             	not    %rax
ffffffff80210066:	48 85 f8             	test   %rdi,%rax
ffffffff80210069:	75 e8                	jne    ffffffff80210053 <_RME_Kot_Erase+0xb3>
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~(Mask_Begin&Mask_End));
ffffffff8021006b:	48 f7 d7             	not    %rdi
	__asm__ __volatile__("MOVQ %[Ptr],%[Old]; LOCK ANDQ %[Operand], %[Ptr]"
ffffffff8021006e:	48 8b 3b             	mov    (%rbx),%rdi
ffffffff80210071:	f0 48 21 3b          	lock and %rdi,(%rbx)
    return 0;
ffffffff80210075:	31 c0                	xor    %eax,%eax
}
ffffffff80210077:	5b                   	pop    %rbx
ffffffff80210078:	5d                   	pop    %rbp
ffffffff80210079:	c3                   	ret
ffffffff8021007a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
ffffffff80210080:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80210087:	80 ff ff 
ffffffff8021008a:	48 8d 2c c8          	lea    (%rax,%rcx,8),%rbp
ffffffff8021008e:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80210092:	48 21 f8             	and    %rdi,%rax
ffffffff80210095:	48 39 f8             	cmp    %rdi,%rax
ffffffff80210098:	75 b9                	jne    ffffffff80210053 <_RME_Kot_Erase+0xb3>
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff8021009a:	49 f7 d3             	not    %r11
ffffffff8021009d:	4c 8b 1b             	mov    (%rbx),%r11
ffffffff802100a0:	f0 4c 21 1b          	lock and %r11,(%rbx)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802100a4:	49 39 f2             	cmp    %rsi,%r10
ffffffff802100a7:	73 71                	jae    ffffffff8021011a <_RME_Kot_Erase+0x17a>
ffffffff802100a9:	4c 29 c1             	sub    %r8,%rcx
ffffffff802100ac:	48 8d 71 fe          	lea    -0x2(%rcx),%rsi
ffffffff802100b0:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802100b4:	74 52                	je     ffffffff80210108 <_RME_Kot_Erase+0x168>
ffffffff802100b6:	48 89 f1             	mov    %rsi,%rcx
            RME_KOT_VA_BASE[Count]=0U;
ffffffff802100b9:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff802100bd:	49 bb 08 00 00 01 00 	movabs $0xffff800001000008,%r11
ffffffff802100c4:	80 ff ff 
ffffffff802100c7:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
ffffffff802100cb:	4b 8d 04 19          	lea    (%r9,%r11,1),%rax
ffffffff802100cf:	4a 8d 14 01          	lea    (%rcx,%r8,1),%rdx
ffffffff802100d3:	49 8d 14 d3          	lea    (%r11,%rdx,8),%rdx
ffffffff802100d7:	49 89 d0             	mov    %rdx,%r8
ffffffff802100da:	49 29 c0             	sub    %rax,%r8
ffffffff802100dd:	41 83 e0 10          	and    $0x10,%r8d
ffffffff802100e1:	74 0d                	je     ffffffff802100f0 <_RME_Kot_Erase+0x150>
ffffffff802100e3:	0f 11 00             	movups %xmm0,(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802100e6:	48 83 c0 10          	add    $0x10,%rax
ffffffff802100ea:	48 39 c2             	cmp    %rax,%rdx
ffffffff802100ed:	74 11                	je     ffffffff80210100 <_RME_Kot_Erase+0x160>
ffffffff802100ef:	90                   	nop
            RME_KOT_VA_BASE[Count]=0U;
ffffffff802100f0:	0f 11 00             	movups %xmm0,(%rax)
ffffffff802100f3:	48 83 c0 20          	add    $0x20,%rax
ffffffff802100f7:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802100fb:	48 39 c2             	cmp    %rax,%rdx
ffffffff802100fe:	75 f0                	jne    ffffffff802100f0 <_RME_Kot_Erase+0x150>
ffffffff80210100:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80210103:	74 15                	je     ffffffff8021011a <_RME_Kot_Erase+0x17a>
ffffffff80210105:	49 01 ca             	add    %rcx,%r10
            RME_KOT_VA_BASE[Count]=0U;
ffffffff80210108:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021010f:	80 ff ff 
ffffffff80210112:	4a c7 04 d0 00 00 00 	movq   $0x0,(%rax,%r10,8)
ffffffff80210119:	00 
        RME_FETCH_AND(&(RME_KOT_VA_BASE[End]),~Mask_End);
ffffffff8021011a:	48 f7 d7             	not    %rdi
ffffffff8021011d:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
ffffffff80210121:	f0 48 21 7d 00       	lock and %rdi,0x0(%rbp)
    return 0;
ffffffff80210126:	31 c0                	xor    %eax,%eax
ffffffff80210128:	e9 4a ff ff ff       	jmp    ffffffff80210077 <_RME_Kot_Erase+0xd7>
        return RME_ERR_KOT_BMP;
ffffffff8021012d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff80210134:	c3                   	ret
ffffffff80210135:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021013c:	00 00 00 00 

ffffffff80210140 <_RME_Kom_Boot_Crt>:
{
ffffffff80210140:	f3 0f 1e fa          	endbr64
ffffffff80210144:	49 89 fa             	mov    %rdi,%r10
ffffffff80210147:	48 89 f0             	mov    %rsi,%rax
ffffffff8021014a:	53                   	push   %rbx
ffffffff8021014b:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021014e:	48 89 d6             	mov    %rdx,%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210151:	49 8b 4a 28          	mov    0x28(%r10),%rcx
ffffffff80210155:	f6 c4 80             	test   $0x80,%ah
ffffffff80210158:	0f 85 da 00 00 00    	jne    ffffffff80210238 <_RME_Kom_Boot_Crt+0xf8>
ffffffff8021015e:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210161:	0f 83 49 01 00 00    	jae    ffffffff802102b0 <_RME_Kom_Boot_Crt+0x170>
ffffffff80210167:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8021016e:	ff 00 00 
ffffffff80210171:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210175:	49 03 42 18          	add    0x18(%r10),%rax
ffffffff80210179:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80210180:	00 00 00 
ffffffff80210183:	48 89 c2             	mov    %rax,%rdx
ffffffff80210186:	48 8b 00             	mov    (%rax),%rax
ffffffff80210189:	48 21 c1             	and    %rax,%rcx
ffffffff8021018c:	4c 39 d1             	cmp    %r10,%rcx
ffffffff8021018f:	0f 84 0b 01 00 00    	je     ffffffff802102a0 <_RME_Kom_Boot_Crt+0x160>
ffffffff80210195:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210199:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021019d:	0f 85 1d 01 00 00    	jne    ffffffff802102c0 <_RME_Kom_Boot_Crt+0x180>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802101a3:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff802101a7:	48 f7 d0             	not    %rax
ffffffff802101aa:	83 e0 01             	and    $0x1,%eax
ffffffff802101ad:	0f 85 1d 01 00 00    	jne    ffffffff802102d0 <_RME_Kom_Boot_Crt+0x190>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kom,struct RME_Cap_Kom*,Kom_Crt);
ffffffff802101b3:	48 3b 72 28          	cmp    0x28(%rdx),%rsi
ffffffff802101b7:	0f 83 f3 00 00 00    	jae    ffffffff802102b0 <_RME_Kom_Boot_Crt+0x170>
ffffffff802101bd:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
ffffffff802101c1:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802101c5:	48 01 f1             	add    %rsi,%rcx
ffffffff802101c8:	48 89 ca             	mov    %rcx,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802101cb:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff802101d2:	00 00 00 
ffffffff802101d5:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802101da:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff802101dd:	84 c9                	test   %cl,%cl
ffffffff802101df:	0f 84 fb 00 00 00    	je     ffffffff802102e0 <_RME_Kom_Boot_Crt+0x1a0>
ffffffff802101e5:	48 8b 05 24 5e 01 00 	mov    0x15e24(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff802101ec:	49 83 c0 01          	add    $0x1,%r8
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff802101f0:	48 83 c7 3f          	add    $0x3f,%rdi
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff802101f4:	49 83 e0 c0          	and    $0xffffffffffffffc0,%r8
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff802101f8:	48 83 e7 c0          	and    $0xffffffffffffffc0,%rdi
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff802101fc:	48 89 42 20          	mov    %rax,0x20(%rdx)
    Kom_Crt->End=Kom_End-1U;
ffffffff80210200:	49 83 e8 01          	sub    $0x1,%r8
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff80210204:	48 b8 00 00 00 00 00 	movabs $0x2000000000000,%rax
ffffffff8021020b:	00 02 00 
    Kom_Crt->Head.Root_Ref=1U;
ffffffff8021020e:	48 c7 42 08 01 00 00 	movq   $0x1,0x8(%rdx)
ffffffff80210215:	00 
    Kom_Crt->Head.Object=0U;
ffffffff80210216:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff8021021d:	00 
    Kom_Crt->Head.Flag=Flag;
ffffffff8021021e:	4c 89 4a 10          	mov    %r9,0x10(%rdx)
    Kom_Crt->Begin=Kom_Begin;
ffffffff80210222:	48 89 7a 28          	mov    %rdi,0x28(%rdx)
    Kom_Crt->End=Kom_End-1U;
ffffffff80210226:	4c 89 42 30          	mov    %r8,0x30(%rdx)
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff8021022a:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff8021022d:	31 c0                	xor    %eax,%eax
}
ffffffff8021022f:	5b                   	pop    %rbx
ffffffff80210230:	c3                   	ret
ffffffff80210231:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210238:	48 89 c2             	mov    %rax,%rdx
ffffffff8021023b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021023f:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80210242:	73 6c                	jae    ffffffff802102b0 <_RME_Kom_Boot_Crt+0x170>
ffffffff80210244:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8021024b:	00 00 00 
ffffffff8021024e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210252:	49 03 52 18          	add    0x18(%r10),%rdx
ffffffff80210256:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff8021025d:	ff 00 00 
ffffffff80210260:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80210263:	48 89 cb             	mov    %rcx,%rbx
ffffffff80210266:	4c 21 d3             	and    %r10,%rbx
ffffffff80210269:	4c 39 db             	cmp    %r11,%rbx
ffffffff8021026c:	74 32                	je     ffffffff802102a0 <_RME_Kom_Boot_Crt+0x160>
ffffffff8021026e:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210272:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80210276:	75 48                	jne    ffffffff802102c0 <_RME_Kom_Boot_Crt+0x180>
ffffffff80210278:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8021027c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210281:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210284:	73 2a                	jae    ffffffff802102b0 <_RME_Kom_Boot_Crt+0x170>
ffffffff80210286:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021028a:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021028e:	48 89 c2             	mov    %rax,%rdx
ffffffff80210291:	48 8b 00             	mov    (%rax),%rax
ffffffff80210294:	49 21 c2             	and    %rax,%r10
ffffffff80210297:	4d 39 da             	cmp    %r11,%r10
ffffffff8021029a:	0f 85 f5 fe ff ff    	jne    ffffffff80210195 <_RME_Kom_Boot_Crt+0x55>
ffffffff802102a0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff802102a7:	5b                   	pop    %rbx
ffffffff802102a8:	c3                   	ret
ffffffff802102a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802102b0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff802102b7:	5b                   	pop    %rbx
ffffffff802102b8:	c3                   	ret
ffffffff802102b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802102c0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff802102c7:	5b                   	pop    %rbx
ffffffff802102c8:	c3                   	ret
ffffffff802102c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802102d0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
}
ffffffff802102d7:	5b                   	pop    %rbx
ffffffff802102d8:	c3                   	ret
ffffffff802102d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff802102e0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff802102e7:	5b                   	pop    %rbx
ffffffff802102e8:	c3                   	ret
ffffffff802102e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff802102f0 <_RME_CPU_Local_Init>:
{
ffffffff802102f0:	f3 0f 1e fa          	endbr64
    Local->CPUID=CPUID;
ffffffff802102f4:	48 89 37             	mov    %rsi,(%rdi)
    Local->Thd_Cur=RME_NULL;
ffffffff802102f7:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff802102fb:	48 8d 47 28          	lea    0x28(%rdi),%rax
ffffffff802102ff:	48 8d 97 28 04 00 00 	lea    0x428(%rdi),%rdx
    Local->Sig_Vct=RME_NULL;
ffffffff80210306:	48 c7 47 18 00 00 00 	movq   $0x0,0x18(%rdi)
ffffffff8021030d:	00 
    Local->Thd_Cur=RME_NULL;
ffffffff8021030e:	0f 11 47 08          	movups %xmm0,0x8(%rdi)
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80210312:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    Head->Next=Head;
ffffffff80210318:	66 48 0f 6e c0       	movq   %rax,%xmm0
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff8021031d:	48 83 c0 10          	add    $0x10,%rax
    Head->Next=Head;
ffffffff80210321:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
ffffffff80210325:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80210329:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021032c:	75 ea                	jne    ffffffff80210318 <_RME_CPU_Local_Init+0x28>
ffffffff8021032e:	48 c7 47 20 00 00 00 	movq   $0x0,0x20(%rdi)
ffffffff80210335:	00 
}
ffffffff80210336:	c3                   	ret
ffffffff80210337:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021033e:	00 00 

ffffffff80210340 <_RME_Thd_Pgt>:
{
ffffffff80210340:	f3 0f 1e fa          	endbr64
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210344:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff8021034b:	48 85 c0             	test   %rax,%rax
ffffffff8021034e:	74 18                	je     ffffffff80210368 <_RME_Thd_Pgt+0x28>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210350:	48 8d 97 98 00 00 00 	lea    0x98(%rdi),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210357:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021035a:	74 0c                	je     ffffffff80210368 <_RME_Thd_Pgt+0x28>
        return Inv_Top->Prc->Pgt;
ffffffff8021035c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210360:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff80210364:	c3                   	ret
ffffffff80210365:	0f 1f 00             	nopl   (%rax)
        return Thd->Sched.Prc->Pgt;
ffffffff80210368:	48 8b 47 58          	mov    0x58(%rdi),%rax
ffffffff8021036c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80210370:	c3                   	ret
ffffffff80210371:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80210378:	00 00 00 00 
ffffffff8021037c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80210380 <_RME_Prc_Boot_Crt>:
{
ffffffff80210380:	f3 0f 1e fa          	endbr64
ffffffff80210384:	48 89 f0             	mov    %rsi,%rax
ffffffff80210387:	55                   	push   %rbp
ffffffff80210388:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021038b:	53                   	push   %rbx
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8021038c:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
ffffffff80210390:	f6 c4 80             	test   $0x80,%ah
ffffffff80210393:	0f 85 e7 01 00 00    	jne    ffffffff80210580 <_RME_Prc_Boot_Crt+0x200>
ffffffff80210399:	4c 39 c8             	cmp    %r9,%rax
ffffffff8021039c:	0f 83 ce 01 00 00    	jae    ffffffff80210570 <_RME_Prc_Boot_Crt+0x1f0>
ffffffff802103a2:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff802103a6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802103aa:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff802103b1:	ff 00 00 
ffffffff802103b4:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff802103bb:	00 00 00 
ffffffff802103be:	48 8d 14 38          	lea    (%rax,%rdi,1),%rdx
ffffffff802103c2:	48 8b 02             	mov    (%rdx),%rax
ffffffff802103c5:	49 21 c2             	and    %rax,%r10
ffffffff802103c8:	4d 39 da             	cmp    %r11,%r10
ffffffff802103cb:	0f 84 1e 02 00 00    	je     ffffffff802105ef <_RME_Prc_Boot_Crt+0x26f>
ffffffff802103d1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802103d5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802103d9:	0f 85 91 02 00 00    	jne    ffffffff80210670 <_RME_Prc_Boot_Crt+0x2f0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802103df:	f6 c5 80             	test   $0x80,%ch
ffffffff802103e2:	0f 85 18 02 00 00    	jne    ffffffff80210600 <_RME_Prc_Boot_Crt+0x280>
ffffffff802103e8:	4c 39 c9             	cmp    %r9,%rcx
ffffffff802103eb:	0f 83 7f 01 00 00    	jae    ffffffff80210570 <_RME_Prc_Boot_Crt+0x1f0>
ffffffff802103f1:	49 ba 00 00 00 00 ff 	movabs $0xffff00000000,%r10
ffffffff802103f8:	ff 00 00 
ffffffff802103fb:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802103ff:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff80210406:	00 00 00 
ffffffff80210409:	48 01 f9             	add    %rdi,%rcx
ffffffff8021040c:	48 8b 01             	mov    (%rcx),%rax
ffffffff8021040f:	49 21 c2             	and    %rax,%r10
ffffffff80210412:	4d 39 da             	cmp    %r11,%r10
ffffffff80210415:	0f 84 d4 01 00 00    	je     ffffffff802105ef <_RME_Prc_Boot_Crt+0x26f>
ffffffff8021041b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021041f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210423:	0f 85 47 02 00 00    	jne    ffffffff80210670 <_RME_Prc_Boot_Crt+0x2f0>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80210429:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff80210430:	0f 84 4a 02 00 00    	je     ffffffff80210680 <_RME_Prc_Boot_Crt+0x300>
ffffffff80210436:	4c 89 c0             	mov    %r8,%rax
ffffffff80210439:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021043d:	4c 39 c8             	cmp    %r9,%rax
ffffffff80210440:	0f 83 2a 01 00 00    	jae    ffffffff80210570 <_RME_Prc_Boot_Crt+0x1f0>
ffffffff80210446:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff8021044d:	ff 00 00 
ffffffff80210450:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210454:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8021045b:	00 00 00 
ffffffff8021045e:	48 01 f8             	add    %rdi,%rax
ffffffff80210461:	48 8b 38             	mov    (%rax),%rdi
ffffffff80210464:	49 89 fb             	mov    %rdi,%r11
ffffffff80210467:	4d 21 cb             	and    %r9,%r11
ffffffff8021046a:	4d 39 d3             	cmp    %r10,%r11
ffffffff8021046d:	0f 84 7c 01 00 00    	je     ffffffff802105ef <_RME_Prc_Boot_Crt+0x26f>
ffffffff80210473:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80210477:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021047b:	0f 85 ef 01 00 00    	jne    ffffffff80210670 <_RME_Prc_Boot_Crt+0x2f0>
ffffffff80210481:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff80210485:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8021048c:	49 39 f8             	cmp    %rdi,%r8
ffffffff8021048f:	0f 83 db 00 00 00    	jae    ffffffff80210570 <_RME_Prc_Boot_Crt+0x1f0>
ffffffff80210495:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff80210499:	4c 03 40 18          	add    0x18(%rax),%r8
ffffffff8021049d:	49 8b 00             	mov    (%r8),%rax
ffffffff802104a0:	49 21 c1             	and    %rax,%r9
ffffffff802104a3:	4d 39 d1             	cmp    %r10,%r9
ffffffff802104a6:	0f 84 43 01 00 00    	je     ffffffff802105ef <_RME_Prc_Boot_Crt+0x26f>
ffffffff802104ac:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802104b0:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802104b4:	0f 85 b6 01 00 00    	jne    ffffffff80210670 <_RME_Prc_Boot_Crt+0x2f0>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff802104ba:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff802104be:	48 f7 d0             	not    %rax
ffffffff802104c1:	83 e0 01             	and    $0x1,%eax
ffffffff802104c4:	0f 85 f6 01 00 00    	jne    ffffffff802106c0 <_RME_Prc_Boot_Crt+0x340>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff802104ca:	f6 41 10 40          	testb  $0x40,0x10(%rcx)
ffffffff802104ce:	0f 84 ec 01 00 00    	je     ffffffff802106c0 <_RME_Prc_Boot_Crt+0x340>
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff802104d4:	41 f6 40 10 40       	testb  $0x40,0x10(%r8)
ffffffff802104d9:	0f 84 e1 01 00 00    	je     ffffffff802106c0 <_RME_Prc_Boot_Crt+0x340>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff802104df:	48 3b 72 28          	cmp    0x28(%rdx),%rsi
ffffffff802104e3:	0f 83 87 00 00 00    	jae    ffffffff80210570 <_RME_Prc_Boot_Crt+0x1f0>
ffffffff802104e9:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802104ed:	48 03 72 18          	add    0x18(%rdx),%rsi
ffffffff802104f1:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802104f8:	00 00 00 
ffffffff802104fb:	f0 48 0f b1 16       	lock cmpxchg %rdx,(%rsi)
ffffffff80210500:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80210503:	84 d2                	test   %dl,%dl
ffffffff80210505:	0f 84 c5 01 00 00    	je     ffffffff802106d0 <_RME_Prc_Boot_Crt+0x350>
ffffffff8021050b:	48 8b 05 fe 5a 01 00 	mov    0x15afe(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    Prc_Crt->Head.Root_Ref=1U;
ffffffff80210512:	66 0f 6f 05 06 cf 00 	movdqa 0xcf06(%rip),%xmm0        # ffffffff8021d420 <Table.1+0x160>
ffffffff80210519:	00 
    Prc_Crt->Head.Object=0U;
ffffffff8021051a:	48 c7 46 18 00 00 00 	movq   $0x0,0x18(%rsi)
ffffffff80210521:	00 
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80210522:	48 89 46 20          	mov    %rax,0x20(%rsi)
    Prc_Crt->Head.Root_Ref=1U;
ffffffff80210526:	0f 11 46 08          	movups %xmm0,0x8(%rsi)
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff8021052a:	8b 11                	mov    (%rcx),%edx
ffffffff8021052c:	85 d2                	test   %edx,%edx
ffffffff8021052e:	74 04                	je     ffffffff80210534 <_RME_Prc_Boot_Crt+0x1b4>
ffffffff80210530:	48 8b 49 08          	mov    0x8(%rcx),%rcx
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff80210534:	41 8b 00             	mov    (%r8),%eax
ffffffff80210537:	85 c0                	test   %eax,%eax
ffffffff80210539:	74 04                	je     ffffffff8021053f <_RME_Prc_Boot_Crt+0x1bf>
ffffffff8021053b:	4d 8b 40 08          	mov    0x8(%r8),%r8
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021053f:	b8 01 00 00 00       	mov    $0x1,%eax
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff80210544:	48 89 4e 28          	mov    %rcx,0x28(%rsi)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff80210548:	4c 89 46 30          	mov    %r8,0x30(%rsi)
ffffffff8021054c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021054f:	f0 48 0f c1 51 08    	lock xadd %rdx,0x8(%rcx)
ffffffff80210555:	f0 49 0f c1 40 08    	lock xadd %rax,0x8(%r8)
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff8021055b:	48 b8 00 00 00 00 00 	movabs $0x5000000000000,%rax
ffffffff80210562:	00 05 00 
ffffffff80210565:	48 89 06             	mov    %rax,(%rsi)
    return 0;
ffffffff80210568:	31 c0                	xor    %eax,%eax
}
ffffffff8021056a:	5b                   	pop    %rbx
ffffffff8021056b:	5d                   	pop    %rbp
ffffffff8021056c:	c3                   	ret
ffffffff8021056d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80210570:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff80210577:	5b                   	pop    %rbx
ffffffff80210578:	5d                   	pop    %rbp
ffffffff80210579:	c3                   	ret
ffffffff8021057a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80210580:	48 89 c2             	mov    %rax,%rdx
ffffffff80210583:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210587:	4c 39 ca             	cmp    %r9,%rdx
ffffffff8021058a:	73 e4                	jae    ffffffff80210570 <_RME_Prc_Boot_Crt+0x1f0>
ffffffff8021058c:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80210590:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210594:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff8021059b:	ff 00 00 
ffffffff8021059e:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff802105a5:	00 00 00 
ffffffff802105a8:	48 01 fa             	add    %rdi,%rdx
ffffffff802105ab:	4c 8b 12             	mov    (%rdx),%r10
ffffffff802105ae:	4c 89 d5             	mov    %r10,%rbp
ffffffff802105b1:	4c 21 dd             	and    %r11,%rbp
ffffffff802105b4:	48 39 dd             	cmp    %rbx,%rbp
ffffffff802105b7:	74 36                	je     ffffffff802105ef <_RME_Prc_Boot_Crt+0x26f>
ffffffff802105b9:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff802105bd:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff802105c1:	0f 85 a9 00 00 00    	jne    ffffffff80210670 <_RME_Prc_Boot_Crt+0x2f0>
ffffffff802105c7:	4c 8b 52 28          	mov    0x28(%rdx),%r10
ffffffff802105cb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802105d0:	4c 39 d0             	cmp    %r10,%rax
ffffffff802105d3:	73 9b                	jae    ffffffff80210570 <_RME_Prc_Boot_Crt+0x1f0>
ffffffff802105d5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802105d9:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802105dd:	48 89 c2             	mov    %rax,%rdx
ffffffff802105e0:	48 8b 00             	mov    (%rax),%rax
ffffffff802105e3:	49 21 c3             	and    %rax,%r11
ffffffff802105e6:	49 39 db             	cmp    %rbx,%r11
ffffffff802105e9:	0f 85 e2 fd ff ff    	jne    ffffffff802103d1 <_RME_Prc_Boot_Crt+0x51>
ffffffff802105ef:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff802105f6:	5b                   	pop    %rbx
ffffffff802105f7:	5d                   	pop    %rbp
ffffffff802105f8:	c3                   	ret
ffffffff802105f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210600:	48 89 c8             	mov    %rcx,%rax
ffffffff80210603:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210607:	4c 39 c8             	cmp    %r9,%rax
ffffffff8021060a:	0f 83 60 ff ff ff    	jae    ffffffff80210570 <_RME_Prc_Boot_Crt+0x1f0>
ffffffff80210610:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff80210617:	ff 00 00 
ffffffff8021061a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021061e:	48 bb 00 00 00 00 02 	movabs $0x200000000,%rbx
ffffffff80210625:	00 00 00 
ffffffff80210628:	48 01 f8             	add    %rdi,%rax
ffffffff8021062b:	4c 8b 10             	mov    (%rax),%r10
ffffffff8021062e:	4c 89 d5             	mov    %r10,%rbp
ffffffff80210631:	4c 21 dd             	and    %r11,%rbp
ffffffff80210634:	48 39 dd             	cmp    %rbx,%rbp
ffffffff80210637:	74 b6                	je     ffffffff802105ef <_RME_Prc_Boot_Crt+0x26f>
ffffffff80210639:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8021063d:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80210641:	75 2d                	jne    ffffffff80210670 <_RME_Prc_Boot_Crt+0x2f0>
ffffffff80210643:	4c 8b 50 28          	mov    0x28(%rax),%r10
ffffffff80210647:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff8021064d:	4c 39 d1             	cmp    %r10,%rcx
ffffffff80210650:	0f 83 1a ff ff ff    	jae    ffffffff80210570 <_RME_Prc_Boot_Crt+0x1f0>
ffffffff80210656:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021065a:	48 03 48 18          	add    0x18(%rax),%rcx
ffffffff8021065e:	48 8b 01             	mov    (%rcx),%rax
ffffffff80210661:	49 21 c3             	and    %rax,%r11
ffffffff80210664:	49 39 db             	cmp    %rbx,%r11
ffffffff80210667:	0f 85 ae fd ff ff    	jne    ffffffff8021041b <_RME_Prc_Boot_Crt+0x9b>
ffffffff8021066d:	eb 80                	jmp    ffffffff802105ef <_RME_Prc_Boot_Crt+0x26f>
ffffffff8021066f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80210670:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff80210677:	5b                   	pop    %rbx
ffffffff80210678:	5d                   	pop    %rbp
ffffffff80210679:	c3                   	ret
ffffffff8021067a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80210680:	4d 39 c8             	cmp    %r9,%r8
ffffffff80210683:	0f 83 e7 fe ff ff    	jae    ffffffff80210570 <_RME_Prc_Boot_Crt+0x1f0>
ffffffff80210689:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80210690:	00 00 00 
ffffffff80210693:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff80210697:	49 01 f8             	add    %rdi,%r8
ffffffff8021069a:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff802106a1:	ff 00 00 
ffffffff802106a4:	49 8b 00             	mov    (%r8),%rax
ffffffff802106a7:	48 21 c7             	and    %rax,%rdi
ffffffff802106aa:	4c 39 cf             	cmp    %r9,%rdi
ffffffff802106ad:	0f 85 f9 fd ff ff    	jne    ffffffff802104ac <_RME_Prc_Boot_Crt+0x12c>
ffffffff802106b3:	e9 37 ff ff ff       	jmp    ffffffff802105ef <_RME_Prc_Boot_Crt+0x26f>
ffffffff802106b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff802106bf:	00 
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff802106c0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802106c7:	e9 ab fe ff ff       	jmp    ffffffff80210577 <_RME_Prc_Boot_Crt+0x1f7>
ffffffff802106cc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff802106d0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802106d7:	e9 9b fe ff ff       	jmp    ffffffff80210577 <_RME_Prc_Boot_Crt+0x1f7>
ffffffff802106dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff802106e0 <_RME_Thd_Boot_Crt>:
{
ffffffff802106e0:	f3 0f 1e fa          	endbr64
    if(Prio>=RME_PREEMPT_PRIO_NUM)
ffffffff802106e4:	49 83 f9 3f          	cmp    $0x3f,%r9
ffffffff802106e8:	0f 87 b2 03 00 00    	ja     ffffffff80210aa0 <_RME_Thd_Boot_Crt+0x3c0>
{
ffffffff802106ee:	41 55                	push   %r13
ffffffff802106f0:	48 89 f0             	mov    %rsi,%rax
ffffffff802106f3:	4d 89 cd             	mov    %r9,%r13
ffffffff802106f6:	41 54                	push   %r12
ffffffff802106f8:	49 89 d4             	mov    %rdx,%r12
ffffffff802106fb:	55                   	push   %rbp
ffffffff802106fc:	4c 89 c5             	mov    %r8,%rbp
ffffffff802106ff:	53                   	push   %rbx
ffffffff80210700:	48 89 cb             	mov    %rcx,%rbx
ffffffff80210703:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210707:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8021070b:	f6 c4 80             	test   $0x80,%ah
ffffffff8021070e:	0f 84 6c 02 00 00    	je     ffffffff80210980 <_RME_Thd_Boot_Crt+0x2a0>
ffffffff80210714:	48 89 f2             	mov    %rsi,%rdx
ffffffff80210717:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021071b:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021071e:	0f 83 1c 03 00 00    	jae    ffffffff80210a40 <_RME_Thd_Boot_Crt+0x360>
ffffffff80210724:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff80210728:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021072c:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80210733:	ff 00 00 
ffffffff80210736:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff8021073d:	00 00 00 
ffffffff80210740:	48 01 f2             	add    %rsi,%rdx
ffffffff80210743:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80210746:	49 89 fa             	mov    %rdi,%r10
ffffffff80210749:	4d 21 c2             	and    %r8,%r10
ffffffff8021074c:	4d 39 ca             	cmp    %r9,%r10
ffffffff8021074f:	0f 84 63 02 00 00    	je     ffffffff802109b8 <_RME_Thd_Boot_Crt+0x2d8>
ffffffff80210755:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80210759:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021075d:	0f 85 05 03 00 00    	jne    ffffffff80210a68 <_RME_Thd_Boot_Crt+0x388>
ffffffff80210763:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80210767:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021076c:	48 39 f8             	cmp    %rdi,%rax
ffffffff8021076f:	0f 83 cb 02 00 00    	jae    ffffffff80210a40 <_RME_Thd_Boot_Crt+0x360>
ffffffff80210775:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210779:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021077d:	48 89 c2             	mov    %rax,%rdx
ffffffff80210780:	48 8b 00             	mov    (%rax),%rax
ffffffff80210783:	49 21 c0             	and    %rax,%r8
ffffffff80210786:	4d 39 c8             	cmp    %r9,%r8
ffffffff80210789:	0f 84 29 02 00 00    	je     ffffffff802109b8 <_RME_Thd_Boot_Crt+0x2d8>
ffffffff8021078f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210793:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210797:	0f 85 cb 02 00 00    	jne    ffffffff80210a68 <_RME_Thd_Boot_Crt+0x388>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8021079d:	f6 c7 80             	test   $0x80,%bh
ffffffff802107a0:	0f 85 2a 02 00 00    	jne    ffffffff802109d0 <_RME_Thd_Boot_Crt+0x2f0>
ffffffff802107a6:	48 39 cb             	cmp    %rcx,%rbx
ffffffff802107a9:	0f 83 91 02 00 00    	jae    ffffffff80210a40 <_RME_Thd_Boot_Crt+0x360>
ffffffff802107af:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802107b6:	ff 00 00 
ffffffff802107b9:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff802107bd:	48 01 f3             	add    %rsi,%rbx
ffffffff802107c0:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802107c7:	00 00 00 
ffffffff802107ca:	48 8b 03             	mov    (%rbx),%rax
ffffffff802107cd:	48 21 c1             	and    %rax,%rcx
ffffffff802107d0:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802107d3:	0f 84 df 01 00 00    	je     ffffffff802109b8 <_RME_Thd_Boot_Crt+0x2d8>
ffffffff802107d9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802107dd:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802107e1:	0f 85 81 02 00 00    	jne    ffffffff80210a68 <_RME_Thd_Boot_Crt+0x388>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802107e7:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff802107eb:	48 f7 d0             	not    %rax
ffffffff802107ee:	83 e0 01             	and    $0x1,%eax
ffffffff802107f1:	0f 85 89 02 00 00    	jne    ffffffff80210a80 <_RME_Thd_Boot_Crt+0x3a0>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff802107f7:	f6 43 10 02          	testb  $0x2,0x10(%rbx)
ffffffff802107fb:	0f 84 7f 02 00 00    	je     ffffffff80210a80 <_RME_Thd_Boot_Crt+0x3a0>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff80210801:	4c 3b 62 28          	cmp    0x28(%rdx),%r12
ffffffff80210805:	0f 83 35 02 00 00    	jae    ffffffff80210a40 <_RME_Thd_Boot_Crt+0x360>
ffffffff8021080b:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021080f:	4c 03 62 18          	add    0x18(%rdx),%r12
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80210813:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021081a:	00 00 00 
ffffffff8021081d:	f0 49 0f b1 14 24    	lock cmpxchg %rdx,(%r12)
ffffffff80210823:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff80210826:	84 d2                	test   %dl,%dl
ffffffff80210828:	0f 84 62 02 00 00    	je     ffffffff80210a90 <_RME_Thd_Boot_Crt+0x3b0>
ffffffff8021082e:	48 8b 05 db 57 01 00 	mov    0x157db(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff80210835:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff8021083a:	48 89 ef             	mov    %rbp,%rdi
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8021083d:	49 89 44 24 20       	mov    %rax,0x20(%r12)
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff80210842:	e8 29 e1 ff ff       	call   ffffffff8020e970 <_RME_Kot_Mark>
ffffffff80210847:	48 85 c0             	test   %rax,%rax
ffffffff8021084a:	0f 85 58 02 00 00    	jne    ffffffff80210aa8 <_RME_Thd_Boot_Crt+0x3c8>
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff80210850:	66 0f 6f 05 d8 cb 00 	movdqa 0xcbd8(%rip),%xmm0        # ffffffff8021d430 <Table.1+0x170>
ffffffff80210857:	00 
    Thread->Sched.TID=0U;
ffffffff80210858:	48 c7 45 20 00 00 00 	movq   $0x0,0x20(%rbp)
ffffffff8021085f:	00 
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff80210860:	0f 11 45 30          	movups %xmm0,0x30(%rbp)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80210864:	8b 13                	mov    (%rbx),%edx
ffffffff80210866:	85 d2                	test   %edx,%edx
ffffffff80210868:	0f 85 ea 01 00 00    	jne    ffffffff80210a58 <_RME_Thd_Boot_Crt+0x378>
    Thread->Sched.Local=Local;
ffffffff8021086e:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff80210873:	48 8d 55 78          	lea    0x78(%rbp),%rdx
    Thread->Sched.Prc=Prc_Root;
ffffffff80210877:	48 89 5d 58          	mov    %rbx,0x58(%rbp)
    Head->Prev=Head;
ffffffff8021087b:	48 89 95 80 00 00 00 	mov    %rdx,0x80(%rbp)
    Thread->Sched.Local=Local;
ffffffff80210882:	48 89 75 28          	mov    %rsi,0x28(%rbp)
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80210886:	48 8d 75 10          	lea    0x10(%rbp),%rsi
ffffffff8021088a:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    Head->Next=Head;
ffffffff8021088f:	48 89 55 78          	mov    %rdx,0x78(%rbp)
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80210893:	48 8d 95 b0 00 00 00 	lea    0xb0(%rbp),%rdx
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021089a:	be 01 00 00 00       	mov    $0x1,%esi
    Head->Next=Head;
ffffffff8021089f:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff802108a3:	48 89 95 90 00 00 00 	mov    %rdx,0x90(%rbp)
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff802108aa:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    Head->Next=Head;
ffffffff802108b1:	0f 11 45 10          	movups %xmm0,0x10(%rbp)
    Thd_Crt->Head.Root_Ref=1U;
ffffffff802108b5:	66 0f 6f 05 83 cb 00 	movdqa 0xcb83(%rip),%xmm0        # ffffffff8021d440 <Table.1+0x180>
ffffffff802108bc:	00 
    Head->Prev=Head;
ffffffff802108bd:	48 89 95 a0 00 00 00 	mov    %rdx,0xa0(%rbp)
    Head->Next=Head;
ffffffff802108c4:	48 89 95 98 00 00 00 	mov    %rdx,0x98(%rbp)
ffffffff802108cb:	48 89 f2             	mov    %rsi,%rdx
    Thread->Sched.Signal=0U;
ffffffff802108ce:	48 c7 45 50 00 00 00 	movq   $0x0,0x50(%rbp)
ffffffff802108d5:	00 
    Thread->Sched.Prio=Prio;
ffffffff802108d6:	4c 89 6d 40          	mov    %r13,0x40(%rbp)
    Thread->Sched.Prio_Max=RME_PREEMPT_PRIO_NUM-1U;
ffffffff802108da:	48 c7 45 48 3f 00 00 	movq   $0x3f,0x48(%rbp)
ffffffff802108e1:	00 
    Thread->Sched.Sched_Ref=1U;
ffffffff802108e2:	48 c7 45 60 01 00 00 	movq   $0x1,0x60(%rbp)
ffffffff802108e9:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff802108ea:	48 c7 45 70 00 00 00 	movq   $0x0,0x70(%rbp)
ffffffff802108f1:	00 
    Thread->Ctx.Hyp_Attr=0U;
ffffffff802108f2:	48 c7 85 88 00 00 00 	movq   $0x0,0x88(%rbp)
ffffffff802108f9:	00 00 00 00 
    Thread->Ctx.Invstk_Depth=0U;
ffffffff802108fd:	48 c7 85 a8 00 00 00 	movq   $0x0,0xa8(%rbp)
ffffffff80210904:	00 00 00 00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff80210908:	49 89 6c 24 18       	mov    %rbp,0x18(%r12)
    Thd_Crt->Head.Root_Ref=1U;
ffffffff8021090d:	41 0f 11 44 24 08    	movups %xmm0,0x8(%r12)
ffffffff80210913:	f0 48 0f c1 53 08    	lock xadd %rdx,0x8(%rbx)
    Prio=Thd->Sched.Prio;
ffffffff80210919:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff8021091d:	48 8b 55 28          	mov    0x28(%rbp),%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80210921:	49 89 c8             	mov    %rcx,%r8
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210924:	48 d3 e6             	shl    %cl,%rsi
ffffffff80210927:	49 c1 e0 04          	shl    $0x4,%r8
ffffffff8021092b:	4e 8d 0c 02          	lea    (%rdx,%r8,1),%r9
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021092f:	4a 8d 5c 02 28       	lea    0x28(%rdx,%r8,1),%rbx
ffffffff80210934:	49 8b 79 30          	mov    0x30(%r9),%rdi
ffffffff80210938:	66 48 0f 6e c3       	movq   %rbx,%xmm0
    Next->Prev=New;
ffffffff8021093d:	49 89 69 30          	mov    %rbp,0x30(%r9)
    Local->Thd_Cur=Thread;
ffffffff80210941:	48 8b 5c 24 30       	mov    0x30(%rsp),%rbx
    New->Next=Next;
ffffffff80210946:	66 48 0f 6e cf       	movq   %rdi,%xmm1
ffffffff8021094b:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff8021094f:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff80210953:	48 89 2f             	mov    %rbp,(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210956:	48 89 cf             	mov    %rcx,%rdi
ffffffff80210959:	48 c1 ef 06          	shr    $0x6,%rdi
ffffffff8021095d:	48 09 74 fa 20       	or     %rsi,0x20(%rdx,%rdi,8)
    Local->Thd_Cur=Thread;
ffffffff80210962:	48 89 6b 08          	mov    %rbp,0x8(%rbx)
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff80210966:	48 bb 00 00 00 00 00 	movabs $0x6000000000000,%rbx
ffffffff8021096d:	00 06 00 
ffffffff80210970:	49 89 1c 24          	mov    %rbx,(%r12)
}
ffffffff80210974:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80210978:	5b                   	pop    %rbx
ffffffff80210979:	5d                   	pop    %rbp
ffffffff8021097a:	41 5c                	pop    %r12
ffffffff8021097c:	41 5d                	pop    %r13
ffffffff8021097e:	c3                   	ret
ffffffff8021097f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210980:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80210983:	0f 83 b7 00 00 00    	jae    ffffffff80210a40 <_RME_Thd_Boot_Crt+0x360>
ffffffff80210989:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff8021098d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210991:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80210998:	ff 00 00 
ffffffff8021099b:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802109a2:	00 00 00 
ffffffff802109a5:	48 8d 14 30          	lea    (%rax,%rsi,1),%rdx
ffffffff802109a9:	48 8b 02             	mov    (%rdx),%rax
ffffffff802109ac:	48 21 c7             	and    %rax,%rdi
ffffffff802109af:	4c 39 c7             	cmp    %r8,%rdi
ffffffff802109b2:	0f 85 d7 fd ff ff    	jne    ffffffff8021078f <_RME_Thd_Boot_Crt+0xaf>
}
ffffffff802109b8:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802109bc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
}
ffffffff802109c3:	5b                   	pop    %rbx
ffffffff802109c4:	5d                   	pop    %rbp
ffffffff802109c5:	41 5c                	pop    %r12
ffffffff802109c7:	41 5d                	pop    %r13
ffffffff802109c9:	c3                   	ret
ffffffff802109ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802109d0:	48 89 d8             	mov    %rbx,%rax
ffffffff802109d3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802109d7:	48 39 c8             	cmp    %rcx,%rax
ffffffff802109da:	73 64                	jae    ffffffff80210a40 <_RME_Thd_Boot_Crt+0x360>
ffffffff802109dc:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802109e3:	00 00 00 
ffffffff802109e6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802109ea:	48 01 f0             	add    %rsi,%rax
ffffffff802109ed:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802109f4:	ff 00 00 
ffffffff802109f7:	48 8b 08             	mov    (%rax),%rcx
ffffffff802109fa:	49 89 c8             	mov    %rcx,%r8
ffffffff802109fd:	49 21 f0             	and    %rsi,%r8
ffffffff80210a00:	49 39 f8             	cmp    %rdi,%r8
ffffffff80210a03:	74 b3                	je     ffffffff802109b8 <_RME_Thd_Boot_Crt+0x2d8>
ffffffff80210a05:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210a09:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80210a0d:	75 59                	jne    ffffffff80210a68 <_RME_Thd_Boot_Crt+0x388>
ffffffff80210a0f:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80210a13:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff80210a19:	48 39 cb             	cmp    %rcx,%rbx
ffffffff80210a1c:	73 22                	jae    ffffffff80210a40 <_RME_Thd_Boot_Crt+0x360>
ffffffff80210a1e:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80210a22:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff80210a26:	48 8b 03             	mov    (%rbx),%rax
ffffffff80210a29:	48 21 c6             	and    %rax,%rsi
ffffffff80210a2c:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80210a2f:	0f 85 a4 fd ff ff    	jne    ffffffff802107d9 <_RME_Thd_Boot_Crt+0xf9>
ffffffff80210a35:	e9 7e ff ff ff       	jmp    ffffffff802109b8 <_RME_Thd_Boot_Crt+0x2d8>
ffffffff80210a3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
}
ffffffff80210a40:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210a44:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
}
ffffffff80210a4b:	5b                   	pop    %rbx
ffffffff80210a4c:	5d                   	pop    %rbp
ffffffff80210a4d:	41 5c                	pop    %r12
ffffffff80210a4f:	41 5d                	pop    %r13
ffffffff80210a51:	c3                   	ret
ffffffff80210a52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80210a58:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
ffffffff80210a5c:	e9 0d fe ff ff       	jmp    ffffffff8021086e <_RME_Thd_Boot_Crt+0x18e>
ffffffff80210a61:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
ffffffff80210a68:	48 83 c4 08          	add    $0x8,%rsp
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210a6c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
}
ffffffff80210a73:	5b                   	pop    %rbx
ffffffff80210a74:	5d                   	pop    %rbp
ffffffff80210a75:	41 5c                	pop    %r12
ffffffff80210a77:	41 5d                	pop    %r13
ffffffff80210a79:	c3                   	ret
ffffffff80210a7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80210a80:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a87:	e9 e8 fe ff ff       	jmp    ffffffff80210974 <_RME_Thd_Boot_Crt+0x294>
ffffffff80210a8c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff80210a90:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80210a97:	e9 d8 fe ff ff       	jmp    ffffffff80210974 <_RME_Thd_Boot_Crt+0x294>
ffffffff80210a9c:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_PTH_PRIO;
ffffffff80210aa0:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
}
ffffffff80210aa7:	c3                   	ret
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff80210aa8:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
ffffffff80210aaf:	00 
        return RME_ERR_CPT_KOT;
ffffffff80210ab0:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80210ab7:	e9 b8 fe ff ff       	jmp    ffffffff80210974 <_RME_Thd_Boot_Crt+0x294>
ffffffff80210abc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80210ac0 <_RME_Sig_Boot_Crt>:
{
ffffffff80210ac0:	f3 0f 1e fa          	endbr64
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210ac4:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff80210ac8:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80210ace:	0f 85 bc 00 00 00    	jne    ffffffff80210b90 <_RME_Sig_Boot_Crt+0xd0>
ffffffff80210ad4:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80210ad7:	0f 83 23 01 00 00    	jae    ffffffff80210c00 <_RME_Sig_Boot_Crt+0x140>
ffffffff80210add:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80210ae4:	ff 00 00 
ffffffff80210ae7:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80210aeb:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80210aef:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80210af6:	00 00 00 
ffffffff80210af9:	48 8b 06             	mov    (%rsi),%rax
ffffffff80210afc:	48 21 c1             	and    %rax,%rcx
ffffffff80210aff:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80210b02:	0f 84 ee 00 00 00    	je     ffffffff80210bf6 <_RME_Sig_Boot_Crt+0x136>
ffffffff80210b08:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210b0c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210b10:	0f 85 fa 00 00 00    	jne    ffffffff80210c10 <_RME_Sig_Boot_Crt+0x150>
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80210b16:	48 8b 46 10          	mov    0x10(%rsi),%rax
ffffffff80210b1a:	48 f7 d0             	not    %rax
ffffffff80210b1d:	83 e0 01             	and    $0x1,%eax
ffffffff80210b20:	0f 85 fa 00 00 00    	jne    ffffffff80210c20 <_RME_Sig_Boot_Crt+0x160>
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80210b26:	48 3b 56 28          	cmp    0x28(%rsi),%rdx
ffffffff80210b2a:	0f 83 d0 00 00 00    	jae    ffffffff80210c00 <_RME_Sig_Boot_Crt+0x140>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80210b30:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff80210b37:	00 00 00 
ffffffff80210b3a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210b3e:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff80210b42:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80210b47:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80210b4a:	84 c9                	test   %cl,%cl
ffffffff80210b4c:	0f 84 de 00 00 00    	je     ffffffff80210c30 <_RME_Sig_Boot_Crt+0x170>
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80210b52:	66 0f 6f 05 f6 c8 00 	movdqa 0xc8f6(%rip),%xmm0        # ffffffff8021d450 <Table.1+0x190>
ffffffff80210b59:	00 
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80210b5a:	48 8b 05 af 54 01 00 	mov    0x154af(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    Sig_Crt->Sig_Num=0U;
ffffffff80210b61:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
ffffffff80210b68:	00 
    Sig_Crt->Thd=RME_NULL;
ffffffff80210b69:	48 c7 42 30 00 00 00 	movq   $0x0,0x30(%rdx)
ffffffff80210b70:	00 
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80210b71:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff80210b74:	66 0f 6f 05 e4 c8 00 	movdqa 0xc8e4(%rip),%xmm0        # ffffffff8021d460 <Table.1+0x1a0>
ffffffff80210b7b:	00 
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80210b7c:	48 89 42 20          	mov    %rax,0x20(%rdx)
    return 0;
ffffffff80210b80:	31 c0                	xor    %eax,%eax
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80210b82:	0f 11 42 10          	movups %xmm0,0x10(%rdx)
    return 0;
ffffffff80210b86:	c3                   	ret
ffffffff80210b87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80210b8e:	00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210b90:	48 89 f0             	mov    %rsi,%rax
ffffffff80210b93:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210b97:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210b9a:	73 64                	jae    ffffffff80210c00 <_RME_Sig_Boot_Crt+0x140>
ffffffff80210b9c:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80210ba3:	00 00 00 
ffffffff80210ba6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210baa:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80210bae:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80210bb5:	ff 00 00 
ffffffff80210bb8:	48 8b 08             	mov    (%rax),%rcx
ffffffff80210bbb:	49 89 c9             	mov    %rcx,%r9
ffffffff80210bbe:	49 21 f9             	and    %rdi,%r9
ffffffff80210bc1:	4d 39 c1             	cmp    %r8,%r9
ffffffff80210bc4:	74 30                	je     ffffffff80210bf6 <_RME_Sig_Boot_Crt+0x136>
ffffffff80210bc6:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80210bca:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80210bce:	75 40                	jne    ffffffff80210c10 <_RME_Sig_Boot_Crt+0x150>
ffffffff80210bd0:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80210bd4:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80210bda:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80210bdd:	73 21                	jae    ffffffff80210c00 <_RME_Sig_Boot_Crt+0x140>
ffffffff80210bdf:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80210be3:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff80210be7:	48 8b 06             	mov    (%rsi),%rax
ffffffff80210bea:	48 21 c7             	and    %rax,%rdi
ffffffff80210bed:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80210bf0:	0f 85 12 ff ff ff    	jne    ffffffff80210b08 <_RME_Sig_Boot_Crt+0x48>
ffffffff80210bf6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210bfd:	c3                   	ret
ffffffff80210bfe:	66 90                	xchg   %ax,%ax
ffffffff80210c00:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210c07:	c3                   	ret
ffffffff80210c08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210c0f:	00 
ffffffff80210c10:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210c17:	c3                   	ret
ffffffff80210c18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210c1f:	00 
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80210c20:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210c27:	c3                   	ret
ffffffff80210c28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210c2f:	00 
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80210c30:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80210c37:	c3                   	ret
ffffffff80210c38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210c3f:	00 

ffffffff80210c40 <_RME_Kern_High>:
{
ffffffff80210c40:	f3 0f 1e fa          	endbr64
ffffffff80210c44:	41 56                	push   %r14
ffffffff80210c46:	41 55                	push   %r13
ffffffff80210c48:	41 54                	push   %r12
ffffffff80210c4a:	55                   	push   %rbp
ffffffff80210c4b:	53                   	push   %rbx
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210c4c:	48 8b 46 20          	mov    0x20(%rsi),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80210c50:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80210c54:	48 83 f8 01          	cmp    $0x1,%rax
    Thd_Cur=Local->Thd_Cur;
ffffffff80210c58:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210c5c:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80210c5f:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80210c63:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80210c68:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80210c6c:	4c 8b 64 06 08       	mov    0x8(%rsi,%rax,1),%r12
    if(Thd_New==Thd_Cur)
ffffffff80210c71:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80210c74:	0f 84 8f 00 00 00    	je     ffffffff80210d09 <_RME_Kern_High+0xc9>
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80210c7a:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
ffffffff80210c7f:	49 89 fd             	mov    %rdi,%r13
ffffffff80210c82:	48 89 f3             	mov    %rsi,%rbx
ffffffff80210c85:	75 0b                	jne    ffffffff80210c92 <_RME_Kern_High+0x52>
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff80210c87:	49 8b 44 24 40       	mov    0x40(%r12),%rax
ffffffff80210c8c:	48 39 45 40          	cmp    %rax,0x40(%rbp)
ffffffff80210c90:	73 77                	jae    ffffffff80210d09 <_RME_Kern_High+0xc9>
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff80210c92:	4d 8b b4 24 90 00 00 	mov    0x90(%r12),%r14
ffffffff80210c99:	00 
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff80210c9a:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80210ca1:	4c 89 ee             	mov    %r13,%rsi
ffffffff80210ca4:	e8 97 98 00 00       	call   ffffffff8021a540 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80210ca9:	4c 89 f6             	mov    %r14,%rsi
ffffffff80210cac:	4c 89 ef             	mov    %r13,%rdi
ffffffff80210caf:	e8 8c 98 00 00       	call   ffffffff8021a540 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210cb4:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210cbb:	48 85 c0             	test   %rax,%rax
ffffffff80210cbe:	74 58                	je     ffffffff80210d18 <_RME_Kern_High+0xd8>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210cc0:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210cc7:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210cca:	74 4c                	je     ffffffff80210d18 <_RME_Kern_High+0xd8>
        return Inv_Top->Prc->Pgt;
ffffffff80210ccc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210cd0:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210cd4:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff80210cdb:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210cdc:	48 85 c0             	test   %rax,%rax
ffffffff80210cdf:	74 4c                	je     ffffffff80210d2d <_RME_Kern_High+0xed>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210ce1:	49 8d 8c 24 98 00 00 	lea    0x98(%r12),%rcx
ffffffff80210ce8:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210ce9:	48 39 c8             	cmp    %rcx,%rax
ffffffff80210cec:	74 3f                	je     ffffffff80210d2d <_RME_Kern_High+0xed>
        return Inv_Top->Prc->Pgt;
ffffffff80210cee:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210cf2:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff80210cf6:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff80210cfa:	48 39 42 18          	cmp    %rax,0x18(%rdx)
ffffffff80210cfe:	74 05                	je     ffffffff80210d05 <_RME_Kern_High+0xc5>
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff80210d00:	e8 bb 9f 00 00       	call   ffffffff8021acc0 <__RME_Pgt_Set>
    Local->Thd_Cur=Thd_New;
ffffffff80210d05:	4c 89 63 08          	mov    %r12,0x8(%rbx)
}
ffffffff80210d09:	5b                   	pop    %rbx
ffffffff80210d0a:	5d                   	pop    %rbp
ffffffff80210d0b:	41 5c                	pop    %r12
ffffffff80210d0d:	41 5d                	pop    %r13
ffffffff80210d0f:	41 5e                	pop    %r14
ffffffff80210d11:	c3                   	ret
ffffffff80210d12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return Thd->Sched.Prc->Pgt;
ffffffff80210d18:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff80210d1c:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210d20:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff80210d27:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210d28:	48 85 c0             	test   %rax,%rax
ffffffff80210d2b:	75 b4                	jne    ffffffff80210ce1 <_RME_Kern_High+0xa1>
        return Thd->Sched.Prc->Pgt;
ffffffff80210d2d:	49 8b 44 24 58       	mov    0x58(%r12),%rax
ffffffff80210d32:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff80210d36:	eb be                	jmp    ffffffff80210cf6 <_RME_Kern_High+0xb6>
ffffffff80210d38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210d3f:	00 

ffffffff80210d40 <_RME_Svc_Handler>:
{
ffffffff80210d40:	f3 0f 1e fa          	endbr64
ffffffff80210d44:	41 57                	push   %r15
ffffffff80210d46:	41 56                	push   %r14
ffffffff80210d48:	41 55                	push   %r13
ffffffff80210d4a:	41 54                	push   %r12
ffffffff80210d4c:	55                   	push   %rbp
ffffffff80210d4d:	53                   	push   %rbx
ffffffff80210d4e:	48 89 fb             	mov    %rdi,%rbx
ffffffff80210d51:	48 83 ec 78          	sub    $0x78,%rsp
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
ffffffff80210d55:	48 8d 4c 24 30       	lea    0x30(%rsp),%rcx
ffffffff80210d5a:	48 8d 54 24 28       	lea    0x28(%rsp),%rdx
ffffffff80210d5f:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
ffffffff80210d64:	e8 07 a5 00 00       	call   ffffffff8021b270 <__RME_Svc_Param_Get>
    if(Svc_Num==RME_SVC_INV_RET)
ffffffff80210d69:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
ffffffff80210d6e:	83 e5 3f             	and    $0x3f,%ebp
ffffffff80210d71:	74 5d                	je     ffffffff80210dd0 <_RME_Svc_Handler+0x90>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff80210d73:	e8 c7 aa ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80210d78:	48 8b 40 08          	mov    0x8(%rax),%rax
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff80210d7c:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff80210d83:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210d8a:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80210d8d:	74 31                	je     ffffffff80210dc0 <_RME_Svc_Handler+0x80>
ffffffff80210d8f:	48 85 d2             	test   %rdx,%rdx
ffffffff80210d92:	74 2c                	je     ffffffff80210dc0 <_RME_Svc_Handler+0x80>
        Cpt=Inv_Top->Prc->Cpt;
ffffffff80210d94:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff80210d98:	4c 8b 78 28          	mov    0x28(%rax),%r15
    if(Svc_Num==RME_SVC_INV_ACT)
ffffffff80210d9c:	48 83 fd 01          	cmp    $0x1,%rbp
ffffffff80210da0:	0f 84 9a 0c 00 00    	je     ffffffff80211a40 <_RME_Svc_Handler+0xd00>
    switch(Svc_Num)
ffffffff80210da6:	48 83 fd 09          	cmp    $0x9,%rbp
ffffffff80210daa:	0f 87 de 0d 00 00    	ja     ffffffff80211b8e <_RME_Svc_Handler+0xe4e>
ffffffff80210db0:	3e ff 24 ed a0 d0 21 	notrack jmp *-0x7fde2f60(,%rbp,8)
ffffffff80210db7:	80 
ffffffff80210db8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80210dbf:	00 
        Cpt=Thd_Cur->Sched.Prc->Cpt;
ffffffff80210dc0:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80210dc4:	4c 8b 78 28          	mov    0x28(%rax),%r15
ffffffff80210dc8:	eb d2                	jmp    ffffffff80210d9c <_RME_Svc_Handler+0x5c>
ffffffff80210dca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Retval=_RME_Inv_Ret(Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
ffffffff80210dd0:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
ffffffff80210dd5:	31 d2                	xor    %edx,%edx
ffffffff80210dd7:	48 89 df             	mov    %rbx,%rdi
ffffffff80210dda:	e8 d1 b9 ff ff       	call   ffffffff8020c7b0 <_RME_Inv_Ret>
        RME_SWITCH_RETURN(Reg, Retval);
ffffffff80210ddf:	48 85 c0             	test   %rax,%rax
ffffffff80210de2:	0f 88 08 0a 00 00    	js     ffffffff802117f0 <_RME_Svc_Handler+0xab0>
}
ffffffff80210de8:	48 83 c4 78          	add    $0x78,%rsp
ffffffff80210dec:	5b                   	pop    %rbx
ffffffff80210ded:	5d                   	pop    %rbp
ffffffff80210dee:	41 5c                	pop    %r12
ffffffff80210df0:	41 5d                	pop    %r13
ffffffff80210df2:	41 5e                	pop    %r14
ffffffff80210df4:	41 5f                	pop    %r15
ffffffff80210df6:	c3                   	ret
ffffffff80210df7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80210dfe:	00 00 
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Thd */
ffffffff80210e00:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13
            Retval=_RME_Thd_Swt(Cpt,
ffffffff80210e05:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
    Local=RME_CPU_LOCAL();
ffffffff80210e0a:	e8 30 aa ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Cur=Local->Thd_Cur;
ffffffff80210e0f:	48 8b 68 08          	mov    0x8(%rax),%rbp
    Local=RME_CPU_LOCAL();
ffffffff80210e13:	49 89 c6             	mov    %rax,%r14
    if(Cap_Thd<RME_CID_NULL)
ffffffff80210e16:	49 81 fd ff ff ff 7f 	cmp    $0x7fffffff,%r13
ffffffff80210e1d:	0f 8e 4d 0f 00 00    	jle    ffffffff80211d70 <_RME_Svc_Handler+0x1030>
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80210e23:	4d 85 e4             	test   %r12,%r12
ffffffff80210e26:	74 14                	je     ffffffff80210e3c <_RME_Svc_Handler+0xfc>
ffffffff80210e28:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80210e2f:	ff ff 7f 
ffffffff80210e32:	48 3b 45 30          	cmp    0x30(%rbp),%rax
ffffffff80210e36:	0f 83 c2 25 00 00    	jae    ffffffff802133fe <_RME_Svc_Handler+0x26be>
            _RME_Run_Del(Thd_Cur);
ffffffff80210e3c:	48 89 ef             	mov    %rbp,%rdi
ffffffff80210e3f:	e8 1c b9 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
    Prio=Thd->Sched.Prio;
ffffffff80210e44:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff80210e48:	48 8b 45 28          	mov    0x28(%rbp),%rax
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80210e4c:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210e4f:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80210e53:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff80210e57:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff80210e5c:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff80210e60:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210e65:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff80210e68:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210e6c:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff80210e70:	66 48 0f 6e d2       	movq   %rdx,%xmm2
ffffffff80210e75:	66 0f 6c c2          	punpcklqdq %xmm2,%xmm0
ffffffff80210e79:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff80210e7d:	48 89 2a             	mov    %rbp,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80210e80:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80210e85:	48 d3 e2             	shl    %cl,%rdx
ffffffff80210e88:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80210e8d:	49 8b 46 20          	mov    0x20(%r14),%rax
ffffffff80210e91:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80210e95:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80210e99:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80210e9c:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80210ea0:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80210ea5:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80210ea9:	4d 8b 6c 06 08       	mov    0x8(%r14,%rax,1),%r13
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80210eae:	31 f6                	xor    %esi,%esi
ffffffff80210eb0:	48 89 df             	mov    %rbx,%rdi
ffffffff80210eb3:	e8 c8 a3 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
    if(Thd_Cur==Thd_New)
ffffffff80210eb8:	4c 39 ed             	cmp    %r13,%rbp
ffffffff80210ebb:	0f 84 27 ff ff ff    	je     ffffffff80210de8 <_RME_Svc_Handler+0xa8>
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff80210ec1:	4d 8b a5 90 00 00 00 	mov    0x90(%r13),%r12
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff80210ec8:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80210ecf:	48 89 de             	mov    %rbx,%rsi
ffffffff80210ed2:	e8 69 96 00 00       	call   ffffffff8021a540 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80210ed7:	4c 89 e6             	mov    %r12,%rsi
ffffffff80210eda:	48 89 df             	mov    %rbx,%rdi
ffffffff80210edd:	e8 5e 96 00 00       	call   ffffffff8021a540 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210ee2:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
ffffffff80210ee9:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210ef0:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210ef3:	0f 84 37 22 00 00    	je     ffffffff80213130 <_RME_Svc_Handler+0x23f0>
ffffffff80210ef9:	48 85 c0             	test   %rax,%rax
ffffffff80210efc:	0f 84 2e 22 00 00    	je     ffffffff80213130 <_RME_Svc_Handler+0x23f0>
        return Inv_Top->Prc->Pgt;
ffffffff80210f02:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210f06:	48 8b 48 30          	mov    0x30(%rax),%rcx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80210f0a:	49 8b 85 98 00 00 00 	mov    0x98(%r13),%rax
ffffffff80210f11:	49 8d 95 98 00 00 00 	lea    0x98(%r13),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff80210f18:	48 39 d0             	cmp    %rdx,%rax
ffffffff80210f1b:	0f 84 ff 21 00 00    	je     ffffffff80213120 <_RME_Svc_Handler+0x23e0>
ffffffff80210f21:	48 85 c0             	test   %rax,%rax
ffffffff80210f24:	0f 84 f6 21 00 00    	je     ffffffff80213120 <_RME_Svc_Handler+0x23e0>
        return Inv_Top->Prc->Pgt;
ffffffff80210f2a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210f2e:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff80210f32:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff80210f36:	48 39 41 18          	cmp    %rax,0x18(%rcx)
ffffffff80210f3a:	74 05                	je     ffffffff80210f41 <_RME_Svc_Handler+0x201>
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff80210f3c:	e8 7f 9d 00 00       	call   ffffffff8021acc0 <__RME_Pgt_Set>
    Local->Thd_Cur=Thd_New;
ffffffff80210f41:	4d 89 6e 08          	mov    %r13,0x8(%r14)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80210f45:	e9 9e fe ff ff       	jmp    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
ffffffff80210f4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff80210f50:	4c 8b 6c 24 40       	mov    0x40(%rsp),%r13
                                      (rme_cid_t)Param[1],                  /* rme_cid_t Cap_Thd_Src */
ffffffff80210f55:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
ffffffff80210f5a:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    if(Time==0U)
ffffffff80210f5f:	4d 85 ed             	test   %r13,%r13
ffffffff80210f62:	0f 84 cb 33 00 00    	je     ffffffff80214333 <_RME_Svc_Handler+0x35f3>
{
    struct RME_Cap_Kfn* Kfn_Op;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80210f68:	49 8b 4f 28          	mov    0x28(%r15),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80210f6c:	f6 c4 80             	test   $0x80,%ah
ffffffff80210f6f:	0f 84 0b 0f 00 00    	je     ffffffff80211e80 <_RME_Svc_Handler+0x1140>
ffffffff80210f75:	48 89 c2             	mov    %rax,%rdx
ffffffff80210f78:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210f7c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80210f7f:	0f 83 bb 21 00 00    	jae    ffffffff80213140 <_RME_Svc_Handler+0x2400>
ffffffff80210f85:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80210f89:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80210f8d:	49 b9 00 00 00 00 ff 	movabs $0xffff00000000,%r9
ffffffff80210f94:	ff 00 00 
ffffffff80210f97:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80210f9e:	00 00 00 
ffffffff80210fa1:	48 01 f2             	add    %rsi,%rdx
ffffffff80210fa4:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80210fa7:	49 89 fa             	mov    %rdi,%r10
ffffffff80210faa:	4d 21 ca             	and    %r9,%r10
ffffffff80210fad:	4d 39 c2             	cmp    %r8,%r10
ffffffff80210fb0:	0f 84 da 21 00 00    	je     ffffffff80213190 <_RME_Svc_Handler+0x2450>
ffffffff80210fb6:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80210fba:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80210fbe:	0f 85 03 0f 00 00    	jne    ffffffff80211ec7 <_RME_Svc_Handler+0x1187>
ffffffff80210fc4:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80210fc8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210fcd:	48 39 f8             	cmp    %rdi,%rax
ffffffff80210fd0:	0f 83 6a 21 00 00    	jae    ffffffff80213140 <_RME_Svc_Handler+0x2400>
ffffffff80210fd6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210fda:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80210fde:	48 8b 10             	mov    (%rax),%rdx
ffffffff80210fe1:	48 89 c5             	mov    %rax,%rbp
ffffffff80210fe4:	4c 89 c8             	mov    %r9,%rax
ffffffff80210fe7:	48 21 d0             	and    %rdx,%rax
ffffffff80210fea:	4c 39 c0             	cmp    %r8,%rax
ffffffff80210fed:	0f 84 9d 21 00 00    	je     ffffffff80213190 <_RME_Svc_Handler+0x2450>
ffffffff80210ff3:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80210ff7:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80210ffb:	0f 85 c6 0e 00 00    	jne    ffffffff80211ec7 <_RME_Svc_Handler+0x1187>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff80211001:	41 f7 c4 00 80 00 00 	test   $0x8000,%r12d
ffffffff80211008:	0f 85 b2 1f 00 00    	jne    ffffffff80212fc0 <_RME_Svc_Handler+0x2280>
ffffffff8021100e:	49 39 cc             	cmp    %rcx,%r12
ffffffff80211011:	0f 83 29 21 00 00    	jae    ffffffff80213140 <_RME_Svc_Handler+0x2400>
ffffffff80211017:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8021101e:	ff 00 00 
ffffffff80211021:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff80211025:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff8021102c:	00 00 00 
ffffffff8021102f:	49 01 f4             	add    %rsi,%r12
ffffffff80211032:	49 8b 04 24          	mov    (%r12),%rax
ffffffff80211036:	48 21 c2             	and    %rax,%rdx
ffffffff80211039:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021103c:	0f 84 4e 21 00 00    	je     ffffffff80213190 <_RME_Svc_Handler+0x2450>
ffffffff80211042:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211046:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021104a:	0f 85 77 0e 00 00    	jne    ffffffff80211ec7 <_RME_Svc_Handler+0x1187>
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80211050:	f6 45 10 80          	testb  $0x80,0x10(%rbp)
ffffffff80211054:	0f 84 93 24 00 00    	je     ffffffff802134ed <_RME_Svc_Handler+0x27ad>
    RME_CAP_CHECK(Thd_Src_Op,RME_THD_FLAG_XFER_SRC);
ffffffff8021105a:	41 f6 44 24 10 40    	testb  $0x40,0x10(%r12)
ffffffff80211060:	0f 84 87 24 00 00    	je     ffffffff802134ed <_RME_Svc_Handler+0x27ad>
    Local=RME_CPU_LOCAL();
ffffffff80211066:	e8 d4 a7 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Src=RME_CAP_GETOBJ(Thd_Src_Op,struct RME_Thd_Struct*);
ffffffff8021106b:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
    Local=RME_CPU_LOCAL();
ffffffff80211070:	49 89 c6             	mov    %rax,%r14
    if(Thd_Src->Sched.Local!=Local)
ffffffff80211073:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff80211077:	0f 85 b6 32 00 00    	jne    ffffffff80214333 <_RME_Svc_Handler+0x35f3>
    if(Thd_Src->Sched.Slice==0U)
ffffffff8021107d:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff80211081:	48 85 c0             	test   %rax,%rax
ffffffff80211084:	0f 84 a9 32 00 00    	je     ffffffff80214333 <_RME_Svc_Handler+0x35f3>
    Thd_Dst=RME_CAP_GETOBJ(Thd_Dst_Op,struct RME_Thd_Struct*);
ffffffff8021108a:	48 8b 6d 18          	mov    0x18(%rbp),%rbp
    if(Thd_Dst->Sched.Local!=Local)
ffffffff8021108e:	4c 3b 75 28          	cmp    0x28(%rbp),%r14
ffffffff80211092:	0f 85 9b 32 00 00    	jne    ffffffff80214333 <_RME_Svc_Handler+0x35f3>
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80211098:	48 8b 75 48          	mov    0x48(%rbp),%rsi
ffffffff8021109c:	48 39 77 48          	cmp    %rsi,0x48(%rdi)
ffffffff802110a0:	73 14                	jae    ffffffff802110b6 <_RME_Svc_Handler+0x376>
ffffffff802110a2:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff802110a9:	ff ff 7f 
ffffffff802110ac:	48 39 55 30          	cmp    %rdx,0x30(%rbp)
ffffffff802110b0:	0f 85 71 32 00 00    	jne    ffffffff80214327 <_RME_Svc_Handler+0x35e7>
    if(Thd_Src->Sched.Slice<RME_THD_INF_TIME)
ffffffff802110b6:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff802110bd:	ff ff 7f 
ffffffff802110c0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802110c3:	0f 82 a3 21 00 00    	jb     ffffffff8021326c <_RME_Svc_Handler+0x252c>
        if(Time>=RME_THD_INF_TIME)
ffffffff802110c9:	4c 39 ea             	cmp    %r13,%rdx
ffffffff802110cc:	0f 83 a1 23 00 00    	jae    ffffffff80213473 <_RME_Svc_Handler+0x2733>
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff802110d2:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
ffffffff802110d6:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802110d9:	0f 83 2b 25 00 00    	jae    ffffffff8021360a <_RME_Svc_Handler+0x28ca>
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff802110df:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
ffffffff802110e6:	00 
        if(Thd_Src->Sched.State==RME_THD_READY)
ffffffff802110e7:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff802110ec:	0f 84 f5 24 00 00    	je     ffffffff802135e7 <_RME_Svc_Handler+0x28a7>
    __RME_Svc_Retval_Set(Reg,(rme_ret_t)(Thd_Dst->Sched.Slice));
ffffffff802110f2:	48 8b 75 30          	mov    0x30(%rbp),%rsi
ffffffff802110f6:	48 89 df             	mov    %rbx,%rdi
ffffffff802110f9:	e8 82 a1 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
    if(Thd_Dst->Sched.State==RME_THD_TIMEOUT)
ffffffff802110fe:	48 83 7d 38 02       	cmpq   $0x2,0x38(%rbp)
ffffffff80211103:	75 51                	jne    ffffffff80211156 <_RME_Svc_Handler+0x416>
    Prio=Thd->Sched.Prio;
ffffffff80211105:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff80211109:	48 8b 45 28          	mov    0x28(%rbp),%rax
        Thd_Dst->Sched.State=RME_THD_READY;
ffffffff8021110d:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff80211114:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80211115:	48 89 ce             	mov    %rcx,%rsi
ffffffff80211118:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8021111c:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff80211120:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff80211125:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff80211129:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021112e:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff80211131:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211135:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff80211139:	66 48 0f 6e ea       	movq   %rdx,%xmm5
ffffffff8021113e:	66 0f 6c c5          	punpcklqdq %xmm5,%xmm0
ffffffff80211142:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff80211146:	48 89 2a             	mov    %rbp,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211149:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021114e:	48 d3 e2             	shl    %cl,%rdx
ffffffff80211151:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
    _RME_Kern_High(Reg,Local);
ffffffff80211156:	4c 89 f6             	mov    %r14,%rsi
ffffffff80211159:	48 89 df             	mov    %rbx,%rdi
ffffffff8021115c:	e8 df fa ff ff       	call   ffffffff80210c40 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211161:	e9 82 fc ff ff       	jmp    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
ffffffff80211166:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021116d:	00 00 00 
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff80211170:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
ffffffff80211175:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8021117a:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
ffffffff8021117f:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff80211184:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    if((Number==0U)||(Number>3U))
ffffffff80211189:	44 89 e2             	mov    %r12d,%edx
ffffffff8021118c:	49 8d 46 ff          	lea    -0x1(%r14),%rax
ffffffff80211190:	48 89 14 24          	mov    %rdx,(%rsp)
ffffffff80211194:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211198:	0f 87 88 24 00 00    	ja     ffffffff80213626 <_RME_Svc_Handler+0x28e6>
    Local=RME_CPU_LOCAL();
ffffffff8021119e:	e8 9c a6 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff802111a3:	41 f7 c4 00 80 00 00 	test   $0x8000,%r12d
ffffffff802111aa:	49 8b 4f 28          	mov    0x28(%r15),%rcx
ffffffff802111ae:	48 8b 14 24          	mov    (%rsp),%rdx
    Local=RME_CPU_LOCAL();
ffffffff802111b2:	48 89 c5             	mov    %rax,%rbp
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff802111b5:	0f 84 1d 0d 00 00    	je     ffffffff80211ed8 <_RME_Svc_Handler+0x1198>
ffffffff802111bb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802111bf:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802111c2:	0f 83 77 2d 00 00    	jae    ffffffff80213f3f <_RME_Svc_Handler+0x31ff>
ffffffff802111c8:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff802111cf:	ff 00 00 
ffffffff802111d2:	48 89 d0             	mov    %rdx,%rax
ffffffff802111d5:	49 8b 57 18          	mov    0x18(%r15),%rdx
ffffffff802111d9:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802111e0:	00 00 00 
ffffffff802111e3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802111e7:	48 01 d0             	add    %rdx,%rax
ffffffff802111ea:	48 8b 30             	mov    (%rax),%rsi
ffffffff802111ed:	49 89 f1             	mov    %rsi,%r9
ffffffff802111f0:	49 21 f9             	and    %rdi,%r9
ffffffff802111f3:	4d 39 c1             	cmp    %r8,%r9
ffffffff802111f6:	0f 84 16 0d 00 00    	je     ffffffff80211f12 <_RME_Svc_Handler+0x11d2>
ffffffff802111fc:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80211200:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80211204:	0f 85 87 1e 00 00    	jne    ffffffff80213091 <_RME_Svc_Handler+0x2351>
ffffffff8021120a:	4c 89 e6             	mov    %r12,%rsi
ffffffff8021120d:	4c 8b 48 28          	mov    0x28(%rax),%r9
ffffffff80211211:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80211217:	4c 39 ce             	cmp    %r9,%rsi
ffffffff8021121a:	0f 83 1f 2d 00 00    	jae    ffffffff80213f3f <_RME_Svc_Handler+0x31ff>
ffffffff80211220:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80211224:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff80211228:	48 89 f0             	mov    %rsi,%rax
ffffffff8021122b:	48 8b 36             	mov    (%rsi),%rsi
ffffffff8021122e:	48 21 f7             	and    %rsi,%rdi
ffffffff80211231:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80211234:	0f 84 d8 0c 00 00    	je     ffffffff80211f12 <_RME_Svc_Handler+0x11d2>
ffffffff8021123a:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021123e:	48 83 fe 06          	cmp    $0x6,%rsi
ffffffff80211242:	0f 85 49 1e 00 00    	jne    ffffffff80213091 <_RME_Svc_Handler+0x2351>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80211248:	f6 40 10 08          	testb  $0x8,0x10(%rax)
ffffffff8021124c:	0f 84 d5 2c 00 00    	je     ffffffff80213f27 <_RME_Svc_Handler+0x31e7>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff80211252:	4c 8b 40 18          	mov    0x18(%rax),%r8
        if(Thread[Count]->Sched.Local!=Local)
ffffffff80211256:	49 3b 68 28          	cmp    0x28(%r8),%rbp
ffffffff8021125a:	0f 85 c6 23 00 00    	jne    ffffffff80213626 <_RME_Svc_Handler+0x28e6>
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff80211260:	4d 89 e2             	mov    %r12,%r10
ffffffff80211263:	49 c1 ea 20          	shr    $0x20,%r10
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff80211267:	4d 39 50 48          	cmp    %r10,0x48(%r8)
ffffffff8021126b:	0f 82 f2 30 00 00    	jb     ffffffff80214363 <_RME_Svc_Handler+0x3623>
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff80211271:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
ffffffff80211276:	4d 89 e9             	mov    %r13,%r9
ffffffff80211279:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff8021127d:	49 c1 ef 20          	shr    $0x20,%r15
    for(Count=0U;Count<Number;Count++)
ffffffff80211281:	49 83 fe 01          	cmp    $0x1,%r14
ffffffff80211285:	0f 84 7b 2e 00 00    	je     ffffffff80214106 <_RME_Svc_Handler+0x33c6>
ffffffff8021128b:	44 89 e8             	mov    %r13d,%eax
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8021128e:	41 f7 c5 00 80 00 00 	test   $0x8000,%r13d
ffffffff80211295:	0f 84 b5 1d 00 00    	je     ffffffff80213050 <_RME_Svc_Handler+0x2310>
ffffffff8021129b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021129f:	48 39 c8             	cmp    %rcx,%rax
ffffffff802112a2:	0f 83 97 2c 00 00    	jae    ffffffff80213f3f <_RME_Svc_Handler+0x31ff>
ffffffff802112a8:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff802112af:	ff 00 00 
ffffffff802112b2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802112b6:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802112bd:	00 00 00 
ffffffff802112c0:	48 01 d0             	add    %rdx,%rax
ffffffff802112c3:	48 8b 30             	mov    (%rax),%rsi
ffffffff802112c6:	49 21 f3             	and    %rsi,%r11
ffffffff802112c9:	49 39 fb             	cmp    %rdi,%r11
ffffffff802112cc:	0f 84 40 0c 00 00    	je     ffffffff80211f12 <_RME_Svc_Handler+0x11d2>
ffffffff802112d2:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802112d6:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802112da:	0f 85 b1 1d 00 00    	jne    ffffffff80213091 <_RME_Svc_Handler+0x2351>
ffffffff802112e0:	4c 89 ee             	mov    %r13,%rsi
ffffffff802112e3:	4c 8b 58 28          	mov    0x28(%rax),%r11
ffffffff802112e7:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff802112ed:	4c 39 de             	cmp    %r11,%rsi
ffffffff802112f0:	0f 83 49 2c 00 00    	jae    ffffffff80213f3f <_RME_Svc_Handler+0x31ff>
ffffffff802112f6:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802112fa:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff802112fe:	4c 8b 1e             	mov    (%rsi),%r11
ffffffff80211301:	48 89 f0             	mov    %rsi,%rax
ffffffff80211304:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8021130b:	ff 00 00 
ffffffff8021130e:	4c 21 de             	and    %r11,%rsi
ffffffff80211311:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80211314:	0f 84 f8 0b 00 00    	je     ffffffff80211f12 <_RME_Svc_Handler+0x11d2>
ffffffff8021131a:	49 c1 eb 30          	shr    $0x30,%r11
ffffffff8021131e:	49 83 fb 06          	cmp    $0x6,%r11
ffffffff80211322:	0f 85 69 1d 00 00    	jne    ffffffff80213091 <_RME_Svc_Handler+0x2351>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80211328:	f6 40 10 08          	testb  $0x8,0x10(%rax)
ffffffff8021132c:	0f 84 f5 2b 00 00    	je     ffffffff80213f27 <_RME_Svc_Handler+0x31e7>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff80211332:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211336:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
        if(Thread[Count]->Sched.Local!=Local)
ffffffff8021133b:	48 3b 68 28          	cmp    0x28(%rax),%rbp
ffffffff8021133f:	0f 85 e1 22 00 00    	jne    ffffffff80213626 <_RME_Svc_Handler+0x28e6>
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff80211345:	4c 39 48 48          	cmp    %r9,0x48(%rax)
ffffffff80211349:	0f 82 14 30 00 00    	jb     ffffffff80214363 <_RME_Svc_Handler+0x3623>
    for(Count=0U;Count<Number;Count++)
ffffffff8021134f:	49 83 fe 03          	cmp    $0x3,%r14
ffffffff80211353:	75 7b                	jne    ffffffff802113d0 <_RME_Svc_Handler+0x690>
ffffffff80211355:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
ffffffff8021135a:	89 f0                	mov    %esi,%eax
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff8021135c:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80211362:	0f 85 66 1f 00 00    	jne    ffffffff802132ce <_RME_Svc_Handler+0x258e>
ffffffff80211368:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021136b:	0f 83 ce 2b 00 00    	jae    ffffffff80213f3f <_RME_Svc_Handler+0x31ff>
ffffffff80211371:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211378:	ff 00 00 
ffffffff8021137b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021137f:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211386:	00 00 00 
ffffffff80211389:	48 01 c2             	add    %rax,%rdx
ffffffff8021138c:	48 8b 02             	mov    (%rdx),%rax
ffffffff8021138f:	48 21 c1             	and    %rax,%rcx
ffffffff80211392:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211395:	0f 84 77 0b 00 00    	je     ffffffff80211f12 <_RME_Svc_Handler+0x11d2>
ffffffff8021139b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021139f:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802113a3:	0f 85 e8 1c 00 00    	jne    ffffffff80213091 <_RME_Svc_Handler+0x2351>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff802113a9:	f6 42 10 08          	testb  $0x8,0x10(%rdx)
ffffffff802113ad:	0f 84 74 2b 00 00    	je     ffffffff80213f27 <_RME_Svc_Handler+0x31e7>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff802113b3:	48 8b 42 18          	mov    0x18(%rdx),%rax
ffffffff802113b7:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
        if(Thread[Count]->Sched.Local!=Local)
ffffffff802113bc:	48 3b 68 28          	cmp    0x28(%rax),%rbp
ffffffff802113c0:	0f 85 60 22 00 00    	jne    ffffffff80213626 <_RME_Svc_Handler+0x28e6>
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff802113c6:	4c 39 78 48          	cmp    %r15,0x48(%rax)
ffffffff802113ca:	0f 82 93 2f 00 00    	jb     ffffffff80214363 <_RME_Svc_Handler+0x3623>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff802113d0:	31 f6                	xor    %esi,%esi
ffffffff802113d2:	48 89 df             	mov    %rbx,%rdi
ffffffff802113d5:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
ffffffff802113da:	4c 89 54 24 10       	mov    %r10,0x10(%rsp)
ffffffff802113df:	4c 89 0c 24          	mov    %r9,(%rsp)
ffffffff802113e3:	e8 98 9e 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff802113e8:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
ffffffff802113ed:	4c 8b 0c 24          	mov    (%rsp),%r9
ffffffff802113f1:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
ffffffff802113f6:	49 83 78 38 00       	cmpq   $0x0,0x38(%r8)
ffffffff802113fb:	0f 84 7f 2d 00 00    	je     ffffffff80214180 <_RME_Svc_Handler+0x3440>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80211401:	4d 89 50 40          	mov    %r10,0x40(%r8)
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff80211405:	48 8b 7c 24 58       	mov    0x58(%rsp),%rdi
ffffffff8021140a:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff8021140f:	0f 84 e3 2d 00 00    	je     ffffffff802141f8 <_RME_Svc_Handler+0x34b8>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80211415:	4c 89 4f 40          	mov    %r9,0x40(%rdi)
    for(Count=0U;Count<Number;Count++)
ffffffff80211419:	49 83 fe 03          	cmp    $0x3,%r14
ffffffff8021141d:	75 14                	jne    ffffffff80211433 <_RME_Svc_Handler+0x6f3>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff8021141f:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
ffffffff80211424:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
ffffffff80211429:	0f 84 71 2e 00 00    	je     ffffffff802142a0 <_RME_Svc_Handler+0x3560>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff8021142f:	4c 89 7f 40          	mov    %r15,0x40(%rdi)
    _RME_Kern_High(Reg,Local);
ffffffff80211433:	48 89 ee             	mov    %rbp,%rsi
ffffffff80211436:	48 89 df             	mov    %rbx,%rdi
ffffffff80211439:	e8 02 f8 ff ff       	call   ffffffff80210c40 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021143e:	e9 a5 f9 ff ff       	jmp    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
ffffffff80211443:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Retval=_RME_Thd_Exec_Set(Cpt,
ffffffff80211448:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff8021144d:	48 8b 6c 24 40       	mov    0x40(%rsp),%rbp
ffffffff80211452:	4c 8b 6c 24 38       	mov    0x38(%rsp),%r13
ffffffff80211457:	4c 8b 64 24 30       	mov    0x30(%rsp),%r12
ffffffff8021145c:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80211460:	49 8b 4f 28          	mov    0x28(%r15),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211464:	f6 c4 80             	test   $0x80,%ah
ffffffff80211467:	0f 84 6b 08 00 00    	je     ffffffff80211cd8 <_RME_Svc_Handler+0xf98>
ffffffff8021146d:	48 89 c2             	mov    %rax,%rdx
ffffffff80211470:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211474:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211477:	0f 83 f7 1e 00 00    	jae    ffffffff80213374 <_RME_Svc_Handler+0x2634>
ffffffff8021147d:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80211484:	ff 00 00 
ffffffff80211487:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021148b:	48 01 f2             	add    %rsi,%rdx
ffffffff8021148e:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211495:	00 00 00 
ffffffff80211498:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8021149b:	49 89 c8             	mov    %rcx,%r8
ffffffff8021149e:	49 21 f8             	and    %rdi,%r8
ffffffff802114a1:	49 39 f0             	cmp    %rsi,%r8
ffffffff802114a4:	0f 84 18 1f 00 00    	je     ffffffff802133c2 <_RME_Svc_Handler+0x2682>
ffffffff802114aa:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802114ae:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802114b2:	0f 85 61 08 00 00    	jne    ffffffff80211d19 <_RME_Svc_Handler+0xfd9>
ffffffff802114b8:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff802114bc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802114c1:	48 39 c8             	cmp    %rcx,%rax
ffffffff802114c4:	0f 83 aa 1e 00 00    	jae    ffffffff80213374 <_RME_Svc_Handler+0x2634>
ffffffff802114ca:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802114ce:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802114d2:	48 8b 08             	mov    (%rax),%rcx
ffffffff802114d5:	48 21 cf             	and    %rcx,%rdi
ffffffff802114d8:	48 39 f7             	cmp    %rsi,%rdi
ffffffff802114db:	0f 84 e1 1e 00 00    	je     ffffffff802133c2 <_RME_Svc_Handler+0x2682>
ffffffff802114e1:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802114e5:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff802114e9:	0f 85 2a 08 00 00    	jne    ffffffff80211d19 <_RME_Svc_Handler+0xfd9>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff802114ef:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff802114f3:	0f 84 a9 20 00 00    	je     ffffffff802135a2 <_RME_Svc_Handler+0x2862>
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff802114f9:	4c 8b 70 18          	mov    0x18(%rax),%r14
    Local=RME_CPU_LOCAL();
ffffffff802114fd:	e8 3d a3 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80211502:	49 89 c7             	mov    %rax,%r15
    if(Thread->Sched.Local!=Local)
ffffffff80211505:	49 3b 46 28          	cmp    0x28(%r14),%rax
ffffffff80211509:	0f 85 3c 2a 00 00    	jne    ffffffff80213f4b <_RME_Svc_Handler+0x320b>
    if((Entry!=RME_NULL)&&(Stack!=RME_NULL))
ffffffff8021150f:	4d 85 e4             	test   %r12,%r12
ffffffff80211512:	74 2b                	je     ffffffff8021153f <_RME_Svc_Handler+0x7ff>
ffffffff80211514:	4d 85 ed             	test   %r13,%r13
ffffffff80211517:	74 26                	je     ffffffff8021153f <_RME_Svc_Handler+0x7ff>
        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
ffffffff80211519:	4d 8b 86 90 00 00 00 	mov    0x90(%r14),%r8
ffffffff80211520:	48 89 e9             	mov    %rbp,%rcx
ffffffff80211523:	4c 89 ea             	mov    %r13,%rdx
ffffffff80211526:	4c 89 e6             	mov    %r12,%rsi
ffffffff80211529:	48 bf ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdi
ffffffff80211530:	ff ff 7f 
ffffffff80211533:	49 23 be 88 00 00 00 	and    0x88(%r14),%rdi
ffffffff8021153a:	e8 b1 8f 00 00       	call   ffffffff8021a4f0 <__RME_Thd_Reg_Init>
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff8021153f:	31 f6                	xor    %esi,%esi
ffffffff80211541:	48 89 df             	mov    %rbx,%rdi
ffffffff80211544:	e8 37 9d 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80211549:	49 83 7e 38 03       	cmpq   $0x3,0x38(%r14)
ffffffff8021154e:	0f 85 94 f8 ff ff    	jne    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
        if(Thread->Sched.Slice!=0U)
ffffffff80211554:	49 83 7e 30 00       	cmpq   $0x0,0x30(%r14)
ffffffff80211559:	0f 84 67 20 00 00    	je     ffffffff802135c6 <_RME_Svc_Handler+0x2886>
    Prio=Thd->Sched.Prio;
ffffffff8021155f:	49 8b 4e 40          	mov    0x40(%r14),%rcx
    Local=Thd->Sched.Local;
ffffffff80211563:	49 8b 46 28          	mov    0x28(%r14),%rax
            Thread->Sched.State=RME_THD_READY;
ffffffff80211567:	49 c7 46 38 00 00 00 	movq   $0x0,0x38(%r14)
ffffffff8021156e:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021156f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80211572:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80211576:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff8021157a:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff8021157f:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff80211583:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80211588:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff8021158b:	4c 89 77 30          	mov    %r14,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021158f:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff80211593:	66 48 0f 6e e2       	movq   %rdx,%xmm4
ffffffff80211598:	66 0f 6c c4          	punpcklqdq %xmm4,%xmm0
ffffffff8021159c:	41 0f 11 06          	movups %xmm0,(%r14)
    Prev->Next=New;
ffffffff802115a0:	4c 89 32             	mov    %r14,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802115a3:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802115a8:	48 d3 e2             	shl    %cl,%rdx
ffffffff802115ab:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        _RME_Kern_High(Reg,Local);
ffffffff802115b0:	4c 89 fe             	mov    %r15,%rsi
ffffffff802115b3:	48 89 df             	mov    %rbx,%rdi
ffffffff802115b6:	e8 85 f6 ff ff       	call   ffffffff80210c40 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802115bb:	e9 28 f8 ff ff       	jmp    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
                                       (rme_cid_t)Param[0]);                /* rme_cid_t Cap_Thd */
ffffffff802115c0:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff802115c5:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff802115c9:	49 8b 4f 28          	mov    0x28(%r15),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802115cd:	f6 c4 80             	test   $0x80,%ah
ffffffff802115d0:	0f 84 ba 06 00 00    	je     ffffffff80211c90 <_RME_Svc_Handler+0xf50>
ffffffff802115d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802115d9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802115dd:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802115e0:	0f 83 6a 1d 00 00    	jae    ffffffff80213350 <_RME_Svc_Handler+0x2610>
ffffffff802115e6:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802115ed:	00 00 00 
ffffffff802115f0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802115f4:	48 01 f2             	add    %rsi,%rdx
ffffffff802115f7:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff802115fe:	ff 00 00 
ffffffff80211601:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80211604:	49 89 c8             	mov    %rcx,%r8
ffffffff80211607:	49 21 f0             	and    %rsi,%r8
ffffffff8021160a:	49 39 f8             	cmp    %rdi,%r8
ffffffff8021160d:	0f 84 b2 06 00 00    	je     ffffffff80211cc5 <_RME_Svc_Handler+0xf85>
ffffffff80211613:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80211617:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021161b:	0f 85 c5 1d 00 00    	jne    ffffffff802133e6 <_RME_Svc_Handler+0x26a6>
ffffffff80211621:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80211625:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021162a:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021162d:	0f 83 1d 1d 00 00    	jae    ffffffff80213350 <_RME_Svc_Handler+0x2610>
ffffffff80211633:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211637:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021163b:	48 89 c5             	mov    %rax,%rbp
ffffffff8021163e:	48 8b 00             	mov    (%rax),%rax
ffffffff80211641:	48 21 c6             	and    %rax,%rsi
ffffffff80211644:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80211647:	0f 84 78 06 00 00    	je     ffffffff80211cc5 <_RME_Svc_Handler+0xf85>
ffffffff8021164d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211651:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80211655:	0f 85 8b 1d 00 00    	jne    ffffffff802133e6 <_RME_Svc_Handler+0x26a6>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff8021165b:	f6 45 10 10          	testb  $0x10,0x10(%rbp)
ffffffff8021165f:	0f 84 55 1f 00 00    	je     ffffffff802135ba <_RME_Svc_Handler+0x287a>
    Local=RME_CPU_LOCAL();
ffffffff80211665:	e8 d5 a1 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thread=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff8021166a:	48 8b 6d 18          	mov    0x18(%rbp),%rbp
    Local=RME_CPU_LOCAL();
ffffffff8021166e:	49 89 c4             	mov    %rax,%r12
    if(Thread->Sched.Local!=Local)
ffffffff80211671:	48 3b 45 28          	cmp    0x28(%rbp),%rax
ffffffff80211675:	0f 85 b8 28 00 00    	jne    ffffffff80213f33 <_RME_Svc_Handler+0x31f3>
    if(Thread->Sched.Sched_Ref!=0U)
ffffffff8021167b:	48 83 7d 60 00       	cmpq   $0x0,0x60(%rbp)
ffffffff80211680:	0f 85 66 2b 00 00    	jne    ffffffff802141ec <_RME_Svc_Handler+0x34ac>
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
ffffffff80211686:	48 8b 45 68          	mov    0x68(%rbp),%rax
ffffffff8021168a:	48 83 68 60 01       	subq   $0x1,0x60(%rax)
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
ffffffff8021168f:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff80211693:	48 8d 45 10          	lea    0x10(%rbp),%rax
ffffffff80211697:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021169a:	74 18                	je     ffffffff802116b4 <_RME_Svc_Handler+0x974>
        _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff8021169c:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    Head->Next=Head;
ffffffff802116a0:	66 48 0f 6e c0       	movq   %rax,%xmm0
ffffffff802116a5:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    Next->Prev=Prev;
ffffffff802116a9:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
    Prev->Next=Next;
ffffffff802116ad:	48 89 11             	mov    %rdx,(%rcx)
    Head->Next=Head;
ffffffff802116b0:	0f 11 45 10          	movups %xmm0,0x10(%rbp)
    if(Thread->Sched.Sched_Sig!=(void*)RME_NULL)
ffffffff802116b4:	48 8b 45 70          	mov    0x70(%rbp),%rax
ffffffff802116b8:	48 85 c0             	test   %rax,%rax
ffffffff802116bb:	74 0d                	je     ffffffff802116ca <_RME_Svc_Handler+0x98a>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802116bd:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802116c4:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff802116ca:	31 f6                	xor    %esi,%esi
ffffffff802116cc:	48 89 df             	mov    %rbx,%rdi
ffffffff802116cf:	e8 ac 9b 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_READY)
ffffffff802116d4:	48 8b 45 38          	mov    0x38(%rbp),%rax
ffffffff802116d8:	48 85 c0             	test   %rax,%rax
ffffffff802116db:	0f 84 df 1a 00 00    	je     ffffffff802131c0 <_RME_Svc_Handler+0x2480>
    else if(Thread->Sched.State==RME_THD_BLOCKED)
ffffffff802116e1:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802116e5:	0f 84 ce 1d 00 00    	je     ffffffff802134b9 <_RME_Svc_Handler+0x2779>
    Thread->Sched.Slice=0U;
ffffffff802116eb:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff802116f2:	00 
    if(Local->Thd_Cur==Thread)
ffffffff802116f3:	49 3b 6c 24 08       	cmp    0x8(%r12),%rbp
ffffffff802116f8:	0f 84 da 1a 00 00    	je     ffffffff802131d8 <_RME_Svc_Handler+0x2498>
    RME_WRITE_RELEASE((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff802116fe:	48 c7 45 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rbp)
ffffffff80211705:	ff 
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211706:	e9 dd f6 ff ff       	jmp    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
ffffffff8021170b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Retval=_RME_Kfn_Act(Cpt,
ffffffff80211710:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80211715:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
ffffffff8021171a:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
                                RME_PARAM_D1(Param[0]),                     /* rme_ptr_t Sub_ID */
ffffffff8021171f:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80211724:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff80211728:	f6 c4 80             	test   $0x80,%ah
ffffffff8021172b:	0f 84 0f 05 00 00    	je     ffffffff80211c40 <_RME_Svc_Handler+0xf00>
ffffffff80211731:	48 89 c2             	mov    %rax,%rdx
ffffffff80211734:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211738:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021173b:	0f 83 27 1c 00 00    	jae    ffffffff80213368 <_RME_Svc_Handler+0x2628>
ffffffff80211741:	49 bb 00 00 00 00 ff 	movabs $0xffff00000000,%r11
ffffffff80211748:	ff 00 00 
ffffffff8021174b:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021174f:	49 03 57 18          	add    0x18(%r15),%rdx
ffffffff80211753:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff8021175a:	00 00 00 
ffffffff8021175d:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80211760:	48 89 f5             	mov    %rsi,%rbp
ffffffff80211763:	4c 21 dd             	and    %r11,%rbp
ffffffff80211766:	4c 39 d5             	cmp    %r10,%rbp
ffffffff80211769:	0f 84 5f 1c 00 00    	je     ffffffff802133ce <_RME_Svc_Handler+0x268e>
ffffffff8021176f:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80211773:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80211777:	0f 85 05 05 00 00    	jne    ffffffff80211c82 <_RME_Svc_Handler+0xf42>
ffffffff8021177d:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80211781:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211786:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211789:	0f 83 d9 1b 00 00    	jae    ffffffff80213368 <_RME_Svc_Handler+0x2628>
ffffffff8021178f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211793:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211797:	4c 89 da             	mov    %r11,%rdx
ffffffff8021179a:	48 8b 30             	mov    (%rax),%rsi
ffffffff8021179d:	48 21 f2             	and    %rsi,%rdx
ffffffff802117a0:	4c 39 d2             	cmp    %r10,%rdx
ffffffff802117a3:	0f 84 25 1c 00 00    	je     ffffffff802133ce <_RME_Svc_Handler+0x268e>
ffffffff802117a9:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802117ad:	48 83 fe 01          	cmp    $0x1,%rsi
ffffffff802117b1:	0f 85 cb 04 00 00    	jne    ffffffff80211c82 <_RME_Svc_Handler+0xf42>
                   struct RME_Cap_Kfn*,Kfn_Op,Type_Stat);    

    /* Check if the range of calling is allowed - kernel function specific */
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff802117b7:	48 8b 40 10          	mov    0x10(%rax),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff802117bb:	89 ca                	mov    %ecx,%edx
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff802117bd:	48 89 c6             	mov    %rax,%rsi
ffffffff802117c0:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff802117c4:	48 39 d6             	cmp    %rdx,%rsi
ffffffff802117c7:	0f 82 8f 1e 00 00    	jb     ffffffff8021365c <_RME_Svc_Handler+0x291c>
       (Func_ID<RME_KFN_FLAG_LOW(Kfn_Op->Head.Flag)))
ffffffff802117cd:	89 c0                	mov    %eax,%eax
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff802117cf:	48 39 c2             	cmp    %rax,%rdx
ffffffff802117d2:	0f 82 84 1e 00 00    	jb     ffffffff8021365c <_RME_Svc_Handler+0x291c>
            Retval=_RME_Kfn_Act(Cpt,
ffffffff802117d8:	48 c1 e9 20          	shr    $0x20,%rcx
        RME_COV_MARKER();
        /* No action required */
    }

    /* Return whatever the function returns */
    return __RME_Kfn_Handler(Cpt,Reg,Func_ID,Sub_ID,Param1,Param2);
ffffffff802117dc:	48 89 de             	mov    %rbx,%rsi
ffffffff802117df:	4c 89 ff             	mov    %r15,%rdi
ffffffff802117e2:	e8 b9 76 00 00       	call   ffffffff80218ea0 <__RME_Kfn_Handler>
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff802117e7:	48 85 c0             	test   %rax,%rax
ffffffff802117ea:	0f 89 f8 f5 ff ff    	jns    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
ffffffff802117f0:	48 89 c6             	mov    %rax,%rsi
ffffffff802117f3:	48 89 df             	mov    %rbx,%rdi
ffffffff802117f6:	e8 85 9a 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
ffffffff802117fb:	e9 e8 f5 ff ff       	jmp    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Sig */
ffffffff80211800:	48 8b 6c 24 30       	mov    0x30(%rsp),%rbp
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff80211805:	4c 8b 64 24 38       	mov    0x38(%rsp),%r12
ffffffff8021180a:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff8021180e:	49 8b 57 28          	mov    0x28(%r15),%rdx
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80211812:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff80211818:	0f 84 0a 05 00 00    	je     ffffffff80211d28 <_RME_Svc_Handler+0xfe8>
ffffffff8021181e:	48 89 e8             	mov    %rbp,%rax
ffffffff80211821:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211825:	48 39 d0             	cmp    %rdx,%rax
ffffffff80211828:	0f 83 2e 1b 00 00    	jae    ffffffff8021335c <_RME_Svc_Handler+0x261c>
ffffffff8021182e:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211835:	00 00 00 
ffffffff80211838:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021183c:	48 01 c8             	add    %rcx,%rax
ffffffff8021183f:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211846:	ff 00 00 
ffffffff80211849:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021184c:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021184f:	48 21 cf             	and    %rcx,%rdi
ffffffff80211852:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80211855:	0f 84 01 05 00 00    	je     ffffffff80211d5c <_RME_Svc_Handler+0x101c>
ffffffff8021185b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021185f:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80211863:	0f 85 89 1b 00 00    	jne    ffffffff802133f2 <_RME_Svc_Handler+0x26b2>
ffffffff80211869:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021186d:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff80211873:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80211876:	0f 83 e0 1a 00 00    	jae    ffffffff8021335c <_RME_Svc_Handler+0x261c>
ffffffff8021187c:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff80211880:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff80211884:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211888:	48 21 c1             	and    %rax,%rcx
ffffffff8021188b:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021188e:	0f 84 c8 04 00 00    	je     ffffffff80211d5c <_RME_Svc_Handler+0x101c>
ffffffff80211894:	48 89 c2             	mov    %rax,%rdx
ffffffff80211897:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021189b:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8021189f:	0f 85 4d 1b 00 00    	jne    ffffffff802133f2 <_RME_Svc_Handler+0x26b2>
    switch(Option)
ffffffff802118a5:	49 83 fc 02          	cmp    $0x2,%r12
ffffffff802118a9:	0f 84 04 1b 00 00    	je     ffffffff802133b3 <_RME_Svc_Handler+0x2673>
ffffffff802118af:	0f 87 eb 18 00 00    	ja     ffffffff802131a0 <_RME_Svc_Handler+0x2460>
ffffffff802118b5:	4d 85 e4             	test   %r12,%r12
ffffffff802118b8:	0f 84 e6 1a 00 00    	je     ffffffff802133a4 <_RME_Svc_Handler+0x2664>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BM);
ffffffff802118be:	f6 45 10 04          	testb  $0x4,0x10(%rbp)
ffffffff802118c2:	0f 84 ec 18 00 00    	je     ffffffff802131b4 <_RME_Svc_Handler+0x2474>
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802118c8:	85 c0                	test   %eax,%eax
ffffffff802118ca:	74 04                	je     ffffffff802118d0 <_RME_Svc_Handler+0xb90>
ffffffff802118cc:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    if(Sig_Root->Thd!=(void*)RME_NULL)
ffffffff802118d0:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff802118d5:	0f 85 64 1b 00 00    	jne    ffffffff8021343f <_RME_Svc_Handler+0x26ff>
    Local=RME_CPU_LOCAL();
ffffffff802118db:	e8 5f 9f ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Thd_Cur=Local->Thd_Cur;
ffffffff802118e0:	48 8b 78 08          	mov    0x8(%rax),%rdi
    Local=RME_CPU_LOCAL();
ffffffff802118e4:	49 89 c0             	mov    %rax,%r8
    if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff802118e7:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff802118ee:	ff ff 7f 
ffffffff802118f1:	48 39 47 30          	cmp    %rax,0x30(%rdi)
ffffffff802118f5:	0f 84 50 2a 00 00    	je     ffffffff8021434b <_RME_Svc_Handler+0x360b>
    Old_Value=Sig_Root->Sig_Num;
ffffffff802118fb:	48 8b 45 28          	mov    0x28(%rbp),%rax
    if(Old_Value>0U)
ffffffff802118ff:	48 85 c0             	test   %rax,%rax
ffffffff80211902:	0f 84 48 18 00 00    	je     ffffffff80213150 <_RME_Svc_Handler+0x2410>
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
ffffffff80211908:	49 f7 c4 fd ff ff ff 	test   $0xfffffffffffffffd,%r12
ffffffff8021190f:	0f 85 0b 1b 00 00    	jne    ffffffff80213420 <_RME_Svc_Handler+0x26e0>
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff80211915:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80211919:	f0 48 0f b1 55 28    	lock cmpxchg %rdx,0x28(%rbp)
ffffffff8021191f:	0f 94 c2             	sete   %dl
ffffffff80211922:	84 d2                	test   %dl,%dl
ffffffff80211924:	0f 84 09 1b 00 00    	je     ffffffff80213433 <_RME_Svc_Handler+0x26f3>
            __RME_Svc_Retval_Set(Reg,1);
ffffffff8021192a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021192f:	48 89 df             	mov    %rbx,%rdi
ffffffff80211932:	e8 49 99 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211937:	e9 ac f4 ff ff       	jmp    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
ffffffff8021193c:	0f 1f 40 00          	nopl   0x0(%rax)
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff80211940:	48 8b 6c 24 30       	mov    0x30(%rsp),%rbp
ffffffff80211945:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80211949:	49 8b 57 28          	mov    0x28(%r15),%rdx
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8021194d:	f7 c5 00 80 00 00    	test   $0x8000,%ebp
ffffffff80211953:	0f 84 a7 02 00 00    	je     ffffffff80211c00 <_RME_Svc_Handler+0xec0>
ffffffff80211959:	48 89 e8             	mov    %rbp,%rax
ffffffff8021195c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211960:	48 39 d0             	cmp    %rdx,%rax
ffffffff80211963:	0f 83 17 1a 00 00    	jae    ffffffff80213380 <_RME_Svc_Handler+0x2640>
ffffffff80211969:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211970:	00 00 00 
ffffffff80211973:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211977:	48 01 c8             	add    %rcx,%rax
ffffffff8021197a:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211981:	ff 00 00 
ffffffff80211984:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211987:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021198a:	48 21 cf             	and    %rcx,%rdi
ffffffff8021198d:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80211990:	0f 84 9e 02 00 00    	je     ffffffff80211c34 <_RME_Svc_Handler+0xef4>
ffffffff80211996:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021199a:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021199e:	0f 85 36 1a 00 00    	jne    ffffffff802133da <_RME_Svc_Handler+0x269a>
ffffffff802119a4:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802119a8:	81 e5 ff 7f 00 00    	and    $0x7fff,%ebp
ffffffff802119ae:	48 39 d5             	cmp    %rdx,%rbp
ffffffff802119b1:	0f 83 c9 19 00 00    	jae    ffffffff80213380 <_RME_Svc_Handler+0x2640>
ffffffff802119b7:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff802119bb:	48 03 68 18          	add    0x18(%rax),%rbp
ffffffff802119bf:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff802119c3:	48 21 c1             	and    %rax,%rcx
ffffffff802119c6:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802119c9:	0f 84 65 02 00 00    	je     ffffffff80211c34 <_RME_Svc_Handler+0xef4>
ffffffff802119cf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802119d3:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802119d7:	0f 85 fd 19 00 00    	jne    ffffffff802133da <_RME_Svc_Handler+0x269a>
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff802119dd:	f6 45 10 01          	testb  $0x1,0x10(%rbp)
ffffffff802119e1:	0f 84 c7 1b 00 00    	je     ffffffff802135ae <_RME_Svc_Handler+0x286e>
    Local=RME_CPU_LOCAL();
ffffffff802119e7:	e8 53 9e ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802119ec:	44 8b 65 00          	mov    0x0(%rbp),%r12d
ffffffff802119f0:	45 85 e4             	test   %r12d,%r12d
ffffffff802119f3:	74 04                	je     ffffffff802119f9 <_RME_Svc_Handler+0xcb9>
ffffffff802119f5:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
    Thd_Rcv=Sig_Root->Thd;
ffffffff802119f9:	4c 8b 65 30          	mov    0x30(%rbp),%r12
    if(Thd_Rcv!=(void*)RME_NULL)
ffffffff802119fd:	4d 85 e4             	test   %r12,%r12
ffffffff80211a00:	74 0b                	je     ffffffff80211a0d <_RME_Svc_Handler+0xccd>
        if(Thd_Rcv->Sched.Local==Local)
ffffffff80211a02:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
ffffffff80211a07:	0f 84 ec 1a 00 00    	je     ffffffff802134f9 <_RME_Svc_Handler+0x27b9>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80211a0d:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80211a12:	f0 48 0f c1 45 28    	lock xadd %rax,0x28(%rbp)
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80211a18:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80211a1f:	ff ff 7f 
ffffffff80211a22:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211a25:	0f 82 11 27 00 00    	jb     ffffffff8021413c <_RME_Svc_Handler+0x33fc>
        __RME_Svc_Retval_Set(Reg,0);
ffffffff80211a2b:	31 f6                	xor    %esi,%esi
ffffffff80211a2d:	48 89 df             	mov    %rbx,%rdi
ffffffff80211a30:	e8 4b 98 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211a35:	e9 ae f3 ff ff       	jmp    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
ffffffff80211a3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                            (rme_cid_t)Param[0],                            /* rme_cid_t Cap_Inv */
ffffffff80211a40:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
        Retval=_RME_Inv_Act(Cpt,
ffffffff80211a45:	48 8b 6c 24 38       	mov    0x38(%rsp),%rbp
ffffffff80211a4a:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80211a4e:	49 8b 4f 28          	mov    0x28(%r15),%rcx
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80211a52:	f6 c4 80             	test   $0x80,%ah
ffffffff80211a55:	0f 84 4d 01 00 00    	je     ffffffff80211ba8 <_RME_Svc_Handler+0xe68>
ffffffff80211a5b:	48 89 c2             	mov    %rax,%rdx
ffffffff80211a5e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211a62:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211a65:	0f 83 f5 17 00 00    	jae    ffffffff80213260 <_RME_Svc_Handler+0x2520>
ffffffff80211a6b:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211a72:	00 00 00 
ffffffff80211a75:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80211a79:	48 01 f2             	add    %rsi,%rdx
ffffffff80211a7c:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80211a83:	ff 00 00 
ffffffff80211a86:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80211a89:	49 89 c8             	mov    %rcx,%r8
ffffffff80211a8c:	49 21 f0             	and    %rsi,%r8
ffffffff80211a8f:	49 39 f8             	cmp    %rdi,%r8
ffffffff80211a92:	0f 84 43 01 00 00    	je     ffffffff80211bdb <_RME_Svc_Handler+0xe9b>
ffffffff80211a98:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80211a9c:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80211aa0:	0f 85 e6 18 00 00    	jne    ffffffff8021338c <_RME_Svc_Handler+0x264c>
ffffffff80211aa6:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80211aaa:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211aaf:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211ab2:	0f 83 a8 17 00 00    	jae    ffffffff80213260 <_RME_Svc_Handler+0x2520>
ffffffff80211ab8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211abc:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80211ac0:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211ac3:	48 21 d6             	and    %rdx,%rsi
ffffffff80211ac6:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80211ac9:	0f 84 0c 01 00 00    	je     ffffffff80211bdb <_RME_Svc_Handler+0xe9b>
ffffffff80211acf:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211ad3:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff80211ad7:	0f 85 af 18 00 00    	jne    ffffffff8021338c <_RME_Svc_Handler+0x264c>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff80211add:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80211ae1:	0f 84 c6 19 00 00    	je     ffffffff802134ad <_RME_Svc_Handler+0x276d>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff80211ae7:	4c 8b 60 18          	mov    0x18(%rax),%r12
    if(RME_UNLIKELY(Thd_Act!=(void*)0U))
ffffffff80211aeb:	49 83 7c 24 18 00    	cmpq   $0x0,0x18(%r12)
ffffffff80211af1:	0f 85 a1 18 00 00    	jne    ffffffff80213398 <_RME_Svc_Handler+0x2658>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff80211af7:	e8 43 9d ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80211afc:	4c 8b 68 08          	mov    0x8(%rax),%r13
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80211b00:	31 c0                	xor    %eax,%eax
ffffffff80211b02:	f0 4d 0f b1 6c 24 18 	lock cmpxchg %r13,0x18(%r12)
ffffffff80211b09:	0f 94 c0             	sete   %al
    if(RME_UNLIKELY(RME_COMP_SWAP((volatile rme_ptr_t*)&(Invocation->Thd_Act),
ffffffff80211b0c:	84 c0                	test   %al,%al
ffffffff80211b0e:	0f 84 84 18 00 00    	je     ffffffff80213398 <_RME_Svc_Handler+0x2658>
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
ffffffff80211b14:	49 8d 7c 24 38       	lea    0x38(%r12),%rdi
ffffffff80211b19:	48 89 de             	mov    %rbx,%rsi
ffffffff80211b1c:	e8 2f 8b 00 00       	call   ffffffff8021a650 <__RME_Inv_Reg_Save>
    _RME_List_Ins(&(Invocation->Head),
ffffffff80211b21:	49 8b 85 98 00 00 00 	mov    0x98(%r13),%rax
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff80211b28:	49 89 d8             	mov    %rbx,%r8
ffffffff80211b2b:	48 89 e9             	mov    %rbp,%rcx
    _RME_List_Ins(&(Invocation->Head),
ffffffff80211b2e:	49 8d 95 98 00 00 00 	lea    0x98(%r13),%rdx
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff80211b35:	48 bf ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdi
ffffffff80211b3c:	ff ff 7f 
    New->Next=Next;
ffffffff80211b3f:	66 48 0f 6e ca       	movq   %rdx,%xmm1
ffffffff80211b44:	66 48 0f 6e c0       	movq   %rax,%xmm0
    Next->Prev=New;
ffffffff80211b49:	4c 89 60 08          	mov    %r12,0x8(%rax)
    New->Next=Next;
ffffffff80211b4d:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff80211b51:	41 0f 11 04 24       	movups %xmm0,(%r12)
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff80211b56:	49 23 bd 88 00 00 00 	and    0x88(%r13),%rdi
    Thd_Cur->Ctx.Invstk_Depth++;
ffffffff80211b5d:	49 83 85 a8 00 00 00 	addq   $0x1,0xa8(%r13)
ffffffff80211b64:	01 
    Prev->Next=New;
ffffffff80211b65:	4d 89 a5 98 00 00 00 	mov    %r12,0x98(%r13)
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff80211b6c:	49 8b 54 24 28       	mov    0x28(%r12),%rdx
ffffffff80211b71:	49 8b 74 24 20       	mov    0x20(%r12),%rsi
ffffffff80211b76:	e8 75 89 00 00       	call   ffffffff8021a4f0 <__RME_Thd_Reg_Init>
    __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff80211b7b:	49 8b 44 24 10       	mov    0x10(%r12),%rax
ffffffff80211b80:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff80211b84:	e8 37 91 00 00       	call   ffffffff8021acc0 <__RME_Pgt_Set>
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff80211b89:	e9 5a f2 ff ff       	jmp    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
    switch(Svc_Num)
ffffffff80211b8e:	48 83 ed 0a          	sub    $0xa,%rbp
ffffffff80211b92:	48 83 fd 17          	cmp    $0x17,%rbp
ffffffff80211b96:	0f 87 62 1a 00 00    	ja     ffffffff802135fe <_RME_Svc_Handler+0x28be>
ffffffff80211b9c:	3e ff 24 ed f0 d0 21 	notrack jmp *-0x7fde2f10(,%rbp,8)
ffffffff80211ba3:	80 
ffffffff80211ba4:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80211ba8:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211bab:	0f 83 af 16 00 00    	jae    ffffffff80213260 <_RME_Svc_Handler+0x2520>
ffffffff80211bb1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211bb8:	ff 00 00 
ffffffff80211bbb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211bbf:	48 01 f0             	add    %rsi,%rax
ffffffff80211bc2:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211bc9:	00 00 00 
ffffffff80211bcc:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211bcf:	48 21 d1             	and    %rdx,%rcx
ffffffff80211bd2:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211bd5:	0f 85 f4 fe ff ff    	jne    ffffffff80211acf <_RME_Svc_Handler+0xd8f>
ffffffff80211bdb:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
    __RME_Svc_Retval_Set(Reg,Retval);
ffffffff80211be2:	48 89 df             	mov    %rbx,%rdi
ffffffff80211be5:	e8 96 96 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
}
ffffffff80211bea:	48 83 c4 78          	add    $0x78,%rsp
ffffffff80211bee:	5b                   	pop    %rbx
ffffffff80211bef:	5d                   	pop    %rbp
ffffffff80211bf0:	41 5c                	pop    %r12
ffffffff80211bf2:	41 5d                	pop    %r13
ffffffff80211bf4:	41 5e                	pop    %r14
ffffffff80211bf6:	41 5f                	pop    %r15
ffffffff80211bf8:	c3                   	ret
ffffffff80211bf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80211c00:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80211c03:	0f 83 77 17 00 00    	jae    ffffffff80213380 <_RME_Svc_Handler+0x2640>
ffffffff80211c09:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211c10:	ff 00 00 
ffffffff80211c13:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff80211c17:	48 01 cd             	add    %rcx,%rbp
ffffffff80211c1a:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80211c21:	00 00 00 
ffffffff80211c24:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211c28:	48 21 c2             	and    %rax,%rdx
ffffffff80211c2b:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211c2e:	0f 85 9b fd ff ff    	jne    ffffffff802119cf <_RME_Svc_Handler+0xc8f>
ffffffff80211c34:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211c3b:	eb a5                	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80211c3d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80211c40:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211c43:	0f 83 1f 17 00 00    	jae    ffffffff80213368 <_RME_Svc_Handler+0x2628>
ffffffff80211c49:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80211c50:	ff 00 00 
ffffffff80211c53:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211c57:	49 03 47 18          	add    0x18(%r15),%rax
ffffffff80211c5b:	49 ba 00 00 00 00 02 	movabs $0x200000000,%r10
ffffffff80211c62:	00 00 00 
ffffffff80211c65:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211c68:	48 21 d6             	and    %rdx,%rsi
ffffffff80211c6b:	4c 39 d6             	cmp    %r10,%rsi
ffffffff80211c6e:	0f 84 5a 17 00 00    	je     ffffffff802133ce <_RME_Svc_Handler+0x268e>
ffffffff80211c74:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211c78:	48 83 fa 01          	cmp    $0x1,%rdx
ffffffff80211c7c:	0f 84 35 fb ff ff    	je     ffffffff802117b7 <_RME_Svc_Handler+0xa77>
ffffffff80211c82:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211c89:	e9 62 fb ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xab0>
ffffffff80211c8e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211c90:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211c93:	0f 83 b7 16 00 00    	jae    ffffffff80213350 <_RME_Svc_Handler+0x2610>
ffffffff80211c99:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211ca0:	ff 00 00 
ffffffff80211ca3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211ca7:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80211cae:	00 00 00 
ffffffff80211cb1:	48 8d 2c 30          	lea    (%rax,%rsi,1),%rbp
ffffffff80211cb5:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211cb9:	48 21 c2             	and    %rax,%rdx
ffffffff80211cbc:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211cbf:	0f 85 88 f9 ff ff    	jne    ffffffff8021164d <_RME_Svc_Handler+0x90d>
ffffffff80211cc5:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211ccc:	e9 11 ff ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80211cd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211cd8:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211cdb:	0f 83 93 16 00 00    	jae    ffffffff80213374 <_RME_Svc_Handler+0x2634>
ffffffff80211ce1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211ce8:	ff 00 00 
ffffffff80211ceb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211cef:	48 01 f0             	add    %rsi,%rax
ffffffff80211cf2:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211cf9:	00 00 00 
ffffffff80211cfc:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211cff:	48 21 d1             	and    %rdx,%rcx
ffffffff80211d02:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211d05:	0f 84 b7 16 00 00    	je     ffffffff802133c2 <_RME_Svc_Handler+0x2682>
ffffffff80211d0b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211d0f:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80211d13:	0f 84 d6 f7 ff ff    	je     ffffffff802114ef <_RME_Svc_Handler+0x7af>
ffffffff80211d19:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80211d20:	e9 bd fe ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80211d25:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80211d28:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80211d2b:	0f 83 2b 16 00 00    	jae    ffffffff8021335c <_RME_Svc_Handler+0x261c>
ffffffff80211d31:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211d38:	ff 00 00 
ffffffff80211d3b:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff80211d3f:	48 01 cd             	add    %rcx,%rbp
ffffffff80211d42:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80211d49:	00 00 00 
ffffffff80211d4c:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211d50:	48 21 c2             	and    %rax,%rdx
ffffffff80211d53:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211d56:	0f 85 38 fb ff ff    	jne    ffffffff80211894 <_RME_Svc_Handler+0xb54>
ffffffff80211d5c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211d63:	e9 7a fe ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80211d68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80211d6f:	00 
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80211d70:	49 8b 47 28          	mov    0x28(%r15),%rax
ffffffff80211d74:	41 f7 c5 00 80 00 00 	test   $0x8000,%r13d
ffffffff80211d7b:	0f 85 1f 13 00 00    	jne    ffffffff802130a0 <_RME_Svc_Handler+0x2360>
ffffffff80211d81:	49 39 c5             	cmp    %rax,%r13
ffffffff80211d84:	0f 83 0c 18 00 00    	jae    ffffffff80213596 <_RME_Svc_Handler+0x2856>
ffffffff80211d8a:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211d91:	ff 00 00 
ffffffff80211d94:	4c 89 e8             	mov    %r13,%rax
ffffffff80211d97:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211d9e:	00 00 00 
ffffffff80211da1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211da5:	49 03 47 18          	add    0x18(%r15),%rax
ffffffff80211da9:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211dac:	48 21 d1             	and    %rdx,%rcx
ffffffff80211daf:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211db2:	0f 84 5c 13 00 00    	je     ffffffff80213114 <_RME_Svc_Handler+0x23d4>
ffffffff80211db8:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211dbc:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80211dc0:	0f 85 15 18 00 00    	jne    ffffffff802135db <_RME_Svc_Handler+0x289b>
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff80211dc6:	f6 40 11 01          	testb  $0x1,0x11(%rax)
ffffffff80211dca:	0f 84 42 18 00 00    	je     ffffffff80213612 <_RME_Svc_Handler+0x28d2>
        Thd_New=RME_CAP_GETOBJ(Thd_Cap_New,struct RME_Thd_Struct*);
ffffffff80211dd0:	4c 8b 68 18          	mov    0x18(%rax),%r13
        if(Thd_New->Sched.Local!=Local)
ffffffff80211dd4:	4d 3b 75 28          	cmp    0x28(%r13),%r14
ffffffff80211dd8:	0f 85 74 23 00 00    	jne    ffffffff80214152 <_RME_Svc_Handler+0x3412>
        if(Thd_Cur->Sched.Prio!=Thd_New->Sched.Prio)
ffffffff80211dde:	49 8b 45 40          	mov    0x40(%r13),%rax
ffffffff80211de2:	48 39 45 40          	cmp    %rax,0x40(%rbp)
ffffffff80211de6:	0f 85 f4 23 00 00    	jne    ffffffff802141e0 <_RME_Svc_Handler+0x34a0>
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff80211dec:	49 8b 45 38          	mov    0x38(%r13),%rax
ffffffff80211df0:	48 83 e8 01          	sub    $0x1,%rax
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff80211df4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211df8:	0f 86 54 23 00 00    	jbe    ffffffff80214152 <_RME_Svc_Handler+0x3412>
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80211dfe:	4d 85 e4             	test   %r12,%r12
ffffffff80211e01:	0f 84 a7 f0 ff ff    	je     ffffffff80210eae <_RME_Svc_Handler+0x16e>
ffffffff80211e07:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80211e0e:	ff ff 7f 
ffffffff80211e11:	48 3b 45 30          	cmp    0x30(%rbp),%rax
ffffffff80211e15:	0f 82 93 f0 ff ff    	jb     ffffffff80210eae <_RME_Svc_Handler+0x16e>
            Thd_Cur->Sched.Slice=0U;
ffffffff80211e1b:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff80211e22:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80211e23:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211e26:	e8 35 a9 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80211e2b:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff80211e32:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff80211e33:	e8 28 bd ff ff       	call   ffffffff8020db60 <_RME_Run_Notif>
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80211e38:	49 8b 46 20          	mov    0x20(%r14),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80211e3c:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff80211e40:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80211e44:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80211e47:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80211e4b:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff80211e50:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80211e54:	49 8b 44 06 08       	mov    0x8(%r14,%rax,1),%rax
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
ffffffff80211e59:	48 8b 70 40          	mov    0x40(%rax),%rsi
ffffffff80211e5d:	49 39 75 40          	cmp    %rsi,0x40(%r13)
ffffffff80211e61:	0f 82 b7 17 00 00    	jb     ffffffff8021361e <_RME_Svc_Handler+0x28de>
ffffffff80211e67:	4c 39 ed             	cmp    %r13,%rbp
ffffffff80211e6a:	0f 84 ae 17 00 00    	je     ffffffff8021361e <_RME_Svc_Handler+0x28de>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80211e70:	31 f6                	xor    %esi,%esi
ffffffff80211e72:	48 89 df             	mov    %rbx,%rdi
ffffffff80211e75:	e8 06 94 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
    if(Thd_Cur==Thd_New)
ffffffff80211e7a:	e9 42 f0 ff ff       	jmp    ffffffff80210ec1 <_RME_Svc_Handler+0x181>
ffffffff80211e7f:	90                   	nop
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80211e80:	48 39 c8             	cmp    %rcx,%rax
ffffffff80211e83:	0f 83 b7 12 00 00    	jae    ffffffff80213140 <_RME_Svc_Handler+0x2400>
ffffffff80211e89:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80211e8d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211e91:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211e98:	ff 00 00 
ffffffff80211e9b:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80211ea2:	00 00 00 
ffffffff80211ea5:	48 8d 2c 30          	lea    (%rax,%rsi,1),%rbp
ffffffff80211ea9:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80211ead:	48 21 c2             	and    %rax,%rdx
ffffffff80211eb0:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80211eb3:	0f 84 d7 12 00 00    	je     ffffffff80213190 <_RME_Svc_Handler+0x2450>
ffffffff80211eb9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211ebd:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80211ec1:	0f 84 3a f1 ff ff    	je     ffffffff80211001 <_RME_Svc_Handler+0x2c1>
ffffffff80211ec7:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80211ece:	e9 0f fd ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80211ed3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80211ed8:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211edb:	0f 83 5e 20 00 00    	jae    ffffffff80213f3f <_RME_Svc_Handler+0x31ff>
ffffffff80211ee1:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80211ee8:	ff 00 00 
ffffffff80211eeb:	48 89 d0             	mov    %rdx,%rax
ffffffff80211eee:	49 8b 57 18          	mov    0x18(%r15),%rdx
ffffffff80211ef2:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80211ef9:	00 00 00 
ffffffff80211efc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211f00:	48 01 d0             	add    %rdx,%rax
ffffffff80211f03:	48 8b 30             	mov    (%rax),%rsi
ffffffff80211f06:	48 21 f7             	and    %rsi,%rdi
ffffffff80211f09:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80211f0c:	0f 85 28 f3 ff ff    	jne    ffffffff8021123a <_RME_Svc_Handler+0x4fa>
ffffffff80211f12:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80211f19:	e9 c4 fc ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Retval=_RME_Inv_Del(Cpt,
ffffffff80211f1e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80211f23:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80211f27:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80211f2b:	f6 c4 80             	test   $0x80,%ah
ffffffff80211f2e:	0f 85 bc 1e 00 00    	jne    ffffffff80213df0 <_RME_Svc_Handler+0x30b0>
ffffffff80211f34:	48 39 f0             	cmp    %rsi,%rax
ffffffff80211f37:	0f 83 bf 25 00 00    	jae    ffffffff802144fc <_RME_Svc_Handler+0x37bc>
ffffffff80211f3d:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211f44:	00 00 00 
ffffffff80211f47:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211f4b:	48 01 c8             	add    %rcx,%rax
ffffffff80211f4e:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80211f55:	ff 00 00 
ffffffff80211f58:	48 8b 10             	mov    (%rax),%rdx
ffffffff80211f5b:	48 21 d1             	and    %rdx,%rcx
ffffffff80211f5e:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80211f61:	0f 84 89 25 00 00    	je     ffffffff802144f0 <_RME_Svc_Handler+0x37b0>
ffffffff80211f67:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211f6b:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80211f6f:	0f 85 6f 25 00 00    	jne    ffffffff802144e4 <_RME_Svc_Handler+0x37a4>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80211f75:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80211f79:	0f 84 78 23 00 00    	je     ffffffff802142f7 <_RME_Svc_Handler+0x35b7>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Inv */
ffffffff80211f7f:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff80211f84:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80211f88:	0f 83 2e 26 00 00    	jae    ffffffff802145bc <_RME_Svc_Handler+0x387c>
ffffffff80211f8e:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80211f92:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff80211f96:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80211f9d:	00 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff80211fa0:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff80211fa3:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80211faa:	ff 00 00 
ffffffff80211fad:	48 8b 01             	mov    (%rcx),%rax
ffffffff80211fb0:	48 21 c2             	and    %rax,%rdx
ffffffff80211fb3:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80211fb6:	0f 85 07 29 00 00    	jne    ffffffff802148c3 <_RME_Svc_Handler+0x3b83>
ffffffff80211fbc:	48 89 c2             	mov    %rax,%rdx
ffffffff80211fbf:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80211fc3:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff80211fc7:	0f 85 ea 28 00 00    	jne    ffffffff802148b7 <_RME_Svc_Handler+0x3b77>
ffffffff80211fcd:	48 8b 71 20          	mov    0x20(%rcx),%rsi
ffffffff80211fd1:	48 8b 15 38 40 01 00 	mov    0x14038(%rip),%rdx        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff80211fd8:	48 29 f2             	sub    %rsi,%rdx
ffffffff80211fdb:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80211fdf:	0f 86 c1 27 00 00    	jbe    ffffffff802147a6 <_RME_Svc_Handler+0x3a66>
ffffffff80211fe5:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff80211fe9:	48 85 d2             	test   %rdx,%rdx
ffffffff80211fec:	0f 85 7d 23 00 00    	jne    ffffffff8021436f <_RME_Svc_Handler+0x362f>
    Invocation=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
ffffffff80211ff2:	48 8b 79 18          	mov    0x18(%rcx),%rdi
    if(Invocation->Thd_Act!=(void*)RME_NULL)
ffffffff80211ff6:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
ffffffff80211ffb:	0f 85 f4 2c 00 00    	jne    ffffffff80214cf5 <_RME_Svc_Handler+0x3fb5>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212001:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80212006:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Inv_Del,Type_Stat);
ffffffff80212009:	84 d2                	test   %dl,%dl
ffffffff8021200b:	0f 84 ed 15 00 00    	je     ffffffff802135fe <_RME_Svc_Handler+0x28be>
    RME_FETCH_ADD(&(Invocation->Prc->Head.Root_Ref), -1);
ffffffff80212011:	48 8b 47 10          	mov    0x10(%rdi),%rax
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80212015:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
ffffffff80212019:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
ffffffff8021201f:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff80212024:	e8 77 df ff ff       	call   ffffffff8020ffa0 <_RME_Kot_Erase>
    return 0;
ffffffff80212029:	31 f6                	xor    %esi,%esi
ffffffff8021202b:	e9 b2 fb ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff80212030:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff80212035:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80212039:	49 8b 7f 28          	mov    0x28(%r15),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8021203d:	f6 c4 80             	test   $0x80,%ah
ffffffff80212040:	0f 85 7a 18 00 00    	jne    ffffffff802138c0 <_RME_Svc_Handler+0x2b80>
ffffffff80212046:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212049:	0f 83 ec 28 00 00    	jae    ffffffff8021493b <_RME_Svc_Handler+0x3bfb>
ffffffff8021204f:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80212056:	ff 00 00 
ffffffff80212059:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021205d:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80212064:	00 00 00 
ffffffff80212067:	48 8d 0c 30          	lea    (%rax,%rsi,1),%rcx
ffffffff8021206b:	48 8b 01             	mov    (%rcx),%rax
ffffffff8021206e:	48 21 c2             	and    %rax,%rdx
ffffffff80212071:	4c 39 c2             	cmp    %r8,%rdx
ffffffff80212074:	0f 84 b5 28 00 00    	je     ffffffff8021492f <_RME_Svc_Handler+0x3bef>
ffffffff8021207a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021207e:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80212082:	0f 85 0d 2c 00 00    	jne    ffffffff80214c95 <_RME_Svc_Handler+0x3f55>
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Cpt */
ffffffff80212088:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021208d:	f6 c4 80             	test   $0x80,%ah
ffffffff80212090:	0f 85 e0 1f 00 00    	jne    ffffffff80214076 <_RME_Svc_Handler+0x3336>
ffffffff80212096:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212099:	0f 83 ea 2b 00 00    	jae    ffffffff80214c89 <_RME_Svc_Handler+0x3f49>
ffffffff8021209f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802120a3:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff802120a8:	48 8d 14 30          	lea    (%rax,%rsi,1),%rdx
ffffffff802120ac:	be ff ff 00 00       	mov    $0xffff,%esi
ffffffff802120b1:	48 c1 e7 21          	shl    $0x21,%rdi
ffffffff802120b5:	48 8b 02             	mov    (%rdx),%rax
ffffffff802120b8:	48 c1 e6 20          	shl    $0x20,%rsi
ffffffff802120bc:	48 21 c6             	and    %rax,%rsi
ffffffff802120bf:	48 39 fe             	cmp    %rdi,%rsi
ffffffff802120c2:	0f 84 b5 2b 00 00    	je     ffffffff80214c7d <_RME_Svc_Handler+0x3f3d>
ffffffff802120c8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802120cc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802120d0:	0f 85 b9 28 00 00    	jne    ffffffff8021498f <_RME_Svc_Handler+0x3c4f>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
ffffffff802120d6:	f6 41 10 04          	testb  $0x4,0x10(%rcx)
ffffffff802120da:	0f 84 a3 28 00 00    	je     ffffffff80214983 <_RME_Svc_Handler+0x3c43>
    RME_CAP_CHECK(Cpt_New,RME_CPT_FLAG_PRC_CPT);
ffffffff802120e0:	f6 42 10 80          	testb  $0x80,0x10(%rdx)
ffffffff802120e4:	0f 84 b1 28 00 00    	je     ffffffff8021499b <_RME_Svc_Handler+0x3c5b>
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
ffffffff802120ea:	83 3a 00             	cmpl   $0x0,(%rdx)
ffffffff802120ed:	74 04                	je     ffffffff802120f3 <_RME_Svc_Handler+0x13b3>
ffffffff802120ef:	48 8b 52 08          	mov    0x8(%rdx),%rdx
    Cpt_Old=Prc_Op->Cpt;
ffffffff802120f3:	48 8b 41 28          	mov    0x28(%rcx),%rax
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802120f7:	f0 48 0f b1 51 28    	lock cmpxchg %rdx,0x28(%rcx)
ffffffff802120fd:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Cpt)),
ffffffff80212101:	40 84 f6             	test   %sil,%sil
ffffffff80212104:	0f 84 dc 09 00 00    	je     ffffffff80212ae6 <_RME_Svc_Handler+0x1da6>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021210a:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff8021210f:	f0 48 0f c1 4a 08    	lock xadd %rcx,0x8(%rdx)
ffffffff80212115:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8021211c:	f0 48 0f c1 50 08    	lock xadd %rdx,0x8(%rax)
    return 0;
ffffffff80212122:	31 f6                	xor    %esi,%esi
ffffffff80212124:	e9 b9 fa ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Retval=_RME_Prc_Del(Cpt,
ffffffff80212129:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff8021212e:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212132:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212136:	f6 c4 80             	test   $0x80,%ah
ffffffff80212139:	0f 85 d1 19 00 00    	jne    ffffffff80213b10 <_RME_Svc_Handler+0x2dd0>
ffffffff8021213f:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212142:	0f 83 2d 2a 00 00    	jae    ffffffff80214b75 <_RME_Svc_Handler+0x3e35>
ffffffff80212148:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021214f:	00 00 00 
ffffffff80212152:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212156:	48 01 c8             	add    %rcx,%rax
ffffffff80212159:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212160:	ff 00 00 
ffffffff80212163:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212166:	48 21 d1             	and    %rdx,%rcx
ffffffff80212169:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021216c:	0f 84 f7 29 00 00    	je     ffffffff80214b69 <_RME_Svc_Handler+0x3e29>
ffffffff80212172:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212176:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021217a:	0f 85 dd 29 00 00    	jne    ffffffff80214b5d <_RME_Svc_Handler+0x3e1d>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212180:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212184:	0f 84 22 22 00 00    	je     ffffffff802143ac <_RME_Svc_Handler+0x366c>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Prc */
ffffffff8021218a:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff8021218f:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212193:	0f 83 7d 25 00 00    	jae    ffffffff80214716 <_RME_Svc_Handler+0x39d6>
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff80212199:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802121a0:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff802121a3:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802121a7:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff802121ab:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802121b2:	00 00 00 
ffffffff802121b5:	48 8b 02             	mov    (%rdx),%rax
ffffffff802121b8:	48 21 c1             	and    %rax,%rcx
ffffffff802121bb:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802121be:	0f 85 6a 25 00 00    	jne    ffffffff8021472e <_RME_Svc_Handler+0x39ee>
ffffffff802121c4:	48 89 c1             	mov    %rax,%rcx
ffffffff802121c7:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802121cb:	48 83 f9 05          	cmp    $0x5,%rcx
ffffffff802121cf:	0f 85 4d 25 00 00    	jne    ffffffff80214722 <_RME_Svc_Handler+0x39e2>
ffffffff802121d5:	48 8b 0d 34 3e 01 00 	mov    0x13e34(%rip),%rcx        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff802121dc:	48 2b 4a 20          	sub    0x20(%rdx),%rcx
ffffffff802121e0:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff802121e4:	0f 86 19 26 00 00    	jbe    ffffffff80214803 <_RME_Svc_Handler+0x3ac3>
ffffffff802121ea:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
ffffffff802121ef:	0f 85 ec 25 00 00    	jne    ffffffff802147e1 <_RME_Svc_Handler+0x3aa1>
    Prc_Cpt=Prc_Del->Cpt;
ffffffff802121f5:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
    Prc_Pgt=Prc_Del->Pgt;
ffffffff802121f9:	48 8b 72 30          	mov    0x30(%rdx),%rsi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802121fd:	31 c9                	xor    %ecx,%ecx
ffffffff802121ff:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80212204:	0f 94 c1             	sete   %cl
    RME_CAP_DELETE(Prc_Del,Type_Stat);
ffffffff80212207:	84 c9                	test   %cl,%cl
ffffffff80212209:	0f 84 ef 13 00 00    	je     ffffffff802135fe <_RME_Svc_Handler+0x28be>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021220f:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff80212213:	48 89 c2             	mov    %rax,%rdx
ffffffff80212216:	f0 48 0f c1 57 08    	lock xadd %rdx,0x8(%rdi)
ffffffff8021221c:	f0 48 0f c1 46 08    	lock xadd %rax,0x8(%rsi)
    return 0;
ffffffff80212222:	31 f6                	xor    %esi,%esi
ffffffff80212224:	e9 b9 f9 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Retval=_RME_Prc_Crt(Cpt,
ffffffff80212229:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff8021222d:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff80212231:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
ffffffff80212236:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
ffffffff8021223b:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
ffffffff80212240:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80212245:	e8 e6 aa ff ff       	call   ffffffff8020cd30 <_RME_Prc_Crt.isra.0>
ffffffff8021224a:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff8021224d:	e9 90 f9 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
ffffffff80212252:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff80212257:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff8021225b:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff8021225f:	f6 c4 80             	test   $0x80,%ah
ffffffff80212262:	0f 85 98 14 00 00    	jne    ffffffff80213700 <_RME_Svc_Handler+0x29c0>
ffffffff80212268:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021226b:	0f 83 58 29 00 00    	jae    ffffffff80214bc9 <_RME_Svc_Handler+0x3e89>
ffffffff80212271:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80212278:	ff 00 00 
ffffffff8021227b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021227f:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80212286:	00 00 00 
ffffffff80212289:	48 8d 2c 08          	lea    (%rax,%rcx,1),%rbp
ffffffff8021228d:	48 8b 45 00          	mov    0x0(%rbp),%rax
ffffffff80212291:	48 21 c2             	and    %rax,%rdx
ffffffff80212294:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80212297:	0f 84 20 29 00 00    	je     ffffffff80214bbd <_RME_Svc_Handler+0x3e7d>
ffffffff8021229d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802122a1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802122a5:	0f 85 2a 29 00 00    	jne    ffffffff80214bd5 <_RME_Svc_Handler+0x3e95>
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt_Child */
ffffffff802122ab:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff802122b0:	f6 c4 80             	test   $0x80,%ah
ffffffff802122b3:	0f 85 2e 1d 00 00    	jne    ffffffff80213fe7 <_RME_Svc_Handler+0x32a7>
ffffffff802122b9:	48 39 f0             	cmp    %rsi,%rax
ffffffff802122bc:	0f 83 b5 26 00 00    	jae    ffffffff80214977 <_RME_Svc_Handler+0x3c37>
ffffffff802122c2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802122c6:	ba ff ff 00 00       	mov    $0xffff,%edx
ffffffff802122cb:	4c 8d 24 08          	lea    (%rax,%rcx,1),%r12
ffffffff802122cf:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff802122d3:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff802122d8:	49 8b 04 24          	mov    (%r12),%rax
ffffffff802122dc:	48 c1 e1 21          	shl    $0x21,%rcx
ffffffff802122e0:	48 21 c2             	and    %rax,%rdx
ffffffff802122e3:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802122e6:	0f 84 7f 26 00 00    	je     ffffffff8021496b <_RME_Svc_Handler+0x3c2b>
ffffffff802122ec:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802122f0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802122f4:	0f 85 65 26 00 00    	jne    ffffffff8021495f <_RME_Svc_Handler+0x3c1f>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff802122fa:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802122fe:	a8 20                	test   $0x20,%al
ffffffff80212300:	0f 84 4d 26 00 00    	je     ffffffff80214953 <_RME_Svc_Handler+0x3c13>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff80212306:	41 f6 44 24 10 08    	testb  $0x8,0x10(%r12)
ffffffff8021230c:	0f 84 35 26 00 00    	je     ffffffff80214947 <_RME_Svc_Handler+0x3c07>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80212312:	48 89 c2             	mov    %rax,%rdx
            Retval=_RME_Pgt_Des(Cpt,
ffffffff80212315:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff8021231a:	48 c1 ea 24          	shr    $0x24,%rdx
ffffffff8021231e:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80212321:	0f 82 4b 2a 00 00    	jb     ffffffff80214d72 <_RME_Svc_Handler+0x4032>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80212327:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8021232b:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80212330:	48 39 c6             	cmp    %rax,%rsi
ffffffff80212333:	0f 82 51 2a 00 00    	jb     ffffffff80214d8a <_RME_Svc_Handler+0x404a>
    if((Pos>>RME_PGT_NMORD(Pgt_Parent->Order))!=0U)
ffffffff80212339:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
ffffffff8021233d:	48 89 f0             	mov    %rsi,%rax
ffffffff80212340:	48 d3 e8             	shr    %cl,%rax
ffffffff80212343:	48 85 c0             	test   %rax,%rax
ffffffff80212346:	0f 85 32 2a 00 00    	jne    ffffffff80214d7e <_RME_Svc_Handler+0x403e>
    if(__RME_Pgt_Pgdir_Unmap(Pgt_Parent,Pos,Pgt_Child)<0)
ffffffff8021234c:	4c 89 e2             	mov    %r12,%rdx
ffffffff8021234f:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212352:	e8 29 8c 00 00       	call   ffffffff8021af80 <__RME_Pgt_Pgdir_Unmap>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80212357:	83 7d 00 00          	cmpl   $0x0,0x0(%rbp)
ffffffff8021235b:	74 04                	je     ffffffff80212361 <_RME_Svc_Handler+0x1621>
ffffffff8021235d:	48 8b 6d 08          	mov    0x8(%rbp),%rbp
ffffffff80212361:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff80212365:	f0 48 0f c1 45 08    	lock xadd %rax,0x8(%rbp)
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8021236b:	41 83 3c 24 00       	cmpl   $0x0,(%r12)
ffffffff80212370:	74 05                	je     ffffffff80212377 <_RME_Svc_Handler+0x1637>
ffffffff80212372:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
ffffffff80212377:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff8021237b:	f0 49 0f c1 44 24 08 	lock xadd %rax,0x8(%r12)
    return 0;
ffffffff80212382:	31 f6                	xor    %esi,%esi
ffffffff80212384:	e9 59 f8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                                RME_PARAM_Q0(Param[0]),                     /* rme_ptr_t Size_Order */
ffffffff80212389:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
ffffffff8021238e:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff80212393:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80212397:	4c 89 ff             	mov    %r15,%rdi
ffffffff8021239a:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff8021239f:	48 89 c1             	mov    %rax,%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff802123a2:	48 89 c6             	mov    %rax,%rsi
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff802123a5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802123a8:	48 c1 ea 10          	shr    $0x10,%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff802123ac:	48 c1 ee 20          	shr    $0x20,%rsi
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff802123b0:	52                   	push   %rdx
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff802123b1:	48 c1 e9 10          	shr    $0x10,%rcx
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff802123b5:	48 89 f2             	mov    %rsi,%rdx
ffffffff802123b8:	50                   	push   %rax
ffffffff802123b9:	4c 89 c8             	mov    %r9,%rax
ffffffff802123bc:	0f b7 c9             	movzwl %cx,%ecx
ffffffff802123bf:	49 83 e1 fe          	and    $0xfffffffffffffffe,%r9
ffffffff802123c3:	83 e0 01             	and    $0x1,%eax
ffffffff802123c6:	50                   	push   %rax
ffffffff802123c7:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff802123cc:	4c 8b 44 24 58       	mov    0x58(%rsp),%r8
ffffffff802123d1:	e8 7a ca ff ff       	call   ffffffff8020ee50 <_RME_Pgt_Crt>
            break;
ffffffff802123d6:	48 83 c4 20          	add    $0x20,%rsp
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff802123da:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff802123dd:	e9 00 f8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Retval=_RME_Cpt_Rem(Cpt,
ffffffff802123e2:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff802123e7:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff802123eb:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff802123ef:	f6 c4 80             	test   $0x80,%ah
ffffffff802123f2:	0f 85 38 14 00 00    	jne    ffffffff80213830 <_RME_Svc_Handler+0x2af0>
ffffffff802123f8:	48 39 f0             	cmp    %rsi,%rax
ffffffff802123fb:	0f 83 c1 22 00 00    	jae    ffffffff802146c2 <_RME_Svc_Handler+0x3982>
ffffffff80212401:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212408:	00 00 00 
ffffffff8021240b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021240f:	48 01 c8             	add    %rcx,%rax
ffffffff80212412:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212419:	ff 00 00 
ffffffff8021241c:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021241f:	48 21 d1             	and    %rdx,%rcx
ffffffff80212422:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212425:	0f 84 8b 22 00 00    	je     ffffffff802146b6 <_RME_Svc_Handler+0x3976>
ffffffff8021242b:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021242f:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212433:	0f 85 71 22 00 00    	jne    ffffffff802146aa <_RME_Svc_Handler+0x396a>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
ffffffff80212439:	f6 40 10 20          	testb  $0x20,0x10(%rax)
ffffffff8021243d:	0f 84 cc 1e 00 00    	je     ffffffff8021430f <_RME_Svc_Handler+0x35cf>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Rem */
ffffffff80212443:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff80212448:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021244c:	0f 83 59 24 00 00    	jae    ffffffff802148ab <_RME_Svc_Handler+0x3b6b>
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff80212452:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212459:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff8021245c:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212460:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff80212464:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021246b:	00 00 00 
ffffffff8021246e:	48 8b 02             	mov    (%rdx),%rax
ffffffff80212471:	48 21 c1             	and    %rax,%rcx
ffffffff80212474:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212477:	0f 85 5e 24 00 00    	jne    ffffffff802148db <_RME_Svc_Handler+0x3b9b>
ffffffff8021247d:	48 8b 72 20          	mov    0x20(%rdx),%rsi
ffffffff80212481:	48 8b 0d 88 3b 01 00 	mov    0x13b88(%rip),%rcx        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff80212488:	48 29 f1             	sub    %rsi,%rcx
ffffffff8021248b:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff8021248f:	0f 86 3a 24 00 00    	jbe    ffffffff802148cf <_RME_Svc_Handler+0x3b8f>
ffffffff80212495:	85 c0                	test   %eax,%eax
ffffffff80212497:	0f 84 e3 20 00 00    	je     ffffffff80214580 <_RME_Svc_Handler+0x3840>
    Rem_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8021249d:	48 89 c1             	mov    %rax,%rcx
ffffffff802124a0:	48 c1 e9 30          	shr    $0x30,%rcx
    if((Rem_Type!=RME_CAP_TYPE_KOM)&&(Rem_Type!=RME_CAP_TYPE_KFN))
ffffffff802124a4:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff802124a8:	48 83 f9 01          	cmp    $0x1,%rcx
ffffffff802124ac:	0f 86 c8 1d 00 00    	jbe    ffffffff8021427a <_RME_Svc_Handler+0x353a>
        Capobj_Root=(struct RME_Cap_Struct*)(Capobj_Rem->Head.Root_Ref);
ffffffff802124b2:	48 8b 72 08          	mov    0x8(%rdx),%rsi
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802124b6:	31 c9                	xor    %ecx,%ecx
ffffffff802124b8:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802124bd:	0f 94 c1             	sete   %cl
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff802124c0:	84 c9                	test   %cl,%cl
ffffffff802124c2:	0f 84 36 11 00 00    	je     ffffffff802135fe <_RME_Svc_Handler+0x28be>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff802124c8:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff802124cc:	f0 48 0f c1 46 08    	lock xadd %rax,0x8(%rsi)
    return 0;
ffffffff802124d2:	31 f6                	xor    %esi,%esi
ffffffff802124d4:	e9 09 f7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff802124d9:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
ffffffff802124de:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
ffffffff802124e3:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff802124e8:	49 8b 77 28          	mov    0x28(%r15),%rsi
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff802124ec:	48 c1 e0 20          	shl    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff802124f0:	48 0b 44 24 28       	or     0x28(%rsp),%rax
ffffffff802124f5:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff802124f9:	45 89 c1             	mov    %r8d,%r9d
ffffffff802124fc:	50                   	push   %rax
ffffffff802124fd:	89 d1                	mov    %edx,%ecx
ffffffff802124ff:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80212503:	ff 74 24 48          	push   0x48(%rsp)
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
ffffffff80212507:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8021250b:	e8 00 b2 ff ff       	call   ffffffff8020d710 <_RME_Cpt_Add.isra.0>
            break;
ffffffff80212510:	41 5a                	pop    %r10
ffffffff80212512:	41 5b                	pop    %r11
            Retval=_RME_Cpt_Add(Cpt,
ffffffff80212514:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212517:	e9 c6 f6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Retval=_RME_Cpt_Frz(Cpt,
ffffffff8021251c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80212521:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212525:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff80212529:	f6 c4 80             	test   $0x80,%ah
ffffffff8021252c:	0f 85 9e 17 00 00    	jne    ffffffff80213cd0 <_RME_Svc_Handler+0x2f90>
ffffffff80212532:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212535:	0f 83 39 20 00 00    	jae    ffffffff80214574 <_RME_Svc_Handler+0x3834>
ffffffff8021253b:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212542:	00 00 00 
ffffffff80212545:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212549:	48 01 c8             	add    %rcx,%rax
ffffffff8021254c:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212553:	ff 00 00 
ffffffff80212556:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212559:	48 21 d1             	and    %rdx,%rcx
ffffffff8021255c:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021255f:	0f 84 03 20 00 00    	je     ffffffff80214568 <_RME_Svc_Handler+0x3828>
ffffffff80212565:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212569:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021256d:	0f 85 97 21 00 00    	jne    ffffffff8021470a <_RME_Svc_Handler+0x39ca>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
ffffffff80212573:	f6 40 10 04          	testb  $0x4,0x10(%rax)
ffffffff80212577:	0f 84 23 1e 00 00    	je     ffffffff802143a0 <_RME_Svc_Handler+0x3660>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Frz */
ffffffff8021257d:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Frz,struct RME_Cap_Struct*,Capobj_Frz);
ffffffff80212582:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212586:	0f 83 8f 22 00 00    	jae    ffffffff8021481b <_RME_Svc_Handler+0x3adb>
ffffffff8021258c:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212590:	48 03 50 18          	add    0x18(%rax),%rdx
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
ffffffff80212594:	48 8b 02             	mov    (%rdx),%rax
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
ffffffff80212597:	48 89 c6             	mov    %rax,%rsi
ffffffff8021259a:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021259e:	0f 84 5a 10 00 00    	je     ffffffff802135fe <_RME_Svc_Handler+0x28be>
    if(RME_CAP_ATTR(Type_Stat)==RME_CAP_ATTR_ROOT)
ffffffff802125a4:	85 c0                	test   %eax,%eax
ffffffff802125a6:	75 0d                	jne    ffffffff802125b5 <_RME_Svc_Handler+0x1875>
        if(Capobj_Frz->Head.Root_Ref!=0U)
ffffffff802125a8:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff802125ac:	48 85 c9             	test   %rcx,%rcx
ffffffff802125af:	0f 85 d3 1d 00 00    	jne    ffffffff80214388 <_RME_Svc_Handler+0x3648>
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff802125b5:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802125bc:	ff 00 00 
ffffffff802125bf:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802125c6:	00 00 00 
ffffffff802125c9:	48 21 c1             	and    %rax,%rcx
ffffffff802125cc:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802125cf:	0f 84 64 27 00 00    	je     ffffffff80214d39 <_RME_Svc_Handler+0x3ff9>
    if(RME_UNLIKELY(RME_CAP_QUIE(Capobj_Frz->Head.Timestamp)==0U))
ffffffff802125d5:	48 8b 0d 34 3a 01 00 	mov    0x13a34(%rip),%rcx        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff802125dc:	4c 8b 42 20          	mov    0x20(%rdx),%r8
ffffffff802125e0:	48 89 cf             	mov    %rcx,%rdi
ffffffff802125e3:	4c 29 c7             	sub    %r8,%rdi
ffffffff802125e6:	48 83 ff 0a          	cmp    $0xa,%rdi
ffffffff802125ea:	0f 86 af 22 00 00    	jbe    ffffffff8021489f <_RME_Svc_Handler+0x3b5f>
    Capobj_Frz->Head.Timestamp=RME_TIMESTAMP;
ffffffff802125f0:	48 89 4a 20          	mov    %rcx,0x20(%rdx)
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff802125f4:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff802125fb:	00 ff ff 
ffffffff802125fe:	48 21 c1             	and    %rax,%rcx
ffffffff80212601:	48 09 f1             	or     %rsi,%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212604:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80212609:	0f 94 c1             	sete   %cl
    return 0;
ffffffff8021260c:	31 f6                	xor    %esi,%esi
ffffffff8021260e:	e9 cf f5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Retval=_RME_Cpt_Del(Cpt,
ffffffff80212613:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80212618:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff8021261c:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80212620:	f6 c4 80             	test   $0x80,%ah
ffffffff80212623:	0f 85 57 14 00 00    	jne    ffffffff80213a80 <_RME_Svc_Handler+0x2d40>
ffffffff80212629:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021262c:	0f 83 30 20 00 00    	jae    ffffffff80214662 <_RME_Svc_Handler+0x3922>
ffffffff80212632:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212639:	00 00 00 
ffffffff8021263c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212640:	48 01 c8             	add    %rcx,%rax
ffffffff80212643:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8021264a:	ff 00 00 
ffffffff8021264d:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212650:	48 21 d1             	and    %rdx,%rcx
ffffffff80212653:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212656:	0f 84 fa 1f 00 00    	je     ffffffff80214656 <_RME_Svc_Handler+0x3916>
ffffffff8021265c:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212660:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212664:	0f 85 e0 1f 00 00    	jne    ffffffff8021464a <_RME_Svc_Handler+0x390a>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021266a:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8021266e:	0f 84 50 1d 00 00    	je     ffffffff802143c4 <_RME_Svc_Handler+0x3684>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Cpt */
ffffffff80212674:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff80212679:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021267d:	0f 83 c1 1e 00 00    	jae    ffffffff80214544 <_RME_Svc_Handler+0x3804>
ffffffff80212683:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff80212687:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff8021268b:	48 b9 00 00 00 00 02 	movabs $0x200000000,%rcx
ffffffff80212692:	00 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff80212695:	48 01 d6             	add    %rdx,%rsi
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff80212698:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff8021269f:	ff 00 00 
ffffffff802126a2:	48 8b 06             	mov    (%rsi),%rax
ffffffff802126a5:	48 21 c2             	and    %rax,%rdx
ffffffff802126a8:	48 39 ca             	cmp    %rcx,%rdx
ffffffff802126ab:	0f 85 ab 1e 00 00    	jne    ffffffff8021455c <_RME_Svc_Handler+0x381c>
ffffffff802126b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802126b4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802126b8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802126bc:	0f 85 8e 1e 00 00    	jne    ffffffff80214550 <_RME_Svc_Handler+0x3810>
ffffffff802126c2:	48 8b 4e 20          	mov    0x20(%rsi),%rcx
ffffffff802126c6:	48 8b 15 43 39 01 00 	mov    0x13943(%rip),%rdx        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff802126cd:	48 29 ca             	sub    %rcx,%rdx
ffffffff802126d0:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff802126d4:	0f 86 34 1f 00 00    	jbe    ffffffff8021460e <_RME_Svc_Handler+0x38ce>
ffffffff802126da:	48 8b 56 08          	mov    0x8(%rsi),%rdx
ffffffff802126de:	48 85 d2             	test   %rdx,%rdx
ffffffff802126e1:	0f 85 05 1f 00 00    	jne    ffffffff802145ec <_RME_Svc_Handler+0x38ac>
    Table=RME_CAP_GETOBJ(Cpt_Del,struct RME_Cap_Struct*);
ffffffff802126e7:	48 8b 4e 18          	mov    0x18(%rsi),%rcx
    Entry_Num=Cpt_Del->Entry_Num;
ffffffff802126eb:	48 8b 7e 28          	mov    0x28(%rsi),%rdi
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff802126ef:	48 85 ff             	test   %rdi,%rdi
ffffffff802126f2:	75 1d                	jne    ffffffff80212711 <_RME_Svc_Handler+0x19d1>
ffffffff802126f4:	e9 54 1b 00 00       	jmp    ffffffff8021424d <_RME_Svc_Handler+0x350d>
ffffffff802126f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80212700:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80212704:	48 83 c1 40          	add    $0x40,%rcx
ffffffff80212708:	48 39 d7             	cmp    %rdx,%rdi
ffffffff8021270b:	0f 84 3c 1b 00 00    	je     ffffffff8021424d <_RME_Svc_Handler+0x350d>
        if(Table[Count].Head.Type_Stat!=0U)
ffffffff80212711:	48 83 39 00          	cmpq   $0x0,(%rcx)
ffffffff80212715:	74 e9                	je     ffffffff80212700 <_RME_Svc_Handler+0x19c0>
            RME_CAP_DEFROST(Cpt_Del,Type_Stat);
ffffffff80212717:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff8021271e:	00 ff ff 
ffffffff80212721:	48 21 c2             	and    %rax,%rdx
ffffffff80212724:	f0 48 0f b1 16       	lock cmpxchg %rdx,(%rsi)
ffffffff80212729:	0f 94 c2             	sete   %dl
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff8021272c:	48 c7 c6 fb ff ff ff 	mov    $0xfffffffffffffffb,%rsi
ffffffff80212733:	e9 aa f4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80212738:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021273f:	00 
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Crt */
ffffffff80212740:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff80212745:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
ffffffff8021274a:	4c 89 ff             	mov    %r15,%rdi
ffffffff8021274d:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
ffffffff80212752:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
ffffffff80212757:	89 d1                	mov    %edx,%ecx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80212759:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8021275d:	e8 de c3 ff ff       	call   ffffffff8020eb40 <_RME_Cpt_Crt>
ffffffff80212762:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212765:	e9 78 f4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                                RME_PARAM_D1(Param[0]));                    /* rme_ptr_t Is_Exc_Ret */
ffffffff8021276a:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
ffffffff8021276f:	49 8b 47 18          	mov    0x18(%r15),%rax
ffffffff80212773:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff80212777:	89 ca                	mov    %ecx,%edx
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80212779:	f6 c5 80             	test   $0x80,%ch
ffffffff8021277c:	0f 85 d6 11 00 00    	jne    ffffffff80213958 <_RME_Svc_Handler+0x2c18>
ffffffff80212782:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80212785:	0f 83 11 1d 00 00    	jae    ffffffff8021449c <_RME_Svc_Handler+0x375c>
ffffffff8021278b:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff80212792:	ff 00 00 
ffffffff80212795:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212799:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802127a0:	00 00 00 
ffffffff802127a3:	48 01 d0             	add    %rdx,%rax
ffffffff802127a6:	48 8b 10             	mov    (%rax),%rdx
ffffffff802127a9:	48 21 d6             	and    %rdx,%rsi
ffffffff802127ac:	48 39 fe             	cmp    %rdi,%rsi
ffffffff802127af:	0f 84 db 1c 00 00    	je     ffffffff80214490 <_RME_Svc_Handler+0x3750>
ffffffff802127b5:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802127b9:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff802127bd:	0f 85 c1 1c 00 00    	jne    ffffffff80214484 <_RME_Svc_Handler+0x3744>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff802127c3:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff802127c7:	0f 84 03 1c 00 00    	je     ffffffff802143d0 <_RME_Svc_Handler+0x3690>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff802127cd:	48 8b 40 18          	mov    0x18(%rax),%rax
    Invocation->Entry=Entry;
ffffffff802127d1:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
            Retval=_RME_Inv_Set(Cpt,
ffffffff802127d6:	48 c1 e9 20          	shr    $0x20,%rcx
    return 0;
ffffffff802127da:	31 f6                	xor    %esi,%esi
    Invocation->Entry=Entry;
ffffffff802127dc:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Invocation->Stack=Stack;
ffffffff802127e0:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
ffffffff802127e5:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Invocation->Is_Exc_Ret=Is_Exc_Ret;
ffffffff802127e9:	48 89 48 30          	mov    %rcx,0x30(%rax)
    return 0;
ffffffff802127ed:	e9 f0 f3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff802127f2:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
            Retval=_RME_Inv_Crt(Cpt,
ffffffff802127f7:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff802127fb:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff802127ff:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff80212803:	ff 74 24 48          	push   0x48(%rsp)
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80212807:	4c 89 c1             	mov    %r8,%rcx
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8021280a:	4c 8b 4c 24 48       	mov    0x48(%rsp),%r9
ffffffff8021280f:	45 89 c0             	mov    %r8d,%r8d
ffffffff80212812:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff80212817:	48 c1 e9 20          	shr    $0x20,%rcx
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8021281b:	e8 c0 d3 ff ff       	call   ffffffff8020fbe0 <_RME_Inv_Crt.isra.0>
ffffffff80212820:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212823:	58                   	pop    %rax
ffffffff80212824:	5a                   	pop    %rdx
ffffffff80212825:	e9 b8 f3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                                       RME_PARAM_D0(Param[1]),              /* rme_ptr_t Prio */
ffffffff8021282a:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
ffffffff8021282f:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212834:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff80212838:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff8021283c:	ff 74 24 40          	push   0x40(%rsp)
ffffffff80212840:	44 89 c8             	mov    %r9d,%eax
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff80212843:	4c 89 c1             	mov    %r8,%rcx
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212846:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff8021284a:	45 89 c0             	mov    %r8d,%r8d
ffffffff8021284d:	50                   	push   %rax
ffffffff8021284e:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff80212853:	48 c1 e9 20          	shr    $0x20,%rcx
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff80212857:	e8 a4 a0 ff ff       	call   ffffffff8020c900 <_RME_Thd_Sched_Bind.isra.0>
            break;
ffffffff8021285c:	59                   	pop    %rcx
ffffffff8021285d:	5f                   	pop    %rdi
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8021285e:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212861:	e9 7c f3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Retval=_RME_Thd_Del(Cpt,
ffffffff80212866:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff8021286b:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff8021286f:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212873:	f6 c4 80             	test   $0x80,%ah
ffffffff80212876:	0f 85 04 16 00 00    	jne    ffffffff80213e80 <_RME_Svc_Handler+0x3140>
ffffffff8021287c:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021287f:	0f 83 b7 1b 00 00    	jae    ffffffff8021443c <_RME_Svc_Handler+0x36fc>
ffffffff80212885:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff8021288c:	00 00 00 
ffffffff8021288f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212893:	48 01 c8             	add    %rcx,%rax
ffffffff80212896:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff8021289d:	ff 00 00 
ffffffff802128a0:	48 8b 10             	mov    (%rax),%rdx
ffffffff802128a3:	48 21 d1             	and    %rdx,%rcx
ffffffff802128a6:	48 39 f1             	cmp    %rsi,%rcx
ffffffff802128a9:	0f 84 81 1b 00 00    	je     ffffffff80214430 <_RME_Svc_Handler+0x36f0>
ffffffff802128af:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802128b3:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802128b7:	0f 85 67 1b 00 00    	jne    ffffffff80214424 <_RME_Svc_Handler+0x36e4>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff802128bd:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff802128c1:	0f 84 3c 1a 00 00    	je     ffffffff80214303 <_RME_Svc_Handler+0x35c3>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Thd */
ffffffff802128c7:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff802128cc:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff802128d0:	0f 83 f2 1c 00 00    	jae    ffffffff802145c8 <_RME_Svc_Handler+0x3888>
ffffffff802128d6:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff802128da:	48 c1 e2 06          	shl    $0x6,%rdx
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff802128de:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802128e5:	00 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff802128e8:	48 01 d1             	add    %rdx,%rcx
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff802128eb:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff802128f2:	ff 00 00 
ffffffff802128f5:	48 8b 01             	mov    (%rcx),%rax
ffffffff802128f8:	48 21 c2             	and    %rax,%rdx
ffffffff802128fb:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802128fe:	0f 85 dc 1c 00 00    	jne    ffffffff802145e0 <_RME_Svc_Handler+0x38a0>
ffffffff80212904:	48 89 c2             	mov    %rax,%rdx
ffffffff80212907:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021290b:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8021290f:	0f 85 bf 1c 00 00    	jne    ffffffff802145d4 <_RME_Svc_Handler+0x3894>
ffffffff80212915:	48 8b 15 f4 36 01 00 	mov    0x136f4(%rip),%rdx        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff8021291c:	48 2b 51 20          	sub    0x20(%rcx),%rdx
ffffffff80212920:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80212924:	0f 86 be 1a 00 00    	jbe    ffffffff802143e8 <_RME_Svc_Handler+0x36a8>
ffffffff8021292a:	48 83 79 08 00       	cmpq   $0x0,0x8(%rcx)
ffffffff8021292f:	0f 85 3a 1a 00 00    	jne    ffffffff8021436f <_RME_Svc_Handler+0x362f>
    Thread=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
ffffffff80212935:	48 8b 79 18          	mov    0x18(%rcx),%rdi
    if(Thread->Sched.Local!=RME_THD_FREE)
ffffffff80212939:	48 83 7f 28 ff       	cmpq   $0xffffffffffffffff,0x28(%rdi)
ffffffff8021293e:	0f 85 01 24 00 00    	jne    ffffffff80214d45 <_RME_Svc_Handler+0x4005>
ffffffff80212944:	31 d2                	xor    %edx,%edx
ffffffff80212946:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021294b:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Thd_Del,Type_Stat);
ffffffff8021294e:	84 d2                	test   %dl,%dl
ffffffff80212950:	0f 84 a8 0c 00 00    	je     ffffffff802135fe <_RME_Svc_Handler+0x28be>
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80212956:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
ffffffff8021295d:	48 8d b7 98 00 00 00 	lea    0x98(%rdi),%rsi
ffffffff80212964:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212967:	74 2a                	je     ffffffff80212993 <_RME_Svc_Handler+0x1c53>
        _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff80212969:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021296c:	48 8b 50 08          	mov    0x8(%rax),%rdx
    Next->Prev=Prev;
ffffffff80212970:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    Prev->Next=Next;
ffffffff80212974:	48 89 0a             	mov    %rcx,(%rdx)
        Invocation->Thd_Act=0U;
ffffffff80212977:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021297e:	00 
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff8021297f:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
        Thread->Ctx.Invstk_Depth--;
ffffffff80212986:	48 83 af a8 00 00 00 	subq   $0x1,0xa8(%rdi)
ffffffff8021298d:	01 
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff8021298e:	48 39 c6             	cmp    %rax,%rsi
ffffffff80212991:	75 d6                	jne    ffffffff80212969 <_RME_Svc_Handler+0x1c29>
    RME_FETCH_ADD(&(Thread->Sched.Prc->Head.Root_Ref), -1);
ffffffff80212993:	48 8b 47 58          	mov    0x58(%rdi),%rax
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80212997:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
ffffffff8021299b:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021299f:	f0 48 0f c1 10       	lock xadd %rdx,(%rax)
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)==0U)
ffffffff802129a4:	48 83 bf 88 00 00 00 	cmpq   $0x0,0x88(%rdi)
ffffffff802129ab:	00 
ffffffff802129ac:	0f 88 dd 18 00 00    	js     ffffffff8021428f <_RME_Svc_Handler+0x354f>
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff802129b2:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff802129b7:	e8 e4 d5 ff ff       	call   ffffffff8020ffa0 <_RME_Kot_Erase>
    return 0;
ffffffff802129bc:	31 f6                	xor    %esi,%esi
ffffffff802129be:	e9 1f f2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Retval=_RME_Thd_Crt(Cpt,
ffffffff802129c3:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Prio_Max */
ffffffff802129c8:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
            Retval=_RME_Thd_Crt(Cpt,
ffffffff802129cd:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff802129d1:	4c 89 ff             	mov    %r15,%rdi
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
ffffffff802129d4:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
            Retval=_RME_Thd_Crt(Cpt,
ffffffff802129d9:	48 89 c6             	mov    %rax,%rsi
ffffffff802129dc:	48 c1 e8 07          	shr    $0x7,%rax
ffffffff802129e0:	45 89 c1             	mov    %r8d,%r9d
ffffffff802129e3:	83 e6 40             	and    $0x40,%esi
ffffffff802129e6:	89 d1                	mov    %edx,%ecx
ffffffff802129e8:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff802129ec:	56                   	push   %rsi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff802129ed:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Thd_Crt(Cpt,
ffffffff802129f1:	50                   	push   %rax
ffffffff802129f2:	ff 74 24 58          	push   0x58(%rsp)
ffffffff802129f6:	48 8b 74 24 48       	mov    0x48(%rsp),%rsi
ffffffff802129fb:	e8 b0 c7 ff ff       	call   ffffffff8020f1b0 <_RME_Thd_Crt>
            break;
ffffffff80212a00:	48 83 c4 20          	add    $0x20,%rsp
            Retval=_RME_Thd_Crt(Cpt,
ffffffff80212a04:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212a07:	e9 d6 f1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff80212a0c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff80212a11:	49 8b 77 18          	mov    0x18(%r15),%rsi
ffffffff80212a15:	49 8b 7f 28          	mov    0x28(%r15),%rdi
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80212a19:	f6 c4 80             	test   $0x80,%ah
ffffffff80212a1c:	0f 85 7e 11 00 00    	jne    ffffffff80213ba0 <_RME_Svc_Handler+0x2e60>
ffffffff80212a22:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212a25:	0f 83 68 1e 00 00    	jae    ffffffff80214893 <_RME_Svc_Handler+0x3b53>
ffffffff80212a2b:	48 ba 00 00 00 00 ff 	movabs $0xffff00000000,%rdx
ffffffff80212a32:	ff 00 00 
ffffffff80212a35:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212a39:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80212a40:	00 00 00 
ffffffff80212a43:	48 8d 0c 30          	lea    (%rax,%rsi,1),%rcx
ffffffff80212a47:	48 8b 01             	mov    (%rcx),%rax
ffffffff80212a4a:	48 21 c2             	and    %rax,%rdx
ffffffff80212a4d:	4c 39 c2             	cmp    %r8,%rdx
ffffffff80212a50:	0f 84 31 1e 00 00    	je     ffffffff80214887 <_RME_Svc_Handler+0x3b47>
ffffffff80212a56:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212a5a:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80212a5e:	0f 85 ab 1d 00 00    	jne    ffffffff8021480f <_RME_Svc_Handler+0x3acf>
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Pgt */
ffffffff80212a64:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80212a69:	f6 c4 80             	test   $0x80,%ah
ffffffff80212a6c:	0f 85 e5 14 00 00    	jne    ffffffff80213f57 <_RME_Svc_Handler+0x3217>
ffffffff80212a72:	48 39 f8             	cmp    %rdi,%rax
ffffffff80212a75:	0f 83 8c 1f 00 00    	jae    ffffffff80214a07 <_RME_Svc_Handler+0x3cc7>
ffffffff80212a7b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212a7f:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80212a84:	48 8d 14 30          	lea    (%rax,%rsi,1),%rdx
ffffffff80212a88:	be ff ff 00 00       	mov    $0xffff,%esi
ffffffff80212a8d:	48 c1 e7 21          	shl    $0x21,%rdi
ffffffff80212a91:	48 8b 02             	mov    (%rdx),%rax
ffffffff80212a94:	48 c1 e6 20          	shl    $0x20,%rsi
ffffffff80212a98:	48 21 c6             	and    %rax,%rsi
ffffffff80212a9b:	48 39 fe             	cmp    %rdi,%rsi
ffffffff80212a9e:	0f 84 57 1f 00 00    	je     ffffffff802149fb <_RME_Svc_Handler+0x3cbb>
ffffffff80212aa4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212aa8:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80212aac:	0f 85 3d 1f 00 00    	jne    ffffffff802149ef <_RME_Svc_Handler+0x3caf>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff80212ab2:	f6 41 10 08          	testb  $0x8,0x10(%rcx)
ffffffff80212ab6:	0f 84 27 1f 00 00    	je     ffffffff802149e3 <_RME_Svc_Handler+0x3ca3>
    RME_CAP_CHECK(Pgt_New,RME_PGT_FLAG_PRC_PGT);
ffffffff80212abc:	f6 42 10 80          	testb  $0x80,0x10(%rdx)
ffffffff80212ac0:	0f 84 de 1a 00 00    	je     ffffffff802145a4 <_RME_Svc_Handler+0x3864>
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff80212ac6:	83 3a 00             	cmpl   $0x0,(%rdx)
    Pgt_Old=Prc_Op->Pgt;
ffffffff80212ac9:	48 8b 41 30          	mov    0x30(%rcx),%rax
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff80212acd:	74 04                	je     ffffffff80212ad3 <_RME_Svc_Handler+0x1d93>
ffffffff80212acf:	48 8b 52 08          	mov    0x8(%rdx),%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80212ad3:	f0 48 0f b1 51 30    	lock cmpxchg %rdx,0x30(%rcx)
ffffffff80212ad9:	40 0f 94 c6          	sete   %sil
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Pgt)),
ffffffff80212add:	40 84 f6             	test   %sil,%sil
ffffffff80212ae0:	0f 85 24 f6 ff ff    	jne    ffffffff8021210a <_RME_Svc_Handler+0x13ca>
        return RME_ERR_PTH_CONFLICT;
ffffffff80212ae6:	48 c7 c6 36 ff ff ff 	mov    $0xffffffffffffff36,%rsi
ffffffff80212aed:	e9 f0 f0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80212af2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Pgt_Child */
ffffffff80212af8:	4c 8b 44 24 30       	mov    0x30(%rsp),%r8
            Retval=_RME_Pgt_Con(Cpt,
ffffffff80212afd:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff80212b01:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff80212b05:	4c 8b 4c 24 40       	mov    0x40(%rsp),%r9
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff80212b0a:	4c 89 c2             	mov    %r8,%rdx
            Retval=_RME_Pgt_Con(Cpt,
ffffffff80212b0d:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
ffffffff80212b12:	45 89 c0             	mov    %r8d,%r8d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff80212b15:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Pgt_Con(Cpt,
ffffffff80212b19:	e8 22 a6 ff ff       	call   ffffffff8020d140 <_RME_Pgt_Con.isra.0>
ffffffff80212b1e:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212b21:	e9 bc f0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt */
ffffffff80212b26:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff80212b2b:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212b2f:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff80212b33:	f6 c4 80             	test   $0x80,%ah
ffffffff80212b36:	0f 85 24 12 00 00    	jne    ffffffff80213d60 <_RME_Svc_Handler+0x3020>
ffffffff80212b3c:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212b3f:	0f 83 f0 20 00 00    	jae    ffffffff80214c35 <_RME_Svc_Handler+0x3ef5>
ffffffff80212b45:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212b4c:	00 00 00 
ffffffff80212b4f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212b53:	48 01 c8             	add    %rcx,%rax
ffffffff80212b56:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212b5d:	ff 00 00 
ffffffff80212b60:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212b63:	48 21 d1             	and    %rdx,%rcx
ffffffff80212b66:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212b69:	0f 84 ba 20 00 00    	je     ffffffff80214c29 <_RME_Svc_Handler+0x3ee9>
ffffffff80212b6f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212b73:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212b77:	0f 85 a0 20 00 00    	jne    ffffffff80214c1d <_RME_Svc_Handler+0x3edd>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80212b7d:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80212b81:	f6 c2 04             	test   $0x4,%dl
ffffffff80212b84:	0f 84 91 17 00 00    	je     ffffffff8021431b <_RME_Svc_Handler+0x35db>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80212b8a:	48 89 d1             	mov    %rdx,%rcx
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff80212b8d:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80212b92:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff80212b96:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212b99:	0f 82 c7 21 00 00    	jb     ffffffff80214d66 <_RME_Svc_Handler+0x4026>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Rem->Head.Flag)))
ffffffff80212b9f:	48 c1 ea 08          	shr    $0x8,%rdx
ffffffff80212ba3:	81 e2 ff ff ff 0f    	and    $0xfffffff,%edx
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80212ba9:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80212bac:	0f 82 37 21 00 00    	jb     ffffffff80214ce9 <_RME_Svc_Handler+0x3fa9>
    if((Pos>>RME_PGT_NMORD(Pgt_Rem->Order))!=0U)
ffffffff80212bb2:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80212bb6:	48 89 f2             	mov    %rsi,%rdx
ffffffff80212bb9:	48 d3 ea             	shr    %cl,%rdx
ffffffff80212bbc:	48 85 d2             	test   %rdx,%rdx
ffffffff80212bbf:	0f 85 18 21 00 00    	jne    ffffffff80214cdd <_RME_Svc_Handler+0x3f9d>
    if(__RME_Pgt_Page_Unmap(Pgt_Rem,Pos)<0)
ffffffff80212bc5:	48 89 c7             	mov    %rax,%rdi
ffffffff80212bc8:	e8 e3 82 00 00       	call   ffffffff8021aeb0 <__RME_Pgt_Page_Unmap>
    return 0;
ffffffff80212bcd:	31 f6                	xor    %esi,%esi
ffffffff80212bcf:	e9 0e f0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Pos_Src */
ffffffff80212bd4:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
ffffffff80212bd9:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80212bde:	49 8b 77 28          	mov    0x28(%r15),%rsi
ffffffff80212be2:	49 8b 7f 18          	mov    0x18(%r15),%rdi
ffffffff80212be6:	ff 74 24 40          	push   0x40(%rsp)
ffffffff80212bea:	44 89 c8             	mov    %r9d,%eax
ffffffff80212bed:	89 d1                	mov    %edx,%ecx
ffffffff80212bef:	49 c1 e9 20          	shr    $0x20,%r9
ffffffff80212bf3:	50                   	push   %rax
ffffffff80212bf4:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
ffffffff80212bf9:	48 c1 ea 20          	shr    $0x20,%rdx
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80212bfd:	e8 de a7 ff ff       	call   ffffffff8020d3e0 <_RME_Pgt_Add.isra.0>
            break;
ffffffff80212c02:	41 58                	pop    %r8
ffffffff80212c04:	41 59                	pop    %r9
            Retval=_RME_Pgt_Add(Cpt,
ffffffff80212c06:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80212c09:	e9 d4 ef ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Retval=_RME_Pgt_Del(Cpt,
ffffffff80212c0e:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80212c13:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212c17:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212c1b:	f6 c4 80             	test   $0x80,%ah
ffffffff80212c1e:	0f 85 74 0b 00 00    	jne    ffffffff80213798 <_RME_Svc_Handler+0x2a58>
ffffffff80212c24:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212c27:	0f 83 88 1e 00 00    	jae    ffffffff80214ab5 <_RME_Svc_Handler+0x3d75>
ffffffff80212c2d:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212c34:	00 00 00 
ffffffff80212c37:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212c3b:	48 01 c8             	add    %rcx,%rax
ffffffff80212c3e:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212c45:	ff 00 00 
ffffffff80212c48:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212c4b:	48 21 d1             	and    %rdx,%rcx
ffffffff80212c4e:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212c51:	0f 84 52 1e 00 00    	je     ffffffff80214aa9 <_RME_Svc_Handler+0x3d69>
ffffffff80212c57:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212c5b:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212c5f:	0f 85 38 1e 00 00    	jne    ffffffff80214a9d <_RME_Svc_Handler+0x3d5d>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212c65:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212c69:	0f 84 e8 16 00 00    	je     ffffffff80214357 <_RME_Svc_Handler+0x3617>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Pgt */
ffffffff80212c6f:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80212c74:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212c78:	0f 83 e5 1b 00 00    	jae    ffffffff80214863 <_RME_Svc_Handler+0x3b23>
ffffffff80212c7e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212c82:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80212c86:	48 b8 00 00 00 00 ff 	movabs $0xffff00000000,%rax
ffffffff80212c8d:	ff 00 00 
ffffffff80212c90:	4c 8b 22             	mov    (%rdx),%r12
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80212c93:	48 89 d5             	mov    %rdx,%rbp
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80212c96:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff80212c9d:	00 00 00 
ffffffff80212ca0:	4c 21 e0             	and    %r12,%rax
ffffffff80212ca3:	48 39 d0             	cmp    %rdx,%rax
ffffffff80212ca6:	0f 85 cf 1b 00 00    	jne    ffffffff8021487b <_RME_Svc_Handler+0x3b3b>
ffffffff80212cac:	4c 89 e0             	mov    %r12,%rax
ffffffff80212caf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212cb3:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80212cb7:	0f 85 b2 1b 00 00    	jne    ffffffff8021486f <_RME_Svc_Handler+0x3b2f>
ffffffff80212cbd:	48 8b 05 4c 33 01 00 	mov    0x1334c(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff80212cc4:	48 2b 45 20          	sub    0x20(%rbp),%rax
ffffffff80212cc8:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80212ccc:	0f 86 03 1b 00 00    	jbe    ffffffff802147d5 <_RME_Svc_Handler+0x3a95>
ffffffff80212cd2:	48 83 7d 08 00       	cmpq   $0x0,0x8(%rbp)
ffffffff80212cd7:	0f 85 d5 1a 00 00    	jne    ffffffff802147b2 <_RME_Svc_Handler+0x3a72>
    if(__RME_Pgt_Del_Check(Pgt_Del)<0)
ffffffff80212cdd:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212ce0:	e8 3b 81 00 00       	call   ffffffff8021ae20 <__RME_Pgt_Del_Check>
        Table_Size=RME_PGT_SIZE_TOP(RME_PGT_NMORD(Pgt_Del->Order));
ffffffff80212ce5:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
ffffffff80212ce9:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80212cee:	31 d2                	xor    %edx,%edx
    Object=RME_CAP_GETOBJ(Pgt_Del,rme_ptr_t);
ffffffff80212cf0:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
        Table_Size=RME_PGT_SIZE_NOM(RME_PGT_NMORD(Pgt_Del->Order));
ffffffff80212cf4:	d3 e0                	shl    %cl,%eax
ffffffff80212cf6:	48 63 f0             	movslq %eax,%rsi
ffffffff80212cf9:	4c 89 e0             	mov    %r12,%rax
ffffffff80212cfc:	48 c1 e6 03          	shl    $0x3,%rsi
ffffffff80212d00:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff80212d06:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Pgt_Del,Type_Stat);
ffffffff80212d09:	84 d2                	test   %dl,%dl
ffffffff80212d0b:	0f 84 ed 08 00 00    	je     ffffffff802135fe <_RME_Svc_Handler+0x28be>
    RME_ASSERT(_RME_Kot_Erase(Object,Table_Size)==0);
ffffffff80212d11:	e8 8a d2 ff ff       	call   ffffffff8020ffa0 <_RME_Kot_Erase>
    return 0;
ffffffff80212d16:	31 f6                	xor    %esi,%esi
ffffffff80212d18:	e9 c5 ee ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Retval=_RME_Sig_Crt(Cpt,
ffffffff80212d1d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80212d22:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212d26:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212d2a:	f6 c4 80             	test   $0x80,%ah
ffffffff80212d2d:	0f 85 35 09 00 00    	jne    ffffffff80213668 <_RME_Svc_Handler+0x2928>
ffffffff80212d33:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212d36:	0f 83 db 1b 00 00    	jae    ffffffff80214917 <_RME_Svc_Handler+0x3bd7>
ffffffff80212d3c:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212d43:	00 00 00 
ffffffff80212d46:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212d4a:	48 01 c8             	add    %rcx,%rax
ffffffff80212d4d:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212d54:	ff 00 00 
ffffffff80212d57:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212d5a:	48 21 d1             	and    %rdx,%rcx
ffffffff80212d5d:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212d60:	0f 84 32 18 00 00    	je     ffffffff80214598 <_RME_Svc_Handler+0x3858>
ffffffff80212d66:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212d6a:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212d6e:	0f 85 18 18 00 00    	jne    ffffffff8021458c <_RME_Svc_Handler+0x384c>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80212d74:	48 8b 48 10          	mov    0x10(%rax),%rcx
ffffffff80212d78:	48 f7 d1             	not    %rcx
ffffffff80212d7b:	83 e1 01             	and    $0x1,%ecx
ffffffff80212d7e:	0f 85 bb 15 00 00    	jne    ffffffff8021433f <_RME_Svc_Handler+0x35ff>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff80212d84:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80212d89:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212d8d:	0f 83 1d 18 00 00    	jae    ffffffff802145b0 <_RME_Svc_Handler+0x3870>
ffffffff80212d93:	48 be 00 00 00 00 01 	movabs $0x100000000,%rsi
ffffffff80212d9a:	00 00 00 
ffffffff80212d9d:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212da1:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff80212da5:	48 89 c8             	mov    %rcx,%rax
ffffffff80212da8:	f0 48 0f b1 32       	lock cmpxchg %rsi,(%rdx)
ffffffff80212dad:	40 0f 94 c6          	sete   %sil
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80212db1:	40 84 f6             	test   %sil,%sil
ffffffff80212db4:	0f 84 72 f9 ff ff    	je     ffffffff8021272c <_RME_Svc_Handler+0x19ec>
ffffffff80212dba:	48 8b 05 4f 32 01 00 	mov    0x1324f(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
    return 0;
ffffffff80212dc1:	31 f6                	xor    %esi,%esi
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80212dc3:	48 89 42 20          	mov    %rax,0x20(%rdx)
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80212dc7:	48 b8 00 00 00 00 00 	movabs $0x8000000000000,%rax
ffffffff80212dce:	00 08 00 
    Sig_Crt->Head.Root_Ref=0U;
ffffffff80212dd1:	48 c7 42 08 00 00 00 	movq   $0x0,0x8(%rdx)
ffffffff80212dd8:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80212dd9:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff80212de0:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff80212de1:	48 c7 42 10 3f 00 00 	movq   $0x3f,0x10(%rdx)
ffffffff80212de8:	00 
    Sig_Crt->Sig_Num=0U;
ffffffff80212de9:	48 c7 42 28 00 00 00 	movq   $0x0,0x28(%rdx)
ffffffff80212df0:	00 
    Sig_Crt->Thd=0U;
ffffffff80212df1:	48 c7 42 30 00 00 00 	movq   $0x0,0x30(%rdx)
ffffffff80212df8:	00 
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80212df9:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff80212dfc:	e9 e1 ed ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                                      (rme_cid_t)Param[0]);                 /* rme_cid_t Cap_Thd */
ffffffff80212e01:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff80212e06:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212e0a:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80212e0e:	f6 c4 80             	test   $0x80,%ah
ffffffff80212e11:	0f 85 21 0e 00 00    	jne    ffffffff80213c38 <_RME_Svc_Handler+0x2ef8>
ffffffff80212e17:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212e1a:	0f 83 f5 1c 00 00    	jae    ffffffff80214b15 <_RME_Svc_Handler+0x3dd5>
ffffffff80212e20:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212e27:	00 00 00 
ffffffff80212e2a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212e2e:	48 01 c8             	add    %rcx,%rax
ffffffff80212e31:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212e38:	ff 00 00 
ffffffff80212e3b:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212e3e:	48 21 d1             	and    %rdx,%rcx
ffffffff80212e41:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212e44:	0f 84 bf 1c 00 00    	je     ffffffff80214b09 <_RME_Svc_Handler+0x3dc9>
ffffffff80212e4a:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212e4e:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80212e52:	0f 85 a5 1c 00 00    	jne    ffffffff80214afd <_RME_Svc_Handler+0x3dbd>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff80212e58:	f6 40 10 20          	testb  $0x20,0x10(%rax)
ffffffff80212e5c:	0f 84 56 15 00 00    	je     ffffffff802143b8 <_RME_Svc_Handler+0x3678>
    Scheduler=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff80212e62:	48 8b 68 18          	mov    0x18(%rax),%rbp
    if(Scheduler->Sched.Local!=RME_CPU_LOCAL())
ffffffff80212e66:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff80212e6a:	e8 d0 89 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80212e6f:	49 39 c4             	cmp    %rax,%r12
ffffffff80212e72:	0f 85 e2 1e 00 00    	jne    ffffffff80214d5a <_RME_Svc_Handler+0x401a>
    if(Scheduler->Sched.Event.Next==&(Scheduler->Sched.Event))
ffffffff80212e78:	48 8b 45 78          	mov    0x78(%rbp),%rax
ffffffff80212e7c:	48 83 c5 78          	add    $0x78,%rbp
ffffffff80212e80:	48 39 e8             	cmp    %rbp,%rax
ffffffff80212e83:	0f 84 a4 1e 00 00    	je     ffffffff80214d2d <_RME_Svc_Handler+0x3fed>
    _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80212e89:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80212e8d:	48 8b 08             	mov    (%rax),%rcx
    Head->Next=Head;
ffffffff80212e90:	66 48 0f 6e c0       	movq   %rax,%xmm0
ffffffff80212e95:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
    Next->Prev=Prev;
ffffffff80212e99:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    Prev->Next=Next;
ffffffff80212e9d:	48 89 0a             	mov    %rcx,(%rdx)
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80212ea0:	48 8b 50 28          	mov    0x28(%rax),%rdx
    Head->Next=Head;
ffffffff80212ea4:	0f 11 00             	movups %xmm0,(%rax)
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80212ea7:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212eab:	0f 84 ad 12 00 00    	je     ffffffff8021415e <_RME_Svc_Handler+0x341e>
    else if(Thread->Sched.State==RME_THD_TIMEOUT)
ffffffff80212eb1:	31 f6                	xor    %esi,%esi
ffffffff80212eb3:	48 83 fa 02          	cmp    $0x2,%rdx
ffffffff80212eb7:	40 0f 94 c6          	sete   %sil
ffffffff80212ebb:	48 c1 e6 3d          	shl    $0x3d,%rsi
    return (rme_ret_t)(Thread->Sched.TID|Flag);
ffffffff80212ebf:	48 0b 70 10          	or     0x10(%rax),%rsi
ffffffff80212ec3:	e9 1a ed ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Retval=_RME_Sig_Del(Cpt,
ffffffff80212ec8:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80212ecd:	49 8b 4f 18          	mov    0x18(%r15),%rcx
ffffffff80212ed1:	49 8b 77 28          	mov    0x28(%r15),%rsi
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80212ed5:	f6 c4 80             	test   $0x80,%ah
ffffffff80212ed8:	0f 85 12 0b 00 00    	jne    ffffffff802139f0 <_RME_Svc_Handler+0x2cb0>
ffffffff80212ede:	48 39 f0             	cmp    %rsi,%rax
ffffffff80212ee1:	0f 83 6e 1b 00 00    	jae    ffffffff80214a55 <_RME_Svc_Handler+0x3d15>
ffffffff80212ee7:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212eee:	00 00 00 
ffffffff80212ef1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212ef5:	48 01 c8             	add    %rcx,%rax
ffffffff80212ef8:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212eff:	ff 00 00 
ffffffff80212f02:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212f05:	48 21 d1             	and    %rdx,%rcx
ffffffff80212f08:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212f0b:	0f 84 38 1b 00 00    	je     ffffffff80214a49 <_RME_Svc_Handler+0x3d09>
ffffffff80212f11:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80212f15:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80212f19:	0f 85 1e 1b 00 00    	jne    ffffffff80214a3d <_RME_Svc_Handler+0x3cfd>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80212f1f:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80212f23:	0f 84 6b 14 00 00    	je     ffffffff80214394 <_RME_Svc_Handler+0x3654>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff80212f29:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff80212f2e:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff80212f32:	0f 83 3e 18 00 00    	jae    ffffffff80214776 <_RME_Svc_Handler+0x3a36>
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80212f38:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212f3f:	ff 00 00 
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff80212f42:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80212f46:	48 03 50 18          	add    0x18(%rax),%rdx
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80212f4a:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212f51:	00 00 00 
ffffffff80212f54:	48 8b 02             	mov    (%rdx),%rax
ffffffff80212f57:	48 21 c1             	and    %rax,%rcx
ffffffff80212f5a:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80212f5d:	0f 85 2b 18 00 00    	jne    ffffffff8021478e <_RME_Svc_Handler+0x3a4e>
ffffffff80212f63:	48 89 c1             	mov    %rax,%rcx
ffffffff80212f66:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80212f6a:	48 83 f9 08          	cmp    $0x8,%rcx
ffffffff80212f6e:	0f 85 0e 18 00 00    	jne    ffffffff80214782 <_RME_Svc_Handler+0x3a42>
ffffffff80212f74:	48 8b 72 20          	mov    0x20(%rdx),%rsi
ffffffff80212f78:	48 8b 0d 91 30 01 00 	mov    0x13091(%rip),%rcx        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff80212f7f:	48 29 f1             	sub    %rsi,%rcx
ffffffff80212f82:	48 83 f9 0a          	cmp    $0xa,%rcx
ffffffff80212f86:	0f 86 a5 1a 00 00    	jbe    ffffffff80214a31 <_RME_Svc_Handler+0x3cf1>
ffffffff80212f8c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80212f90:	48 85 c9             	test   %rcx,%rcx
ffffffff80212f93:	0f 85 7a 1a 00 00    	jne    ffffffff80214a13 <_RME_Svc_Handler+0x3cd3>
    if(Sig_Del->Thd!=(void*)0U)
ffffffff80212f99:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
ffffffff80212f9d:	48 85 c9             	test   %rcx,%rcx
ffffffff80212fa0:	0f 85 70 1d 00 00    	jne    ffffffff80214d16 <_RME_Svc_Handler+0x3fd6>
ffffffff80212fa6:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80212fab:	0f 94 c1             	sete   %cl
    RME_CAP_DELETE(Sig_Del,Type_Stat);
ffffffff80212fae:	80 f9 01             	cmp    $0x1,%cl
ffffffff80212fb1:	48 19 f6             	sbb    %rsi,%rsi
ffffffff80212fb4:	e9 29 ec ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80212fb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff80212fc0:	4c 89 e0             	mov    %r12,%rax
ffffffff80212fc3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212fc7:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212fca:	0f 83 70 01 00 00    	jae    ffffffff80213140 <_RME_Svc_Handler+0x2400>
ffffffff80212fd0:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80212fd7:	ff 00 00 
ffffffff80212fda:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212fde:	48 01 f0             	add    %rsi,%rax
ffffffff80212fe1:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff80212fe8:	00 00 00 
ffffffff80212feb:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212fee:	48 89 d7             	mov    %rdx,%rdi
ffffffff80212ff1:	48 21 cf             	and    %rcx,%rdi
ffffffff80212ff4:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80212ff7:	0f 84 93 01 00 00    	je     ffffffff80213190 <_RME_Svc_Handler+0x2450>
ffffffff80212ffd:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213001:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213005:	0f 85 bc ee ff ff    	jne    ffffffff80211ec7 <_RME_Svc_Handler+0x1187>
ffffffff8021300b:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021300f:	41 81 e4 ff 7f 00 00 	and    $0x7fff,%r12d
ffffffff80213016:	49 39 d4             	cmp    %rdx,%r12
ffffffff80213019:	0f 83 21 01 00 00    	jae    ffffffff80213140 <_RME_Svc_Handler+0x2400>
ffffffff8021301f:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff80213023:	4c 03 60 18          	add    0x18(%rax),%r12
ffffffff80213027:	48 89 c8             	mov    %rcx,%rax
ffffffff8021302a:	49 8b 14 24          	mov    (%r12),%rdx
ffffffff8021302e:	48 21 d0             	and    %rdx,%rax
ffffffff80213031:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213034:	0f 84 56 01 00 00    	je     ffffffff80213190 <_RME_Svc_Handler+0x2450>
ffffffff8021303a:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021303e:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80213042:	0f 84 08 e0 ff ff    	je     ffffffff80211050 <_RME_Svc_Handler+0x310>
ffffffff80213048:	e9 7a ee ff ff       	jmp    ffffffff80211ec7 <_RME_Svc_Handler+0x1187>
ffffffff8021304d:	0f 1f 00             	nopl   (%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80213050:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213053:	0f 83 e6 0e 00 00    	jae    ffffffff80213f3f <_RME_Svc_Handler+0x31ff>
ffffffff80213059:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff80213060:	ff 00 00 
ffffffff80213063:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213067:	49 bb 00 00 00 00 02 	movabs $0x200000000,%r11
ffffffff8021306e:	00 00 00 
ffffffff80213071:	48 01 d0             	add    %rdx,%rax
ffffffff80213074:	48 8b 30             	mov    (%rax),%rsi
ffffffff80213077:	48 21 f7             	and    %rsi,%rdi
ffffffff8021307a:	4c 39 df             	cmp    %r11,%rdi
ffffffff8021307d:	0f 84 8f ee ff ff    	je     ffffffff80211f12 <_RME_Svc_Handler+0x11d2>
ffffffff80213083:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213087:	48 83 fe 06          	cmp    $0x6,%rsi
ffffffff8021308b:	0f 84 97 e2 ff ff    	je     ffffffff80211328 <_RME_Svc_Handler+0x5e8>
ffffffff80213091:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213098:	e9 45 eb ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021309d:	0f 1f 00             	nopl   (%rax)
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802130a0:	4c 89 ea             	mov    %r13,%rdx
ffffffff802130a3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802130a7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802130aa:	0f 83 e6 04 00 00    	jae    ffffffff80213596 <_RME_Svc_Handler+0x2856>
ffffffff802130b0:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802130b7:	ff 00 00 
ffffffff802130ba:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802130be:	49 03 57 18          	add    0x18(%r15),%rdx
ffffffff802130c2:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802130c9:	00 00 00 
ffffffff802130cc:	48 8b 02             	mov    (%rdx),%rax
ffffffff802130cf:	48 89 c7             	mov    %rax,%rdi
ffffffff802130d2:	48 21 cf             	and    %rcx,%rdi
ffffffff802130d5:	48 39 f7             	cmp    %rsi,%rdi
ffffffff802130d8:	74 3a                	je     ffffffff80213114 <_RME_Svc_Handler+0x23d4>
ffffffff802130da:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802130de:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802130e2:	0f 85 f3 04 00 00    	jne    ffffffff802135db <_RME_Svc_Handler+0x289b>
ffffffff802130e8:	4c 89 e8             	mov    %r13,%rax
ffffffff802130eb:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff802130ef:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802130f4:	48 39 f8             	cmp    %rdi,%rax
ffffffff802130f7:	0f 83 99 04 00 00    	jae    ffffffff80213596 <_RME_Svc_Handler+0x2856>
ffffffff802130fd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213101:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213105:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213108:	48 21 d1             	and    %rdx,%rcx
ffffffff8021310b:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021310e:	0f 85 a4 ec ff ff    	jne    ffffffff80211db8 <_RME_Svc_Handler+0x1078>
ffffffff80213114:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021311b:	e9 c2 ea ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        return Thd->Sched.Prc->Pgt;
ffffffff80213120:	49 8b 45 58          	mov    0x58(%r13),%rax
ffffffff80213124:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff80213128:	e9 05 de ff ff       	jmp    ffffffff80210f32 <_RME_Svc_Handler+0x1f2>
ffffffff8021312d:	0f 1f 00             	nopl   (%rax)
ffffffff80213130:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff80213134:	48 8b 48 30          	mov    0x30(%rax),%rcx
ffffffff80213138:	e9 cd dd ff ff       	jmp    ffffffff80210f0a <_RME_Svc_Handler+0x1ca>
ffffffff8021313d:	0f 1f 00             	nopl   (%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80213140:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213147:	e9 96 ea ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021314c:	0f 1f 40 00          	nopl   0x0(%rax)
        if((Option==RME_RCV_BS)||(Option==RME_RCV_BM))
ffffffff80213150:	49 83 fc 01          	cmp    $0x1,%r12
ffffffff80213154:	0f 87 d1 e8 ff ff    	ja     ffffffff80211a2b <_RME_Svc_Handler+0xceb>
ffffffff8021315a:	f0 48 0f b1 7d 30    	lock cmpxchg %rdi,0x30(%rbp)
ffffffff80213160:	0f 94 c0             	sete   %al
            if(RME_COMP_SWAP((rme_ptr_t*)&(Sig_Root->Thd),
ffffffff80213163:	84 c0                	test   %al,%al
ffffffff80213165:	0f 84 c8 02 00 00    	je     ffffffff80213433 <_RME_Svc_Handler+0x26f3>
            Thd_Cur->Sched.Signal=Sig_Root;
ffffffff8021316b:	48 89 6f 50          	mov    %rbp,0x50(%rdi)
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
ffffffff8021316f:	48 c7 47 38 01 00 00 	movq   $0x1,0x38(%rdi)
ffffffff80213176:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80213177:	e8 e4 95 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            _RME_Kern_High(Reg,Local);
ffffffff8021317c:	4c 89 c6             	mov    %r8,%rsi
ffffffff8021317f:	48 89 df             	mov    %rbx,%rdi
ffffffff80213182:	e8 b9 da ff ff       	call   ffffffff80210c40 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213187:	e9 5c dc ff ff       	jmp    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
ffffffff8021318c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80213190:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80213197:	e9 46 ea ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021319c:	0f 1f 40 00          	nopl   0x0(%rax)
    switch(Option)
ffffffff802131a0:	49 83 fc 03          	cmp    $0x3,%r12
ffffffff802131a4:	0f 85 95 02 00 00    	jne    ffffffff8021343f <_RME_Svc_Handler+0x26ff>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NM);
ffffffff802131aa:	f6 45 10 10          	testb  $0x10,0x10(%rbp)
ffffffff802131ae:	0f 85 14 e7 ff ff    	jne    ffffffff802118c8 <_RME_Svc_Handler+0xb88>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff802131b4:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802131bb:	e9 22 ea ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        _RME_Run_Del(Thread);
ffffffff802131c0:	48 89 ef             	mov    %rbp,%rdi
ffffffff802131c3:	e8 98 95 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff802131c8:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff802131cf:	00 
ffffffff802131d0:	e9 16 e5 ff ff       	jmp    ffffffff802116eb <_RME_Svc_Handler+0x9ab>
ffffffff802131d5:	0f 1f 00             	nopl   (%rax)
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff802131d8:	49 8b 44 24 20       	mov    0x20(%r12),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff802131dd:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff802131e1:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802131e5:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff802131e8:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff802131ec:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff802131f1:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802131f5:	49 8b 44 04 08       	mov    0x8(%r12,%rax,1),%rax
        Local->Thd_Cur=_RME_Run_High(Local);
ffffffff802131fa:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    Prio=Thd->Sched.Prio;
ffffffff802131ff:	48 8b 48 40          	mov    0x40(%rax),%rcx
    Local=Thd->Sched.Local;
ffffffff80213203:	48 8b 50 28          	mov    0x28(%rax),%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80213207:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021320a:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff8021320e:	4c 8d 04 3a          	lea    (%rdx,%rdi,1),%r8
ffffffff80213212:	48 8d 7c 3a 28       	lea    0x28(%rdx,%rdi,1),%rdi
ffffffff80213217:	49 8b 70 30          	mov    0x30(%r8),%rsi
ffffffff8021321b:	66 48 0f 6e c7       	movq   %rdi,%xmm0
    Next->Prev=New;
ffffffff80213220:	49 89 40 30          	mov    %rax,0x30(%r8)
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff80213224:	48 89 df             	mov    %rbx,%rdi
    New->Next=Next;
ffffffff80213227:	66 48 0f 6e de       	movq   %rsi,%xmm3
ffffffff8021322c:	66 0f 6c c3          	punpcklqdq %xmm3,%xmm0
ffffffff80213230:	0f 11 00             	movups %xmm0,(%rax)
    Prev->Next=New;
ffffffff80213233:	48 89 06             	mov    %rax,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80213236:	48 89 ce             	mov    %rcx,%rsi
ffffffff80213239:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021323e:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff80213242:	48 d3 e0             	shl    %cl,%rax
ffffffff80213245:	48 09 44 f2 20       	or     %rax,0x20(%rdx,%rsi,8)
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff8021324a:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
ffffffff8021324f:	48 89 ee             	mov    %rbp,%rsi
ffffffff80213252:	e8 29 9e ff ff       	call   ffffffff8020d080 <_RME_Run_Swt.isra.0>
ffffffff80213257:	e9 a2 e4 ff ff       	jmp    ffffffff802116fe <_RME_Svc_Handler+0x9be>
ffffffff8021325c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80213260:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213267:	e9 76 e9 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        if(Time>=RME_THD_INF_TIME)
ffffffff8021326c:	4c 39 ea             	cmp    %r13,%rdx
ffffffff8021326f:	0f 83 d6 01 00 00    	jae    ffffffff8021344b <_RME_Svc_Handler+0x270b>
            if(Time==RME_THD_INIT_TIME)
ffffffff80213275:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff8021327c:	ff ff 7f 
                if(Thd_Src->Sched.Slice!=RME_THD_INIT_TIME)
ffffffff8021327f:	49 39 cd             	cmp    %rcx,%r13
ffffffff80213282:	75 09                	jne    ffffffff8021328d <_RME_Svc_Handler+0x254d>
ffffffff80213284:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213287:	0f 85 83 0c 00 00    	jne    ffffffff80213f10 <_RME_Svc_Handler+0x31d0>
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff8021328d:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80213294:	ff ff 7f 
ffffffff80213297:	48 8b 75 30          	mov    0x30(%rbp),%rsi
ffffffff8021329b:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021329e:	0f 82 52 de ff ff    	jb     ffffffff802110f6 <_RME_Svc_Handler+0x3b6>
                Thd_Dst->Sched.Slice=RME_THD_INF_TIME;
ffffffff802132a4:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
ffffffff802132ab:	ff ff 7f 
ffffffff802132ae:	48 89 45 30          	mov    %rax,0x30(%rbp)
    if(Thd_Src->Sched.Slice==0U)
ffffffff802132b2:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff802132b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff802132bd:	00 00 00 
ffffffff802132c0:	48 85 c0             	test   %rax,%rax
ffffffff802132c3:	0f 85 29 de ff ff    	jne    ffffffff802110f2 <_RME_Svc_Handler+0x3b2>
ffffffff802132c9:	e9 19 de ff ff       	jmp    ffffffff802110e7 <_RME_Svc_Handler+0x3a7>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff802132ce:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802132d2:	48 39 c8             	cmp    %rcx,%rax
ffffffff802132d5:	0f 83 64 0c 00 00    	jae    ffffffff80213f3f <_RME_Svc_Handler+0x31ff>
ffffffff802132db:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802132e2:	ff 00 00 
ffffffff802132e5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802132e9:	48 be 00 00 00 00 02 	movabs $0x200000000,%rsi
ffffffff802132f0:	00 00 00 
ffffffff802132f3:	48 01 d0             	add    %rdx,%rax
ffffffff802132f6:	48 8b 10             	mov    (%rax),%rdx
ffffffff802132f9:	48 89 d7             	mov    %rdx,%rdi
ffffffff802132fc:	48 21 cf             	and    %rcx,%rdi
ffffffff802132ff:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80213302:	0f 84 0a ec ff ff    	je     ffffffff80211f12 <_RME_Svc_Handler+0x11d2>
ffffffff80213308:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021330c:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213310:	0f 85 7b fd ff ff    	jne    ffffffff80213091 <_RME_Svc_Handler+0x2351>
ffffffff80213316:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff8021331b:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff8021331f:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff80213325:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80213328:	0f 83 11 0c 00 00    	jae    ffffffff80213f3f <_RME_Svc_Handler+0x31ff>
ffffffff8021332e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213332:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff80213336:	48 8b 02             	mov    (%rdx),%rax
ffffffff80213339:	48 21 c1             	and    %rax,%rcx
ffffffff8021333c:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021333f:	0f 85 56 e0 ff ff    	jne    ffffffff8021139b <_RME_Svc_Handler+0x65b>
ffffffff80213345:	e9 c8 eb ff ff       	jmp    ffffffff80211f12 <_RME_Svc_Handler+0x11d2>
ffffffff8021334a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213350:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213357:	e9 86 e8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8021335c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213363:	e9 7a e8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff80213368:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021336f:	e9 7c e4 ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xab0>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213374:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021337b:	e9 62 e8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80213380:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80213387:	e9 56 e8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021338c:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213393:	e9 4a e8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        return RME_ERR_SIV_ACT;
ffffffff80213398:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff8021339f:	e9 3e e8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff802133a4:	f6 45 10 02          	testb  $0x2,0x10(%rbp)
ffffffff802133a8:	0f 85 1a e5 ff ff    	jne    ffffffff802118c8 <_RME_Svc_Handler+0xb88>
ffffffff802133ae:	e9 01 fe ff ff       	jmp    ffffffff802131b4 <_RME_Svc_Handler+0x2474>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NS);
ffffffff802133b3:	f6 45 10 08          	testb  $0x8,0x10(%rbp)
ffffffff802133b7:	0f 85 0b e5 ff ff    	jne    ffffffff802118c8 <_RME_Svc_Handler+0xb88>
ffffffff802133bd:	e9 f2 fd ff ff       	jmp    ffffffff802131b4 <_RME_Svc_Handler+0x2474>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802133c2:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802133c9:	e9 14 e8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff802133ce:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802133d5:	e9 16 e4 ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xab0>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802133da:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802133e1:	e9 fc e7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802133e6:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802133ed:	e9 f0 e7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802133f2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802133f9:	e9 e4 e7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Thd_Cur->Sched.Slice=0U;
ffffffff802133fe:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff80213405:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80213406:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213409:	e8 52 93 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff8021340e:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff80213415:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff80213416:	e8 45 a7 ff ff       	call   ffffffff8020db60 <_RME_Run_Notif>
ffffffff8021341b:	e9 6d da ff ff       	jmp    ffffffff80210e8d <_RME_Svc_Handler+0x14d>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80213420:	31 d2                	xor    %edx,%edx
ffffffff80213422:	f0 48 0f b1 55 28    	lock cmpxchg %rdx,0x28(%rbp)
ffffffff80213428:	0f 94 c2             	sete   %dl
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff8021342b:	84 d2                	test   %dl,%dl
ffffffff8021342d:	0f 85 bd e3 ff ff    	jne    ffffffff802117f0 <_RME_Svc_Handler+0xab0>
                return RME_ERR_SIV_CONFLICT;
ffffffff80213433:	48 c7 c6 cf fe ff ff 	mov    $0xfffffffffffffecf,%rsi
ffffffff8021343a:	e9 a3 e7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            return RME_ERR_SIV_ACT;
ffffffff8021343f:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff80213446:	e9 97 e7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time);
ffffffff8021344b:	31 c0                	xor    %eax,%eax
ffffffff8021344d:	4c 03 6d 30          	add    0x30(%rbp),%r13
ffffffff80213451:	0f 92 c0             	setb   %al
ffffffff80213454:	4c 39 ea             	cmp    %r13,%rdx
ffffffff80213457:	0f 82 f3 01 00 00    	jb     ffffffff80213650 <_RME_Svc_Handler+0x2910>
ffffffff8021345d:	48 85 c0             	test   %rax,%rax
ffffffff80213460:	0f 85 ea 01 00 00    	jne    ffffffff80213650 <_RME_Svc_Handler+0x2910>
            Thd_Dst->Sched.Slice+=Time;
ffffffff80213466:	4c 89 6d 30          	mov    %r13,0x30(%rbp)
    if(Thd_Src->Sched.Slice==0U)
ffffffff8021346a:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff8021346e:	e9 4d fe ff ff       	jmp    ffffffff802132c0 <_RME_Svc_Handler+0x2580>
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80213473:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
            if(Thd_Src->Sched.Slice>Time)
ffffffff80213477:	49 39 c5             	cmp    %rax,%r13
ffffffff8021347a:	4c 0f 47 e8          	cmova  %rax,%r13
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff8021347e:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80213481:	72 1e                	jb     ffffffff802134a1 <_RME_Svc_Handler+0x2761>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80213483:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff8021348a:	ff ff 7f 
ffffffff8021348d:	4c 01 e9             	add    %r13,%rcx
ffffffff80213490:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213493:	0f 82 b7 01 00 00    	jb     ffffffff80213650 <_RME_Svc_Handler+0x2910>
            Thd_Dst->Sched.Slice+=Time_Xfer;
ffffffff80213499:	48 89 4d 30          	mov    %rcx,0x30(%rbp)
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff8021349d:	48 8b 47 30          	mov    0x30(%rdi),%rax
ffffffff802134a1:	4c 29 e8             	sub    %r13,%rax
ffffffff802134a4:	48 89 47 30          	mov    %rax,0x30(%rdi)
ffffffff802134a8:	e9 13 fe ff ff       	jmp    ffffffff802132c0 <_RME_Svc_Handler+0x2580>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff802134ad:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff802134b4:	e9 29 e7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        __RME_Svc_Retval_Set(&(Thread->Ctx.Reg->Reg),RME_ERR_SIV_FREE);
ffffffff802134b9:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff802134c0:	48 c7 c6 ce fe ff ff 	mov    $0xfffffffffffffece,%rsi
ffffffff802134c7:	e8 b4 7d 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
        Thread->Sched.Signal->Thd=RME_NULL;
ffffffff802134cc:	48 8b 45 50          	mov    0x50(%rbp),%rax
ffffffff802134d0:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff802134d7:	00 
        Thread->Sched.Signal=RME_NULL;
ffffffff802134d8:	48 c7 45 50 00 00 00 	movq   $0x0,0x50(%rbp)
ffffffff802134df:	00 
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff802134e0:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff802134e7:	00 
ffffffff802134e8:	e9 fe e1 ff ff       	jmp    ffffffff802116eb <_RME_Svc_Handler+0x9ab>
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff802134ed:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802134f4:	e9 e9 e6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        __RME_Svc_Retval_Set(Reg,0);
ffffffff802134f9:	31 f6                	xor    %esi,%esi
ffffffff802134fb:	48 89 df             	mov    %rbx,%rdi
ffffffff802134fe:	48 89 04 24          	mov    %rax,(%rsp)
ffffffff80213502:	e8 79 7d 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
        __RME_Svc_Retval_Set(&(Thd_Rcv->Ctx.Reg->Reg),1);
ffffffff80213507:	49 8b bc 24 90 00 00 	mov    0x90(%r12),%rdi
ffffffff8021350e:	00 
ffffffff8021350f:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213514:	e8 67 7d 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
        if(Thd_Rcv->Sched.Slice!=0U)
ffffffff80213519:	49 83 7c 24 30 00    	cmpq   $0x0,0x30(%r12)
ffffffff8021351f:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80213523:	0f 84 09 01 00 00    	je     ffffffff80213632 <_RME_Svc_Handler+0x28f2>
    Prio=Thd->Sched.Prio;
ffffffff80213529:	49 8b 4c 24 40       	mov    0x40(%r12),%rcx
    Local=Thd->Sched.Local;
ffffffff8021352e:	49 8b 54 24 28       	mov    0x28(%r12),%rdx
            Thd_Rcv->Sched.State=RME_THD_READY;
ffffffff80213533:	49 c7 44 24 38 00 00 	movq   $0x0,0x38(%r12)
ffffffff8021353a:	00 00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff8021353c:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021353f:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff80213543:	4c 8d 04 3a          	lea    (%rdx,%rdi,1),%r8
ffffffff80213547:	48 8d 7c 3a 28       	lea    0x28(%rdx,%rdi,1),%rdi
ffffffff8021354c:	49 8b 70 30          	mov    0x30(%r8),%rsi
ffffffff80213550:	66 48 0f 6e c7       	movq   %rdi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80213555:	48 89 cf             	mov    %rcx,%rdi
    Next->Prev=New;
ffffffff80213558:	4d 89 60 30          	mov    %r12,0x30(%r8)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021355c:	48 c1 ef 06          	shr    $0x6,%rdi
    New->Next=Next;
ffffffff80213560:	66 48 0f 6e f6       	movq   %rsi,%xmm6
ffffffff80213565:	66 0f 6c c6          	punpcklqdq %xmm6,%xmm0
ffffffff80213569:	41 0f 11 04 24       	movups %xmm0,(%r12)
    Prev->Next=New;
ffffffff8021356e:	4c 89 26             	mov    %r12,(%rsi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80213571:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213576:	48 d3 e6             	shl    %cl,%rsi
ffffffff80213579:	48 09 74 fa 20       	or     %rsi,0x20(%rdx,%rdi,8)
        _RME_Kern_High(Reg,Local);
ffffffff8021357e:	48 89 c6             	mov    %rax,%rsi
ffffffff80213581:	48 89 df             	mov    %rbx,%rdi
ffffffff80213584:	e8 b7 d6 ff ff       	call   ffffffff80210c40 <_RME_Kern_High>
        Sig_Root->Thd=RME_NULL;
ffffffff80213589:	48 c7 45 30 00 00 00 	movq   $0x0,0x30(%rbp)
ffffffff80213590:	00 
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213591:	e9 52 d8 ff ff       	jmp    ffffffff80210de8 <_RME_Svc_Handler+0xa8>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213596:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021359d:	e9 40 e6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff802135a2:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802135a9:	e9 34 e6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff802135ae:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802135b5:	e9 28 e6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff802135ba:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802135c1:	e9 1c e6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff802135c6:	49 c7 46 38 02 00 00 	movq   $0x2,0x38(%r14)
ffffffff802135cd:	00 
            _RME_Run_Notif(Thread);
ffffffff802135ce:	4c 89 f7             	mov    %r14,%rdi
ffffffff802135d1:	e8 8a a5 ff ff       	call   ffffffff8020db60 <_RME_Run_Notif>
ffffffff802135d6:	e9 d5 df ff ff       	jmp    ffffffff802115b0 <_RME_Svc_Handler+0x870>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802135db:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802135e2:	e9 fb e5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            _RME_Run_Del(Thd_Src);
ffffffff802135e7:	e8 74 91 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
ffffffff802135ec:	48 c7 47 38 02 00 00 	movq   $0x2,0x38(%rdi)
ffffffff802135f3:	00 
            _RME_Run_Notif(Thd_Src);
ffffffff802135f4:	e8 67 a5 ff ff       	call   ffffffff8020db60 <_RME_Run_Notif>
ffffffff802135f9:	e9 f4 da ff ff       	jmp    ffffffff802110f2 <_RME_Svc_Handler+0x3b2>
            Retval=RME_ERR_CPT_NULL;
ffffffff802135fe:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80213605:	e9 d8 e5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Time_Xfer=Thd_Src->Sched.Slice;
ffffffff8021360a:	49 89 c5             	mov    %rax,%r13
ffffffff8021360d:	e9 71 fe ff ff       	jmp    ffffffff80213483 <_RME_Svc_Handler+0x2743>
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff80213612:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213619:	e9 c4 e5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
                Thd_New=Thd_High;
ffffffff8021361e:	49 89 c5             	mov    %rax,%r13
ffffffff80213621:	e9 88 d8 ff ff       	jmp    ffffffff80210eae <_RME_Svc_Handler+0x16e>
        return RME_ERR_PTH_INVSTATE;
ffffffff80213626:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021362d:	e9 b0 e5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
ffffffff80213632:	49 c7 44 24 38 02 00 	movq   $0x2,0x38(%r12)
ffffffff80213639:	00 00 
            _RME_Run_Notif(Thd_Rcv);
ffffffff8021363b:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021363e:	48 89 04 24          	mov    %rax,(%rsp)
ffffffff80213642:	e8 19 a5 ff ff       	call   ffffffff8020db60 <_RME_Run_Notif>
ffffffff80213647:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff8021364b:	e9 2e ff ff ff       	jmp    ffffffff8021357e <_RME_Svc_Handler+0x283e>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80213650:	48 c7 c6 30 ff ff ff 	mov    $0xffffffffffffff30,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213657:	e9 86 e5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        return RME_ERR_CPT_FLAG;
ffffffff8021365c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213663:	e9 88 e1 ff ff       	jmp    ffffffff802117f0 <_RME_Svc_Handler+0xab0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213668:	48 89 c2             	mov    %rax,%rdx
ffffffff8021366b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021366f:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213672:	0f 83 5f 13 00 00    	jae    ffffffff802149d7 <_RME_Svc_Handler+0x3c97>
ffffffff80213678:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021367f:	00 00 00 
ffffffff80213682:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213686:	48 01 ca             	add    %rcx,%rdx
ffffffff80213689:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213690:	ff 00 00 
ffffffff80213693:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213696:	49 89 f0             	mov    %rsi,%r8
ffffffff80213699:	49 21 c8             	and    %rcx,%r8
ffffffff8021369c:	49 39 f8             	cmp    %rdi,%r8
ffffffff8021369f:	0f 84 26 13 00 00    	je     ffffffff802149cb <_RME_Svc_Handler+0x3c8b>
ffffffff802136a5:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802136a9:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802136ad:	0f 85 0c 13 00 00    	jne    ffffffff802149bf <_RME_Svc_Handler+0x3c7f>
ffffffff802136b3:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff802136b7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802136bc:	48 39 f0             	cmp    %rsi,%rax
ffffffff802136bf:	0f 83 ee 12 00 00    	jae    ffffffff802149b3 <_RME_Svc_Handler+0x3c73>
ffffffff802136c5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802136c9:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802136cd:	48 8b 10             	mov    (%rax),%rdx
ffffffff802136d0:	48 21 d1             	and    %rdx,%rcx
ffffffff802136d3:	48 39 f9             	cmp    %rdi,%rcx
ffffffff802136d6:	0f 84 cb 12 00 00    	je     ffffffff802149a7 <_RME_Svc_Handler+0x3c67>
ffffffff802136dc:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802136e0:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802136e4:	0f 84 8a f6 ff ff    	je     ffffffff80212d74 <_RME_Svc_Handler+0x2034>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802136ea:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802136f1:	e9 ec e4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802136f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff802136fd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff80213700:	48 89 c2             	mov    %rax,%rdx
ffffffff80213703:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213707:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021370a:	0f 83 e1 13 00 00    	jae    ffffffff80214af1 <_RME_Svc_Handler+0x3db1>
ffffffff80213710:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80213717:	ff 00 00 
ffffffff8021371a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021371e:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80213725:	00 00 00 
ffffffff80213728:	48 01 ca             	add    %rcx,%rdx
ffffffff8021372b:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff8021372e:	49 89 fa             	mov    %rdi,%r10
ffffffff80213731:	4d 21 c2             	and    %r8,%r10
ffffffff80213734:	4d 39 ca             	cmp    %r9,%r10
ffffffff80213737:	0f 84 a8 13 00 00    	je     ffffffff80214ae5 <_RME_Svc_Handler+0x3da5>
ffffffff8021373d:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213741:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213745:	0f 85 8e 13 00 00    	jne    ffffffff80214ad9 <_RME_Svc_Handler+0x3d99>
ffffffff8021374b:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff8021374f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213754:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213757:	0f 83 70 13 00 00    	jae    ffffffff80214acd <_RME_Svc_Handler+0x3d8d>
ffffffff8021375d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213761:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213765:	4c 89 c2             	mov    %r8,%rdx
ffffffff80213768:	48 89 c5             	mov    %rax,%rbp
ffffffff8021376b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021376e:	48 21 c2             	and    %rax,%rdx
ffffffff80213771:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80213774:	0f 84 47 13 00 00    	je     ffffffff80214ac1 <_RME_Svc_Handler+0x3d81>
ffffffff8021377a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021377e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213782:	0f 84 23 eb ff ff    	je     ffffffff802122ab <_RME_Svc_Handler+0x156b>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213788:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021378f:	e9 4e e4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213794:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213798:	48 89 c2             	mov    %rax,%rdx
ffffffff8021379b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021379f:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802137a2:	0f 83 56 0f 00 00    	jae    ffffffff802146fe <_RME_Svc_Handler+0x39be>
ffffffff802137a8:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff802137af:	00 00 00 
ffffffff802137b2:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802137b6:	48 01 ca             	add    %rcx,%rdx
ffffffff802137b9:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802137c0:	ff 00 00 
ffffffff802137c3:	48 8b 32             	mov    (%rdx),%rsi
ffffffff802137c6:	49 89 f0             	mov    %rsi,%r8
ffffffff802137c9:	49 21 c8             	and    %rcx,%r8
ffffffff802137cc:	49 39 f8             	cmp    %rdi,%r8
ffffffff802137cf:	0f 84 1d 0f 00 00    	je     ffffffff802146f2 <_RME_Svc_Handler+0x39b2>
ffffffff802137d5:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802137d9:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802137dd:	0f 85 03 0f 00 00    	jne    ffffffff802146e6 <_RME_Svc_Handler+0x39a6>
ffffffff802137e3:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff802137e7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802137ec:	48 39 f0             	cmp    %rsi,%rax
ffffffff802137ef:	0f 83 e5 0e 00 00    	jae    ffffffff802146da <_RME_Svc_Handler+0x399a>
ffffffff802137f5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802137f9:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802137fd:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213800:	48 21 d1             	and    %rdx,%rcx
ffffffff80213803:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213806:	0f 84 c2 0e 00 00    	je     ffffffff802146ce <_RME_Svc_Handler+0x398e>
ffffffff8021380c:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213810:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213814:	0f 84 4b f4 ff ff    	je     ffffffff80212c65 <_RME_Svc_Handler+0x1f25>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021381a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213821:	e9 bc e3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213826:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021382d:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff80213830:	48 89 c2             	mov    %rax,%rdx
ffffffff80213833:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213837:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021383a:	0f 83 cb 10 00 00    	jae    ffffffff8021490b <_RME_Svc_Handler+0x3bcb>
ffffffff80213840:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213847:	00 00 00 
ffffffff8021384a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021384e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213851:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213858:	ff 00 00 
ffffffff8021385b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8021385e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213861:	49 21 c8             	and    %rcx,%r8
ffffffff80213864:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213867:	0f 84 92 10 00 00    	je     ffffffff802148ff <_RME_Svc_Handler+0x3bbf>
ffffffff8021386d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213871:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213875:	0f 85 78 10 00 00    	jne    ffffffff802148f3 <_RME_Svc_Handler+0x3bb3>
ffffffff8021387b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff8021387f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213884:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213887:	0f 83 5a 10 00 00    	jae    ffffffff802148e7 <_RME_Svc_Handler+0x3ba7>
ffffffff8021388d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213891:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213895:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213898:	48 21 d1             	and    %rdx,%rcx
ffffffff8021389b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff8021389e:	0f 84 7f 10 00 00    	je     ffffffff80214923 <_RME_Svc_Handler+0x3be3>
ffffffff802138a4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802138a8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802138ac:	0f 84 87 eb ff ff    	je     ffffffff80212439 <_RME_Svc_Handler+0x16f9>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802138b2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802138b9:	e9 24 e3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802138be:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802138c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802138c3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802138c7:	48 39 fa             	cmp    %rdi,%rdx
ffffffff802138ca:	0f 83 08 0c 00 00    	jae    ffffffff802144d8 <_RME_Svc_Handler+0x3798>
ffffffff802138d0:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff802138d7:	ff 00 00 
ffffffff802138da:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802138de:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff802138e5:	00 00 00 
ffffffff802138e8:	48 01 f2             	add    %rsi,%rdx
ffffffff802138eb:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff802138ee:	49 89 ca             	mov    %rcx,%r10
ffffffff802138f1:	4d 21 c2             	and    %r8,%r10
ffffffff802138f4:	4d 39 ca             	cmp    %r9,%r10
ffffffff802138f7:	0f 84 cf 0b 00 00    	je     ffffffff802144cc <_RME_Svc_Handler+0x378c>
ffffffff802138fd:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213901:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213905:	0f 85 b5 0b 00 00    	jne    ffffffff802144c0 <_RME_Svc_Handler+0x3780>
ffffffff8021390b:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff8021390f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213914:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213917:	0f 83 97 0b 00 00    	jae    ffffffff802144b4 <_RME_Svc_Handler+0x3774>
ffffffff8021391d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213921:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213925:	4c 89 c2             	mov    %r8,%rdx
ffffffff80213928:	48 89 c1             	mov    %rax,%rcx
ffffffff8021392b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021392e:	48 21 c2             	and    %rax,%rdx
ffffffff80213931:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80213934:	0f 84 6e 0b 00 00    	je     ffffffff802144a8 <_RME_Svc_Handler+0x3768>
ffffffff8021393a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021393e:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80213942:	0f 84 40 e7 ff ff    	je     ffffffff80212088 <_RME_Svc_Handler+0x1348>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213948:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021394f:	e9 8e e2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213954:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff80213958:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021395c:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021395f:	0f 83 2c 11 00 00    	jae    ffffffff80214a91 <_RME_Svc_Handler+0x3d51>
ffffffff80213965:	48 be 00 00 00 00 ff 	movabs $0xffff00000000,%rsi
ffffffff8021396c:	ff 00 00 
ffffffff8021396f:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213973:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff8021397a:	00 00 00 
ffffffff8021397d:	48 01 c2             	add    %rax,%rdx
ffffffff80213980:	48 8b 02             	mov    (%rdx),%rax
ffffffff80213983:	49 89 c0             	mov    %rax,%r8
ffffffff80213986:	49 21 f0             	and    %rsi,%r8
ffffffff80213989:	49 39 f8             	cmp    %rdi,%r8
ffffffff8021398c:	0f 84 f3 10 00 00    	je     ffffffff80214a85 <_RME_Svc_Handler+0x3d45>
ffffffff80213992:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213996:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021399a:	0f 85 d9 10 00 00    	jne    ffffffff80214a79 <_RME_Svc_Handler+0x3d39>
ffffffff802139a0:	48 89 c8             	mov    %rcx,%rax
ffffffff802139a3:	4c 8b 42 28          	mov    0x28(%rdx),%r8
ffffffff802139a7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802139ac:	4c 39 c0             	cmp    %r8,%rax
ffffffff802139af:	0f 83 b8 10 00 00    	jae    ffffffff80214a6d <_RME_Svc_Handler+0x3d2d>
ffffffff802139b5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802139b9:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802139bd:	48 8b 10             	mov    (%rax),%rdx
ffffffff802139c0:	48 21 d6             	and    %rdx,%rsi
ffffffff802139c3:	48 39 fe             	cmp    %rdi,%rsi
ffffffff802139c6:	0f 84 95 10 00 00    	je     ffffffff80214a61 <_RME_Svc_Handler+0x3d21>
ffffffff802139cc:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802139d0:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff802139d4:	0f 84 e9 ed ff ff    	je     ffffffff802127c3 <_RME_Svc_Handler+0x1a83>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802139da:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802139e1:	e9 fc e1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802139e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff802139ed:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802139f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802139f3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802139f7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802139fa:	0f 83 9e 0c 00 00    	jae    ffffffff8021469e <_RME_Svc_Handler+0x395e>
ffffffff80213a00:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213a07:	00 00 00 
ffffffff80213a0a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213a0e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213a11:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213a18:	ff 00 00 
ffffffff80213a1b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213a1e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213a21:	49 21 c8             	and    %rcx,%r8
ffffffff80213a24:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213a27:	0f 84 65 0c 00 00    	je     ffffffff80214692 <_RME_Svc_Handler+0x3952>
ffffffff80213a2d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213a31:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213a35:	0f 85 4b 0c 00 00    	jne    ffffffff80214686 <_RME_Svc_Handler+0x3946>
ffffffff80213a3b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213a3f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213a44:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213a47:	0f 83 2d 0c 00 00    	jae    ffffffff8021467a <_RME_Svc_Handler+0x393a>
ffffffff80213a4d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213a51:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213a55:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213a58:	48 21 d1             	and    %rdx,%rcx
ffffffff80213a5b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213a5e:	0f 84 0a 0c 00 00    	je     ffffffff8021466e <_RME_Svc_Handler+0x392e>
ffffffff80213a64:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213a68:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213a6c:	0f 84 ad f4 ff ff    	je     ffffffff80212f1f <_RME_Svc_Handler+0x21df>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213a72:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213a79:	e9 64 e1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213a7e:	66 90                	xchg   %ax,%ax
ffffffff80213a80:	48 89 c2             	mov    %rax,%rdx
ffffffff80213a83:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213a87:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213a8a:	0f 83 21 11 00 00    	jae    ffffffff80214bb1 <_RME_Svc_Handler+0x3e71>
ffffffff80213a90:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213a97:	00 00 00 
ffffffff80213a9a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213a9e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213aa1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213aa8:	ff 00 00 
ffffffff80213aab:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213aae:	49 89 f0             	mov    %rsi,%r8
ffffffff80213ab1:	49 21 c8             	and    %rcx,%r8
ffffffff80213ab4:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213ab7:	0f 84 e8 10 00 00    	je     ffffffff80214ba5 <_RME_Svc_Handler+0x3e65>
ffffffff80213abd:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213ac1:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213ac5:	0f 85 ce 10 00 00    	jne    ffffffff80214b99 <_RME_Svc_Handler+0x3e59>
ffffffff80213acb:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213acf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213ad4:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213ad7:	0f 83 b0 10 00 00    	jae    ffffffff80214b8d <_RME_Svc_Handler+0x3e4d>
ffffffff80213add:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213ae1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213ae5:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213ae8:	48 21 d1             	and    %rdx,%rcx
ffffffff80213aeb:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213aee:	0f 84 8d 10 00 00    	je     ffffffff80214b81 <_RME_Svc_Handler+0x3e41>
ffffffff80213af4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213af8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213afc:	0f 84 68 eb ff ff    	je     ffffffff8021266a <_RME_Svc_Handler+0x192a>
ffffffff80213b02:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213b09:	e9 d4 e0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213b0e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213b10:	48 89 c2             	mov    %rax,%rdx
ffffffff80213b13:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213b17:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213b1a:	0f 83 f8 08 00 00    	jae    ffffffff80214418 <_RME_Svc_Handler+0x36d8>
ffffffff80213b20:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213b27:	00 00 00 
ffffffff80213b2a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213b2e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213b31:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213b38:	ff 00 00 
ffffffff80213b3b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213b3e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213b41:	49 21 c8             	and    %rcx,%r8
ffffffff80213b44:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213b47:	0f 84 bf 08 00 00    	je     ffffffff8021440c <_RME_Svc_Handler+0x36cc>
ffffffff80213b4d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213b51:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213b55:	0f 85 a5 08 00 00    	jne    ffffffff80214400 <_RME_Svc_Handler+0x36c0>
ffffffff80213b5b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213b5f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213b64:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213b67:	0f 83 87 08 00 00    	jae    ffffffff802143f4 <_RME_Svc_Handler+0x36b4>
ffffffff80213b6d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213b71:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213b75:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213b78:	48 21 d1             	and    %rdx,%rcx
ffffffff80213b7b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213b7e:	0f 84 58 08 00 00    	je     ffffffff802143dc <_RME_Svc_Handler+0x369c>
ffffffff80213b84:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213b88:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213b8c:	0f 84 ee e5 ff ff    	je     ffffffff80212180 <_RME_Svc_Handler+0x1440>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213b92:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213b99:	e9 44 e0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213b9e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80213ba0:	48 89 c2             	mov    %rax,%rdx
ffffffff80213ba3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213ba7:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80213baa:	0f 83 a1 0f 00 00    	jae    ffffffff80214b51 <_RME_Svc_Handler+0x3e11>
ffffffff80213bb0:	49 b8 00 00 00 00 ff 	movabs $0xffff00000000,%r8
ffffffff80213bb7:	ff 00 00 
ffffffff80213bba:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213bbe:	49 b9 00 00 00 00 02 	movabs $0x200000000,%r9
ffffffff80213bc5:	00 00 00 
ffffffff80213bc8:	48 01 f2             	add    %rsi,%rdx
ffffffff80213bcb:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff80213bce:	49 89 ca             	mov    %rcx,%r10
ffffffff80213bd1:	4d 21 c2             	and    %r8,%r10
ffffffff80213bd4:	4d 39 ca             	cmp    %r9,%r10
ffffffff80213bd7:	0f 84 68 0f 00 00    	je     ffffffff80214b45 <_RME_Svc_Handler+0x3e05>
ffffffff80213bdd:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80213be1:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80213be5:	0f 85 4e 0f 00 00    	jne    ffffffff80214b39 <_RME_Svc_Handler+0x3df9>
ffffffff80213beb:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffffff80213bef:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213bf4:	48 39 c8             	cmp    %rcx,%rax
ffffffff80213bf7:	0f 83 30 0f 00 00    	jae    ffffffff80214b2d <_RME_Svc_Handler+0x3ded>
ffffffff80213bfd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213c01:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213c05:	4c 89 c2             	mov    %r8,%rdx
ffffffff80213c08:	48 89 c1             	mov    %rax,%rcx
ffffffff80213c0b:	48 8b 00             	mov    (%rax),%rax
ffffffff80213c0e:	48 21 c2             	and    %rax,%rdx
ffffffff80213c11:	4c 39 ca             	cmp    %r9,%rdx
ffffffff80213c14:	0f 84 07 0f 00 00    	je     ffffffff80214b21 <_RME_Svc_Handler+0x3de1>
ffffffff80213c1a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213c1e:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80213c22:	0f 84 3c ee ff ff    	je     ffffffff80212a64 <_RME_Svc_Handler+0x1d24>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213c28:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213c2f:	e9 ae df ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213c34:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80213c38:	48 89 c2             	mov    %rax,%rdx
ffffffff80213c3b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213c3f:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213c42:	0f 83 f6 09 00 00    	jae    ffffffff8021463e <_RME_Svc_Handler+0x38fe>
ffffffff80213c48:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213c4f:	00 00 00 
ffffffff80213c52:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213c56:	48 01 ca             	add    %rcx,%rdx
ffffffff80213c59:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213c60:	ff 00 00 
ffffffff80213c63:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213c66:	49 89 f0             	mov    %rsi,%r8
ffffffff80213c69:	49 21 c8             	and    %rcx,%r8
ffffffff80213c6c:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213c6f:	0f 84 bd 09 00 00    	je     ffffffff80214632 <_RME_Svc_Handler+0x38f2>
ffffffff80213c75:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213c79:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213c7d:	0f 85 a3 09 00 00    	jne    ffffffff80214626 <_RME_Svc_Handler+0x38e6>
ffffffff80213c83:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213c87:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213c8c:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213c8f:	0f 83 85 09 00 00    	jae    ffffffff8021461a <_RME_Svc_Handler+0x38da>
ffffffff80213c95:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213c99:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213c9d:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213ca0:	48 21 d1             	and    %rdx,%rcx
ffffffff80213ca3:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213ca6:	0f 84 be 0a 00 00    	je     ffffffff8021476a <_RME_Svc_Handler+0x3a2a>
ffffffff80213cac:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213cb0:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff80213cb4:	0f 84 9e f1 ff ff    	je     ffffffff80212e58 <_RME_Svc_Handler+0x2118>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213cba:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213cc1:	e9 1c df ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213cc6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80213ccd:	00 00 00 
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff80213cd0:	48 89 c2             	mov    %rax,%rdx
ffffffff80213cd3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213cd7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213cda:	0f 83 91 0f 00 00    	jae    ffffffff80214c71 <_RME_Svc_Handler+0x3f31>
ffffffff80213ce0:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213ce7:	00 00 00 
ffffffff80213cea:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213cee:	48 01 ca             	add    %rcx,%rdx
ffffffff80213cf1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213cf8:	ff 00 00 
ffffffff80213cfb:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213cfe:	49 89 f0             	mov    %rsi,%r8
ffffffff80213d01:	49 21 c8             	and    %rcx,%r8
ffffffff80213d04:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213d07:	0f 84 58 0f 00 00    	je     ffffffff80214c65 <_RME_Svc_Handler+0x3f25>
ffffffff80213d0d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213d11:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213d15:	0f 85 3e 0f 00 00    	jne    ffffffff80214c59 <_RME_Svc_Handler+0x3f19>
ffffffff80213d1b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213d1f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213d24:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213d27:	0f 83 20 0f 00 00    	jae    ffffffff80214c4d <_RME_Svc_Handler+0x3f0d>
ffffffff80213d2d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213d31:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213d35:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213d38:	48 21 d1             	and    %rdx,%rcx
ffffffff80213d3b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213d3e:	0f 84 fd 0e 00 00    	je     ffffffff80214c41 <_RME_Svc_Handler+0x3f01>
ffffffff80213d44:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213d48:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213d4c:	0f 84 21 e8 ff ff    	je     ffffffff80212573 <_RME_Svc_Handler+0x1833>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213d52:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213d59:	e9 84 de ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213d5e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff80213d60:	48 89 c2             	mov    %rax,%rdx
ffffffff80213d63:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213d67:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213d6a:	0f 83 c8 07 00 00    	jae    ffffffff80214538 <_RME_Svc_Handler+0x37f8>
ffffffff80213d70:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213d77:	00 00 00 
ffffffff80213d7a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213d7e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213d81:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213d88:	ff 00 00 
ffffffff80213d8b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213d8e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213d91:	49 21 c8             	and    %rcx,%r8
ffffffff80213d94:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213d97:	0f 84 8f 07 00 00    	je     ffffffff8021452c <_RME_Svc_Handler+0x37ec>
ffffffff80213d9d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213da1:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213da5:	0f 85 75 07 00 00    	jne    ffffffff80214520 <_RME_Svc_Handler+0x37e0>
ffffffff80213dab:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213daf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213db4:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213db7:	0f 83 57 07 00 00    	jae    ffffffff80214514 <_RME_Svc_Handler+0x37d4>
ffffffff80213dbd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213dc1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213dc5:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213dc8:	48 21 d1             	and    %rdx,%rcx
ffffffff80213dcb:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213dce:	0f 84 34 07 00 00    	je     ffffffff80214508 <_RME_Svc_Handler+0x37c8>
ffffffff80213dd4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213dd8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213ddc:	0f 84 9b ed ff ff    	je     ffffffff80212b7d <_RME_Svc_Handler+0x1e3d>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213de2:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213de9:	e9 f4 dd ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213dee:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213df0:	48 89 c2             	mov    %rax,%rdx
ffffffff80213df3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213df7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213dfa:	0f 83 78 06 00 00    	jae    ffffffff80214478 <_RME_Svc_Handler+0x3738>
ffffffff80213e00:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213e07:	00 00 00 
ffffffff80213e0a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213e0e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213e11:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213e18:	ff 00 00 
ffffffff80213e1b:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213e1e:	49 89 f0             	mov    %rsi,%r8
ffffffff80213e21:	49 21 c8             	and    %rcx,%r8
ffffffff80213e24:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213e27:	0f 84 3f 06 00 00    	je     ffffffff8021446c <_RME_Svc_Handler+0x372c>
ffffffff80213e2d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213e31:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213e35:	0f 85 25 06 00 00    	jne    ffffffff80214460 <_RME_Svc_Handler+0x3720>
ffffffff80213e3b:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213e3f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213e44:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213e47:	0f 83 07 06 00 00    	jae    ffffffff80214454 <_RME_Svc_Handler+0x3714>
ffffffff80213e4d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213e51:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213e55:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213e58:	48 21 d1             	and    %rdx,%rcx
ffffffff80213e5b:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213e5e:	0f 84 e4 05 00 00    	je     ffffffff80214448 <_RME_Svc_Handler+0x3708>
ffffffff80213e64:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213e68:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213e6c:	0f 84 03 e1 ff ff    	je     ffffffff80211f75 <_RME_Svc_Handler+0x1235>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213e72:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213e79:	e9 64 dd ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213e7e:	66 90                	xchg   %ax,%ax
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213e80:	48 89 c2             	mov    %rax,%rdx
ffffffff80213e83:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213e87:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213e8a:	0f 83 ce 08 00 00    	jae    ffffffff8021475e <_RME_Svc_Handler+0x3a1e>
ffffffff80213e90:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80213e97:	00 00 00 
ffffffff80213e9a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213e9e:	48 01 ca             	add    %rcx,%rdx
ffffffff80213ea1:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff80213ea8:	ff 00 00 
ffffffff80213eab:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80213eae:	49 89 f0             	mov    %rsi,%r8
ffffffff80213eb1:	49 21 c8             	and    %rcx,%r8
ffffffff80213eb4:	49 39 f8             	cmp    %rdi,%r8
ffffffff80213eb7:	0f 84 95 08 00 00    	je     ffffffff80214752 <_RME_Svc_Handler+0x3a12>
ffffffff80213ebd:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80213ec1:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80213ec5:	0f 85 7b 08 00 00    	jne    ffffffff80214746 <_RME_Svc_Handler+0x3a06>
ffffffff80213ecb:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80213ecf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213ed4:	48 39 f0             	cmp    %rsi,%rax
ffffffff80213ed7:	0f 83 5d 08 00 00    	jae    ffffffff8021473a <_RME_Svc_Handler+0x39fa>
ffffffff80213edd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213ee1:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213ee5:	48 8b 10             	mov    (%rax),%rdx
ffffffff80213ee8:	48 21 d1             	and    %rdx,%rcx
ffffffff80213eeb:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80213eee:	0f 84 63 09 00 00    	je     ffffffff80214857 <_RME_Svc_Handler+0x3b17>
ffffffff80213ef4:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80213ef8:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80213efc:	0f 84 bb e9 ff ff    	je     ffffffff802128bd <_RME_Svc_Handler+0x1b7d>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213f02:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213f09:	e9 d4 dc ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80213f0e:	66 90                	xchg   %ax,%ax
                    Thd_Src->Sched.Slice=0U;
ffffffff80213f10:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
ffffffff80213f17:	00 
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80213f18:	48 3b 55 30          	cmp    0x30(%rbp),%rdx
ffffffff80213f1c:	0f 82 c5 d1 ff ff    	jb     ffffffff802110e7 <_RME_Svc_Handler+0x3a7>
ffffffff80213f22:	e9 7d f3 ff ff       	jmp    ffffffff802132a4 <_RME_Svc_Handler+0x2564>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80213f27:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80213f2e:	e9 af dc ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        return RME_ERR_PTH_INVSTATE;
ffffffff80213f33:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff80213f3a:	e9 a3 dc ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80213f3f:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213f46:	e9 97 dc ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        return RME_ERR_PTH_INVSTATE;
ffffffff80213f4b:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80213f52:	e9 8b dc ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80213f57:	48 89 c2             	mov    %rax,%rdx
ffffffff80213f5a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213f5e:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80213f61:	0f 83 aa 0c 00 00    	jae    ffffffff80214c11 <_RME_Svc_Handler+0x3ed1>
ffffffff80213f67:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80213f6e:	00 00 00 
ffffffff80213f71:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213f75:	48 01 f2             	add    %rsi,%rdx
ffffffff80213f78:	be ff ff 00 00       	mov    $0xffff,%esi
ffffffff80213f7d:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80213f80:	48 c1 e6 20          	shl    $0x20,%rsi
ffffffff80213f84:	49 89 f9             	mov    %rdi,%r9
ffffffff80213f87:	49 21 f1             	and    %rsi,%r9
ffffffff80213f8a:	4d 39 c1             	cmp    %r8,%r9
ffffffff80213f8d:	0f 84 72 0c 00 00    	je     ffffffff80214c05 <_RME_Svc_Handler+0x3ec5>
ffffffff80213f93:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80213f97:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80213f9b:	0f 85 58 0c 00 00    	jne    ffffffff80214bf9 <_RME_Svc_Handler+0x3eb9>
ffffffff80213fa1:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff80213fa5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213faa:	48 39 f8             	cmp    %rdi,%rax
ffffffff80213fad:	0f 83 3a 0c 00 00    	jae    ffffffff80214bed <_RME_Svc_Handler+0x3ead>
ffffffff80213fb3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213fb7:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80213fbb:	48 89 c2             	mov    %rax,%rdx
ffffffff80213fbe:	48 8b 00             	mov    (%rax),%rax
ffffffff80213fc1:	48 21 c6             	and    %rax,%rsi
ffffffff80213fc4:	4c 39 c6             	cmp    %r8,%rsi
ffffffff80213fc7:	0f 84 14 0c 00 00    	je     ffffffff80214be1 <_RME_Svc_Handler+0x3ea1>
ffffffff80213fcd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213fd1:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213fd5:	0f 84 d7 ea ff ff    	je     ffffffff80212ab2 <_RME_Svc_Handler+0x1d72>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80213fdb:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80213fe2:	e9 fb db ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff80213fe7:	48 89 c2             	mov    %rax,%rdx
ffffffff80213fea:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80213fee:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80213ff1:	0f 83 da 0c 00 00    	jae    ffffffff80214cd1 <_RME_Svc_Handler+0x3f91>
ffffffff80213ff7:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80213ffb:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80214000:	48 01 ca             	add    %rcx,%rdx
ffffffff80214003:	b9 ff ff 00 00       	mov    $0xffff,%ecx
ffffffff80214008:	48 c1 e7 21          	shl    $0x21,%rdi
ffffffff8021400c:	48 8b 32             	mov    (%rdx),%rsi
ffffffff8021400f:	48 c1 e1 20          	shl    $0x20,%rcx
ffffffff80214013:	49 89 f0             	mov    %rsi,%r8
ffffffff80214016:	49 21 c8             	and    %rcx,%r8
ffffffff80214019:	49 39 f8             	cmp    %rdi,%r8
ffffffff8021401c:	0f 84 a3 0c 00 00    	je     ffffffff80214cc5 <_RME_Svc_Handler+0x3f85>
ffffffff80214022:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80214026:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021402a:	0f 85 89 0c 00 00    	jne    ffffffff80214cb9 <_RME_Svc_Handler+0x3f79>
ffffffff80214030:	48 8b 72 28          	mov    0x28(%rdx),%rsi
ffffffff80214034:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214039:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021403c:	0f 83 6b 0c 00 00    	jae    ffffffff80214cad <_RME_Svc_Handler+0x3f6d>
ffffffff80214042:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214046:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff8021404a:	49 89 c4             	mov    %rax,%r12
ffffffff8021404d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214050:	48 21 c1             	and    %rax,%rcx
ffffffff80214053:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80214056:	0f 84 45 0c 00 00    	je     ffffffff80214ca1 <_RME_Svc_Handler+0x3f61>
ffffffff8021405c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214060:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214064:	0f 84 90 e2 ff ff    	je     ffffffff802122fa <_RME_Svc_Handler+0x15ba>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021406a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214071:	e9 6c db ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214076:	48 89 c2             	mov    %rax,%rdx
ffffffff80214079:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021407d:	48 39 fa             	cmp    %rdi,%rdx
ffffffff80214080:	0f 83 c5 07 00 00    	jae    ffffffff8021484b <_RME_Svc_Handler+0x3b0b>
ffffffff80214086:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff8021408d:	00 00 00 
ffffffff80214090:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80214094:	48 01 f2             	add    %rsi,%rdx
ffffffff80214097:	be ff ff 00 00       	mov    $0xffff,%esi
ffffffff8021409c:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff8021409f:	48 c1 e6 20          	shl    $0x20,%rsi
ffffffff802140a3:	49 89 f9             	mov    %rdi,%r9
ffffffff802140a6:	49 21 f1             	and    %rsi,%r9
ffffffff802140a9:	4d 39 c1             	cmp    %r8,%r9
ffffffff802140ac:	0f 84 8d 07 00 00    	je     ffffffff8021483f <_RME_Svc_Handler+0x3aff>
ffffffff802140b2:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff802140b6:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff802140ba:	0f 85 73 07 00 00    	jne    ffffffff80214833 <_RME_Svc_Handler+0x3af3>
ffffffff802140c0:	48 8b 7a 28          	mov    0x28(%rdx),%rdi
ffffffff802140c4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802140c9:	48 39 f8             	cmp    %rdi,%rax
ffffffff802140cc:	0f 83 55 07 00 00    	jae    ffffffff80214827 <_RME_Svc_Handler+0x3ae7>
ffffffff802140d2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802140d6:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802140da:	48 89 c2             	mov    %rax,%rdx
ffffffff802140dd:	48 8b 00             	mov    (%rax),%rax
ffffffff802140e0:	48 21 c6             	and    %rax,%rsi
ffffffff802140e3:	4c 39 c6             	cmp    %r8,%rsi
ffffffff802140e6:	0f 84 ae 06 00 00    	je     ffffffff8021479a <_RME_Svc_Handler+0x3a5a>
ffffffff802140ec:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802140f0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802140f4:	0f 84 dc df ff ff    	je     ffffffff802120d6 <_RME_Svc_Handler+0x1396>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802140fa:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214101:	e9 dc da ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    __RME_Svc_Retval_Set(Reg,0);
ffffffff80214106:	31 f6                	xor    %esi,%esi
ffffffff80214108:	48 89 df             	mov    %rbx,%rdi
ffffffff8021410b:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
ffffffff80214110:	4c 89 54 24 10       	mov    %r10,0x10(%rsp)
ffffffff80214115:	4c 89 0c 24          	mov    %r9,(%rsp)
ffffffff80214119:	e8 62 71 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff8021411e:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
ffffffff80214123:	4c 8b 0c 24          	mov    (%rsp),%r9
ffffffff80214127:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
ffffffff8021412c:	49 83 78 38 00       	cmpq   $0x0,0x38(%r8)
ffffffff80214131:	74 4d                	je     ffffffff80214180 <_RME_Svc_Handler+0x3440>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80214133:	4d 89 50 40          	mov    %r10,0x40(%r8)
    for(Count=0U;Count<Number;Count++)
ffffffff80214137:	e9 f7 d2 ff ff       	jmp    ffffffff80211433 <_RME_Svc_Handler+0x6f3>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff8021413c:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
ffffffff80214140:	f0 48 0f c1 45 28    	lock xadd %rax,0x28(%rbp)
            return RME_ERR_SIV_FULL;
ffffffff80214146:	48 c7 c6 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rsi
ffffffff8021414d:	e9 90 da ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            return RME_ERR_PTH_INVSTATE;
ffffffff80214152:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80214159:	e9 84 da ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        Flag=RME_THD_EXCPEND_FLAG;
ffffffff8021415e:	48 be 00 00 00 00 00 	movabs $0x6000000000000000,%rsi
ffffffff80214165:	00 00 60 
ffffffff80214168:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
ffffffff8021416d:	48 ba 00 00 00 00 00 	movabs $0x4000000000000000,%rdx
ffffffff80214174:	00 00 40 
ffffffff80214177:	48 0f 45 f2          	cmovne %rdx,%rsi
ffffffff8021417b:	e9 3f ed ff ff       	jmp    ffffffff80212ebf <_RME_Svc_Handler+0x217f>
            _RME_Run_Del(Thread[Count]);
ffffffff80214180:	4c 89 c7             	mov    %r8,%rdi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214183:	49 c1 ec 26          	shr    $0x26,%r12
            _RME_Run_Del(Thread[Count]);
ffffffff80214187:	e8 d4 85 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
    Local=Thd->Sched.Local;
ffffffff8021418c:	49 8b 40 28          	mov    0x28(%r8),%rax
ffffffff80214190:	4c 89 d1             	mov    %r10,%rcx
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80214193:	4d 89 50 40          	mov    %r10,0x40(%r8)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214197:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff8021419b:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
ffffffff8021419f:	48 8b 56 30          	mov    0x30(%rsi),%rdx
    Next->Prev=New;
ffffffff802141a3:	4c 89 46 30          	mov    %r8,0x30(%rsi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802141a7:	48 8d 74 08 28       	lea    0x28(%rax,%rcx,1),%rsi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802141ac:	44 89 d1             	mov    %r10d,%ecx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802141af:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    New->Next=Next;
ffffffff802141b4:	66 48 0f 6e fa       	movq   %rdx,%xmm7
ffffffff802141b9:	66 0f 6c c7          	punpcklqdq %xmm7,%xmm0
ffffffff802141bd:	41 0f 11 00          	movups %xmm0,(%r8)
    Prev->Next=New;
ffffffff802141c1:	4c 89 02             	mov    %r8,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802141c4:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802141c9:	48 d3 e2             	shl    %cl,%rdx
ffffffff802141cc:	4a 09 54 e0 20       	or     %rdx,0x20(%rax,%r12,8)
    for(Count=0U;Count<Number;Count++)
ffffffff802141d1:	49 83 fe 01          	cmp    $0x1,%r14
ffffffff802141d5:	0f 85 2a d2 ff ff    	jne    ffffffff80211405 <_RME_Svc_Handler+0x6c5>
ffffffff802141db:	e9 53 d2 ff ff       	jmp    ffffffff80211433 <_RME_Svc_Handler+0x6f3>
            return RME_ERR_PTH_PRIO;
ffffffff802141e0:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff802141e7:	e9 f6 d9 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        return RME_ERR_PTH_REFCNT;
ffffffff802141ec:	48 c7 c6 32 ff ff ff 	mov    $0xffffffffffffff32,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802141f3:	e9 ea d9 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            _RME_Run_Del(Thread[Count]);
ffffffff802141f8:	e8 63 85 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
    Local=Thd->Sched.Local;
ffffffff802141fd:	48 8b 47 28          	mov    0x28(%rdi),%rax
ffffffff80214201:	4c 89 c9             	mov    %r9,%rcx
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80214204:	4c 89 4f 40          	mov    %r9,0x40(%rdi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214208:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff8021420c:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
ffffffff80214210:	48 8b 56 30          	mov    0x30(%rsi),%rdx
    Next->Prev=New;
ffffffff80214214:	48 89 7e 30          	mov    %rdi,0x30(%rsi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214218:	48 8d 74 08 28       	lea    0x28(%rax,%rcx,1),%rsi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021421d:	44 89 c9             	mov    %r9d,%ecx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214220:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214225:	4c 89 ee             	mov    %r13,%rsi
    New->Next=Next;
ffffffff80214228:	66 48 0f 6e fa       	movq   %rdx,%xmm7
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021422d:	48 c1 ee 26          	shr    $0x26,%rsi
    New->Next=Next;
ffffffff80214231:	66 0f 6c c7          	punpcklqdq %xmm7,%xmm0
ffffffff80214235:	0f 11 07             	movups %xmm0,(%rdi)
    Prev->Next=New;
ffffffff80214238:	48 89 3a             	mov    %rdi,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff8021423b:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80214240:	48 d3 e2             	shl    %cl,%rdx
ffffffff80214243:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
ffffffff80214248:	e9 cc d1 ff ff       	jmp    ffffffff80211419 <_RME_Svc_Handler+0x6d9>
    Object=RME_CAP_GETOBJ(Cpt_Del,rme_ptr_t);
ffffffff8021424d:	48 8b 7e 18          	mov    0x18(%rsi),%rdi
    Size=RME_CPT_SIZE(Cpt_Del->Entry_Num);
ffffffff80214251:	48 8b 4e 28          	mov    0x28(%rsi),%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80214255:	31 d2                	xor    %edx,%edx
ffffffff80214257:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021425b:	f0 48 0f b1 16       	lock cmpxchg %rdx,(%rsi)
ffffffff80214260:	0f 94 c2             	sete   %dl
    RME_CAP_DELETE(Cpt_Del,Type_Stat);
ffffffff80214263:	84 d2                	test   %dl,%dl
ffffffff80214265:	0f 84 93 f3 ff ff    	je     ffffffff802135fe <_RME_Svc_Handler+0x28be>
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
ffffffff8021426b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021426e:	e8 2d bd ff ff       	call   ffffffff8020ffa0 <_RME_Kot_Erase>
    return 0;
ffffffff80214273:	31 f6                	xor    %esi,%esi
ffffffff80214275:	e9 68 d9 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021427a:	31 c9                	xor    %ecx,%ecx
ffffffff8021427c:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80214281:	0f 94 c1             	sete   %cl
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff80214284:	80 f9 01             	cmp    $0x1,%cl
ffffffff80214287:	48 19 f6             	sbb    %rsi,%rsi
ffffffff8021428a:	e9 53 d9 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff8021428f:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff80214294:	e8 07 bd ff ff       	call   ffffffff8020ffa0 <_RME_Kot_Erase>
    return 0;
ffffffff80214299:	31 f6                	xor    %esi,%esi
ffffffff8021429b:	e9 42 d9 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            _RME_Run_Del(Thread[Count]);
ffffffff802142a0:	e8 bb 84 ff ff       	call   ffffffff8020c760 <_RME_Run_Del>
    Local=Thd->Sched.Local;
ffffffff802142a5:	48 8b 47 28          	mov    0x28(%rdi),%rax
ffffffff802142a9:	4c 89 f9             	mov    %r15,%rcx
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff802142ac:	4c 89 7f 40          	mov    %r15,0x40(%rdi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802142b0:	48 c1 e1 04          	shl    $0x4,%rcx
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802142b4:	4c 8b 6c 24 08       	mov    0x8(%rsp),%r13
ffffffff802142b9:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802142bd:	48 8b 56 30          	mov    0x30(%rsi),%rdx
    Next->Prev=New;
ffffffff802142c1:	48 89 7e 30          	mov    %rdi,0x30(%rsi)
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802142c5:	48 8d 74 08 28       	lea    0x28(%rax,%rcx,1),%rsi
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802142ca:	49 c1 ed 26          	shr    $0x26,%r13
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff802142ce:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802142d3:	44 89 f9             	mov    %r15d,%ecx
    New->Next=Next;
ffffffff802142d6:	66 48 0f 6e fa       	movq   %rdx,%xmm7
ffffffff802142db:	66 0f 6c c7          	punpcklqdq %xmm7,%xmm0
ffffffff802142df:	0f 11 07             	movups %xmm0,(%rdi)
    Prev->Next=New;
ffffffff802142e2:	48 89 3a             	mov    %rdi,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff802142e5:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802142ea:	48 d3 e2             	shl    %cl,%rdx
ffffffff802142ed:	4a 09 54 e8 20       	or     %rdx,0x20(%rax,%r13,8)
}
ffffffff802142f2:	e9 3c d1 ff ff       	jmp    ffffffff80211433 <_RME_Svc_Handler+0x6f3>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802142f7:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802142fe:	e9 df d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214303:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021430a:	e9 d3 d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021430f:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214316:	e9 c7 d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021431b:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214322:	e9 bb d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        return RME_ERR_PTH_PRIO;
ffffffff80214327:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff8021432e:	e9 af d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        return RME_ERR_PTH_INVSTATE;
ffffffff80214333:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff8021433a:	e9 a3 d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff8021433f:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214346:	e9 97 d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        return RME_ERR_SIV_BOOT;
ffffffff8021434b:	48 c7 c6 cd fe ff ff 	mov    $0xfffffffffffffecd,%rsi
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80214352:	e9 8b d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214357:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021435e:	e9 7f d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
            return RME_ERR_PTH_PRIO;
ffffffff80214363:	48 c7 c6 33 ff ff ff 	mov    $0xffffffffffffff33,%rsi
ffffffff8021436a:	e9 73 d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8021436f:	85 c0                	test   %eax,%eax
ffffffff80214371:	75 15                	jne    ffffffff80214388 <_RME_Svc_Handler+0x3648>
ffffffff80214373:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff8021437a:	00 ff ff 
ffffffff8021437d:	48 21 c2             	and    %rax,%rdx
ffffffff80214380:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80214385:	0f 94 c2             	sete   %dl
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff80214388:	48 c7 c6 fa ff ff ff 	mov    $0xfffffffffffffffa,%rsi
ffffffff8021438f:	e9 4e d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214394:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021439b:	e9 42 d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802143a0:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802143a7:	e9 36 d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802143ac:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802143b3:	e9 2a d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802143b8:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802143bf:	e9 1e d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802143c4:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802143cb:	e9 12 d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802143d0:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802143d7:	e9 06 d8 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802143dc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802143e3:	e9 fa d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff802143e8:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802143ef:	e9 ee d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802143f4:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802143fb:	e9 e2 d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214400:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214407:	e9 d6 d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021440c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214413:	e9 ca d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214418:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021441f:	e9 be d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214424:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021442b:	e9 b2 d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214430:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214437:	e9 a6 d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021443c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214443:	e9 9a d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214448:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021444f:	e9 8e d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214454:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021445b:	e9 82 d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214460:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214467:	e9 76 d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021446c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214473:	e9 6a d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214478:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021447f:	e9 5e d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214484:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021448b:	e9 52 d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214490:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214497:	e9 46 d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021449c:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802144a3:	e9 3a d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802144a8:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802144af:	e9 2e d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802144b4:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802144bb:	e9 22 d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802144c0:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802144c7:	e9 16 d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802144cc:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802144d3:	e9 0a d7 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802144d8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802144df:	e9 fe d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802144e4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802144eb:	e9 f2 d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802144f0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802144f7:	e9 e6 d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802144fc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214503:	e9 da d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214508:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021450f:	e9 ce d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214514:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021451b:	e9 c2 d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214520:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214527:	e9 b6 d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021452c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214533:	e9 aa d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214538:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021453f:	e9 9e d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214544:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021454b:	e9 92 d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214550:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214557:	e9 86 d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021455c:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214563:	e9 7a d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214568:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021456f:	e9 6e d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214574:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021457b:	e9 62 d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff80214580:	48 c7 c6 f6 ff ff ff 	mov    $0xfffffffffffffff6,%rsi
ffffffff80214587:	e9 56 d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021458c:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214593:	e9 4a d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214598:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021459f:	e9 3e d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802145a4:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802145ab:	e9 32 d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802145b0:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145b7:	e9 26 d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802145bc:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145c3:	e9 1a d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802145c8:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802145cf:	e9 0e d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802145d4:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802145db:	e9 02 d6 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802145e0:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802145e7:	e9 f6 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff802145ec:	85 c0                	test   %eax,%eax
ffffffff802145ee:	0f 85 94 fd ff ff    	jne    ffffffff80214388 <_RME_Svc_Handler+0x3648>
ffffffff802145f4:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff802145fb:	00 ff ff 
ffffffff802145fe:	48 21 c2             	and    %rax,%rdx
ffffffff80214601:	f0 48 0f b1 16       	lock cmpxchg %rdx,(%rsi)
ffffffff80214606:	0f 94 c2             	sete   %dl
	return (rme_ptr_t)Zero;
ffffffff80214609:	e9 7a fd ff ff       	jmp    ffffffff80214388 <_RME_Svc_Handler+0x3648>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff8021460e:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff80214615:	e9 c8 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021461a:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214621:	e9 bc d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214626:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021462d:	e9 b0 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214632:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214639:	e9 a4 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021463e:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214645:	e9 98 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021464a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214651:	e9 8c d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214656:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021465d:	e9 80 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214662:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214669:	e9 74 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021466e:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214675:	e9 68 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021467a:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214681:	e9 5c d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214686:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021468d:	e9 50 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214692:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214699:	e9 44 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021469e:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802146a5:	e9 38 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802146aa:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802146b1:	e9 2c d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802146b6:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802146bd:	e9 20 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802146c2:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802146c9:	e9 14 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802146ce:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802146d5:	e9 08 d5 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802146da:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802146e1:	e9 fc d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802146e6:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802146ed:	e9 f0 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802146f2:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802146f9:	e9 e4 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802146fe:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214705:	e9 d8 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021470a:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214711:	e9 cc d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214716:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021471d:	e9 c0 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214722:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214729:	e9 b4 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021472e:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214735:	e9 a8 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021473a:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214741:	e9 9c d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214746:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021474d:	e9 90 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214752:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214759:	e9 84 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021475e:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214765:	e9 78 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021476a:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214771:	e9 6c d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214776:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021477d:	e9 60 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214782:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214789:	e9 54 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021478e:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214795:	e9 48 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021479a:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802147a1:	e9 3c d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff802147a6:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802147ad:	e9 30 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802147b2:	45 85 e4             	test   %r12d,%r12d
ffffffff802147b5:	0f 85 cd fb ff ff    	jne    ffffffff80214388 <_RME_Svc_Handler+0x3648>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802147bb:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802147c0:	4c 89 e0             	mov    %r12,%rax
ffffffff802147c3:	48 c1 e2 32          	shl    $0x32,%rdx
ffffffff802147c7:	f0 48 0f b1 55 00    	lock cmpxchg %rdx,0x0(%rbp)
ffffffff802147cd:	0f 94 c2             	sete   %dl
	return (rme_ptr_t)Zero;
ffffffff802147d0:	e9 b3 fb ff ff       	jmp    ffffffff80214388 <_RME_Svc_Handler+0x3648>
ffffffff802147d5:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802147dc:	e9 01 d4 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff802147e1:	85 c0                	test   %eax,%eax
ffffffff802147e3:	0f 85 9f fb ff ff    	jne    ffffffff80214388 <_RME_Svc_Handler+0x3648>
ffffffff802147e9:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff802147f0:	00 ff ff 
ffffffff802147f3:	48 21 c1             	and    %rax,%rcx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff802147f6:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff802147fb:	0f 94 c1             	sete   %cl
	return (rme_ptr_t)Zero;
ffffffff802147fe:	e9 85 fb ff ff       	jmp    ffffffff80214388 <_RME_Svc_Handler+0x3648>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80214803:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff8021480a:	e9 d3 d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021480f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214816:	e9 c7 d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021481b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214822:	e9 bb d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214827:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021482e:	e9 af d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214833:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff8021483a:	e9 a3 d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021483f:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214846:	e9 97 d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021484b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214852:	e9 8b d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214857:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021485e:	e9 7f d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214863:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021486a:	e9 73 d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021486f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214876:	e9 67 d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021487b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214882:	e9 5b d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214887:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021488e:	e9 4f d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214893:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021489a:	e9 43 d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff8021489f:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802148a6:	e9 37 d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802148ab:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802148b2:	e9 2b d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802148b7:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802148be:	e9 1f d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802148c3:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802148ca:	e9 13 d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff802148cf:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff802148d6:	e9 07 d3 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802148db:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802148e2:	e9 fb d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802148e7:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802148ee:	e9 ef d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802148f3:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802148fa:	e9 e3 d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802148ff:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214906:	e9 d7 d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021490b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214912:	e9 cb d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214917:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021491e:	e9 bf d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214923:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff8021492a:	e9 b3 d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021492f:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214936:	e9 a7 d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021493b:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214942:	e9 9b d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214947:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021494e:	e9 8f d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214953:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021495a:	e9 83 d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021495f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214966:	e9 77 d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff8021496b:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214972:	e9 6b d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214977:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff8021497e:	e9 5f d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214983:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff8021498a:	e9 53 d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8021498f:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214996:	e9 47 d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff8021499b:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802149a2:	e9 3b d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802149a7:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802149ae:	e9 2f d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802149b3:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802149ba:	e9 23 d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802149bf:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802149c6:	e9 17 d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802149cb:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff802149d2:	e9 0b d2 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802149d7:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff802149de:	e9 ff d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802149e3:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff802149ea:	e9 f3 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff802149ef:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff802149f6:	e9 e7 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff802149fb:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a02:	e9 db d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214a07:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a0e:	e9 cf d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80214a13:	85 c0                	test   %eax,%eax
ffffffff80214a15:	0f 85 6d f9 ff ff    	jne    ffffffff80214388 <_RME_Svc_Handler+0x3648>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80214a1b:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80214a20:	48 c1 e1 33          	shl    $0x33,%rcx
ffffffff80214a24:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80214a29:	0f 94 c1             	sete   %cl
	return (rme_ptr_t)Zero;
ffffffff80214a2c:	e9 57 f9 ff ff       	jmp    ffffffff80214388 <_RME_Svc_Handler+0x3648>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80214a31:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff80214a38:	e9 a5 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214a3d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214a44:	e9 99 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214a49:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a50:	e9 8d d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214a55:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a5c:	e9 81 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214a61:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a68:	e9 75 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214a6d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a74:	e9 69 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214a79:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214a80:	e9 5d d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214a85:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214a8c:	e9 51 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214a91:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214a98:	e9 45 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214a9d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214aa4:	e9 39 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214aa9:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ab0:	e9 2d d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214ab5:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214abc:	e9 21 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214ac1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ac8:	e9 15 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214acd:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214ad4:	e9 09 d1 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214ad9:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214ae0:	e9 fd d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214ae5:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214aec:	e9 f1 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214af1:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214af8:	e9 e5 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214afd:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214b04:	e9 d9 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b09:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b10:	e9 cd d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b15:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b1c:	e9 c1 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b21:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b28:	e9 b5 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b2d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b34:	e9 a9 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b39:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214b40:	e9 9d d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b45:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b4c:	e9 91 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b51:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b58:	e9 85 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b5d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214b64:	e9 79 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b69:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b70:	e9 6d d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b75:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b7c:	e9 61 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b81:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214b88:	e9 55 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b8d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214b94:	e9 49 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214b99:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214ba0:	e9 3d d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214ba5:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214bac:	e9 31 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214bb1:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214bb8:	e9 25 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214bbd:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214bc4:	e9 19 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214bc9:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214bd0:	e9 0d d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214bd5:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214bdc:	e9 01 d0 ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214be1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214be8:	e9 f5 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214bed:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214bf4:	e9 e9 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214bf9:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c00:	e9 dd cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c05:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c0c:	e9 d1 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c11:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c18:	e9 c5 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c1d:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c24:	e9 b9 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c29:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c30:	e9 ad cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c35:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c3c:	e9 a1 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c41:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c48:	e9 95 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c4d:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c54:	e9 89 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c59:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c60:	e9 7d cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c65:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c6c:	e9 71 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c71:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c78:	e9 65 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c7d:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214c84:	e9 59 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c89:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214c90:	e9 4d cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214c95:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214c9c:	e9 41 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214ca1:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ca8:	e9 35 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214cad:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214cb4:	e9 29 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214cb9:	48 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%rsi
ffffffff80214cc0:	e9 1d cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214cc5:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214ccc:	e9 11 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214cd1:	48 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%rsi
ffffffff80214cd8:	e9 05 cf ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        return RME_ERR_PGT_ADDR;
ffffffff80214cdd:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff80214ce4:	e9 f9 ce ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214ce9:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214cf0:	e9 ed ce ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        RME_CAP_DEFROST(Inv_Del,Type_Stat);
ffffffff80214cf5:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff80214cfc:	00 ff ff 
ffffffff80214cff:	48 21 c2             	and    %rax,%rdx
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80214d02:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80214d07:	0f 94 c2             	sete   %dl
        return RME_ERR_SIV_ACT;
ffffffff80214d0a:	48 c7 c6 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rsi
ffffffff80214d11:	e9 cc ce ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        RME_CAP_DEFROST(Sig_Del,Type_Stat);
ffffffff80214d16:	48 b9 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rcx
ffffffff80214d1d:	00 ff ff 
ffffffff80214d20:	48 21 c1             	and    %rax,%rcx
ffffffff80214d23:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80214d28:	0f 94 c1             	sete   %cl
        return RME_ERR_SIV_ACT;
ffffffff80214d2b:	eb dd                	jmp    ffffffff80214d0a <_RME_Svc_Handler+0x3fca>
        return RME_ERR_PTH_NOTIF;
ffffffff80214d2d:	48 c7 c6 31 ff ff ff 	mov    $0xffffffffffffff31,%rsi
ffffffff80214d34:	e9 a9 ce ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff80214d39:	48 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rsi
ffffffff80214d40:	e9 9d ce ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        RME_CAP_DEFROST(Thd_Del,Type_Stat);
ffffffff80214d45:	48 ba ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rdx
ffffffff80214d4c:	00 ff ff 
ffffffff80214d4f:	48 21 c2             	and    %rax,%rdx
ffffffff80214d52:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff80214d57:	0f 94 c2             	sete   %dl
        return RME_ERR_PTH_INVSTATE;
ffffffff80214d5a:	48 c7 c6 34 ff ff ff 	mov    $0xffffffffffffff34,%rsi
ffffffff80214d61:	e9 7c ce ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214d66:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214d6d:	e9 70 ce ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214d72:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214d79:	e9 64 ce ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
        return RME_ERR_PGT_ADDR;
ffffffff80214d7e:	48 c7 c6 9b ff ff ff 	mov    $0xffffffffffffff9b,%rsi
ffffffff80214d85:	e9 58 ce ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80214d8a:	48 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rsi
ffffffff80214d91:	e9 4c ce ff ff       	jmp    ffffffff80211be2 <_RME_Svc_Handler+0xea2>
ffffffff80214d96:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80214d9d:	00 00 00 

ffffffff80214da0 <_RME_Kern_Snd>:
{
ffffffff80214da0:	f3 0f 1e fa          	endbr64
ffffffff80214da4:	41 54                	push   %r12
ffffffff80214da6:	55                   	push   %rbp
ffffffff80214da7:	53                   	push   %rbx
    Thd_Sig=Cap_Sig->Thd;
ffffffff80214da8:	48 8b 6f 30          	mov    0x30(%rdi),%rbp
{
ffffffff80214dac:	48 89 fb             	mov    %rdi,%rbx
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff80214daf:	48 85 ed             	test   %rbp,%rbp
ffffffff80214db2:	74 0e                	je     ffffffff80214dc2 <_RME_Kern_Snd+0x22>
        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff80214db4:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff80214db8:	e8 82 6a ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80214dbd:	49 39 c4             	cmp    %rax,%r12
ffffffff80214dc0:	74 26                	je     ffffffff80214de8 <_RME_Kern_Snd+0x48>
	__asm__ __volatile__("LOCK XADDQ %[Addend], %[Ptr]"
ffffffff80214dc2:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80214dc7:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80214dcd:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80214dd4:	ff ff 7f 
ffffffff80214dd7:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214dda:	72 7f                	jb     ffffffff80214e5b <_RME_Kern_Snd+0xbb>
    return 0;
ffffffff80214ddc:	31 c0                	xor    %eax,%eax
}
ffffffff80214dde:	5b                   	pop    %rbx
ffffffff80214ddf:	5d                   	pop    %rbp
ffffffff80214de0:	41 5c                	pop    %r12
ffffffff80214de2:	c3                   	ret
ffffffff80214de3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff80214de8:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80214def:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214df4:	e8 87 64 00 00       	call   ffffffff8021b280 <__RME_Svc_Retval_Set>
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff80214df9:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff80214dfe:	74 78                	je     ffffffff80214e78 <_RME_Kern_Snd+0xd8>
    Prio=Thd->Sched.Prio;
ffffffff80214e00:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
    Local=Thd->Sched.Local;
ffffffff80214e04:	48 8b 45 28          	mov    0x28(%rbp),%rax
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff80214e08:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff80214e0f:	00 
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80214e10:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214e13:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80214e17:	48 8d 3c 30          	lea    (%rax,%rsi,1),%rdi
ffffffff80214e1b:	48 8d 74 30 28       	lea    0x28(%rax,%rsi,1),%rsi
ffffffff80214e20:	48 8b 57 30          	mov    0x30(%rdi),%rdx
ffffffff80214e24:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214e29:	48 89 ce             	mov    %rcx,%rsi
    Next->Prev=New;
ffffffff80214e2c:	48 89 6f 30          	mov    %rbp,0x30(%rdi)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214e30:	48 c1 ee 06          	shr    $0x6,%rsi
    New->Next=Next;
ffffffff80214e34:	66 48 0f 6e ca       	movq   %rdx,%xmm1
ffffffff80214e39:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff80214e3d:	0f 11 45 00          	movups %xmm0,0x0(%rbp)
    Prev->Next=New;
ffffffff80214e41:	48 89 2a             	mov    %rbp,(%rdx)
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80214e44:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80214e49:	48 d3 e2             	shl    %cl,%rdx
ffffffff80214e4c:	48 09 54 f0 20       	or     %rdx,0x20(%rax,%rsi,8)
        Cap_Sig->Thd=RME_NULL;
ffffffff80214e51:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff80214e58:	00 
ffffffff80214e59:	eb 81                	jmp    ffffffff80214ddc <_RME_Kern_Snd+0x3c>
ffffffff80214e5b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80214e62:	f0 48 0f c1 43 28    	lock xadd %rax,0x28(%rbx)
            return RME_ERR_SIV_FULL;
ffffffff80214e68:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff80214e6f:	e9 6a ff ff ff       	jmp    ffffffff80214dde <_RME_Kern_Snd+0x3e>
ffffffff80214e74:	0f 1f 40 00          	nopl   0x0(%rax)
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff80214e78:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff80214e7f:	00 
            _RME_Run_Notif(Thd_Sig);
ffffffff80214e80:	48 89 ef             	mov    %rbp,%rdi
ffffffff80214e83:	e8 d8 8c ff ff       	call   ffffffff8020db60 <_RME_Run_Notif>
ffffffff80214e88:	eb c7                	jmp    ffffffff80214e51 <_RME_Kern_Snd+0xb1>
ffffffff80214e8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80214e90 <_RME_Thd_Fatal>:
{
ffffffff80214e90:	f3 0f 1e fa          	endbr64
ffffffff80214e94:	41 55                	push   %r13
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80214e96:	31 f6                	xor    %esi,%esi
ffffffff80214e98:	ba 01 00 00 00       	mov    $0x1,%edx
{
ffffffff80214e9d:	41 54                	push   %r12
ffffffff80214e9f:	55                   	push   %rbp
ffffffff80214ea0:	48 89 fd             	mov    %rdi,%rbp
ffffffff80214ea3:	53                   	push   %rbx
ffffffff80214ea4:	48 83 ec 08          	sub    $0x8,%rsp
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80214ea8:	e8 03 79 ff ff       	call   ffffffff8020c7b0 <_RME_Inv_Ret>
ffffffff80214ead:	48 85 c0             	test   %rax,%rax
ffffffff80214eb0:	75 0e                	jne    ffffffff80214ec0 <_RME_Thd_Fatal+0x30>
}
ffffffff80214eb2:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80214eb6:	5b                   	pop    %rbx
ffffffff80214eb7:	5d                   	pop    %rbp
ffffffff80214eb8:	41 5c                	pop    %r12
ffffffff80214eba:	41 5d                	pop    %r13
ffffffff80214ebc:	c3                   	ret
ffffffff80214ebd:	0f 1f 00             	nopl   (%rax)
        Local=RME_CPU_LOCAL();
ffffffff80214ec0:	e8 7a 69 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
        Thd_Cur=Local->Thd_Cur;
ffffffff80214ec5:	4c 8b 60 08          	mov    0x8(%rax),%r12
        Local=RME_CPU_LOCAL();
ffffffff80214ec9:	49 89 c5             	mov    %rax,%r13
        if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80214ecc:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80214ed3:	ff ff 7f 
ffffffff80214ed6:	49 39 44 24 30       	cmp    %rax,0x30(%r12)
ffffffff80214edb:	74 73                	je     ffffffff80214f50 <_RME_Thd_Fatal+0xc0>
    Prio=Thd->Sched.Prio;
ffffffff80214edd:	49 8b 4c 24 40       	mov    0x40(%r12),%rcx
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80214ee2:	49 8b 34 24          	mov    (%r12),%rsi
ffffffff80214ee6:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
    Local=Thd->Sched.Local;
ffffffff80214eeb:	49 8b 44 24 28       	mov    0x28(%r12),%rax
    Next->Prev=Prev;
ffffffff80214ef0:	48 89 56 08          	mov    %rdx,0x8(%rsi)
    Prev->Next=Next;
ffffffff80214ef4:	48 89 32             	mov    %rsi,(%rdx)
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff80214ef7:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214efa:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80214efe:	48 8d 54 30 28       	lea    0x28(%rax,%rsi,1),%rdx
ffffffff80214f03:	48 39 54 06 28       	cmp    %rdx,0x28(%rsi,%rax,1)
ffffffff80214f08:	0f 84 b2 00 00 00    	je     ffffffff80214fc0 <_RME_Thd_Fatal+0x130>
        Thd_Cur->Sched.State=RME_THD_EXCPEND;
ffffffff80214f0e:	49 c7 44 24 38 03 00 	movq   $0x3,0x38(%r12)
ffffffff80214f15:	00 00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80214f17:	49 8d 44 24 10       	lea    0x10(%r12),%rax
ffffffff80214f1c:	49 39 44 24 10       	cmp    %rax,0x10(%r12)
ffffffff80214f21:	74 65                	je     ffffffff80214f88 <_RME_Thd_Fatal+0xf8>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80214f23:	49 8b 7c 24 70       	mov    0x70(%r12),%rdi
ffffffff80214f28:	48 85 ff             	test   %rdi,%rdi
ffffffff80214f2b:	74 05                	je     ffffffff80214f32 <_RME_Thd_Fatal+0xa2>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80214f2d:	e8 6e fe ff ff       	call   ffffffff80214da0 <_RME_Kern_Snd>
}
ffffffff80214f32:	48 83 c4 08          	add    $0x8,%rsp
        _RME_Kern_High(Reg,Local);
ffffffff80214f36:	4c 89 ee             	mov    %r13,%rsi
ffffffff80214f39:	48 89 ef             	mov    %rbp,%rdi
}
ffffffff80214f3c:	5b                   	pop    %rbx
ffffffff80214f3d:	5d                   	pop    %rbp
ffffffff80214f3e:	41 5c                	pop    %r12
ffffffff80214f40:	41 5d                	pop    %r13
        _RME_Kern_High(Reg,Local);
ffffffff80214f42:	e9 f9 bc ff ff       	jmp    ffffffff80210c40 <_RME_Kern_High>
ffffffff80214f47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80214f4e:	00 00 
ffffffff80214f50:	48 c7 c3 40 c9 21 80 	mov    $0xffffffff8021c940,%rbx
ffffffff80214f57:	eb 1d                	jmp    ffffffff80214f76 <_RME_Thd_Fatal+0xe6>
ffffffff80214f59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        __RME_Putchar(String[Count++]);
ffffffff80214f60:	e8 4b 3f 00 00       	call   ffffffff80218eb0 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff80214f65:	48 83 c3 02          	add    $0x2,%rbx
ffffffff80214f69:	48 81 fb 40 ca 21 80 	cmp    $0xffffffff8021ca40,%rbx
ffffffff80214f70:	0f 84 67 ff ff ff    	je     ffffffff80214edd <_RME_Thd_Fatal+0x4d>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff80214f76:	0f be 3b             	movsbl (%rbx),%edi
ffffffff80214f79:	40 84 ff             	test   %dil,%dil
ffffffff80214f7c:	75 e2                	jne    ffffffff80214f60 <_RME_Thd_Fatal+0xd0>
ffffffff80214f7e:	e9 5a ff ff ff       	jmp    ffffffff80214edd <_RME_Thd_Fatal+0x4d>
ffffffff80214f83:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80214f88:	49 8b 54 24 68       	mov    0x68(%r12),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80214f8d:	48 8b 8a 80 00 00 00 	mov    0x80(%rdx),%rcx
ffffffff80214f94:	48 8d 72 78          	lea    0x78(%rdx),%rsi
    Next->Prev=New;
ffffffff80214f98:	48 89 82 80 00 00 00 	mov    %rax,0x80(%rdx)
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80214f9f:	66 48 0f 6e c6       	movq   %rsi,%xmm0
    New->Next=Next;
ffffffff80214fa4:	66 48 0f 6e c9       	movq   %rcx,%xmm1
ffffffff80214fa9:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff80214fad:	41 0f 11 44 24 10    	movups %xmm0,0x10(%r12)
    Prev->Next=New;
ffffffff80214fb3:	48 89 01             	mov    %rax,(%rcx)
}
ffffffff80214fb6:	e9 68 ff ff ff       	jmp    ffffffff80214f23 <_RME_Thd_Fatal+0x93>
ffffffff80214fbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff80214fc0:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214fc3:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80214fc8:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff80214fcc:	48 d3 e2             	shl    %cl,%rdx
ffffffff80214fcf:	48 f7 d2             	not    %rdx
ffffffff80214fd2:	48 21 54 f0 20       	and    %rdx,0x20(%rax,%rsi,8)
ffffffff80214fd7:	e9 32 ff ff ff       	jmp    ffffffff80214f0e <_RME_Thd_Fatal+0x7e>
ffffffff80214fdc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80214fe0 <_RME_Tim_Handler>:
{
ffffffff80214fe0:	f3 0f 1e fa          	endbr64
ffffffff80214fe4:	41 56                	push   %r14
ffffffff80214fe6:	41 55                	push   %r13
ffffffff80214fe8:	49 89 fd             	mov    %rdi,%r13
ffffffff80214feb:	41 54                	push   %r12
ffffffff80214fed:	55                   	push   %rbp
ffffffff80214fee:	48 89 f5             	mov    %rsi,%rbp
ffffffff80214ff1:	53                   	push   %rbx
    RME_X64_Timestamp++;
ffffffff80214ff2:	48 83 05 16 10 01 00 	addq   $0x1,0x11016(%rip)        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff80214ff9:	01 
    Local=RME_CPU_LOCAL();
ffffffff80214ffa:	e8 40 68 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff80214fff:	48 b9 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rcx
ffffffff80215006:	ff ff 7f 
    Local=RME_CPU_LOCAL();
ffffffff80215009:	48 89 c3             	mov    %rax,%rbx
    Thd_Cur=Local->Thd_Cur;
ffffffff8021500c:	48 8b 40 08          	mov    0x8(%rax),%rax
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff80215010:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80215014:	48 39 d1             	cmp    %rdx,%rcx
ffffffff80215017:	72 10                	jb     ffffffff80215029 <_RME_Tim_Handler+0x49>
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff80215019:	48 39 d5             	cmp    %rdx,%rbp
ffffffff8021501c:	0f 83 fe 00 00 00    	jae    ffffffff80215120 <_RME_Tim_Handler+0x140>
            Thd_Cur->Sched.Slice-=Slice;
ffffffff80215022:	48 29 ea             	sub    %rbp,%rdx
ffffffff80215025:	48 89 50 30          	mov    %rdx,0x30(%rax)
    _RME_Kern_Snd(Local->Sig_Tim);
ffffffff80215029:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff8021502d:	e8 6e fd ff ff       	call   ffffffff80214da0 <_RME_Kern_Snd>
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80215032:	48 8b 43 20          	mov    0x20(%rbx),%rax
	__asm__ __volatile__("BSRQ %[Val],%[Ret]"
ffffffff80215036:	48 0f bd d0          	bsr    %rax,%rdx
ffffffff8021503a:	48 83 f8 01          	cmp    $0x1,%rax
    Thd_Cur=Local->Thd_Cur;
ffffffff8021503e:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80215042:	48 19 c0             	sbb    %rax,%rax
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80215045:	48 c1 e0 06          	shl    $0x6,%rax
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80215049:	48 8d 44 02 02       	lea    0x2(%rdx,%rax,1),%rax
ffffffff8021504e:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80215052:	4c 8b 64 03 08       	mov    0x8(%rbx,%rax,1),%r12
    if(Thd_New==Thd_Cur)
ffffffff80215057:	49 39 ec             	cmp    %rbp,%r12
ffffffff8021505a:	0f 84 89 00 00 00    	je     ffffffff802150e9 <_RME_Tim_Handler+0x109>
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80215060:	48 83 7d 38 00       	cmpq   $0x0,0x38(%rbp)
ffffffff80215065:	75 0b                	jne    ffffffff80215072 <_RME_Tim_Handler+0x92>
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff80215067:	49 8b 44 24 40       	mov    0x40(%r12),%rax
ffffffff8021506c:	48 39 45 40          	cmp    %rax,0x40(%rbp)
ffffffff80215070:	73 77                	jae    ffffffff802150e9 <_RME_Tim_Handler+0x109>
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff80215072:	4d 8b b4 24 90 00 00 	mov    0x90(%r12),%r14
ffffffff80215079:	00 
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff8021507a:	48 8b bd 90 00 00 00 	mov    0x90(%rbp),%rdi
ffffffff80215081:	4c 89 ee             	mov    %r13,%rsi
ffffffff80215084:	e8 b7 54 00 00       	call   ffffffff8021a540 <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80215089:	4c 89 f6             	mov    %r14,%rsi
ffffffff8021508c:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021508f:	e8 ac 54 00 00       	call   ffffffff8021a540 <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80215094:	48 8b 85 98 00 00 00 	mov    0x98(%rbp),%rax
ffffffff8021509b:	48 8d 95 98 00 00 00 	lea    0x98(%rbp),%rdx
    if(Inv_Top==(void*)RME_NULL)
ffffffff802150a2:	48 39 d0             	cmp    %rdx,%rax
ffffffff802150a5:	74 51                	je     ffffffff802150f8 <_RME_Tim_Handler+0x118>
ffffffff802150a7:	48 85 c0             	test   %rax,%rax
ffffffff802150aa:	74 4c                	je     ffffffff802150f8 <_RME_Tim_Handler+0x118>
        return Inv_Top->Prc->Pgt;
ffffffff802150ac:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802150b0:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff802150b4:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff802150bb:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff802150bc:	48 85 c0             	test   %rax,%rax
ffffffff802150bf:	74 4c                	je     ffffffff8021510d <_RME_Tim_Handler+0x12d>
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff802150c1:	49 8d 8c 24 98 00 00 	lea    0x98(%r12),%rcx
ffffffff802150c8:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff802150c9:	48 39 c8             	cmp    %rcx,%rax
ffffffff802150cc:	74 3f                	je     ffffffff8021510d <_RME_Tim_Handler+0x12d>
        return Inv_Top->Prc->Pgt;
ffffffff802150ce:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802150d2:	48 8b 78 30          	mov    0x30(%rax),%rdi
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff802150d6:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff802150da:	48 39 42 18          	cmp    %rax,0x18(%rdx)
ffffffff802150de:	74 05                	je     ffffffff802150e5 <_RME_Tim_Handler+0x105>
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff802150e0:	e8 db 5b 00 00       	call   ffffffff8021acc0 <__RME_Pgt_Set>
    Local->Thd_Cur=Thd_New;
ffffffff802150e5:	4c 89 63 08          	mov    %r12,0x8(%rbx)
}
ffffffff802150e9:	5b                   	pop    %rbx
ffffffff802150ea:	5d                   	pop    %rbp
ffffffff802150eb:	41 5c                	pop    %r12
ffffffff802150ed:	41 5d                	pop    %r13
ffffffff802150ef:	41 5e                	pop    %r14
ffffffff802150f1:	c3                   	ret
ffffffff802150f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return Thd->Sched.Prc->Pgt;
ffffffff802150f8:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff802150fc:	48 8b 50 30          	mov    0x30(%rax),%rdx
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80215100:	49 8b 84 24 98 00 00 	mov    0x98(%r12),%rax
ffffffff80215107:	00 
    if(Inv_Top==(void*)RME_NULL)
ffffffff80215108:	48 85 c0             	test   %rax,%rax
ffffffff8021510b:	75 b4                	jne    ffffffff802150c1 <_RME_Tim_Handler+0xe1>
        return Thd->Sched.Prc->Pgt;
ffffffff8021510d:	49 8b 44 24 58       	mov    0x58(%r12),%rax
ffffffff80215112:	48 8b 78 30          	mov    0x30(%rax),%rdi
ffffffff80215116:	eb be                	jmp    ffffffff802150d6 <_RME_Tim_Handler+0xf6>
ffffffff80215118:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021511f:	00 
    Prio=Thd->Sched.Prio;
ffffffff80215120:	48 8b 48 40          	mov    0x40(%rax),%rcx
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80215124:	48 8b 38             	mov    (%rax),%rdi
            Thd_Cur->Sched.Slice=0U;
ffffffff80215127:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021512e:	00 
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021512f:	48 8b 70 08          	mov    0x8(%rax),%rsi
    Local=Thd->Sched.Local;
ffffffff80215133:	48 8b 50 28          	mov    0x28(%rax),%rdx
    Next->Prev=Prev;
ffffffff80215137:	48 89 77 08          	mov    %rsi,0x8(%rdi)
    Prev->Next=Next;
ffffffff8021513b:	48 89 3e             	mov    %rdi,(%rsi)
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff8021513e:	48 89 cf             	mov    %rcx,%rdi
ffffffff80215141:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff80215145:	48 8d 74 3a 28       	lea    0x28(%rdx,%rdi,1),%rsi
ffffffff8021514a:	48 39 74 17 28       	cmp    %rsi,0x28(%rdi,%rdx,1)
ffffffff8021514f:	74 2f                	je     ffffffff80215180 <_RME_Tim_Handler+0x1a0>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80215151:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80215158:	00 
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80215159:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff8021515d:	48 39 50 10          	cmp    %rdx,0x10(%rax)
ffffffff80215161:	74 3d                	je     ffffffff802151a0 <_RME_Tim_Handler+0x1c0>
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80215163:	48 8b 78 70          	mov    0x70(%rax),%rdi
ffffffff80215167:	48 85 ff             	test   %rdi,%rdi
ffffffff8021516a:	0f 84 b9 fe ff ff    	je     ffffffff80215029 <_RME_Tim_Handler+0x49>
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80215170:	e8 2b fc ff ff       	call   ffffffff80214da0 <_RME_Kern_Snd>
ffffffff80215175:	e9 af fe ff ff       	jmp    ffffffff80215029 <_RME_Tim_Handler+0x49>
ffffffff8021517a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff80215180:	48 89 cf             	mov    %rcx,%rdi
ffffffff80215183:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80215188:	48 c1 ef 06          	shr    $0x6,%rdi
ffffffff8021518c:	48 d3 e6             	shl    %cl,%rsi
ffffffff8021518f:	48 f7 d6             	not    %rsi
ffffffff80215192:	48 21 74 fa 20       	and    %rsi,0x20(%rdx,%rdi,8)
ffffffff80215197:	eb b8                	jmp    ffffffff80215151 <_RME_Tim_Handler+0x171>
ffffffff80215199:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff802151a0:	48 8b 48 68          	mov    0x68(%rax),%rcx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff802151a4:	48 8b b1 80 00 00 00 	mov    0x80(%rcx),%rsi
    Next->Prev=New;
ffffffff802151ab:	48 89 91 80 00 00 00 	mov    %rdx,0x80(%rcx)
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff802151b2:	48 83 c1 78          	add    $0x78,%rcx
ffffffff802151b6:	66 48 0f 6e c1       	movq   %rcx,%xmm0
    New->Next=Next;
ffffffff802151bb:	66 48 0f 6e ce       	movq   %rsi,%xmm1
ffffffff802151c0:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
ffffffff802151c4:	0f 11 40 10          	movups %xmm0,0x10(%rax)
    Prev->Next=New;
ffffffff802151c8:	48 89 16             	mov    %rdx,(%rsi)
}
ffffffff802151cb:	eb 96                	jmp    ffffffff80215163 <_RME_Tim_Handler+0x183>
ffffffff802151cd:	0f 1f 00             	nopl   (%rax)

ffffffff802151d0 <_RME_Kfn_Boot_Crt>:
{
ffffffff802151d0:	f3 0f 1e fa          	endbr64
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802151d4:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff802151d8:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff802151de:	0f 85 bc 00 00 00    	jne    ffffffff802152a0 <_RME_Kfn_Boot_Crt+0xd0>
ffffffff802151e4:	48 39 ce             	cmp    %rcx,%rsi
ffffffff802151e7:	0f 83 23 01 00 00    	jae    ffffffff80215310 <_RME_Kfn_Boot_Crt+0x140>
ffffffff802151ed:	48 b9 00 00 00 00 ff 	movabs $0xffff00000000,%rcx
ffffffff802151f4:	ff 00 00 
ffffffff802151f7:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802151fb:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff802151ff:	48 bf 00 00 00 00 02 	movabs $0x200000000,%rdi
ffffffff80215206:	00 00 00 
ffffffff80215209:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021520c:	48 21 c1             	and    %rax,%rcx
ffffffff8021520f:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80215212:	0f 84 ee 00 00 00    	je     ffffffff80215306 <_RME_Kfn_Boot_Crt+0x136>
ffffffff80215218:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021521c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215220:	0f 85 fa 00 00 00    	jne    ffffffff80215320 <_RME_Kfn_Boot_Crt+0x150>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80215226:	48 8b 46 10          	mov    0x10(%rsi),%rax
ffffffff8021522a:	48 f7 d0             	not    %rax
ffffffff8021522d:	83 e0 01             	and    $0x1,%eax
ffffffff80215230:	0f 85 fa 00 00 00    	jne    ffffffff80215330 <_RME_Kfn_Boot_Crt+0x160>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kfn,struct RME_Cap_Kfn*,Kfn_Crt);
ffffffff80215236:	48 3b 56 28          	cmp    0x28(%rsi),%rdx
ffffffff8021523a:	0f 83 d0 00 00 00    	jae    ffffffff80215310 <_RME_Kfn_Boot_Crt+0x140>
	__asm__ __volatile__("LOCK CMPXCHGQ %[New], %[Ptr]; SETZ %[Zero]"
ffffffff80215240:	48 b9 00 00 00 00 01 	movabs $0x100000000,%rcx
ffffffff80215247:	00 00 00 
ffffffff8021524a:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021524e:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff80215252:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff80215257:	0f 94 c1             	sete   %cl
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff8021525a:	84 c9                	test   %cl,%cl
ffffffff8021525c:	0f 84 de 00 00 00    	je     ffffffff80215340 <_RME_Kfn_Boot_Crt+0x170>
ffffffff80215262:	48 8b 05 a7 0d 01 00 	mov    0x10da7(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff80215269:	48 89 42 20          	mov    %rax,0x20(%rdx)
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff8021526d:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
ffffffff80215274:	ff ff ff 
    Kfn_Crt->Head.Root_Ref=1U;
ffffffff80215277:	48 c7 42 08 01 00 00 	movq   $0x1,0x8(%rdx)
ffffffff8021527e:	00 
    Kfn_Crt->Head.Object=0U;
ffffffff8021527f:	48 c7 42 18 00 00 00 	movq   $0x0,0x18(%rdx)
ffffffff80215286:	00 
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff80215287:	48 89 42 10          	mov    %rax,0x10(%rdx)
    RME_WRITE_RELEASE(&(Kfn_Crt->Head.Type_Stat),
ffffffff8021528b:	48 b8 00 00 00 00 00 	movabs $0x1000000000000,%rax
ffffffff80215292:	00 01 00 
ffffffff80215295:	48 89 02             	mov    %rax,(%rdx)
    return 0;
ffffffff80215298:	31 c0                	xor    %eax,%eax
ffffffff8021529a:	c3                   	ret
ffffffff8021529b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802152a0:	48 89 f0             	mov    %rsi,%rax
ffffffff802152a3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802152a7:	48 39 c8             	cmp    %rcx,%rax
ffffffff802152aa:	73 64                	jae    ffffffff80215310 <_RME_Kfn_Boot_Crt+0x140>
ffffffff802152ac:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff802152b3:	00 00 00 
ffffffff802152b6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802152ba:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff802152be:	48 bf 00 00 00 00 ff 	movabs $0xffff00000000,%rdi
ffffffff802152c5:	ff 00 00 
ffffffff802152c8:	48 8b 08             	mov    (%rax),%rcx
ffffffff802152cb:	49 89 c9             	mov    %rcx,%r9
ffffffff802152ce:	49 21 f9             	and    %rdi,%r9
ffffffff802152d1:	4d 39 c1             	cmp    %r8,%r9
ffffffff802152d4:	74 30                	je     ffffffff80215306 <_RME_Kfn_Boot_Crt+0x136>
ffffffff802152d6:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802152da:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802152de:	75 40                	jne    ffffffff80215320 <_RME_Kfn_Boot_Crt+0x150>
ffffffff802152e0:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff802152e4:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff802152ea:	48 39 ce             	cmp    %rcx,%rsi
ffffffff802152ed:	73 21                	jae    ffffffff80215310 <_RME_Kfn_Boot_Crt+0x140>
ffffffff802152ef:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802152f3:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff802152f7:	48 8b 06             	mov    (%rsi),%rax
ffffffff802152fa:	48 21 c7             	and    %rax,%rdi
ffffffff802152fd:	4c 39 c7             	cmp    %r8,%rdi
ffffffff80215300:	0f 85 12 ff ff ff    	jne    ffffffff80215218 <_RME_Kfn_Boot_Crt+0x48>
ffffffff80215306:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021530d:	c3                   	ret
ffffffff8021530e:	66 90                	xchg   %ax,%ax
ffffffff80215310:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215317:	c3                   	ret
ffffffff80215318:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021531f:	00 
ffffffff80215320:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215327:	c3                   	ret
ffffffff80215328:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021532f:	00 
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80215330:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215337:	c3                   	ret
ffffffff80215338:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021533f:	00 
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff80215340:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
}
ffffffff80215347:	c3                   	ret
ffffffff80215348:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021534f:	00 

ffffffff80215350 <__RME_X64_LAPIC_Init>:
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff80215350:	48 8b 05 d9 10 01 00 	mov    0x110d9(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>

    /* Enable local APIC; set spurious interrupt vector to 32 */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_SVR, RME_X64_LAPIC_SVR_ENABLE|RME_X64_INT_SPUR);
ffffffff80215357:	48 8b 15 d2 10 01 00 	mov    0x110d2(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021535e:	48 b8 f0 00 00 00 00 	movabs $0xffff8000000000f0,%rax
ffffffff80215365:	80 ff ff 
ffffffff80215368:	c7 04 02 80 01 00 00 	movl   $0x180,(%rdx,%rax,1)

    /* Disable local interrupt lines */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff8021536f:	48 8b 15 ba 10 01 00 	mov    0x110ba(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);

    /* Disable performance counter overflow interrupts when there is one */
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff80215376:	48 8d 80 40 ff ff ff 	lea    -0xc0(%rax),%rax
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff8021537d:	c7 84 10 20 03 00 00 	movl   $0x10000,0x320(%rax,%rdx,1)
ffffffff80215384:	00 00 01 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);
ffffffff80215388:	48 8b 15 a1 10 01 00 	mov    0x110a1(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021538f:	c7 84 10 30 03 00 00 	movl   $0x10000,0x330(%rax,%rdx,1)
ffffffff80215396:	00 00 01 00 
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff8021539a:	48 8b 15 8f 10 01 00 	mov    0x1108f(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff802153a1:	f7 04 10 00 00 fc 00 	testl  $0xfc0000,(%rax,%rdx,1)
ffffffff802153a8:	74 12                	je     ffffffff802153bc <__RME_X64_LAPIC_Init+0x6c>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_PCINT, RME_X64_LAPIC_MASKED);
ffffffff802153aa:	48 8b 15 7f 10 01 00 	mov    0x1107f(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff802153b1:	c7 84 10 10 03 00 00 	movl   $0x10000,0x310(%rax,%rdx,1)
ffffffff802153b8:	00 00 01 00 

    /* Map error interrupt to IRQ_ERROR */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ERROR, RME_X64_INT_ERROR);
ffffffff802153bc:	48 8b 15 6d 10 01 00 	mov    0x1106d(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff802153c3:	48 b8 70 03 00 00 00 	movabs $0xffff800000000370,%rax
ffffffff802153ca:	80 ff ff 
ffffffff802153cd:	c7 04 02 81 00 00 00 	movl   $0x81,(%rdx,%rax,1)

    /* Clear error status register (requires back-to-back writes) */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff802153d4:	48 8b 15 55 10 01 00 	mov    0x11055(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff802153db:	c7 84 10 10 ff ff ff 	movl   $0x0,-0xf0(%rax,%rdx,1)
ffffffff802153e2:	00 00 00 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff802153e6:	48 8b 15 43 10 01 00 	mov    0x11043(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff802153ed:	c7 84 10 10 ff ff ff 	movl   $0x0,-0xf0(%rax,%rdx,1)
ffffffff802153f4:	00 00 00 00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff802153f8:	48 8b 15 31 10 01 00 	mov    0x11031(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff802153ff:	c7 84 10 40 fd ff ff 	movl   $0x0,-0x2c0(%rax,%rdx,1)
ffffffff80215406:	00 00 00 00 

    /* Acknowledge any outstanding interrupts */
    __RME_X64_LAPIC_Ack();

    /* Send an Init Level De-Assert to synchronise arbitration IDs */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0);
ffffffff8021540a:	48 8b 15 1f 10 01 00 	mov    0x1101f(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80215411:	c7 44 10 a0 00 00 00 	movl   $0x0,-0x60(%rax,%rdx,1)
ffffffff80215418:	00 
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_BCAST|
ffffffff80215419:	48 8b 05 10 10 01 00 	mov    0x11010(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80215420:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80215427:	80 ff ff 
ffffffff8021542a:	c7 04 10 00 85 08 00 	movl   $0x88500,(%rax,%rdx,1)
                                             RME_X64_LAPIC_ICRLO_INIT|
                                             RME_X64_LAPIC_ICRLO_LEVEL);
    while(RME_X64_LAPIC_READ(RME_X64_LAPIC_ICRLO)&RME_X64_LAPIC_ICRLO_DELIVS);
ffffffff80215431:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80215438:	48 8b 05 f1 0f 01 00 	mov    0x10ff1(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021543f:	8b 04 10             	mov    (%rax,%rdx,1),%eax
ffffffff80215442:	f6 c4 10             	test   $0x10,%ah
ffffffff80215445:	75 f1                	jne    ffffffff80215438 <__RME_X64_LAPIC_Init+0xe8>

    /* Enable interrupts on the APIC */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_TPR, 0);
ffffffff80215447:	48 8b 15 e2 0f 01 00 	mov    0x10fe2(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021544e:	48 b8 80 00 00 00 00 	movabs $0xffff800000000080,%rax
ffffffff80215455:	80 ff ff 
ffffffff80215458:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
}
ffffffff8021545f:	c3                   	ret

ffffffff80215460 <__RME_X64_CPU_Local_Init>:
{
ffffffff80215460:	55                   	push   %rbp
ffffffff80215461:	53                   	push   %rbx
ffffffff80215462:	48 83 ec 18          	sub    $0x18,%rsp
    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff80215466:	48 8b 05 63 20 01 00 	mov    0x12063(%rip),%rax        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff8021546d:	48 8b 1d 2c 20 01 00 	mov    0x1202c(%rip),%rbx        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff80215474:	48 c1 e3 0d          	shl    $0xd,%rbx
ffffffff80215478:	48 01 c3             	add    %rax,%rbx
    for(Count=0;Count<256;Count++)
ffffffff8021547b:	48 8d 93 00 10 00 00 	lea    0x1000(%rbx),%rdx
    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff80215482:	48 89 d8             	mov    %rbx,%rax
ffffffff80215485:	0f 1f 00             	nopl   (%rax)
        IDT_Table[Count].Type_Attr=0;
ffffffff80215488:	c6 40 05 00          	movb   $0x0,0x5(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021548c:	48 83 c0 20          	add    $0x20,%rax
        IDT_Table[Count].Type_Attr=0;
ffffffff80215490:	c6 40 f5 00          	movb   $0x0,-0xb(%rax)
    for(Count=0;Count<256;Count++)
ffffffff80215494:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215497:	75 ef                	jne    ffffffff80215488 <__RME_X64_CPU_Local_Init+0x28>
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff80215499:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff802154a0:	c7 43 02 08 00 00 8e 	movl   $0x8e000008,0x2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff802154a7:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff802154ac:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff802154b1:	66 89 03             	mov    %ax,(%rbx)
ffffffff802154b4:	48 89 c2             	mov    %rax,%rdx
ffffffff802154b7:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff802154bb:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff802154c0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802154c4:	89 43 08             	mov    %eax,0x8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff802154c7:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff802154ce:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff802154d4:	66 89 53 06          	mov    %dx,0x6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff802154d8:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff802154db:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff802154e1:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff802154e7:	66 89 43 10          	mov    %ax,0x10(%rbx)
ffffffff802154eb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802154ef:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff802154f3:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff802154f9:	89 43 18             	mov    %eax,0x18(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff802154fc:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215503:	66 89 53 16          	mov    %dx,0x16(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80215507:	48 89 c2             	mov    %rax,%rdx
ffffffff8021550a:	66 89 43 20          	mov    %ax,0x20(%rbx)
ffffffff8021550e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215512:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215516:	89 43 28             	mov    %eax,0x28(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80215519:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff80215520:	66 89 53 26          	mov    %dx,0x26(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff80215524:	48 89 c2             	mov    %rax,%rdx
ffffffff80215527:	66 89 43 30          	mov    %ax,0x30(%rbx)
ffffffff8021552b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021552f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215533:	89 43 38             	mov    %eax,0x38(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80215536:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8021553d:	66 89 53 36          	mov    %dx,0x36(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff80215541:	48 89 c2             	mov    %rax,%rdx
ffffffff80215544:	66 89 43 40          	mov    %ax,0x40(%rbx)
ffffffff80215548:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021554c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215550:	89 43 48             	mov    %eax,0x48(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80215553:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8021555a:	66 89 53 46          	mov    %dx,0x46(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8021555e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215561:	66 89 43 50          	mov    %ax,0x50(%rbx)
ffffffff80215565:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215569:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021556d:	89 43 58             	mov    %eax,0x58(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff80215570:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff80215577:	66 89 53 56          	mov    %dx,0x56(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8021557b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021557e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215582:	66 89 43 60          	mov    %ax,0x60(%rbx)
ffffffff80215586:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8021558a:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff80215591:	c7 43 12 08 00 00 8e 	movl   $0x8e000008,0x12(%rbx)
ffffffff80215598:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8021559f:	c7 43 22 08 00 00 8e 	movl   $0x8e000008,0x22(%rbx)
ffffffff802155a6:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff802155ad:	c7 43 32 08 00 00 ee 	movl   $0xee000008,0x32(%rbx)
ffffffff802155b4:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff802155bb:	c7 43 42 08 00 00 8e 	movl   $0x8e000008,0x42(%rbx)
ffffffff802155c2:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff802155c9:	c7 43 52 08 00 00 8e 	movl   $0x8e000008,0x52(%rbx)
ffffffff802155d0:	c7 43 5c 00 00 00 00 	movl   $0x0,0x5c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff802155d7:	c7 43 62 08 00 00 8e 	movl   $0x8e000008,0x62(%rbx)
ffffffff802155de:	66 89 53 66          	mov    %dx,0x66(%rbx)
ffffffff802155e2:	89 43 68             	mov    %eax,0x68(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff802155e5:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff802155ec:	66 89 43 70          	mov    %ax,0x70(%rbx)
ffffffff802155f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802155f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802155f7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802155fb:	89 43 78             	mov    %eax,0x78(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff802155fe:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff80215605:	66 89 53 76          	mov    %dx,0x76(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215609:	48 89 c2             	mov    %rax,%rdx
ffffffff8021560c:	66 89 83 80 00 00 00 	mov    %ax,0x80(%rbx)
ffffffff80215613:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215617:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021561b:	89 83 88 00 00 00    	mov    %eax,0x88(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff80215621:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff80215628:	66 89 93 86 00 00 00 	mov    %dx,0x86(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8021562f:	48 89 c2             	mov    %rax,%rdx
ffffffff80215632:	66 89 83 90 00 00 00 	mov    %ax,0x90(%rbx)
ffffffff80215639:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021563d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215641:	89 83 98 00 00 00    	mov    %eax,0x98(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80215647:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8021564e:	66 89 93 96 00 00 00 	mov    %dx,0x96(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80215655:	48 89 c2             	mov    %rax,%rdx
ffffffff80215658:	66 89 83 a0 00 00 00 	mov    %ax,0xa0(%rbx)
ffffffff8021565f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215663:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215667:	89 83 a8 00 00 00    	mov    %eax,0xa8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021566d:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff80215674:	66 89 93 a6 00 00 00 	mov    %dx,0xa6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021567b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021567e:	66 89 83 b0 00 00 00 	mov    %ax,0xb0(%rbx)
ffffffff80215685:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215689:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021568d:	89 83 b8 00 00 00    	mov    %eax,0xb8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215693:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021569a:	66 89 93 b6 00 00 00 	mov    %dx,0xb6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff802156a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802156a4:	66 89 83 c0 00 00 00 	mov    %ax,0xc0(%rbx)
ffffffff802156ab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802156af:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802156b3:	89 83 c8 00 00 00    	mov    %eax,0xc8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff802156b9:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff802156c0:	66 89 93 c6 00 00 00 	mov    %dx,0xc6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff802156c7:	48 89 c2             	mov    %rax,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff802156ca:	c7 43 6c 00 00 00 00 	movl   $0x0,0x6c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff802156d1:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff802156d5:	c7 43 72 08 00 00 8e 	movl   $0x8e000008,0x72(%rbx)
ffffffff802156dc:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff802156e3:	c7 83 82 00 00 00 08 	movl   $0x8e000008,0x82(%rbx)
ffffffff802156ea:	00 00 8e 
ffffffff802156ed:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%rbx)
ffffffff802156f4:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff802156f7:	c7 83 92 00 00 00 08 	movl   $0x8e000008,0x92(%rbx)
ffffffff802156fe:	00 00 8e 
ffffffff80215701:	c7 83 9c 00 00 00 00 	movl   $0x0,0x9c(%rbx)
ffffffff80215708:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8021570b:	c7 83 a2 00 00 00 08 	movl   $0x8e000008,0xa2(%rbx)
ffffffff80215712:	00 00 8e 
ffffffff80215715:	c7 83 ac 00 00 00 00 	movl   $0x0,0xac(%rbx)
ffffffff8021571c:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021571f:	c7 83 b2 00 00 00 08 	movl   $0x8e000008,0xb2(%rbx)
ffffffff80215726:	00 00 8e 
ffffffff80215729:	c7 83 bc 00 00 00 00 	movl   $0x0,0xbc(%rbx)
ffffffff80215730:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff80215733:	c7 83 c2 00 00 00 08 	movl   $0x8e000008,0xc2(%rbx)
ffffffff8021573a:	00 00 8e 
ffffffff8021573d:	c7 83 cc 00 00 00 00 	movl   $0x0,0xcc(%rbx)
ffffffff80215744:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff80215747:	66 89 83 d0 00 00 00 	mov    %ax,0xd0(%rbx)
ffffffff8021574e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215752:	89 83 d8 00 00 00    	mov    %eax,0xd8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215758:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8021575f:	66 89 93 d6 00 00 00 	mov    %dx,0xd6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215766:	48 89 c2             	mov    %rax,%rdx
ffffffff80215769:	66 89 83 e0 00 00 00 	mov    %ax,0xe0(%rbx)
ffffffff80215770:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215774:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215778:	89 83 e8 00 00 00    	mov    %eax,0xe8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021577e:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215785:	66 89 93 e6 00 00 00 	mov    %dx,0xe6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021578c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021578f:	66 89 83 00 01 00 00 	mov    %ax,0x100(%rbx)
ffffffff80215796:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021579a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021579e:	89 83 08 01 00 00    	mov    %eax,0x108(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff802157a4:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff802157ab:	66 89 93 06 01 00 00 	mov    %dx,0x106(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff802157b2:	48 89 c2             	mov    %rax,%rdx
ffffffff802157b5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802157b9:	66 89 83 10 01 00 00 	mov    %ax,0x110(%rbx)
ffffffff802157c0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802157c4:	89 83 18 01 00 00    	mov    %eax,0x118(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff802157ca:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff802157d1:	66 89 93 16 01 00 00 	mov    %dx,0x116(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff802157d8:	48 89 c2             	mov    %rax,%rdx
ffffffff802157db:	66 89 83 20 01 00 00 	mov    %ax,0x120(%rbx)
ffffffff802157e2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802157e6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802157ea:	89 83 28 01 00 00    	mov    %eax,0x128(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff802157f0:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff802157f7:	66 89 93 26 01 00 00 	mov    %dx,0x126(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff802157fe:	48 89 c2             	mov    %rax,%rdx
ffffffff80215801:	66 89 83 30 01 00 00 	mov    %ax,0x130(%rbx)
ffffffff80215808:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021580c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80215810:	89 83 38 01 00 00    	mov    %eax,0x138(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80215816:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021581d:	66 89 93 36 01 00 00 	mov    %dx,0x136(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff80215824:	48 89 c2             	mov    %rax,%rdx
ffffffff80215827:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021582b:	66 89 83 40 01 00 00 	mov    %ax,0x140(%rbx)
ffffffff80215832:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215836:	66 89 93 46 01 00 00 	mov    %dx,0x146(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8021583d:	c7 83 d2 00 00 00 08 	movl   $0x8e000008,0xd2(%rbx)
ffffffff80215844:	00 00 8e 
ffffffff80215847:	c7 83 dc 00 00 00 00 	movl   $0x0,0xdc(%rbx)
ffffffff8021584e:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff80215851:	c7 83 e2 00 00 00 08 	movl   $0x8e000008,0xe2(%rbx)
ffffffff80215858:	00 00 8e 
ffffffff8021585b:	c7 83 ec 00 00 00 00 	movl   $0x0,0xec(%rbx)
ffffffff80215862:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff80215865:	c7 83 02 01 00 00 08 	movl   $0x8e000008,0x102(%rbx)
ffffffff8021586c:	00 00 8e 
ffffffff8021586f:	c7 83 0c 01 00 00 00 	movl   $0x0,0x10c(%rbx)
ffffffff80215876:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff80215879:	c7 83 12 01 00 00 08 	movl   $0x8e000008,0x112(%rbx)
ffffffff80215880:	00 00 8e 
ffffffff80215883:	c7 83 1c 01 00 00 00 	movl   $0x0,0x11c(%rbx)
ffffffff8021588a:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8021588d:	c7 83 22 01 00 00 08 	movl   $0x8e000008,0x122(%rbx)
ffffffff80215894:	00 00 8e 
ffffffff80215897:	c7 83 2c 01 00 00 00 	movl   $0x0,0x12c(%rbx)
ffffffff8021589e:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff802158a1:	c7 83 32 01 00 00 08 	movl   $0x8e000008,0x132(%rbx)
ffffffff802158a8:	00 00 8e 
ffffffff802158ab:	c7 83 3c 01 00 00 00 	movl   $0x0,0x13c(%rbx)
ffffffff802158b2:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff802158b5:	c7 83 42 01 00 00 08 	movl   $0x8e000008,0x142(%rbx)
ffffffff802158bc:	00 00 8e 
ffffffff802158bf:	89 83 48 01 00 00    	mov    %eax,0x148(%rbx)
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff802158c5:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff802158cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802158cf:	66 89 8b 12 02 00 00 	mov    %cx,0x212(%rbx)
ffffffff802158d6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802158da:	66 89 83 00 02 00 00 	mov    %ax,0x200(%rbx)
ffffffff802158e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802158e5:	66 89 93 06 02 00 00 	mov    %dx,0x206(%rbx)
ffffffff802158ec:	48 c7 c2 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rdx
ffffffff802158f3:	66 89 93 10 02 00 00 	mov    %dx,0x210(%rbx)
ffffffff802158fa:	48 89 d1             	mov    %rdx,%rcx
ffffffff802158fd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215901:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215905:	89 93 18 02 00 00    	mov    %edx,0x218(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021590b:	48 c7 c2 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215912:	66 89 8b 16 02 00 00 	mov    %cx,0x216(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff80215919:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021591c:	66 89 93 20 02 00 00 	mov    %dx,0x220(%rbx)
ffffffff80215923:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215927:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021592b:	89 93 28 02 00 00    	mov    %edx,0x228(%rbx)
ffffffff80215931:	48 c7 c2 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rdx
ffffffff80215938:	66 89 8b 26 02 00 00 	mov    %cx,0x226(%rbx)
ffffffff8021593f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215942:	66 89 93 30 02 00 00 	mov    %dx,0x230(%rbx)
ffffffff80215949:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021594d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215951:	89 93 38 02 00 00    	mov    %edx,0x238(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215957:	48 c7 c2 05 ba 20 80 	mov    $0xffffffff8020ba05,%rdx
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021595e:	66 89 8b 36 02 00 00 	mov    %cx,0x236(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215965:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215968:	66 89 93 40 02 00 00 	mov    %dx,0x240(%rbx)
ffffffff8021596f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215973:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215977:	89 93 48 02 00 00    	mov    %edx,0x248(%rbx)
ffffffff8021597d:	48 c7 c2 11 ba 20 80 	mov    $0xffffffff8020ba11,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff80215984:	89 83 08 02 00 00    	mov    %eax,0x208(%rbx)
ffffffff8021598a:	0f b7 05 2f 7e 00 00 	movzwl 0x7e2f(%rip),%eax        # ffffffff8021d7c0 <RME_X64_Pgflg_RME2NAT+0x100>
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215991:	66 89 8b 46 02 00 00 	mov    %cx,0x246(%rbx)
ffffffff80215998:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021599b:	66 89 93 50 02 00 00 	mov    %dx,0x250(%rbx)
ffffffff802159a2:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802159a6:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802159aa:	89 93 58 02 00 00    	mov    %edx,0x258(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff802159b0:	48 c7 c2 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff802159b7:	66 89 83 14 02 00 00 	mov    %ax,0x214(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff802159be:	66 89 8b 56 02 00 00 	mov    %cx,0x256(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff802159c5:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff802159c8:	c7 83 4c 01 00 00 00 	movl   $0x0,0x14c(%rbx)
ffffffff802159cf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff802159d2:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff802159d6:	c7 83 02 02 00 00 08 	movl   $0x8e000008,0x202(%rbx)
ffffffff802159dd:	00 00 8e 
ffffffff802159e0:	c7 83 0c 02 00 00 00 	movl   $0x0,0x20c(%rbx)
ffffffff802159e7:	00 00 00 
ffffffff802159ea:	c7 83 1c 02 00 00 00 	movl   $0x0,0x21c(%rbx)
ffffffff802159f1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff802159f4:	c7 83 22 02 00 00 08 	movl   $0x8e000008,0x222(%rbx)
ffffffff802159fb:	00 00 8e 
ffffffff802159fe:	c7 83 2c 02 00 00 00 	movl   $0x0,0x22c(%rbx)
ffffffff80215a05:	00 00 00 
ffffffff80215a08:	c7 83 32 02 00 00 08 	movl   $0x8e000008,0x232(%rbx)
ffffffff80215a0f:	00 00 8e 
ffffffff80215a12:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%rbx)
ffffffff80215a19:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff80215a1c:	c7 83 42 02 00 00 08 	movl   $0x8e000008,0x242(%rbx)
ffffffff80215a23:	00 00 8e 
ffffffff80215a26:	c7 83 4c 02 00 00 00 	movl   $0x0,0x24c(%rbx)
ffffffff80215a2d:	00 00 00 
ffffffff80215a30:	c7 83 52 02 00 00 08 	movl   $0x8e000008,0x252(%rbx)
ffffffff80215a37:	00 00 8e 
ffffffff80215a3a:	c7 83 5c 02 00 00 00 	movl   $0x0,0x25c(%rbx)
ffffffff80215a41:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215a44:	66 89 93 60 02 00 00 	mov    %dx,0x260(%rbx)
ffffffff80215a4b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215a4f:	89 93 68 02 00 00    	mov    %edx,0x268(%rbx)
ffffffff80215a55:	48 c7 c2 29 ba 20 80 	mov    $0xffffffff8020ba29,%rdx
ffffffff80215a5c:	66 89 8b 66 02 00 00 	mov    %cx,0x266(%rbx)
ffffffff80215a63:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215a66:	66 89 93 70 02 00 00 	mov    %dx,0x270(%rbx)
ffffffff80215a6d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215a71:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215a75:	89 93 78 02 00 00    	mov    %edx,0x278(%rbx)
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215a7b:	48 c7 c2 35 ba 20 80 	mov    $0xffffffff8020ba35,%rdx
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215a82:	66 89 8b 76 02 00 00 	mov    %cx,0x276(%rbx)
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215a89:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215a8c:	66 89 93 80 02 00 00 	mov    %dx,0x280(%rbx)
ffffffff80215a93:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215a97:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215a9b:	89 93 88 02 00 00    	mov    %edx,0x288(%rbx)
ffffffff80215aa1:	48 c7 c2 41 ba 20 80 	mov    $0xffffffff8020ba41,%rdx
ffffffff80215aa8:	66 89 8b 86 02 00 00 	mov    %cx,0x286(%rbx)
ffffffff80215aaf:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215ab2:	66 89 93 90 02 00 00 	mov    %dx,0x290(%rbx)
ffffffff80215ab9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215abd:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215ac1:	89 93 98 02 00 00    	mov    %edx,0x298(%rbx)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80215ac7:	48 c7 c2 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rdx
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215ace:	66 89 8b 96 02 00 00 	mov    %cx,0x296(%rbx)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80215ad5:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215ad8:	66 89 93 a0 02 00 00 	mov    %dx,0x2a0(%rbx)
ffffffff80215adf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215ae3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215ae7:	89 93 a8 02 00 00    	mov    %edx,0x2a8(%rbx)
ffffffff80215aed:	48 c7 c2 59 ba 20 80 	mov    $0xffffffff8020ba59,%rdx
ffffffff80215af4:	66 89 8b a6 02 00 00 	mov    %cx,0x2a6(%rbx)
ffffffff80215afb:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215afe:	66 89 93 b0 02 00 00 	mov    %dx,0x2b0(%rbx)
ffffffff80215b05:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215b09:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215b0d:	89 93 b8 02 00 00    	mov    %edx,0x2b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215b13:	48 c7 c2 65 ba 20 80 	mov    $0xffffffff8020ba65,%rdx
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80215b1a:	66 89 8b b6 02 00 00 	mov    %cx,0x2b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215b21:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215b24:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215b28:	66 89 93 c0 02 00 00 	mov    %dx,0x2c0(%rbx)
ffffffff80215b2f:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff80215b33:	c7 83 62 02 00 00 08 	movl   $0x8e000008,0x262(%rbx)
ffffffff80215b3a:	00 00 8e 
ffffffff80215b3d:	c7 83 6c 02 00 00 00 	movl   $0x0,0x26c(%rbx)
ffffffff80215b44:	00 00 00 
ffffffff80215b47:	c7 83 72 02 00 00 08 	movl   $0x8e000008,0x272(%rbx)
ffffffff80215b4e:	00 00 8e 
ffffffff80215b51:	c7 83 7c 02 00 00 00 	movl   $0x0,0x27c(%rbx)
ffffffff80215b58:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff80215b5b:	c7 83 82 02 00 00 08 	movl   $0x8e000008,0x282(%rbx)
ffffffff80215b62:	00 00 8e 
ffffffff80215b65:	c7 83 8c 02 00 00 00 	movl   $0x0,0x28c(%rbx)
ffffffff80215b6c:	00 00 00 
ffffffff80215b6f:	c7 83 92 02 00 00 08 	movl   $0x8e000008,0x292(%rbx)
ffffffff80215b76:	00 00 8e 
ffffffff80215b79:	c7 83 9c 02 00 00 00 	movl   $0x0,0x29c(%rbx)
ffffffff80215b80:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff80215b83:	c7 83 a2 02 00 00 08 	movl   $0x8e000008,0x2a2(%rbx)
ffffffff80215b8a:	00 00 8e 
ffffffff80215b8d:	c7 83 ac 02 00 00 00 	movl   $0x0,0x2ac(%rbx)
ffffffff80215b94:	00 00 00 
ffffffff80215b97:	c7 83 b2 02 00 00 08 	movl   $0x8e000008,0x2b2(%rbx)
ffffffff80215b9e:	00 00 8e 
ffffffff80215ba1:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%rbx)
ffffffff80215ba8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215bab:	c7 83 c2 02 00 00 08 	movl   $0x8e000008,0x2c2(%rbx)
ffffffff80215bb2:	00 00 8e 
ffffffff80215bb5:	66 89 8b c6 02 00 00 	mov    %cx,0x2c6(%rbx)
ffffffff80215bbc:	89 93 c8 02 00 00    	mov    %edx,0x2c8(%rbx)
ffffffff80215bc2:	48 c7 c2 71 ba 20 80 	mov    $0xffffffff8020ba71,%rdx
ffffffff80215bc9:	66 89 93 d0 02 00 00 	mov    %dx,0x2d0(%rbx)
ffffffff80215bd0:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215bd3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215bd7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215bdb:	89 93 d8 02 00 00    	mov    %edx,0x2d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215be1:	48 c7 c2 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rdx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215be8:	66 89 8b d6 02 00 00 	mov    %cx,0x2d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215bef:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215bf2:	66 89 93 e0 02 00 00 	mov    %dx,0x2e0(%rbx)
ffffffff80215bf9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215bfd:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c01:	89 93 e8 02 00 00    	mov    %edx,0x2e8(%rbx)
ffffffff80215c07:	48 c7 c2 89 ba 20 80 	mov    $0xffffffff8020ba89,%rdx
ffffffff80215c0e:	66 89 8b e6 02 00 00 	mov    %cx,0x2e6(%rbx)
ffffffff80215c15:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215c18:	66 89 93 f0 02 00 00 	mov    %dx,0x2f0(%rbx)
ffffffff80215c1f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215c23:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c27:	89 93 f8 02 00 00    	mov    %edx,0x2f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215c2d:	48 c7 c2 95 ba 20 80 	mov    $0xffffffff8020ba95,%rdx
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215c34:	66 89 8b f6 02 00 00 	mov    %cx,0x2f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215c3b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215c3e:	66 89 93 00 03 00 00 	mov    %dx,0x300(%rbx)
ffffffff80215c45:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215c49:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c4d:	89 93 08 03 00 00    	mov    %edx,0x308(%rbx)
ffffffff80215c53:	48 c7 c2 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rdx
ffffffff80215c5a:	66 89 8b 06 03 00 00 	mov    %cx,0x306(%rbx)
ffffffff80215c61:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215c64:	66 89 93 10 03 00 00 	mov    %dx,0x310(%rbx)
ffffffff80215c6b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215c6f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c73:	89 93 18 03 00 00    	mov    %edx,0x318(%rbx)
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215c79:	48 c7 c2 ad ba 20 80 	mov    $0xffffffff8020baad,%rdx
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215c80:	66 89 8b 16 03 00 00 	mov    %cx,0x316(%rbx)
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215c87:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215c8a:	66 89 93 20 03 00 00 	mov    %dx,0x320(%rbx)
ffffffff80215c91:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215c95:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215c99:	89 93 28 03 00 00    	mov    %edx,0x328(%rbx)
ffffffff80215c9f:	48 c7 c2 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rdx
ffffffff80215ca6:	66 89 8b 26 03 00 00 	mov    %cx,0x326(%rbx)
ffffffff80215cad:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215cb0:	c7 83 cc 02 00 00 00 	movl   $0x0,0x2cc(%rbx)
ffffffff80215cb7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215cba:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff80215cbe:	c7 83 d2 02 00 00 08 	movl   $0x8e000008,0x2d2(%rbx)
ffffffff80215cc5:	00 00 8e 
ffffffff80215cc8:	c7 83 dc 02 00 00 00 	movl   $0x0,0x2dc(%rbx)
ffffffff80215ccf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff80215cd2:	c7 83 e2 02 00 00 08 	movl   $0x8e000008,0x2e2(%rbx)
ffffffff80215cd9:	00 00 8e 
ffffffff80215cdc:	c7 83 ec 02 00 00 00 	movl   $0x0,0x2ec(%rbx)
ffffffff80215ce3:	00 00 00 
ffffffff80215ce6:	c7 83 f2 02 00 00 08 	movl   $0x8e000008,0x2f2(%rbx)
ffffffff80215ced:	00 00 8e 
ffffffff80215cf0:	c7 83 fc 02 00 00 00 	movl   $0x0,0x2fc(%rbx)
ffffffff80215cf7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff80215cfa:	c7 83 02 03 00 00 08 	movl   $0x8e000008,0x302(%rbx)
ffffffff80215d01:	00 00 8e 
ffffffff80215d04:	c7 83 0c 03 00 00 00 	movl   $0x0,0x30c(%rbx)
ffffffff80215d0b:	00 00 00 
ffffffff80215d0e:	c7 83 12 03 00 00 08 	movl   $0x8e000008,0x312(%rbx)
ffffffff80215d15:	00 00 8e 
ffffffff80215d18:	c7 83 1c 03 00 00 00 	movl   $0x0,0x31c(%rbx)
ffffffff80215d1f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215d22:	c7 83 22 03 00 00 08 	movl   $0x8e000008,0x322(%rbx)
ffffffff80215d29:	00 00 8e 
ffffffff80215d2c:	c7 83 2c 03 00 00 00 	movl   $0x0,0x32c(%rbx)
ffffffff80215d33:	00 00 00 
ffffffff80215d36:	66 89 93 30 03 00 00 	mov    %dx,0x330(%rbx)
ffffffff80215d3d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215d41:	89 93 38 03 00 00    	mov    %edx,0x338(%rbx)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215d47:	48 c7 c2 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rdx
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215d4e:	66 89 8b 36 03 00 00 	mov    %cx,0x336(%rbx)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215d55:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215d58:	66 89 93 40 03 00 00 	mov    %dx,0x340(%rbx)
ffffffff80215d5f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215d63:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215d67:	89 93 48 03 00 00    	mov    %edx,0x348(%rbx)
ffffffff80215d6d:	48 c7 c2 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rdx
ffffffff80215d74:	66 89 8b 46 03 00 00 	mov    %cx,0x346(%rbx)
ffffffff80215d7b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215d7e:	66 89 93 50 03 00 00 	mov    %dx,0x350(%rbx)
ffffffff80215d85:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215d89:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215d8d:	89 93 58 03 00 00    	mov    %edx,0x358(%rbx)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215d93:	48 c7 c2 dd ba 20 80 	mov    $0xffffffff8020badd,%rdx
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215d9a:	66 89 8b 56 03 00 00 	mov    %cx,0x356(%rbx)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215da1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215da4:	66 89 93 60 03 00 00 	mov    %dx,0x360(%rbx)
ffffffff80215dab:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215daf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215db3:	89 93 68 03 00 00    	mov    %edx,0x368(%rbx)
ffffffff80215db9:	48 c7 c2 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rdx
ffffffff80215dc0:	66 89 8b 66 03 00 00 	mov    %cx,0x366(%rbx)
ffffffff80215dc7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215dca:	66 89 93 70 03 00 00 	mov    %dx,0x370(%rbx)
ffffffff80215dd1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215dd5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215dd9:	89 93 78 03 00 00    	mov    %edx,0x378(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215ddf:	48 c7 c2 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rdx
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215de6:	66 89 8b 76 03 00 00 	mov    %cx,0x376(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215ded:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215df0:	66 89 93 80 03 00 00 	mov    %dx,0x380(%rbx)
ffffffff80215df7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215dfb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215dff:	89 93 88 03 00 00    	mov    %edx,0x388(%rbx)
ffffffff80215e05:	48 c7 c2 01 bb 20 80 	mov    $0xffffffff8020bb01,%rdx
ffffffff80215e0c:	66 89 8b 86 03 00 00 	mov    %cx,0x386(%rbx)
ffffffff80215e13:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215e16:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215e1a:	66 89 93 90 03 00 00 	mov    %dx,0x390(%rbx)
ffffffff80215e21:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215e25:	66 89 8b 96 03 00 00 	mov    %cx,0x396(%rbx)
    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff80215e2c:	c7 83 32 03 00 00 08 	movl   $0x8e000008,0x332(%rbx)
ffffffff80215e33:	00 00 8e 
ffffffff80215e36:	c7 83 3c 03 00 00 00 	movl   $0x0,0x33c(%rbx)
ffffffff80215e3d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff80215e40:	c7 83 42 03 00 00 08 	movl   $0x8e000008,0x342(%rbx)
ffffffff80215e47:	00 00 8e 
ffffffff80215e4a:	c7 83 4c 03 00 00 00 	movl   $0x0,0x34c(%rbx)
ffffffff80215e51:	00 00 00 
ffffffff80215e54:	c7 83 52 03 00 00 08 	movl   $0x8e000008,0x352(%rbx)
ffffffff80215e5b:	00 00 8e 
ffffffff80215e5e:	c7 83 5c 03 00 00 00 	movl   $0x0,0x35c(%rbx)
ffffffff80215e65:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff80215e68:	c7 83 62 03 00 00 08 	movl   $0x8e000008,0x362(%rbx)
ffffffff80215e6f:	00 00 8e 
ffffffff80215e72:	c7 83 6c 03 00 00 00 	movl   $0x0,0x36c(%rbx)
ffffffff80215e79:	00 00 00 
ffffffff80215e7c:	c7 83 72 03 00 00 08 	movl   $0x8e000008,0x372(%rbx)
ffffffff80215e83:	00 00 8e 
ffffffff80215e86:	c7 83 7c 03 00 00 00 	movl   $0x0,0x37c(%rbx)
ffffffff80215e8d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215e90:	c7 83 82 03 00 00 08 	movl   $0x8e000008,0x382(%rbx)
ffffffff80215e97:	00 00 8e 
ffffffff80215e9a:	c7 83 8c 03 00 00 00 	movl   $0x0,0x38c(%rbx)
ffffffff80215ea1:	00 00 00 
ffffffff80215ea4:	c7 83 92 03 00 00 08 	movl   $0x8e000008,0x392(%rbx)
ffffffff80215eab:	00 00 8e 
ffffffff80215eae:	89 93 98 03 00 00    	mov    %edx,0x398(%rbx)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff80215eb4:	48 c7 c2 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rdx
ffffffff80215ebb:	66 89 93 a0 03 00 00 	mov    %dx,0x3a0(%rbx)
ffffffff80215ec2:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215ec5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215ec9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215ecd:	89 93 a8 03 00 00    	mov    %edx,0x3a8(%rbx)
ffffffff80215ed3:	48 c7 c2 19 bb 20 80 	mov    $0xffffffff8020bb19,%rdx
ffffffff80215eda:	66 89 8b a6 03 00 00 	mov    %cx,0x3a6(%rbx)
ffffffff80215ee1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215ee4:	66 89 93 b0 03 00 00 	mov    %dx,0x3b0(%rbx)
ffffffff80215eeb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215eef:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215ef3:	89 93 b8 03 00 00    	mov    %edx,0x3b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80215ef9:	48 c7 c2 25 bb 20 80 	mov    $0xffffffff8020bb25,%rdx
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff80215f00:	66 89 8b b6 03 00 00 	mov    %cx,0x3b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80215f07:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215f0a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215f0e:	66 89 93 c0 03 00 00 	mov    %dx,0x3c0(%rbx)
ffffffff80215f15:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215f19:	89 93 c8 03 00 00    	mov    %edx,0x3c8(%rbx)
ffffffff80215f1f:	48 c7 c2 31 bb 20 80 	mov    $0xffffffff8020bb31,%rdx
ffffffff80215f26:	66 89 8b c6 03 00 00 	mov    %cx,0x3c6(%rbx)
ffffffff80215f2d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215f30:	66 89 93 d0 03 00 00 	mov    %dx,0x3d0(%rbx)
ffffffff80215f37:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215f3b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215f3f:	89 93 d8 03 00 00    	mov    %edx,0x3d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff80215f45:	48 c7 c2 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rdx
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80215f4c:	66 89 8b d6 03 00 00 	mov    %cx,0x3d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff80215f53:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215f56:	66 89 93 e0 03 00 00 	mov    %dx,0x3e0(%rbx)
ffffffff80215f5d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215f61:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215f65:	89 93 e8 03 00 00    	mov    %edx,0x3e8(%rbx)
ffffffff80215f6b:	48 c7 c2 49 bb 20 80 	mov    $0xffffffff8020bb49,%rdx
ffffffff80215f72:	66 89 8b e6 03 00 00 	mov    %cx,0x3e6(%rbx)
ffffffff80215f79:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215f7c:	66 89 93 f0 03 00 00 	mov    %dx,0x3f0(%rbx)
ffffffff80215f83:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215f87:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80215f8b:	89 93 f8 03 00 00    	mov    %edx,0x3f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215f91:	48 c7 c2 55 bb 20 80 	mov    $0xffffffff8020bb55,%rdx
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff80215f98:	66 89 8b f6 03 00 00 	mov    %cx,0x3f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80215f9f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80215fa2:	66 89 93 00 04 00 00 	mov    %dx,0x400(%rbx)
ffffffff80215fa9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80215fad:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff80215fb1:	c7 83 9c 03 00 00 00 	movl   $0x0,0x39c(%rbx)
ffffffff80215fb8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff80215fbb:	c7 83 a2 03 00 00 08 	movl   $0x8e000008,0x3a2(%rbx)
ffffffff80215fc2:	00 00 8e 
ffffffff80215fc5:	c7 83 ac 03 00 00 00 	movl   $0x0,0x3ac(%rbx)
ffffffff80215fcc:	00 00 00 
ffffffff80215fcf:	c7 83 b2 03 00 00 08 	movl   $0x8e000008,0x3b2(%rbx)
ffffffff80215fd6:	00 00 8e 
ffffffff80215fd9:	c7 83 bc 03 00 00 00 	movl   $0x0,0x3bc(%rbx)
ffffffff80215fe0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff80215fe3:	c7 83 c2 03 00 00 08 	movl   $0x8e000008,0x3c2(%rbx)
ffffffff80215fea:	00 00 8e 
ffffffff80215fed:	c7 83 cc 03 00 00 00 	movl   $0x0,0x3cc(%rbx)
ffffffff80215ff4:	00 00 00 
ffffffff80215ff7:	c7 83 d2 03 00 00 08 	movl   $0x8e000008,0x3d2(%rbx)
ffffffff80215ffe:	00 00 8e 
ffffffff80216001:	c7 83 dc 03 00 00 00 	movl   $0x0,0x3dc(%rbx)
ffffffff80216008:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8021600b:	c7 83 e2 03 00 00 08 	movl   $0x8e000008,0x3e2(%rbx)
ffffffff80216012:	00 00 8e 
ffffffff80216015:	c7 83 ec 03 00 00 00 	movl   $0x0,0x3ec(%rbx)
ffffffff8021601c:	00 00 00 
ffffffff8021601f:	c7 83 f2 03 00 00 08 	movl   $0x8e000008,0x3f2(%rbx)
ffffffff80216026:	00 00 8e 
ffffffff80216029:	c7 83 fc 03 00 00 00 	movl   $0x0,0x3fc(%rbx)
ffffffff80216030:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80216033:	c7 83 02 04 00 00 08 	movl   $0x8e000008,0x402(%rbx)
ffffffff8021603a:	00 00 8e 
ffffffff8021603d:	89 93 08 04 00 00    	mov    %edx,0x408(%rbx)
ffffffff80216043:	48 c7 c2 61 bb 20 80 	mov    $0xffffffff8020bb61,%rdx
ffffffff8021604a:	66 89 8b 06 04 00 00 	mov    %cx,0x406(%rbx)
ffffffff80216051:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216054:	66 89 93 10 04 00 00 	mov    %dx,0x410(%rbx)
ffffffff8021605b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021605f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216063:	89 93 18 04 00 00    	mov    %edx,0x418(%rbx)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80216069:	48 c7 c2 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rdx
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80216070:	66 89 8b 16 04 00 00 	mov    %cx,0x416(%rbx)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff80216077:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021607a:	66 89 93 20 04 00 00 	mov    %dx,0x420(%rbx)
ffffffff80216081:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216085:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216089:	89 93 28 04 00 00    	mov    %edx,0x428(%rbx)
ffffffff8021608f:	48 c7 c2 79 bb 20 80 	mov    $0xffffffff8020bb79,%rdx
ffffffff80216096:	66 89 8b 26 04 00 00 	mov    %cx,0x426(%rbx)
ffffffff8021609d:	48 89 d1             	mov    %rdx,%rcx
ffffffff802160a0:	66 89 93 30 04 00 00 	mov    %dx,0x430(%rbx)
ffffffff802160a7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802160ab:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802160af:	89 93 38 04 00 00    	mov    %edx,0x438(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff802160b5:	48 c7 c2 85 bb 20 80 	mov    $0xffffffff8020bb85,%rdx
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff802160bc:	66 89 8b 36 04 00 00 	mov    %cx,0x436(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff802160c3:	48 89 d1             	mov    %rdx,%rcx
ffffffff802160c6:	66 89 93 40 04 00 00 	mov    %dx,0x440(%rbx)
ffffffff802160cd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802160d1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802160d5:	89 93 48 04 00 00    	mov    %edx,0x448(%rbx)
ffffffff802160db:	48 c7 c2 91 bb 20 80 	mov    $0xffffffff8020bb91,%rdx
ffffffff802160e2:	66 89 8b 46 04 00 00 	mov    %cx,0x446(%rbx)
ffffffff802160e9:	48 89 d1             	mov    %rdx,%rcx
ffffffff802160ec:	66 89 93 50 04 00 00 	mov    %dx,0x450(%rbx)
ffffffff802160f3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802160f7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802160fb:	89 93 58 04 00 00    	mov    %edx,0x458(%rbx)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80216101:	48 c7 c2 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rdx
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80216108:	66 89 8b 56 04 00 00 	mov    %cx,0x456(%rbx)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021610f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216112:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216116:	66 89 93 60 04 00 00 	mov    %dx,0x460(%rbx)
ffffffff8021611d:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff80216121:	66 89 83 14 04 00 00 	mov    %ax,0x414(%rbx)
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff80216128:	66 89 8b 66 04 00 00 	mov    %cx,0x466(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8021612f:	c7 83 0c 04 00 00 00 	movl   $0x0,0x40c(%rbx)
ffffffff80216136:	00 00 00 
ffffffff80216139:	66 89 b3 12 04 00 00 	mov    %si,0x412(%rbx)
ffffffff80216140:	c7 83 1c 04 00 00 00 	movl   $0x0,0x41c(%rbx)
ffffffff80216147:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8021614a:	c7 83 22 04 00 00 08 	movl   $0x8e000008,0x422(%rbx)
ffffffff80216151:	00 00 8e 
ffffffff80216154:	c7 83 2c 04 00 00 00 	movl   $0x0,0x42c(%rbx)
ffffffff8021615b:	00 00 00 
ffffffff8021615e:	c7 83 32 04 00 00 08 	movl   $0x8e000008,0x432(%rbx)
ffffffff80216165:	00 00 8e 
ffffffff80216168:	c7 83 3c 04 00 00 00 	movl   $0x0,0x43c(%rbx)
ffffffff8021616f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff80216172:	c7 83 42 04 00 00 08 	movl   $0x8e000008,0x442(%rbx)
ffffffff80216179:	00 00 8e 
ffffffff8021617c:	c7 83 4c 04 00 00 00 	movl   $0x0,0x44c(%rbx)
ffffffff80216183:	00 00 00 
ffffffff80216186:	c7 83 52 04 00 00 08 	movl   $0x8e000008,0x452(%rbx)
ffffffff8021618d:	00 00 8e 
ffffffff80216190:	c7 83 5c 04 00 00 00 	movl   $0x0,0x45c(%rbx)
ffffffff80216197:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021619a:	c7 83 62 04 00 00 08 	movl   $0x8e000008,0x462(%rbx)
ffffffff802161a1:	00 00 8e 
ffffffff802161a4:	89 93 68 04 00 00    	mov    %edx,0x468(%rbx)
ffffffff802161aa:	48 c7 c2 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rdx
ffffffff802161b1:	66 89 93 70 04 00 00 	mov    %dx,0x470(%rbx)
ffffffff802161b8:	48 89 d1             	mov    %rdx,%rcx
ffffffff802161bb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802161bf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802161c3:	89 93 78 04 00 00    	mov    %edx,0x478(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff802161c9:	48 c7 c2 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rdx
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff802161d0:	66 89 8b 76 04 00 00 	mov    %cx,0x476(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff802161d7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802161da:	66 89 93 80 04 00 00 	mov    %dx,0x480(%rbx)
ffffffff802161e1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802161e5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802161e9:	89 93 88 04 00 00    	mov    %edx,0x488(%rbx)
ffffffff802161ef:	48 c7 c2 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rdx
ffffffff802161f6:	66 89 8b 86 04 00 00 	mov    %cx,0x486(%rbx)
ffffffff802161fd:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216200:	66 89 93 90 04 00 00 	mov    %dx,0x490(%rbx)
ffffffff80216207:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021620b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021620f:	89 93 98 04 00 00    	mov    %edx,0x498(%rbx)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216215:	48 c7 c2 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rdx
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8021621c:	66 89 8b 96 04 00 00 	mov    %cx,0x496(%rbx)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216223:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216226:	66 89 93 a0 04 00 00 	mov    %dx,0x4a0(%rbx)
ffffffff8021622d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216231:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216235:	89 93 a8 04 00 00    	mov    %edx,0x4a8(%rbx)
ffffffff8021623b:	48 c7 c2 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rdx
ffffffff80216242:	66 89 8b a6 04 00 00 	mov    %cx,0x4a6(%rbx)
ffffffff80216249:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021624c:	66 89 93 b0 04 00 00 	mov    %dx,0x4b0(%rbx)
ffffffff80216253:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216257:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021625b:	89 93 b8 04 00 00    	mov    %edx,0x4b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216261:	48 c7 c2 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rdx
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff80216268:	66 89 8b b6 04 00 00 	mov    %cx,0x4b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8021626f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216272:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216276:	66 89 93 c0 04 00 00 	mov    %dx,0x4c0(%rbx)
ffffffff8021627d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216281:	89 93 c8 04 00 00    	mov    %edx,0x4c8(%rbx)
ffffffff80216287:	48 c7 c2 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rdx
ffffffff8021628e:	66 89 8b c6 04 00 00 	mov    %cx,0x4c6(%rbx)
ffffffff80216295:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216298:	66 89 93 d0 04 00 00 	mov    %dx,0x4d0(%rbx)
ffffffff8021629f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802162a3:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff802162a7:	c7 83 6c 04 00 00 00 	movl   $0x0,0x46c(%rbx)
ffffffff802162ae:	00 00 00 
ffffffff802162b1:	c7 83 72 04 00 00 08 	movl   $0x8e000008,0x472(%rbx)
ffffffff802162b8:	00 00 8e 
ffffffff802162bb:	c7 83 7c 04 00 00 00 	movl   $0x0,0x47c(%rbx)
ffffffff802162c2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff802162c5:	c7 83 82 04 00 00 08 	movl   $0x8e000008,0x482(%rbx)
ffffffff802162cc:	00 00 8e 
ffffffff802162cf:	c7 83 8c 04 00 00 00 	movl   $0x0,0x48c(%rbx)
ffffffff802162d6:	00 00 00 
ffffffff802162d9:	c7 83 92 04 00 00 08 	movl   $0x8e000008,0x492(%rbx)
ffffffff802162e0:	00 00 8e 
ffffffff802162e3:	c7 83 9c 04 00 00 00 	movl   $0x0,0x49c(%rbx)
ffffffff802162ea:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff802162ed:	c7 83 a2 04 00 00 08 	movl   $0x8e000008,0x4a2(%rbx)
ffffffff802162f4:	00 00 8e 
ffffffff802162f7:	c7 83 ac 04 00 00 00 	movl   $0x0,0x4ac(%rbx)
ffffffff802162fe:	00 00 00 
ffffffff80216301:	c7 83 b2 04 00 00 08 	movl   $0x8e000008,0x4b2(%rbx)
ffffffff80216308:	00 00 8e 
ffffffff8021630b:	c7 83 bc 04 00 00 00 	movl   $0x0,0x4bc(%rbx)
ffffffff80216312:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216315:	c7 83 c2 04 00 00 08 	movl   $0x8e000008,0x4c2(%rbx)
ffffffff8021631c:	00 00 8e 
ffffffff8021631f:	c7 83 cc 04 00 00 00 	movl   $0x0,0x4cc(%rbx)
ffffffff80216326:	00 00 00 
ffffffff80216329:	c7 83 d2 04 00 00 08 	movl   $0x8e000008,0x4d2(%rbx)
ffffffff80216330:	00 00 8e 
ffffffff80216333:	89 93 d8 04 00 00    	mov    %edx,0x4d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80216339:	48 c7 c2 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rdx
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff80216340:	66 89 8b d6 04 00 00 	mov    %cx,0x4d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff80216347:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021634a:	66 89 93 e0 04 00 00 	mov    %dx,0x4e0(%rbx)
ffffffff80216351:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216355:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216359:	89 93 e8 04 00 00    	mov    %edx,0x4e8(%rbx)
ffffffff8021635f:	48 c7 c2 09 bc 20 80 	mov    $0xffffffff8020bc09,%rdx
ffffffff80216366:	66 89 8b e6 04 00 00 	mov    %cx,0x4e6(%rbx)
ffffffff8021636d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216370:	66 89 93 f0 04 00 00 	mov    %dx,0x4f0(%rbx)
ffffffff80216377:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021637b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021637f:	89 93 f8 04 00 00    	mov    %edx,0x4f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216385:	48 c7 c2 15 bc 20 80 	mov    $0xffffffff8020bc15,%rdx
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8021638c:	66 89 8b f6 04 00 00 	mov    %cx,0x4f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216393:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216396:	66 89 93 00 05 00 00 	mov    %dx,0x500(%rbx)
ffffffff8021639d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802163a1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802163a5:	89 93 08 05 00 00    	mov    %edx,0x508(%rbx)
ffffffff802163ab:	48 c7 c2 21 bc 20 80 	mov    $0xffffffff8020bc21,%rdx
ffffffff802163b2:	66 89 8b 06 05 00 00 	mov    %cx,0x506(%rbx)
ffffffff802163b9:	48 89 d1             	mov    %rdx,%rcx
ffffffff802163bc:	66 89 93 10 05 00 00 	mov    %dx,0x510(%rbx)
ffffffff802163c3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802163c7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802163cb:	89 93 18 05 00 00    	mov    %edx,0x518(%rbx)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff802163d1:	48 c7 c2 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rdx
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff802163d8:	66 89 8b 16 05 00 00 	mov    %cx,0x516(%rbx)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff802163df:	48 89 d1             	mov    %rdx,%rcx
ffffffff802163e2:	66 89 93 20 05 00 00 	mov    %dx,0x520(%rbx)
ffffffff802163e9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802163ed:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802163f1:	89 93 28 05 00 00    	mov    %edx,0x528(%rbx)
ffffffff802163f7:	48 c7 c2 39 bc 20 80 	mov    $0xffffffff8020bc39,%rdx
ffffffff802163fe:	66 89 8b 26 05 00 00 	mov    %cx,0x526(%rbx)
ffffffff80216405:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216408:	66 89 93 30 05 00 00 	mov    %dx,0x530(%rbx)
ffffffff8021640f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216413:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216417:	89 93 38 05 00 00    	mov    %edx,0x538(%rbx)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8021641d:	48 c7 c2 45 bc 20 80 	mov    $0xffffffff8020bc45,%rdx
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff80216424:	66 89 8b 36 05 00 00 	mov    %cx,0x536(%rbx)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8021642b:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8021642e:	c7 83 dc 04 00 00 00 	movl   $0x0,0x4dc(%rbx)
ffffffff80216435:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff80216438:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8021643c:	c7 83 e2 04 00 00 08 	movl   $0x8e000008,0x4e2(%rbx)
ffffffff80216443:	00 00 8e 
ffffffff80216446:	c7 83 ec 04 00 00 00 	movl   $0x0,0x4ec(%rbx)
ffffffff8021644d:	00 00 00 
ffffffff80216450:	c7 83 f2 04 00 00 08 	movl   $0x8e000008,0x4f2(%rbx)
ffffffff80216457:	00 00 8e 
ffffffff8021645a:	c7 83 fc 04 00 00 00 	movl   $0x0,0x4fc(%rbx)
ffffffff80216461:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff80216464:	c7 83 02 05 00 00 08 	movl   $0x8e000008,0x502(%rbx)
ffffffff8021646b:	00 00 8e 
ffffffff8021646e:	c7 83 0c 05 00 00 00 	movl   $0x0,0x50c(%rbx)
ffffffff80216475:	00 00 00 
ffffffff80216478:	c7 83 12 05 00 00 08 	movl   $0x8e000008,0x512(%rbx)
ffffffff8021647f:	00 00 8e 
ffffffff80216482:	c7 83 1c 05 00 00 00 	movl   $0x0,0x51c(%rbx)
ffffffff80216489:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8021648c:	c7 83 22 05 00 00 08 	movl   $0x8e000008,0x522(%rbx)
ffffffff80216493:	00 00 8e 
ffffffff80216496:	c7 83 2c 05 00 00 00 	movl   $0x0,0x52c(%rbx)
ffffffff8021649d:	00 00 00 
ffffffff802164a0:	c7 83 32 05 00 00 08 	movl   $0x8e000008,0x532(%rbx)
ffffffff802164a7:	00 00 8e 
ffffffff802164aa:	c7 83 3c 05 00 00 00 	movl   $0x0,0x53c(%rbx)
ffffffff802164b1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff802164b4:	66 89 93 40 05 00 00 	mov    %dx,0x540(%rbx)
ffffffff802164bb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802164bf:	89 93 48 05 00 00    	mov    %edx,0x548(%rbx)
ffffffff802164c5:	48 c7 c2 51 bc 20 80 	mov    $0xffffffff8020bc51,%rdx
ffffffff802164cc:	66 89 8b 46 05 00 00 	mov    %cx,0x546(%rbx)
ffffffff802164d3:	48 89 d1             	mov    %rdx,%rcx
ffffffff802164d6:	66 89 93 50 05 00 00 	mov    %dx,0x550(%rbx)
ffffffff802164dd:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802164e1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802164e5:	89 93 58 05 00 00    	mov    %edx,0x558(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff802164eb:	48 c7 c2 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rdx
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff802164f2:	66 89 8b 56 05 00 00 	mov    %cx,0x556(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff802164f9:	48 89 d1             	mov    %rdx,%rcx
ffffffff802164fc:	66 89 93 60 05 00 00 	mov    %dx,0x560(%rbx)
ffffffff80216503:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216507:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021650b:	89 93 68 05 00 00    	mov    %edx,0x568(%rbx)
ffffffff80216511:	48 c7 c2 69 bc 20 80 	mov    $0xffffffff8020bc69,%rdx
ffffffff80216518:	66 89 8b 66 05 00 00 	mov    %cx,0x566(%rbx)
ffffffff8021651f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216522:	66 89 93 70 05 00 00 	mov    %dx,0x570(%rbx)
ffffffff80216529:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021652d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216531:	89 93 78 05 00 00    	mov    %edx,0x578(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216537:	48 c7 c2 75 bc 20 80 	mov    $0xffffffff8020bc75,%rdx
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8021653e:	66 89 8b 76 05 00 00 	mov    %cx,0x576(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff80216545:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216548:	66 89 93 80 05 00 00 	mov    %dx,0x580(%rbx)
ffffffff8021654f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216553:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216557:	89 93 88 05 00 00    	mov    %edx,0x588(%rbx)
ffffffff8021655d:	48 c7 c2 81 bc 20 80 	mov    $0xffffffff8020bc81,%rdx
ffffffff80216564:	66 89 8b 86 05 00 00 	mov    %cx,0x586(%rbx)
ffffffff8021656b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021656e:	66 89 93 90 05 00 00 	mov    %dx,0x590(%rbx)
ffffffff80216575:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216579:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021657d:	89 93 98 05 00 00    	mov    %edx,0x598(%rbx)
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216583:	48 c7 c2 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rdx
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8021658a:	66 89 8b 96 05 00 00 	mov    %cx,0x596(%rbx)
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216591:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216594:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216598:	66 89 93 a0 05 00 00 	mov    %dx,0x5a0(%rbx)
ffffffff8021659f:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff802165a3:	c7 83 42 05 00 00 08 	movl   $0x8e000008,0x542(%rbx)
ffffffff802165aa:	00 00 8e 
ffffffff802165ad:	c7 83 4c 05 00 00 00 	movl   $0x0,0x54c(%rbx)
ffffffff802165b4:	00 00 00 
ffffffff802165b7:	c7 83 52 05 00 00 08 	movl   $0x8e000008,0x552(%rbx)
ffffffff802165be:	00 00 8e 
ffffffff802165c1:	c7 83 5c 05 00 00 00 	movl   $0x0,0x55c(%rbx)
ffffffff802165c8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff802165cb:	c7 83 62 05 00 00 08 	movl   $0x8e000008,0x562(%rbx)
ffffffff802165d2:	00 00 8e 
ffffffff802165d5:	c7 83 6c 05 00 00 00 	movl   $0x0,0x56c(%rbx)
ffffffff802165dc:	00 00 00 
ffffffff802165df:	c7 83 72 05 00 00 08 	movl   $0x8e000008,0x572(%rbx)
ffffffff802165e6:	00 00 8e 
ffffffff802165e9:	c7 83 7c 05 00 00 00 	movl   $0x0,0x57c(%rbx)
ffffffff802165f0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff802165f3:	c7 83 82 05 00 00 08 	movl   $0x8e000008,0x582(%rbx)
ffffffff802165fa:	00 00 8e 
ffffffff802165fd:	c7 83 8c 05 00 00 00 	movl   $0x0,0x58c(%rbx)
ffffffff80216604:	00 00 00 
ffffffff80216607:	c7 83 92 05 00 00 08 	movl   $0x8e000008,0x592(%rbx)
ffffffff8021660e:	00 00 8e 
ffffffff80216611:	c7 83 9c 05 00 00 00 	movl   $0x0,0x59c(%rbx)
ffffffff80216618:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8021661b:	c7 83 a2 05 00 00 08 	movl   $0x8e000008,0x5a2(%rbx)
ffffffff80216622:	00 00 8e 
ffffffff80216625:	66 89 8b a6 05 00 00 	mov    %cx,0x5a6(%rbx)
ffffffff8021662c:	89 93 a8 05 00 00    	mov    %edx,0x5a8(%rbx)
ffffffff80216632:	48 c7 c2 99 bc 20 80 	mov    $0xffffffff8020bc99,%rdx
ffffffff80216639:	66 89 93 b0 05 00 00 	mov    %dx,0x5b0(%rbx)
ffffffff80216640:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216643:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216647:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021664b:	89 93 b8 05 00 00    	mov    %edx,0x5b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216651:	48 c7 c2 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rdx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216658:	66 89 8b b6 05 00 00 	mov    %cx,0x5b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8021665f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216662:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216666:	66 89 93 c0 05 00 00 	mov    %dx,0x5c0(%rbx)
ffffffff8021666d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216671:	89 93 c8 05 00 00    	mov    %edx,0x5c8(%rbx)
ffffffff80216677:	48 c7 c2 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rdx
ffffffff8021667e:	66 89 8b c6 05 00 00 	mov    %cx,0x5c6(%rbx)
ffffffff80216685:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216688:	66 89 93 d0 05 00 00 	mov    %dx,0x5d0(%rbx)
ffffffff8021668f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216693:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216697:	89 93 d8 05 00 00    	mov    %edx,0x5d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021669d:	48 c7 c2 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rdx
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff802166a4:	66 89 8b d6 05 00 00 	mov    %cx,0x5d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff802166ab:	48 89 d1             	mov    %rdx,%rcx
ffffffff802166ae:	66 89 93 e0 05 00 00 	mov    %dx,0x5e0(%rbx)
ffffffff802166b5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802166b9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802166bd:	89 93 e8 05 00 00    	mov    %edx,0x5e8(%rbx)
ffffffff802166c3:	48 c7 c2 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rdx
ffffffff802166ca:	66 89 8b e6 05 00 00 	mov    %cx,0x5e6(%rbx)
ffffffff802166d1:	48 89 d1             	mov    %rdx,%rcx
ffffffff802166d4:	66 89 93 f0 05 00 00 	mov    %dx,0x5f0(%rbx)
ffffffff802166db:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802166df:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802166e3:	89 93 f8 05 00 00    	mov    %edx,0x5f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff802166e9:	48 c7 c2 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rdx
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff802166f0:	66 89 8b f6 05 00 00 	mov    %cx,0x5f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff802166f7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802166fa:	66 89 93 00 06 00 00 	mov    %dx,0x600(%rbx)
ffffffff80216701:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216705:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216709:	89 93 08 06 00 00    	mov    %edx,0x608(%rbx)
ffffffff8021670f:	48 c7 c2 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rdx
ffffffff80216716:	66 89 8b 06 06 00 00 	mov    %cx,0x606(%rbx)
ffffffff8021671d:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff80216720:	c7 83 ac 05 00 00 00 	movl   $0x0,0x5ac(%rbx)
ffffffff80216727:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021672a:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8021672e:	c7 83 b2 05 00 00 08 	movl   $0x8e000008,0x5b2(%rbx)
ffffffff80216735:	00 00 8e 
ffffffff80216738:	c7 83 bc 05 00 00 00 	movl   $0x0,0x5bc(%rbx)
ffffffff8021673f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff80216742:	c7 83 c2 05 00 00 08 	movl   $0x8e000008,0x5c2(%rbx)
ffffffff80216749:	00 00 8e 
ffffffff8021674c:	c7 83 cc 05 00 00 00 	movl   $0x0,0x5cc(%rbx)
ffffffff80216753:	00 00 00 
ffffffff80216756:	c7 83 d2 05 00 00 08 	movl   $0x8e000008,0x5d2(%rbx)
ffffffff8021675d:	00 00 8e 
ffffffff80216760:	c7 83 dc 05 00 00 00 	movl   $0x0,0x5dc(%rbx)
ffffffff80216767:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021676a:	c7 83 e2 05 00 00 08 	movl   $0x8e000008,0x5e2(%rbx)
ffffffff80216771:	00 00 8e 
ffffffff80216774:	c7 83 ec 05 00 00 00 	movl   $0x0,0x5ec(%rbx)
ffffffff8021677b:	00 00 00 
ffffffff8021677e:	c7 83 f2 05 00 00 08 	movl   $0x8e000008,0x5f2(%rbx)
ffffffff80216785:	00 00 8e 
ffffffff80216788:	c7 83 fc 05 00 00 00 	movl   $0x0,0x5fc(%rbx)
ffffffff8021678f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216792:	c7 83 02 06 00 00 08 	movl   $0x8e000008,0x602(%rbx)
ffffffff80216799:	00 00 8e 
ffffffff8021679c:	c7 83 0c 06 00 00 00 	movl   $0x0,0x60c(%rbx)
ffffffff802167a3:	00 00 00 
ffffffff802167a6:	66 89 93 10 06 00 00 	mov    %dx,0x610(%rbx)
ffffffff802167ad:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802167b1:	89 93 18 06 00 00    	mov    %edx,0x618(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff802167b7:	48 c7 c2 ed bc 20 80 	mov    $0xffffffff8020bced,%rdx
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff802167be:	66 89 8b 16 06 00 00 	mov    %cx,0x616(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff802167c5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802167c8:	66 89 93 20 06 00 00 	mov    %dx,0x620(%rbx)
ffffffff802167cf:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802167d3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802167d7:	89 93 28 06 00 00    	mov    %edx,0x628(%rbx)
ffffffff802167dd:	48 c7 c2 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rdx
ffffffff802167e4:	66 89 8b 26 06 00 00 	mov    %cx,0x626(%rbx)
ffffffff802167eb:	48 89 d1             	mov    %rdx,%rcx
ffffffff802167ee:	66 89 93 30 06 00 00 	mov    %dx,0x630(%rbx)
ffffffff802167f5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802167f9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802167fd:	89 93 38 06 00 00    	mov    %edx,0x638(%rbx)
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80216803:	48 c7 c2 05 bd 20 80 	mov    $0xffffffff8020bd05,%rdx
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8021680a:	66 89 8b 36 06 00 00 	mov    %cx,0x636(%rbx)
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80216811:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216814:	66 89 93 40 06 00 00 	mov    %dx,0x640(%rbx)
ffffffff8021681b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021681f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216823:	89 93 48 06 00 00    	mov    %edx,0x648(%rbx)
ffffffff80216829:	48 c7 c2 11 bd 20 80 	mov    $0xffffffff8020bd11,%rdx
ffffffff80216830:	66 89 8b 46 06 00 00 	mov    %cx,0x646(%rbx)
ffffffff80216837:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021683a:	66 89 93 50 06 00 00 	mov    %dx,0x650(%rbx)
ffffffff80216841:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216845:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216849:	89 93 58 06 00 00    	mov    %edx,0x658(%rbx)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8021684f:	48 c7 c2 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rdx
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff80216856:	66 89 8b 56 06 00 00 	mov    %cx,0x656(%rbx)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8021685d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216860:	66 89 93 60 06 00 00 	mov    %dx,0x660(%rbx)
ffffffff80216867:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021686b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021686f:	89 93 68 06 00 00    	mov    %edx,0x668(%rbx)
ffffffff80216875:	48 c7 c2 29 bd 20 80 	mov    $0xffffffff8020bd29,%rdx
ffffffff8021687c:	66 89 8b 66 06 00 00 	mov    %cx,0x666(%rbx)
ffffffff80216883:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216886:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021688a:	66 89 93 70 06 00 00 	mov    %dx,0x670(%rbx)
ffffffff80216891:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff80216895:	66 89 83 14 06 00 00 	mov    %ax,0x614(%rbx)
ffffffff8021689c:	66 89 bb 12 06 00 00 	mov    %di,0x612(%rbx)
ffffffff802168a3:	c7 83 1c 06 00 00 00 	movl   $0x0,0x61c(%rbx)
ffffffff802168aa:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff802168ad:	c7 83 22 06 00 00 08 	movl   $0x8e000008,0x622(%rbx)
ffffffff802168b4:	00 00 8e 
ffffffff802168b7:	c7 83 2c 06 00 00 00 	movl   $0x0,0x62c(%rbx)
ffffffff802168be:	00 00 00 
ffffffff802168c1:	c7 83 32 06 00 00 08 	movl   $0x8e000008,0x632(%rbx)
ffffffff802168c8:	00 00 8e 
ffffffff802168cb:	c7 83 3c 06 00 00 00 	movl   $0x0,0x63c(%rbx)
ffffffff802168d2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff802168d5:	c7 83 42 06 00 00 08 	movl   $0x8e000008,0x642(%rbx)
ffffffff802168dc:	00 00 8e 
ffffffff802168df:	c7 83 4c 06 00 00 00 	movl   $0x0,0x64c(%rbx)
ffffffff802168e6:	00 00 00 
ffffffff802168e9:	c7 83 52 06 00 00 08 	movl   $0x8e000008,0x652(%rbx)
ffffffff802168f0:	00 00 8e 
ffffffff802168f3:	c7 83 5c 06 00 00 00 	movl   $0x0,0x65c(%rbx)
ffffffff802168fa:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff802168fd:	c7 83 62 06 00 00 08 	movl   $0x8e000008,0x662(%rbx)
ffffffff80216904:	00 00 8e 
ffffffff80216907:	c7 83 6c 06 00 00 00 	movl   $0x0,0x66c(%rbx)
ffffffff8021690e:	00 00 00 
ffffffff80216911:	c7 83 72 06 00 00 08 	movl   $0x8e000008,0x672(%rbx)
ffffffff80216918:	00 00 8e 
ffffffff8021691b:	66 89 8b 76 06 00 00 	mov    %cx,0x676(%rbx)
ffffffff80216922:	89 93 78 06 00 00    	mov    %edx,0x678(%rbx)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff80216928:	48 c7 c2 35 bd 20 80 	mov    $0xffffffff8020bd35,%rdx
ffffffff8021692f:	66 89 93 80 06 00 00 	mov    %dx,0x680(%rbx)
ffffffff80216936:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216939:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021693d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216941:	89 93 88 06 00 00    	mov    %edx,0x688(%rbx)
ffffffff80216947:	48 c7 c2 41 bd 20 80 	mov    $0xffffffff8020bd41,%rdx
ffffffff8021694e:	66 89 8b 86 06 00 00 	mov    %cx,0x686(%rbx)
ffffffff80216955:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216958:	66 89 93 90 06 00 00 	mov    %dx,0x690(%rbx)
ffffffff8021695f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216963:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216967:	89 93 98 06 00 00    	mov    %edx,0x698(%rbx)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8021696d:	48 c7 c2 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rdx
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff80216974:	66 89 8b 96 06 00 00 	mov    %cx,0x696(%rbx)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8021697b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021697e:	66 89 93 a0 06 00 00 	mov    %dx,0x6a0(%rbx)
ffffffff80216985:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216989:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021698d:	89 93 a8 06 00 00    	mov    %edx,0x6a8(%rbx)
ffffffff80216993:	48 c7 c2 59 bd 20 80 	mov    $0xffffffff8020bd59,%rdx
ffffffff8021699a:	66 89 8b a6 06 00 00 	mov    %cx,0x6a6(%rbx)
ffffffff802169a1:	48 89 d1             	mov    %rdx,%rcx
ffffffff802169a4:	66 89 93 b0 06 00 00 	mov    %dx,0x6b0(%rbx)
ffffffff802169ab:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802169af:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802169b3:	89 93 b8 06 00 00    	mov    %edx,0x6b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff802169b9:	48 c7 c2 65 bd 20 80 	mov    $0xffffffff8020bd65,%rdx
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff802169c0:	66 89 8b b6 06 00 00 	mov    %cx,0x6b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff802169c7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802169ca:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802169ce:	66 89 93 c0 06 00 00 	mov    %dx,0x6c0(%rbx)
ffffffff802169d5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802169d9:	89 93 c8 06 00 00    	mov    %edx,0x6c8(%rbx)
ffffffff802169df:	48 c7 c2 71 bd 20 80 	mov    $0xffffffff8020bd71,%rdx
ffffffff802169e6:	66 89 8b c6 06 00 00 	mov    %cx,0x6c6(%rbx)
ffffffff802169ed:	48 89 d1             	mov    %rdx,%rcx
ffffffff802169f0:	66 89 93 d0 06 00 00 	mov    %dx,0x6d0(%rbx)
ffffffff802169f7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802169fb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802169ff:	89 93 d8 06 00 00    	mov    %edx,0x6d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216a05:	48 c7 c2 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rdx
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff80216a0c:	66 89 8b d6 06 00 00 	mov    %cx,0x6d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216a13:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff80216a16:	c7 83 7c 06 00 00 00 	movl   $0x0,0x67c(%rbx)
ffffffff80216a1d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216a20:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff80216a24:	c7 83 82 06 00 00 08 	movl   $0x8e000008,0x682(%rbx)
ffffffff80216a2b:	00 00 8e 
ffffffff80216a2e:	c7 83 8c 06 00 00 00 	movl   $0x0,0x68c(%rbx)
ffffffff80216a35:	00 00 00 
ffffffff80216a38:	c7 83 92 06 00 00 08 	movl   $0x8e000008,0x692(%rbx)
ffffffff80216a3f:	00 00 8e 
ffffffff80216a42:	c7 83 9c 06 00 00 00 	movl   $0x0,0x69c(%rbx)
ffffffff80216a49:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff80216a4c:	c7 83 a2 06 00 00 08 	movl   $0x8e000008,0x6a2(%rbx)
ffffffff80216a53:	00 00 8e 
ffffffff80216a56:	c7 83 ac 06 00 00 00 	movl   $0x0,0x6ac(%rbx)
ffffffff80216a5d:	00 00 00 
ffffffff80216a60:	c7 83 b2 06 00 00 08 	movl   $0x8e000008,0x6b2(%rbx)
ffffffff80216a67:	00 00 8e 
ffffffff80216a6a:	c7 83 bc 06 00 00 00 	movl   $0x0,0x6bc(%rbx)
ffffffff80216a71:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff80216a74:	c7 83 c2 06 00 00 08 	movl   $0x8e000008,0x6c2(%rbx)
ffffffff80216a7b:	00 00 8e 
ffffffff80216a7e:	c7 83 cc 06 00 00 00 	movl   $0x0,0x6cc(%rbx)
ffffffff80216a85:	00 00 00 
ffffffff80216a88:	c7 83 d2 06 00 00 08 	movl   $0x8e000008,0x6d2(%rbx)
ffffffff80216a8f:	00 00 8e 
ffffffff80216a92:	c7 83 dc 06 00 00 00 	movl   $0x0,0x6dc(%rbx)
ffffffff80216a99:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216a9c:	66 89 93 e0 06 00 00 	mov    %dx,0x6e0(%rbx)
ffffffff80216aa3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216aa7:	89 93 e8 06 00 00    	mov    %edx,0x6e8(%rbx)
ffffffff80216aad:	48 c7 c2 89 bd 20 80 	mov    $0xffffffff8020bd89,%rdx
ffffffff80216ab4:	66 89 8b e6 06 00 00 	mov    %cx,0x6e6(%rbx)
ffffffff80216abb:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216abe:	66 89 93 f0 06 00 00 	mov    %dx,0x6f0(%rbx)
ffffffff80216ac5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216ac9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216acd:	89 93 f8 06 00 00    	mov    %edx,0x6f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216ad3:	48 c7 c2 95 bd 20 80 	mov    $0xffffffff8020bd95,%rdx
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216ada:	66 89 8b f6 06 00 00 	mov    %cx,0x6f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216ae1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216ae4:	66 89 93 00 07 00 00 	mov    %dx,0x700(%rbx)
ffffffff80216aeb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216aef:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216af3:	89 93 08 07 00 00    	mov    %edx,0x708(%rbx)
ffffffff80216af9:	48 c7 c2 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rdx
ffffffff80216b00:	66 89 8b 06 07 00 00 	mov    %cx,0x706(%rbx)
ffffffff80216b07:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b0a:	66 89 93 10 07 00 00 	mov    %dx,0x710(%rbx)
ffffffff80216b11:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b15:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216b19:	89 93 18 07 00 00    	mov    %edx,0x718(%rbx)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216b1f:	48 c7 c2 ad bd 20 80 	mov    $0xffffffff8020bdad,%rdx
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216b26:	66 89 8b 16 07 00 00 	mov    %cx,0x716(%rbx)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216b2d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b30:	66 89 93 20 07 00 00 	mov    %dx,0x720(%rbx)
ffffffff80216b37:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b3b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216b3f:	89 93 28 07 00 00    	mov    %edx,0x728(%rbx)
ffffffff80216b45:	48 c7 c2 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rdx
ffffffff80216b4c:	66 89 8b 26 07 00 00 	mov    %cx,0x726(%rbx)
ffffffff80216b53:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b56:	66 89 93 30 07 00 00 	mov    %dx,0x730(%rbx)
ffffffff80216b5d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b61:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216b65:	89 93 38 07 00 00    	mov    %edx,0x738(%rbx)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216b6b:	48 c7 c2 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rdx
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216b72:	66 89 8b 36 07 00 00 	mov    %cx,0x736(%rbx)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216b79:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216b7c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216b80:	66 89 93 40 07 00 00 	mov    %dx,0x740(%rbx)
ffffffff80216b87:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216b8b:	66 89 8b 46 07 00 00 	mov    %cx,0x746(%rbx)
    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff80216b92:	c7 83 e2 06 00 00 08 	movl   $0x8e000008,0x6e2(%rbx)
ffffffff80216b99:	00 00 8e 
ffffffff80216b9c:	c7 83 ec 06 00 00 00 	movl   $0x0,0x6ec(%rbx)
ffffffff80216ba3:	00 00 00 
ffffffff80216ba6:	c7 83 f2 06 00 00 08 	movl   $0x8e000008,0x6f2(%rbx)
ffffffff80216bad:	00 00 8e 
ffffffff80216bb0:	c7 83 fc 06 00 00 00 	movl   $0x0,0x6fc(%rbx)
ffffffff80216bb7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff80216bba:	c7 83 02 07 00 00 08 	movl   $0x8e000008,0x702(%rbx)
ffffffff80216bc1:	00 00 8e 
ffffffff80216bc4:	c7 83 0c 07 00 00 00 	movl   $0x0,0x70c(%rbx)
ffffffff80216bcb:	00 00 00 
ffffffff80216bce:	c7 83 12 07 00 00 08 	movl   $0x8e000008,0x712(%rbx)
ffffffff80216bd5:	00 00 8e 
ffffffff80216bd8:	c7 83 1c 07 00 00 00 	movl   $0x0,0x71c(%rbx)
ffffffff80216bdf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff80216be2:	c7 83 22 07 00 00 08 	movl   $0x8e000008,0x722(%rbx)
ffffffff80216be9:	00 00 8e 
ffffffff80216bec:	c7 83 2c 07 00 00 00 	movl   $0x0,0x72c(%rbx)
ffffffff80216bf3:	00 00 00 
ffffffff80216bf6:	c7 83 32 07 00 00 08 	movl   $0x8e000008,0x732(%rbx)
ffffffff80216bfd:	00 00 8e 
ffffffff80216c00:	c7 83 3c 07 00 00 00 	movl   $0x0,0x73c(%rbx)
ffffffff80216c07:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216c0a:	c7 83 42 07 00 00 08 	movl   $0x8e000008,0x742(%rbx)
ffffffff80216c11:	00 00 8e 
ffffffff80216c14:	89 93 48 07 00 00    	mov    %edx,0x748(%rbx)
ffffffff80216c1a:	48 c7 c2 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rdx
ffffffff80216c21:	66 89 93 50 07 00 00 	mov    %dx,0x750(%rbx)
ffffffff80216c28:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216c2b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216c2f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216c33:	89 93 58 07 00 00    	mov    %edx,0x758(%rbx)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216c39:	48 c7 c2 dd bd 20 80 	mov    $0xffffffff8020bddd,%rdx
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216c40:	66 89 8b 56 07 00 00 	mov    %cx,0x756(%rbx)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216c47:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216c4a:	66 89 93 60 07 00 00 	mov    %dx,0x760(%rbx)
ffffffff80216c51:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216c55:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216c59:	89 93 68 07 00 00    	mov    %edx,0x768(%rbx)
ffffffff80216c5f:	48 c7 c2 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rdx
ffffffff80216c66:	66 89 8b 66 07 00 00 	mov    %cx,0x766(%rbx)
ffffffff80216c6d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216c70:	66 89 93 70 07 00 00 	mov    %dx,0x770(%rbx)
ffffffff80216c77:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216c7b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216c7f:	89 93 78 07 00 00    	mov    %edx,0x778(%rbx)
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216c85:	48 c7 c2 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rdx
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216c8c:	66 89 8b 76 07 00 00 	mov    %cx,0x776(%rbx)
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216c93:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216c96:	66 89 93 80 07 00 00 	mov    %dx,0x780(%rbx)
ffffffff80216c9d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216ca1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216ca5:	89 93 88 07 00 00    	mov    %edx,0x788(%rbx)
ffffffff80216cab:	48 c7 c2 01 be 20 80 	mov    $0xffffffff8020be01,%rdx
ffffffff80216cb2:	66 89 8b 86 07 00 00 	mov    %cx,0x786(%rbx)
ffffffff80216cb9:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216cbc:	66 89 93 90 07 00 00 	mov    %dx,0x790(%rbx)
ffffffff80216cc3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216cc7:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216ccb:	89 93 98 07 00 00    	mov    %edx,0x798(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216cd1:	48 c7 c2 0d be 20 80 	mov    $0xffffffff8020be0d,%rdx
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216cd8:	66 89 8b 96 07 00 00 	mov    %cx,0x796(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216cdf:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216ce2:	66 89 93 a0 07 00 00 	mov    %dx,0x7a0(%rbx)
ffffffff80216ce9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216ced:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216cf1:	89 93 a8 07 00 00    	mov    %edx,0x7a8(%rbx)
ffffffff80216cf7:	48 c7 c2 19 be 20 80 	mov    $0xffffffff8020be19,%rdx
ffffffff80216cfe:	66 89 8b a6 07 00 00 	mov    %cx,0x7a6(%rbx)
ffffffff80216d05:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216d08:	66 89 93 b0 07 00 00 	mov    %dx,0x7b0(%rbx)
ffffffff80216d0f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216d13:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff80216d17:	c7 83 4c 07 00 00 00 	movl   $0x0,0x74c(%rbx)
ffffffff80216d1e:	00 00 00 
ffffffff80216d21:	c7 83 52 07 00 00 08 	movl   $0x8e000008,0x752(%rbx)
ffffffff80216d28:	00 00 8e 
ffffffff80216d2b:	c7 83 5c 07 00 00 00 	movl   $0x0,0x75c(%rbx)
ffffffff80216d32:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff80216d35:	c7 83 62 07 00 00 08 	movl   $0x8e000008,0x762(%rbx)
ffffffff80216d3c:	00 00 8e 
ffffffff80216d3f:	c7 83 6c 07 00 00 00 	movl   $0x0,0x76c(%rbx)
ffffffff80216d46:	00 00 00 
ffffffff80216d49:	c7 83 72 07 00 00 08 	movl   $0x8e000008,0x772(%rbx)
ffffffff80216d50:	00 00 8e 
ffffffff80216d53:	c7 83 7c 07 00 00 00 	movl   $0x0,0x77c(%rbx)
ffffffff80216d5a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff80216d5d:	c7 83 82 07 00 00 08 	movl   $0x8e000008,0x782(%rbx)
ffffffff80216d64:	00 00 8e 
ffffffff80216d67:	c7 83 8c 07 00 00 00 	movl   $0x0,0x78c(%rbx)
ffffffff80216d6e:	00 00 00 
ffffffff80216d71:	c7 83 92 07 00 00 08 	movl   $0x8e000008,0x792(%rbx)
ffffffff80216d78:	00 00 8e 
ffffffff80216d7b:	c7 83 9c 07 00 00 00 	movl   $0x0,0x79c(%rbx)
ffffffff80216d82:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216d85:	c7 83 a2 07 00 00 08 	movl   $0x8e000008,0x7a2(%rbx)
ffffffff80216d8c:	00 00 8e 
ffffffff80216d8f:	c7 83 ac 07 00 00 00 	movl   $0x0,0x7ac(%rbx)
ffffffff80216d96:	00 00 00 
ffffffff80216d99:	c7 83 b2 07 00 00 08 	movl   $0x8e000008,0x7b2(%rbx)
ffffffff80216da0:	00 00 8e 
ffffffff80216da3:	89 93 b8 07 00 00    	mov    %edx,0x7b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216da9:	48 c7 c2 25 be 20 80 	mov    $0xffffffff8020be25,%rdx
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216db0:	66 89 8b b6 07 00 00 	mov    %cx,0x7b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216db7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216dba:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216dbe:	66 89 93 c0 07 00 00 	mov    %dx,0x7c0(%rbx)
ffffffff80216dc5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216dc9:	89 93 c8 07 00 00    	mov    %edx,0x7c8(%rbx)
ffffffff80216dcf:	48 c7 c2 31 be 20 80 	mov    $0xffffffff8020be31,%rdx
ffffffff80216dd6:	66 89 8b c6 07 00 00 	mov    %cx,0x7c6(%rbx)
ffffffff80216ddd:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216de0:	66 89 93 d0 07 00 00 	mov    %dx,0x7d0(%rbx)
ffffffff80216de7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216deb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216def:	89 93 d8 07 00 00    	mov    %edx,0x7d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216df5:	48 c7 c2 3d be 20 80 	mov    $0xffffffff8020be3d,%rdx
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216dfc:	66 89 8b d6 07 00 00 	mov    %cx,0x7d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216e03:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e06:	66 89 93 e0 07 00 00 	mov    %dx,0x7e0(%rbx)
ffffffff80216e0d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e11:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e15:	89 93 e8 07 00 00    	mov    %edx,0x7e8(%rbx)
ffffffff80216e1b:	48 c7 c2 49 be 20 80 	mov    $0xffffffff8020be49,%rdx
ffffffff80216e22:	66 89 8b e6 07 00 00 	mov    %cx,0x7e6(%rbx)
ffffffff80216e29:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e2c:	66 89 93 f0 07 00 00 	mov    %dx,0x7f0(%rbx)
ffffffff80216e33:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e37:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e3b:	89 93 f8 07 00 00    	mov    %edx,0x7f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80216e41:	48 c7 c2 55 be 20 80 	mov    $0xffffffff8020be55,%rdx
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216e48:	66 89 8b f6 07 00 00 	mov    %cx,0x7f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80216e4f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e52:	66 89 93 00 08 00 00 	mov    %dx,0x800(%rbx)
ffffffff80216e59:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e5d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e61:	89 93 08 08 00 00    	mov    %edx,0x808(%rbx)
ffffffff80216e67:	48 c7 c2 64 be 20 80 	mov    $0xffffffff8020be64,%rdx
ffffffff80216e6e:	66 89 8b 06 08 00 00 	mov    %cx,0x806(%rbx)
ffffffff80216e75:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216e78:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216e7c:	66 89 93 10 08 00 00 	mov    %dx,0x810(%rbx)
ffffffff80216e83:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216e87:	66 89 83 14 08 00 00 	mov    %ax,0x814(%rbx)
ffffffff80216e8e:	66 89 8b 16 08 00 00 	mov    %cx,0x816(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff80216e95:	c7 83 bc 07 00 00 00 	movl   $0x0,0x7bc(%rbx)
ffffffff80216e9c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff80216e9f:	c7 83 c2 07 00 00 08 	movl   $0x8e000008,0x7c2(%rbx)
ffffffff80216ea6:	00 00 8e 
ffffffff80216ea9:	c7 83 cc 07 00 00 00 	movl   $0x0,0x7cc(%rbx)
ffffffff80216eb0:	00 00 00 
ffffffff80216eb3:	c7 83 d2 07 00 00 08 	movl   $0x8e000008,0x7d2(%rbx)
ffffffff80216eba:	00 00 8e 
ffffffff80216ebd:	c7 83 dc 07 00 00 00 	movl   $0x0,0x7dc(%rbx)
ffffffff80216ec4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff80216ec7:	c7 83 e2 07 00 00 08 	movl   $0x8e000008,0x7e2(%rbx)
ffffffff80216ece:	00 00 8e 
ffffffff80216ed1:	c7 83 ec 07 00 00 00 	movl   $0x0,0x7ec(%rbx)
ffffffff80216ed8:	00 00 00 
ffffffff80216edb:	c7 83 f2 07 00 00 08 	movl   $0x8e000008,0x7f2(%rbx)
ffffffff80216ee2:	00 00 8e 
ffffffff80216ee5:	c7 83 fc 07 00 00 00 	movl   $0x0,0x7fc(%rbx)
ffffffff80216eec:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff80216eef:	c7 83 02 08 00 00 08 	movl   $0x8e000008,0x802(%rbx)
ffffffff80216ef6:	00 00 8e 
ffffffff80216ef9:	c7 83 0c 08 00 00 00 	movl   $0x0,0x80c(%rbx)
ffffffff80216f00:	00 00 00 
ffffffff80216f03:	66 44 89 83 12 08 00 	mov    %r8w,0x812(%rbx)
ffffffff80216f0a:	00 
ffffffff80216f0b:	89 93 18 08 00 00    	mov    %edx,0x818(%rbx)
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff80216f11:	48 c7 c2 73 be 20 80 	mov    $0xffffffff8020be73,%rdx
ffffffff80216f18:	66 89 93 20 08 00 00 	mov    %dx,0x820(%rbx)
ffffffff80216f1f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f22:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f26:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216f2a:	89 93 28 08 00 00    	mov    %edx,0x828(%rbx)
ffffffff80216f30:	48 c7 c2 82 be 20 80 	mov    $0xffffffff8020be82,%rdx
ffffffff80216f37:	66 89 8b 26 08 00 00 	mov    %cx,0x826(%rbx)
ffffffff80216f3e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f41:	66 89 93 30 08 00 00 	mov    %dx,0x830(%rbx)
ffffffff80216f48:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f4c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216f50:	89 93 38 08 00 00    	mov    %edx,0x838(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80216f56:	48 c7 c2 91 be 20 80 	mov    $0xffffffff8020be91,%rdx
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff80216f5d:	66 89 8b 36 08 00 00 	mov    %cx,0x836(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80216f64:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f67:	66 89 93 40 08 00 00 	mov    %dx,0x840(%rbx)
ffffffff80216f6e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f72:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216f76:	89 93 48 08 00 00    	mov    %edx,0x848(%rbx)
ffffffff80216f7c:	48 c7 c2 a0 be 20 80 	mov    $0xffffffff8020bea0,%rdx
ffffffff80216f83:	66 89 8b 46 08 00 00 	mov    %cx,0x846(%rbx)
ffffffff80216f8a:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216f8d:	66 89 93 50 08 00 00 	mov    %dx,0x850(%rbx)
ffffffff80216f94:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216f98:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216f9c:	89 93 58 08 00 00    	mov    %edx,0x858(%rbx)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80216fa2:	48 c7 c2 af be 20 80 	mov    $0xffffffff8020beaf,%rdx
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80216fa9:	66 89 8b 56 08 00 00 	mov    %cx,0x856(%rbx)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80216fb0:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216fb3:	66 89 93 60 08 00 00 	mov    %dx,0x860(%rbx)
ffffffff80216fba:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216fbe:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216fc2:	89 93 68 08 00 00    	mov    %edx,0x868(%rbx)
ffffffff80216fc8:	48 c7 c2 be be 20 80 	mov    $0xffffffff8020bebe,%rdx
ffffffff80216fcf:	66 89 8b 66 08 00 00 	mov    %cx,0x866(%rbx)
ffffffff80216fd6:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216fd9:	66 89 93 70 08 00 00 	mov    %dx,0x870(%rbx)
ffffffff80216fe0:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216fe4:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80216fe8:	89 93 78 08 00 00    	mov    %edx,0x878(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80216fee:	48 c7 c2 cd be 20 80 	mov    $0xffffffff8020becd,%rdx
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80216ff5:	66 89 8b 76 08 00 00 	mov    %cx,0x876(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80216ffc:	48 89 d1             	mov    %rdx,%rcx
ffffffff80216fff:	66 89 93 80 08 00 00 	mov    %dx,0x880(%rbx)
ffffffff80217006:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021700a:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8021700e:	c7 83 1c 08 00 00 00 	movl   $0x0,0x81c(%rbx)
ffffffff80217015:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff80217018:	c7 83 22 08 00 00 08 	movl   $0x8e000008,0x822(%rbx)
ffffffff8021701f:	00 00 8e 
ffffffff80217022:	c7 83 2c 08 00 00 00 	movl   $0x0,0x82c(%rbx)
ffffffff80217029:	00 00 00 
ffffffff8021702c:	c7 83 32 08 00 00 08 	movl   $0x8e000008,0x832(%rbx)
ffffffff80217033:	00 00 8e 
ffffffff80217036:	c7 83 3c 08 00 00 00 	movl   $0x0,0x83c(%rbx)
ffffffff8021703d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff80217040:	c7 83 42 08 00 00 08 	movl   $0x8e000008,0x842(%rbx)
ffffffff80217047:	00 00 8e 
ffffffff8021704a:	c7 83 4c 08 00 00 00 	movl   $0x0,0x84c(%rbx)
ffffffff80217051:	00 00 00 
ffffffff80217054:	c7 83 52 08 00 00 08 	movl   $0x8e000008,0x852(%rbx)
ffffffff8021705b:	00 00 8e 
ffffffff8021705e:	c7 83 5c 08 00 00 00 	movl   $0x0,0x85c(%rbx)
ffffffff80217065:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff80217068:	c7 83 62 08 00 00 08 	movl   $0x8e000008,0x862(%rbx)
ffffffff8021706f:	00 00 8e 
ffffffff80217072:	c7 83 6c 08 00 00 00 	movl   $0x0,0x86c(%rbx)
ffffffff80217079:	00 00 00 
ffffffff8021707c:	c7 83 72 08 00 00 08 	movl   $0x8e000008,0x872(%rbx)
ffffffff80217083:	00 00 8e 
ffffffff80217086:	c7 83 7c 08 00 00 00 	movl   $0x0,0x87c(%rbx)
ffffffff8021708d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80217090:	c7 83 82 08 00 00 08 	movl   $0x8e000008,0x882(%rbx)
ffffffff80217097:	00 00 8e 
ffffffff8021709a:	89 93 88 08 00 00    	mov    %edx,0x888(%rbx)
ffffffff802170a0:	48 c7 c2 dc be 20 80 	mov    $0xffffffff8020bedc,%rdx
ffffffff802170a7:	66 89 8b 86 08 00 00 	mov    %cx,0x886(%rbx)
ffffffff802170ae:	48 89 d1             	mov    %rdx,%rcx
ffffffff802170b1:	66 89 93 90 08 00 00 	mov    %dx,0x890(%rbx)
ffffffff802170b8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802170bc:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802170c0:	89 93 98 08 00 00    	mov    %edx,0x898(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff802170c6:	48 c7 c2 eb be 20 80 	mov    $0xffffffff8020beeb,%rdx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff802170cd:	66 89 8b 96 08 00 00 	mov    %cx,0x896(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff802170d4:	48 89 d1             	mov    %rdx,%rcx
ffffffff802170d7:	66 89 93 a0 08 00 00 	mov    %dx,0x8a0(%rbx)
ffffffff802170de:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802170e2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802170e6:	89 93 a8 08 00 00    	mov    %edx,0x8a8(%rbx)
ffffffff802170ec:	48 c7 c2 fa be 20 80 	mov    $0xffffffff8020befa,%rdx
ffffffff802170f3:	66 89 8b a6 08 00 00 	mov    %cx,0x8a6(%rbx)
ffffffff802170fa:	48 89 d1             	mov    %rdx,%rcx
ffffffff802170fd:	66 89 93 b0 08 00 00 	mov    %dx,0x8b0(%rbx)
ffffffff80217104:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217108:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021710c:	89 93 b8 08 00 00    	mov    %edx,0x8b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217112:	48 c7 c2 09 bf 20 80 	mov    $0xffffffff8020bf09,%rdx
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80217119:	66 89 8b b6 08 00 00 	mov    %cx,0x8b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217120:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217123:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217127:	66 89 93 c0 08 00 00 	mov    %dx,0x8c0(%rbx)
ffffffff8021712e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217132:	89 93 c8 08 00 00    	mov    %edx,0x8c8(%rbx)
ffffffff80217138:	48 c7 c2 18 bf 20 80 	mov    $0xffffffff8020bf18,%rdx
ffffffff8021713f:	66 89 8b c6 08 00 00 	mov    %cx,0x8c6(%rbx)
ffffffff80217146:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217149:	66 89 93 d0 08 00 00 	mov    %dx,0x8d0(%rbx)
ffffffff80217150:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217154:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217158:	89 93 d8 08 00 00    	mov    %edx,0x8d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8021715e:	48 c7 c2 27 bf 20 80 	mov    $0xffffffff8020bf27,%rdx
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80217165:	66 89 8b d6 08 00 00 	mov    %cx,0x8d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8021716c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021716f:	66 89 93 e0 08 00 00 	mov    %dx,0x8e0(%rbx)
ffffffff80217176:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021717a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021717e:	89 93 e8 08 00 00    	mov    %edx,0x8e8(%rbx)
ffffffff80217184:	48 c7 c2 36 bf 20 80 	mov    $0xffffffff8020bf36,%rdx
ffffffff8021718b:	66 89 8b e6 08 00 00 	mov    %cx,0x8e6(%rbx)
ffffffff80217192:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80217195:	c7 83 8c 08 00 00 00 	movl   $0x0,0x88c(%rbx)
ffffffff8021719c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8021719f:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff802171a3:	c7 83 92 08 00 00 08 	movl   $0x8e000008,0x892(%rbx)
ffffffff802171aa:	00 00 8e 
ffffffff802171ad:	c7 83 9c 08 00 00 00 	movl   $0x0,0x89c(%rbx)
ffffffff802171b4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff802171b7:	c7 83 a2 08 00 00 08 	movl   $0x8e000008,0x8a2(%rbx)
ffffffff802171be:	00 00 8e 
ffffffff802171c1:	c7 83 ac 08 00 00 00 	movl   $0x0,0x8ac(%rbx)
ffffffff802171c8:	00 00 00 
ffffffff802171cb:	c7 83 b2 08 00 00 08 	movl   $0x8e000008,0x8b2(%rbx)
ffffffff802171d2:	00 00 8e 
ffffffff802171d5:	c7 83 bc 08 00 00 00 	movl   $0x0,0x8bc(%rbx)
ffffffff802171dc:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff802171df:	c7 83 c2 08 00 00 08 	movl   $0x8e000008,0x8c2(%rbx)
ffffffff802171e6:	00 00 8e 
ffffffff802171e9:	c7 83 cc 08 00 00 00 	movl   $0x0,0x8cc(%rbx)
ffffffff802171f0:	00 00 00 
ffffffff802171f3:	c7 83 d2 08 00 00 08 	movl   $0x8e000008,0x8d2(%rbx)
ffffffff802171fa:	00 00 8e 
ffffffff802171fd:	c7 83 dc 08 00 00 00 	movl   $0x0,0x8dc(%rbx)
ffffffff80217204:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80217207:	c7 83 e2 08 00 00 08 	movl   $0x8e000008,0x8e2(%rbx)
ffffffff8021720e:	00 00 8e 
ffffffff80217211:	c7 83 ec 08 00 00 00 	movl   $0x0,0x8ec(%rbx)
ffffffff80217218:	00 00 00 
ffffffff8021721b:	66 89 93 f0 08 00 00 	mov    %dx,0x8f0(%rbx)
ffffffff80217222:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217226:	89 93 f8 08 00 00    	mov    %edx,0x8f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8021722c:	48 c7 c2 45 bf 20 80 	mov    $0xffffffff8020bf45,%rdx
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80217233:	66 89 8b f6 08 00 00 	mov    %cx,0x8f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8021723a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021723d:	66 89 93 00 09 00 00 	mov    %dx,0x900(%rbx)
ffffffff80217244:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217248:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021724c:	89 93 08 09 00 00    	mov    %edx,0x908(%rbx)
ffffffff80217252:	48 c7 c2 54 bf 20 80 	mov    $0xffffffff8020bf54,%rdx
ffffffff80217259:	66 89 8b 06 09 00 00 	mov    %cx,0x906(%rbx)
ffffffff80217260:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217263:	66 89 93 10 09 00 00 	mov    %dx,0x910(%rbx)
ffffffff8021726a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021726e:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217272:	89 93 18 09 00 00    	mov    %edx,0x918(%rbx)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80217278:	48 c7 c2 63 bf 20 80 	mov    $0xffffffff8020bf63,%rdx
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8021727f:	66 89 8b 16 09 00 00 	mov    %cx,0x916(%rbx)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80217286:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217289:	66 89 93 20 09 00 00 	mov    %dx,0x920(%rbx)
ffffffff80217290:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217294:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217298:	89 93 28 09 00 00    	mov    %edx,0x928(%rbx)
ffffffff8021729e:	48 c7 c2 72 bf 20 80 	mov    $0xffffffff8020bf72,%rdx
ffffffff802172a5:	66 89 8b 26 09 00 00 	mov    %cx,0x926(%rbx)
ffffffff802172ac:	48 89 d1             	mov    %rdx,%rcx
ffffffff802172af:	66 89 93 30 09 00 00 	mov    %dx,0x930(%rbx)
ffffffff802172b6:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802172ba:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802172be:	89 93 38 09 00 00    	mov    %edx,0x938(%rbx)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff802172c4:	48 c7 c2 81 bf 20 80 	mov    $0xffffffff8020bf81,%rdx
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff802172cb:	66 89 8b 36 09 00 00 	mov    %cx,0x936(%rbx)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff802172d2:	48 89 d1             	mov    %rdx,%rcx
ffffffff802172d5:	66 89 93 40 09 00 00 	mov    %dx,0x940(%rbx)
ffffffff802172dc:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802172e0:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802172e4:	89 93 48 09 00 00    	mov    %edx,0x948(%rbx)
ffffffff802172ea:	48 c7 c2 90 bf 20 80 	mov    $0xffffffff8020bf90,%rdx
ffffffff802172f1:	66 89 8b 46 09 00 00 	mov    %cx,0x946(%rbx)
ffffffff802172f8:	48 89 d1             	mov    %rdx,%rcx
ffffffff802172fb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802172ff:	66 89 93 50 09 00 00 	mov    %dx,0x950(%rbx)
ffffffff80217306:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8021730a:	c7 83 f2 08 00 00 08 	movl   $0x8e000008,0x8f2(%rbx)
ffffffff80217311:	00 00 8e 
ffffffff80217314:	c7 83 fc 08 00 00 00 	movl   $0x0,0x8fc(%rbx)
ffffffff8021731b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8021731e:	c7 83 02 09 00 00 08 	movl   $0x8e000008,0x902(%rbx)
ffffffff80217325:	00 00 8e 
ffffffff80217328:	c7 83 0c 09 00 00 00 	movl   $0x0,0x90c(%rbx)
ffffffff8021732f:	00 00 00 
ffffffff80217332:	c7 83 12 09 00 00 08 	movl   $0x8e000008,0x912(%rbx)
ffffffff80217339:	00 00 8e 
ffffffff8021733c:	c7 83 1c 09 00 00 00 	movl   $0x0,0x91c(%rbx)
ffffffff80217343:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80217346:	c7 83 22 09 00 00 08 	movl   $0x8e000008,0x922(%rbx)
ffffffff8021734d:	00 00 8e 
ffffffff80217350:	c7 83 2c 09 00 00 00 	movl   $0x0,0x92c(%rbx)
ffffffff80217357:	00 00 00 
ffffffff8021735a:	c7 83 32 09 00 00 08 	movl   $0x8e000008,0x932(%rbx)
ffffffff80217361:	00 00 8e 
ffffffff80217364:	c7 83 3c 09 00 00 00 	movl   $0x0,0x93c(%rbx)
ffffffff8021736b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8021736e:	c7 83 42 09 00 00 08 	movl   $0x8e000008,0x942(%rbx)
ffffffff80217375:	00 00 8e 
ffffffff80217378:	c7 83 4c 09 00 00 00 	movl   $0x0,0x94c(%rbx)
ffffffff8021737f:	00 00 00 
ffffffff80217382:	c7 83 52 09 00 00 08 	movl   $0x8e000008,0x952(%rbx)
ffffffff80217389:	00 00 8e 
ffffffff8021738c:	66 89 8b 56 09 00 00 	mov    %cx,0x956(%rbx)
ffffffff80217393:	89 93 58 09 00 00    	mov    %edx,0x958(%rbx)
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80217399:	48 c7 c2 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rdx
ffffffff802173a0:	66 89 93 60 09 00 00 	mov    %dx,0x960(%rbx)
ffffffff802173a7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802173aa:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802173ae:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802173b2:	89 93 68 09 00 00    	mov    %edx,0x968(%rbx)
ffffffff802173b8:	48 c7 c2 ae bf 20 80 	mov    $0xffffffff8020bfae,%rdx
ffffffff802173bf:	66 89 8b 66 09 00 00 	mov    %cx,0x966(%rbx)
ffffffff802173c6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802173c9:	66 89 93 70 09 00 00 	mov    %dx,0x970(%rbx)
ffffffff802173d0:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802173d4:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802173d8:	89 93 78 09 00 00    	mov    %edx,0x978(%rbx)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff802173de:	48 c7 c2 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rdx
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff802173e5:	66 89 8b 76 09 00 00 	mov    %cx,0x976(%rbx)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff802173ec:	48 89 d1             	mov    %rdx,%rcx
ffffffff802173ef:	66 89 93 80 09 00 00 	mov    %dx,0x980(%rbx)
ffffffff802173f6:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802173fa:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802173fe:	89 93 88 09 00 00    	mov    %edx,0x988(%rbx)
ffffffff80217404:	48 c7 c2 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rdx
ffffffff8021740b:	66 89 8b 86 09 00 00 	mov    %cx,0x986(%rbx)
ffffffff80217412:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217415:	66 89 93 90 09 00 00 	mov    %dx,0x990(%rbx)
ffffffff8021741c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217420:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217424:	89 93 98 09 00 00    	mov    %edx,0x998(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8021742a:	48 c7 c2 db bf 20 80 	mov    $0xffffffff8020bfdb,%rdx
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80217431:	66 89 8b 96 09 00 00 	mov    %cx,0x996(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff80217438:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021743b:	66 89 93 a0 09 00 00 	mov    %dx,0x9a0(%rbx)
ffffffff80217442:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217446:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021744a:	89 93 a8 09 00 00    	mov    %edx,0x9a8(%rbx)
ffffffff80217450:	48 c7 c2 ea bf 20 80 	mov    $0xffffffff8020bfea,%rdx
ffffffff80217457:	66 89 8b a6 09 00 00 	mov    %cx,0x9a6(%rbx)
ffffffff8021745e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217461:	66 89 93 b0 09 00 00 	mov    %dx,0x9b0(%rbx)
ffffffff80217468:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021746c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217470:	89 93 b8 09 00 00    	mov    %edx,0x9b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217476:	48 c7 c2 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rdx
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8021747d:	66 89 8b b6 09 00 00 	mov    %cx,0x9b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217484:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80217487:	c7 83 5c 09 00 00 00 	movl   $0x0,0x95c(%rbx)
ffffffff8021748e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217491:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80217495:	c7 83 62 09 00 00 08 	movl   $0x8e000008,0x962(%rbx)
ffffffff8021749c:	00 00 8e 
ffffffff8021749f:	c7 83 6c 09 00 00 00 	movl   $0x0,0x96c(%rbx)
ffffffff802174a6:	00 00 00 
ffffffff802174a9:	c7 83 72 09 00 00 08 	movl   $0x8e000008,0x972(%rbx)
ffffffff802174b0:	00 00 8e 
ffffffff802174b3:	c7 83 7c 09 00 00 00 	movl   $0x0,0x97c(%rbx)
ffffffff802174ba:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff802174bd:	c7 83 82 09 00 00 08 	movl   $0x8e000008,0x982(%rbx)
ffffffff802174c4:	00 00 8e 
ffffffff802174c7:	c7 83 8c 09 00 00 00 	movl   $0x0,0x98c(%rbx)
ffffffff802174ce:	00 00 00 
ffffffff802174d1:	c7 83 92 09 00 00 08 	movl   $0x8e000008,0x992(%rbx)
ffffffff802174d8:	00 00 8e 
ffffffff802174db:	c7 83 9c 09 00 00 00 	movl   $0x0,0x99c(%rbx)
ffffffff802174e2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff802174e5:	c7 83 a2 09 00 00 08 	movl   $0x8e000008,0x9a2(%rbx)
ffffffff802174ec:	00 00 8e 
ffffffff802174ef:	c7 83 ac 09 00 00 00 	movl   $0x0,0x9ac(%rbx)
ffffffff802174f6:	00 00 00 
ffffffff802174f9:	c7 83 b2 09 00 00 08 	movl   $0x8e000008,0x9b2(%rbx)
ffffffff80217500:	00 00 8e 
ffffffff80217503:	c7 83 bc 09 00 00 00 	movl   $0x0,0x9bc(%rbx)
ffffffff8021750a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8021750d:	66 89 93 c0 09 00 00 	mov    %dx,0x9c0(%rbx)
ffffffff80217514:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217518:	89 93 c8 09 00 00    	mov    %edx,0x9c8(%rbx)
ffffffff8021751e:	48 c7 c2 08 c0 20 80 	mov    $0xffffffff8020c008,%rdx
ffffffff80217525:	66 89 8b c6 09 00 00 	mov    %cx,0x9c6(%rbx)
ffffffff8021752c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021752f:	66 89 93 d0 09 00 00 	mov    %dx,0x9d0(%rbx)
ffffffff80217536:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021753a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021753e:	89 93 d8 09 00 00    	mov    %edx,0x9d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217544:	48 c7 c2 17 c0 20 80 	mov    $0xffffffff8020c017,%rdx
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8021754b:	66 89 8b d6 09 00 00 	mov    %cx,0x9d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217552:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217555:	66 89 93 e0 09 00 00 	mov    %dx,0x9e0(%rbx)
ffffffff8021755c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217560:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217564:	89 93 e8 09 00 00    	mov    %edx,0x9e8(%rbx)
ffffffff8021756a:	48 c7 c2 26 c0 20 80 	mov    $0xffffffff8020c026,%rdx
ffffffff80217571:	66 89 8b e6 09 00 00 	mov    %cx,0x9e6(%rbx)
ffffffff80217578:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021757b:	66 89 93 f0 09 00 00 	mov    %dx,0x9f0(%rbx)
ffffffff80217582:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217586:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021758a:	89 93 f8 09 00 00    	mov    %edx,0x9f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80217590:	48 c7 c2 35 c0 20 80 	mov    $0xffffffff8020c035,%rdx
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80217597:	66 89 8b f6 09 00 00 	mov    %cx,0x9f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8021759e:	48 89 d1             	mov    %rdx,%rcx
ffffffff802175a1:	66 89 93 00 0a 00 00 	mov    %dx,0xa00(%rbx)
ffffffff802175a8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802175ac:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802175b0:	89 93 08 0a 00 00    	mov    %edx,0xa08(%rbx)
ffffffff802175b6:	48 c7 c2 44 c0 20 80 	mov    $0xffffffff8020c044,%rdx
ffffffff802175bd:	66 89 8b 06 0a 00 00 	mov    %cx,0xa06(%rbx)
ffffffff802175c4:	48 89 d1             	mov    %rdx,%rcx
ffffffff802175c7:	66 89 93 10 0a 00 00 	mov    %dx,0xa10(%rbx)
ffffffff802175ce:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802175d2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802175d6:	89 93 18 0a 00 00    	mov    %edx,0xa18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff802175dc:	48 c7 c2 53 c0 20 80 	mov    $0xffffffff8020c053,%rdx
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff802175e3:	66 89 8b 16 0a 00 00 	mov    %cx,0xa16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff802175ea:	48 89 d1             	mov    %rdx,%rcx
ffffffff802175ed:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802175f1:	66 89 93 20 0a 00 00 	mov    %dx,0xa20(%rbx)
ffffffff802175f8:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff802175fc:	66 89 83 14 0a 00 00 	mov    %ax,0xa14(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80217603:	c7 83 c2 09 00 00 08 	movl   $0x8e000008,0x9c2(%rbx)
ffffffff8021760a:	00 00 8e 
ffffffff8021760d:	c7 83 cc 09 00 00 00 	movl   $0x0,0x9cc(%rbx)
ffffffff80217614:	00 00 00 
ffffffff80217617:	c7 83 d2 09 00 00 08 	movl   $0x8e000008,0x9d2(%rbx)
ffffffff8021761e:	00 00 8e 
ffffffff80217621:	c7 83 dc 09 00 00 00 	movl   $0x0,0x9dc(%rbx)
ffffffff80217628:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8021762b:	c7 83 e2 09 00 00 08 	movl   $0x8e000008,0x9e2(%rbx)
ffffffff80217632:	00 00 8e 
ffffffff80217635:	c7 83 ec 09 00 00 00 	movl   $0x0,0x9ec(%rbx)
ffffffff8021763c:	00 00 00 
ffffffff8021763f:	c7 83 f2 09 00 00 08 	movl   $0x8e000008,0x9f2(%rbx)
ffffffff80217646:	00 00 8e 
ffffffff80217649:	c7 83 fc 09 00 00 00 	movl   $0x0,0x9fc(%rbx)
ffffffff80217650:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80217653:	c7 83 02 0a 00 00 08 	movl   $0x8e000008,0xa02(%rbx)
ffffffff8021765a:	00 00 8e 
ffffffff8021765d:	c7 83 0c 0a 00 00 00 	movl   $0x0,0xa0c(%rbx)
ffffffff80217664:	00 00 00 
ffffffff80217667:	66 44 89 8b 12 0a 00 	mov    %r9w,0xa12(%rbx)
ffffffff8021766e:	00 
ffffffff8021766f:	c7 83 1c 0a 00 00 00 	movl   $0x0,0xa1c(%rbx)
ffffffff80217676:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80217679:	c7 83 22 0a 00 00 08 	movl   $0x8e000008,0xa22(%rbx)
ffffffff80217680:	00 00 8e 
ffffffff80217683:	66 89 8b 26 0a 00 00 	mov    %cx,0xa26(%rbx)
ffffffff8021768a:	89 93 28 0a 00 00    	mov    %edx,0xa28(%rbx)
ffffffff80217690:	48 c7 c2 62 c0 20 80 	mov    $0xffffffff8020c062,%rdx
ffffffff80217697:	66 89 93 30 0a 00 00 	mov    %dx,0xa30(%rbx)
ffffffff8021769e:	48 89 d1             	mov    %rdx,%rcx
ffffffff802176a1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802176a5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802176a9:	89 93 38 0a 00 00    	mov    %edx,0xa38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff802176af:	48 c7 c2 71 c0 20 80 	mov    $0xffffffff8020c071,%rdx
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff802176b6:	66 89 8b 36 0a 00 00 	mov    %cx,0xa36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff802176bd:	48 89 d1             	mov    %rdx,%rcx
ffffffff802176c0:	66 89 93 40 0a 00 00 	mov    %dx,0xa40(%rbx)
ffffffff802176c7:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802176cb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802176cf:	89 93 48 0a 00 00    	mov    %edx,0xa48(%rbx)
ffffffff802176d5:	48 c7 c2 80 c0 20 80 	mov    $0xffffffff8020c080,%rdx
ffffffff802176dc:	66 89 8b 46 0a 00 00 	mov    %cx,0xa46(%rbx)
ffffffff802176e3:	48 89 d1             	mov    %rdx,%rcx
ffffffff802176e6:	66 89 93 50 0a 00 00 	mov    %dx,0xa50(%rbx)
ffffffff802176ed:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802176f1:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802176f5:	89 93 58 0a 00 00    	mov    %edx,0xa58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff802176fb:	48 c7 c2 8f c0 20 80 	mov    $0xffffffff8020c08f,%rdx
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80217702:	66 89 8b 56 0a 00 00 	mov    %cx,0xa56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80217709:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021770c:	66 89 93 60 0a 00 00 	mov    %dx,0xa60(%rbx)
ffffffff80217713:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217717:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021771b:	89 93 68 0a 00 00    	mov    %edx,0xa68(%rbx)
ffffffff80217721:	48 c7 c2 9e c0 20 80 	mov    $0xffffffff8020c09e,%rdx
ffffffff80217728:	66 89 8b 66 0a 00 00 	mov    %cx,0xa66(%rbx)
ffffffff8021772f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217732:	66 89 93 70 0a 00 00 	mov    %dx,0xa70(%rbx)
ffffffff80217739:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021773d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217741:	89 93 78 0a 00 00    	mov    %edx,0xa78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80217747:	48 c7 c2 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rdx
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff8021774e:	66 89 8b 76 0a 00 00 	mov    %cx,0xa76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80217755:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217758:	66 89 93 80 0a 00 00 	mov    %dx,0xa80(%rbx)
ffffffff8021775f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217763:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217767:	89 93 88 0a 00 00    	mov    %edx,0xa88(%rbx)
ffffffff8021776d:	48 c7 c2 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rdx
ffffffff80217774:	66 89 8b 86 0a 00 00 	mov    %cx,0xa86(%rbx)
ffffffff8021777b:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8021777e:	c7 83 2c 0a 00 00 00 	movl   $0x0,0xa2c(%rbx)
ffffffff80217785:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80217788:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8021778c:	c7 83 32 0a 00 00 08 	movl   $0x8e000008,0xa32(%rbx)
ffffffff80217793:	00 00 8e 
ffffffff80217796:	c7 83 3c 0a 00 00 00 	movl   $0x0,0xa3c(%rbx)
ffffffff8021779d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff802177a0:	c7 83 42 0a 00 00 08 	movl   $0x8e000008,0xa42(%rbx)
ffffffff802177a7:	00 00 8e 
ffffffff802177aa:	c7 83 4c 0a 00 00 00 	movl   $0x0,0xa4c(%rbx)
ffffffff802177b1:	00 00 00 
ffffffff802177b4:	c7 83 52 0a 00 00 08 	movl   $0x8e000008,0xa52(%rbx)
ffffffff802177bb:	00 00 8e 
ffffffff802177be:	c7 83 5c 0a 00 00 00 	movl   $0x0,0xa5c(%rbx)
ffffffff802177c5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff802177c8:	c7 83 62 0a 00 00 08 	movl   $0x8e000008,0xa62(%rbx)
ffffffff802177cf:	00 00 8e 
ffffffff802177d2:	c7 83 6c 0a 00 00 00 	movl   $0x0,0xa6c(%rbx)
ffffffff802177d9:	00 00 00 
ffffffff802177dc:	c7 83 72 0a 00 00 08 	movl   $0x8e000008,0xa72(%rbx)
ffffffff802177e3:	00 00 8e 
ffffffff802177e6:	c7 83 7c 0a 00 00 00 	movl   $0x0,0xa7c(%rbx)
ffffffff802177ed:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff802177f0:	c7 83 82 0a 00 00 08 	movl   $0x8e000008,0xa82(%rbx)
ffffffff802177f7:	00 00 8e 
ffffffff802177fa:	c7 83 8c 0a 00 00 00 	movl   $0x0,0xa8c(%rbx)
ffffffff80217801:	00 00 00 
ffffffff80217804:	66 89 93 90 0a 00 00 	mov    %dx,0xa90(%rbx)
ffffffff8021780b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021780f:	89 93 98 0a 00 00    	mov    %edx,0xa98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80217815:	48 c7 c2 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rdx
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8021781c:	66 89 8b 96 0a 00 00 	mov    %cx,0xa96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80217823:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217826:	66 89 93 a0 0a 00 00 	mov    %dx,0xaa0(%rbx)
ffffffff8021782d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217831:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217835:	89 93 a8 0a 00 00    	mov    %edx,0xaa8(%rbx)
ffffffff8021783b:	48 c7 c2 da c0 20 80 	mov    $0xffffffff8020c0da,%rdx
ffffffff80217842:	66 89 8b a6 0a 00 00 	mov    %cx,0xaa6(%rbx)
ffffffff80217849:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021784c:	66 89 93 b0 0a 00 00 	mov    %dx,0xab0(%rbx)
ffffffff80217853:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217857:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021785b:	89 93 b8 0a 00 00    	mov    %edx,0xab8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80217861:	48 c7 c2 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rdx
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80217868:	66 89 8b b6 0a 00 00 	mov    %cx,0xab6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8021786f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217872:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217876:	66 89 93 c0 0a 00 00 	mov    %dx,0xac0(%rbx)
ffffffff8021787d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217881:	89 93 c8 0a 00 00    	mov    %edx,0xac8(%rbx)
ffffffff80217887:	48 c7 c2 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rdx
ffffffff8021788e:	66 89 8b c6 0a 00 00 	mov    %cx,0xac6(%rbx)
ffffffff80217895:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217898:	66 89 93 d0 0a 00 00 	mov    %dx,0xad0(%rbx)
ffffffff8021789f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802178a3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802178a7:	89 93 d8 0a 00 00    	mov    %edx,0xad8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff802178ad:	48 c7 c2 07 c1 20 80 	mov    $0xffffffff8020c107,%rdx
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff802178b4:	66 89 8b d6 0a 00 00 	mov    %cx,0xad6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff802178bb:	48 89 d1             	mov    %rdx,%rcx
ffffffff802178be:	66 89 93 e0 0a 00 00 	mov    %dx,0xae0(%rbx)
ffffffff802178c5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802178c9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802178cd:	89 93 e8 0a 00 00    	mov    %edx,0xae8(%rbx)
ffffffff802178d3:	48 c7 c2 16 c1 20 80 	mov    $0xffffffff8020c116,%rdx
ffffffff802178da:	66 89 8b e6 0a 00 00 	mov    %cx,0xae6(%rbx)
ffffffff802178e1:	48 89 d1             	mov    %rdx,%rcx
ffffffff802178e4:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802178e8:	66 89 93 f0 0a 00 00 	mov    %dx,0xaf0(%rbx)
ffffffff802178ef:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802178f3:	66 89 8b f6 0a 00 00 	mov    %cx,0xaf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff802178fa:	c7 83 92 0a 00 00 08 	movl   $0x8e000008,0xa92(%rbx)
ffffffff80217901:	00 00 8e 
ffffffff80217904:	c7 83 9c 0a 00 00 00 	movl   $0x0,0xa9c(%rbx)
ffffffff8021790b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8021790e:	c7 83 a2 0a 00 00 08 	movl   $0x8e000008,0xaa2(%rbx)
ffffffff80217915:	00 00 8e 
ffffffff80217918:	c7 83 ac 0a 00 00 00 	movl   $0x0,0xaac(%rbx)
ffffffff8021791f:	00 00 00 
ffffffff80217922:	c7 83 b2 0a 00 00 08 	movl   $0x8e000008,0xab2(%rbx)
ffffffff80217929:	00 00 8e 
ffffffff8021792c:	c7 83 bc 0a 00 00 00 	movl   $0x0,0xabc(%rbx)
ffffffff80217933:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80217936:	c7 83 c2 0a 00 00 08 	movl   $0x8e000008,0xac2(%rbx)
ffffffff8021793d:	00 00 8e 
ffffffff80217940:	c7 83 cc 0a 00 00 00 	movl   $0x0,0xacc(%rbx)
ffffffff80217947:	00 00 00 
ffffffff8021794a:	c7 83 d2 0a 00 00 08 	movl   $0x8e000008,0xad2(%rbx)
ffffffff80217951:	00 00 8e 
ffffffff80217954:	c7 83 dc 0a 00 00 00 	movl   $0x0,0xadc(%rbx)
ffffffff8021795b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8021795e:	c7 83 e2 0a 00 00 08 	movl   $0x8e000008,0xae2(%rbx)
ffffffff80217965:	00 00 8e 
ffffffff80217968:	c7 83 ec 0a 00 00 00 	movl   $0x0,0xaec(%rbx)
ffffffff8021796f:	00 00 00 
ffffffff80217972:	c7 83 f2 0a 00 00 08 	movl   $0x8e000008,0xaf2(%rbx)
ffffffff80217979:	00 00 8e 
ffffffff8021797c:	89 93 f8 0a 00 00    	mov    %edx,0xaf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80217982:	48 c7 c2 25 c1 20 80 	mov    $0xffffffff8020c125,%rdx
ffffffff80217989:	66 89 93 00 0b 00 00 	mov    %dx,0xb00(%rbx)
ffffffff80217990:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217993:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217997:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021799b:	89 93 08 0b 00 00    	mov    %edx,0xb08(%rbx)
ffffffff802179a1:	48 c7 c2 34 c1 20 80 	mov    $0xffffffff8020c134,%rdx
ffffffff802179a8:	66 89 8b 06 0b 00 00 	mov    %cx,0xb06(%rbx)
ffffffff802179af:	48 89 d1             	mov    %rdx,%rcx
ffffffff802179b2:	66 89 93 10 0b 00 00 	mov    %dx,0xb10(%rbx)
ffffffff802179b9:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802179bd:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802179c1:	89 93 18 0b 00 00    	mov    %edx,0xb18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff802179c7:	48 c7 c2 43 c1 20 80 	mov    $0xffffffff8020c143,%rdx
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff802179ce:	66 89 8b 16 0b 00 00 	mov    %cx,0xb16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff802179d5:	48 89 d1             	mov    %rdx,%rcx
ffffffff802179d8:	66 89 93 20 0b 00 00 	mov    %dx,0xb20(%rbx)
ffffffff802179df:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802179e3:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802179e7:	89 93 28 0b 00 00    	mov    %edx,0xb28(%rbx)
ffffffff802179ed:	48 c7 c2 52 c1 20 80 	mov    $0xffffffff8020c152,%rdx
ffffffff802179f4:	66 89 8b 26 0b 00 00 	mov    %cx,0xb26(%rbx)
ffffffff802179fb:	48 89 d1             	mov    %rdx,%rcx
ffffffff802179fe:	66 89 93 30 0b 00 00 	mov    %dx,0xb30(%rbx)
ffffffff80217a05:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a09:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217a0d:	89 93 38 0b 00 00    	mov    %edx,0xb38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217a13:	48 c7 c2 61 c1 20 80 	mov    $0xffffffff8020c161,%rdx
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80217a1a:	66 89 8b 36 0b 00 00 	mov    %cx,0xb36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217a21:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a24:	66 89 93 40 0b 00 00 	mov    %dx,0xb40(%rbx)
ffffffff80217a2b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a2f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217a33:	89 93 48 0b 00 00    	mov    %edx,0xb48(%rbx)
ffffffff80217a39:	48 c7 c2 70 c1 20 80 	mov    $0xffffffff8020c170,%rdx
ffffffff80217a40:	66 89 8b 46 0b 00 00 	mov    %cx,0xb46(%rbx)
ffffffff80217a47:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a4a:	66 89 93 50 0b 00 00 	mov    %dx,0xb50(%rbx)
ffffffff80217a51:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a55:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217a59:	89 93 58 0b 00 00    	mov    %edx,0xb58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217a5f:	48 c7 c2 7f c1 20 80 	mov    $0xffffffff8020c17f,%rdx
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217a66:	66 89 8b 56 0b 00 00 	mov    %cx,0xb56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217a6d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217a70:	66 89 93 60 0b 00 00 	mov    %dx,0xb60(%rbx)
ffffffff80217a77:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217a7b:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80217a7f:	c7 83 fc 0a 00 00 00 	movl   $0x0,0xafc(%rbx)
ffffffff80217a86:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80217a89:	c7 83 02 0b 00 00 08 	movl   $0x8e000008,0xb02(%rbx)
ffffffff80217a90:	00 00 8e 
ffffffff80217a93:	c7 83 0c 0b 00 00 00 	movl   $0x0,0xb0c(%rbx)
ffffffff80217a9a:	00 00 00 
ffffffff80217a9d:	c7 83 12 0b 00 00 08 	movl   $0x8e000008,0xb12(%rbx)
ffffffff80217aa4:	00 00 8e 
ffffffff80217aa7:	c7 83 1c 0b 00 00 00 	movl   $0x0,0xb1c(%rbx)
ffffffff80217aae:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80217ab1:	c7 83 22 0b 00 00 08 	movl   $0x8e000008,0xb22(%rbx)
ffffffff80217ab8:	00 00 8e 
ffffffff80217abb:	c7 83 2c 0b 00 00 00 	movl   $0x0,0xb2c(%rbx)
ffffffff80217ac2:	00 00 00 
ffffffff80217ac5:	c7 83 32 0b 00 00 08 	movl   $0x8e000008,0xb32(%rbx)
ffffffff80217acc:	00 00 8e 
ffffffff80217acf:	c7 83 3c 0b 00 00 00 	movl   $0x0,0xb3c(%rbx)
ffffffff80217ad6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80217ad9:	c7 83 42 0b 00 00 08 	movl   $0x8e000008,0xb42(%rbx)
ffffffff80217ae0:	00 00 8e 
ffffffff80217ae3:	c7 83 4c 0b 00 00 00 	movl   $0x0,0xb4c(%rbx)
ffffffff80217aea:	00 00 00 
ffffffff80217aed:	c7 83 52 0b 00 00 08 	movl   $0x8e000008,0xb52(%rbx)
ffffffff80217af4:	00 00 8e 
ffffffff80217af7:	c7 83 5c 0b 00 00 00 	movl   $0x0,0xb5c(%rbx)
ffffffff80217afe:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217b01:	c7 83 62 0b 00 00 08 	movl   $0x8e000008,0xb62(%rbx)
ffffffff80217b08:	00 00 8e 
ffffffff80217b0b:	89 93 68 0b 00 00    	mov    %edx,0xb68(%rbx)
ffffffff80217b11:	48 c7 c2 8e c1 20 80 	mov    $0xffffffff8020c18e,%rdx
ffffffff80217b18:	66 89 8b 66 0b 00 00 	mov    %cx,0xb66(%rbx)
ffffffff80217b1f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217b22:	66 89 93 70 0b 00 00 	mov    %dx,0xb70(%rbx)
ffffffff80217b29:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b2d:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217b31:	89 93 78 0b 00 00    	mov    %edx,0xb78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217b37:	48 c7 c2 9d c1 20 80 	mov    $0xffffffff8020c19d,%rdx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217b3e:	66 89 8b 76 0b 00 00 	mov    %cx,0xb76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217b45:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217b48:	66 89 93 80 0b 00 00 	mov    %dx,0xb80(%rbx)
ffffffff80217b4f:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b53:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217b57:	89 93 88 0b 00 00    	mov    %edx,0xb88(%rbx)
ffffffff80217b5d:	48 c7 c2 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rdx
ffffffff80217b64:	66 89 8b 86 0b 00 00 	mov    %cx,0xb86(%rbx)
ffffffff80217b6b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217b6e:	66 89 93 90 0b 00 00 	mov    %dx,0xb90(%rbx)
ffffffff80217b75:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b79:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217b7d:	89 93 98 0b 00 00    	mov    %edx,0xb98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217b83:	48 c7 c2 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rdx
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217b8a:	66 89 8b 96 0b 00 00 	mov    %cx,0xb96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217b91:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217b94:	66 89 93 a0 0b 00 00 	mov    %dx,0xba0(%rbx)
ffffffff80217b9b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217b9f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ba3:	89 93 a8 0b 00 00    	mov    %edx,0xba8(%rbx)
ffffffff80217ba9:	48 c7 c2 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rdx
ffffffff80217bb0:	66 89 8b a6 0b 00 00 	mov    %cx,0xba6(%rbx)
ffffffff80217bb7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217bba:	66 89 93 b0 0b 00 00 	mov    %dx,0xbb0(%rbx)
ffffffff80217bc1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217bc5:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217bc9:	89 93 b8 0b 00 00    	mov    %edx,0xbb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217bcf:	48 c7 c2 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rdx
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217bd6:	66 89 8b b6 0b 00 00 	mov    %cx,0xbb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217bdd:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217be0:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217be4:	66 89 93 c0 0b 00 00 	mov    %dx,0xbc0(%rbx)
ffffffff80217beb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217bef:	89 93 c8 0b 00 00    	mov    %edx,0xbc8(%rbx)
ffffffff80217bf5:	48 c7 c2 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rdx
ffffffff80217bfc:	66 89 8b c6 0b 00 00 	mov    %cx,0xbc6(%rbx)
ffffffff80217c03:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217c06:	c7 83 6c 0b 00 00 00 	movl   $0x0,0xb6c(%rbx)
ffffffff80217c0d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217c10:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80217c14:	c7 83 72 0b 00 00 08 	movl   $0x8e000008,0xb72(%rbx)
ffffffff80217c1b:	00 00 8e 
ffffffff80217c1e:	c7 83 7c 0b 00 00 00 	movl   $0x0,0xb7c(%rbx)
ffffffff80217c25:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80217c28:	c7 83 82 0b 00 00 08 	movl   $0x8e000008,0xb82(%rbx)
ffffffff80217c2f:	00 00 8e 
ffffffff80217c32:	c7 83 8c 0b 00 00 00 	movl   $0x0,0xb8c(%rbx)
ffffffff80217c39:	00 00 00 
ffffffff80217c3c:	c7 83 92 0b 00 00 08 	movl   $0x8e000008,0xb92(%rbx)
ffffffff80217c43:	00 00 8e 
ffffffff80217c46:	c7 83 9c 0b 00 00 00 	movl   $0x0,0xb9c(%rbx)
ffffffff80217c4d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80217c50:	c7 83 a2 0b 00 00 08 	movl   $0x8e000008,0xba2(%rbx)
ffffffff80217c57:	00 00 8e 
ffffffff80217c5a:	c7 83 ac 0b 00 00 00 	movl   $0x0,0xbac(%rbx)
ffffffff80217c61:	00 00 00 
ffffffff80217c64:	c7 83 b2 0b 00 00 08 	movl   $0x8e000008,0xbb2(%rbx)
ffffffff80217c6b:	00 00 8e 
ffffffff80217c6e:	c7 83 bc 0b 00 00 00 	movl   $0x0,0xbbc(%rbx)
ffffffff80217c75:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217c78:	c7 83 c2 0b 00 00 08 	movl   $0x8e000008,0xbc2(%rbx)
ffffffff80217c7f:	00 00 8e 
ffffffff80217c82:	c7 83 cc 0b 00 00 00 	movl   $0x0,0xbcc(%rbx)
ffffffff80217c89:	00 00 00 
ffffffff80217c8c:	66 89 93 d0 0b 00 00 	mov    %dx,0xbd0(%rbx)
ffffffff80217c93:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217c97:	89 93 d8 0b 00 00    	mov    %edx,0xbd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217c9d:	48 c7 c2 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rdx
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217ca4:	66 89 8b d6 0b 00 00 	mov    %cx,0xbd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217cab:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217cae:	66 89 93 e0 0b 00 00 	mov    %dx,0xbe0(%rbx)
ffffffff80217cb5:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217cb9:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217cbd:	89 93 e8 0b 00 00    	mov    %edx,0xbe8(%rbx)
ffffffff80217cc3:	48 c7 c2 06 c2 20 80 	mov    $0xffffffff8020c206,%rdx
ffffffff80217cca:	66 89 8b e6 0b 00 00 	mov    %cx,0xbe6(%rbx)
ffffffff80217cd1:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217cd4:	66 89 93 f0 0b 00 00 	mov    %dx,0xbf0(%rbx)
ffffffff80217cdb:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217cdf:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ce3:	89 93 f8 0b 00 00    	mov    %edx,0xbf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217ce9:	48 c7 c2 15 c2 20 80 	mov    $0xffffffff8020c215,%rdx
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217cf0:	66 89 8b f6 0b 00 00 	mov    %cx,0xbf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217cf7:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217cfa:	66 89 93 00 0c 00 00 	mov    %dx,0xc00(%rbx)
ffffffff80217d01:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d05:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d09:	89 93 08 0c 00 00    	mov    %edx,0xc08(%rbx)
ffffffff80217d0f:	48 c7 c2 24 c2 20 80 	mov    $0xffffffff8020c224,%rdx
ffffffff80217d16:	66 89 8b 06 0c 00 00 	mov    %cx,0xc06(%rbx)
ffffffff80217d1d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d20:	66 89 93 10 0c 00 00 	mov    %dx,0xc10(%rbx)
ffffffff80217d27:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d2b:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d2f:	89 93 18 0c 00 00    	mov    %edx,0xc18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217d35:	48 c7 c2 33 c2 20 80 	mov    $0xffffffff8020c233,%rdx
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217d3c:	66 89 8b 16 0c 00 00 	mov    %cx,0xc16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217d43:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d46:	66 89 93 20 0c 00 00 	mov    %dx,0xc20(%rbx)
ffffffff80217d4d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d51:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217d55:	89 93 28 0c 00 00    	mov    %edx,0xc28(%rbx)
ffffffff80217d5b:	48 c7 c2 42 c2 20 80 	mov    $0xffffffff8020c242,%rdx
ffffffff80217d62:	66 89 8b 26 0c 00 00 	mov    %cx,0xc26(%rbx)
ffffffff80217d69:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217d6c:	66 89 93 30 0c 00 00 	mov    %dx,0xc30(%rbx)
ffffffff80217d73:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217d77:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217d7b:	66 89 83 14 0c 00 00 	mov    %ax,0xc14(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80217d82:	c7 83 d2 0b 00 00 08 	movl   $0x8e000008,0xbd2(%rbx)
ffffffff80217d89:	00 00 8e 
ffffffff80217d8c:	c7 83 dc 0b 00 00 00 	movl   $0x0,0xbdc(%rbx)
ffffffff80217d93:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80217d96:	c7 83 e2 0b 00 00 08 	movl   $0x8e000008,0xbe2(%rbx)
ffffffff80217d9d:	00 00 8e 
ffffffff80217da0:	c7 83 ec 0b 00 00 00 	movl   $0x0,0xbec(%rbx)
ffffffff80217da7:	00 00 00 
ffffffff80217daa:	c7 83 f2 0b 00 00 08 	movl   $0x8e000008,0xbf2(%rbx)
ffffffff80217db1:	00 00 8e 
ffffffff80217db4:	c7 83 fc 0b 00 00 00 	movl   $0x0,0xbfc(%rbx)
ffffffff80217dbb:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80217dbe:	c7 83 02 0c 00 00 08 	movl   $0x8e000008,0xc02(%rbx)
ffffffff80217dc5:	00 00 8e 
ffffffff80217dc8:	c7 83 0c 0c 00 00 00 	movl   $0x0,0xc0c(%rbx)
ffffffff80217dcf:	00 00 00 
ffffffff80217dd2:	66 44 89 93 12 0c 00 	mov    %r10w,0xc12(%rbx)
ffffffff80217dd9:	00 
ffffffff80217dda:	c7 83 1c 0c 00 00 00 	movl   $0x0,0xc1c(%rbx)
ffffffff80217de1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217de4:	c7 83 22 0c 00 00 08 	movl   $0x8e000008,0xc22(%rbx)
ffffffff80217deb:	00 00 8e 
ffffffff80217dee:	c7 83 2c 0c 00 00 00 	movl   $0x0,0xc2c(%rbx)
ffffffff80217df5:	00 00 00 
ffffffff80217df8:	c7 83 32 0c 00 00 08 	movl   $0x8e000008,0xc32(%rbx)
ffffffff80217dff:	00 00 8e 
ffffffff80217e02:	89 93 38 0c 00 00    	mov    %edx,0xc38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217e08:	48 c7 c2 51 c2 20 80 	mov    $0xffffffff8020c251,%rdx
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217e0f:	66 89 8b 36 0c 00 00 	mov    %cx,0xc36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217e16:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e19:	66 89 93 40 0c 00 00 	mov    %dx,0xc40(%rbx)
ffffffff80217e20:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e24:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217e28:	89 93 48 0c 00 00    	mov    %edx,0xc48(%rbx)
ffffffff80217e2e:	48 c7 c2 60 c2 20 80 	mov    $0xffffffff8020c260,%rdx
ffffffff80217e35:	66 89 8b 46 0c 00 00 	mov    %cx,0xc46(%rbx)
ffffffff80217e3c:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e3f:	66 89 93 50 0c 00 00 	mov    %dx,0xc50(%rbx)
ffffffff80217e46:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e4a:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217e4e:	89 93 58 0c 00 00    	mov    %edx,0xc58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80217e54:	48 c7 c2 6f c2 20 80 	mov    $0xffffffff8020c26f,%rdx
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217e5b:	66 89 8b 56 0c 00 00 	mov    %cx,0xc56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80217e62:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e65:	66 89 93 60 0c 00 00 	mov    %dx,0xc60(%rbx)
ffffffff80217e6c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e70:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217e74:	89 93 68 0c 00 00    	mov    %edx,0xc68(%rbx)
ffffffff80217e7a:	48 c7 c2 7e c2 20 80 	mov    $0xffffffff8020c27e,%rdx
ffffffff80217e81:	66 89 8b 66 0c 00 00 	mov    %cx,0xc66(%rbx)
ffffffff80217e88:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217e8b:	66 89 93 70 0c 00 00 	mov    %dx,0xc70(%rbx)
ffffffff80217e92:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217e96:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217e9a:	89 93 78 0c 00 00    	mov    %edx,0xc78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80217ea0:	48 c7 c2 8d c2 20 80 	mov    $0xffffffff8020c28d,%rdx
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80217ea7:	66 89 8b 76 0c 00 00 	mov    %cx,0xc76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80217eae:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217eb1:	66 89 93 80 0c 00 00 	mov    %dx,0xc80(%rbx)
ffffffff80217eb8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217ebc:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ec0:	89 93 88 0c 00 00    	mov    %edx,0xc88(%rbx)
ffffffff80217ec6:	48 c7 c2 9c c2 20 80 	mov    $0xffffffff8020c29c,%rdx
ffffffff80217ecd:	66 89 8b 86 0c 00 00 	mov    %cx,0xc86(%rbx)
ffffffff80217ed4:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217ed7:	66 89 93 90 0c 00 00 	mov    %dx,0xc90(%rbx)
ffffffff80217ede:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217ee2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217ee6:	89 93 98 0c 00 00    	mov    %edx,0xc98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217eec:	48 c7 c2 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rdx
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80217ef3:	66 89 8b 96 0c 00 00 	mov    %cx,0xc96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217efa:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80217efd:	c7 83 3c 0c 00 00 00 	movl   $0x0,0xc3c(%rbx)
ffffffff80217f04:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217f07:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80217f0b:	c7 83 42 0c 00 00 08 	movl   $0x8e000008,0xc42(%rbx)
ffffffff80217f12:	00 00 8e 
ffffffff80217f15:	c7 83 4c 0c 00 00 00 	movl   $0x0,0xc4c(%rbx)
ffffffff80217f1c:	00 00 00 
ffffffff80217f1f:	c7 83 52 0c 00 00 08 	movl   $0x8e000008,0xc52(%rbx)
ffffffff80217f26:	00 00 8e 
ffffffff80217f29:	c7 83 5c 0c 00 00 00 	movl   $0x0,0xc5c(%rbx)
ffffffff80217f30:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80217f33:	c7 83 62 0c 00 00 08 	movl   $0x8e000008,0xc62(%rbx)
ffffffff80217f3a:	00 00 8e 
ffffffff80217f3d:	c7 83 6c 0c 00 00 00 	movl   $0x0,0xc6c(%rbx)
ffffffff80217f44:	00 00 00 
ffffffff80217f47:	c7 83 72 0c 00 00 08 	movl   $0x8e000008,0xc72(%rbx)
ffffffff80217f4e:	00 00 8e 
ffffffff80217f51:	c7 83 7c 0c 00 00 00 	movl   $0x0,0xc7c(%rbx)
ffffffff80217f58:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80217f5b:	c7 83 82 0c 00 00 08 	movl   $0x8e000008,0xc82(%rbx)
ffffffff80217f62:	00 00 8e 
ffffffff80217f65:	c7 83 8c 0c 00 00 00 	movl   $0x0,0xc8c(%rbx)
ffffffff80217f6c:	00 00 00 
ffffffff80217f6f:	c7 83 92 0c 00 00 08 	movl   $0x8e000008,0xc92(%rbx)
ffffffff80217f76:	00 00 8e 
ffffffff80217f79:	c7 83 9c 0c 00 00 00 	movl   $0x0,0xc9c(%rbx)
ffffffff80217f80:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217f83:	66 89 93 a0 0c 00 00 	mov    %dx,0xca0(%rbx)
ffffffff80217f8a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217f8e:	89 93 a8 0c 00 00    	mov    %edx,0xca8(%rbx)
ffffffff80217f94:	48 c7 c2 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rdx
ffffffff80217f9b:	66 89 8b a6 0c 00 00 	mov    %cx,0xca6(%rbx)
ffffffff80217fa2:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217fa5:	66 89 93 b0 0c 00 00 	mov    %dx,0xcb0(%rbx)
ffffffff80217fac:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217fb0:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217fb4:	89 93 b8 0c 00 00    	mov    %edx,0xcb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80217fba:	48 c7 c2 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rdx
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80217fc1:	66 89 8b b6 0c 00 00 	mov    %cx,0xcb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80217fc8:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217fcb:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80217fcf:	66 89 93 c0 0c 00 00 	mov    %dx,0xcc0(%rbx)
ffffffff80217fd6:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217fda:	89 93 c8 0c 00 00    	mov    %edx,0xcc8(%rbx)
ffffffff80217fe0:	48 c7 c2 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rdx
ffffffff80217fe7:	66 89 8b c6 0c 00 00 	mov    %cx,0xcc6(%rbx)
ffffffff80217fee:	48 89 d1             	mov    %rdx,%rcx
ffffffff80217ff1:	66 89 93 d0 0c 00 00 	mov    %dx,0xcd0(%rbx)
ffffffff80217ff8:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80217ffc:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218000:	89 93 d8 0c 00 00    	mov    %edx,0xcd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80218006:	48 c7 c2 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rdx
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff8021800d:	66 89 8b d6 0c 00 00 	mov    %cx,0xcd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80218014:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218017:	66 89 93 e0 0c 00 00 	mov    %dx,0xce0(%rbx)
ffffffff8021801e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218022:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218026:	89 93 e8 0c 00 00    	mov    %edx,0xce8(%rbx)
ffffffff8021802c:	48 c7 c2 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rdx
ffffffff80218033:	66 89 8b e6 0c 00 00 	mov    %cx,0xce6(%rbx)
ffffffff8021803a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021803d:	66 89 93 f0 0c 00 00 	mov    %dx,0xcf0(%rbx)
ffffffff80218044:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218048:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021804c:	89 93 f8 0c 00 00    	mov    %edx,0xcf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80218052:	48 c7 c2 05 c3 20 80 	mov    $0xffffffff8020c305,%rdx
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80218059:	66 89 8b f6 0c 00 00 	mov    %cx,0xcf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80218060:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218063:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218067:	66 89 93 00 0d 00 00 	mov    %dx,0xd00(%rbx)
ffffffff8021806e:	48 c1 ea 20          	shr    $0x20,%rdx
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80218072:	c7 83 a2 0c 00 00 08 	movl   $0x8e000008,0xca2(%rbx)
ffffffff80218079:	00 00 8e 
ffffffff8021807c:	c7 83 ac 0c 00 00 00 	movl   $0x0,0xcac(%rbx)
ffffffff80218083:	00 00 00 
ffffffff80218086:	c7 83 b2 0c 00 00 08 	movl   $0x8e000008,0xcb2(%rbx)
ffffffff8021808d:	00 00 8e 
ffffffff80218090:	c7 83 bc 0c 00 00 00 	movl   $0x0,0xcbc(%rbx)
ffffffff80218097:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff8021809a:	c7 83 c2 0c 00 00 08 	movl   $0x8e000008,0xcc2(%rbx)
ffffffff802180a1:	00 00 8e 
ffffffff802180a4:	c7 83 cc 0c 00 00 00 	movl   $0x0,0xccc(%rbx)
ffffffff802180ab:	00 00 00 
ffffffff802180ae:	c7 83 d2 0c 00 00 08 	movl   $0x8e000008,0xcd2(%rbx)
ffffffff802180b5:	00 00 8e 
ffffffff802180b8:	c7 83 dc 0c 00 00 00 	movl   $0x0,0xcdc(%rbx)
ffffffff802180bf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802180c2:	c7 83 e2 0c 00 00 08 	movl   $0x8e000008,0xce2(%rbx)
ffffffff802180c9:	00 00 8e 
ffffffff802180cc:	c7 83 ec 0c 00 00 00 	movl   $0x0,0xcec(%rbx)
ffffffff802180d3:	00 00 00 
ffffffff802180d6:	c7 83 f2 0c 00 00 08 	movl   $0x8e000008,0xcf2(%rbx)
ffffffff802180dd:	00 00 8e 
ffffffff802180e0:	c7 83 fc 0c 00 00 00 	movl   $0x0,0xcfc(%rbx)
ffffffff802180e7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802180ea:	c7 83 02 0d 00 00 08 	movl   $0x8e000008,0xd02(%rbx)
ffffffff802180f1:	00 00 8e 
ffffffff802180f4:	66 89 8b 06 0d 00 00 	mov    %cx,0xd06(%rbx)
ffffffff802180fb:	89 93 08 0d 00 00    	mov    %edx,0xd08(%rbx)
ffffffff80218101:	48 c7 c2 14 c3 20 80 	mov    $0xffffffff8020c314,%rdx
ffffffff80218108:	66 89 93 10 0d 00 00 	mov    %dx,0xd10(%rbx)
ffffffff8021810f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218112:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218116:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021811a:	89 93 18 0d 00 00    	mov    %edx,0xd18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80218120:	48 c7 c2 23 c3 20 80 	mov    $0xffffffff8020c323,%rdx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80218127:	66 89 8b 16 0d 00 00 	mov    %cx,0xd16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff8021812e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218131:	66 89 93 20 0d 00 00 	mov    %dx,0xd20(%rbx)
ffffffff80218138:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021813c:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218140:	89 93 28 0d 00 00    	mov    %edx,0xd28(%rbx)
ffffffff80218146:	48 c7 c2 32 c3 20 80 	mov    $0xffffffff8020c332,%rdx
ffffffff8021814d:	66 89 8b 26 0d 00 00 	mov    %cx,0xd26(%rbx)
ffffffff80218154:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218157:	66 89 93 30 0d 00 00 	mov    %dx,0xd30(%rbx)
ffffffff8021815e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218162:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218166:	89 93 38 0d 00 00    	mov    %edx,0xd38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff8021816c:	48 c7 c2 41 c3 20 80 	mov    $0xffffffff8020c341,%rdx
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80218173:	66 89 8b 36 0d 00 00 	mov    %cx,0xd36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff8021817a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021817d:	66 89 93 40 0d 00 00 	mov    %dx,0xd40(%rbx)
ffffffff80218184:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218188:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021818c:	89 93 48 0d 00 00    	mov    %edx,0xd48(%rbx)
ffffffff80218192:	48 c7 c2 50 c3 20 80 	mov    $0xffffffff8020c350,%rdx
ffffffff80218199:	66 89 8b 46 0d 00 00 	mov    %cx,0xd46(%rbx)
ffffffff802181a0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802181a3:	66 89 93 50 0d 00 00 	mov    %dx,0xd50(%rbx)
ffffffff802181aa:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802181ae:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802181b2:	89 93 58 0d 00 00    	mov    %edx,0xd58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802181b8:	48 c7 c2 5f c3 20 80 	mov    $0xffffffff8020c35f,%rdx
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff802181bf:	66 89 8b 56 0d 00 00 	mov    %cx,0xd56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802181c6:	48 89 d1             	mov    %rdx,%rcx
ffffffff802181c9:	66 89 93 60 0d 00 00 	mov    %dx,0xd60(%rbx)
ffffffff802181d0:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802181d4:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802181d8:	89 93 68 0d 00 00    	mov    %edx,0xd68(%rbx)
ffffffff802181de:	48 c7 c2 6e c3 20 80 	mov    $0xffffffff8020c36e,%rdx
ffffffff802181e5:	66 89 8b 66 0d 00 00 	mov    %cx,0xd66(%rbx)
ffffffff802181ec:	48 89 d1             	mov    %rdx,%rcx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802181ef:	c7 83 0c 0d 00 00 00 	movl   $0x0,0xd0c(%rbx)
ffffffff802181f6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802181f9:	48 c1 e9 10          	shr    $0x10,%rcx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802181fd:	c7 83 12 0d 00 00 08 	movl   $0x8e000008,0xd12(%rbx)
ffffffff80218204:	00 00 8e 
ffffffff80218207:	c7 83 1c 0d 00 00 00 	movl   $0x0,0xd1c(%rbx)
ffffffff8021820e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80218211:	c7 83 22 0d 00 00 08 	movl   $0x8e000008,0xd22(%rbx)
ffffffff80218218:	00 00 8e 
ffffffff8021821b:	c7 83 2c 0d 00 00 00 	movl   $0x0,0xd2c(%rbx)
ffffffff80218222:	00 00 00 
ffffffff80218225:	c7 83 32 0d 00 00 08 	movl   $0x8e000008,0xd32(%rbx)
ffffffff8021822c:	00 00 8e 
ffffffff8021822f:	c7 83 3c 0d 00 00 00 	movl   $0x0,0xd3c(%rbx)
ffffffff80218236:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80218239:	c7 83 42 0d 00 00 08 	movl   $0x8e000008,0xd42(%rbx)
ffffffff80218240:	00 00 8e 
ffffffff80218243:	c7 83 4c 0d 00 00 00 	movl   $0x0,0xd4c(%rbx)
ffffffff8021824a:	00 00 00 
ffffffff8021824d:	c7 83 52 0d 00 00 08 	movl   $0x8e000008,0xd52(%rbx)
ffffffff80218254:	00 00 8e 
ffffffff80218257:	c7 83 5c 0d 00 00 00 	movl   $0x0,0xd5c(%rbx)
ffffffff8021825e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80218261:	c7 83 62 0d 00 00 08 	movl   $0x8e000008,0xd62(%rbx)
ffffffff80218268:	00 00 8e 
ffffffff8021826b:	c7 83 6c 0d 00 00 00 	movl   $0x0,0xd6c(%rbx)
ffffffff80218272:	00 00 00 
ffffffff80218275:	66 89 93 70 0d 00 00 	mov    %dx,0xd70(%rbx)
ffffffff8021827c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218280:	89 93 78 0d 00 00    	mov    %edx,0xd78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80218286:	48 c7 c2 7d c3 20 80 	mov    $0xffffffff8020c37d,%rdx
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff8021828d:	66 89 8b 76 0d 00 00 	mov    %cx,0xd76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80218294:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218297:	66 89 93 80 0d 00 00 	mov    %dx,0xd80(%rbx)
ffffffff8021829e:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802182a2:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802182a6:	89 93 88 0d 00 00    	mov    %edx,0xd88(%rbx)
ffffffff802182ac:	48 c7 c2 8c c3 20 80 	mov    $0xffffffff8020c38c,%rdx
ffffffff802182b3:	66 89 8b 86 0d 00 00 	mov    %cx,0xd86(%rbx)
ffffffff802182ba:	48 89 d1             	mov    %rdx,%rcx
ffffffff802182bd:	66 89 93 90 0d 00 00 	mov    %dx,0xd90(%rbx)
ffffffff802182c4:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802182c8:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802182cc:	89 93 98 0d 00 00    	mov    %edx,0xd98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802182d2:	48 c7 c2 9b c3 20 80 	mov    $0xffffffff8020c39b,%rdx
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff802182d9:	66 89 8b 96 0d 00 00 	mov    %cx,0xd96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802182e0:	48 89 d1             	mov    %rdx,%rcx
ffffffff802182e3:	66 89 93 a0 0d 00 00 	mov    %dx,0xda0(%rbx)
ffffffff802182ea:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802182ee:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802182f2:	89 93 a8 0d 00 00    	mov    %edx,0xda8(%rbx)
ffffffff802182f8:	48 c7 c2 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rdx
ffffffff802182ff:	66 89 8b a6 0d 00 00 	mov    %cx,0xda6(%rbx)
ffffffff80218306:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218309:	66 89 93 b0 0d 00 00 	mov    %dx,0xdb0(%rbx)
ffffffff80218310:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218314:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218318:	89 93 b8 0d 00 00    	mov    %edx,0xdb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff8021831e:	48 c7 c2 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rdx
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80218325:	66 89 8b b6 0d 00 00 	mov    %cx,0xdb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff8021832c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021832f:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218333:	66 89 93 c0 0d 00 00 	mov    %dx,0xdc0(%rbx)
ffffffff8021833a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021833e:	89 93 c8 0d 00 00    	mov    %edx,0xdc8(%rbx)
ffffffff80218344:	48 c7 c2 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rdx
ffffffff8021834b:	66 89 8b c6 0d 00 00 	mov    %cx,0xdc6(%rbx)
ffffffff80218352:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218355:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218359:	66 89 93 d0 0d 00 00 	mov    %dx,0xdd0(%rbx)
ffffffff80218360:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218364:	66 89 8b d6 0d 00 00 	mov    %cx,0xdd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff8021836b:	c7 83 72 0d 00 00 08 	movl   $0x8e000008,0xd72(%rbx)
ffffffff80218372:	00 00 8e 
ffffffff80218375:	c7 83 7c 0d 00 00 00 	movl   $0x0,0xd7c(%rbx)
ffffffff8021837c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff8021837f:	c7 83 82 0d 00 00 08 	movl   $0x8e000008,0xd82(%rbx)
ffffffff80218386:	00 00 8e 
ffffffff80218389:	c7 83 8c 0d 00 00 00 	movl   $0x0,0xd8c(%rbx)
ffffffff80218390:	00 00 00 
ffffffff80218393:	c7 83 92 0d 00 00 08 	movl   $0x8e000008,0xd92(%rbx)
ffffffff8021839a:	00 00 8e 
ffffffff8021839d:	c7 83 9c 0d 00 00 00 	movl   $0x0,0xd9c(%rbx)
ffffffff802183a4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802183a7:	c7 83 a2 0d 00 00 08 	movl   $0x8e000008,0xda2(%rbx)
ffffffff802183ae:	00 00 8e 
ffffffff802183b1:	c7 83 ac 0d 00 00 00 	movl   $0x0,0xdac(%rbx)
ffffffff802183b8:	00 00 00 
ffffffff802183bb:	c7 83 b2 0d 00 00 08 	movl   $0x8e000008,0xdb2(%rbx)
ffffffff802183c2:	00 00 8e 
ffffffff802183c5:	c7 83 bc 0d 00 00 00 	movl   $0x0,0xdbc(%rbx)
ffffffff802183cc:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff802183cf:	c7 83 c2 0d 00 00 08 	movl   $0x8e000008,0xdc2(%rbx)
ffffffff802183d6:	00 00 8e 
ffffffff802183d9:	c7 83 cc 0d 00 00 00 	movl   $0x0,0xdcc(%rbx)
ffffffff802183e0:	00 00 00 
ffffffff802183e3:	c7 83 d2 0d 00 00 08 	movl   $0x8e000008,0xdd2(%rbx)
ffffffff802183ea:	00 00 8e 
ffffffff802183ed:	89 93 d8 0d 00 00    	mov    %edx,0xdd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff802183f3:	48 c7 c2 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rdx
ffffffff802183fa:	66 89 93 e0 0d 00 00 	mov    %dx,0xde0(%rbx)
ffffffff80218401:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218404:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218408:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff8021840c:	89 93 e8 0d 00 00    	mov    %edx,0xde8(%rbx)
ffffffff80218412:	48 c7 c2 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rdx
ffffffff80218419:	66 89 8b e6 0d 00 00 	mov    %cx,0xde6(%rbx)
ffffffff80218420:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218423:	66 89 93 f0 0d 00 00 	mov    %dx,0xdf0(%rbx)
ffffffff8021842a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021842e:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218432:	89 93 f8 0d 00 00    	mov    %edx,0xdf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218438:	48 c7 c2 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rdx
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff8021843f:	66 89 8b f6 0d 00 00 	mov    %cx,0xdf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218446:	48 89 d1             	mov    %rdx,%rcx
ffffffff80218449:	66 89 93 00 0e 00 00 	mov    %dx,0xe00(%rbx)
ffffffff80218450:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218454:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff80218458:	89 93 08 0e 00 00    	mov    %edx,0xe08(%rbx)
ffffffff8021845e:	48 c7 c2 04 c4 20 80 	mov    $0xffffffff8020c404,%rdx
ffffffff80218465:	66 89 83 14 0e 00 00 	mov    %ax,0xe14(%rbx)
ffffffff8021846c:	48 89 d0             	mov    %rdx,%rax
ffffffff8021846f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218473:	66 89 93 10 0e 00 00 	mov    %dx,0xe10(%rbx)
ffffffff8021847a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021847e:	66 89 83 16 0e 00 00 	mov    %ax,0xe16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218485:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff8021848c:	89 93 18 0e 00 00    	mov    %edx,0xe18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218492:	48 89 c2             	mov    %rax,%rdx
ffffffff80218495:	66 89 83 20 0e 00 00 	mov    %ax,0xe20(%rbx)
ffffffff8021849c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802184a0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802184a4:	89 83 28 0e 00 00    	mov    %eax,0xe28(%rbx)
ffffffff802184aa:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff802184b1:	66 89 93 26 0e 00 00 	mov    %dx,0xe26(%rbx)
ffffffff802184b8:	48 89 c2             	mov    %rax,%rdx
ffffffff802184bb:	66 89 83 30 0e 00 00 	mov    %ax,0xe30(%rbx)
ffffffff802184c2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802184c6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802184ca:	89 83 38 0e 00 00    	mov    %eax,0xe38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802184d0:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff802184d7:	66 89 93 36 0e 00 00 	mov    %dx,0xe36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802184de:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff802184e1:	c7 83 dc 0d 00 00 00 	movl   $0x0,0xddc(%rbx)
ffffffff802184e8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802184eb:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff802184ef:	c7 83 e2 0d 00 00 08 	movl   $0x8e000008,0xde2(%rbx)
ffffffff802184f6:	00 00 8e 
ffffffff802184f9:	c7 83 ec 0d 00 00 00 	movl   $0x0,0xdec(%rbx)
ffffffff80218500:	00 00 00 
ffffffff80218503:	c7 83 f2 0d 00 00 08 	movl   $0x8e000008,0xdf2(%rbx)
ffffffff8021850a:	00 00 8e 
ffffffff8021850d:	c7 83 fc 0d 00 00 00 	movl   $0x0,0xdfc(%rbx)
ffffffff80218514:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80218517:	c7 83 02 0e 00 00 08 	movl   $0x8e000008,0xe02(%rbx)
ffffffff8021851e:	00 00 8e 
ffffffff80218521:	66 89 8b 06 0e 00 00 	mov    %cx,0xe06(%rbx)
ffffffff80218528:	c7 83 0c 0e 00 00 00 	movl   $0x0,0xe0c(%rbx)
ffffffff8021852f:	00 00 00 
ffffffff80218532:	66 44 89 9b 12 0e 00 	mov    %r11w,0xe12(%rbx)
ffffffff80218539:	00 
ffffffff8021853a:	c7 83 1c 0e 00 00 00 	movl   $0x0,0xe1c(%rbx)
ffffffff80218541:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80218544:	c7 83 22 0e 00 00 08 	movl   $0x8e000008,0xe22(%rbx)
ffffffff8021854b:	00 00 8e 
ffffffff8021854e:	c7 83 2c 0e 00 00 00 	movl   $0x0,0xe2c(%rbx)
ffffffff80218555:	00 00 00 
ffffffff80218558:	c7 83 32 0e 00 00 08 	movl   $0x8e000008,0xe32(%rbx)
ffffffff8021855f:	00 00 8e 
ffffffff80218562:	c7 83 3c 0e 00 00 00 	movl   $0x0,0xe3c(%rbx)
ffffffff80218569:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff8021856c:	66 89 83 40 0e 00 00 	mov    %ax,0xe40(%rbx)
ffffffff80218573:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218577:	89 83 48 0e 00 00    	mov    %eax,0xe48(%rbx)
ffffffff8021857d:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff80218584:	66 89 93 46 0e 00 00 	mov    %dx,0xe46(%rbx)
ffffffff8021858b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021858e:	66 89 83 50 0e 00 00 	mov    %ax,0xe50(%rbx)
ffffffff80218595:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218599:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021859d:	89 83 58 0e 00 00    	mov    %eax,0xe58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802185a3:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802185aa:	66 89 93 56 0e 00 00 	mov    %dx,0xe56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802185b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802185b4:	66 89 83 60 0e 00 00 	mov    %ax,0xe60(%rbx)
ffffffff802185bb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802185bf:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802185c3:	89 83 68 0e 00 00    	mov    %eax,0xe68(%rbx)
ffffffff802185c9:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff802185d0:	66 89 93 66 0e 00 00 	mov    %dx,0xe66(%rbx)
ffffffff802185d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802185da:	66 89 83 70 0e 00 00 	mov    %ax,0xe70(%rbx)
ffffffff802185e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802185e5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802185e9:	89 83 78 0e 00 00    	mov    %eax,0xe78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff802185ef:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802185f6:	66 89 93 76 0e 00 00 	mov    %dx,0xe76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff802185fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80218600:	66 89 83 80 0e 00 00 	mov    %ax,0xe80(%rbx)
ffffffff80218607:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021860b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021860f:	89 83 88 0e 00 00    	mov    %eax,0xe88(%rbx)
ffffffff80218615:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff8021861c:	66 89 93 86 0e 00 00 	mov    %dx,0xe86(%rbx)
ffffffff80218623:	48 89 c2             	mov    %rax,%rdx
ffffffff80218626:	66 89 83 90 0e 00 00 	mov    %ax,0xe90(%rbx)
ffffffff8021862d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218631:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218635:	89 83 98 0e 00 00    	mov    %eax,0xe98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff8021863b:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80218642:	66 89 93 96 0e 00 00 	mov    %dx,0xe96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218649:	48 89 c2             	mov    %rax,%rdx
ffffffff8021864c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218650:	66 89 83 a0 0e 00 00 	mov    %ax,0xea0(%rbx)
ffffffff80218657:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021865b:	66 89 93 a6 0e 00 00 	mov    %dx,0xea6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80218662:	c7 83 42 0e 00 00 08 	movl   $0x8e000008,0xe42(%rbx)
ffffffff80218669:	00 00 8e 
ffffffff8021866c:	c7 83 4c 0e 00 00 00 	movl   $0x0,0xe4c(%rbx)
ffffffff80218673:	00 00 00 
ffffffff80218676:	c7 83 52 0e 00 00 08 	movl   $0x8e000008,0xe52(%rbx)
ffffffff8021867d:	00 00 8e 
ffffffff80218680:	c7 83 5c 0e 00 00 00 	movl   $0x0,0xe5c(%rbx)
ffffffff80218687:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff8021868a:	c7 83 62 0e 00 00 08 	movl   $0x8e000008,0xe62(%rbx)
ffffffff80218691:	00 00 8e 
ffffffff80218694:	c7 83 6c 0e 00 00 00 	movl   $0x0,0xe6c(%rbx)
ffffffff8021869b:	00 00 00 
ffffffff8021869e:	c7 83 72 0e 00 00 08 	movl   $0x8e000008,0xe72(%rbx)
ffffffff802186a5:	00 00 8e 
ffffffff802186a8:	c7 83 7c 0e 00 00 00 	movl   $0x0,0xe7c(%rbx)
ffffffff802186af:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff802186b2:	c7 83 82 0e 00 00 08 	movl   $0x8e000008,0xe82(%rbx)
ffffffff802186b9:	00 00 8e 
ffffffff802186bc:	c7 83 8c 0e 00 00 00 	movl   $0x0,0xe8c(%rbx)
ffffffff802186c3:	00 00 00 
ffffffff802186c6:	c7 83 92 0e 00 00 08 	movl   $0x8e000008,0xe92(%rbx)
ffffffff802186cd:	00 00 8e 
ffffffff802186d0:	c7 83 9c 0e 00 00 00 	movl   $0x0,0xe9c(%rbx)
ffffffff802186d7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff802186da:	c7 83 a2 0e 00 00 08 	movl   $0x8e000008,0xea2(%rbx)
ffffffff802186e1:	00 00 8e 
ffffffff802186e4:	89 83 a8 0e 00 00    	mov    %eax,0xea8(%rbx)
ffffffff802186ea:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff802186f1:	66 89 83 b0 0e 00 00 	mov    %ax,0xeb0(%rbx)
ffffffff802186f8:	48 89 c2             	mov    %rax,%rdx
ffffffff802186fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802186ff:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218703:	89 83 b8 0e 00 00    	mov    %eax,0xeb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218709:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80218710:	66 89 93 b6 0e 00 00 	mov    %dx,0xeb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218717:	48 89 c2             	mov    %rax,%rdx
ffffffff8021871a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021871e:	66 89 83 c0 0e 00 00 	mov    %ax,0xec0(%rbx)
ffffffff80218725:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218729:	89 83 c8 0e 00 00    	mov    %eax,0xec8(%rbx)
ffffffff8021872f:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff80218736:	66 89 93 c6 0e 00 00 	mov    %dx,0xec6(%rbx)
ffffffff8021873d:	48 89 c2             	mov    %rax,%rdx
ffffffff80218740:	66 89 83 d0 0e 00 00 	mov    %ax,0xed0(%rbx)
ffffffff80218747:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021874b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021874f:	89 83 d8 0e 00 00    	mov    %eax,0xed8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80218755:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff8021875c:	66 89 93 d6 0e 00 00 	mov    %dx,0xed6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80218763:	48 89 c2             	mov    %rax,%rdx
ffffffff80218766:	66 89 83 e0 0e 00 00 	mov    %ax,0xee0(%rbx)
ffffffff8021876d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218771:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218775:	89 83 e8 0e 00 00    	mov    %eax,0xee8(%rbx)
ffffffff8021877b:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff80218782:	66 89 93 e6 0e 00 00 	mov    %dx,0xee6(%rbx)
ffffffff80218789:	48 89 c2             	mov    %rax,%rdx
ffffffff8021878c:	66 89 83 f0 0e 00 00 	mov    %ax,0xef0(%rbx)
ffffffff80218793:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218797:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021879b:	89 83 f8 0e 00 00    	mov    %eax,0xef8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff802187a1:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff802187a8:	66 89 93 f6 0e 00 00 	mov    %dx,0xef6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff802187af:	48 89 c2             	mov    %rax,%rdx
ffffffff802187b2:	66 89 83 00 0f 00 00 	mov    %ax,0xf00(%rbx)
ffffffff802187b9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802187bd:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802187c1:	89 83 08 0f 00 00    	mov    %eax,0xf08(%rbx)
ffffffff802187c7:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff802187ce:	66 89 93 06 0f 00 00 	mov    %dx,0xf06(%rbx)
ffffffff802187d5:	48 89 c2             	mov    %rax,%rdx
ffffffff802187d8:	66 89 83 10 0f 00 00 	mov    %ax,0xf10(%rbx)
ffffffff802187df:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802187e3:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff802187e7:	c7 83 ac 0e 00 00 00 	movl   $0x0,0xeac(%rbx)
ffffffff802187ee:	00 00 00 
ffffffff802187f1:	c7 83 b2 0e 00 00 08 	movl   $0x8e000008,0xeb2(%rbx)
ffffffff802187f8:	00 00 8e 
ffffffff802187fb:	c7 83 bc 0e 00 00 00 	movl   $0x0,0xebc(%rbx)
ffffffff80218802:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80218805:	c7 83 c2 0e 00 00 08 	movl   $0x8e000008,0xec2(%rbx)
ffffffff8021880c:	00 00 8e 
ffffffff8021880f:	c7 83 cc 0e 00 00 00 	movl   $0x0,0xecc(%rbx)
ffffffff80218816:	00 00 00 
ffffffff80218819:	c7 83 d2 0e 00 00 08 	movl   $0x8e000008,0xed2(%rbx)
ffffffff80218820:	00 00 8e 
ffffffff80218823:	c7 83 dc 0e 00 00 00 	movl   $0x0,0xedc(%rbx)
ffffffff8021882a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff8021882d:	c7 83 e2 0e 00 00 08 	movl   $0x8e000008,0xee2(%rbx)
ffffffff80218834:	00 00 8e 
ffffffff80218837:	c7 83 ec 0e 00 00 00 	movl   $0x0,0xeec(%rbx)
ffffffff8021883e:	00 00 00 
ffffffff80218841:	c7 83 f2 0e 00 00 08 	movl   $0x8e000008,0xef2(%rbx)
ffffffff80218848:	00 00 8e 
ffffffff8021884b:	c7 83 fc 0e 00 00 00 	movl   $0x0,0xefc(%rbx)
ffffffff80218852:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218855:	c7 83 02 0f 00 00 08 	movl   $0x8e000008,0xf02(%rbx)
ffffffff8021885c:	00 00 8e 
ffffffff8021885f:	c7 83 0c 0f 00 00 00 	movl   $0x0,0xf0c(%rbx)
ffffffff80218866:	00 00 00 
ffffffff80218869:	c7 83 12 0f 00 00 08 	movl   $0x8e000008,0xf12(%rbx)
ffffffff80218870:	00 00 8e 
ffffffff80218873:	89 83 18 0f 00 00    	mov    %eax,0xf18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80218879:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80218880:	66 89 93 16 0f 00 00 	mov    %dx,0xf16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80218887:	48 89 c2             	mov    %rax,%rdx
ffffffff8021888a:	66 89 83 20 0f 00 00 	mov    %ax,0xf20(%rbx)
ffffffff80218891:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218895:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218899:	89 83 28 0f 00 00    	mov    %eax,0xf28(%rbx)
ffffffff8021889f:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff802188a6:	66 89 93 26 0f 00 00 	mov    %dx,0xf26(%rbx)
ffffffff802188ad:	48 89 c2             	mov    %rax,%rdx
ffffffff802188b0:	66 89 83 30 0f 00 00 	mov    %ax,0xf30(%rbx)
ffffffff802188b7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802188bb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802188bf:	89 83 38 0f 00 00    	mov    %eax,0xf38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff802188c5:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff802188cc:	66 89 93 36 0f 00 00 	mov    %dx,0xf36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff802188d3:	48 89 c2             	mov    %rax,%rdx
ffffffff802188d6:	66 89 83 40 0f 00 00 	mov    %ax,0xf40(%rbx)
ffffffff802188dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802188e1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802188e5:	89 83 48 0f 00 00    	mov    %eax,0xf48(%rbx)
ffffffff802188eb:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff802188f2:	66 89 93 46 0f 00 00 	mov    %dx,0xf46(%rbx)
ffffffff802188f9:	48 89 c2             	mov    %rax,%rdx
ffffffff802188fc:	66 89 83 50 0f 00 00 	mov    %ax,0xf50(%rbx)
ffffffff80218903:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218907:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021890b:	89 83 58 0f 00 00    	mov    %eax,0xf58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80218911:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80218918:	66 89 93 56 0f 00 00 	mov    %dx,0xf56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff8021891f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218922:	66 89 83 60 0f 00 00 	mov    %ax,0xf60(%rbx)
ffffffff80218929:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021892d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218931:	89 83 68 0f 00 00    	mov    %eax,0xf68(%rbx)
ffffffff80218937:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff8021893e:	66 89 93 66 0f 00 00 	mov    %dx,0xf66(%rbx)
ffffffff80218945:	48 89 c2             	mov    %rax,%rdx
ffffffff80218948:	66 89 83 70 0f 00 00 	mov    %ax,0xf70(%rbx)
ffffffff8021894f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218953:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218957:	89 83 78 0f 00 00    	mov    %eax,0xf78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff8021895d:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80218964:	66 89 93 76 0f 00 00 	mov    %dx,0xf76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff8021896b:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff8021896e:	c7 83 1c 0f 00 00 00 	movl   $0x0,0xf1c(%rbx)
ffffffff80218975:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218978:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff8021897c:	c7 83 22 0f 00 00 08 	movl   $0x8e000008,0xf22(%rbx)
ffffffff80218983:	00 00 8e 
ffffffff80218986:	c7 83 2c 0f 00 00 00 	movl   $0x0,0xf2c(%rbx)
ffffffff8021898d:	00 00 00 
ffffffff80218990:	c7 83 32 0f 00 00 08 	movl   $0x8e000008,0xf32(%rbx)
ffffffff80218997:	00 00 8e 
ffffffff8021899a:	c7 83 3c 0f 00 00 00 	movl   $0x0,0xf3c(%rbx)
ffffffff802189a1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff802189a4:	c7 83 42 0f 00 00 08 	movl   $0x8e000008,0xf42(%rbx)
ffffffff802189ab:	00 00 8e 
ffffffff802189ae:	c7 83 4c 0f 00 00 00 	movl   $0x0,0xf4c(%rbx)
ffffffff802189b5:	00 00 00 
ffffffff802189b8:	c7 83 52 0f 00 00 08 	movl   $0x8e000008,0xf52(%rbx)
ffffffff802189bf:	00 00 8e 
ffffffff802189c2:	c7 83 5c 0f 00 00 00 	movl   $0x0,0xf5c(%rbx)
ffffffff802189c9:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff802189cc:	c7 83 62 0f 00 00 08 	movl   $0x8e000008,0xf62(%rbx)
ffffffff802189d3:	00 00 8e 
ffffffff802189d6:	c7 83 6c 0f 00 00 00 	movl   $0x0,0xf6c(%rbx)
ffffffff802189dd:	00 00 00 
ffffffff802189e0:	c7 83 72 0f 00 00 08 	movl   $0x8e000008,0xf72(%rbx)
ffffffff802189e7:	00 00 8e 
ffffffff802189ea:	c7 83 7c 0f 00 00 00 	movl   $0x0,0xf7c(%rbx)
ffffffff802189f1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff802189f4:	66 89 83 80 0f 00 00 	mov    %ax,0xf80(%rbx)
ffffffff802189fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802189ff:	89 83 88 0f 00 00    	mov    %eax,0xf88(%rbx)
ffffffff80218a05:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80218a0c:	66 89 93 86 0f 00 00 	mov    %dx,0xf86(%rbx)
ffffffff80218a13:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a16:	66 89 83 90 0f 00 00 	mov    %ax,0xf90(%rbx)
ffffffff80218a1d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218a21:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218a25:	89 83 98 0f 00 00    	mov    %eax,0xf98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80218a2b:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218a32:	66 89 93 96 0f 00 00 	mov    %dx,0xf96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80218a39:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a3c:	66 89 83 a0 0f 00 00 	mov    %ax,0xfa0(%rbx)
ffffffff80218a43:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218a47:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218a4b:	89 83 a8 0f 00 00    	mov    %eax,0xfa8(%rbx)
ffffffff80218a51:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80218a58:	66 89 93 a6 0f 00 00 	mov    %dx,0xfa6(%rbx)
ffffffff80218a5f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a62:	66 89 83 b0 0f 00 00 	mov    %ax,0xfb0(%rbx)
ffffffff80218a69:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218a6d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218a71:	89 83 b8 0f 00 00    	mov    %eax,0xfb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218a77:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80218a7e:	66 89 93 b6 0f 00 00 	mov    %dx,0xfb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218a85:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a88:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218a8c:	66 89 83 c0 0f 00 00 	mov    %ax,0xfc0(%rbx)
ffffffff80218a93:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218a97:	89 83 c8 0f 00 00    	mov    %eax,0xfc8(%rbx)
ffffffff80218a9d:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80218aa4:	66 89 93 c6 0f 00 00 	mov    %dx,0xfc6(%rbx)
ffffffff80218aab:	48 89 c2             	mov    %rax,%rdx
ffffffff80218aae:	66 89 83 d0 0f 00 00 	mov    %ax,0xfd0(%rbx)
ffffffff80218ab5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218ab9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218abd:	89 83 d8 0f 00 00    	mov    %eax,0xfd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80218ac3:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218aca:	66 89 93 d6 0f 00 00 	mov    %dx,0xfd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80218ad1:	48 89 c2             	mov    %rax,%rdx
ffffffff80218ad4:	66 89 83 e0 0f 00 00 	mov    %ax,0xfe0(%rbx)
ffffffff80218adb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218adf:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80218ae3:	c7 83 82 0f 00 00 08 	movl   $0x8e000008,0xf82(%rbx)
ffffffff80218aea:	00 00 8e 
ffffffff80218aed:	c7 83 8c 0f 00 00 00 	movl   $0x0,0xf8c(%rbx)
ffffffff80218af4:	00 00 00 
ffffffff80218af7:	c7 83 92 0f 00 00 08 	movl   $0x8e000008,0xf92(%rbx)
ffffffff80218afe:	00 00 8e 
ffffffff80218b01:	c7 83 9c 0f 00 00 00 	movl   $0x0,0xf9c(%rbx)
ffffffff80218b08:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80218b0b:	c7 83 a2 0f 00 00 08 	movl   $0x8e000008,0xfa2(%rbx)
ffffffff80218b12:	00 00 8e 
ffffffff80218b15:	c7 83 ac 0f 00 00 00 	movl   $0x0,0xfac(%rbx)
ffffffff80218b1c:	00 00 00 
ffffffff80218b1f:	c7 83 b2 0f 00 00 08 	movl   $0x8e000008,0xfb2(%rbx)
ffffffff80218b26:	00 00 8e 
ffffffff80218b29:	c7 83 bc 0f 00 00 00 	movl   $0x0,0xfbc(%rbx)
ffffffff80218b30:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80218b33:	c7 83 c2 0f 00 00 08 	movl   $0x8e000008,0xfc2(%rbx)
ffffffff80218b3a:	00 00 8e 
ffffffff80218b3d:	c7 83 cc 0f 00 00 00 	movl   $0x0,0xfcc(%rbx)
ffffffff80218b44:	00 00 00 
ffffffff80218b47:	c7 83 d2 0f 00 00 08 	movl   $0x8e000008,0xfd2(%rbx)
ffffffff80218b4e:	00 00 8e 
ffffffff80218b51:	c7 83 dc 0f 00 00 00 	movl   $0x0,0xfdc(%rbx)
ffffffff80218b58:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80218b5b:	c7 83 e2 0f 00 00 08 	movl   $0x8e000008,0xfe2(%rbx)
ffffffff80218b62:	00 00 8e 
ffffffff80218b65:	66 89 93 e6 0f 00 00 	mov    %dx,0xfe6(%rbx)
ffffffff80218b6c:	89 83 e8 0f 00 00    	mov    %eax,0xfe8(%rbx)
ffffffff80218b72:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80218b79:	48 89 c2             	mov    %rax,%rdx
ffffffff80218b7c:	66 89 83 f0 0f 00 00 	mov    %ax,0xff0(%rbx)
ffffffff80218b83:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218b87:	89 83 f8 0f 00 00    	mov    %eax,0xff8(%rbx)
ffffffff80218b8d:	48 c1 ea 10          	shr    $0x10,%rdx
    if(RME_X64_CPU_Cnt==0)
ffffffff80218b91:	48 8b 05 08 e9 00 00 	mov    0xe908(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80218b98:	c7 83 ec 0f 00 00 00 	movl   $0x0,0xfec(%rbx)
ffffffff80218b9f:	00 00 00 
ffffffff80218ba2:	c7 83 f2 0f 00 00 08 	movl   $0x8e000008,0xff2(%rbx)
ffffffff80218ba9:	00 00 8e 
ffffffff80218bac:	66 89 93 f6 0f 00 00 	mov    %dx,0xff6(%rbx)
ffffffff80218bb3:	c7 83 fc 0f 00 00 00 	movl   $0x0,0xffc(%rbx)
ffffffff80218bba:	00 00 00 
    if(RME_X64_CPU_Cnt==0)
ffffffff80218bbd:	48 85 c0             	test   %rax,%rax
ffffffff80218bc0:	75 3a                	jne    ffffffff80218bfc <__RME_X64_CPU_Local_Init+0x379c>
        RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
ffffffff80218bc2:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80218bc9:	c7 83 22 02 00 00 08 	movl   $0x8e000008,0x222(%rbx)
ffffffff80218bd0:	00 00 8e 
ffffffff80218bd3:	48 89 c2             	mov    %rax,%rdx
ffffffff80218bd6:	66 89 83 20 02 00 00 	mov    %ax,0x220(%rbx)
ffffffff80218bdd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218be1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80218be5:	89 83 28 02 00 00    	mov    %eax,0x228(%rbx)
ffffffff80218beb:	66 89 93 26 02 00 00 	mov    %dx,0x226(%rbx)
ffffffff80218bf2:	c7 83 2c 02 00 00 00 	movl   $0x0,0x22c(%rbx)
ffffffff80218bf9:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218bfc:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80218c03:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218c08:	66 89 83 30 08 00 00 	mov    %ax,0x830(%rbx)
ffffffff80218c0f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c12:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218c16:	89 83 38 08 00 00    	mov    %eax,0x838(%rbx)
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80218c1c:	b8 ff 0f 00 00       	mov    $0xfff,%eax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218c21:	48 c1 ea 10          	shr    $0x10,%rdx
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80218c25:	66 89 44 24 06       	mov    %ax,0x6(%rsp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80218c2a:	48 89 d8             	mov    %rbx,%rax
ffffffff80218c2d:	48 c1 e8 10          	shr    $0x10,%rax
    Desc[1]=(rme_ptr_t)IDT_Table;
ffffffff80218c31:	66 89 5c 24 08       	mov    %bx,0x8(%rsp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80218c36:	66 89 44 24 0a       	mov    %ax,0xa(%rsp)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80218c3b:	48 89 d8             	mov    %rbx,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80218c3e:	66 89 93 36 08 00 00 	mov    %dx,0x836(%rbx)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff80218c45:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218c49:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
    Desc[4]=((rme_ptr_t)IDT_Table)>>48;
ffffffff80218c4e:	48 89 d8             	mov    %rbx,%rax
ffffffff80218c51:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218c55:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80218c5a:	e8 1a 2c ff ff       	call   ffffffff8020b879 <__RME_X64_IDT_Load>
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80218c5f:	48 8b 15 6a e8 00 00 	mov    0xe86a(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff80218c66:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80218c6b:	48 8b 05 2e e8 00 00 	mov    0xe82e(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218c72:	48 be 00 00 ff ff ff 	movabs $0xffffff0000,%rsi
ffffffff80218c79:	00 00 00 
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218c7c:	66 0f 6f 05 ec 47 00 	movdqa 0x47ec(%rip),%xmm0        # ffffffff8021d470 <Table.1+0x1b0>
ffffffff80218c83:	00 
    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80218c84:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80218c88:	48 8d 84 02 00 10 00 	lea    0x1000(%rdx,%rax,1),%rax
ffffffff80218c8f:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80218c90:	48 8b 15 39 e8 00 00 	mov    0xe839(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff80218c97:	48 8b 2d 02 e8 00 00 	mov    0xe802(%rip),%rbp        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218c9e:	0f 11 00             	movups %xmm0,(%rax)
ffffffff80218ca1:	66 0f 6f 05 d7 47 00 	movdqa 0x47d7(%rip),%xmm0        # ffffffff8021d480 <Table.1+0x1c0>
ffffffff80218ca8:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80218ca9:	48 c1 e5 0d          	shl    $0xd,%rbp
ffffffff80218cad:	48 01 d5             	add    %rdx,%rbp
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218cb0:	0f 11 40 10          	movups %xmm0,0x10(%rax)
ffffffff80218cb4:	66 0f 6f 05 d4 47 00 	movdqa 0x47d4(%rip),%xmm0        # ffffffff8021d490 <Table.1+0x1d0>
ffffffff80218cbb:	00 
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80218cbc:	48 8d 8d 80 10 00 00 	lea    0x1080(%rbp),%rcx
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218cc3:	48 89 ca             	mov    %rcx,%rdx
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff80218cc6:	0f 11 40 20          	movups %xmm0,0x20(%rax)
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218cca:	48 c1 e2 10          	shl    $0x10,%rdx
ffffffff80218cce:	48 21 f2             	and    %rsi,%rdx
ffffffff80218cd1:	48 89 ce             	mov    %rcx,%rsi
    GDT_Table[7]=(TSS_Table>>32);
ffffffff80218cd4:	48 c1 e9 20          	shr    $0x20,%rcx
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218cd8:	48 c1 ee 18          	shr    $0x18,%rsi
    GDT_Table[7]=(TSS_Table>>32);
ffffffff80218cdc:	48 89 48 38          	mov    %rcx,0x38(%rax)
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80218ce0:	48 c1 e6 38          	shl    $0x38,%rsi
ffffffff80218ce4:	48 09 f2             	or     %rsi,%rdx
ffffffff80218ce7:	48 be 67 00 00 00 00 	movabs $0x890000000067,%rsi
ffffffff80218cee:	89 00 00 
ffffffff80218cf1:	48 09 f2             	or     %rsi,%rdx
ffffffff80218cf4:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Desc[0]=8*sizeof(rme_ptr_t)-1;
ffffffff80218cf8:	ba 3f 00 00 00       	mov    $0x3f,%edx
ffffffff80218cfd:	66 89 54 24 06       	mov    %dx,0x6(%rsp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff80218d02:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d05:	48 c1 ea 10          	shr    $0x10,%rdx
    Desc[1]=(rme_ptr_t)GDT_Table;
ffffffff80218d09:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff80218d0e:	66 89 54 24 0a       	mov    %dx,0xa(%rsp)
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff80218d13:	48 89 c2             	mov    %rax,%rdx
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80218d16:	48 c1 e8 30          	shr    $0x30,%rax
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff80218d1a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80218d1e:	66 89 54 24 0c       	mov    %dx,0xc(%rsp)
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80218d23:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff80218d28:	e8 48 2b ff ff       	call   ffffffff8020b875 <__RME_X64_GDT_Load>
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218d2d:	48 8b 15 e4 e9 00 00 	mov    0xe9e4(%rip),%rdx        # ffffffff80227718 <RME_X64_Layout+0x258>
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff80218d34:	bf 30 00 00 00       	mov    $0x30,%edi
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218d39:	48 8b 05 60 e7 00 00 	mov    0xe760(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff80218d40:	83 c0 01             	add    $0x1,%eax
ffffffff80218d43:	c1 e0 14             	shl    $0x14,%eax
ffffffff80218d46:	01 d0                	add    %edx,%eax
ffffffff80218d48:	89 85 84 10 00 00    	mov    %eax,0x1084(%rbp)
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80218d4e:	48 8b 15 c3 e9 00 00 	mov    0xe9c3(%rip),%rdx        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80218d55:	48 8b 05 44 e7 00 00 	mov    0xe744(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    ((rme_u32_t*)TSS_Table)[16]=0x00680000;
ffffffff80218d5c:	c7 85 c0 10 00 00 00 	movl   $0x680000,0x10c0(%rbp)
ffffffff80218d63:	00 68 00 
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80218d66:	48 83 c0 01          	add    $0x1,%rax
ffffffff80218d6a:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80218d6e:	48 01 d0             	add    %rdx,%rax
ffffffff80218d71:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218d75:	89 85 88 10 00 00    	mov    %eax,0x1088(%rbp)
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff80218d7b:	e8 fd 2a ff ff       	call   ffffffff8020b87d <__RME_X64_TSS_Load>
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80218d80:	48 8b 15 49 e7 00 00 	mov    0xe749(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff80218d87:	48 8b 05 12 e7 00 00 	mov    0xe712(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff80218d8e:	48 8b 35 0b e7 00 00 	mov    0xe70b(%rip),%rsi        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80218d95:	48 c1 e0 0d          	shl    $0xd,%rax
    		                          RME_POW2(RME_PGT_SIZE_4K)+
ffffffff80218d99:	48 8d ac 02 00 14 00 	lea    0x1400(%rdx,%rax,1),%rbp
ffffffff80218da0:	00 
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff80218da1:	48 89 ef             	mov    %rbp,%rdi
ffffffff80218da4:	e8 47 75 ff ff       	call   ffffffff802102f0 <_RME_CPU_Local_Init>
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff80218da9:	48 8b 15 20 e7 00 00 	mov    0xe720(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218db0:	48 89 de             	mov    %rbx,%rsi
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff80218db3:	48 8b 05 e6 e6 00 00 	mov    0xe6e6(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218dba:	bf 02 01 00 c0       	mov    $0xc0000102,%edi
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff80218dbf:	48 83 c0 01          	add    $0x1,%rax
ffffffff80218dc3:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80218dc7:	48 8d 54 02 e8       	lea    -0x18(%rdx,%rax,1),%rdx
    Temp->CPU_Local_Addr=(rme_ptr_t)CPU_Local;
ffffffff80218dcc:	48 89 2a             	mov    %rbp,(%rdx)
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218dcf:	48 8b 0d 42 e9 00 00 	mov    0xe942(%rip),%rcx        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80218dd6:	48 8b 05 c3 e6 00 00 	mov    0xe6c3(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    Temp->Temp_User_SP=0;
ffffffff80218ddd:	48 c7 42 10 00 00 00 	movq   $0x0,0x10(%rdx)
ffffffff80218de4:	00 
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80218de5:	48 83 c0 01          	add    $0x1,%rax
ffffffff80218de9:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80218ded:	48 01 c8             	add    %rcx,%rax
ffffffff80218df0:	48 89 42 08          	mov    %rax,0x8(%rdx)
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218df4:	e8 31 2a ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218df9:	48 89 de             	mov    %rbx,%rsi
ffffffff80218dfc:	bf 01 01 00 c0       	mov    $0xc0000101,%edi
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff80218e01:	bb 80 00 00 c0       	mov    $0xc0000080,%ebx
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80218e06:	e8 1f 2a ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff80218e0b:	48 89 df             	mov    %rbx,%rdi
ffffffff80218e0e:	e8 03 2a ff ff       	call   ffffffff8020b816 <__RME_X64_Read_MSR>
ffffffff80218e13:	48 89 df             	mov    %rbx,%rdi
ffffffff80218e16:	48 83 c8 01          	or     $0x1,%rax
ffffffff80218e1a:	48 89 c6             	mov    %rax,%rsi
ffffffff80218e1d:	e8 08 2a ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_LSTAR, (rme_ptr_t)SVC_Handler);
ffffffff80218e22:	48 c7 c6 c2 c6 20 80 	mov    $0xffffffff8020c6c2,%rsi
ffffffff80218e29:	bf 82 00 00 c0       	mov    $0xc0000082,%edi
ffffffff80218e2e:	e8 f7 29 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_FMASK, ~RME_X64_RFLAGS_IF);
ffffffff80218e33:	48 c7 c6 ff fd ff ff 	mov    $0xfffffffffffffdff,%rsi
ffffffff80218e3a:	bf 84 00 00 c0       	mov    $0xc0000084,%edi
ffffffff80218e3f:	e8 e6 29 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_STAR, (((rme_ptr_t)RME_X64_SEG_EMPTY)<<48)|(((rme_ptr_t)RME_X64_SEG_KERNEL_CODE)<<32));
ffffffff80218e44:	bf 81 00 00 c0       	mov    $0xc0000081,%edi
ffffffff80218e49:	48 be 00 00 00 00 08 	movabs $0x1b000800000000,%rsi
ffffffff80218e50:	00 1b 00 
ffffffff80218e53:	e8 d2 29 ff ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
}
ffffffff80218e58:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80218e5c:	5b                   	pop    %rbx
ffffffff80218e5d:	5d                   	pop    %rbp
ffffffff80218e5e:	c3                   	ret
ffffffff80218e5f:	90                   	nop

ffffffff80218e60 <__RME_List_Crt>:
{
ffffffff80218e60:	f3 0f 1e fa          	endbr64
}
ffffffff80218e64:	c3                   	ret
ffffffff80218e65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80218e6c:	00 00 00 00 

ffffffff80218e70 <__RME_List_Ins>:
{
ffffffff80218e70:	f3 0f 1e fa          	endbr64
}
ffffffff80218e74:	c3                   	ret
ffffffff80218e75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80218e7c:	00 00 00 00 

ffffffff80218e80 <__RME_List_Del>:
{
ffffffff80218e80:	f3 0f 1e fa          	endbr64
}
ffffffff80218e84:	c3                   	ret
ffffffff80218e85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80218e8c:	00 00 00 00 

ffffffff80218e90 <__RME_Inv_Retval_Set>:
void __RME_Inv_Retval_Set(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
ffffffff80218e90:	f3 0f 1e fa          	endbr64
ffffffff80218e94:	c3                   	ret
ffffffff80218e95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80218e9c:	00 00 00 00 

ffffffff80218ea0 <__RME_Kfn_Handler>:
{
ffffffff80218ea0:	f3 0f 1e fa          	endbr64
}
ffffffff80218ea4:	31 c0                	xor    %eax,%eax
ffffffff80218ea6:	c3                   	ret
ffffffff80218ea7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80218eae:	00 00 

ffffffff80218eb0 <__RME_Putchar>:
{
ffffffff80218eb0:	f3 0f 1e fa          	endbr64
ffffffff80218eb4:	53                   	push   %rbx
ffffffff80218eb5:	89 fb                	mov    %edi,%ebx
    while((__RME_X64_In(RME_X64_COM1+5)&0x20)==0);
ffffffff80218eb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80218ebe:	00 00 
ffffffff80218ec0:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff80218ec5:	e8 36 29 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff80218eca:	a8 20                	test   $0x20,%al
ffffffff80218ecc:	74 f2                	je     ffffffff80218ec0 <__RME_Putchar+0x10>
    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff80218ece:	48 0f be f3          	movsbq %bl,%rsi
ffffffff80218ed2:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80218ed7:	e8 2e 29 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff80218edc:	31 c0                	xor    %eax,%eax
ffffffff80218ede:	5b                   	pop    %rbx
ffffffff80218edf:	c3                   	ret

ffffffff80218ee0 <__RME_X64_LAPIC_Ack>:
{
ffffffff80218ee0:	f3 0f 1e fa          	endbr64
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff80218ee4:	48 8b 15 45 d5 00 00 	mov    0xd545(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80218eeb:	48 b8 b0 00 00 00 00 	movabs $0xffff8000000000b0,%rax
ffffffff80218ef2:	80 ff ff 
ffffffff80218ef5:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
}
ffffffff80218efc:	c3                   	ret
ffffffff80218efd:	0f 1f 00             	nopl   (%rax)

ffffffff80218f00 <__RME_X64_SMP_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff80218f00:	f3 0f 1e fa          	endbr64
ffffffff80218f04:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax
ffffffff80218f0b:	80 ff ff 
ffffffff80218f0e:	41 57                	push   %r15
ffffffff80218f10:	48 be c0 65 21 80 ff 	movabs $0x7fff802165c0,%rsi
ffffffff80218f17:	7f 00 00 
    rme_cnt_t Count;
    rme_u16_t* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(rme_u8_t*)RME_X64_PA2VA(0x7000);
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80218f1a:	48 b9 62 70 00 00 00 	movabs $0xffff800000007062,%rcx
ffffffff80218f21:	80 ff ff 
{
ffffffff80218f24:	41 56                	push   %r14
ffffffff80218f26:	41 55                	push   %r13
ffffffff80218f28:	41 54                	push   %r12
ffffffff80218f2a:	55                   	push   %rbp
ffffffff80218f2b:	53                   	push   %rbx
ffffffff80218f2c:	48 83 ec 18          	sub    $0x18,%rsp
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80218f30:	0f b6 14 06          	movzbl (%rsi,%rax,1),%edx
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80218f34:	48 83 c0 01          	add    $0x1,%rax
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80218f38:	88 50 ff             	mov    %dl,-0x1(%rax)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80218f3b:	48 39 c8             	cmp    %rcx,%rax
ffffffff80218f3e:	75 f0                	jne    ffffffff80218f30 <__RME_X64_SMP_Init+0x30>

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
ffffffff80218f40:	48 c7 05 55 e5 00 00 	movq   $0x1,0xe555(%rip)        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff80218f47:	01 00 00 00 
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80218f4b:	bb 01 00 00 00       	mov    $0x1,%ebx
    {
        RME_DBG_S("\n\rBooting CPU ");
        RME_DBG_I(Count);
        /* Temporary stack */
        *(rme_u32_t*)(Code-4)=0x8000;
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80218f50:	48 c7 c7 89 80 10 80 	mov    $0xffffffff80108089,%rdi
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80218f57:	48 8b 05 4a e5 00 00 	mov    0xe54a(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80218f5e:	49 bd f8 6f 00 00 00 	movabs $0xffff800000006ff8,%r13
ffffffff80218f65:	80 ff ff 
ffffffff80218f68:	8d bf 00 00 f0 7f    	lea    0x7ff00000(%rdi),%edi
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80218f6e:	49 bc f0 6f 00 00 00 	movabs $0xffff800000006ff0,%r12
ffffffff80218f75:	80 ff ff 
        Warm_Reset=(rme_u16_t*)RME_X64_PA2VA((0x40<<4|0x67));
        Warm_Reset[0]=0;
        Warm_Reset[1]=0x7000>>4;

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80218f78:	48 bd 10 03 00 00 00 	movabs $0xffff800000000310,%rbp
ffffffff80218f7f:	80 ff ff 
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80218f82:	49 bf 00 03 00 00 00 	movabs $0xffff800000000300,%r15
ffffffff80218f89:	80 ff ff 
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80218f8c:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80218f90:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80218f94:	0f 86 42 01 00 00    	jbe    ffffffff802190dc <__RME_X64_SMP_Init+0x1dc>
ffffffff80218f9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        RME_DBG_S("\n\rBooting CPU ");
ffffffff80218fa0:	48 c7 c7 f5 ca 21 80 	mov    $0xffffffff8021caf5,%rdi
ffffffff80218fa7:	49 89 de             	mov    %rbx,%r14
ffffffff80218faa:	e8 d1 4e ff ff       	call   ffffffff8020de80 <RME_Str_Print>
        RME_DBG_I(Count);
ffffffff80218faf:	48 89 df             	mov    %rbx,%rdi
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80218fb2:	48 83 c3 01          	add    $0x1,%rbx
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80218fb6:	49 c1 e6 04          	shl    $0x4,%r14
        RME_DBG_I(Count);
ffffffff80218fba:	e8 d1 4c ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff80218fbf:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff80218fc4:	bf 70 00 00 00       	mov    $0x70,%edi
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff80218fc9:	48 b8 fc 6f 00 00 00 	movabs $0xffff800000006ffc,%rax
ffffffff80218fd0:	80 ff ff 
ffffffff80218fd3:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80218fd9:	8b 44 24 0c          	mov    0xc(%rsp),%eax
ffffffff80218fdd:	41 89 45 00          	mov    %eax,0x0(%r13)
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80218fe1:	48 89 d8             	mov    %rbx,%rax
ffffffff80218fe4:	48 8b 0d 2d e7 00 00 	mov    0xe72d(%rip),%rcx        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80218feb:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80218fef:	48 01 c8             	add    %rcx,%rax
ffffffff80218ff2:	49 89 04 24          	mov    %rax,(%r12)
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff80218ff6:	e8 0f 28 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
ffffffff80218ffb:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80219000:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff80219005:	e8 00 28 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
        Warm_Reset[1]=0x7000>>4;
ffffffff8021900a:	b9 00 07 00 00       	mov    $0x700,%ecx
        Warm_Reset[0]=0;
ffffffff8021900f:	31 d2                	xor    %edx,%edx
ffffffff80219011:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax
ffffffff80219018:	80 ff ff 
ffffffff8021901b:	66 89 10             	mov    %dx,(%rax)
        Warm_Reset[1]=0x7000>>4;
ffffffff8021901e:	66 89 48 02          	mov    %cx,0x2(%rax)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80219022:	49 8b 86 a0 64 22 80 	mov    -0x7fdd9b60(%r14),%rax
ffffffff80219029:	48 8b 0d 00 d4 00 00 	mov    0xd400(%rip),%rcx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80219030:	c1 e0 18             	shl    $0x18,%eax
ffffffff80219033:	89 04 29             	mov    %eax,(%rcx,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80219036:	48 8b 05 f3 d3 00 00 	mov    0xd3f3(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021903d:	42 c7 04 38 00 c5 00 	movl   $0xc500,(%rax,%r15,1)
ffffffff80219044:	00 
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80219045:	48 8b 05 e4 d3 00 00 	mov    0xd3e4(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021904c:	42 c7 04 38 00 85 00 	movl   $0x8500,(%rax,%r15,1)
ffffffff80219053:	00 
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80219054:	49 8b 86 a0 64 22 80 	mov    -0x7fdd9b60(%r14),%rax
ffffffff8021905b:	48 8b 0d ce d3 00 00 	mov    0xd3ce(%rip),%rcx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80219062:	c1 e0 18             	shl    $0x18,%eax
ffffffff80219065:	89 04 29             	mov    %eax,(%rcx,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff80219068:	48 8b 05 c1 d3 00 00 	mov    0xd3c1(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff8021906f:	42 c7 04 38 07 06 00 	movl   $0x607,(%rax,%r15,1)
ffffffff80219076:	00 
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80219077:	49 8b 86 a0 64 22 80 	mov    -0x7fdd9b60(%r14),%rax
ffffffff8021907e:	48 8b 0d ab d3 00 00 	mov    0xd3ab(%rip),%rcx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80219085:	c1 e0 18             	shl    $0x18,%eax
ffffffff80219088:	89 04 29             	mov    %eax,(%rcx,%rbp,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff8021908b:	48 8b 05 9e d3 00 00 	mov    0xd39e(%rip),%rax        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80219092:	42 c7 04 38 07 06 00 	movl   $0x607,(%rax,%r15,1)
ffffffff80219099:	00 
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
ffffffff8021909a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff802190a0:	48 8b 05 f9 e3 00 00 	mov    0xe3f9(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff802190a7:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802190ab:	48 05 a0 64 22 80    	add    $0xffffffff802264a0,%rax
ffffffff802190b1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802190b5:	48 85 c0             	test   %rax,%rax
ffffffff802190b8:	74 e6                	je     ffffffff802190a0 <__RME_X64_SMP_Init+0x1a0>
        RME_X64_CPU_Cnt++;
ffffffff802190ba:	48 8b 05 df e3 00 00 	mov    0xe3df(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff802190c1:	48 83 c0 01          	add    $0x1,%rax
ffffffff802190c5:	48 89 05 d4 e3 00 00 	mov    %rax,0xe3d4(%rip)        # ffffffff802274a0 <RME_X64_CPU_Cnt>
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff802190cc:	48 8b 05 d5 e3 00 00 	mov    0xe3d5(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff802190d3:	48 39 c3             	cmp    %rax,%rbx
ffffffff802190d6:	0f 82 c4 fe ff ff    	jb     ffffffff80218fa0 <__RME_X64_SMP_Init+0xa0>
    }
}
ffffffff802190dc:	48 83 c4 18          	add    $0x18,%rsp
ffffffff802190e0:	5b                   	pop    %rbx
ffffffff802190e1:	5d                   	pop    %rbp
ffffffff802190e2:	41 5c                	pop    %r12
ffffffff802190e4:	41 5d                	pop    %r13
ffffffff802190e6:	41 5e                	pop    %r14
ffffffff802190e8:	41 5f                	pop    %r15
ffffffff802190ea:	c3                   	ret
ffffffff802190eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff802190f0 <__RME_X64_SMP_Tick>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Tick(void)
{
ffffffff802190f0:	f3 0f 1e fa          	endbr64
    /* Is this a SMP? */
    if(RME_X64_Num_CPU>1)
ffffffff802190f4:	48 8b 05 ad e3 00 00 	mov    0xe3ad(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff802190fb:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802190ff:	76 27                	jbe    ffffffff80219128 <__RME_X64_SMP_Tick+0x38>
    {
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0xFFULL<<24);
ffffffff80219101:	48 8b 15 28 d3 00 00 	mov    0xd328(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80219108:	48 b8 10 03 00 00 00 	movabs $0xffff800000000310,%rax
ffffffff8021910f:	80 ff ff 
ffffffff80219112:	c7 04 02 00 00 00 ff 	movl   $0xff000000,(%rdx,%rax,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_EXC_SELF|
ffffffff80219119:	48 8b 15 10 d3 00 00 	mov    0xd310(%rip),%rdx        # ffffffff80226430 <RME_X64_LAPIC_Addr>
ffffffff80219120:	c7 44 10 f0 83 00 0c 	movl   $0xc0083,-0x10(%rax,%rdx,1)
ffffffff80219127:	00 
                                                 RME_X64_LAPIC_ICRLO_FIXED|
                                                 RME_X64_INT_SMP_SYSTICK);
    }
}
ffffffff80219128:	c3                   	ret
ffffffff80219129:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80219130 <__RME_Lowlvl_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Lowlvl_Init(void)
{
ffffffff80219130:	f3 0f 1e fa          	endbr64
ffffffff80219134:	55                   	push   %rbp
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80219135:	31 f6                	xor    %esi,%esi
ffffffff80219137:	bf f9 03 00 00       	mov    $0x3f9,%edi
{
ffffffff8021913c:	53                   	push   %rbx
ffffffff8021913d:	48 83 ec 08          	sub    $0x8,%rsp
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80219141:	e8 c4 26 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x80);
ffffffff80219146:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff8021914b:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff80219150:	e8 b5 26 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+0, 115200/9600);
ffffffff80219155:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff8021915a:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8021915f:	e8 a6 26 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80219164:	31 f6                	xor    %esi,%esi
ffffffff80219166:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff8021916b:	e8 9a 26 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x03);
ffffffff80219170:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80219175:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff8021917a:	e8 8b 26 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+2, 0xC7);
ffffffff8021917f:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff80219184:	bf fa 03 00 00       	mov    $0x3fa,%edi
ffffffff80219189:	e8 7c 26 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+4, 0);
ffffffff8021918e:	31 f6                	xor    %esi,%esi
ffffffff80219190:	bf fc 03 00 00       	mov    $0x3fc,%edi
ffffffff80219195:	e8 70 26 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
ffffffff8021919a:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff8021919f:	e8 5c 26 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff802191a4:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff802191aa:	74 74                	je     ffffffff80219220 <__RME_Lowlvl_Init+0xf0>
        RME_X64_UART_Exist=1;
ffffffff802191ac:	48 c7 05 79 e5 00 00 	movq   $0x1,0xe579(%rip)        # ffffffff80227730 <RME_X64_UART_Exist>
ffffffff802191b3:	01 00 00 00 
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff802191b7:	48 b8 0e 04 00 00 00 	movabs $0xffff80000000040e,%rax
ffffffff802191be:	80 ff ff 
ffffffff802191c1:	0f b7 00             	movzwl (%rax),%eax
    if(Paddr!=0)
ffffffff802191c4:	c1 e0 04             	shl    $0x4,%eax
ffffffff802191c7:	75 62                	jne    ffffffff8021922b <__RME_Lowlvl_Init+0xfb>
{
ffffffff802191c9:	48 bb 00 00 0e 00 00 	movabs $0xffff8000000e0000,%rbx
ffffffff802191d0:	80 ff ff 
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff802191d3:	48 bd e0 ff 0f 00 00 	movabs $0xffff8000000fffe0,%rbp
ffffffff802191da:	80 ff ff 
ffffffff802191dd:	eb 0a                	jmp    ffffffff802191e9 <__RME_Lowlvl_Init+0xb9>
ffffffff802191df:	90                   	nop
ffffffff802191e0:	48 83 c3 04          	add    $0x4,%rbx
ffffffff802191e4:	48 39 eb             	cmp    %rbp,%rbx
ffffffff802191e7:	74 1b                	je     ffffffff80219204 <__RME_Lowlvl_Init+0xd4>
        if(_RME_Memcmp(&(Pos[Count]),"RPD PTR ",8)==0)
ffffffff802191e9:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff802191ee:	48 c7 c6 04 cb 21 80 	mov    $0xffffffff8021cb04,%rsi
ffffffff802191f5:	48 89 df             	mov    %rbx,%rdi
ffffffff802191f8:	e8 33 52 ff ff       	call   ffffffff8020e430 <_RME_Memcmp>
ffffffff802191fd:	48 85 c0             	test   %rax,%rax
ffffffff80219200:	75 de                	jne    ffffffff802191e0 <__RME_Lowlvl_Init+0xb0>
            while (1){}
ffffffff80219202:	eb fe                	jmp    ffffffff80219202 <__RME_Lowlvl_Init+0xd2>
    RME_DBG_S("\r\nRDSP address: ");
ffffffff80219204:	48 c7 c7 0d cb 21 80 	mov    $0xffffffff8021cb0d,%rdi
ffffffff8021920b:	e8 70 4c ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U((rme_ptr_t)RDSP);
ffffffff80219210:	31 ff                	xor    %edi,%edi
ffffffff80219212:	e8 79 4a ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff80219217:	8b 04 25 10 00 00 00 	mov    0x10,%eax
ffffffff8021921e:	0f 0b                	ud2
        RME_X64_UART_Exist=0;
ffffffff80219220:	31 c0                	xor    %eax,%eax
ffffffff80219222:	48 89 05 07 e5 00 00 	mov    %rax,0xe507(%rip)        # ffffffff80227730 <RME_X64_UART_Exist>
ffffffff80219229:	eb 8c                	jmp    ffffffff802191b7 <__RME_Lowlvl_Init+0x87>
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff8021922b:	bb ff ff 01 00       	mov    $0x1ffff,%ebx
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff80219230:	48 98                	cltq
ffffffff80219232:	48 ba e0 03 00 00 00 	movabs $0xffff8000000003e0,%rdx
ffffffff80219239:	80 ff ff 
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff8021923c:	48 c1 e3 2f          	shl    $0x2f,%rbx
ffffffff80219240:	48 8d 2c 10          	lea    (%rax,%rdx,1),%rbp
ffffffff80219244:	48 01 c3             	add    %rax,%rbx
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff80219247:	eb 14                	jmp    ffffffff8021925d <__RME_Lowlvl_Init+0x12d>
ffffffff80219249:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80219250:	48 83 c3 04          	add    $0x4,%rbx
ffffffff80219254:	48 39 dd             	cmp    %rbx,%rbp
ffffffff80219257:	0f 84 6c ff ff ff    	je     ffffffff802191c9 <__RME_Lowlvl_Init+0x99>
        if(_RME_Memcmp(&(Pos[Count]),"RPD PTR ",8)==0)
ffffffff8021925d:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80219262:	48 c7 c6 04 cb 21 80 	mov    $0xffffffff8021cb04,%rsi
ffffffff80219269:	48 89 df             	mov    %rbx,%rdi
ffffffff8021926c:	e8 bf 51 ff ff       	call   ffffffff8020e430 <_RME_Memcmp>
ffffffff80219271:	48 85 c0             	test   %rax,%rax
ffffffff80219274:	75 da                	jne    ffffffff80219250 <__RME_Lowlvl_Init+0x120>
            while (1){}
ffffffff80219276:	eb fe                	jmp    ffffffff80219276 <__RME_Lowlvl_Init+0x146>
ffffffff80219278:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021927f:	00 

ffffffff80219280 <__RME_Pgt_Kom_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Kom_Init(void)
{
ffffffff80219280:	f3 0f 1e fa          	endbr64
ffffffff80219284:	41 57                	push   %r15
ffffffff80219286:	41 56                	push   %r14
ffffffff80219288:	41 55                	push   %r13
ffffffff8021928a:	41 54                	push   %r12
ffffffff8021928c:	55                   	push   %rbp
ffffffff8021928d:	53                   	push   %rbx
ffffffff8021928e:	48 83 ec 08          	sub    $0x8,%rsp
    rme_cnt_t PDE_Cnt;
    rme_cnt_t Addr_Cnt;
    struct __RME_X64_Mem* Mem;

    /* Now initialize the kernel object allocation table */
    _RME_Kot_Init(RME_X64_Layout.Kot_Size/sizeof(rme_ptr_t));
ffffffff80219292:	48 8b 3d 2f e2 00 00 	mov    0xe22f(%rip),%rdi        # ffffffff802274c8 <RME_X64_Layout+0x8>
ffffffff80219299:	48 c1 ef 03          	shr    $0x3,%rdi
ffffffff8021929d:	e8 5e 56 ff ff       	call   ffffffff8020e900 <_RME_Kot_Init>
    /* Reset PCID counter */
    RME_X64_PCID_Inc=0;
ffffffff802192a2:	66 0f 6f 05 f6 41 00 	movdqa 0x41f6(%rip),%xmm0        # ffffffff8021d4a0 <Table.1+0x1e0>
ffffffff802192a9:	00 
ffffffff802192aa:	48 c7 c1 00 a0 10 80 	mov    $0xffffffff8010a000,%rcx

    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff802192b1:	31 f6                	xor    %esi,%esi
    RME_X64_PCID_Inc=0;
ffffffff802192b3:	48 c7 05 5a cd 00 00 	movq   $0x0,0xcd5a(%rip)        # ffffffff80226018 <RME_X64_PCID_Inc>
ffffffff802192ba:	00 00 00 00 
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff802192be:	48 c7 c2 00 b0 10 80 	mov    $0xffffffff8010b000,%rdx
    {
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|
ffffffff802192c5:	49 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%r8
ffffffff802192cc:	ff 0f 00 
ffffffff802192cf:	90                   	nop
ffffffff802192d0:	48 8d 82 00 f0 ef 7f 	lea    0x7feff000(%rdx),%rax
ffffffff802192d7:	48 89 d7             	mov    %rdx,%rdi
ffffffff802192da:	4c 21 c0             	and    %r8,%rax
ffffffff802192dd:	48 29 cf             	sub    %rcx,%rdi
ffffffff802192e0:	48 0d 03 01 00 00    	or     $0x103,%rax
ffffffff802192e6:	83 e7 10             	and    $0x10,%edi
ffffffff802192e9:	48 89 04 f5 00 98 10 	mov    %rax,-0x7fef6800(,%rsi,8)
ffffffff802192f0:	80 
ffffffff802192f1:	48 89 c8             	mov    %rcx,%rax
ffffffff802192f4:	74 12                	je     ffffffff80219308 <__RME_Pgt_Kom_Init+0x88>
        		                    RME_X64_MMU_KERN_PML4;

        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff802192f6:	48 8d 41 10          	lea    0x10(%rcx),%rax
ffffffff802192fa:	0f 11 01             	movups %xmm0,(%rcx)
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff802192fd:	48 39 d0             	cmp    %rdx,%rax
ffffffff80219300:	74 16                	je     ffffffff80219318 <__RME_Pgt_Kom_Init+0x98>
ffffffff80219302:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff80219308:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8021930b:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021930f:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80219313:	48 39 d0             	cmp    %rdx,%rax
ffffffff80219316:	75 f0                	jne    ffffffff80219308 <__RME_Pgt_Kom_Init+0x88>
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219318:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8021931c:	48 81 c1 00 10 00 00 	add    $0x1000,%rcx
ffffffff80219323:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
ffffffff8021932a:	48 81 fe 00 01 00 00 	cmp    $0x100,%rsi
ffffffff80219331:	75 9d                	jne    ffffffff802192d0 <__RME_Pgt_Kom_Init+0x50>
    }

    /* Map in the first 4GB as linear mappings as always, 4 super pages, including the device hole.
     * We need to detect whether the 1GB page is supported. If not, we just map the initial tables
     * in, and we know where they are hard-coded in the assembly file */
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff80219333:	48 8b 05 2e cf 00 00 	mov    0xcf2e(%rip),%rax        # ffffffff80226268 <RME_X64_Feature+0x248>
ffffffff8021933a:	a9 00 00 00 04       	test   $0x4000000,%eax
ffffffff8021933f:	0f 84 73 06 00 00    	je     ffffffff802199b8 <__RME_Pgt_Kom_Init+0x738>
    {
        /* Can use 1GB pages */
        RME_DBG_S("\n\rThis CPU have 1GB superpage support");
ffffffff80219345:	48 c7 c7 60 c9 21 80 	mov    $0xffffffff8021c960,%rdi
ffffffff8021934c:	e8 2f 4b ff ff       	call   ffffffff8020de80 <RME_Str_Print>
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_ADDR(3*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219351:	48 8b 05 a0 0c ff ff 	mov    -0xf360(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219358:	f3 0f 7e 05 b0 0c ef 	movq   -0x10f350(%rip),%xmm0        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff8021935f:	ff 
ffffffff80219360:	f3 0f 7e 0d 98 0c ef 	movq   -0x10f368(%rip),%xmm1        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80219367:	ff 
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219368:	48 81 0d 7d 0c ff ff 	orq    $0x81,-0xf383(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff8021936f:	81 00 00 00 
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219373:	0f 16 05 9e 0c ef ff 	movhps -0x10f362(%rip),%xmm0        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff8021937a:	66 0f eb 05 2e 41 00 	por    0x412e(%rip),%xmm0        # ffffffff8021d4b0 <Table.1+0x1f0>
ffffffff80219381:	00 
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219382:	48 0d 81 00 00 40    	or     $0x40000081,%rax
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80219388:	0f 16 0d 79 0c ef ff 	movhps -0x10f387(%rip),%xmm1        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff8021938f:	66 0f eb 0d 29 41 00 	por    0x4129(%rip),%xmm1        # ffffffff8021d4c0 <Table.1+0x200>
ffffffff80219396:	00 
ffffffff80219397:	0f 11 05 72 0c ef ff 	movups %xmm0,-0x10f38e(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff8021939e:	0f 11 0d 5b 0c ef ff 	movups %xmm1,-0x10f3a5(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
    }

    /* Ignore all memory below 4G, but we need to get the size of such memory above 16MB */
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff802193a5:	48 8b 1d 54 cc 00 00 	mov    0xcc54(%rip),%rbx        # ffffffff80226000 <RME_X64_Phys_Mem>
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff802193ac:	48 89 05 45 0c ff ff 	mov    %rax,-0xf3bb(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802193b3:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff802193ba:	75 1c                	jne    ffffffff802193d8 <__RME_Pgt_Kom_Init+0x158>
ffffffff802193bc:	e9 b1 06 00 00       	jmp    ffffffff80219a72 <__RME_Pgt_Kom_Init+0x7f2>
ffffffff802193c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    {
        /* See if this memory segment passes 16MB limit */
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff802193c8:	48 8b 1b             	mov    (%rbx),%rbx
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802193cb:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff802193d2:	0f 84 ea 06 00 00    	je     ffffffff80219ac2 <__RME_Pgt_Kom_Init+0x842>
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
ffffffff802193d8:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff802193dc:	48 03 43 10          	add    0x10(%rbx),%rax
ffffffff802193e0:	48 3d 00 00 00 01    	cmp    $0x1000000,%rax
ffffffff802193e6:	76 e0                	jbe    ffffffff802193c8 <__RME_Pgt_Kom_Init+0x148>
    }

    /* The first Kom1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGT_SIZE_16M));
    /* The raw sizes of kernel memory segment 1 - per CPU area is already aligned so no need to align again */
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff802193e8:	48 8b 05 e1 e0 00 00 	mov    0xe0e1(%rip),%rax        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff802193ef:	48 8b 15 e2 e0 00 00 	mov    0xe0e2(%rip),%rdx        # ffffffff802274d8 <RME_X64_Layout+0x18>
ffffffff802193f6:	48 01 d0             	add    %rdx,%rax
ffffffff802193f9:	48 89 05 f8 e0 00 00 	mov    %rax,0xe0f8(%rip)        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80219400:	48 8b 15 f1 e0 00 00 	mov    0xe0f1(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219407:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff8021940e:	7f ff ff 
ffffffff80219411:	48 29 d0             	sub    %rdx,%rax
ffffffff80219414:	48 03 43 10          	add    0x10(%rbx),%rax
ffffffff80219418:	48 03 43 18          	add    0x18(%rbx),%rax
ffffffff8021941c:	48 89 05 d5 e1 00 00 	mov    %rax,0xe1d5(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>

    /* Add the rest of Kom1 into the array */
    Addr_Cnt=1;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219423:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff8021942a:	0f 84 86 06 00 00    	je     ffffffff80219ab6 <__RME_Pgt_Kom_Init+0x836>
    Addr_Cnt=1;
ffffffff80219430:	bd 01 00 00 00       	mov    $0x1,%ebp
    {
        /* Add all segments under 4GB to Kom1 */
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
        /* If detected anything above 4GB, then this is not Kom1, exiting */
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff80219435:	41 bd ff ff ff ff    	mov    $0xffffffff,%r13d
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
        {
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
            RME_ASSERT(0);
        }
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff8021943b:	49 bc 00 00 00 00 00 	movabs $0xffff800000000000,%r12
ffffffff80219442:	80 ff ff 
ffffffff80219445:	eb 3e                	jmp    ffffffff80219485 <__RME_Pgt_Kom_Init+0x205>
ffffffff80219447:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff8021944d:	48 8d 55 06          	lea    0x6(%rbp),%rdx
ffffffff80219451:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80219457:	4c 01 e0             	add    %r12,%rax
ffffffff8021945a:	48 89 04 d5 c8 74 22 	mov    %rax,-0x7fdd8b38(,%rdx,8)
ffffffff80219461:	80 
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff80219462:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff80219466:	48 8d 55 26          	lea    0x26(%rbp),%rdx
        Addr_Cnt++;
ffffffff8021946a:	48 83 c5 01          	add    $0x1,%rbp
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff8021946e:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80219474:	48 89 04 d5 c8 74 22 	mov    %rax,-0x7fdd8b38(,%rdx,8)
ffffffff8021947b:	80 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021947c:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff80219483:	74 65                	je     ffffffff802194ea <__RME_Pgt_Kom_Init+0x26a>
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80219485:	48 8b 1b             	mov    (%rbx),%rbx
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff80219488:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8021948c:	49 39 c5             	cmp    %rax,%r13
ffffffff8021948f:	0f 82 4f 03 00 00    	jb     ffffffff802197e4 <__RME_Pgt_Kom_Init+0x564>
        if(Mem->Length<RME_POW2(RME_PGT_SIZE_4M))
ffffffff80219495:	48 81 7b 18 ff ff 3f 	cmpq   $0x3fffff,0x18(%rbx)
ffffffff8021949c:	00 
ffffffff8021949d:	76 18                	jbe    ffffffff802194b7 <__RME_Pgt_Kom_Init+0x237>
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
ffffffff8021949f:	48 83 fd 1f          	cmp    $0x1f,%rbp
ffffffff802194a3:	7e a2                	jle    ffffffff80219447 <__RME_Pgt_Kom_Init+0x1c7>
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
ffffffff802194a5:	48 c7 c7 e8 c9 21 80 	mov    $0xffffffff8021c9e8,%rdi
ffffffff802194ac:	e8 cf 49 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff802194b1:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff802194b5:	eb 90                	jmp    ffffffff80219447 <__RME_Pgt_Kom_Init+0x1c7>
            RME_DBG_S("\n\rAbandoning physical memory below 4G: addr 0x");
ffffffff802194b7:	48 c7 c7 b8 c9 21 80 	mov    $0xffffffff8021c9b8,%rdi
ffffffff802194be:	e8 bd 49 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
            RME_DBG_U(Mem->Start_Addr);
ffffffff802194c3:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff802194c7:	e8 c4 47 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
            RME_DBG_S(", length 0x");
ffffffff802194cc:	48 c7 c7 1e cb 21 80 	mov    $0xffffffff8021cb1e,%rdi
ffffffff802194d3:	e8 a8 49 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
            RME_DBG_U(Mem->Length);
ffffffff802194d8:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff802194dc:	e8 af 47 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802194e1:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff802194e8:	75 9b                	jne    ffffffff80219485 <__RME_Pgt_Kom_Init+0x205>
    }
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;

    /* This is the hole */
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff802194ea:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
ffffffff802194ee:	48 8d 50 06          	lea    0x6(%rax),%rdx
ffffffff802194f2:	48 83 c0 26          	add    $0x26,%rax
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff802194f6:	48 89 2d f3 df 00 00 	mov    %rbp,0xdff3(%rip)        # ffffffff802274f0 <RME_X64_Layout+0x30>
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff802194fd:	48 8b 14 d5 c8 74 22 	mov    -0x7fdd8b38(,%rdx,8),%rdx
ffffffff80219504:	80 
ffffffff80219505:	48 8b 04 c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rax
ffffffff8021950c:	80 
ffffffff8021950d:	48 01 d0             	add    %rdx,%rax
ffffffff80219510:	48 89 05 e1 e1 00 00 	mov    %rax,0xe1e1(%rip)        # ffffffff802276f8 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff80219517:	48 8b 0d da e1 00 00 	mov    0xe1da(%rip),%rcx        # ffffffff802276f8 <RME_X64_Layout+0x238>
ffffffff8021951e:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff80219525:	80 ff ff 
ffffffff80219528:	48 89 c2             	mov    %rax,%rdx
ffffffff8021952b:	48 29 ca             	sub    %rcx,%rdx
ffffffff8021952e:	48 89 15 cb e1 00 00 	mov    %rdx,0xe1cb(%rip)        # ffffffff80227700 <RME_X64_Layout+0x240>

    /* Create kernel page mappings for memory above 4GB - we assume only one segment below 4GB */
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff80219535:	48 8b 15 bc df 00 00 	mov    0xdfbc(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff8021953c:	48 89 15 9d df 00 00 	mov    %rdx,0xdf9d(%rip)        # ffffffff802274e0 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff80219543:	48 89 05 be e1 00 00 	mov    %rax,0xe1be(%rip)        # ffffffff80227708 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff8021954a:	48 c7 05 bb e1 00 00 	movq   $0x0,0xe1bb(%rip)        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff80219551:	00 00 00 00 
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
        {
            PDE_Cnt++;
            if(PDE_Cnt==512)
            {
                PDE_Cnt=0;
ffffffff80219555:	48 b8 00 18 10 00 00 	movabs $0xffff800000101800,%rax
ffffffff8021955c:	80 ff ff 
ffffffff8021955f:	48 be 00 80 00 80 ff 	movabs $0x7fff80008000,%rsi
ffffffff80219566:	7f 00 00 

        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219569:	48 b9 00 20 10 00 00 	movabs $0xffff800000102000,%rcx
ffffffff80219570:	80 ff ff 
ffffffff80219573:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff80219578:	48 8b 14 06          	mov    (%rsi,%rax,1),%rdx
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff8021957c:	48 83 c0 08          	add    $0x8,%rax
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff80219580:	48 89 50 f8          	mov    %rdx,-0x8(%rax)
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80219584:	48 39 c8             	cmp    %rcx,%rax
ffffffff80219587:	75 ef                	jne    ffffffff80219578 <__RME_Pgt_Kom_Init+0x2f8>

    /* Page table allocation finished. Now need to align Kom1 to 2MB page boundary */
    RME_X64_Layout.Kom1_Start[0]=RME_ROUND_UP(RME_X64_Layout.Kom1_Start[0],RME_PGT_SIZE_2M);
ffffffff80219589:	48 8b 05 68 df 00 00 	mov    0xdf68(%rip),%rax        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219590:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80219596:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff8021959c:	48 89 05 55 df 00 00 	mov    %rax,0xdf55(%rip)        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Size[0]-1,RME_PGT_SIZE_2M);
ffffffff802195a3:	48 8b 05 4e e0 00 00 	mov    0xe04e(%rip),%rax        # ffffffff802275f8 <RME_X64_Layout+0x138>
ffffffff802195aa:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802195ae:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff802195b4:	48 89 05 3d e0 00 00 	mov    %rax,0xe03d(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>

    /* All memory is mapped. Now figure out the size of kernel stacks */
    RME_X64_Layout.Kpgtbl_Size=RME_X64_Layout.Kom1_Start[0]-RME_X64_Layout.Kpgtbl_Start;
ffffffff802195bb:	48 8b 05 36 df 00 00 	mov    0xdf36(%rip),%rax        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff802195c2:	48 8b 15 17 df 00 00 	mov    0xdf17(%rip),%rdx        # ffffffff802274e0 <RME_X64_Layout+0x20>
ffffffff802195c9:	48 29 d0             	sub    %rdx,%rax
ffffffff802195cc:	48 89 05 15 df 00 00 	mov    %rax,0xdf15(%rip)        # ffffffff802274e8 <RME_X64_Layout+0x28>

    /* See if we are allocating the stack from Kom2 or Kom1 */
    if(RME_X64_Layout.Kom2_Size==0)
ffffffff802195d3:	48 8b 05 36 e1 00 00 	mov    0xe136(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff802195da:	48 85 c0             	test   %rax,%rax
ffffffff802195dd:	0f 85 3a 04 00 00    	jne    ffffffff80219a1d <__RME_Pgt_Kom_Init+0x79d>
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Start[0]+RME_X64_Layout.Kom1_Size[0]-1,RME_X64_KSTACK_ORDER);
ffffffff802195e3:	48 8b 15 0e df 00 00 	mov    0xdf0e(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff802195ea:	48 8b 05 07 e0 00 00 	mov    0xe007(%rip),%rax        # ffffffff802275f8 <RME_X64_Layout+0x138>
ffffffff802195f1:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff802195f6:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff802195fc:	48 89 05 15 e1 00 00 	mov    %rax,0xe115(%rip)        # ffffffff80227718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80219603:	48 8b 15 16 e1 00 00 	mov    0xe116(%rip),%rdx        # ffffffff80227720 <RME_X64_Layout+0x260>
ffffffff8021960a:	48 8b 05 07 e1 00 00 	mov    0xe107(%rip),%rax        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80219611:	48 29 d0             	sub    %rdx,%rax
ffffffff80219614:	48 89 05 fd e0 00 00 	mov    %rax,0xe0fd(%rip)        # ffffffff80227718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom1_Start[0];
ffffffff8021961b:	48 8b 05 f6 e0 00 00 	mov    0xe0f6(%rip),%rax        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80219622:	48 8b 15 cf de 00 00 	mov    0xdecf(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219629:	48 29 d0             	sub    %rdx,%rax
ffffffff8021962c:	48 89 05 c5 df 00 00 	mov    %rax,0xdfc5(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
    }

    /* Now report all mapping info */
    RME_DBG_S("\n\r\n\rKot_Start:     0x");
ffffffff80219633:	48 c7 c7 2a cb 21 80 	mov    $0xffffffff8021cb2a,%rdi
    RME_DBG_U(RME_X64_Layout.PerCPU_Size);
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Start);
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Size);
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff8021963a:	31 db                	xor    %ebx,%ebx
    RME_DBG_S("\n\r\n\rKot_Start:     0x");
ffffffff8021963c:	e8 3f 48 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kot_Start);
ffffffff80219641:	48 8b 3d 78 de 00 00 	mov    0xde78(%rip),%rdi        # ffffffff802274c0 <RME_X64_Layout>
ffffffff80219648:	e8 43 46 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rKot_Size:      0x");
ffffffff8021964d:	48 c7 c7 40 cb 21 80 	mov    $0xffffffff8021cb40,%rdi
ffffffff80219654:	e8 27 48 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kot_Size);
ffffffff80219659:	48 8b 3d 68 de 00 00 	mov    0xde68(%rip),%rdi        # ffffffff802274c8 <RME_X64_Layout+0x8>
ffffffff80219660:	e8 2b 46 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rPerCPU_Start:    0x");
ffffffff80219665:	48 c7 c7 54 cb 21 80 	mov    $0xffffffff8021cb54,%rdi
ffffffff8021966c:	e8 0f 48 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.PerCPU_Start);
ffffffff80219671:	48 8b 3d 58 de 00 00 	mov    0xde58(%rip),%rdi        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff80219678:	e8 13 46 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rPerCPU_Size:     0x");
ffffffff8021967d:	48 c7 c7 6a cb 21 80 	mov    $0xffffffff8021cb6a,%rdi
ffffffff80219684:	e8 f7 47 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.PerCPU_Size);
ffffffff80219689:	48 8b 3d 48 de 00 00 	mov    0xde48(%rip),%rdi        # ffffffff802274d8 <RME_X64_Layout+0x18>
ffffffff80219690:	e8 fb 45 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
ffffffff80219695:	48 c7 c7 80 cb 21 80 	mov    $0xffffffff8021cb80,%rdi
ffffffff8021969c:	e8 df 47 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Start);
ffffffff802196a1:	48 8b 3d 38 de 00 00 	mov    0xde38(%rip),%rdi        # ffffffff802274e0 <RME_X64_Layout+0x20>
ffffffff802196a8:	e8 e3 45 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
ffffffff802196ad:	48 c7 c7 96 cb 21 80 	mov    $0xffffffff8021cb96,%rdi
ffffffff802196b4:	e8 c7 47 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kpgtbl_Size);
ffffffff802196b9:	48 8b 3d 28 de 00 00 	mov    0xde28(%rip),%rdi        # ffffffff802274e8 <RME_X64_Layout+0x28>
ffffffff802196c0:	e8 cb 45 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff802196c5:	48 8b 05 24 de 00 00 	mov    0xde24(%rip),%rax        # ffffffff802274f0 <RME_X64_Layout+0x30>
ffffffff802196cc:	48 85 c0             	test   %rax,%rax
ffffffff802196cf:	74 72                	je     ffffffff80219743 <__RME_Pgt_Kom_Init+0x4c3>
    {
        RME_DBG_S("\n\rKom1_Start[");
ffffffff802196d1:	48 c7 c7 2e cc 21 80 	mov    $0xffffffff8021cc2e,%rdi
ffffffff802196d8:	e8 a3 47 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff802196dd:	48 89 df             	mov    %rbx,%rdi
ffffffff802196e0:	e8 ab 45 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
        RME_DBG_S("]:  0x");
ffffffff802196e5:	48 c7 c7 3c cc 21 80 	mov    $0xffffffff8021cc3c,%rdi
ffffffff802196ec:	e8 8f 47 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
        RME_DBG_U(RME_X64_Layout.Kom1_Start[Addr_Cnt]);
ffffffff802196f1:	48 8d 43 06          	lea    0x6(%rbx),%rax
ffffffff802196f5:	48 8b 3c c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rdi
ffffffff802196fc:	80 
ffffffff802196fd:	e8 8e 45 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
        RME_DBG_S("\n\rKom1_Size[");
ffffffff80219702:	48 c7 c7 43 cc 21 80 	mov    $0xffffffff8021cc43,%rdi
ffffffff80219709:	e8 72 47 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff8021970e:	48 89 df             	mov    %rbx,%rdi
ffffffff80219711:	e8 7a 45 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
        RME_DBG_S("]:   0x");
ffffffff80219716:	48 c7 c7 50 cc 21 80 	mov    $0xffffffff8021cc50,%rdi
ffffffff8021971d:	e8 5e 47 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
        RME_DBG_U(RME_X64_Layout.Kom1_Size[Addr_Cnt]);
ffffffff80219722:	48 8d 43 26          	lea    0x26(%rbx),%rax
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219726:	48 83 c3 01          	add    $0x1,%rbx
        RME_DBG_U(RME_X64_Layout.Kom1_Size[Addr_Cnt]);
ffffffff8021972a:	48 8b 3c c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rdi
ffffffff80219731:	80 
ffffffff80219732:	e8 59 45 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219737:	48 8b 05 b2 dd 00 00 	mov    0xddb2(%rip),%rax        # ffffffff802274f0 <RME_X64_Layout+0x30>
ffffffff8021973e:	48 39 c3             	cmp    %rax,%rbx
ffffffff80219741:	72 8e                	jb     ffffffff802196d1 <__RME_Pgt_Kom_Init+0x451>
    }
    RME_DBG_S("\n\rHole_Start:      0x");
ffffffff80219743:	48 c7 c7 ac cb 21 80 	mov    $0xffffffff8021cbac,%rdi
ffffffff8021974a:	e8 31 47 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Hole_Start);
ffffffff8021974f:	48 8b 3d a2 df 00 00 	mov    0xdfa2(%rip),%rdi        # ffffffff802276f8 <RME_X64_Layout+0x238>
ffffffff80219756:	e8 35 45 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rHole_Size:       0x");
ffffffff8021975b:	48 c7 c7 c2 cb 21 80 	mov    $0xffffffff8021cbc2,%rdi
ffffffff80219762:	e8 19 47 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Hole_Size);
ffffffff80219767:	48 8b 3d 92 df 00 00 	mov    0xdf92(%rip),%rdi        # ffffffff80227700 <RME_X64_Layout+0x240>
ffffffff8021976e:	e8 1d 45 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rKom2_Start:     0x");
ffffffff80219773:	48 c7 c7 d8 cb 21 80 	mov    $0xffffffff8021cbd8,%rdi
ffffffff8021977a:	e8 01 47 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kom2_Start);
ffffffff8021977f:	48 8b 3d 82 df 00 00 	mov    0xdf82(%rip),%rdi        # ffffffff80227708 <RME_X64_Layout+0x248>
ffffffff80219786:	e8 05 45 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rKom2_Size:      0x");
ffffffff8021978b:	48 c7 c7 ed cb 21 80 	mov    $0xffffffff8021cbed,%rdi
ffffffff80219792:	e8 e9 46 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kom2_Size);
ffffffff80219797:	48 8b 3d 72 df 00 00 	mov    0xdf72(%rip),%rdi        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff8021979e:	e8 ed 44 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rStack_Start:     0x");
ffffffff802197a3:	48 c7 c7 02 cc 21 80 	mov    $0xffffffff8021cc02,%rdi
ffffffff802197aa:	e8 d1 46 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Stack_Start);
ffffffff802197af:	48 8b 3d 62 df 00 00 	mov    0xdf62(%rip),%rdi        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff802197b6:	e8 d5 44 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rStack_Size:      0x");
ffffffff802197bb:	48 c7 c7 18 cc 21 80 	mov    $0xffffffff8021cc18,%rdi
ffffffff802197c2:	e8 b9 46 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Stack_Size);
ffffffff802197c7:	48 8b 3d 52 df 00 00 	mov    0xdf52(%rip),%rdi        # ffffffff80227720 <RME_X64_Layout+0x260>
ffffffff802197ce:	e8 bd 44 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>

    return 0;
}
ffffffff802197d3:	48 83 c4 08          	add    $0x8,%rsp
ffffffff802197d7:	31 c0                	xor    %eax,%eax
ffffffff802197d9:	5b                   	pop    %rbx
ffffffff802197da:	5d                   	pop    %rbp
ffffffff802197db:	41 5c                	pop    %r12
ffffffff802197dd:	41 5d                	pop    %r13
ffffffff802197df:	41 5e                	pop    %r14
ffffffff802197e1:	41 5f                	pop    %r15
ffffffff802197e3:	c3                   	ret
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff802197e4:	48 89 2d 05 dd 00 00 	mov    %rbp,0xdd05(%rip)        # ffffffff802274f0 <RME_X64_Layout+0x30>
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff802197eb:	48 8d 45 05          	lea    0x5(%rbp),%rax
ffffffff802197ef:	48 83 c5 25          	add    $0x25,%rbp
ffffffff802197f3:	48 8b 04 c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rax
ffffffff802197fa:	80 
ffffffff802197fb:	48 8b 14 ed c8 74 22 	mov    -0x7fdd8b38(,%rbp,8),%rdx
ffffffff80219802:	80 
ffffffff80219803:	48 01 d0             	add    %rdx,%rax
ffffffff80219806:	48 89 05 eb de 00 00 	mov    %rax,0xdeeb(%rip)        # ffffffff802276f8 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff8021980d:	48 8b 0d e4 de 00 00 	mov    0xdee4(%rip),%rcx        # ffffffff802276f8 <RME_X64_Layout+0x238>
ffffffff80219814:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff8021981b:	80 ff ff 
ffffffff8021981e:	48 89 c2             	mov    %rax,%rdx
ffffffff80219821:	48 29 ca             	sub    %rcx,%rdx
ffffffff80219824:	48 89 15 d5 de 00 00 	mov    %rdx,0xded5(%rip)        # ffffffff80227700 <RME_X64_Layout+0x240>
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff8021982b:	48 8b 15 c6 dc 00 00 	mov    0xdcc6(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219832:	48 89 15 a7 dc 00 00 	mov    %rdx,0xdca7(%rip)        # ffffffff802274e0 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff80219839:	48 89 05 c8 de 00 00 	mov    %rax,0xdec8(%rip)        # ffffffff80227708 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff80219840:	48 c7 05 c5 de 00 00 	movq   $0x0,0xdec5(%rip)        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff80219847:	00 00 00 00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021984b:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff80219852:	0f 84 fd fc ff ff    	je     ffffffff80219555 <__RME_Pgt_Kom_Init+0x2d5>
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219858:	48 8b 43 18          	mov    0x18(%rbx),%rax
    PDE_Cnt=511;
ffffffff8021985c:	bd ff 01 00 00       	mov    $0x1ff,%ebp
    PDP_Cnt=3;
ffffffff80219861:	41 bd 03 00 00 00    	mov    $0x3,%r13d
    PML4_Cnt=0;
ffffffff80219867:	45 31 f6             	xor    %r14d,%r14d
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff8021986a:	49 bf 00 00 00 00 00 	movabs $0x800000000000,%r15
ffffffff80219871:	80 00 00 
ffffffff80219874:	49 bc 00 f0 ff ff ff 	movabs $0xffffffffff000,%r12
ffffffff8021987b:	ff 0f 00 
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021987e:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80219884:	0f 86 ff 00 00 00    	jbe    ffffffff80219989 <__RME_Pgt_Kom_Init+0x709>
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff8021988a:	48 8b 73 10          	mov    0x10(%rbx),%rsi
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff8021988e:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80219892:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80219898:	48 8d 96 ff ff 1f 00 	lea    0x1fffff(%rsi),%rdx
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff8021989f:	48 89 43 18          	mov    %rax,0x18(%rbx)
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff802198a3:	48 81 e2 00 00 e0 ff 	and    $0xffffffffffe00000,%rdx
ffffffff802198aa:	48 89 53 10          	mov    %rdx,0x10(%rbx)
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff802198ae:	31 d2                	xor    %edx,%edx
ffffffff802198b0:	eb 5f                	jmp    ffffffff80219911 <__RME_Pgt_Kom_Init+0x691>
            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff802198b2:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff802198b6:	48 8b 0d 3b dc 00 00 	mov    0xdc3b(%rip),%rcx        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff802198bd:	48 01 d0             	add    %rdx,%rax
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff802198c0:	48 81 c2 00 00 20 00 	add    $0x200000,%rdx
            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff802198c7:	4c 21 e0             	and    %r12,%rax
ffffffff802198ca:	48 0d 83 01 00 00    	or     $0x183,%rax
ffffffff802198d0:	48 89 01             	mov    %rax,(%rcx)
            RME_X64_Layout.Kom1_Start[0]+=sizeof(rme_ptr_t);
ffffffff802198d3:	48 8b 05 1e dc 00 00 	mov    0xdc1e(%rip),%rax        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff802198da:	48 83 c0 08          	add    $0x8,%rax
ffffffff802198de:	48 89 05 13 dc 00 00 	mov    %rax,0xdc13(%rip)        # ffffffff802274f8 <RME_X64_Layout+0x38>
            RME_X64_Layout.Kom1_Size[0]-=sizeof(rme_ptr_t);
ffffffff802198e5:	48 8b 05 0c dd 00 00 	mov    0xdd0c(%rip),%rax        # ffffffff802275f8 <RME_X64_Layout+0x138>
ffffffff802198ec:	48 83 e8 08          	sub    $0x8,%rax
ffffffff802198f0:	48 89 05 01 dd 00 00 	mov    %rax,0xdd01(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>
            RME_X64_Layout.Kom2_Size+=RME_POW2(RME_PGT_SIZE_2M);
ffffffff802198f7:	48 8b 05 12 de 00 00 	mov    0xde12(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff802198fe:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80219904:	48 89 05 05 de 00 00 	mov    %rax,0xde05(%rip)        # ffffffff80227710 <RME_X64_Layout+0x250>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8021990b:	48 3b 53 18          	cmp    0x18(%rbx),%rdx
ffffffff8021990f:	73 58                	jae    ffffffff80219969 <__RME_Pgt_Kom_Init+0x6e9>
            PDE_Cnt++;
ffffffff80219911:	48 83 c5 01          	add    $0x1,%rbp
            if(PDE_Cnt==512)
ffffffff80219915:	48 81 fd 00 02 00 00 	cmp    $0x200,%rbp
ffffffff8021991c:	75 94                	jne    ffffffff802198b2 <__RME_Pgt_Kom_Init+0x632>
                PDP_Cnt++;
ffffffff8021991e:	49 83 c5 01          	add    $0x1,%r13
                if(PDP_Cnt==512)
ffffffff80219922:	49 81 fd 00 02 00 00 	cmp    $0x200,%r13
ffffffff80219929:	75 07                	jne    ffffffff80219932 <__RME_Pgt_Kom_Init+0x6b2>
                    PML4_Cnt++;
ffffffff8021992b:	49 83 c6 01          	add    $0x1,%r14
                    PDP_Cnt=0;
ffffffff8021992f:	45 31 ed             	xor    %r13d,%r13d
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff80219932:	48 8b 05 bf db 00 00 	mov    0xdbbf(%rip),%rax        # ffffffff802274f8 <RME_X64_Layout+0x38>
ffffffff80219939:	4c 89 f1             	mov    %r14,%rcx
                PDE_Cnt=0;
ffffffff8021993c:	31 ed                	xor    %ebp,%ebp
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff8021993e:	48 c1 e1 09          	shl    $0x9,%rcx
ffffffff80219942:	49 8d 8c 0d 00 02 00 	lea    0x200(%r13,%rcx,1),%rcx
ffffffff80219949:	00 
ffffffff8021994a:	4c 01 f8             	add    %r15,%rax
ffffffff8021994d:	4c 21 e0             	and    %r12,%rax
ffffffff80219950:	48 0b 04 cd 00 90 10 	or     -0x7fef7000(,%rcx,8),%rax
ffffffff80219957:	80 
ffffffff80219958:	48 83 c8 01          	or     $0x1,%rax
ffffffff8021995c:	48 89 04 cd 00 90 10 	mov    %rax,-0x7fef7000(,%rcx,8)
ffffffff80219963:	80 
ffffffff80219964:	e9 49 ff ff ff       	jmp    ffffffff802198b2 <__RME_Pgt_Kom_Init+0x632>
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80219969:	48 8b 1b             	mov    (%rbx),%rbx
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021996c:	48 81 fb 00 60 22 80 	cmp    $0xffffffff80226000,%rbx
ffffffff80219973:	0f 84 dc fb ff ff    	je     ffffffff80219555 <__RME_Pgt_Kom_Init+0x2d5>
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219979:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff8021997d:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80219983:	0f 87 01 ff ff ff    	ja     ffffffff8021988a <__RME_Pgt_Kom_Init+0x60a>
            RME_DBG_S("\n\rAbandoning physical memory above 4G: addr 0x");
ffffffff80219989:	48 c7 c7 20 ca 21 80 	mov    $0xffffffff8021ca20,%rdi
ffffffff80219990:	e8 eb 44 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
            RME_DBG_U(Mem->Start_Addr);
ffffffff80219995:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff80219999:	e8 f2 42 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
            RME_DBG_S(", length 0x");
ffffffff8021999e:	48 c7 c7 1e cb 21 80 	mov    $0xffffffff8021cb1e,%rdi
ffffffff802199a5:	e8 d6 44 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
            RME_DBG_U(Mem->Length);
ffffffff802199aa:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff802199ae:	e8 dd 42 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff802199b3:	48 8b 1b             	mov    (%rbx),%rbx
            continue;
ffffffff802199b6:	eb b4                	jmp    ffffffff8021996c <__RME_Pgt_Kom_Init+0x6ec>
        RME_DBG_S("\n\rThis CPU do not have 1GB superpage support");
ffffffff802199b8:	48 c7 c7 88 c9 21 80 	mov    $0xffffffff8021c988,%rdi
ffffffff802199bf:	e8 bc 44 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff802199c4:	48 8b 05 2d 06 ff ff 	mov    -0xf9d3(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff802199cb:	f3 0f 7e 05 3d 06 ef 	movq   -0x10f9c3(%rip),%xmm0        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff802199d2:	ff 
ffffffff802199d3:	f3 0f 7e 0d 25 06 ef 	movq   -0x10f9db(%rip),%xmm1        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff802199da:	ff 
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
ffffffff802199db:	48 81 0d 0a 06 ff ff 	orq    $0x104001,-0xf9f6(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff802199e2:	01 40 10 00 
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff802199e6:	0f 16 05 2b 06 ef ff 	movhps -0x10f9d5(%rip),%xmm0        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff802199ed:	66 0f eb 05 db 3a 00 	por    0x3adb(%rip),%xmm0        # ffffffff8021d4d0 <Table.1+0x210>
ffffffff802199f4:	00 
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff802199f5:	48 0d 01 50 10 00    	or     $0x105001,%rax
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff802199fb:	0f 16 0d 06 06 ef ff 	movhps -0x10f9fa(%rip),%xmm1        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80219a02:	66 0f eb 0d d6 3a 00 	por    0x3ad6(%rip),%xmm1        # ffffffff8021d4e0 <Table.1+0x220>
ffffffff80219a09:	00 
ffffffff80219a0a:	0f 11 05 ff 05 ef ff 	movups %xmm0,-0x10fa01(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80219a11:	0f 11 0d e8 05 ef ff 	movups %xmm1,-0x10fa18(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80219a18:	e9 88 f9 ff ff       	jmp    ffffffff802193a5 <__RME_Pgt_Kom_Init+0x125>
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size-1,RME_X64_KSTACK_ORDER);
ffffffff80219a1d:	48 8b 15 e4 dc 00 00 	mov    0xdce4(%rip),%rdx        # ffffffff80227708 <RME_X64_Layout+0x248>
ffffffff80219a24:	48 8b 05 e5 dc 00 00 	mov    0xdce5(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff80219a2b:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff80219a30:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff80219a36:	48 89 05 db dc 00 00 	mov    %rax,0xdcdb(%rip)        # ffffffff80227718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80219a3d:	48 8b 15 dc dc 00 00 	mov    0xdcdc(%rip),%rdx        # ffffffff80227720 <RME_X64_Layout+0x260>
ffffffff80219a44:	48 8b 05 cd dc 00 00 	mov    0xdccd(%rip),%rax        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80219a4b:	48 29 d0             	sub    %rdx,%rax
ffffffff80219a4e:	48 89 05 c3 dc 00 00 	mov    %rax,0xdcc3(%rip)        # ffffffff80227718 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
ffffffff80219a55:	48 8b 05 bc dc 00 00 	mov    0xdcbc(%rip),%rax        # ffffffff80227718 <RME_X64_Layout+0x258>
ffffffff80219a5c:	48 8b 15 a5 dc 00 00 	mov    0xdca5(%rip),%rdx        # ffffffff80227708 <RME_X64_Layout+0x248>
ffffffff80219a63:	48 29 d0             	sub    %rdx,%rax
ffffffff80219a66:	48 89 05 a3 dc 00 00 	mov    %rax,0xdca3(%rip)        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff80219a6d:	e9 c1 fb ff ff       	jmp    ffffffff80219633 <__RME_Pgt_Kom_Init+0x3b3>
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219a72:	48 8b 15 57 da 00 00 	mov    0xda57(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff80219a79:	48 8b 05 58 da 00 00 	mov    0xda58(%rip),%rax        # ffffffff802274d8 <RME_X64_Layout+0x18>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219a80:	48 b9 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rcx
ffffffff80219a87:	7f ff ff 
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219a8a:	48 01 d0             	add    %rdx,%rax
ffffffff80219a8d:	48 89 05 64 da 00 00 	mov    %rax,0xda64(%rip)        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219a94:	48 8b 05 7d c5 00 00 	mov    0xc57d(%rip),%rax        # ffffffff80226018 <RME_X64_PCID_Inc>
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80219a9b:	48 8b 15 56 da 00 00 	mov    0xda56(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219aa2:	48 03 05 67 c5 00 00 	add    0xc567(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff80219aa9:	48 01 c8             	add    %rcx,%rax
ffffffff80219aac:	48 29 d0             	sub    %rdx,%rax
ffffffff80219aaf:	48 89 05 42 db 00 00 	mov    %rax,0xdb42(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80219ab6:	31 c0                	xor    %eax,%eax
ffffffff80219ab8:	bd 01 00 00 00       	mov    $0x1,%ebp
ffffffff80219abd:	e9 2c fa ff ff       	jmp    ffffffff802194ee <__RME_Pgt_Kom_Init+0x26e>
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80219ac2:	48 8b 05 07 da 00 00 	mov    0xda07(%rip),%rax        # ffffffff802274d0 <RME_X64_Layout+0x10>
ffffffff80219ac9:	48 8b 15 08 da 00 00 	mov    0xda08(%rip),%rdx        # ffffffff802274d8 <RME_X64_Layout+0x18>
ffffffff80219ad0:	48 01 d0             	add    %rdx,%rax
ffffffff80219ad3:	48 89 05 1e da 00 00 	mov    %rax,0xda1e(%rip)        # ffffffff802274f8 <RME_X64_Layout+0x38>
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80219ada:	48 8b 15 17 da 00 00 	mov    0xda17(%rip),%rdx        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80219ae1:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff80219ae8:	7f ff ff 
ffffffff80219aeb:	48 29 d0             	sub    %rdx,%rax
ffffffff80219aee:	48 03 05 1b c5 00 00 	add    0xc51b(%rip),%rax        # ffffffff80226010 <RME_X64_Timestamp>
ffffffff80219af5:	48 03 05 1c c5 00 00 	add    0xc51c(%rip),%rax        # ffffffff80226018 <RME_X64_PCID_Inc>
ffffffff80219afc:	48 89 05 f5 da 00 00 	mov    %rax,0xdaf5(%rip)        # ffffffff802275f8 <RME_X64_Layout+0x138>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80219b03:	eb b1                	jmp    ffffffff80219ab6 <__RME_Pgt_Kom_Init+0x836>
ffffffff80219b05:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80219b0c:	00 00 00 00 

ffffffff80219b10 <__RME_SMP_Low_Level_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
rme_ptr_t __RME_SMP_Low_Level_Init(void)
{
ffffffff80219b10:	f3 0f 1e fa          	endbr64
ffffffff80219b14:	53                   	push   %rbx
    struct RME_CPU_Local* CPU_Local;

    /* Initialize all vector tables */
    __RME_X64_CPU_Local_Init();
ffffffff80219b15:	e8 46 b9 ff ff       	call   ffffffff80215460 <__RME_X64_CPU_Local_Init>
    /* Initialize LAPIC */
    __RME_X64_LAPIC_Init();
ffffffff80219b1a:	e8 31 b8 ff ff       	call   ffffffff80215350 <__RME_X64_LAPIC_Init>

    /* Check to see if we are booting this correctly */
    CPU_Local=RME_CPU_LOCAL();
ffffffff80219b1f:	e8 1b 1d ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80219b24:	48 89 c3             	mov    %rax,%rbx
    RME_ASSERT(CPU_Local->CPUID==RME_X64_CPU_Cnt);
ffffffff80219b27:	48 8b 05 72 d9 00 00 	mov    0xd972(%rip),%rax        # ffffffff802274a0 <RME_X64_CPU_Cnt>

    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
ffffffff80219b2e:	48 8b 15 6b d9 00 00 	mov    0xd96b(%rip),%rdx        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff80219b35:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80219b39:	48 c7 82 a8 64 22 80 	movq   $0x1,-0x7fdd9b58(%rdx)
ffffffff80219b40:	01 00 00 00 
    /* Spin until the global CPU counter is zero again, which means the booting
     * processor has done booting and we can proceed now */
    while(RME_X64_CPU_Cnt!=0);
ffffffff80219b44:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80219b48:	48 8b 15 51 d9 00 00 	mov    0xd951(%rip),%rdx        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff80219b4f:	48 85 d2             	test   %rdx,%rdx
ffffffff80219b52:	75 f4                	jne    ffffffff80219b48 <__RME_SMP_Low_Level_Init+0x38>
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgt_Set(rme_ptr_t Pgt)
{
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff80219b54:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff80219b5b:	80 00 00 
    __RME_Pgt_Set(RME_CAP_GETOBJ((CPU_Local->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff80219b5e:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffff80219b62:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80219b66:	48 8b 40 30          	mov    0x30(%rax),%rax
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff80219b6a:	48 03 78 18          	add    0x18(%rax),%rdi
ffffffff80219b6e:	e8 36 1d ff ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
    __RME_Enter_User_Mode(0, RME_X64_USTACK(CPU_Local->CPUID), CPU_Local->CPUID);
ffffffff80219b73:	48 8b 13             	mov    (%rbx),%rdx
ffffffff80219b76:	31 ff                	xor    %edi,%edi
ffffffff80219b78:	48 8d b2 01 04 00 00 	lea    0x401(%rdx),%rsi
ffffffff80219b7f:	48 c1 e6 0b          	shl    $0xb,%rsi
ffffffff80219b83:	e8 38 1d ff ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
}
ffffffff80219b88:	31 c0                	xor    %eax,%eax
ffffffff80219b8a:	5b                   	pop    %rbx
ffffffff80219b8b:	c3                   	ret
ffffffff80219b8c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80219b90 <__RME_Boot>:
{
ffffffff80219b90:	f3 0f 1e fa          	endbr64
ffffffff80219b94:	41 57                	push   %r15
    RME_DBG_S("\r\nCPU 0 local IDT/GDT init");
ffffffff80219b96:	48 c7 c7 58 cc 21 80 	mov    $0xffffffff8021cc58,%rdi
{
ffffffff80219b9d:	41 56                	push   %r14
ffffffff80219b9f:	41 55                	push   %r13
ffffffff80219ba1:	41 54                	push   %r12
ffffffff80219ba3:	55                   	push   %rbp
ffffffff80219ba4:	53                   	push   %rbx
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff80219ba5:	48 bb 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rbx
ffffffff80219bac:	80 ff ff 
{
ffffffff80219baf:	48 83 ec 28          	sub    $0x28,%rsp
    RME_X64_CPU_Cnt=0;
ffffffff80219bb3:	48 c7 05 e2 d8 00 00 	movq   $0x0,0xd8e2(%rip)        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff80219bba:	00 00 00 00 
    RME_DBG_S("\r\nCPU 0 local IDT/GDT init");
ffffffff80219bbe:	e8 bd 42 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    __RME_X64_CPU_Local_Init();
ffffffff80219bc3:	e8 98 b8 ff ff       	call   ffffffff80215460 <__RME_X64_CPU_Local_Init>
    RME_DBG_S("\r\nCPU 0 LAPIC init");
ffffffff80219bc8:	48 c7 c7 73 cc 21 80 	mov    $0xffffffff8021cc73,%rdi
ffffffff80219bcf:	e8 ac 42 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_S("\r\nPIC init");
ffffffff80219bd4:	48 c7 c7 86 cc 21 80 	mov    $0xffffffff8021cc86,%rdi
    __RME_X64_LAPIC_Init();
ffffffff80219bdb:	e8 70 b7 ff ff       	call   ffffffff80215350 <__RME_X64_LAPIC_Init>
    RME_DBG_S("\r\nPIC init");
ffffffff80219be0:	e8 9b 42 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80219be5:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80219bea:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219bef:	e8 16 1c ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff80219bf4:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80219bf9:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219bfe:	e8 07 1c ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x11);
ffffffff80219c03:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80219c08:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80219c0d:	e8 f8 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, RME_X64_INT_USER(0));
ffffffff80219c12:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80219c17:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219c1c:	e8 e9 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 1<<2);
ffffffff80219c21:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80219c26:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219c2b:	e8 da 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0x3);
ffffffff80219c30:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80219c35:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219c3a:	e8 cb 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x11);
ffffffff80219c3f:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80219c44:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80219c49:	e8 bc 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, RME_X64_INT_USER(8));
ffffffff80219c4e:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff80219c53:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219c58:	e8 ad 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 2);
ffffffff80219c5d:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80219c62:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219c67:	e8 9e 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0x3);
ffffffff80219c6c:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80219c71:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219c76:	e8 8f 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x68);
ffffffff80219c7b:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80219c80:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80219c85:	e8 80 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x0A);
ffffffff80219c8a:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80219c8f:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80219c94:	e8 71 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x68);
ffffffff80219c99:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80219c9e:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80219ca3:	e8 62 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x0A);
ffffffff80219ca8:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80219cad:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80219cb2:	e8 53 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80219cb7:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80219cbc:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80219cc1:	e8 44 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff80219cc6:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80219ccb:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80219cd0:	e8 35 1b ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    RME_DBG_S("\r\nIOAPIC init");
ffffffff80219cd5:	48 c7 c7 91 cc 21 80 	mov    $0xffffffff8021cc91,%rdi
ffffffff80219cdc:	e8 9f 41 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff80219ce1:	c7 03 01 00 00 00    	movl   $0x1,(%rbx)
    Max_Int=((Max_Int>>16)&0xFF);
ffffffff80219ce7:	44 0f b6 63 12       	movzbl 0x12(%rbx),%r12d
    RME_DBG_S("\n\rMax int is: ");
ffffffff80219cec:	48 c7 c7 9f cc 21 80 	mov    $0xffffffff8021cc9f,%rdi
ffffffff80219cf3:	e8 88 41 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_I(Max_Int);
ffffffff80219cf8:	4c 89 e7             	mov    %r12,%rdi
ffffffff80219cfb:	e8 90 3f ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_ID,IOAPIC_ID);
ffffffff80219d00:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
ffffffff80219d06:	8b 6b 10             	mov    0x10(%rbx),%ebp
    RME_DBG_S("\n\rIOAPIC ID is: ");
ffffffff80219d09:	48 c7 c7 ae cc 21 80 	mov    $0xffffffff8021ccae,%rdi
ffffffff80219d10:	e8 6b 41 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    IOAPIC_ID>>=24;
ffffffff80219d15:	48 89 ef             	mov    %rbp,%rdi
ffffffff80219d18:	48 c1 ef 18          	shr    $0x18,%rdi
    RME_DBG_I(IOAPIC_ID);
ffffffff80219d1c:	e8 6f 3f ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,0);
ffffffff80219d21:	43 8d 44 24 11       	lea    0x11(%r12,%r12,1),%eax
ffffffff80219d26:	89 03                	mov    %eax,(%rbx)
ffffffff80219d28:	48 b8 10 00 c0 fe 00 	movabs $0xffff8000fec00010,%rax
ffffffff80219d2f:	80 ff ff 
ffffffff80219d32:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    __RME_X64_SMP_Init();
ffffffff80219d38:	e8 c3 f1 ff ff       	call   ffffffff80218f00 <__RME_X64_SMP_Init>
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff80219d3d:	4c 8b 3d b4 d7 00 00 	mov    0xd7b4(%rip),%r15        # ffffffff802274f8 <RME_X64_Layout+0x38>
    RME_DBG_S("\r\nKot registration start offset: 0x");
ffffffff80219d44:	48 c7 c7 50 ca 21 80 	mov    $0xffffffff8021ca50,%rdi
ffffffff80219d4b:	e8 30 41 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80219d50:	48 bf 00 00 00 02 00 	movabs $0x800002000000,%rdi
ffffffff80219d57:	80 00 00 
ffffffff80219d5a:	4c 01 ff             	add    %r15,%rdi
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff80219d5d:	49 8d 9f 00 00 00 02 	lea    0x2000000(%r15),%rbx
    RME_DBG_U(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80219d64:	48 c1 ef 07          	shr    $0x7,%rdi
ffffffff80219d68:	e8 23 3f ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff80219d6d:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff80219d72:	48 89 de             	mov    %rbx,%rsi
ffffffff80219d75:	31 ff                	xor    %edi,%edi
ffffffff80219d77:	e8 14 59 ff ff       	call   ffffffff8020f690 <_RME_Cpt_Boot_Init>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(16));
ffffffff80219d7c:	49 8d 8f 00 10 00 02 	lea    0x2001000(%r15),%rcx
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff80219d83:	31 f6                	xor    %esi,%esi
    for(Count=0;Count<16;Count++)
ffffffff80219d85:	31 ed                	xor    %ebp,%ebp
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff80219d87:	49 81 c7 ff 2f 08 02 	add    $0x2082fff,%r15
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff80219d8e:	41 b8 11 20 00 00    	mov    $0x2011,%r8d
ffffffff80219d94:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80219d99:	48 89 df             	mov    %rbx,%rdi
ffffffff80219d9c:	e8 af 59 ff ff       	call   ffffffff8020f750 <_RME_Cpt_Boot_Crt>
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff80219da1:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff80219da7:	45 31 c0             	xor    %r8d,%r8d
ffffffff80219daa:	31 d2                	xor    %edx,%edx
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff80219dac:	49 81 e7 00 f0 ff ff 	and    $0xfffffffffffff000,%r15
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff80219db3:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219db8:	48 89 df             	mov    %rbx,%rdi
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff80219dbb:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff80219dc0:	4c 89 f9             	mov    %r15,%rcx
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff80219dc3:	4d 8d a7 00 10 00 00 	lea    0x1000(%r15),%r12
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff80219dca:	6a 09                	push   $0x9
ffffffff80219dcc:	6a 27                	push   $0x27
ffffffff80219dce:	e8 9d 5b ff ff       	call   ffffffff8020f970 <_RME_Pgt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff80219dd3:	41 5a                	pop    %r10
ffffffff80219dd5:	41 5b                	pop    %r11
ffffffff80219dd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80219dde:	00 00 
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff80219de0:	6a 09                	push   $0x9
ffffffff80219de2:	49 89 ed             	mov    %rbp,%r13
ffffffff80219de5:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80219de9:	45 31 c9             	xor    %r9d,%r9d
ffffffff80219dec:	6a 1e                	push   $0x1e
ffffffff80219dee:	4c 89 e1             	mov    %r12,%rcx
ffffffff80219df1:	45 31 c0             	xor    %r8d,%r8d
ffffffff80219df4:	48 89 ea             	mov    %rbp,%rdx
ffffffff80219df7:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219dfc:	48 89 df             	mov    %rbx,%rdi
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff80219dff:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff80219e06:	e8 65 5b ff ff       	call   ffffffff8020f970 <_RME_Pgt_Boot_Crt>
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4), Count,
ffffffff80219e0b:	48 89 e9             	mov    %rbp,%rcx
ffffffff80219e0e:	4c 89 ea             	mov    %r13,%rdx
ffffffff80219e11:	be 00 80 01 00       	mov    $0x18000,%esi
ffffffff80219e16:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80219e1c:	48 81 c9 00 80 01 00 	or     $0x18000,%rcx
ffffffff80219e23:	48 89 df             	mov    %rbx,%rdi
ffffffff80219e26:	e8 65 48 ff ff       	call   ffffffff8020e690 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<16;Count++)
ffffffff80219e2b:	41 58                	pop    %r8
ffffffff80219e2d:	41 59                	pop    %r9
ffffffff80219e2f:	48 83 fd 10          	cmp    $0x10,%rbp
ffffffff80219e33:	75 ab                	jne    ffffffff80219de0 <__RME_Boot+0x250>
ffffffff80219e35:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    for(Count=0;Count<8192;Count++)
ffffffff80219e3a:	31 ed                	xor    %ebp,%ebp
ffffffff80219e3c:	4c 8d a0 00 10 01 00 	lea    0x11000(%rax),%r12
ffffffff80219e43:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff80219e48:	6a 09                	push   $0x9
ffffffff80219e4a:	4c 8d 6d 11          	lea    0x11(%rbp),%r13
ffffffff80219e4e:	4c 89 e1             	mov    %r12,%rcx
ffffffff80219e51:	45 31 c9             	xor    %r9d,%r9d
ffffffff80219e54:	6a 15                	push   $0x15
ffffffff80219e56:	45 31 c0             	xor    %r8d,%r8d
ffffffff80219e59:	4c 89 ea             	mov    %r13,%rdx
ffffffff80219e5c:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219e61:	48 89 df             	mov    %rbx,%rdi
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff80219e64:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff80219e6b:	e8 00 5b ff ff       	call   ffffffff8020f970 <_RME_Pgt_Boot_Crt>
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff80219e70:	48 89 ee             	mov    %rbp,%rsi
ffffffff80219e73:	48 89 ea             	mov    %rbp,%rdx
ffffffff80219e76:	4c 89 e9             	mov    %r13,%rcx
ffffffff80219e79:	48 c1 fe 09          	sar    $0x9,%rsi
ffffffff80219e7d:	48 89 df             	mov    %rbx,%rdi
    for(Count=0;Count<8192;Count++)
ffffffff80219e80:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff80219e84:	48 81 c9 00 80 01 00 	or     $0x18000,%rcx
ffffffff80219e8b:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80219e8f:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff80219e95:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80219e9b:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
ffffffff80219ea2:	e8 e9 47 ff ff       	call   ffffffff8020e690 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<8192;Count++)
ffffffff80219ea7:	5e                   	pop    %rsi
ffffffff80219ea8:	5f                   	pop    %rdi
ffffffff80219ea9:	48 81 fd 00 20 00 00 	cmp    $0x2000,%rbp
ffffffff80219eb0:	75 96                	jne    ffffffff80219e48 <__RME_Boot+0x2b8>
ffffffff80219eb2:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff80219eb7:	4c 8b 3d 32 d6 00 00 	mov    0xd632(%rip),%r15        # ffffffff802274f0 <RME_X64_Layout+0x30>
ffffffff80219ebe:	bd 00 00 20 00       	mov    $0x200000,%ebp
ffffffff80219ec3:	45 31 ed             	xor    %r13d,%r13d
ffffffff80219ec6:	41 bc ff ff 1f 00    	mov    $0x1fffff,%r12d
ffffffff80219ecc:	48 05 00 10 01 02    	add    $0x2011000,%rax
ffffffff80219ed2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff80219ed7:	4d 85 ff             	test   %r15,%r15
ffffffff80219eda:	0f 84 c5 00 00 00    	je     ffffffff80219fa5 <__RME_Boot+0x415>
ffffffff80219ee0:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80219ee7:	00 00 
    Page_Ptr=0;
ffffffff80219ee9:	45 31 ff             	xor    %r15d,%r15d
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff80219eec:	49 bd 00 00 00 00 00 	movabs $0x800000000000,%r13
ffffffff80219ef3:	80 00 00 
ffffffff80219ef6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80219efd:	00 00 00 
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219f00:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff80219f05:	45 31 f6             	xor    %r14d,%r14d
ffffffff80219f08:	48 8d 6f 26          	lea    0x26(%rdi),%rbp
ffffffff80219f0c:	4c 8d 67 06          	lea    0x6(%rdi),%r12
ffffffff80219f10:	48 8b 04 ed c8 74 22 	mov    -0x7fdd8b38(,%rbp,8),%rax
ffffffff80219f17:	80 
ffffffff80219f18:	48 85 c0             	test   %rax,%rax
ffffffff80219f1b:	74 55                	je     ffffffff80219f72 <__RME_Boot+0x3e2>
ffffffff80219f1d:	0f 1f 00             	nopl   (%rax)
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff80219f20:	4c 89 fe             	mov    %r15,%rsi
ffffffff80219f23:	4c 89 f9             	mov    %r15,%rcx
ffffffff80219f26:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80219f2c:	48 89 df             	mov    %rbx,%rdi
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff80219f2f:	4a 8b 14 e5 c8 74 22 	mov    -0x7fdd8b38(,%r12,8),%rdx
ffffffff80219f36:	80 
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff80219f37:	48 c1 ee 09          	shr    $0x9,%rsi
ffffffff80219f3b:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
            Page_Ptr++;
ffffffff80219f41:	49 83 c7 01          	add    $0x1,%r15
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff80219f45:	48 83 c6 11          	add    $0x11,%rsi
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff80219f49:	4c 01 ea             	add    %r13,%rdx
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff80219f4c:	0f b7 f6             	movzwl %si,%esi
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff80219f4f:	4c 01 f2             	add    %r14,%rdx
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff80219f52:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219f59:	49 81 c6 00 00 20 00 	add    $0x200000,%r14
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff80219f60:	e8 db 45 ff ff       	call   ffffffff8020e540 <_RME_Pgt_Boot_Add>
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80219f65:	48 8b 04 ed c8 74 22 	mov    -0x7fdd8b38(,%rbp,8),%rax
ffffffff80219f6c:	80 
ffffffff80219f6d:	49 39 c6             	cmp    %rax,%r14
ffffffff80219f70:	72 ae                	jb     ffffffff80219f20 <__RME_Boot+0x390>
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff80219f72:	48 83 44 24 08 01    	addq   $0x1,0x8(%rsp)
ffffffff80219f78:	48 8b 05 71 d5 00 00 	mov    0xd571(%rip),%rax        # ffffffff802274f0 <RME_X64_Layout+0x30>
ffffffff80219f7f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff80219f84:	48 39 c7             	cmp    %rax,%rdi
ffffffff80219f87:	0f 82 73 ff ff ff    	jb     ffffffff80219f00 <__RME_Boot+0x370>
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff80219f8d:	4c 89 fd             	mov    %r15,%rbp
    RME_DBG_U(Page_Ptr);
ffffffff80219f90:	4d 89 fd             	mov    %r15,%r13
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff80219f93:	48 c1 e5 15          	shl    $0x15,%rbp
ffffffff80219f97:	4c 8d a5 ff ff 1f 00 	lea    0x1fffff(%rbp),%r12
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M));
ffffffff80219f9e:	48 81 c5 00 00 20 00 	add    $0x200000,%rbp
    RME_DBG_S("\r\nKom1 pages: 0x");
ffffffff80219fa5:	48 c7 c7 bf cc 21 80 	mov    $0xffffffff8021ccbf,%rdi
ffffffff80219fac:	e8 cf 3e ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(Page_Ptr);
ffffffff80219fb1:	4c 89 ef             	mov    %r13,%rdi
ffffffff80219fb4:	e8 d7 3c ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S(", [0x0, 0x");
ffffffff80219fb9:	48 c7 c7 d0 cc 21 80 	mov    $0xffffffff8021ccd0,%rdi
ffffffff80219fc0:	e8 bb 3e ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff80219fc5:	4c 89 e7             	mov    %r12,%rdi
ffffffff80219fc8:	e8 c3 3c ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("]");
ffffffff80219fcd:	48 c7 c7 db cc 21 80 	mov    $0xffffffff8021ccdb,%rdi
ffffffff80219fd4:	e8 a7 3e ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_S("\r\nKom2 pages: 0x");
ffffffff80219fd9:	48 c7 c7 dd cc 21 80 	mov    $0xffffffff8021ccdd,%rdi
ffffffff80219fe0:	e8 9b 3e ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M));
ffffffff80219fe5:	48 8b 3d 24 d7 00 00 	mov    0xd724(%rip),%rdi        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff80219fec:	48 c1 ef 15          	shr    $0x15,%rdi
ffffffff80219ff0:	e8 9b 3c ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S(", [0x");
ffffffff80219ff5:	48 c7 c7 ee cc 21 80 	mov    $0xffffffff8021ccee,%rdi
ffffffff80219ffc:	e8 7f 3e ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M));
ffffffff8021a001:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021a004:	e8 87 3c ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S(", 0x");
ffffffff8021a009:	48 c7 c7 d6 cc 21 80 	mov    $0xffffffff8021ccd6,%rdi
ffffffff8021a010:	e8 6b 3e ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a015:	48 8b 05 f4 d6 00 00 	mov    0xd6f4(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff8021a01c:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021a020:	0f 84 b5 00 00 00    	je     ffffffff8021a0db <__RME_Boot+0x54b>
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a026:	49 bd 00 f0 ff ff ff 	movabs $0xffffffffff000,%r13
ffffffff8021a02d:	ff 0f 00 
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a030:	41 bc 00 08 00 00    	mov    $0x800,%r12d
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a036:	48 bd 00 00 00 00 00 	movabs $0xffff800000000000,%rbp
ffffffff8021a03d:	80 ff ff 
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a040:	4c 89 e0             	mov    %r12,%rax
ffffffff8021a043:	4c 89 e2             	mov    %r12,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a046:	4c 89 fe             	mov    %r15,%rsi
ffffffff8021a049:	4c 89 f9             	mov    %r15,%rcx
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a04c:	48 c1 f8 12          	sar    $0x12,%rax
ffffffff8021a050:	48 c1 fa 09          	sar    $0x9,%rdx
        Page_Ptr++;
ffffffff8021a054:	49 83 c7 01          	add    $0x1,%r15
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a058:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a05e:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff8021a064:	48 c1 e0 09          	shl    $0x9,%rax
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a068:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a06e:	48 8d 84 02 00 02 00 	lea    0x200(%rdx,%rax,1),%rax
ffffffff8021a075:	00 
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a076:	4c 89 e2             	mov    %r12,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a079:	48 c1 ee 09          	shr    $0x9,%rsi
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a07d:	49 83 c4 01          	add    $0x1,%r12
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a081:	48 8b 3c c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rdi
ffffffff8021a088:	80 
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a089:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a08f:	48 83 c6 11          	add    $0x11,%rsi
ffffffff8021a093:	0f b7 f6             	movzwl %si,%esi
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff8021a096:	4c 21 ef             	and    %r13,%rdi
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a099:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a0a0:	48 8d 04 d7          	lea    (%rdi,%rdx,8),%rax
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a0a4:	48 89 df             	mov    %rbx,%rdi
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff8021a0a7:	48 8b 14 28          	mov    (%rax,%rbp,1),%rdx
ffffffff8021a0ab:	4c 21 ea             	and    %r13,%rdx
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021a0ae:	e8 8d 44 ff ff       	call   ffffffff8020e540 <_RME_Pgt_Boot_Add>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8021a0b3:	48 8b 05 56 d6 00 00 	mov    0xd656(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff8021a0ba:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021a0be:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021a0c4:	49 39 c4             	cmp    %rax,%r12
ffffffff8021a0c7:	0f 82 73 ff ff ff    	jb     ffffffff8021a040 <__RME_Boot+0x4b0>
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8021a0cd:	4d 89 f9             	mov    %r15,%r9
ffffffff8021a0d0:	49 c1 e1 15          	shl    $0x15,%r9
ffffffff8021a0d4:	4d 8d a1 ff ff 1f 00 	lea    0x1fffff(%r9),%r12
ffffffff8021a0db:	4c 89 e7             	mov    %r12,%rdi
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a0de:	31 ed                	xor    %ebp,%ebp
    RME_DBG_U(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8021a0e0:	e8 ab 3b ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("]");
ffffffff8021a0e5:	48 c7 c7 db cc 21 80 	mov    $0xffffffff8021ccdb,%rdi
ffffffff8021a0ec:	e8 8f 3d ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff8021a0f1:	41 b8 00 80 01 00    	mov    $0x18000,%r8d
ffffffff8021a0f7:	31 c9                	xor    %ecx,%ecx
ffffffff8021a0f9:	31 f6                	xor    %esi,%esi
ffffffff8021a0fb:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff8021a100:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a103:	e8 78 62 ff ff       	call   ffffffff80210380 <_RME_Prc_Boot_Crt>
    RME_ASSERT(_RME_Kfn_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_KERN)==0);
ffffffff8021a108:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021a10d:	31 f6                	xor    %esi,%esi
ffffffff8021a10f:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a112:	e8 b9 b0 ff ff       	call   ffffffff802151d0 <_RME_Kfn_Boot_Crt>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_KOM, Cur_Addr, RME_X64_KOM1_MAXSEGS+1)==0);
ffffffff8021a117:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
ffffffff8021a11c:	31 f6                	xor    %esi,%esi
ffffffff8021a11e:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a121:	41 b8 21 00 00 00    	mov    $0x21,%r8d
ffffffff8021a127:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff8021a12c:	e8 1f 56 ff ff       	call   ffffffff8020f750 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff8021a131:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a136:	48 8b 05 b3 d3 00 00 	mov    0xd3b3(%rip),%rax        # ffffffff802274f0 <RME_X64_Layout+0x30>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff8021a13d:	49 81 c7 00 20 01 02 	add    $0x2012000,%r15
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a144:	48 85 c0             	test   %rax,%rax
ffffffff8021a147:	74 51                	je     ffffffff8021a19a <__RME_Boot+0x60a>
ffffffff8021a149:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a150:	48 8d 45 06          	lea    0x6(%rbp),%rax
ffffffff8021a154:	48 8d 55 26          	lea    0x26(%rbp),%rdx
ffffffff8021a158:	41 b9 0f 00 00 00    	mov    $0xf,%r9d
ffffffff8021a15e:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a161:	48 8b 34 c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rsi
ffffffff8021a168:	80 
ffffffff8021a169:	48 8b 14 d5 c8 74 22 	mov    -0x7fdd8b38(,%rdx,8),%rdx
ffffffff8021a170:	80 
ffffffff8021a171:	48 8b 0c c5 c8 74 22 	mov    -0x7fdd8b38(,%rax,8),%rcx
ffffffff8021a178:	80 
ffffffff8021a179:	4c 8d 04 16          	lea    (%rsi,%rdx,1),%r8
ffffffff8021a17d:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a180:	be 05 00 00 00       	mov    $0x5,%esi
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a185:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a189:	e8 b2 5f ff ff       	call   ffffffff80210140 <_RME_Kom_Boot_Crt>
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff8021a18e:	48 8b 05 5b d3 00 00 	mov    0xd35b(%rip),%rax        # ffffffff802274f0 <RME_X64_Layout+0x30>
ffffffff8021a195:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a198:	72 b6                	jb     ffffffff8021a150 <__RME_Boot+0x5c0>
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a19a:	41 b9 0d 00 00 00    	mov    $0xd,%r9d
ffffffff8021a1a0:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff8021a1a5:	48 89 df             	mov    %rbx,%rdi
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a1a8:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8021a1aa:	48 8b 15 57 d5 00 00 	mov    0xd557(%rip),%rdx        # ffffffff80227708 <RME_X64_Layout+0x248>
ffffffff8021a1b1:	48 8b 05 58 d5 00 00 	mov    0xd558(%rip),%rax        # ffffffff80227710 <RME_X64_Layout+0x250>
ffffffff8021a1b8:	48 8b 0d 49 d5 00 00 	mov    0xd549(%rip),%rcx        # ffffffff80227708 <RME_X64_Layout+0x248>
ffffffff8021a1bf:	4c 8d 04 02          	lea    (%rdx,%rax,1),%r8
ffffffff8021a1c3:	ba 20 00 00 00       	mov    $0x20,%edx
ffffffff8021a1c8:	e8 73 5f ff ff       	call   ffffffff80210140 <_RME_Kom_Boot_Crt>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a1cd:	4c 89 f9             	mov    %r15,%rcx
ffffffff8021a1d0:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff8021a1d5:	31 f6                	xor    %esi,%esi
ffffffff8021a1d7:	4c 8b 05 ca d2 00 00 	mov    0xd2ca(%rip),%r8        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a1de:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a1e1:	e8 6a 55 ff ff       	call   ffffffff8020f750 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a1e6:	4c 8b 25 bb d2 00 00 	mov    0xd2bb(%rip),%r12        # ffffffff802274a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a1ed:	48 8b 05 b4 d2 00 00 	mov    0xd2b4(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a1f4:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021a1f8:	49 81 c4 ff 0f 00 00 	add    $0xfff,%r12
ffffffff8021a1ff:	49 81 e4 00 f0 ff ff 	and    $0xfffffffffffff000,%r12
ffffffff8021a206:	4d 01 fc             	add    %r15,%r12
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a209:	48 85 c0             	test   %rax,%rax
ffffffff8021a20c:	74 46                	je     ffffffff8021a254 <__RME_Boot+0x6c4>
ffffffff8021a20e:	66 90                	xchg   %ax,%ax
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a210:	48 8b 0d b9 d2 00 00 	mov    0xd2b9(%rip),%rcx        # ffffffff802274d0 <RME_X64_Layout+0x10>
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a217:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a21a:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a21d:	48 89 df             	mov    %rbx,%rdi
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a220:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021a224:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a228:	48 03 83 98 01 00 00 	add    0x198(%rbx),%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a22f:	be 06 00 00 00       	mov    $0x6,%esi
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a234:	48 89 84 11 10 14 00 	mov    %rax,0x1410(%rcx,%rdx,1)
ffffffff8021a23b:	00 
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a23c:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a23f:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff8021a243:	e8 78 68 ff ff       	call   ffffffff80210ac0 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a248:	48 8b 05 59 d2 00 00 	mov    0xd259(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a24f:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a252:	72 bc                	jb     ffffffff8021a210 <__RME_Boot+0x680>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a254:	4c 8b 05 4d d2 00 00 	mov    0xd24d(%rip),%r8        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a25b:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021a25e:	31 f6                	xor    %esi,%esi
ffffffff8021a260:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a263:	ba 07 00 00 00       	mov    $0x7,%edx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a268:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a26a:	e8 e1 54 ff ff       	call   ffffffff8020f750 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a26f:	4c 8b 2d 32 d2 00 00 	mov    0xd232(%rip),%r13        # ffffffff802274a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a276:	48 8b 05 2b d2 00 00 	mov    0xd22b(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a27d:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8021a281:	49 81 c5 ff 0f 00 00 	add    $0xfff,%r13
ffffffff8021a288:	49 81 e5 00 f0 ff ff 	and    $0xfffffffffffff000,%r13
ffffffff8021a28f:	4d 01 e5             	add    %r12,%r13
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a292:	48 85 c0             	test   %rax,%rax
ffffffff8021a295:	74 4d                	je     ffffffff8021a2e4 <__RME_Boot+0x754>
ffffffff8021a297:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a29e:	00 00 
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a2a0:	48 8b 0d 29 d2 00 00 	mov    0xd229(%rip),%rcx        # ffffffff802274d0 <RME_X64_Layout+0x10>
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a2a7:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021a2aa:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a2ad:	48 89 df             	mov    %rbx,%rdi
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a2b0:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021a2b4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a2b8:	48 03 83 d8 01 00 00 	add    0x1d8(%rbx),%rax
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a2bf:	be 07 00 00 00       	mov    $0x7,%esi
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff8021a2c4:	48 89 84 11 18 14 00 	mov    %rax,0x1418(%rcx,%rdx,1)
ffffffff8021a2cb:	00 
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a2cc:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a2cf:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff8021a2d3:	e8 e8 67 ff ff       	call   ffffffff80210ac0 <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a2d8:	48 8b 05 c9 d1 00 00 	mov    0xd1c9(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a2df:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a2e2:	72 bc                	jb     ffffffff8021a2a0 <__RME_Boot+0x710>
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a2e4:	4c 8b 05 bd d1 00 00 	mov    0xd1bd(%rip),%r8        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a2eb:	4c 89 e9             	mov    %r13,%rcx
ffffffff8021a2ee:	31 f6                	xor    %esi,%esi
ffffffff8021a2f0:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a2f3:	ba 03 00 00 00       	mov    $0x3,%edx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a2f8:	31 ed                	xor    %ebp,%ebp
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021a2fa:	e8 51 54 ff ff       	call   ffffffff8020f750 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a2ff:	4c 8b 25 a2 d1 00 00 	mov    0xd1a2(%rip),%r12        # ffffffff802274a8 <RME_X64_Num_CPU>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a306:	48 8b 05 9b d1 00 00 	mov    0xd19b(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff8021a30d:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021a311:	49 81 c4 ff 0f 00 00 	add    $0xfff,%r12
ffffffff8021a318:	49 81 e4 00 f0 ff ff 	and    $0xfffffffffffff000,%r12
ffffffff8021a31f:	4d 01 ec             	add    %r13,%r12
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a322:	48 85 c0             	test   %rax,%rax
ffffffff8021a325:	74 58                	je     ffffffff8021a37f <__RME_Boot+0x7ef>
ffffffff8021a327:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a32e:	00 00 
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff8021a330:	48 8b 15 99 d1 00 00 	mov    0xd199(%rip),%rdx        # ffffffff802274d0 <RME_X64_Layout+0x10>
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a337:	48 89 e8             	mov    %rbp,%rax
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a33a:	4d 89 e0             	mov    %r12,%r8
ffffffff8021a33d:	45 31 c9             	xor    %r9d,%r9d
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a340:	48 c1 e0 0d          	shl    $0xd,%rax
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a344:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8021a348:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff8021a34d:	48 89 df             	mov    %rbx,%rdi
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8021a350:	48 8d 84 02 00 14 00 	lea    0x1400(%rdx,%rax,1),%rax
ffffffff8021a357:	00 
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a358:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021a35d:	48 89 ea             	mov    %rbp,%rdx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a360:	48 83 c5 01          	add    $0x1,%rbp
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a364:	50                   	push   %rax
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_THD_SIZE(0U));
ffffffff8021a365:	49 81 c4 00 10 00 00 	add    $0x1000,%r12
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff8021a36c:	e8 6f 63 ff ff       	call   ffffffff802106e0 <_RME_Thd_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021a371:	48 8b 05 30 d1 00 00 	mov    0xd130(%rip),%rax        # ffffffff802274a8 <RME_X64_Num_CPU>
ffffffff8021a378:	5a                   	pop    %rdx
ffffffff8021a379:	59                   	pop    %rcx
ffffffff8021a37a:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021a37d:	72 b1                	jb     ffffffff8021a330 <__RME_Boot+0x7a0>
    RME_DBG_S("\r\nKot registration end offset: 0x");
ffffffff8021a37f:	48 c7 c7 78 ca 21 80 	mov    $0xffffffff8021ca78,%rdi
    RME_DBG_U(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff8021a386:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff8021a38d:	80 00 00 
    RME_DBG_S("\r\nKot registration end offset: 0x");
ffffffff8021a390:	e8 eb 3a ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff8021a395:	49 8d 3c 1c          	lea    (%r12,%rbx,1),%rdi
ffffffff8021a399:	48 c1 ef 07          	shr    $0x7,%rdi
ffffffff8021a39d:	e8 ee 38 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\r\nKom1 frontier: 0x");
ffffffff8021a3a2:	48 c7 c7 f4 cc 21 80 	mov    $0xffffffff8021ccf4,%rdi
ffffffff8021a3a9:	e8 d2 3a ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_U(Cur_Addr);
ffffffff8021a3ae:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021a3b1:	e8 da 38 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\r\nThread object size: ");
ffffffff8021a3b6:	48 c7 c7 08 cd 21 80 	mov    $0xffffffff8021cd08,%rdi
ffffffff8021a3bd:	e8 be 3a ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Thd_Struct)/sizeof(rme_ptr_t));
ffffffff8021a3c2:	bf 16 00 00 00       	mov    $0x16,%edi
ffffffff8021a3c7:	e8 c4 38 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\r\nInvocation object size: ");
ffffffff8021a3cc:	48 c7 c7 1f cd 21 80 	mov    $0xffffffff8021cd1f,%rdi
ffffffff8021a3d3:	e8 a8 3a ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Inv_Struct)/sizeof(rme_ptr_t));
ffffffff8021a3d8:	bf 09 00 00 00       	mov    $0x9,%edi
ffffffff8021a3dd:	e8 ae 38 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\r\nTimer init\r\n");
ffffffff8021a3e2:	48 c7 c7 3a cd 21 80 	mov    $0xffffffff8021cd3a,%rdi
ffffffff8021a3e9:	e8 92 3a ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    __RME_X64_Out(RME_X64_PIT_CMD,0x34);
ffffffff8021a3ee:	be 34 00 00 00       	mov    $0x34,%esi
ffffffff8021a3f3:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff8021a3f8:	e8 0d 14 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,(1193182/2/RME_X64_TIMER_FREQ)&0xFF);
ffffffff8021a3fd:	be 54 00 00 00       	mov    $0x54,%esi
ffffffff8021a402:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff8021a407:	e8 fe 13 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,((1193182/2/RME_X64_TIMER_FREQ)>>8)&0xFF);
ffffffff8021a40c:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff8021a411:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff8021a416:	e8 ef 13 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
     RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,CPUID<<24);
ffffffff8021a41b:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8021a422:	80 ff ff 
ffffffff8021a425:	c7 00 15 00 00 00    	movl   $0x15,(%rax)
ffffffff8021a42b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
    __RME_Pgt_Set(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff8021a432:	e8 08 14 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021a437:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a43b:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021a43f:	48 8b 40 30          	mov    0x30(%rax),%rax
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff8021a443:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8021a447:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a44a:	e8 5a 14 ff ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
    _RME_Memcpy(0,(void*)UVM_Init,RME_POW2(RME_PGT_SIZE_2M));
ffffffff8021a44f:	ba 00 00 20 00       	mov    $0x200000,%edx
ffffffff8021a454:	48 c7 c6 c0 b2 21 80 	mov    $0xffffffff8021b2c0,%rsi
ffffffff8021a45b:	31 ff                	xor    %edi,%edi
ffffffff8021a45d:	e8 0e 40 ff ff       	call   ffffffff8020e470 <_RME_Memcpy>
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff8021a462:	31 d2                	xor    %edx,%edx
ffffffff8021a464:	be 00 08 20 00       	mov    $0x200800,%esi
ffffffff8021a469:	31 ff                	xor    %edi,%edi
    RME_X64_CPU_Cnt=0;
ffffffff8021a46b:	48 c7 05 2a d0 00 00 	movq   $0x0,0xd02a(%rip)        # ffffffff802274a0 <RME_X64_CPU_Cnt>
ffffffff8021a472:	00 00 00 00 
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff8021a476:	e8 45 14 ff ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
}
ffffffff8021a47b:	48 83 c4 28          	add    $0x28,%rsp
ffffffff8021a47f:	31 c0                	xor    %eax,%eax
ffffffff8021a481:	5b                   	pop    %rbx
ffffffff8021a482:	5d                   	pop    %rbp
ffffffff8021a483:	41 5c                	pop    %r12
ffffffff8021a485:	41 5d                	pop    %r13
ffffffff8021a487:	41 5e                	pop    %r14
ffffffff8021a489:	41 5f                	pop    %r15
ffffffff8021a48b:	c3                   	ret
ffffffff8021a48c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8021a490 <__RME_Reboot>:
{
ffffffff8021a490:	f3 0f 1e fa          	endbr64
}
ffffffff8021a494:	c3                   	ret
ffffffff8021a495:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a49c:	00 00 00 00 

ffffffff8021a4a0 <__RME_Shutdown>:
void __RME_Shutdown(void)
ffffffff8021a4a0:	f3 0f 1e fa          	endbr64
ffffffff8021a4a4:	c3                   	ret
ffffffff8021a4a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a4ac:	00 00 00 00 

ffffffff8021a4b0 <__RME_Get_Syscall_Param>:
{
ffffffff8021a4b0:	f3 0f 1e fa          	endbr64
    *Svc=(Reg->RDI)>>32;
ffffffff8021a4b4:	8b 47 2c             	mov    0x2c(%rdi),%eax
ffffffff8021a4b7:	48 89 06             	mov    %rax,(%rsi)
    *Capid=(Reg->RDI)&0xFFFFFFFF;
ffffffff8021a4ba:	8b 47 28             	mov    0x28(%rdi),%eax
ffffffff8021a4bd:	48 89 02             	mov    %rax,(%rdx)
    Param[0]=Reg->RSI;
ffffffff8021a4c0:	48 8b 47 20          	mov    0x20(%rdi),%rax
ffffffff8021a4c4:	48 89 01             	mov    %rax,(%rcx)
    Param[1]=Reg->RDX;
ffffffff8021a4c7:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8021a4cb:	48 89 41 08          	mov    %rax,0x8(%rcx)
    Param[2]=Reg->R8;
ffffffff8021a4cf:	48 8b 47 38          	mov    0x38(%rdi),%rax
ffffffff8021a4d3:	48 89 41 10          	mov    %rax,0x10(%rcx)
}
ffffffff8021a4d7:	c3                   	ret
ffffffff8021a4d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a4df:	00 

ffffffff8021a4e0 <__RME_Set_Syscall_Retval>:
{
ffffffff8021a4e0:	f3 0f 1e fa          	endbr64
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff8021a4e4:	48 89 37             	mov    %rsi,(%rdi)
}
ffffffff8021a4e7:	c3                   	ret
ffffffff8021a4e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a4ef:	00 

ffffffff8021a4f0 <__RME_Thd_Reg_Init>:
{
ffffffff8021a4f0:	f3 0f 1e fa          	endbr64
    Reg->INT_NUM=0x10000;
ffffffff8021a4f4:	66 0f 6f 05 f4 2f 00 	movdqa 0x2ff4(%rip),%xmm0        # ffffffff8021d4f0 <Table.1+0x230>
ffffffff8021a4fb:	00 
    Reg->RDI=Param;
ffffffff8021a4fc:	49 89 48 28          	mov    %rcx,0x28(%r8)
    Reg->RIP=Entry;
ffffffff8021a500:	49 89 b0 88 00 00 00 	mov    %rsi,0x88(%r8)
    Reg->CS=RME_X64_SEG_USER_CODE;
ffffffff8021a507:	49 c7 80 90 00 00 00 	movq   $0x2b,0x90(%r8)
ffffffff8021a50e:	2b 00 00 00 
    Reg->RFLAGS=0x3200;
ffffffff8021a512:	49 c7 80 98 00 00 00 	movq   $0x3200,0x98(%r8)
ffffffff8021a519:	00 32 00 00 
    Reg->RSP=Stack;
ffffffff8021a51d:	49 89 90 a0 00 00 00 	mov    %rdx,0xa0(%r8)
    Reg->SS=RME_X64_SEG_USER_DATA;
ffffffff8021a524:	49 c7 80 a8 00 00 00 	movq   $0x23,0xa8(%r8)
ffffffff8021a52b:	23 00 00 00 
    Reg->INT_NUM=0x10000;
ffffffff8021a52f:	41 0f 11 40 78       	movups %xmm0,0x78(%r8)
}
ffffffff8021a534:	c3                   	ret
ffffffff8021a535:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a53c:	00 00 00 00 

ffffffff8021a540 <__RME_Thd_Reg_Copy>:
{
ffffffff8021a540:	f3 0f 1e fa          	endbr64
    Dst->RAX=Src->RAX;
ffffffff8021a544:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff8021a547:	48 89 0f             	mov    %rcx,(%rdi)
    Dst->RBX=Src->RBX;
ffffffff8021a54a:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
ffffffff8021a54e:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
    Dst->RCX=Src->RCX;
ffffffff8021a552:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
ffffffff8021a556:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
    Dst->RDX=Src->RDX;
ffffffff8021a55a:	48 8b 4e 18          	mov    0x18(%rsi),%rcx
ffffffff8021a55e:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
    Dst->RSI=Src->RSI;
ffffffff8021a562:	48 8b 4e 20          	mov    0x20(%rsi),%rcx
ffffffff8021a566:	48 89 4f 20          	mov    %rcx,0x20(%rdi)
    Dst->RDI=Src->RDI;
ffffffff8021a56a:	48 8b 4e 28          	mov    0x28(%rsi),%rcx
ffffffff8021a56e:	48 89 4f 28          	mov    %rcx,0x28(%rdi)
    Dst->RBP=Src->RBP;
ffffffff8021a572:	48 8b 4e 30          	mov    0x30(%rsi),%rcx
ffffffff8021a576:	48 89 4f 30          	mov    %rcx,0x30(%rdi)
    Dst->R8=Src->R8;
ffffffff8021a57a:	48 8b 4e 38          	mov    0x38(%rsi),%rcx
ffffffff8021a57e:	48 89 4f 38          	mov    %rcx,0x38(%rdi)
    Dst->R9=Src->R9;
ffffffff8021a582:	48 8b 4e 40          	mov    0x40(%rsi),%rcx
ffffffff8021a586:	48 89 4f 40          	mov    %rcx,0x40(%rdi)
    Dst->R10=Src->R10;
ffffffff8021a58a:	48 8b 4e 48          	mov    0x48(%rsi),%rcx
ffffffff8021a58e:	48 89 4f 48          	mov    %rcx,0x48(%rdi)
    Dst->R11=Src->R11;
ffffffff8021a592:	48 8b 4e 50          	mov    0x50(%rsi),%rcx
ffffffff8021a596:	48 89 4f 50          	mov    %rcx,0x50(%rdi)
    Dst->R12=Src->R12;
ffffffff8021a59a:	48 8b 4e 58          	mov    0x58(%rsi),%rcx
ffffffff8021a59e:	48 89 4f 58          	mov    %rcx,0x58(%rdi)
    Dst->R13=Src->R13;
ffffffff8021a5a2:	48 8b 4e 60          	mov    0x60(%rsi),%rcx
ffffffff8021a5a6:	48 89 4f 60          	mov    %rcx,0x60(%rdi)
    Dst->R14=Src->R14;
ffffffff8021a5aa:	48 8b 4e 68          	mov    0x68(%rsi),%rcx
ffffffff8021a5ae:	48 89 4f 68          	mov    %rcx,0x68(%rdi)
    Dst->R15=Src->R15;
ffffffff8021a5b2:	48 8b 4e 70          	mov    0x70(%rsi),%rcx
ffffffff8021a5b6:	48 89 4f 70          	mov    %rcx,0x70(%rdi)
    Dst->INT_NUM=Src->INT_NUM;
ffffffff8021a5ba:	48 8b 4e 78          	mov    0x78(%rsi),%rcx
ffffffff8021a5be:	48 89 4f 78          	mov    %rcx,0x78(%rdi)
    Dst->ERROR_CODE=Src->ERROR_CODE;
ffffffff8021a5c2:	48 8b 8e 80 00 00 00 	mov    0x80(%rsi),%rcx
ffffffff8021a5c9:	48 89 8f 80 00 00 00 	mov    %rcx,0x80(%rdi)
    Dst->RIP=Src->RIP;
ffffffff8021a5d0:	48 8b 8e 88 00 00 00 	mov    0x88(%rsi),%rcx
ffffffff8021a5d7:	48 89 8f 88 00 00 00 	mov    %rcx,0x88(%rdi)
    Dst->CS=Src->CS;
ffffffff8021a5de:	48 8b 8e 90 00 00 00 	mov    0x90(%rsi),%rcx
ffffffff8021a5e5:	48 89 8f 90 00 00 00 	mov    %rcx,0x90(%rdi)
    Dst->RFLAGS=Src->RFLAGS;
ffffffff8021a5ec:	48 8b 8e 98 00 00 00 	mov    0x98(%rsi),%rcx
ffffffff8021a5f3:	48 89 8f 98 00 00 00 	mov    %rcx,0x98(%rdi)
    Dst->RSP=Src->RSP;
ffffffff8021a5fa:	48 8b 8e a0 00 00 00 	mov    0xa0(%rsi),%rcx
ffffffff8021a601:	48 89 8f a0 00 00 00 	mov    %rcx,0xa0(%rdi)
    Dst->SS=Src->SS;
ffffffff8021a608:	48 8b 96 a8 00 00 00 	mov    0xa8(%rsi),%rdx
ffffffff8021a60f:	48 89 97 a8 00 00 00 	mov    %rdx,0xa8(%rdi)
}
ffffffff8021a616:	c3                   	ret
ffffffff8021a617:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021a61e:	00 00 

ffffffff8021a620 <__RME_Thd_Cop_Init>:
void __RME_Thd_Cop_Init(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021a620:	f3 0f 1e fa          	endbr64
ffffffff8021a624:	c3                   	ret
ffffffff8021a625:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a62c:	00 00 00 00 

ffffffff8021a630 <__RME_Thd_Cop_Save>:
void __RME_Thd_Cop_Save(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021a630:	f3 0f 1e fa          	endbr64
ffffffff8021a634:	c3                   	ret
ffffffff8021a635:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a63c:	00 00 00 00 

ffffffff8021a640 <__RME_Thd_Cop_Restore>:
void __RME_Thd_Cop_Restore(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
ffffffff8021a640:	f3 0f 1e fa          	endbr64
ffffffff8021a644:	c3                   	ret
ffffffff8021a645:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a64c:	00 00 00 00 

ffffffff8021a650 <__RME_Inv_Reg_Save>:
{
ffffffff8021a650:	f3 0f 1e fa          	endbr64
    Ret->RIP=Reg->RIP;
ffffffff8021a654:	48 8b 86 88 00 00 00 	mov    0x88(%rsi),%rax
ffffffff8021a65b:	48 89 07             	mov    %rax,(%rdi)
    Ret->RSP=Reg->RSP;
ffffffff8021a65e:	48 8b 86 a0 00 00 00 	mov    0xa0(%rsi),%rax
ffffffff8021a665:	48 89 47 08          	mov    %rax,0x8(%rdi)
}
ffffffff8021a669:	c3                   	ret
ffffffff8021a66a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021a670 <__RME_Inv_Reg_Restore>:
{
ffffffff8021a670:	f3 0f 1e fa          	endbr64
    Reg->RIP=Ret->RIP;
ffffffff8021a674:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021a677:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
    Reg->RSP=Ret->RSP;
ffffffff8021a67e:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff8021a682:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
}
ffffffff8021a689:	c3                   	ret
ffffffff8021a68a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021a690 <__RME_Set_Inv_Retval>:
{
ffffffff8021a690:	f3 0f 1e fa          	endbr64
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff8021a694:	48 89 77 28          	mov    %rsi,0x28(%rdi)
}
ffffffff8021a698:	c3                   	ret
ffffffff8021a699:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021a6a0 <write_string>:
{
ffffffff8021a6a0:	f3 0f 1e fa          	endbr64
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021a6a4:	48 b8 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rax
ffffffff8021a6ab:	80 ff ff 
ffffffff8021a6ae:	48 01 c2             	add    %rax,%rdx
    while( *string != 0 )
ffffffff8021a6b1:	0f b6 06             	movzbl (%rsi),%eax
ffffffff8021a6b4:	84 c0                	test   %al,%al
ffffffff8021a6b6:	74 20                	je     ffffffff8021a6d8 <write_string+0x38>
ffffffff8021a6b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a6bf:	00 
        *video++ = *string++;
ffffffff8021a6c0:	88 02                	mov    %al,(%rdx)
ffffffff8021a6c2:	48 83 c6 01          	add    $0x1,%rsi
        *video++ = colour;
ffffffff8021a6c6:	48 89 d0             	mov    %rdx,%rax
ffffffff8021a6c9:	48 83 c2 02          	add    $0x2,%rdx
ffffffff8021a6cd:	40 88 78 01          	mov    %dil,0x1(%rax)
    while( *string != 0 )
ffffffff8021a6d1:	0f b6 06             	movzbl (%rsi),%eax
ffffffff8021a6d4:	84 c0                	test   %al,%al
ffffffff8021a6d6:	75 e8                	jne    ffffffff8021a6c0 <write_string+0x20>
}
ffffffff8021a6d8:	c3                   	ret
ffffffff8021a6d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021a6e0 <NDBG>:
{
ffffffff8021a6e0:	f3 0f 1e fa          	endbr64
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021a6e4:	48 b8 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rax
ffffffff8021a6eb:	80 ff ff 
    while( *string != 0 )
ffffffff8021a6ee:	b9 48 00 00 00       	mov    $0x48,%ecx
ffffffff8021a6f3:	48 c7 c2 49 cd 21 80 	mov    $0xffffffff8021cd49,%rdx
ffffffff8021a6fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        *video++ = *string++;
ffffffff8021a700:	88 08                	mov    %cl,(%rax)
ffffffff8021a702:	48 83 c2 01          	add    $0x1,%rdx
        *video++ = colour;
ffffffff8021a706:	48 89 c1             	mov    %rax,%rcx
ffffffff8021a709:	48 83 c0 02          	add    $0x2,%rax
ffffffff8021a70d:	c6 41 01 07          	movb   $0x7,0x1(%rcx)
    while( *string != 0 )
ffffffff8021a711:	0f b6 0a             	movzbl (%rdx),%ecx
ffffffff8021a714:	84 c9                	test   %cl,%cl
ffffffff8021a716:	75 e8                	jne    ffffffff8021a700 <NDBG+0x20>
}
ffffffff8021a718:	c3                   	ret
ffffffff8021a719:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021a720 <__RME_Kern_Func_Handler>:
{
ffffffff8021a720:	f3 0f 1e fa          	endbr64
    String[0]=Param1/10000000+'0';
ffffffff8021a724:	48 b8 bd 42 7a e5 d5 	movabs $0xd6bf94d5e57a42bd,%rax
ffffffff8021a72b:	94 bf d6 
{
ffffffff8021a72e:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021a731:	41 55                	push   %r13
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a733:	4d 89 c2             	mov    %r8,%r10
    String[0]=Param1/10000000+'0';
ffffffff8021a736:	49 f7 e0             	mul    %r8
{
ffffffff8021a739:	41 54                	push   %r12
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a73b:	49 c1 ea 05          	shr    $0x5,%r10
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a73f:	48 b8 db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rax
ffffffff8021a746:	de 1b 43 
ffffffff8021a749:	49 bc cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r12
ffffffff8021a750:	cc cc cc 
{
ffffffff8021a753:	55                   	push   %rbp
    String[5]=(Param1/100)%10+'0';
ffffffff8021a754:	4c 89 c5             	mov    %r8,%rbp
{
ffffffff8021a757:	53                   	push   %rbx
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a758:	4c 89 c3             	mov    %r8,%rbx
    String[5]=(Param1/100)%10+'0';
ffffffff8021a75b:	48 c1 ed 02          	shr    $0x2,%rbp
    String[0]=Param1/10000000+'0';
ffffffff8021a75f:	48 89 d7             	mov    %rdx,%rdi
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a762:	49 f7 e0             	mul    %r8
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a765:	48 c1 eb 03          	shr    $0x3,%rbx
    String[0]=Param1/10000000+'0';
ffffffff8021a769:	48 c1 ef 17          	shr    $0x17,%rdi
{
ffffffff8021a76d:	48 83 ec 18          	sub    $0x18,%rsp
    String[0]=Param1/10000000+'0';
ffffffff8021a771:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff8021a775:	f3 0f 7e 05 4b 30 00 	movq   0x304b(%rip),%xmm0        # ffffffff8021d7c8 <RME_X64_Pgflg_RME2NAT+0x108>
ffffffff8021a77c:	00 
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a77d:	49 89 d1             	mov    %rdx,%r9
    String[8]='\0';
ffffffff8021a780:	c6 44 24 08 00       	movb   $0x0,0x8(%rsp)
    String[1]=(Param1/1000000)%10+'0';
ffffffff8021a785:	49 c1 e9 12          	shr    $0x12,%r9
ffffffff8021a789:	4c 89 c8             	mov    %r9,%rax
ffffffff8021a78c:	49 f7 e4             	mul    %r12
ffffffff8021a78f:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a793:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a797:	48 01 c0             	add    %rax,%rax
ffffffff8021a79a:	49 29 c1             	sub    %rax,%r9
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a79d:	48 b8 43 78 b4 71 c4 	movabs $0xa7c5ac471b47843,%rax
ffffffff8021a7a4:	5a 7c 0a 
ffffffff8021a7a7:	49 f7 e2             	mul    %r10
    String[0]=Param1/10000000+'0';
ffffffff8021a7aa:	45 0f b6 c9          	movzbl %r9b,%r9d
    String[2]=(Param1/100000)%10+'0';
ffffffff8021a7ae:	49 89 d2             	mov    %rdx,%r10
ffffffff8021a7b1:	49 c1 ea 07          	shr    $0x7,%r10
ffffffff8021a7b5:	4c 89 d0             	mov    %r10,%rax
ffffffff8021a7b8:	49 f7 e4             	mul    %r12
ffffffff8021a7bb:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a7bf:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a7c3:	48 01 c0             	add    %rax,%rax
ffffffff8021a7c6:	49 29 c2             	sub    %rax,%r10
    String[3]=(Param1/10000)%10+'0';
ffffffff8021a7c9:	48 b8 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rax
ffffffff8021a7d0:	c5 6d 34 
ffffffff8021a7d3:	49 f7 e0             	mul    %r8
    String[0]=Param1/10000000+'0';
ffffffff8021a7d6:	45 0f b6 d2          	movzbl %r10b,%r10d
    String[3]=(Param1/10000)%10+'0';
ffffffff8021a7da:	49 89 d3             	mov    %rdx,%r11
ffffffff8021a7dd:	49 c1 eb 0b          	shr    $0xb,%r11
ffffffff8021a7e1:	4c 89 d8             	mov    %r11,%rax
ffffffff8021a7e4:	49 f7 e4             	mul    %r12
ffffffff8021a7e7:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a7eb:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a7ef:	48 01 c0             	add    %rax,%rax
ffffffff8021a7f2:	49 29 c3             	sub    %rax,%r11
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a7f5:	48 b8 cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rax
ffffffff8021a7fc:	9b c4 20 
ffffffff8021a7ff:	48 f7 e3             	mul    %rbx
    String[0]=Param1/10000000+'0';
ffffffff8021a802:	45 0f b6 db          	movzbl %r11b,%r11d
    String[4]=(Param1/1000)%10+'0';
ffffffff8021a806:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021a809:	48 c1 eb 04          	shr    $0x4,%rbx
ffffffff8021a80d:	48 89 d8             	mov    %rbx,%rax
ffffffff8021a810:	49 f7 e4             	mul    %r12
ffffffff8021a813:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a817:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a81b:	48 01 c0             	add    %rax,%rax
ffffffff8021a81e:	48 29 c3             	sub    %rax,%rbx
    String[5]=(Param1/100)%10+'0';
ffffffff8021a821:	48 b8 c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rax
ffffffff8021a828:	c2 f5 28 
ffffffff8021a82b:	48 f7 e5             	mul    %rbp
    String[0]=Param1/10000000+'0';
ffffffff8021a82e:	0f b6 db             	movzbl %bl,%ebx
    String[5]=(Param1/100)%10+'0';
ffffffff8021a831:	48 89 d5             	mov    %rdx,%rbp
ffffffff8021a834:	48 c1 ed 02          	shr    $0x2,%rbp
ffffffff8021a838:	48 89 e8             	mov    %rbp,%rax
ffffffff8021a83b:	49 f7 e4             	mul    %r12
ffffffff8021a83e:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a842:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a846:	48 01 c0             	add    %rax,%rax
ffffffff8021a849:	48 29 c5             	sub    %rax,%rbp
    String[6]=(Param1/10)%10+'0';
ffffffff8021a84c:	4c 89 c0             	mov    %r8,%rax
ffffffff8021a84f:	49 f7 e4             	mul    %r12
    String[0]=Param1/10000000+'0';
ffffffff8021a852:	40 0f b6 ed          	movzbl %bpl,%ebp
    String[6]=(Param1/10)%10+'0';
ffffffff8021a856:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a85a:	48 89 d0             	mov    %rdx,%rax
ffffffff8021a85d:	49 89 d5             	mov    %rdx,%r13
ffffffff8021a860:	49 f7 e4             	mul    %r12
ffffffff8021a863:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8021a867:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
ffffffff8021a86b:	4c 89 ea             	mov    %r13,%rdx
ffffffff8021a86e:	48 01 c0             	add    %rax,%rax
ffffffff8021a871:	48 29 c2             	sub    %rax,%rdx
    String[7]=(Param1)%10+'0';
ffffffff8021a874:	4b 8d 44 ad 00       	lea    0x0(%r13,%r13,4),%rax
ffffffff8021a879:	48 01 c0             	add    %rax,%rax
    String[0]=Param1/10000000+'0';
ffffffff8021a87c:	0f b6 d2             	movzbl %dl,%edx
    String[7]=(Param1)%10+'0';
ffffffff8021a87f:	49 29 c0             	sub    %rax,%r8
    String[0]=Param1/10000000+'0';
ffffffff8021a882:	41 0f b6 c0          	movzbl %r8b,%eax
ffffffff8021a886:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021a88a:	48 09 d0             	or     %rdx,%rax
ffffffff8021a88d:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021a891:	48 09 e8             	or     %rbp,%rax
ffffffff8021a894:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021a898:	48 09 d8             	or     %rbx,%rax
ffffffff8021a89b:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021a89f:	4c 09 d8             	or     %r11,%rax
ffffffff8021a8a2:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021a8a6:	4c 09 d0             	or     %r10,%rax
ffffffff8021a8a9:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021a8ad:	4c 09 c8             	or     %r9,%rax
ffffffff8021a8b0:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8021a8b4:	48 09 f8             	or     %rdi,%rax
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021a8b7:	48 bf 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rdi
ffffffff8021a8be:	80 ff ff 
    String[0]=Param1/10000000+'0';
ffffffff8021a8c1:	66 48 0f 6e c8       	movq   %rax,%xmm1
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff8021a8c6:	48 01 f9             	add    %rdi,%rcx
    String[0]=Param1/10000000+'0';
ffffffff8021a8c9:	66 0f fc c1          	paddb  %xmm1,%xmm0
ffffffff8021a8cd:	66 48 0f 7e c2       	movq   %xmm0,%rdx
ffffffff8021a8d2:	66 0f d6 04 24       	movq   %xmm0,(%rsp)
    while( *string != 0 )
ffffffff8021a8d7:	84 d2                	test   %dl,%dl
ffffffff8021a8d9:	74 1d                	je     ffffffff8021a8f8 <__RME_Kern_Func_Handler+0x1d8>
ffffffff8021a8db:	89 d0                	mov    %edx,%eax
        *video++ = colour;
ffffffff8021a8dd:	48 89 e2             	mov    %rsp,%rdx
        *video++ = *string++;
ffffffff8021a8e0:	88 01                	mov    %al,(%rcx)
ffffffff8021a8e2:	48 83 c2 01          	add    $0x1,%rdx
        *video++ = colour;
ffffffff8021a8e6:	48 89 c8             	mov    %rcx,%rax
ffffffff8021a8e9:	48 83 c1 02          	add    $0x2,%rcx
ffffffff8021a8ed:	40 88 70 01          	mov    %sil,0x1(%rax)
    while( *string != 0 )
ffffffff8021a8f1:	0f b6 02             	movzbl (%rdx),%eax
ffffffff8021a8f4:	84 c0                	test   %al,%al
ffffffff8021a8f6:	75 e8                	jne    ffffffff8021a8e0 <__RME_Kern_Func_Handler+0x1c0>
}
ffffffff8021a8f8:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021a8fc:	31 c0                	xor    %eax,%eax
ffffffff8021a8fe:	5b                   	pop    %rbx
ffffffff8021a8ff:	5d                   	pop    %rbp
ffffffff8021a900:	41 5c                	pop    %r12
ffffffff8021a902:	41 5d                	pop    %r13
ffffffff8021a904:	c3                   	ret
ffffffff8021a905:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021a90c:	00 00 00 00 

ffffffff8021a910 <__RME_X64_Fault_Handler>:
{
ffffffff8021a910:	f3 0f 1e fa          	endbr64
ffffffff8021a914:	55                   	push   %rbp
ffffffff8021a915:	48 89 f5             	mov    %rsi,%rbp
ffffffff8021a918:	53                   	push   %rbx
ffffffff8021a919:	48 89 fb             	mov    %rdi,%rbx
    RME_DBG_S("\n\r\n\r*** Fault: ");RME_DBG_I(Reason);RME_DBG_S(" - ");
ffffffff8021a91c:	48 c7 c7 4e cd 21 80 	mov    $0xffffffff8021cd4e,%rdi
{
ffffffff8021a923:	48 83 ec 08          	sub    $0x8,%rsp
    RME_DBG_S("\n\r\n\r*** Fault: ");RME_DBG_I(Reason);RME_DBG_S(" - ");
ffffffff8021a927:	e8 54 35 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021a92c:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021a92f:	e8 5c 33 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
ffffffff8021a934:	48 c7 c7 5e cd 21 80 	mov    $0xffffffff8021cd5e,%rdi
ffffffff8021a93b:	e8 40 35 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    switch(Reason)
ffffffff8021a940:	48 83 fd 14          	cmp    $0x14,%rbp
ffffffff8021a944:	0f 87 44 03 00 00    	ja     ffffffff8021ac8e <__RME_X64_Fault_Handler+0x37e>
ffffffff8021a94a:	3e ff 24 ed 00 d5 21 	notrack jmp *-0x7fde2b00(,%rbp,8)
ffffffff8021a951:	80 
        case RME_X64_FAULT_VE:RME_DBG_S("Virtualization exception");break;
ffffffff8021a952:	48 c7 c7 ce ce 21 80 	mov    $0xffffffff8021cece,%rdi
ffffffff8021a959:	e8 22 35 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_S("\n\rRAX:        0x");RME_DBG_U(Reg->RAX);
ffffffff8021a95e:	48 c7 c7 f9 ce 21 80 	mov    $0xffffffff8021cef9,%rdi
ffffffff8021a965:	e8 16 35 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021a96a:	48 8b 3b             	mov    (%rbx),%rdi
ffffffff8021a96d:	e8 1e 33 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rRBX:        0x");RME_DBG_U(Reg->RBX);
ffffffff8021a972:	48 c7 c7 0a cf 21 80 	mov    $0xffffffff8021cf0a,%rdi
ffffffff8021a979:	e8 02 35 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021a97e:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
ffffffff8021a982:	e8 09 33 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rRCX:        0x");RME_DBG_U(Reg->RCX);
ffffffff8021a987:	48 c7 c7 1b cf 21 80 	mov    $0xffffffff8021cf1b,%rdi
ffffffff8021a98e:	e8 ed 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021a993:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff8021a997:	e8 f4 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rRDX:        0x");RME_DBG_U(Reg->RDX);
ffffffff8021a99c:	48 c7 c7 2c cf 21 80 	mov    $0xffffffff8021cf2c,%rdi
ffffffff8021a9a3:	e8 d8 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021a9a8:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff8021a9ac:	e8 df 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rRSI:        0x");RME_DBG_U(Reg->RSI);
ffffffff8021a9b1:	48 c7 c7 3d cf 21 80 	mov    $0xffffffff8021cf3d,%rdi
ffffffff8021a9b8:	e8 c3 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021a9bd:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
ffffffff8021a9c1:	e8 ca 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rRDI:        0x");RME_DBG_U(Reg->RDI);
ffffffff8021a9c6:	48 c7 c7 4e cf 21 80 	mov    $0xffffffff8021cf4e,%rdi
ffffffff8021a9cd:	e8 ae 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021a9d2:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
ffffffff8021a9d6:	e8 b5 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rRBP:        0x");RME_DBG_U(Reg->RBP);
ffffffff8021a9db:	48 c7 c7 5f cf 21 80 	mov    $0xffffffff8021cf5f,%rdi
ffffffff8021a9e2:	e8 99 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021a9e7:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
ffffffff8021a9eb:	e8 a0 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rR8:         0x");RME_DBG_U(Reg->R8);
ffffffff8021a9f0:	48 c7 c7 70 cf 21 80 	mov    $0xffffffff8021cf70,%rdi
ffffffff8021a9f7:	e8 84 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021a9fc:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
ffffffff8021aa00:	e8 8b 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rR9:         0x");RME_DBG_U(Reg->R9);
ffffffff8021aa05:	48 c7 c7 81 cf 21 80 	mov    $0xffffffff8021cf81,%rdi
ffffffff8021aa0c:	e8 6f 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021aa11:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
ffffffff8021aa15:	e8 76 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rR10:        0x");RME_DBG_U(Reg->R10);
ffffffff8021aa1a:	48 c7 c7 92 cf 21 80 	mov    $0xffffffff8021cf92,%rdi
ffffffff8021aa21:	e8 5a 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021aa26:	48 8b 7b 48          	mov    0x48(%rbx),%rdi
ffffffff8021aa2a:	e8 61 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rR11:        0x");RME_DBG_U(Reg->R11);
ffffffff8021aa2f:	48 c7 c7 a3 cf 21 80 	mov    $0xffffffff8021cfa3,%rdi
ffffffff8021aa36:	e8 45 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021aa3b:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
ffffffff8021aa3f:	e8 4c 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rR12:        0x");RME_DBG_U(Reg->R12);
ffffffff8021aa44:	48 c7 c7 b4 cf 21 80 	mov    $0xffffffff8021cfb4,%rdi
ffffffff8021aa4b:	e8 30 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021aa50:	48 8b 7b 58          	mov    0x58(%rbx),%rdi
ffffffff8021aa54:	e8 37 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rR13:        0x");RME_DBG_U(Reg->R13);
ffffffff8021aa59:	48 c7 c7 c5 cf 21 80 	mov    $0xffffffff8021cfc5,%rdi
ffffffff8021aa60:	e8 1b 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021aa65:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
ffffffff8021aa69:	e8 22 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rR14:        0x");RME_DBG_U(Reg->R14);
ffffffff8021aa6e:	48 c7 c7 d6 cf 21 80 	mov    $0xffffffff8021cfd6,%rdi
ffffffff8021aa75:	e8 06 34 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021aa7a:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
ffffffff8021aa7e:	e8 0d 32 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rR15:        0x");RME_DBG_U(Reg->R15);
ffffffff8021aa83:	48 c7 c7 e7 cf 21 80 	mov    $0xffffffff8021cfe7,%rdi
ffffffff8021aa8a:	e8 f1 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021aa8f:	48 8b 7b 70          	mov    0x70(%rbx),%rdi
ffffffff8021aa93:	e8 f8 31 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rINT_NUM:    0x");RME_DBG_U(Reg->INT_NUM);
ffffffff8021aa98:	48 c7 c7 f8 cf 21 80 	mov    $0xffffffff8021cff8,%rdi
ffffffff8021aa9f:	e8 dc 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021aaa4:	48 8b 7b 78          	mov    0x78(%rbx),%rdi
ffffffff8021aaa8:	e8 e3 31 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rERROR_CODE: 0x");RME_DBG_U(Reg->ERROR_CODE);
ffffffff8021aaad:	48 c7 c7 09 d0 21 80 	mov    $0xffffffff8021d009,%rdi
ffffffff8021aab4:	e8 c7 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021aab9:	48 8b bb 80 00 00 00 	mov    0x80(%rbx),%rdi
ffffffff8021aac0:	e8 cb 31 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rRIP:        0x");RME_DBG_U(Reg->RIP);
ffffffff8021aac5:	48 c7 c7 1a d0 21 80 	mov    $0xffffffff8021d01a,%rdi
ffffffff8021aacc:	e8 af 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021aad1:	48 8b bb 88 00 00 00 	mov    0x88(%rbx),%rdi
ffffffff8021aad8:	e8 b3 31 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rCS:         0x");RME_DBG_U(Reg->CS);
ffffffff8021aadd:	48 c7 c7 2b d0 21 80 	mov    $0xffffffff8021d02b,%rdi
ffffffff8021aae4:	e8 97 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021aae9:	48 8b bb 90 00 00 00 	mov    0x90(%rbx),%rdi
ffffffff8021aaf0:	e8 9b 31 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rRFLAGS:     0x");RME_DBG_U(Reg->RFLAGS);
ffffffff8021aaf5:	48 c7 c7 3c d0 21 80 	mov    $0xffffffff8021d03c,%rdi
ffffffff8021aafc:	e8 7f 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ab01:	48 8b bb 98 00 00 00 	mov    0x98(%rbx),%rdi
ffffffff8021ab08:	e8 83 31 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rRSP:        0x");RME_DBG_U(Reg->RSP);
ffffffff8021ab0d:	48 c7 c7 4d d0 21 80 	mov    $0xffffffff8021d04d,%rdi
ffffffff8021ab14:	e8 67 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ab19:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
ffffffff8021ab20:	e8 6b 31 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rSS:         0x");RME_DBG_U(Reg->SS);
ffffffff8021ab25:	48 c7 c7 5e d0 21 80 	mov    $0xffffffff8021d05e,%rdi
ffffffff8021ab2c:	e8 4f 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ab31:	48 8b bb a8 00 00 00 	mov    0xa8(%rbx),%rdi
ffffffff8021ab38:	e8 53 31 ff ff       	call   ffffffff8020dc90 <RME_Int_Print>
    RME_DBG_S("\n\rHang");
ffffffff8021ab3d:	48 c7 c7 6f d0 21 80 	mov    $0xffffffff8021d06f,%rdi
ffffffff8021ab44:	e8 37 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    while(1);
ffffffff8021ab49:	eb fe                	jmp    ffffffff8021ab49 <__RME_X64_Fault_Handler+0x239>
        case RME_X64_FAULT_XM:RME_DBG_S("SIMD floating-point exception");break;
ffffffff8021ab4b:	48 c7 c7 b0 ce 21 80 	mov    $0xffffffff8021ceb0,%rdi
ffffffff8021ab52:	e8 29 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ab57:	e9 02 fe ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_ABORT_MC:RME_DBG_S("Machine check exception");break;
ffffffff8021ab5c:	48 c7 c7 98 ce 21 80 	mov    $0xffffffff8021ce98,%rdi
ffffffff8021ab63:	e8 18 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ab68:	e9 f1 fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_AC:RME_DBG_S("Alignment check exception");break;
ffffffff8021ab6d:	48 c7 c7 7e ce 21 80 	mov    $0xffffffff8021ce7e,%rdi
ffffffff8021ab74:	e8 07 33 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ab79:	e9 e0 fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_MF:RME_DBG_S("X87 FPU floating-point error:");break;
ffffffff8021ab7e:	48 c7 c7 60 ce 21 80 	mov    $0xffffffff8021ce60,%rdi
ffffffff8021ab85:	e8 f6 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ab8a:	e9 cf fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_PF:RME_DBG_S("Page fault exception");break;
ffffffff8021ab8f:	48 c7 c7 4b ce 21 80 	mov    $0xffffffff8021ce4b,%rdi
ffffffff8021ab96:	e8 e5 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ab9b:	e9 be fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_GP:RME_DBG_S("General protection exception");break;
ffffffff8021aba0:	48 c7 c7 2e ce 21 80 	mov    $0xffffffff8021ce2e,%rdi
ffffffff8021aba7:	e8 d4 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021abac:	e9 ad fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_SS:RME_DBG_S("Stack fault exception");break;
ffffffff8021abb1:	48 c7 c7 18 ce 21 80 	mov    $0xffffffff8021ce18,%rdi
ffffffff8021abb8:	e8 c3 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021abbd:	e9 9c fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_NP:RME_DBG_S("Segment not present");break;
ffffffff8021abc2:	48 c7 c7 04 ce 21 80 	mov    $0xffffffff8021ce04,%rdi
ffffffff8021abc9:	e8 b2 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021abce:	e9 8b fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_TS:RME_DBG_S("Invalid TSS exception");break;
ffffffff8021abd3:	48 c7 c7 ee cd 21 80 	mov    $0xffffffff8021cdee,%rdi
ffffffff8021abda:	e8 a1 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021abdf:	e9 7a fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_ABORT_OLD_MF:RME_DBG_S("Coprocessor overrun - not used later on");break;
ffffffff8021abe4:	48 c7 c7 c0 ca 21 80 	mov    $0xffffffff8021cac0,%rdi
ffffffff8021abeb:	e8 90 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021abf0:	e9 69 fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_ABORT_DF:RME_DBG_S("Double(nested) fault exception");break;
ffffffff8021abf5:	48 c7 c7 a0 ca 21 80 	mov    $0xffffffff8021caa0,%rdi
ffffffff8021abfc:	e8 7f 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ac01:	e9 58 fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_NM:RME_DBG_S("Device not available");break;
ffffffff8021ac06:	48 c7 c7 d9 cd 21 80 	mov    $0xffffffff8021cdd9,%rdi
ffffffff8021ac0d:	e8 6e 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ac12:	e9 47 fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_UD:RME_DBG_S("Undefined instruction");break;
ffffffff8021ac17:	48 c7 c7 c3 cd 21 80 	mov    $0xffffffff8021cdc3,%rdi
ffffffff8021ac1e:	e8 5d 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ac23:	e9 36 fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_BR:RME_DBG_S("Bound range exception");break;
ffffffff8021ac28:	48 c7 c7 ad cd 21 80 	mov    $0xffffffff8021cdad,%rdi
ffffffff8021ac2f:	e8 4c 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ac34:	e9 25 fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_TRAP_OF:RME_DBG_S("Overflow exception");break;
ffffffff8021ac39:	48 c7 c7 9a cd 21 80 	mov    $0xffffffff8021cd9a,%rdi
ffffffff8021ac40:	e8 3b 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ac45:	e9 14 fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_TRAP_BP:RME_DBG_S("Debug breakpoint");break;
ffffffff8021ac4a:	48 c7 c7 89 cd 21 80 	mov    $0xffffffff8021cd89,%rdi
ffffffff8021ac51:	e8 2a 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ac56:	e9 03 fd ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_INT_NMI:RME_DBG_S("NMI error");break;
ffffffff8021ac5b:	48 c7 c7 7f cd 21 80 	mov    $0xffffffff8021cd7f,%rdi
ffffffff8021ac62:	e8 19 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ac67:	e9 f2 fc ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_TRAP_DB:RME_DBG_S("Debug exception");break;
ffffffff8021ac6c:	48 c7 c7 6f cd 21 80 	mov    $0xffffffff8021cd6f,%rdi
ffffffff8021ac73:	e8 08 32 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ac78:	e9 e1 fc ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        case RME_X64_FAULT_DE:RME_DBG_S("Divide error");break;
ffffffff8021ac7d:	48 c7 c7 62 cd 21 80 	mov    $0xffffffff8021cd62,%rdi
ffffffff8021ac84:	e8 f7 31 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ac89:	e9 d0 fc ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
        default:RME_DBG_S("Unknown exception");break;
ffffffff8021ac8e:	48 c7 c7 e7 ce 21 80 	mov    $0xffffffff8021cee7,%rdi
ffffffff8021ac95:	e8 e6 31 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
ffffffff8021ac9a:	e9 bf fc ff ff       	jmp    ffffffff8021a95e <__RME_X64_Fault_Handler+0x4e>
ffffffff8021ac9f:	90                   	nop

ffffffff8021aca0 <__RME_X64_Generic_Handler>:
{
ffffffff8021aca0:	f3 0f 1e fa          	endbr64
ffffffff8021aca4:	53                   	push   %rbx
    RME_DBG_S("\r\nGeneral int:");
ffffffff8021aca5:	48 c7 c7 76 d0 21 80 	mov    $0xffffffff8021d076,%rdi
{
ffffffff8021acac:	48 89 f3             	mov    %rsi,%rbx
    RME_DBG_S("\r\nGeneral int:");
ffffffff8021acaf:	e8 cc 31 ff ff       	call   ffffffff8020de80 <RME_Str_Print>
    RME_DBG_I(Int_Num);
ffffffff8021acb4:	48 89 df             	mov    %rbx,%rdi
}
ffffffff8021acb7:	5b                   	pop    %rbx
    RME_DBG_I(Int_Num);
ffffffff8021acb8:	e9 d3 2f ff ff       	jmp    ffffffff8020dc90 <RME_Int_Print>
ffffffff8021acbd:	0f 1f 00             	nopl   (%rax)

ffffffff8021acc0 <__RME_Pgt_Set>:
{
ffffffff8021acc0:	f3 0f 1e fa          	endbr64
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff8021acc4:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8021accb:	80 00 00 
ffffffff8021acce:	48 01 c7             	add    %rax,%rdi
ffffffff8021acd1:	e9 d3 0b ff ff       	jmp    ffffffff8020b8a9 <__RME_X64_Pgt_Set>
ffffffff8021acd6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021acdd:	00 00 00 

ffffffff8021ace0 <__RME_Pgt_Check>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Check(rme_ptr_t Base_Addr, rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order, rme_ptr_t Num_Order, rme_ptr_t Vaddr)
{
ffffffff8021ace0:	f3 0f 1e fa          	endbr64
    /* Is the table address aligned to 4kB? */
    if((Vaddr&0xFFF)!=0)
        return RME_ERR_HAL_FAIL;
ffffffff8021ace4:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    if((Vaddr&0xFFF)!=0)
ffffffff8021aceb:	41 f7 c0 ff 0f 00 00 	test   $0xfff,%r8d
ffffffff8021acf2:	75 34                	jne    ffffffff8021ad28 <__RME_Pgt_Check+0x48>

    /* Is the size order allowed? */
    if((Size_Order!=RME_PGT_SIZE_512G)&&(Size_Order!=RME_PGT_SIZE_1G)&&
       (Size_Order!=RME_PGT_SIZE_2M)&&(Size_Order!=RME_PGT_SIZE_4K))
ffffffff8021acf4:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff8021acf8:	77 2e                	ja     ffffffff8021ad28 <__RME_Pgt_Check+0x48>
ffffffff8021acfa:	48 bf ff ef df bf 7f 	movabs $0xffffff7fbfdfefff,%rdi
ffffffff8021ad01:	ff ff ff 
ffffffff8021ad04:	48 0f a3 d7          	bt     %rdx,%rdi
ffffffff8021ad08:	72 1e                	jb     ffffffff8021ad28 <__RME_Pgt_Check+0x48>
        return RME_ERR_HAL_FAIL ;

    /* Is the top-level relationship correct? */
    if(((Size_Order==RME_PGT_SIZE_512G)^(Is_Top!=0))!=0)
ffffffff8021ad0a:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff8021ad0e:	0f 94 c0             	sete   %al
ffffffff8021ad11:	48 85 f6             	test   %rsi,%rsi
ffffffff8021ad14:	0f 95 c2             	setne  %dl
ffffffff8021ad17:	31 d0                	xor    %edx,%eax
        return RME_ERR_HAL_FAIL ;
    /* Is the number order allowed? */
    if(Num_Order!=RME_PGT_NUM_512)
ffffffff8021ad19:	48 83 f9 09          	cmp    $0x9,%rcx
ffffffff8021ad1d:	0f 95 c2             	setne  %dl
ffffffff8021ad20:	09 d0                	or     %edx,%eax
ffffffff8021ad22:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad25:	48 f7 d8             	neg    %rax
        return RME_ERR_HAL_FAIL ;

    return 0;
}
ffffffff8021ad28:	c3                   	ret
ffffffff8021ad29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021ad30 <__RME_Pgt_Init>:
Input       : struct RME_Cap_Pgt* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Init(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff8021ad30:	f3 0f 1e fa          	endbr64
    rme_cnt_t Count;
    rme_ptr_t* Ptr;
    
    /* Get the actual table */
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8021ad34:	48 8b 4f 18          	mov    0x18(%rdi),%rcx

    /* Hopefully the compiler optimize this to rep stos */
    for(Count=0;Count<256;Count++)
        Ptr[Count]=0;
ffffffff8021ad38:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021ad3c:	48 8d 91 00 08 00 00 	lea    0x800(%rcx),%rdx
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8021ad43:	48 89 c8             	mov    %rcx,%rax
ffffffff8021ad46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021ad4d:	00 00 00 
        Ptr[Count]=0;
ffffffff8021ad50:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8021ad53:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021ad57:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021ad5b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ad5e:	75 f0                	jne    ffffffff8021ad50 <__RME_Pgt_Init+0x20>

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgt_Op->Base&RME_PGT_TOP)!=0)
ffffffff8021ad60:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021ad64:	74 64                	je     ffffffff8021adca <__RME_Pgt_Init+0x9a>
    {
        for(;Count<512;Count++)
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021ad66:	48 81 e9 00 90 10 80 	sub    $0xffffffff80109000,%rcx
ffffffff8021ad6d:	48 81 fa 08 98 10 80 	cmp    $0xffffffff80109808,%rdx
ffffffff8021ad74:	48 c7 c0 00 98 10 80 	mov    $0xffffffff80109800,%rax
ffffffff8021ad7b:	48 c7 c6 00 a0 10 80 	mov    $0xffffffff8010a000,%rsi
ffffffff8021ad82:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021ad85:	74 21                	je     ffffffff8021ada8 <__RME_Pgt_Init+0x78>
ffffffff8021ad87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021ad8e:	00 00 
ffffffff8021ad90:	f3 0f 6f 08          	movdqu (%rax),%xmm1
ffffffff8021ad94:	0f 11 0c 02          	movups %xmm1,(%rdx,%rax,1)
        for(;Count<512;Count++)
ffffffff8021ad98:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021ad9c:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021ad9f:	75 ef                	jne    ffffffff8021ad90 <__RME_Pgt_Init+0x60>
        for(;Count<512;Count++)
            Ptr[Count]=0;
    }

    return 0;
}
ffffffff8021ada1:	31 c0                	xor    %eax,%eax
ffffffff8021ada3:	c3                   	ret
ffffffff8021ada4:	0f 1f 40 00          	nopl   0x0(%rax)
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021ada8:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021adab:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
        for(;Count<512;Count++)
ffffffff8021adaf:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021adb3:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021adb6:	74 e9                	je     ffffffff8021ada1 <__RME_Pgt_Init+0x71>
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff8021adb8:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021adbb:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
        for(;Count<512;Count++)
ffffffff8021adbf:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021adc3:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021adc6:	75 e0                	jne    ffffffff8021ada8 <__RME_Pgt_Init+0x78>
ffffffff8021adc8:	eb d7                	jmp    ffffffff8021ada1 <__RME_Pgt_Init+0x71>
ffffffff8021adca:	48 8d 81 00 10 00 00 	lea    0x1000(%rcx),%rax
            Ptr[Count]=0;
ffffffff8021add1:	66 0f ef c0          	pxor   %xmm0,%xmm0
ffffffff8021add5:	48 89 c1             	mov    %rax,%rcx
ffffffff8021add8:	48 29 d1             	sub    %rdx,%rcx
ffffffff8021addb:	83 e1 10             	and    $0x10,%ecx
ffffffff8021adde:	74 10                	je     ffffffff8021adf0 <__RME_Pgt_Init+0xc0>
ffffffff8021ade0:	0f 11 02             	movups %xmm0,(%rdx)
        for(;Count<512;Count++)
ffffffff8021ade3:	48 83 c2 10          	add    $0x10,%rdx
ffffffff8021ade7:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021adea:	74 b5                	je     ffffffff8021ada1 <__RME_Pgt_Init+0x71>
ffffffff8021adec:	0f 1f 40 00          	nopl   0x0(%rax)
            Ptr[Count]=0;
ffffffff8021adf0:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8021adf3:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8021adf7:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
        for(;Count<512;Count++)
ffffffff8021adfb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021adfe:	74 a1                	je     ffffffff8021ada1 <__RME_Pgt_Init+0x71>
            Ptr[Count]=0;
ffffffff8021ae00:	0f 11 02             	movups %xmm0,(%rdx)
ffffffff8021ae03:	48 83 c2 20          	add    $0x20,%rdx
ffffffff8021ae07:	0f 11 42 f0          	movups %xmm0,-0x10(%rdx)
        for(;Count<512;Count++)
ffffffff8021ae0b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ae0e:	75 e0                	jne    ffffffff8021adf0 <__RME_Pgt_Init+0xc0>
ffffffff8021ae10:	eb 8f                	jmp    ffffffff8021ada1 <__RME_Pgt_Init+0x71>
ffffffff8021ae12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021ae19:	00 00 00 00 
ffffffff8021ae1d:	0f 1f 00             	nopl   (%rax)

ffffffff8021ae20 <__RME_Pgt_Del_Check>:
Input       : struct RME_Cap_Pgt Pgt_Op* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If can be deleted, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Del_Check(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff8021ae20:	f3 0f 1e fa          	endbr64

    return 0;
}
ffffffff8021ae24:	31 c0                	xor    %eax,%eax
ffffffff8021ae26:	c3                   	ret
ffffffff8021ae27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021ae2e:	00 00 

ffffffff8021ae30 <__RME_Pgt_Page_Map>:
                                architecture specific page table's settings.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Map(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Paddr, rme_ptr_t Pos, rme_ptr_t Flags)
{
ffffffff8021ae30:	f3 0f 1e fa          	endbr64
ffffffff8021ae34:	48 89 f8             	mov    %rdi,%rax
    rme_ptr_t* Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
        return RME_ERR_HAL_FAIL;
ffffffff8021ae37:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
    if((Flags&RME_PGT_READ)==0)
ffffffff8021ae3e:	f6 c1 01             	test   $0x1,%cl
ffffffff8021ae41:	74 4c                	je     ffffffff8021ae8f <__RME_Pgt_Page_Map+0x5f>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021ae43:	48 81 fa ff 00 00 00 	cmp    $0xff,%rdx
ffffffff8021ae4a:	76 06                	jbe    ffffffff8021ae52 <__RME_Pgt_Page_Map+0x22>
ffffffff8021ae4c:	f6 40 30 01          	testb  $0x1,0x30(%rax)
ffffffff8021ae50:	75 3d                	jne    ffffffff8021ae8f <__RME_Pgt_Page_Map+0x5f>
    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);

    /* Generate flags */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021ae52:	83 e1 df             	and    $0xffffffdf,%ecx
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8021ae55:	48 8b 78 18          	mov    0x18(%rax),%rdi
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021ae59:	49 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%r8
ffffffff8021ae60:	ff 0f 00 
ffffffff8021ae63:	4c 21 c6             	and    %r8,%rsi
ffffffff8021ae66:	48 0b 34 cd c0 d6 21 	or     -0x7fde2940(,%rcx,8),%rsi
ffffffff8021ae6d:	80 
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;
ffffffff8021ae6e:	48 89 f1             	mov    %rsi,%rcx
ffffffff8021ae71:	80 c9 84             	or     $0x84,%cl
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff8021ae74:	48 83 78 28 0c       	cmpq   $0xc,0x28(%rax)
ffffffff8021ae79:	74 1d                	je     ffffffff8021ae98 <__RME_Pgt_Page_Map+0x68>

    /* Try to map it in */
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff8021ae7b:	48 8d 14 d7          	lea    (%rdi,%rdx,8),%rdx
ffffffff8021ae7f:	31 c0                	xor    %eax,%eax
ffffffff8021ae81:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021ae86:	0f 94 c1             	sete   %cl
ffffffff8021ae89:	80 f9 01             	cmp    $0x1,%cl
ffffffff8021ae8c:	48 19 ff             	sbb    %rdi,%rdi
        return RME_ERR_HAL_FAIL;

    return 0;
}
ffffffff8021ae8f:	48 89 f8             	mov    %rdi,%rax
ffffffff8021ae92:	c3                   	ret
ffffffff8021ae93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021ae98:	48 83 ce 04          	or     $0x4,%rsi
ffffffff8021ae9c:	48 89 f1             	mov    %rsi,%rcx
ffffffff8021ae9f:	eb da                	jmp    ffffffff8021ae7b <__RME_Pgt_Page_Map+0x4b>
ffffffff8021aea1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021aea8:	00 00 00 00 
ffffffff8021aeac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8021aeb0 <__RME_Pgt_Page_Unmap>:
              rme_ptr_t Pos - The position in the page table.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Unmap(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos)
{
ffffffff8021aeb0:	f3 0f 1e fa          	endbr64
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021aeb4:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021aebb:	76 06                	jbe    ffffffff8021aec3 <__RME_Pgt_Page_Unmap+0x13>
ffffffff8021aebd:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021aec1:	75 3d                	jne    ffffffff8021af00 <__RME_Pgt_Page_Unmap+0x50>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);

    /* Make sure that there is something */
    Temp=Table[Pos];
ffffffff8021aec3:	48 8b 47 18          	mov    0x18(%rdi),%rax
        return RME_ERR_HAL_FAIL;
ffffffff8021aec7:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
    Temp=Table[Pos];
ffffffff8021aece:	48 8d 14 f0          	lea    (%rax,%rsi,8),%rdx
ffffffff8021aed2:	48 8b 02             	mov    (%rdx),%rax
    if(Temp==0)
ffffffff8021aed5:	48 85 c0             	test   %rax,%rax
ffffffff8021aed8:	74 1b                	je     ffffffff8021aef5 <__RME_Pgt_Page_Unmap+0x45>
        return RME_ERR_HAL_FAIL;

    /* Is this a page directory? We cannot unmap page directories like this */
    if((RME_PGT_SIZEORD(Pgt_Op->Order)!=RME_PGT_SIZE_4K)&&((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff8021aeda:	48 83 7f 28 0c       	cmpq   $0xc,0x28(%rdi)
ffffffff8021aedf:	74 04                	je     ffffffff8021aee5 <__RME_Pgt_Page_Unmap+0x35>
ffffffff8021aee1:	a8 80                	test   $0x80,%al
ffffffff8021aee3:	74 10                	je     ffffffff8021aef5 <__RME_Pgt_Page_Unmap+0x45>
ffffffff8021aee5:	31 c9                	xor    %ecx,%ecx
ffffffff8021aee7:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021aeec:	0f 94 c1             	sete   %cl
        return RME_ERR_HAL_FAIL;

    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Table[Pos]),Temp,0)==0)
ffffffff8021aeef:	80 f9 01             	cmp    $0x1,%cl
ffffffff8021aef2:	48 19 c9             	sbb    %rcx,%rcx
        return RME_ERR_HAL_FAIL;

    return 0;
}
ffffffff8021aef5:	48 89 c8             	mov    %rcx,%rax
ffffffff8021aef8:	c3                   	ret
ffffffff8021aef9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        return RME_ERR_HAL_FAIL;
ffffffff8021af00:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
}
ffffffff8021af07:	48 89 c8             	mov    %rcx,%rax
ffffffff8021af0a:	c3                   	ret
ffffffff8021af0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff8021af10 <__RME_Pgt_Pgdir_Map>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Map(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                struct RME_Cap_Pgt* Pgt_Child, rme_ptr_t Flags)
{
ffffffff8021af10:	f3 0f 1e fa          	endbr64
ffffffff8021af14:	48 89 f0             	mov    %rsi,%rax
ffffffff8021af17:	48 89 d6             	mov    %rdx,%rsi
    rme_ptr_t* Child_Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
        return RME_ERR_HAL_FAIL;
ffffffff8021af1a:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
    if((Flags&RME_PGT_READ)==0)
ffffffff8021af21:	f6 c1 01             	test   $0x1,%cl
ffffffff8021af24:	74 50                	je     ffffffff8021af76 <__RME_Pgt_Pgdir_Map+0x66>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021af26:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff8021af2c:	76 06                	jbe    ffffffff8021af34 <__RME_Pgt_Pgdir_Map+0x24>
ffffffff8021af2e:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021af32:	75 42                	jne    ffffffff8021af76 <__RME_Pgt_Pgdir_Map+0x66>
    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
    Child_Table=RME_CAP_GETOBJ(Pgt_Child,rme_ptr_t*);

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021af34:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021af3b:	80 00 00 
ffffffff8021af3e:	83 e1 df             	and    $0xffffffdf,%ecx
ffffffff8021af41:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff8021af45:	48 be 00 f0 ff ff ff 	movabs $0xffffffffff000,%rsi
ffffffff8021af4c:	ff 0f 00 
ffffffff8021af4f:	48 21 f2             	and    %rsi,%rdx
ffffffff8021af52:	48 0b 14 cd c0 d6 21 	or     -0x7fde2940(,%rcx,8),%rdx
ffffffff8021af59:	80 

    /* Try to map it in - may need to increase some count */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff8021af5a:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021af5e:	48 83 ca 04          	or     $0x4,%rdx
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff8021af62:	48 8d 0c c1          	lea    (%rcx,%rax,8),%rcx
ffffffff8021af66:	31 c0                	xor    %eax,%eax
ffffffff8021af68:	f0 48 0f b1 11       	lock cmpxchg %rdx,(%rcx)
ffffffff8021af6d:	0f 94 c2             	sete   %dl
ffffffff8021af70:	80 fa 01             	cmp    $0x1,%dl
ffffffff8021af73:	48 19 d2             	sbb    %rdx,%rdx
        return RME_ERR_HAL_FAIL;

    return 0;
}
ffffffff8021af76:	48 89 d0             	mov    %rdx,%rax
ffffffff8021af79:	c3                   	ret
ffffffff8021af7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff8021af80 <__RME_Pgt_Pgdir_Unmap>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Unmap(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                  struct RME_Cap_Pgt* Pgt_Child)
{
ffffffff8021af80:	f3 0f 1e fa          	endbr64
    rme_ptr_t* Parent_Table;
    //rme_ptr_t* Child_Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff8021af84:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021af8b:	76 06                	jbe    ffffffff8021af93 <__RME_Pgt_Pgdir_Unmap+0x13>
ffffffff8021af8d:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021af91:	75 3d                	jne    ffffffff8021afd0 <__RME_Pgt_Pgdir_Unmap+0x50>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);

    /* Make sure that there is something */
    Temp=Parent_Table[Pos];
ffffffff8021af93:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8021af97:	48 8d 14 f0          	lea    (%rax,%rsi,8),%rdx
        return RME_ERR_HAL_FAIL;
ffffffff8021af9b:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
    Temp=Parent_Table[Pos];
ffffffff8021afa2:	48 8b 02             	mov    (%rdx),%rax
    if(Temp==0)
ffffffff8021afa5:	48 85 c0             	test   %rax,%rax
ffffffff8021afa8:	74 20                	je     ffffffff8021afca <__RME_Pgt_Pgdir_Unmap+0x4a>
        return RME_ERR_HAL_FAIL;

    /* Is this a page? We cannot unmap pages like this */
    if((RME_PGT_SIZEORD(Pgt_Parent->Order)==RME_PGT_SIZE_4K)||((Temp&RME_X64_MMU_PDE_SUP)!=0))
ffffffff8021afaa:	48 83 7f 28 0c       	cmpq   $0xc,0x28(%rdi)
ffffffff8021afaf:	74 19                	je     ffffffff8021afca <__RME_Pgt_Pgdir_Unmap+0x4a>
ffffffff8021afb1:	48 89 c1             	mov    %rax,%rcx
ffffffff8021afb4:	81 e1 80 00 00 00    	and    $0x80,%ecx
ffffffff8021afba:	75 0e                	jne    ffffffff8021afca <__RME_Pgt_Pgdir_Unmap+0x4a>
ffffffff8021afbc:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021afc1:	0f 94 c1             	sete   %cl

    /* Is this child table mapped here? - check that in the future */

    //Child_Table=(rme_ptr_t*)Temp;
    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),Temp,0)==0)
ffffffff8021afc4:	80 f9 01             	cmp    $0x1,%cl
ffffffff8021afc7:	48 19 f6             	sbb    %rsi,%rsi
        return RME_ERR_HAL_FAIL;

    return 0;
}
ffffffff8021afca:	48 89 f0             	mov    %rsi,%rax
ffffffff8021afcd:	c3                   	ret
ffffffff8021afce:	66 90                	xchg   %ax,%ax
        return RME_ERR_HAL_FAIL;
ffffffff8021afd0:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
}
ffffffff8021afd7:	48 89 f0             	mov    %rsi,%rax
ffffffff8021afda:	c3                   	ret
ffffffff8021afdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff8021afe0 <__RME_Pgt_Lookup>:
Output      : rme_ptr_t* Paddr - The physical address of the page.
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Lookup(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos, rme_ptr_t* Paddr, rme_ptr_t* Flags)
{
ffffffff8021afe0:	f3 0f 1e fa          	endbr64
ffffffff8021afe4:	49 89 c9             	mov    %rcx,%r9
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Check if the position is within the range of this page table */
    if((Pos>>RME_PGT_SIZEORD(Pgt_Op->Order))!=0)
ffffffff8021afe7:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff8021afeb:	49 89 f0             	mov    %rsi,%r8
ffffffff8021afee:	49 d3 e8             	shr    %cl,%r8
ffffffff8021aff1:	4d 85 c0             	test   %r8,%r8
ffffffff8021aff4:	75 6e                	jne    ffffffff8021b064 <__RME_Pgt_Lookup+0x84>
        return RME_ERR_HAL_FAIL;

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
    /* Get the position requested - atomic read */
    Temp=Table[Pos];
ffffffff8021aff6:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff8021affa:	48 8b 04 f0          	mov    (%rax,%rsi,8),%rax

    /* Start lookup - is this a terminal page, or? */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff8021affe:	48 83 f9 0c          	cmp    $0xc,%rcx
ffffffff8021b002:	74 5c                	je     ffffffff8021b060 <__RME_Pgt_Lookup+0x80>
        if((Temp&RME_X64_MMU_P)==0)
            return RME_ERR_HAL_FAIL;
    }
    else
    {
        if(((Temp&RME_X64_MMU_P)==0)||((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff8021b004:	48 89 c1             	mov    %rax,%rcx
ffffffff8021b007:	48 f7 d1             	not    %rcx
ffffffff8021b00a:	81 e1 81 00 00 00    	and    $0x81,%ecx
ffffffff8021b010:	75 52                	jne    ffffffff8021b064 <__RME_Pgt_Lookup+0x84>
            return RME_ERR_HAL_FAIL;
    }

    /* This is a page. Return the physical address and flags */
    if(Paddr!=0)
ffffffff8021b012:	48 85 d2             	test   %rdx,%rdx
ffffffff8021b015:	74 10                	je     ffffffff8021b027 <__RME_Pgt_Lookup+0x47>
        *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff8021b017:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff8021b01e:	ff 0f 00 
ffffffff8021b021:	48 21 c1             	and    %rax,%rcx
ffffffff8021b024:	48 89 0a             	mov    %rcx,(%rdx)

    if(Flags!=0)
ffffffff8021b027:	4d 85 c9             	test   %r9,%r9
ffffffff8021b02a:	74 2c                	je     ffffffff8021b058 <__RME_Pgt_Lookup+0x78>
        *Flags=RME_X64_PGFLG_NAT2RME(Temp);
ffffffff8021b02c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b02f:	48 89 c1             	mov    %rax,%rcx
ffffffff8021b032:	48 d1 e8             	shr    $1,%rax
ffffffff8021b035:	48 c1 ea 3f          	shr    $0x3f,%rdx
ffffffff8021b039:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff8021b03d:	83 e0 01             	and    $0x1,%eax
ffffffff8021b040:	48 c1 e2 03          	shl    $0x3,%rdx
ffffffff8021b044:	83 e1 06             	and    $0x6,%ecx
ffffffff8021b047:	48 09 ca             	or     %rcx,%rdx
ffffffff8021b04a:	48 09 d0             	or     %rdx,%rax
ffffffff8021b04d:	48 8b 04 c5 40 d6 21 	mov    -0x7fde29c0(,%rax,8),%rax
ffffffff8021b054:	80 
ffffffff8021b055:	49 89 01             	mov    %rax,(%r9)

    return 0;
}
ffffffff8021b058:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b05b:	c3                   	ret
ffffffff8021b05c:	0f 1f 40 00          	nopl   0x0(%rax)
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b060:	a8 01                	test   $0x1,%al
ffffffff8021b062:	75 ae                	jne    ffffffff8021b012 <__RME_Pgt_Lookup+0x32>
        return RME_ERR_HAL_FAIL;
ffffffff8021b064:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
}
ffffffff8021b06b:	4c 89 c0             	mov    %r8,%rax
ffffffff8021b06e:	c3                   	ret
ffffffff8021b06f:	90                   	nop

ffffffff8021b070 <__RME_Pgt_Walk>:
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Walk(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Vaddr, rme_ptr_t* Pgt,
                           rme_ptr_t* Map_Vaddr, rme_ptr_t* Paddr, rme_ptr_t* Size_Order, rme_ptr_t* Num_Order, rme_ptr_t* Flags)
{
ffffffff8021b070:	f3 0f 1e fa          	endbr64
    /* Check if this is the top-level page table */
    if(((Pgt_Op->Base)&RME_PGT_TOP)==0)
        return RME_ERR_HAL_FAIL;

    /* Are we attempting a kernel or non-canonical lookup? If yes, stop immediately */
    if(Vaddr>=0x7FFFFFFFFFFFULL)
ffffffff8021b074:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021b078:	0f 84 8a 01 00 00    	je     ffffffff8021b208 <__RME_Pgt_Walk+0x198>
ffffffff8021b07e:	49 89 d3             	mov    %rdx,%r11
ffffffff8021b081:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffe,%rdx
ffffffff8021b088:	7f 00 00 
ffffffff8021b08b:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021b08e:	0f 82 74 01 00 00    	jb     ffffffff8021b208 <__RME_Pgt_Walk+0x198>
        return RME_ERR_HAL_FAIL;

    /* Get the table and start lookup */
    Table=RME_CAP_GETOBJ(Pgt_Op, rme_ptr_t*);
ffffffff8021b094:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
    Flags_Accum=0xFFF;
    No_Execute=0;
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b098:	48 89 f0             	mov    %rsi,%rax
ffffffff8021b09b:	48 c1 e8 27          	shr    $0x27,%rax
        /* Atomic read */
        Temp=Table[Pos];
ffffffff8021b09f:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b0a3:	a8 01                	test   $0x1,%al
ffffffff8021b0a5:	0f 84 5d 01 00 00    	je     ffffffff8021b208 <__RME_Pgt_Walk+0x198>
{
ffffffff8021b0ab:	41 54                	push   %r12
ffffffff8021b0ad:	49 89 ca             	mov    %rcx,%r10
ffffffff8021b0b0:	55                   	push   %rbp
ffffffff8021b0b1:	53                   	push   %rbx
            return RME_ERR_HAL_FAIL;
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b0b2:	a8 80                	test   $0x80,%al
ffffffff8021b0b4:	0f 85 7e 01 00 00    	jne    ffffffff8021b238 <__RME_Pgt_Walk+0x1c8>
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Flags_Accum&=Temp;
            No_Execute|=Temp&RME_X64_MMU_NX;
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b0ba:	48 bb 00 f0 ff ff ff 	movabs $0xffffffffff000,%rbx
ffffffff8021b0c1:	ff 0f 00 
ffffffff8021b0c4:	48 89 c7             	mov    %rax,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b0c7:	48 89 f1             	mov    %rsi,%rcx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b0ca:	49 bc 00 00 00 00 00 	movabs $0xffff800000000000,%r12
ffffffff8021b0d1:	80 ff ff 
ffffffff8021b0d4:	48 21 df             	and    %rbx,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b0d7:	48 c1 e9 1e          	shr    $0x1e,%rcx
            Flags_Accum&=Temp;
ffffffff8021b0db:	48 89 c2             	mov    %rax,%rdx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b0de:	4c 01 e7             	add    %r12,%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b0e1:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
            Flags_Accum&=Temp;
ffffffff8021b0e7:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
        Temp=Table[Pos];
ffffffff8021b0ed:	48 8b 0c cf          	mov    (%rdi,%rcx,8),%rcx
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b0f1:	f6 c1 01             	test   $0x1,%cl
ffffffff8021b0f4:	0f 84 16 01 00 00    	je     ffffffff8021b210 <__RME_Pgt_Walk+0x1a0>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b0fa:	f6 c1 80             	test   $0x80,%cl
ffffffff8021b0fd:	0f 85 4d 01 00 00    	jne    ffffffff8021b250 <__RME_Pgt_Walk+0x1e0>
            Flags_Accum&=Temp;
ffffffff8021b103:	48 09 c8             	or     %rcx,%rax
ffffffff8021b106:	48 21 ca             	and    %rcx,%rdx
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b109:	48 21 d9             	and    %rbx,%rcx
ffffffff8021b10c:	48 89 c5             	mov    %rax,%rbp
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b10f:	48 89 f0             	mov    %rsi,%rax
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b112:	4a 8d 3c 21          	lea    (%rcx,%r12,1),%rdi
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b116:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8021b11a:	25 ff 01 00 00       	and    $0x1ff,%eax
        Temp=Table[Pos];
ffffffff8021b11f:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b123:	a8 01                	test   $0x1,%al
ffffffff8021b125:	0f 84 e5 00 00 00    	je     ffffffff8021b210 <__RME_Pgt_Walk+0x1a0>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b12b:	a8 80                	test   $0x80,%al
ffffffff8021b12d:	0f 85 e6 00 00 00    	jne    ffffffff8021b219 <__RME_Pgt_Walk+0x1a9>
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b133:	48 09 c5             	or     %rax,%rbp
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b136:	48 21 c3             	and    %rax,%rbx
            Flags_Accum&=Temp;
ffffffff8021b139:	48 21 c2             	and    %rax,%rdx
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b13c:	48 89 f0             	mov    %rsi,%rax
ffffffff8021b13f:	48 c1 e8 0c          	shr    $0xc,%rax
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff8021b143:	4a 8d 3c 23          	lea    (%rbx,%r12,1),%rdi
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b147:	48 b9 00 00 00 00 00 	movabs $0x8000000000000000,%rcx
ffffffff8021b14e:	00 00 80 
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b151:	25 ff 01 00 00       	and    $0x1ff,%eax
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b156:	48 21 cd             	and    %rcx,%rbp
        Temp=Table[Pos];
ffffffff8021b159:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        if((Temp&RME_X64_MMU_P)==0)
ffffffff8021b15d:	a8 01                	test   $0x1,%al
ffffffff8021b15f:	0f 84 ab 00 00 00    	je     ffffffff8021b210 <__RME_Pgt_Walk+0x1a0>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8021b165:	bb 0c 00 00 00       	mov    $0xc,%ebx
ffffffff8021b16a:	b9 0c 00 00 00       	mov    $0xc,%ecx
            if(Pgt!=0)
ffffffff8021b16f:	4d 85 db             	test   %r11,%r11
ffffffff8021b172:	74 03                	je     ffffffff8021b177 <__RME_Pgt_Walk+0x107>
                *Pgt=(rme_ptr_t)Table;
ffffffff8021b174:	49 89 3b             	mov    %rdi,(%r11)
            if(Map_Vaddr!=0)
ffffffff8021b177:	4d 85 d2             	test   %r10,%r10
ffffffff8021b17a:	74 10                	je     ffffffff8021b18c <__RME_Pgt_Walk+0x11c>
                *Map_Vaddr=RME_ROUND_DOWN(Vaddr,Size_Cnt);
ffffffff8021b17c:	48 c7 c7 ff ff ff ff 	mov    $0xffffffffffffffff,%rdi
ffffffff8021b183:	48 d3 e7             	shl    %cl,%rdi
ffffffff8021b186:	48 21 f7             	and    %rsi,%rdi
ffffffff8021b189:	49 89 3a             	mov    %rdi,(%r10)
            if(Paddr!=0)
ffffffff8021b18c:	4d 85 c0             	test   %r8,%r8
ffffffff8021b18f:	74 10                	je     ffffffff8021b1a1 <__RME_Pgt_Walk+0x131>
                *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff8021b191:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff8021b198:	ff 0f 00 
ffffffff8021b19b:	48 21 c1             	and    %rax,%rcx
ffffffff8021b19e:	49 89 08             	mov    %rcx,(%r8)
            if(Size_Order!=0)
ffffffff8021b1a1:	4d 85 c9             	test   %r9,%r9
ffffffff8021b1a4:	74 03                	je     ffffffff8021b1a9 <__RME_Pgt_Walk+0x139>
                *Size_Order=Size_Cnt;
ffffffff8021b1a6:	49 89 19             	mov    %rbx,(%r9)
            if(Num_Order!=0)
ffffffff8021b1a9:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
ffffffff8021b1af:	74 0c                	je     ffffffff8021b1bd <__RME_Pgt_Walk+0x14d>
                *Num_Order=RME_PGT_NUM_512;
ffffffff8021b1b1:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
ffffffff8021b1b6:	48 c7 03 09 00 00 00 	movq   $0x9,(%rbx)
            if(Flags!=0)
ffffffff8021b1bd:	48 83 7c 24 28 00    	cmpq   $0x0,0x28(%rsp)
ffffffff8021b1c3:	74 37                	je     ffffffff8021b1fc <__RME_Pgt_Walk+0x18c>
                *Flags=RME_X64_PGFLG_NAT2RME(No_Execute|(Temp&Flags_Accum));
ffffffff8021b1c5:	48 21 c2             	and    %rax,%rdx
ffffffff8021b1c8:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
ffffffff8021b1cd:	48 09 ea             	or     %rbp,%rdx
ffffffff8021b1d0:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b1d3:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021b1d6:	48 d1 ea             	shr    $1,%rdx
ffffffff8021b1d9:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8021b1dd:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff8021b1e1:	83 e2 01             	and    $0x1,%edx
ffffffff8021b1e4:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8021b1e8:	83 e1 06             	and    $0x6,%ecx
ffffffff8021b1eb:	48 09 c8             	or     %rcx,%rax
ffffffff8021b1ee:	48 09 d0             	or     %rdx,%rax
ffffffff8021b1f1:	48 8b 04 c5 40 d6 21 	mov    -0x7fde29c0(,%rax,8),%rax
ffffffff8021b1f8:	80 
ffffffff8021b1f9:	48 89 03             	mov    %rax,(%rbx)

        /* The size order always decreases by 512 */
        Size_Cnt-=RME_PGT_SIZE_512B;
    }

    return 0;
ffffffff8021b1fc:	31 c0                	xor    %eax,%eax
}
ffffffff8021b1fe:	5b                   	pop    %rbx
ffffffff8021b1ff:	5d                   	pop    %rbp
ffffffff8021b200:	41 5c                	pop    %r12
ffffffff8021b202:	c3                   	ret
ffffffff8021b203:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return RME_ERR_HAL_FAIL;
ffffffff8021b208:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
ffffffff8021b20f:	c3                   	ret
        return RME_ERR_HAL_FAIL;
ffffffff8021b210:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b217:	eb e5                	jmp    ffffffff8021b1fe <__RME_Pgt_Walk+0x18e>
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b219:	48 b9 00 00 00 00 00 	movabs $0x8000000000000000,%rcx
ffffffff8021b220:	00 00 80 
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff8021b223:	bb 15 00 00 00       	mov    $0x15,%ebx
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b228:	48 21 cd             	and    %rcx,%rbp
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b22b:	b9 15 00 00 00       	mov    $0x15,%ecx
ffffffff8021b230:	e9 3a ff ff ff       	jmp    ffffffff8021b16f <__RME_Pgt_Walk+0xff>
ffffffff8021b235:	0f 1f 00             	nopl   (%rax)
    No_Execute=0;
ffffffff8021b238:	31 ed                	xor    %ebp,%ebp
    Flags_Accum=0xFFF;
ffffffff8021b23a:	ba ff 0f 00 00       	mov    $0xfff,%edx
    Size_Cnt=RME_PGT_SIZE_512G;
ffffffff8021b23f:	bb 27 00 00 00       	mov    $0x27,%ebx
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b244:	b9 27 00 00 00       	mov    $0x27,%ecx
ffffffff8021b249:	e9 21 ff ff ff       	jmp    ffffffff8021b16f <__RME_Pgt_Walk+0xff>
ffffffff8021b24e:	66 90                	xchg   %ax,%ax
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b250:	48 bd 00 00 00 00 00 	movabs $0x8000000000000000,%rbp
ffffffff8021b257:	00 00 80 
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff8021b25a:	bb 1e 00 00 00       	mov    $0x1e,%ebx
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff8021b25f:	48 21 c5             	and    %rax,%rbp
        Temp=Table[Pos];
ffffffff8021b262:	48 89 c8             	mov    %rcx,%rax
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8021b265:	b9 1e 00 00 00       	mov    $0x1e,%ecx
ffffffff8021b26a:	e9 00 ff ff ff       	jmp    ffffffff8021b16f <__RME_Pgt_Walk+0xff>
ffffffff8021b26f:	90                   	nop

ffffffff8021b270 <__RME_Svc_Param_Get>:
/* End Function:__RME_X64_Pgt_Set*/

/*Function:__RME_Svc_Param_Get*/

void __RME_Svc_Param_Get(struct RME_Reg_Struct* Reg,rme_ptr_t* Svc,rme_ptr_t* Cid,rme_ptr_t* Param)
{
ffffffff8021b270:	f3 0f 1e fa          	endbr64

}
ffffffff8021b274:	c3                   	ret
ffffffff8021b275:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8021b27c:	00 00 00 00 

ffffffff8021b280 <__RME_Svc_Retval_Set>:
/*End Function:__RME_Svc_Param_Get*/

/*Function:__RME_Svc_Retval_Set*/

void __RME_Svc_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff8021b280:	f3 0f 1e fa          	endbr64

}
ffffffff8021b284:	c3                   	ret
ffffffff8021b285:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8021b28c:	00 00 00 
ffffffff8021b28f:	90                   	nop

ffffffff8021b290 <main>:
{
ffffffff8021b290:	f3 0f 1e fa          	endbr64
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021b294:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b29b:	80 ff ff 
{
ffffffff8021b29e:	48 83 ec 08          	sub    $0x8,%rsp
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021b2a2:	48 01 c7             	add    %rax,%rdi
ffffffff8021b2a5:	48 89 3d 7c c4 00 00 	mov    %rdi,0xc47c(%rip)        # ffffffff80227728 <RME_X64_MBInfo>
    _RME_Kmain(RME_KOM_STACK_ADDR);
ffffffff8021b2ac:	48 c7 c7 00 b8 20 80 	mov    $0xffffffff8020b800,%rdi
ffffffff8021b2b3:	e8 fb 05 ff ff       	call   ffffffff8020b8b3 <_RME_Kmain>
}
ffffffff8021b2b8:	31 c0                	xor    %eax,%eax
ffffffff8021b2ba:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021b2be:	c3                   	ret
